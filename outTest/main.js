var __create = Object.create;
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[Object.keys(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  __markAsModule(target);
  for (var name2 in all)
    __defProp(target, name2, { get: all[name2], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __decorateClass = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp(target, key, result);
  return result;
};

// node_modules/@tbmini/server-sdk/dist/utils/findPass.js
var require_findPass = __commonJS({
  "node_modules/@tbmini/server-sdk/dist/utils/findPass.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.findPass = void 0;
    var checkParams = function(params, allowEmpty) {
      if (allowEmpty === void 0) {
        allowEmpty = false;
      }
      var keys = Object.keys(params);
      if (keys.length < 1) {
        return allowEmpty;
      }
      var datas = keys.filter(function(v) {
        return params[v] === void 0;
      });
      return !(datas.length > 0);
    };
    var findPass = function(query, projection, force) {
      if (force)
        return true;
      var _query = checkParams(query);
      var _projection = checkParams(projection, true);
      return _query && _projection;
    };
    exports.findPass = findPass;
  }
});

// node_modules/@tbmini/server-sdk/dist/dao/base.dao.js
var require_base_dao = __commonJS({
  "node_modules/@tbmini/server-sdk/dist/dao/base.dao.js"(exports) {
    "use strict";
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BaseDao = void 0;
    var findPass_1 = require_findPass();
    var BaseDao3 = function() {
      function BaseDao4(context, dbName) {
        this.dbName = dbName;
        this.db = context.cloud.db;
        this.dbName = dbName;
      }
      BaseDao4.prototype.findOne = function(query, projection, force) {
        if (projection === void 0) {
          projection = {};
        }
        if (force === void 0) {
          force = false;
        }
        return __awaiter(this, void 0, void 0, function() {
          var pass, result;
          return __generator(this, function(_a) {
            switch (_a.label) {
              case 0:
                pass = (0, findPass_1.findPass)(query, projection, force);
                if (!pass) {
                  throw Error("\u53C2\u6570\u5B58\u5728undefined\uFF0C\u4E0D\u5141\u8BB8\u7EE7\u7EED\u6267\u884C");
                }
                return [4, this.db.collection(this.dbName).find(query, __assign(__assign({}, projection), { limit: 1 }))];
              case 1:
                result = _a.sent();
                return [2, result[0]];
            }
          });
        });
      };
      BaseDao4.prototype.find = function(query, projection, force) {
        if (projection === void 0) {
          projection = {};
        }
        if (force === void 0) {
          force = false;
        }
        return __awaiter(this, void 0, void 0, function() {
          var pass;
          return __generator(this, function(_a) {
            switch (_a.label) {
              case 0:
                pass = (0, findPass_1.findPass)(query, projection, force);
                if (!pass) {
                  throw Error("\u53C2\u6570\u5B58\u5728undefined\uFF0C\u4E0D\u5141\u8BB8\u7EE7\u7EED\u6267\u884C");
                }
                return [4, this.db.collection(this.dbName).find(query, __assign({}, projection))];
              case 1:
                return [2, _a.sent()];
            }
          });
        });
      };
      BaseDao4.prototype.insertOne = function(document2) {
        return __awaiter(this, void 0, void 0, function() {
          return __generator(this, function(_a) {
            switch (_a.label) {
              case 0:
                return [4, this.db.collection(this.dbName).insertOne(document2)];
              case 1:
                return [2, _a.sent()];
            }
          });
        });
      };
      BaseDao4.prototype.insertMany = function(documents) {
        return __awaiter(this, void 0, void 0, function() {
          return __generator(this, function(_a) {
            switch (_a.label) {
              case 0:
                return [4, this.db.collection(this.dbName).insertMany(documents)];
              case 1:
                return [2, _a.sent()];
            }
          });
        });
      };
      BaseDao4.prototype.update = function(query, options) {
        return __awaiter(this, void 0, void 0, function() {
          return __generator(this, function(_a) {
            switch (_a.label) {
              case 0:
                return [4, this.db.collection(this.dbName).updateMany(query, options)];
              case 1:
                return [2, _a.sent()];
            }
          });
        });
      };
      BaseDao4.prototype.delete = function(filter) {
        return __awaiter(this, void 0, void 0, function() {
          return __generator(this, function(_a) {
            switch (_a.label) {
              case 0:
                return [4, this.db.collection(this.dbName).deleteMany(filter)];
              case 1:
                return [2, _a.sent()];
            }
          });
        });
      };
      BaseDao4.prototype.count = function(query, options) {
        return __awaiter(this, void 0, void 0, function() {
          return __generator(this, function(_a) {
            switch (_a.label) {
              case 0:
                return [4, this.db.collection(this.dbName).count(query, options)];
              case 1:
                return [2, _a.sent()];
            }
          });
        });
      };
      BaseDao4.prototype.aggregate = function(aggregateOperation) {
        return __awaiter(this, void 0, void 0, function() {
          return __generator(this, function(_a) {
            switch (_a.label) {
              case 0:
                return [4, this.db.collection(this.dbName).aggregate(aggregateOperation)];
              case 1:
                return [2, _a.sent()];
            }
          });
        });
      };
      return BaseDao4;
    }();
    exports.BaseDao = BaseDao3;
  }
});

// node_modules/@tbmini/server-sdk/dist/utils/formatter.js
var require_formatter = __commonJS({
  "node_modules/@tbmini/server-sdk/dist/utils/formatter.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.dateFormatter = void 0;
    var dateFormatter3 = function(thisDate, fmt) {
      if (fmt === void 0) {
        fmt = "yyyy-MM-dd hh:mm:ss";
      }
      var o = {
        "M+": thisDate.getMonth() + 1,
        "d+": thisDate.getDate(),
        "h+": thisDate.getHours(),
        "m+": thisDate.getMinutes(),
        "s+": thisDate.getSeconds(),
        "q+": Math.floor((thisDate.getMonth() + 3) / 3),
        S: thisDate.getMilliseconds()
      };
      if (/(y+)/.test(fmt))
        fmt = fmt.replace(RegExp.$1, (thisDate.getFullYear() + "").substr(4 - RegExp.$1.length));
      for (var k in o) {
        if (new RegExp("(" + k + ")").test(fmt)) {
          fmt = fmt.replace(RegExp.$1, RegExp.$1.length === 1 ? o[k] : ("00" + o[k]).substr(("" + o[k]).length));
        }
      }
      return fmt;
    };
    exports.dateFormatter = dateFormatter3;
  }
});

// node_modules/@tbmini/server-sdk/dist/utils/formatInvoke.js
var require_formatInvoke = __commonJS({
  "node_modules/@tbmini/server-sdk/dist/utils/formatInvoke.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.formatInvoke = void 0;
    var formatInvoke = function(invokeInfo) {
      var session = invokeInfo.data.session;
      if (!session) {
        invokeInfo.autoSession = true;
      }
      return invokeInfo;
    };
    exports.formatInvoke = formatInvoke;
  }
});

// node_modules/@tbmini/server-sdk/dist/service/TBAPI.js
var require_TBAPI = __commonJS({
  "node_modules/@tbmini/server-sdk/dist/service/TBAPI.js"(exports) {
    "use strict";
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.specialItemMark = exports.configMiniApp = exports.updateMiniInstance = exports.pushInstanceOnline = exports.getTemplateInstantiate = exports.getBuyerOrderList = exports.getItemListInStock = exports.getItemListOnSale = exports.getShopInfo = exports.benefitSend = exports.changeCredits = exports.queryCredits = exports.queryVipinfo = exports.getPrizeByEname = exports.getItemListByItemIds = void 0;
    var formatter_1 = require_formatter();
    var formatInvoke_1 = require_formatInvoke();
    var getItemListByItemIds = function(context, itemIds, extrainfo, session) {
      return __awaiter(void 0, void 0, void 0, function() {
        var invokeInfo, result;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              if (!context) {
                throw Error("\u53C2\u6570context\u4E0D\u80FD\u4E3A\u7A7A");
              }
              if (!itemIds) {
                throw Error("\u53C2\u6570itemIds\u4E0D\u80FD\u4E3A\u7A7A");
              }
              extrainfo.fields = extrainfo.fields || "detail_url,approve_status,num_iid,title,nick,type,cid,pic_url,num,props,valid_thru,list_time,price,has_discount,has_invoice,has_warranty,has_showcase,modified,delist_time,postage_id,seller_cids,outer_id,sold_quantity";
              invokeInfo = {
                api: "taobao.items.seller.list.get",
                data: __assign(__assign({ session }, extrainfo), { num_iids: itemIds })
              };
              return [4, context.cloud.topApi.invoke((0, formatInvoke_1.formatInvoke)(invokeInfo))];
            case 1:
              result = _a.sent();
              return [2, result];
          }
        });
      });
    };
    exports.getItemListByItemIds = getItemListByItemIds;
    var getPrizeByEname = function(context, ename, appName, session) {
      return __awaiter(void 0, void 0, void 0, function() {
        var invokeInfo, benefitData;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              if (!context) {
                throw Error("\u53C2\u6570context\u4E0D\u80FD\u4E3A\u7A7A");
              }
              if (!ename) {
                throw Error("\u53C2\u6570ename\u4E0D\u80FD\u4E3A\u7A7A");
              }
              if (!appName) {
                throw Error("\u53C2\u6570appName\u4E0D\u80FD\u4E3A\u7A7A");
              }
              invokeInfo = {
                api: "alibaba.benefit.query",
                data: {
                  session,
                  ename,
                  app_name: appName,
                  award_type: 1
                }
              };
              return [4, context.cloud.topApi.invoke((0, formatInvoke_1.formatInvoke)(invokeInfo))];
            case 1:
              benefitData = _a.sent();
              return [2, benefitData];
          }
        });
      });
    };
    exports.getPrizeByEname = getPrizeByEname;
    var queryVipinfo = function(context, session) {
      return __awaiter(void 0, void 0, void 0, function() {
        var mixNick, invokeInfo, result;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              if (!context) {
                throw Error("\u53C2\u6570context\u4E0D\u80FD\u4E3A\u7A7A");
              }
              mixNick = context.mixNick;
              invokeInfo = {
                api: "taobao.crm.member.identity.get",
                data: {
                  session,
                  mix_nick: mixNick
                }
              };
              return [
                4,
                context.cloud.topApi.invoke((0, formatInvoke_1.formatInvoke)(invokeInfo))
              ];
            case 1:
              result = _a.sent();
              return [2, result];
          }
        });
      });
    };
    exports.queryVipinfo = queryVipinfo;
    var queryCredits = function(context, session) {
      return __awaiter(void 0, void 0, void 0, function() {
        var mixNick, invokeInfo, result;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              if (!context) {
                throw Error("\u53C2\u6570context\u4E0D\u80FD\u4E3A\u7A7A");
              }
              mixNick = context.mixNick;
              invokeInfo = {
                api: "taobao.crm.point.available.get",
                data: {
                  session,
                  mix_nick: mixNick
                }
              };
              return [4, context.cloud.topApi.invoke((0, formatInvoke_1.formatInvoke)(invokeInfo))];
            case 1:
              result = _a.sent();
              console.log("taobao.crm.point.available.get", result);
              return [2, result.result];
          }
        });
      });
    };
    exports.queryCredits = queryCredits;
    var changeCredits = function(context, options, session) {
      return __awaiter(void 0, void 0, void 0, function() {
        var mixNick, env2, quantity, _a, change_type, _b, remark, account_date, _c, need_account_date, opt_type, data, invokeInfo, result;
        return __generator(this, function(_d) {
          switch (_d.label) {
            case 0:
              if (!context) {
                throw Error("\u53C2\u6570context\u4E0D\u80FD\u4E3A\u7A7A");
              }
              mixNick = context.mixNick, env2 = context.env;
              quantity = options.quantity, _a = options.change_type, change_type = _a === void 0 ? 1 : _a, _b = options.remark, remark = _b === void 0 ? "\u53C2\u4E0E\u6D3B\u52A8" : _b, account_date = options.account_date, _c = options.need_account_date, need_account_date = _c === void 0 ? false : _c;
              opt_type = options.opt_type;
              if (!opt_type) {
                opt_type = "0";
              }
              data = {
                session,
                quantity,
                change_type,
                opt_type,
                remark,
                mix_nick: mixNick,
                account_date
              };
              if (!account_date || env2 === "online" && !need_account_date) {
                delete data.account_date;
              }
              invokeInfo = {
                api: "taobao.crm.point.change",
                data
              };
              return [4, context.cloud.topApi.invoke((0, formatInvoke_1.formatInvoke)(invokeInfo))];
            case 1:
              result = _d.sent();
              console.log("taobao.crm.point.change", result);
              return [2, result];
          }
        });
      });
    };
    exports.changeCredits = changeCredits;
    var benefitSend = function(context, args) {
      return __awaiter(void 0, void 0, void 0, function() {
        var right_ename, receiver_id, app_name, session, unique_id, invokeInfo, result;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              right_ename = args.right_ename, receiver_id = args.receiver_id, app_name = args.app_name, session = args.session;
              unique_id = args.unique_id;
              if (!context) {
                throw Error("\u53C2\u6570context\u4E0D\u80FD\u4E3A\u7A7A");
              }
              if (!right_ename) {
                throw Error("\u53C2\u6570right_ename(\u6743\u76CA\u540D)\u4E0D\u80FD\u4E3A\u7A7A");
              }
              if (!receiver_id) {
                throw Error("\u53C2\u6570receiver_id(\u63A5\u6536\u8005)\u4E0D\u80FD\u4E3A\u7A7A");
              }
              if (!app_name) {
                throw Error("\u53C2\u6570app_name\u4E0D\u80FD\u4E3A\u7A7A");
              }
              if (!unique_id) {
                unique_id = Date.now().toString();
              }
              invokeInfo = {
                api: "alibaba.benefit.send",
                data: {
                  right_ename,
                  receiver_id,
                  user_type: "taobao",
                  unique_id,
                  app_name,
                  session
                }
              };
              return [4, context.cloud.topApi.invoke((0, formatInvoke_1.formatInvoke)(invokeInfo))];
            case 1:
              result = _a.sent();
              console.log("alibaba.benefit.send", result);
              return [2, result];
          }
        });
      });
    };
    exports.benefitSend = benefitSend;
    var getShopInfo = function(context, args) {
      return __awaiter(void 0, void 0, void 0, function() {
        var fields, session, invokeInfo;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              fields = args.fields, session = args.session;
              if (!context) {
                throw Error("\u53C2\u6570context\u4E0D\u80FD\u4E3A\u7A7A");
              }
              invokeInfo = {
                api: "taobao.shop.seller.get",
                data: {
                  fields: fields || "sid,title,pic_path",
                  session
                }
              };
              return [4, context.cloud.topApi.invoke((0, formatInvoke_1.formatInvoke)(invokeInfo))];
            case 1:
              return [2, _a.sent()];
          }
        });
      });
    };
    exports.getShopInfo = getShopInfo;
    var GOODS_DEFAULT_TYPE = "detail_url,approve_status,num_iid,title,nick,type,cid,pic_url,num,props,valid_thru,list_time,price,has_discount,has_invoice,has_warranty,has_showcase,modified,delist_time,postage_id,seller_cids,outer_id,sold_quantity";
    var getItemListOnSale = function(context, args) {
      return __awaiter(void 0, void 0, void 0, function() {
        var fields, _a, pageNo, _b, pageSize, session, _c, title2, invokeInfo;
        return __generator(this, function(_d) {
          switch (_d.label) {
            case 0:
              fields = args.fields, _a = args.pageNo, pageNo = _a === void 0 ? 1 : _a, _b = args.pageSize, pageSize = _b === void 0 ? 10 : _b, session = args.session, _c = args.title, title2 = _c === void 0 ? "" : _c;
              if (!context) {
                throw Error("\u53C2\u6570context\u4E0D\u80FD\u4E3A\u7A7A");
              }
              invokeInfo = {
                api: "taobao.items.onsale.get",
                data: {
                  fields: fields || GOODS_DEFAULT_TYPE,
                  page_no: pageNo,
                  page_size: pageSize,
                  q: title2,
                  session
                }
              };
              return [4, context.cloud.topApi.invoke((0, formatInvoke_1.formatInvoke)(invokeInfo))];
            case 1:
              return [2, _d.sent()];
          }
        });
      });
    };
    exports.getItemListOnSale = getItemListOnSale;
    var getItemListInStock = function(context, args) {
      return __awaiter(void 0, void 0, void 0, function() {
        var fields, _a, pageNo, _b, pageSize, session, _c, title2, invokeInfo;
        return __generator(this, function(_d) {
          switch (_d.label) {
            case 0:
              fields = args.fields, _a = args.pageNo, pageNo = _a === void 0 ? 1 : _a, _b = args.pageSize, pageSize = _b === void 0 ? 10 : _b, session = args.session, _c = args.title, title2 = _c === void 0 ? "" : _c;
              if (!context) {
                throw Error("\u53C2\u6570context\u4E0D\u80FD\u4E3A\u7A7A");
              }
              invokeInfo = {
                api: "taobao.items.inventory.get",
                data: {
                  fields: fields || GOODS_DEFAULT_TYPE,
                  page_no: pageNo,
                  page_size: pageSize,
                  q: title2,
                  session
                }
              };
              return [4, context.cloud.topApi.invoke((0, formatInvoke_1.formatInvoke)(invokeInfo))];
            case 1:
              return [2, _d.sent()];
          }
        });
      });
    };
    exports.getItemListInStock = getItemListInStock;
    var ORDER_FIELDS = "tid,type,status,payment,orders,rx_audit_status,pay_time";
    var GOODS_TYPE = "guarantee_trade,auto_delivery,ec,cod,step";
    var THREE_MONTH_TIME = 60 * 60 * 24 * 30 * 3 * 1e3;
    var getBuyerOrderList = function(context, args) {
      return __awaiter(void 0, void 0, void 0, function() {
        var _a, fields, startTime, endTime, _b, pageNo, _c, pageSize, session, _d, status, _e, type, _f, useNext, openId, invokeInfo, result;
        return __generator(this, function(_g) {
          switch (_g.label) {
            case 0:
              _a = args.fields, fields = _a === void 0 ? ORDER_FIELDS : _a, startTime = args.startTime, endTime = args.endTime, _b = args.pageNo, pageNo = _b === void 0 ? 1 : _b, _c = args.pageSize, pageSize = _c === void 0 ? 100 : _c, session = args.session, _d = args.status, status = _d === void 0 ? "" : _d, _e = args.type, type = _e === void 0 ? GOODS_TYPE : _e, _f = args.useNext, useNext = _f === void 0 ? false : _f, openId = args.openId;
              if (!context) {
                throw Error("\u53C2\u6570context\u4E0D\u80FD\u4E3A\u7A7A");
              }
              if (!openId) {
                throw Error("\u53C2\u6570openId\u4E0D\u80FD\u4E3A\u7A7A");
              }
              invokeInfo = {
                api: "taobao.open.trades.sold.get",
                data: {
                  fields,
                  status,
                  session,
                  type,
                  start_created: startTime || (0, formatter_1.dateFormatter)(new Date(Date.now() - THREE_MONTH_TIME)),
                  end_created: endTime || (0, formatter_1.dateFormatter)(new Date()),
                  page_no: pageNo,
                  page_size: pageSize,
                  use_has_next: useNext,
                  buyer_open_id: openId
                }
              };
              return [4, context.cloud.topApi.invoke((0, formatInvoke_1.formatInvoke)(invokeInfo))];
            case 1:
              result = _g.sent();
              console.log("taobao.open.trades.sold.get", result);
              return [2, result];
          }
        });
      });
    };
    exports.getBuyerOrderList = getBuyerOrderList;
    var getTemplateInstantiate = function(context, args) {
      return __awaiter(void 0, void 0, void 0, function() {
        var description2, _a, ext_json, icon, name2, session, _b, clients, template_id, template_version, invokeInfo;
        return __generator(this, function(_c) {
          switch (_c.label) {
            case 0:
              description2 = args.description, _a = args.ext_json, ext_json = _a === void 0 ? { name: "online" } : _a, icon = args.icon, name2 = args.name, session = args.session, _b = args.clients, clients = _b === void 0 ? "taobao,tmall" : _b, template_id = args.template_id, template_version = args.template_version;
              if (!context) {
                throw Error("\u53C2\u6570context\u4E0D\u80FD\u4E3A\u7A7A");
              }
              if (!icon) {
                throw Error("\u53C2\u6570icon\u4E0D\u80FD\u4E3A\u7A7A");
              }
              if (!name2) {
                throw Error("\u53C2\u6570name\u4E0D\u80FD\u4E3A\u7A7A");
              }
              if (!template_id) {
                throw Error("\u53C2\u6570template_id\u4E0D\u80FD\u4E3A\u7A7A");
              }
              if (!template_version) {
                throw Error("\u53C2\u6570template_version\u4E0D\u80FD\u4E3A\u7A7A");
              }
              if (!description2) {
                throw Error("\u53C2\u6570description\u4E0D\u80FD\u4E3A\u7A7A");
              }
              invokeInfo = {
                api: "taobao.miniapp.template.instantiate",
                data: {
                  description: description2,
                  ext_json,
                  icon,
                  name: name2,
                  clients,
                  template_id,
                  template_version,
                  session
                }
              };
              return [4, context.cloud.topApi.invoke((0, formatInvoke_1.formatInvoke)(invokeInfo))];
            case 1:
              return [2, _c.sent()];
          }
        });
      });
    };
    exports.getTemplateInstantiate = getTemplateInstantiate;
    var pushInstanceOnline = function(context, args) {
      return __awaiter(void 0, void 0, void 0, function() {
        var app_id, app_version, session, _a, clients, template_id, template_version, invokeInfo;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              app_id = args.app_id, app_version = args.app_version, session = args.session, _a = args.clients, clients = _a === void 0 ? "taobao,tmall" : _a, template_id = args.template_id, template_version = args.template_version;
              if (!context) {
                throw Error("\u53C2\u6570context\u4E0D\u80FD\u4E3A\u7A7A");
              }
              if (!app_id) {
                throw Error("\u53C2\u6570napp_id\u4E0D\u80FD\u4E3A\u7A7A");
              }
              if (!app_version) {
                throw Error("\u53C2\u6570app_version\u4E0D\u80FD\u4E3A\u7A7A");
              }
              if (!template_version) {
                throw Error("\u53C2\u6570template_version\u4E0D\u80FD\u4E3A\u7A7A");
              }
              if (!template_id) {
                throw Error("\u53C2\u6570template_id\u4E0D\u80FD\u4E3A\u7A7A");
              }
              invokeInfo = {
                api: "taobao.miniapp.template.onlineapp",
                data: {
                  clients,
                  app_id,
                  template_id,
                  template_version,
                  app_version,
                  session
                }
              };
              return [4, context.cloud.topApi.invoke((0, formatInvoke_1.formatInvoke)(invokeInfo))];
            case 1:
              return [2, _b.sent()];
          }
        });
      });
    };
    exports.pushInstanceOnline = pushInstanceOnline;
    var updateMiniInstance = function(context, args) {
      return __awaiter(void 0, void 0, void 0, function() {
        var app_id, _a, ext_json, session, _b, clients, template_id, template_version, icon, desc, alias, data, invokeInfo;
        return __generator(this, function(_c) {
          switch (_c.label) {
            case 0:
              app_id = args.app_id, _a = args.ext_json, ext_json = _a === void 0 ? { name: "online" } : _a, session = args.session, _b = args.clients, clients = _b === void 0 ? "taobao,tmall" : _b, template_id = args.template_id, template_version = args.template_version, icon = args.icon, desc = args.desc, alias = args.alias;
              if (!context) {
                throw Error("\u53C2\u6570context\u4E0D\u80FD\u4E3A\u7A7A");
              }
              if (!app_id) {
                throw Error("\u53C2\u6570napp_id\u4E0D\u80FD\u4E3A\u7A7A");
              }
              if (!template_version) {
                throw Error("\u53C2\u6570template_version\u4E0D\u80FD\u4E3A\u7A7A");
              }
              if (!template_id) {
                throw Error("\u53C2\u6570template_id\u4E0D\u80FD\u4E3A\u7A7A");
              }
              data = {
                clients,
                app_id,
                template_id,
                template_version,
                ext_json,
                session
              };
              if (icon) {
                data.icon = icon;
              }
              if (desc) {
                data.desc = desc;
              }
              if (alias) {
                data.alias = alias;
              }
              invokeInfo = {
                api: "taobao.miniapp.template.updateapp",
                data
              };
              return [4, context.cloud.topApi.invoke((0, formatInvoke_1.formatInvoke)(invokeInfo))];
            case 1:
              return [2, _c.sent()];
          }
        });
      });
    };
    exports.updateMiniInstance = updateMiniInstance;
    var configMiniApp = function(context, args) {
      return __awaiter(void 0, void 0, void 0, function() {
        var appId, version2, session, invokeInfo, result;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              appId = args.appId, version2 = args.version, session = args.session;
              if (!context) {
                throw Error("\u53C2\u6570context\u4E0D\u80FD\u4E3A\u7A7A");
              }
              if (!appId) {
                throw Error("\u53C2\u6570appId\u4E0D\u80FD\u4E3A\u7A7A");
              }
              if (!version2) {
                throw Error("\u53C2\u6570version\u4E0D\u80FD\u4E3A\u7A7A");
              }
              invokeInfo = {
                api: "taobao.miniapp.app.seller.config.complete",
                data: {
                  app_id: appId,
                  version: version2,
                  session
                }
              };
              return [4, context.cloud.topApi.invoke((0, formatInvoke_1.formatInvoke)(invokeInfo))];
            case 1:
              result = _a.sent();
              console.log("taobao.miniapp.app.seller.config.complete", result);
              return [2, result];
          }
        });
      });
    };
    exports.configMiniApp = configMiniApp;
    var specialItemMark = function(context, args) {
      return __awaiter(void 0, void 0, void 0, function() {
        var openId, itemId, _a, skuId, _b, status, invokeInfo, result;
        return __generator(this, function(_c) {
          switch (_c.label) {
            case 0:
              openId = args.openId, itemId = args.itemId, _a = args.skuId, skuId = _a === void 0 ? "0" : _a, _b = args.status, status = _b === void 0 ? "mark" : _b;
              if (!context) {
                throw Error("\u53C2\u6570context\u4E0D\u80FD\u4E3A\u7A7A");
              }
              if (!openId) {
                throw Error("\u53C2\u6570openId\u4E0D\u80FD\u4E3A\u7A7A");
              }
              if (!itemId) {
                throw Error("\u53C2\u6570itemId\u4E0D\u80FD\u4E3A\u7A7A");
              }
              invokeInfo = {
                api: "taobao.opentrade.special.users.mark",
                data: {
                  hit: true,
                  open_user_ids: [openId],
                  item_id: itemId,
                  sku_id: skuId,
                  status
                }
              };
              return [4, context.cloud.topApi.invoke((0, formatInvoke_1.formatInvoke)(invokeInfo))];
            case 1:
              result = _c.sent();
              return [2, result];
          }
        });
      });
    };
    exports.specialItemMark = specialItemMark;
  }
});

// node_modules/@tbmini/server-sdk/dist/utils/codetypes.js
var require_codetypes = __commonJS({
  "node_modules/@tbmini/server-sdk/dist/utils/codetypes.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DEFAULT_CODE_TYPES = void 0;
    exports.DEFAULT_CODE_TYPES = {
      PARAMS_ERROR: {
        code: "100000",
        defaultMsg: "\u53C2\u6570\u9519\u8BEF"
      },
      SYSTEM_ERROR: {
        code: "500000",
        defaultMsg: "\u7CFB\u7EDF\u9519\u8BEF"
      },
      SUCCESS: {
        code: "000000",
        defaultMsg: "\u6210\u529F"
      },
      ERROR_UPDATE_RETRY: {
        code: "210001",
        defaultMsg: "\u7CFB\u7EDF\u9519\u8BEF"
      },
      ERROR_NO_ACTIVITY: {
        code: "220001",
        defaultMsg: "\u6D3B\u52A8\u4E0D\u5B58\u5728"
      },
      ERROR_ACTIVITY_NOSTART: {
        code: "220002",
        defaultMsg: "\u6D3B\u52A8\u672A\u5F00\u59CB"
      },
      ERROR_ACTIVITY_OVER: {
        code: "220003",
        defaultMsg: "\u6D3B\u52A8\u5DF2\u7ED3\u675F"
      },
      ERROR_ACTIVITY_NO_OVER: {
        code: "220004",
        defaultMsg: "\u6D3B\u52A8\u672A\u7ED3\u675F"
      },
      ERROR_NO_USER: {
        code: "310002",
        defaultMsg: "\u7528\u6237\u4E0D\u5B58\u5728"
      },
      ERROR_NO_VIP: {
        code: "310003",
        defaultMsg: "\u975E\u5E97\u94FA\u4F1A\u5458"
      }
    };
  }
});

// node_modules/@tbmini/server-sdk/dist/utils/resultmodel.js
var require_resultmodel = __commonJS({
  "node_modules/@tbmini/server-sdk/dist/utils/resultmodel.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ResultsModel = void 0;
    var codetypes_1 = require_codetypes();
    var ResultsModel2 = function() {
      function ResultsModel3() {
      }
      ResultsModel3.prototype.error = function(errorType, message, data) {
        if (!errorType) {
          errorType = codetypes_1.DEFAULT_CODE_TYPES.SYSTEM_ERROR;
        }
        return {
          success: false,
          code: errorType.code,
          message: message || errorType.defaultMsg,
          data
        };
      };
      ResultsModel3.prototype.success = function(data) {
        return {
          success: true,
          code: codetypes_1.DEFAULT_CODE_TYPES.SUCCESS.code,
          data,
          message: codetypes_1.DEFAULT_CODE_TYPES.SUCCESS.defaultMsg
        };
      };
      return ResultsModel3;
    }();
    exports.ResultsModel = ResultsModel2;
  }
});

// node_modules/@tbmini/server-sdk/dist/utils/date.js
var require_date = __commonJS({
  "node_modules/@tbmini/server-sdk/dist/utils/date.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getEndTimestamp = exports.getStartTimestamp = exports.transformBeijingDate = void 0;
    var transformBeijingDate3 = function(day) {
      var time = new Date().getTime();
      if (day) {
        if (typeof day === "string") {
          day = day.replace(/-/g, "/");
        }
        time = new Date(day).getTime();
      }
      return new Date(time + 8 * 60 * 60 * 1e3);
    };
    exports.transformBeijingDate = transformBeijingDate3;
    var getStartTimestamp2 = function(day) {
      if (!day) {
        throw new Error("\u53C2\u6570\u4E0D\u80FD\u4E3A\u7A7A");
      }
      day = day.replace(/-/g, "/");
      var date = new Date(day + " 00:00:00").getTime();
      var start = date - 8 * 60 * 60 * 1e3;
      return start;
    };
    exports.getStartTimestamp = getStartTimestamp2;
    var getEndTimestamp2 = function(day) {
      if (!day) {
        throw new Error("\u53C2\u6570\u4E0D\u80FD\u4E3A\u7A7A");
      }
      day = day.replace(/-/g, "/");
      var date = new Date(day + " 23:59:59").getTime();
      var end = date - 8 * 60 * 60 * 1e3;
      return end;
    };
    exports.getEndTimestamp = getEndTimestamp2;
  }
});

// node_modules/@tbmini/server-sdk/dist/utils/index.js
var require_utils = __commonJS({
  "node_modules/@tbmini/server-sdk/dist/utils/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.findPass = exports.getEndTimestamp = exports.getStartTimestamp = exports.transformBeijingDate = exports.dateFormatter = exports.ResultsModel = exports.DEFAULT_CODE_TYPES = void 0;
    var codetypes_1 = require_codetypes();
    Object.defineProperty(exports, "DEFAULT_CODE_TYPES", { enumerable: true, get: function() {
      return codetypes_1.DEFAULT_CODE_TYPES;
    } });
    var resultmodel_1 = require_resultmodel();
    Object.defineProperty(exports, "ResultsModel", { enumerable: true, get: function() {
      return resultmodel_1.ResultsModel;
    } });
    var formatter_1 = require_formatter();
    Object.defineProperty(exports, "dateFormatter", { enumerable: true, get: function() {
      return formatter_1.dateFormatter;
    } });
    var date_1 = require_date();
    Object.defineProperty(exports, "transformBeijingDate", { enumerable: true, get: function() {
      return date_1.transformBeijingDate;
    } });
    Object.defineProperty(exports, "getStartTimestamp", { enumerable: true, get: function() {
      return date_1.getStartTimestamp;
    } });
    Object.defineProperty(exports, "getEndTimestamp", { enumerable: true, get: function() {
      return date_1.getEndTimestamp;
    } });
    var findPass_1 = require_findPass();
    Object.defineProperty(exports, "findPass", { enumerable: true, get: function() {
      return findPass_1.findPass;
    } });
  }
});

// node_modules/@tbmini/server-sdk/dist/index.js
var require_dist = __commonJS({
  "node_modules/@tbmini/server-sdk/dist/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Utils = exports.TBAPI = exports.BaseDao = void 0;
    var base_dao_1 = require_base_dao();
    Object.defineProperty(exports, "BaseDao", { enumerable: true, get: function() {
      return base_dao_1.BaseDao;
    } });
    exports.TBAPI = require_TBAPI();
    exports.Utils = require_utils();
  }
});

// node_modules/axios/lib/helpers/bind.js
var require_bind = __commonJS({
  "node_modules/axios/lib/helpers/bind.js"(exports, module2) {
    "use strict";
    module2.exports = function bind(fn, thisArg) {
      return function wrap() {
        var args = new Array(arguments.length);
        for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i];
        }
        return fn.apply(thisArg, args);
      };
    };
  }
});

// node_modules/axios/lib/utils.js
var require_utils2 = __commonJS({
  "node_modules/axios/lib/utils.js"(exports, module2) {
    "use strict";
    var bind = require_bind();
    var toString = Object.prototype.toString;
    function isArray(val) {
      return toString.call(val) === "[object Array]";
    }
    function isUndefined(val) {
      return typeof val === "undefined";
    }
    function isBuffer(val) {
      return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && typeof val.constructor.isBuffer === "function" && val.constructor.isBuffer(val);
    }
    function isArrayBuffer(val) {
      return toString.call(val) === "[object ArrayBuffer]";
    }
    function isFormData(val) {
      return typeof FormData !== "undefined" && val instanceof FormData;
    }
    function isArrayBufferView(val) {
      var result;
      if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
        result = ArrayBuffer.isView(val);
      } else {
        result = val && val.buffer && val.buffer instanceof ArrayBuffer;
      }
      return result;
    }
    function isString2(val) {
      return typeof val === "string";
    }
    function isNumber(val) {
      return typeof val === "number";
    }
    function isObject(val) {
      return val !== null && typeof val === "object";
    }
    function isDate(val) {
      return toString.call(val) === "[object Date]";
    }
    function isFile(val) {
      return toString.call(val) === "[object File]";
    }
    function isBlob(val) {
      return toString.call(val) === "[object Blob]";
    }
    function isFunction2(val) {
      return toString.call(val) === "[object Function]";
    }
    function isStream(val) {
      return isObject(val) && isFunction2(val.pipe);
    }
    function isURLSearchParams(val) {
      return typeof URLSearchParams !== "undefined" && val instanceof URLSearchParams;
    }
    function trim(str) {
      return str.replace(/^\s*/, "").replace(/\s*$/, "");
    }
    function isStandardBrowserEnv() {
      if (typeof navigator !== "undefined" && (navigator.product === "ReactNative" || navigator.product === "NativeScript" || navigator.product === "NS")) {
        return false;
      }
      return typeof window !== "undefined" && typeof document !== "undefined";
    }
    function forEach(obj, fn) {
      if (obj === null || typeof obj === "undefined") {
        return;
      }
      if (typeof obj !== "object") {
        obj = [obj];
      }
      if (isArray(obj)) {
        for (var i = 0, l = obj.length; i < l; i++) {
          fn.call(null, obj[i], i, obj);
        }
      } else {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) {
            fn.call(null, obj[key], key, obj);
          }
        }
      }
    }
    function merge() {
      var result = {};
      function assignValue(val, key) {
        if (typeof result[key] === "object" && typeof val === "object") {
          result[key] = merge(result[key], val);
        } else {
          result[key] = val;
        }
      }
      for (var i = 0, l = arguments.length; i < l; i++) {
        forEach(arguments[i], assignValue);
      }
      return result;
    }
    function deepMerge() {
      var result = {};
      function assignValue(val, key) {
        if (typeof result[key] === "object" && typeof val === "object") {
          result[key] = deepMerge(result[key], val);
        } else if (typeof val === "object") {
          result[key] = deepMerge({}, val);
        } else {
          result[key] = val;
        }
      }
      for (var i = 0, l = arguments.length; i < l; i++) {
        forEach(arguments[i], assignValue);
      }
      return result;
    }
    function extend(a, b, thisArg) {
      forEach(b, function assignValue(val, key) {
        if (thisArg && typeof val === "function") {
          a[key] = bind(val, thisArg);
        } else {
          a[key] = val;
        }
      });
      return a;
    }
    module2.exports = {
      isArray,
      isArrayBuffer,
      isBuffer,
      isFormData,
      isArrayBufferView,
      isString: isString2,
      isNumber,
      isObject,
      isUndefined,
      isDate,
      isFile,
      isBlob,
      isFunction: isFunction2,
      isStream,
      isURLSearchParams,
      isStandardBrowserEnv,
      forEach,
      merge,
      deepMerge,
      extend,
      trim
    };
  }
});

// node_modules/axios/lib/helpers/buildURL.js
var require_buildURL = __commonJS({
  "node_modules/axios/lib/helpers/buildURL.js"(exports, module2) {
    "use strict";
    var utils = require_utils2();
    function encode(val) {
      return encodeURIComponent(val).replace(/%40/gi, "@").replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
    }
    module2.exports = function buildURL(url, params, paramsSerializer) {
      if (!params) {
        return url;
      }
      var serializedParams;
      if (paramsSerializer) {
        serializedParams = paramsSerializer(params);
      } else if (utils.isURLSearchParams(params)) {
        serializedParams = params.toString();
      } else {
        var parts = [];
        utils.forEach(params, function serialize(val, key) {
          if (val === null || typeof val === "undefined") {
            return;
          }
          if (utils.isArray(val)) {
            key = key + "[]";
          } else {
            val = [val];
          }
          utils.forEach(val, function parseValue(v) {
            if (utils.isDate(v)) {
              v = v.toISOString();
            } else if (utils.isObject(v)) {
              v = JSON.stringify(v);
            }
            parts.push(encode(key) + "=" + encode(v));
          });
        });
        serializedParams = parts.join("&");
      }
      if (serializedParams) {
        var hashmarkIndex = url.indexOf("#");
        if (hashmarkIndex !== -1) {
          url = url.slice(0, hashmarkIndex);
        }
        url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
      }
      return url;
    };
  }
});

// node_modules/axios/lib/core/InterceptorManager.js
var require_InterceptorManager = __commonJS({
  "node_modules/axios/lib/core/InterceptorManager.js"(exports, module2) {
    "use strict";
    var utils = require_utils2();
    function InterceptorManager() {
      this.handlers = [];
    }
    InterceptorManager.prototype.use = function use(fulfilled, rejected) {
      this.handlers.push({
        fulfilled,
        rejected
      });
      return this.handlers.length - 1;
    };
    InterceptorManager.prototype.eject = function eject(id) {
      if (this.handlers[id]) {
        this.handlers[id] = null;
      }
    };
    InterceptorManager.prototype.forEach = function forEach(fn) {
      utils.forEach(this.handlers, function forEachHandler(h) {
        if (h !== null) {
          fn(h);
        }
      });
    };
    module2.exports = InterceptorManager;
  }
});

// node_modules/axios/lib/core/transformData.js
var require_transformData = __commonJS({
  "node_modules/axios/lib/core/transformData.js"(exports, module2) {
    "use strict";
    var utils = require_utils2();
    module2.exports = function transformData(data, headers, fns) {
      utils.forEach(fns, function transform(fn) {
        data = fn(data, headers);
      });
      return data;
    };
  }
});

// node_modules/axios/lib/cancel/isCancel.js
var require_isCancel = __commonJS({
  "node_modules/axios/lib/cancel/isCancel.js"(exports, module2) {
    "use strict";
    module2.exports = function isCancel(value) {
      return !!(value && value.__CANCEL__);
    };
  }
});

// node_modules/axios/lib/helpers/normalizeHeaderName.js
var require_normalizeHeaderName = __commonJS({
  "node_modules/axios/lib/helpers/normalizeHeaderName.js"(exports, module2) {
    "use strict";
    var utils = require_utils2();
    module2.exports = function normalizeHeaderName(headers, normalizedName) {
      utils.forEach(headers, function processHeader(value, name2) {
        if (name2 !== normalizedName && name2.toUpperCase() === normalizedName.toUpperCase()) {
          headers[normalizedName] = value;
          delete headers[name2];
        }
      });
    };
  }
});

// node_modules/axios/lib/core/enhanceError.js
var require_enhanceError = __commonJS({
  "node_modules/axios/lib/core/enhanceError.js"(exports, module2) {
    "use strict";
    module2.exports = function enhanceError(error, config2, code, request, response) {
      error.config = config2;
      if (code) {
        error.code = code;
      }
      error.request = request;
      error.response = response;
      error.isAxiosError = true;
      error.toJSON = function() {
        return {
          message: this.message,
          name: this.name,
          description: this.description,
          number: this.number,
          fileName: this.fileName,
          lineNumber: this.lineNumber,
          columnNumber: this.columnNumber,
          stack: this.stack,
          config: this.config,
          code: this.code
        };
      };
      return error;
    };
  }
});

// node_modules/axios/lib/core/createError.js
var require_createError = __commonJS({
  "node_modules/axios/lib/core/createError.js"(exports, module2) {
    "use strict";
    var enhanceError = require_enhanceError();
    module2.exports = function createError(message, config2, code, request, response) {
      var error = new Error(message);
      return enhanceError(error, config2, code, request, response);
    };
  }
});

// node_modules/axios/lib/core/settle.js
var require_settle = __commonJS({
  "node_modules/axios/lib/core/settle.js"(exports, module2) {
    "use strict";
    var createError = require_createError();
    module2.exports = function settle(resolve, reject, response) {
      var validateStatus = response.config.validateStatus;
      if (!validateStatus || validateStatus(response.status)) {
        resolve(response);
      } else {
        reject(createError("Request failed with status code " + response.status, response.config, null, response.request, response));
      }
    };
  }
});

// node_modules/axios/lib/helpers/isAbsoluteURL.js
var require_isAbsoluteURL = __commonJS({
  "node_modules/axios/lib/helpers/isAbsoluteURL.js"(exports, module2) {
    "use strict";
    module2.exports = function isAbsoluteURL(url) {
      return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
    };
  }
});

// node_modules/axios/lib/helpers/combineURLs.js
var require_combineURLs = __commonJS({
  "node_modules/axios/lib/helpers/combineURLs.js"(exports, module2) {
    "use strict";
    module2.exports = function combineURLs(baseURL, relativeURL) {
      return relativeURL ? baseURL.replace(/\/+$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
    };
  }
});

// node_modules/axios/lib/core/buildFullPath.js
var require_buildFullPath = __commonJS({
  "node_modules/axios/lib/core/buildFullPath.js"(exports, module2) {
    "use strict";
    var isAbsoluteURL = require_isAbsoluteURL();
    var combineURLs = require_combineURLs();
    module2.exports = function buildFullPath(baseURL, requestedURL) {
      if (baseURL && !isAbsoluteURL(requestedURL)) {
        return combineURLs(baseURL, requestedURL);
      }
      return requestedURL;
    };
  }
});

// node_modules/axios/lib/helpers/parseHeaders.js
var require_parseHeaders = __commonJS({
  "node_modules/axios/lib/helpers/parseHeaders.js"(exports, module2) {
    "use strict";
    var utils = require_utils2();
    var ignoreDuplicateOf = [
      "age",
      "authorization",
      "content-length",
      "content-type",
      "etag",
      "expires",
      "from",
      "host",
      "if-modified-since",
      "if-unmodified-since",
      "last-modified",
      "location",
      "max-forwards",
      "proxy-authorization",
      "referer",
      "retry-after",
      "user-agent"
    ];
    module2.exports = function parseHeaders(headers) {
      var parsed = {};
      var key;
      var val;
      var i;
      if (!headers) {
        return parsed;
      }
      utils.forEach(headers.split("\n"), function parser(line) {
        i = line.indexOf(":");
        key = utils.trim(line.substr(0, i)).toLowerCase();
        val = utils.trim(line.substr(i + 1));
        if (key) {
          if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
            return;
          }
          if (key === "set-cookie") {
            parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
          } else {
            parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
          }
        }
      });
      return parsed;
    };
  }
});

// node_modules/axios/lib/helpers/isURLSameOrigin.js
var require_isURLSameOrigin = __commonJS({
  "node_modules/axios/lib/helpers/isURLSameOrigin.js"(exports, module2) {
    "use strict";
    var utils = require_utils2();
    module2.exports = utils.isStandardBrowserEnv() ? function standardBrowserEnv() {
      var msie = /(msie|trident)/i.test(navigator.userAgent);
      var urlParsingNode = document.createElement("a");
      var originURL;
      function resolveURL(url) {
        var href = url;
        if (msie) {
          urlParsingNode.setAttribute("href", href);
          href = urlParsingNode.href;
        }
        urlParsingNode.setAttribute("href", href);
        return {
          href: urlParsingNode.href,
          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, "") : "",
          host: urlParsingNode.host,
          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, "") : "",
          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, "") : "",
          hostname: urlParsingNode.hostname,
          port: urlParsingNode.port,
          pathname: urlParsingNode.pathname.charAt(0) === "/" ? urlParsingNode.pathname : "/" + urlParsingNode.pathname
        };
      }
      originURL = resolveURL(window.location.href);
      return function isURLSameOrigin(requestURL) {
        var parsed = utils.isString(requestURL) ? resolveURL(requestURL) : requestURL;
        return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
      };
    }() : function nonStandardBrowserEnv() {
      return function isURLSameOrigin() {
        return true;
      };
    }();
  }
});

// node_modules/axios/lib/helpers/cookies.js
var require_cookies = __commonJS({
  "node_modules/axios/lib/helpers/cookies.js"(exports, module2) {
    "use strict";
    var utils = require_utils2();
    module2.exports = utils.isStandardBrowserEnv() ? function standardBrowserEnv() {
      return {
        write: function write(name2, value, expires, path, domain, secure) {
          var cookie = [];
          cookie.push(name2 + "=" + encodeURIComponent(value));
          if (utils.isNumber(expires)) {
            cookie.push("expires=" + new Date(expires).toGMTString());
          }
          if (utils.isString(path)) {
            cookie.push("path=" + path);
          }
          if (utils.isString(domain)) {
            cookie.push("domain=" + domain);
          }
          if (secure === true) {
            cookie.push("secure");
          }
          document.cookie = cookie.join("; ");
        },
        read: function read(name2) {
          var match = document.cookie.match(new RegExp("(^|;\\s*)(" + name2 + ")=([^;]*)"));
          return match ? decodeURIComponent(match[3]) : null;
        },
        remove: function remove(name2) {
          this.write(name2, "", Date.now() - 864e5);
        }
      };
    }() : function nonStandardBrowserEnv() {
      return {
        write: function write() {
        },
        read: function read() {
          return null;
        },
        remove: function remove() {
        }
      };
    }();
  }
});

// node_modules/axios/lib/adapters/xhr.js
var require_xhr = __commonJS({
  "node_modules/axios/lib/adapters/xhr.js"(exports, module2) {
    "use strict";
    var utils = require_utils2();
    var settle = require_settle();
    var buildURL = require_buildURL();
    var buildFullPath = require_buildFullPath();
    var parseHeaders = require_parseHeaders();
    var isURLSameOrigin = require_isURLSameOrigin();
    var createError = require_createError();
    module2.exports = function xhrAdapter(config2) {
      return new Promise(function dispatchXhrRequest(resolve, reject) {
        var requestData = config2.data;
        var requestHeaders = config2.headers;
        if (utils.isFormData(requestData)) {
          delete requestHeaders["Content-Type"];
        }
        var request = new XMLHttpRequest();
        if (config2.auth) {
          var username = config2.auth.username || "";
          var password = config2.auth.password || "";
          requestHeaders.Authorization = "Basic " + btoa(username + ":" + password);
        }
        var fullPath = buildFullPath(config2.baseURL, config2.url);
        request.open(config2.method.toUpperCase(), buildURL(fullPath, config2.params, config2.paramsSerializer), true);
        request.timeout = config2.timeout;
        request.onreadystatechange = function handleLoad() {
          if (!request || request.readyState !== 4) {
            return;
          }
          if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf("file:") === 0)) {
            return;
          }
          var responseHeaders = "getAllResponseHeaders" in request ? parseHeaders(request.getAllResponseHeaders()) : null;
          var responseData = !config2.responseType || config2.responseType === "text" ? request.responseText : request.response;
          var response = {
            data: responseData,
            status: request.status,
            statusText: request.statusText,
            headers: responseHeaders,
            config: config2,
            request
          };
          settle(resolve, reject, response);
          request = null;
        };
        request.onabort = function handleAbort() {
          if (!request) {
            return;
          }
          reject(createError("Request aborted", config2, "ECONNABORTED", request));
          request = null;
        };
        request.onerror = function handleError() {
          reject(createError("Network Error", config2, null, request));
          request = null;
        };
        request.ontimeout = function handleTimeout() {
          var timeoutErrorMessage = "timeout of " + config2.timeout + "ms exceeded";
          if (config2.timeoutErrorMessage) {
            timeoutErrorMessage = config2.timeoutErrorMessage;
          }
          reject(createError(timeoutErrorMessage, config2, "ECONNABORTED", request));
          request = null;
        };
        if (utils.isStandardBrowserEnv()) {
          var cookies = require_cookies();
          var xsrfValue = (config2.withCredentials || isURLSameOrigin(fullPath)) && config2.xsrfCookieName ? cookies.read(config2.xsrfCookieName) : void 0;
          if (xsrfValue) {
            requestHeaders[config2.xsrfHeaderName] = xsrfValue;
          }
        }
        if ("setRequestHeader" in request) {
          utils.forEach(requestHeaders, function setRequestHeader(val, key) {
            if (typeof requestData === "undefined" && key.toLowerCase() === "content-type") {
              delete requestHeaders[key];
            } else {
              request.setRequestHeader(key, val);
            }
          });
        }
        if (!utils.isUndefined(config2.withCredentials)) {
          request.withCredentials = !!config2.withCredentials;
        }
        if (config2.responseType) {
          try {
            request.responseType = config2.responseType;
          } catch (e) {
            if (config2.responseType !== "json") {
              throw e;
            }
          }
        }
        if (typeof config2.onDownloadProgress === "function") {
          request.addEventListener("progress", config2.onDownloadProgress);
        }
        if (typeof config2.onUploadProgress === "function" && request.upload) {
          request.upload.addEventListener("progress", config2.onUploadProgress);
        }
        if (config2.cancelToken) {
          config2.cancelToken.promise.then(function onCanceled(cancel) {
            if (!request) {
              return;
            }
            request.abort();
            reject(cancel);
            request = null;
          });
        }
        if (requestData === void 0) {
          requestData = null;
        }
        request.send(requestData);
      });
    };
  }
});

// node_modules/ms/index.js
var require_ms = __commonJS({
  "node_modules/ms/index.js"(exports, module2) {
    var s = 1e3;
    var m = s * 60;
    var h = m * 60;
    var d = h * 24;
    var y = d * 365.25;
    module2.exports = function(val, options) {
      options = options || {};
      var type = typeof val;
      if (type === "string" && val.length > 0) {
        return parse(val);
      } else if (type === "number" && isNaN(val) === false) {
        return options.long ? fmtLong(val) : fmtShort(val);
      }
      throw new Error("val is not a non-empty string or a valid number. val=" + JSON.stringify(val));
    };
    function parse(str) {
      str = String(str);
      if (str.length > 100) {
        return;
      }
      var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);
      if (!match) {
        return;
      }
      var n = parseFloat(match[1]);
      var type = (match[2] || "ms").toLowerCase();
      switch (type) {
        case "years":
        case "year":
        case "yrs":
        case "yr":
        case "y":
          return n * y;
        case "days":
        case "day":
        case "d":
          return n * d;
        case "hours":
        case "hour":
        case "hrs":
        case "hr":
        case "h":
          return n * h;
        case "minutes":
        case "minute":
        case "mins":
        case "min":
        case "m":
          return n * m;
        case "seconds":
        case "second":
        case "secs":
        case "sec":
        case "s":
          return n * s;
        case "milliseconds":
        case "millisecond":
        case "msecs":
        case "msec":
        case "ms":
          return n;
        default:
          return void 0;
      }
    }
    function fmtShort(ms) {
      if (ms >= d) {
        return Math.round(ms / d) + "d";
      }
      if (ms >= h) {
        return Math.round(ms / h) + "h";
      }
      if (ms >= m) {
        return Math.round(ms / m) + "m";
      }
      if (ms >= s) {
        return Math.round(ms / s) + "s";
      }
      return ms + "ms";
    }
    function fmtLong(ms) {
      return plural(ms, d, "day") || plural(ms, h, "hour") || plural(ms, m, "minute") || plural(ms, s, "second") || ms + " ms";
    }
    function plural(ms, n, name2) {
      if (ms < n) {
        return;
      }
      if (ms < n * 1.5) {
        return Math.floor(ms / n) + " " + name2;
      }
      return Math.ceil(ms / n) + " " + name2 + "s";
    }
  }
});

// node_modules/follow-redirects/node_modules/debug/src/debug.js
var require_debug = __commonJS({
  "node_modules/follow-redirects/node_modules/debug/src/debug.js"(exports, module2) {
    exports = module2.exports = createDebug.debug = createDebug["default"] = createDebug;
    exports.coerce = coerce;
    exports.disable = disable;
    exports.enable = enable;
    exports.enabled = enabled;
    exports.humanize = require_ms();
    exports.instances = [];
    exports.names = [];
    exports.skips = [];
    exports.formatters = {};
    function selectColor(namespace) {
      var hash = 0, i;
      for (i in namespace) {
        hash = (hash << 5) - hash + namespace.charCodeAt(i);
        hash |= 0;
      }
      return exports.colors[Math.abs(hash) % exports.colors.length];
    }
    function createDebug(namespace) {
      var prevTime;
      function debug() {
        if (!debug.enabled)
          return;
        var self2 = debug;
        var curr = +new Date();
        var ms = curr - (prevTime || curr);
        self2.diff = ms;
        self2.prev = prevTime;
        self2.curr = curr;
        prevTime = curr;
        var args = new Array(arguments.length);
        for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i];
        }
        args[0] = exports.coerce(args[0]);
        if (typeof args[0] !== "string") {
          args.unshift("%O");
        }
        var index = 0;
        args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {
          if (match === "%%")
            return match;
          index++;
          var formatter = exports.formatters[format];
          if (typeof formatter === "function") {
            var val = args[index];
            match = formatter.call(self2, val);
            args.splice(index, 1);
            index--;
          }
          return match;
        });
        exports.formatArgs.call(self2, args);
        var logFn = debug.log || exports.log || console.log.bind(console);
        logFn.apply(self2, args);
      }
      debug.namespace = namespace;
      debug.enabled = exports.enabled(namespace);
      debug.useColors = exports.useColors();
      debug.color = selectColor(namespace);
      debug.destroy = destroy;
      if (typeof exports.init === "function") {
        exports.init(debug);
      }
      exports.instances.push(debug);
      return debug;
    }
    function destroy() {
      var index = exports.instances.indexOf(this);
      if (index !== -1) {
        exports.instances.splice(index, 1);
        return true;
      } else {
        return false;
      }
    }
    function enable(namespaces) {
      exports.save(namespaces);
      exports.names = [];
      exports.skips = [];
      var i;
      var split = (typeof namespaces === "string" ? namespaces : "").split(/[\s,]+/);
      var len = split.length;
      for (i = 0; i < len; i++) {
        if (!split[i])
          continue;
        namespaces = split[i].replace(/\*/g, ".*?");
        if (namespaces[0] === "-") {
          exports.skips.push(new RegExp("^" + namespaces.substr(1) + "$"));
        } else {
          exports.names.push(new RegExp("^" + namespaces + "$"));
        }
      }
      for (i = 0; i < exports.instances.length; i++) {
        var instance = exports.instances[i];
        instance.enabled = exports.enabled(instance.namespace);
      }
    }
    function disable() {
      exports.enable("");
    }
    function enabled(name2) {
      if (name2[name2.length - 1] === "*") {
        return true;
      }
      var i, len;
      for (i = 0, len = exports.skips.length; i < len; i++) {
        if (exports.skips[i].test(name2)) {
          return false;
        }
      }
      for (i = 0, len = exports.names.length; i < len; i++) {
        if (exports.names[i].test(name2)) {
          return true;
        }
      }
      return false;
    }
    function coerce(val) {
      if (val instanceof Error)
        return val.stack || val.message;
      return val;
    }
  }
});

// node_modules/follow-redirects/node_modules/debug/src/browser.js
var require_browser = __commonJS({
  "node_modules/follow-redirects/node_modules/debug/src/browser.js"(exports, module2) {
    exports = module2.exports = require_debug();
    exports.log = log;
    exports.formatArgs = formatArgs;
    exports.save = save;
    exports.load = load;
    exports.useColors = useColors;
    exports.storage = typeof chrome != "undefined" && typeof chrome.storage != "undefined" ? chrome.storage.local : localstorage();
    exports.colors = [
      "#0000CC",
      "#0000FF",
      "#0033CC",
      "#0033FF",
      "#0066CC",
      "#0066FF",
      "#0099CC",
      "#0099FF",
      "#00CC00",
      "#00CC33",
      "#00CC66",
      "#00CC99",
      "#00CCCC",
      "#00CCFF",
      "#3300CC",
      "#3300FF",
      "#3333CC",
      "#3333FF",
      "#3366CC",
      "#3366FF",
      "#3399CC",
      "#3399FF",
      "#33CC00",
      "#33CC33",
      "#33CC66",
      "#33CC99",
      "#33CCCC",
      "#33CCFF",
      "#6600CC",
      "#6600FF",
      "#6633CC",
      "#6633FF",
      "#66CC00",
      "#66CC33",
      "#9900CC",
      "#9900FF",
      "#9933CC",
      "#9933FF",
      "#99CC00",
      "#99CC33",
      "#CC0000",
      "#CC0033",
      "#CC0066",
      "#CC0099",
      "#CC00CC",
      "#CC00FF",
      "#CC3300",
      "#CC3333",
      "#CC3366",
      "#CC3399",
      "#CC33CC",
      "#CC33FF",
      "#CC6600",
      "#CC6633",
      "#CC9900",
      "#CC9933",
      "#CCCC00",
      "#CCCC33",
      "#FF0000",
      "#FF0033",
      "#FF0066",
      "#FF0099",
      "#FF00CC",
      "#FF00FF",
      "#FF3300",
      "#FF3333",
      "#FF3366",
      "#FF3399",
      "#FF33CC",
      "#FF33FF",
      "#FF6600",
      "#FF6633",
      "#FF9900",
      "#FF9933",
      "#FFCC00",
      "#FFCC33"
    ];
    function useColors() {
      if (typeof window !== "undefined" && window.process && window.process.type === "renderer") {
        return true;
      }
      if (typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
        return false;
      }
      return typeof document !== "undefined" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || typeof window !== "undefined" && window.console && (window.console.firebug || window.console.exception && window.console.table) || typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
    }
    exports.formatters.j = function(v) {
      try {
        return JSON.stringify(v);
      } catch (err) {
        return "[UnexpectedJSONParseError]: " + err.message;
      }
    };
    function formatArgs(args) {
      var useColors2 = this.useColors;
      args[0] = (useColors2 ? "%c" : "") + this.namespace + (useColors2 ? " %c" : " ") + args[0] + (useColors2 ? "%c " : " ") + "+" + exports.humanize(this.diff);
      if (!useColors2)
        return;
      var c = "color: " + this.color;
      args.splice(1, 0, c, "color: inherit");
      var index = 0;
      var lastC = 0;
      args[0].replace(/%[a-zA-Z%]/g, function(match) {
        if (match === "%%")
          return;
        index++;
        if (match === "%c") {
          lastC = index;
        }
      });
      args.splice(lastC, 0, c);
    }
    function log() {
      return typeof console === "object" && console.log && Function.prototype.apply.call(console.log, console, arguments);
    }
    function save(namespaces) {
      try {
        if (namespaces == null) {
          exports.storage.removeItem("debug");
        } else {
          exports.storage.debug = namespaces;
        }
      } catch (e) {
      }
    }
    function load() {
      var r;
      try {
        r = exports.storage.debug;
      } catch (e) {
      }
      if (!r && typeof process !== "undefined" && "env" in process) {
        r = process.env.DEBUG;
      }
      return r;
    }
    exports.enable(load());
    function localstorage() {
      try {
        return window.localStorage;
      } catch (e) {
      }
    }
  }
});

// node_modules/has-flag/index.js
var require_has_flag = __commonJS({
  "node_modules/has-flag/index.js"(exports, module2) {
    "use strict";
    module2.exports = (flag, argv = process.argv) => {
      const prefix = flag.startsWith("-") ? "" : flag.length === 1 ? "-" : "--";
      const position = argv.indexOf(prefix + flag);
      const terminatorPosition = argv.indexOf("--");
      return position !== -1 && (terminatorPosition === -1 || position < terminatorPosition);
    };
  }
});

// node_modules/supports-color/index.js
var require_supports_color = __commonJS({
  "node_modules/supports-color/index.js"(exports, module2) {
    "use strict";
    var os = require("os");
    var tty = require("tty");
    var hasFlag = require_has_flag();
    var { env: env2 } = process;
    var forceColor;
    if (hasFlag("no-color") || hasFlag("no-colors") || hasFlag("color=false") || hasFlag("color=never")) {
      forceColor = 0;
    } else if (hasFlag("color") || hasFlag("colors") || hasFlag("color=true") || hasFlag("color=always")) {
      forceColor = 1;
    }
    if ("FORCE_COLOR" in env2) {
      if (env2.FORCE_COLOR === "true") {
        forceColor = 1;
      } else if (env2.FORCE_COLOR === "false") {
        forceColor = 0;
      } else {
        forceColor = env2.FORCE_COLOR.length === 0 ? 1 : Math.min(parseInt(env2.FORCE_COLOR, 10), 3);
      }
    }
    function translateLevel(level) {
      if (level === 0) {
        return false;
      }
      return {
        level,
        hasBasic: true,
        has256: level >= 2,
        has16m: level >= 3
      };
    }
    function supportsColor(haveStream, streamIsTTY) {
      if (forceColor === 0) {
        return 0;
      }
      if (hasFlag("color=16m") || hasFlag("color=full") || hasFlag("color=truecolor")) {
        return 3;
      }
      if (hasFlag("color=256")) {
        return 2;
      }
      if (haveStream && !streamIsTTY && forceColor === void 0) {
        return 0;
      }
      const min = forceColor || 0;
      if (env2.TERM === "dumb") {
        return min;
      }
      if (process.platform === "win32") {
        const osRelease = os.release().split(".");
        if (Number(osRelease[0]) >= 10 && Number(osRelease[2]) >= 10586) {
          return Number(osRelease[2]) >= 14931 ? 3 : 2;
        }
        return 1;
      }
      if ("CI" in env2) {
        if (["TRAVIS", "CIRCLECI", "APPVEYOR", "GITLAB_CI", "GITHUB_ACTIONS", "BUILDKITE"].some((sign) => sign in env2) || env2.CI_NAME === "codeship") {
          return 1;
        }
        return min;
      }
      if ("TEAMCITY_VERSION" in env2) {
        return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env2.TEAMCITY_VERSION) ? 1 : 0;
      }
      if (env2.COLORTERM === "truecolor") {
        return 3;
      }
      if ("TERM_PROGRAM" in env2) {
        const version2 = parseInt((env2.TERM_PROGRAM_VERSION || "").split(".")[0], 10);
        switch (env2.TERM_PROGRAM) {
          case "iTerm.app":
            return version2 >= 3 ? 3 : 2;
          case "Apple_Terminal":
            return 2;
        }
      }
      if (/-256(color)?$/i.test(env2.TERM)) {
        return 2;
      }
      if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env2.TERM)) {
        return 1;
      }
      if ("COLORTERM" in env2) {
        return 1;
      }
      return min;
    }
    function getSupportLevel(stream) {
      const level = supportsColor(stream, stream && stream.isTTY);
      return translateLevel(level);
    }
    module2.exports = {
      supportsColor: getSupportLevel,
      stdout: translateLevel(supportsColor(true, tty.isatty(1))),
      stderr: translateLevel(supportsColor(true, tty.isatty(2)))
    };
  }
});

// node_modules/follow-redirects/node_modules/debug/src/node.js
var require_node = __commonJS({
  "node_modules/follow-redirects/node_modules/debug/src/node.js"(exports, module2) {
    var tty = require("tty");
    var util2 = require("util");
    exports = module2.exports = require_debug();
    exports.init = init;
    exports.log = log;
    exports.formatArgs = formatArgs;
    exports.save = save;
    exports.load = load;
    exports.useColors = useColors;
    exports.colors = [6, 2, 3, 4, 5, 1];
    try {
      supportsColor = require_supports_color();
      if (supportsColor && supportsColor.level >= 2) {
        exports.colors = [
          20,
          21,
          26,
          27,
          32,
          33,
          38,
          39,
          40,
          41,
          42,
          43,
          44,
          45,
          56,
          57,
          62,
          63,
          68,
          69,
          74,
          75,
          76,
          77,
          78,
          79,
          80,
          81,
          92,
          93,
          98,
          99,
          112,
          113,
          128,
          129,
          134,
          135,
          148,
          149,
          160,
          161,
          162,
          163,
          164,
          165,
          166,
          167,
          168,
          169,
          170,
          171,
          172,
          173,
          178,
          179,
          184,
          185,
          196,
          197,
          198,
          199,
          200,
          201,
          202,
          203,
          204,
          205,
          206,
          207,
          208,
          209,
          214,
          215,
          220,
          221
        ];
      }
    } catch (err) {
    }
    var supportsColor;
    exports.inspectOpts = Object.keys(process.env).filter(function(key) {
      return /^debug_/i.test(key);
    }).reduce(function(obj, key) {
      var prop = key.substring(6).toLowerCase().replace(/_([a-z])/g, function(_, k) {
        return k.toUpperCase();
      });
      var val = process.env[key];
      if (/^(yes|on|true|enabled)$/i.test(val))
        val = true;
      else if (/^(no|off|false|disabled)$/i.test(val))
        val = false;
      else if (val === "null")
        val = null;
      else
        val = Number(val);
      obj[prop] = val;
      return obj;
    }, {});
    function useColors() {
      return "colors" in exports.inspectOpts ? Boolean(exports.inspectOpts.colors) : tty.isatty(process.stderr.fd);
    }
    exports.formatters.o = function(v) {
      this.inspectOpts.colors = this.useColors;
      return util2.inspect(v, this.inspectOpts).split("\n").map(function(str) {
        return str.trim();
      }).join(" ");
    };
    exports.formatters.O = function(v) {
      this.inspectOpts.colors = this.useColors;
      return util2.inspect(v, this.inspectOpts);
    };
    function formatArgs(args) {
      var name2 = this.namespace;
      var useColors2 = this.useColors;
      if (useColors2) {
        var c = this.color;
        var colorCode = "[3" + (c < 8 ? c : "8;5;" + c);
        var prefix = "  " + colorCode + ";1m" + name2 + " [0m";
        args[0] = prefix + args[0].split("\n").join("\n" + prefix);
        args.push(colorCode + "m+" + exports.humanize(this.diff) + "[0m");
      } else {
        args[0] = getDate() + name2 + " " + args[0];
      }
    }
    function getDate() {
      if (exports.inspectOpts.hideDate) {
        return "";
      } else {
        return new Date().toISOString() + " ";
      }
    }
    function log() {
      return process.stderr.write(util2.format.apply(util2, arguments) + "\n");
    }
    function save(namespaces) {
      if (namespaces == null) {
        delete process.env.DEBUG;
      } else {
        process.env.DEBUG = namespaces;
      }
    }
    function load() {
      return process.env.DEBUG;
    }
    function init(debug) {
      debug.inspectOpts = {};
      var keys = Object.keys(exports.inspectOpts);
      for (var i = 0; i < keys.length; i++) {
        debug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];
      }
    }
    exports.enable(load());
  }
});

// node_modules/follow-redirects/node_modules/debug/src/index.js
var require_src = __commonJS({
  "node_modules/follow-redirects/node_modules/debug/src/index.js"(exports, module2) {
    if (typeof process === "undefined" || process.type === "renderer") {
      module2.exports = require_browser();
    } else {
      module2.exports = require_node();
    }
  }
});

// node_modules/follow-redirects/index.js
var require_follow_redirects = __commonJS({
  "node_modules/follow-redirects/index.js"(exports, module2) {
    var url = require("url");
    var http = require("http");
    var https = require("https");
    var assert = require("assert");
    var Writable = require("stream").Writable;
    var debug = require_src()("follow-redirects");
    var SAFE_METHODS = { GET: true, HEAD: true, OPTIONS: true, TRACE: true };
    var eventHandlers = Object.create(null);
    ["abort", "aborted", "error", "socket", "timeout"].forEach(function(event) {
      eventHandlers[event] = function(arg) {
        this._redirectable.emit(event, arg);
      };
    });
    function RedirectableRequest(options, responseCallback) {
      Writable.call(this);
      options.headers = options.headers || {};
      this._options = options;
      this._redirectCount = 0;
      this._redirects = [];
      this._requestBodyLength = 0;
      this._requestBodyBuffers = [];
      if (options.host) {
        if (!options.hostname) {
          options.hostname = options.host;
        }
        delete options.host;
      }
      if (responseCallback) {
        this.on("response", responseCallback);
      }
      var self2 = this;
      this._onNativeResponse = function(response) {
        self2._processResponse(response);
      };
      if (!options.pathname && options.path) {
        var searchPos = options.path.indexOf("?");
        if (searchPos < 0) {
          options.pathname = options.path;
        } else {
          options.pathname = options.path.substring(0, searchPos);
          options.search = options.path.substring(searchPos);
        }
      }
      this._performRequest();
    }
    RedirectableRequest.prototype = Object.create(Writable.prototype);
    RedirectableRequest.prototype.write = function(data, encoding, callback) {
      if (!(typeof data === "string" || typeof data === "object" && "length" in data)) {
        throw new Error("data should be a string, Buffer or Uint8Array");
      }
      if (typeof encoding === "function") {
        callback = encoding;
        encoding = null;
      }
      if (data.length === 0) {
        if (callback) {
          callback();
        }
        return;
      }
      if (this._requestBodyLength + data.length <= this._options.maxBodyLength) {
        this._requestBodyLength += data.length;
        this._requestBodyBuffers.push({ data, encoding });
        this._currentRequest.write(data, encoding, callback);
      } else {
        this.emit("error", new Error("Request body larger than maxBodyLength limit"));
        this.abort();
      }
    };
    RedirectableRequest.prototype.end = function(data, encoding, callback) {
      if (typeof data === "function") {
        callback = data;
        data = encoding = null;
      } else if (typeof encoding === "function") {
        callback = encoding;
        encoding = null;
      }
      var currentRequest = this._currentRequest;
      this.write(data || "", encoding, function() {
        currentRequest.end(null, null, callback);
      });
    };
    RedirectableRequest.prototype.setHeader = function(name2, value) {
      this._options.headers[name2] = value;
      this._currentRequest.setHeader(name2, value);
    };
    RedirectableRequest.prototype.removeHeader = function(name2) {
      delete this._options.headers[name2];
      this._currentRequest.removeHeader(name2);
    };
    [
      "abort",
      "flushHeaders",
      "getHeader",
      "setNoDelay",
      "setSocketKeepAlive",
      "setTimeout"
    ].forEach(function(method) {
      RedirectableRequest.prototype[method] = function(a, b) {
        return this._currentRequest[method](a, b);
      };
    });
    ["aborted", "connection", "socket"].forEach(function(property) {
      Object.defineProperty(RedirectableRequest.prototype, property, {
        get: function() {
          return this._currentRequest[property];
        }
      });
    });
    RedirectableRequest.prototype._performRequest = function() {
      var protocol = this._options.protocol;
      var nativeProtocol = this._options.nativeProtocols[protocol];
      if (!nativeProtocol) {
        this.emit("error", new Error("Unsupported protocol " + protocol));
        return;
      }
      if (this._options.agents) {
        var scheme = protocol.substr(0, protocol.length - 1);
        this._options.agent = this._options.agents[scheme];
      }
      var request = this._currentRequest = nativeProtocol.request(this._options, this._onNativeResponse);
      this._currentUrl = url.format(this._options);
      request._redirectable = this;
      for (var event in eventHandlers) {
        if (event) {
          request.on(event, eventHandlers[event]);
        }
      }
      if (this._isRedirect) {
        var i = 0;
        var buffers = this._requestBodyBuffers;
        (function writeNext() {
          if (i < buffers.length) {
            var buffer = buffers[i++];
            request.write(buffer.data, buffer.encoding, writeNext);
          } else {
            request.end();
          }
        })();
      }
    };
    RedirectableRequest.prototype._processResponse = function(response) {
      if (this._options.trackRedirects) {
        this._redirects.push({
          url: this._currentUrl,
          headers: response.headers,
          statusCode: response.statusCode
        });
      }
      var location = response.headers.location;
      if (location && this._options.followRedirects !== false && response.statusCode >= 300 && response.statusCode < 400) {
        if (++this._redirectCount > this._options.maxRedirects) {
          this.emit("error", new Error("Max redirects exceeded."));
          return;
        }
        var header;
        var headers = this._options.headers;
        if (response.statusCode !== 307 && !(this._options.method in SAFE_METHODS)) {
          this._options.method = "GET";
          this._requestBodyBuffers = [];
          for (header in headers) {
            if (/^content-/i.test(header)) {
              delete headers[header];
            }
          }
        }
        if (!this._isRedirect) {
          for (header in headers) {
            if (/^host$/i.test(header)) {
              delete headers[header];
            }
          }
        }
        var redirectUrl = url.resolve(this._currentUrl, location);
        debug("redirecting to", redirectUrl);
        Object.assign(this._options, url.parse(redirectUrl));
        this._isRedirect = true;
        this._performRequest();
        response.destroy();
      } else {
        response.responseUrl = this._currentUrl;
        response.redirects = this._redirects;
        this.emit("response", response);
        this._requestBodyBuffers = [];
      }
    };
    function wrap(protocols) {
      var exports2 = {
        maxRedirects: 21,
        maxBodyLength: 10 * 1024 * 1024
      };
      var nativeProtocols = {};
      Object.keys(protocols).forEach(function(scheme) {
        var protocol = scheme + ":";
        var nativeProtocol = nativeProtocols[protocol] = protocols[scheme];
        var wrappedProtocol = exports2[scheme] = Object.create(nativeProtocol);
        wrappedProtocol.request = function(options, callback) {
          if (typeof options === "string") {
            options = url.parse(options);
            options.maxRedirects = exports2.maxRedirects;
          } else {
            options = Object.assign({
              protocol,
              maxRedirects: exports2.maxRedirects,
              maxBodyLength: exports2.maxBodyLength
            }, options);
          }
          options.nativeProtocols = nativeProtocols;
          assert.equal(options.protocol, protocol, "protocol mismatch");
          debug("options", options);
          return new RedirectableRequest(options, callback);
        };
        wrappedProtocol.get = function(options, callback) {
          var request = wrappedProtocol.request(options, callback);
          request.end();
          return request;
        };
      });
      return exports2;
    }
    module2.exports = wrap({ http, https });
    module2.exports.wrap = wrap;
  }
});

// node_modules/axios/package.json
var require_package = __commonJS({
  "node_modules/axios/package.json"(exports, module2) {
    module2.exports = {
      name: "axios",
      version: "0.19.2",
      description: "Promise based HTTP client for the browser and node.js",
      main: "index.js",
      scripts: {
        test: "grunt test && bundlesize",
        start: "node ./sandbox/server.js",
        build: "NODE_ENV=production grunt build",
        preversion: "npm test",
        version: "npm run build && grunt version && git add -A dist && git add CHANGELOG.md bower.json package.json",
        postversion: "git push && git push --tags",
        examples: "node ./examples/server.js",
        coveralls: "cat coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js",
        fix: "eslint --fix lib/**/*.js"
      },
      repository: {
        type: "git",
        url: "https://github.com/axios/axios.git"
      },
      keywords: [
        "xhr",
        "http",
        "ajax",
        "promise",
        "node"
      ],
      author: "Matt Zabriskie",
      license: "MIT",
      bugs: {
        url: "https://github.com/axios/axios/issues"
      },
      homepage: "https://github.com/axios/axios",
      devDependencies: {
        bundlesize: "^0.17.0",
        coveralls: "^3.0.0",
        "es6-promise": "^4.2.4",
        grunt: "^1.0.2",
        "grunt-banner": "^0.6.0",
        "grunt-cli": "^1.2.0",
        "grunt-contrib-clean": "^1.1.0",
        "grunt-contrib-watch": "^1.0.0",
        "grunt-eslint": "^20.1.0",
        "grunt-karma": "^2.0.0",
        "grunt-mocha-test": "^0.13.3",
        "grunt-ts": "^6.0.0-beta.19",
        "grunt-webpack": "^1.0.18",
        "istanbul-instrumenter-loader": "^1.0.0",
        "jasmine-core": "^2.4.1",
        karma: "^1.3.0",
        "karma-chrome-launcher": "^2.2.0",
        "karma-coverage": "^1.1.1",
        "karma-firefox-launcher": "^1.1.0",
        "karma-jasmine": "^1.1.1",
        "karma-jasmine-ajax": "^0.1.13",
        "karma-opera-launcher": "^1.0.0",
        "karma-safari-launcher": "^1.0.0",
        "karma-sauce-launcher": "^1.2.0",
        "karma-sinon": "^1.0.5",
        "karma-sourcemap-loader": "^0.3.7",
        "karma-webpack": "^1.7.0",
        "load-grunt-tasks": "^3.5.2",
        minimist: "^1.2.0",
        mocha: "^5.2.0",
        sinon: "^4.5.0",
        typescript: "^2.8.1",
        "url-search-params": "^0.10.0",
        webpack: "^1.13.1",
        "webpack-dev-server": "^1.14.1"
      },
      browser: {
        "./lib/adapters/http.js": "./lib/adapters/xhr.js"
      },
      typings: "./index.d.ts",
      dependencies: {
        "follow-redirects": "1.5.10"
      },
      bundlesize: [
        {
          path: "./dist/axios.min.js",
          threshold: "5kB"
        }
      ]
    };
  }
});

// node_modules/axios/lib/adapters/http.js
var require_http = __commonJS({
  "node_modules/axios/lib/adapters/http.js"(exports, module2) {
    "use strict";
    var utils = require_utils2();
    var settle = require_settle();
    var buildFullPath = require_buildFullPath();
    var buildURL = require_buildURL();
    var http = require("http");
    var https = require("https");
    var httpFollow = require_follow_redirects().http;
    var httpsFollow = require_follow_redirects().https;
    var url = require("url");
    var zlib = require("zlib");
    var pkg = require_package();
    var createError = require_createError();
    var enhanceError = require_enhanceError();
    var isHttps = /https:?/;
    module2.exports = function httpAdapter(config2) {
      return new Promise(function dispatchHttpRequest(resolvePromise, rejectPromise) {
        var resolve = function resolve2(value) {
          resolvePromise(value);
        };
        var reject = function reject2(value) {
          rejectPromise(value);
        };
        var data = config2.data;
        var headers = config2.headers;
        if (!headers["User-Agent"] && !headers["user-agent"]) {
          headers["User-Agent"] = "axios/" + pkg.version;
        }
        if (data && !utils.isStream(data)) {
          if (Buffer.isBuffer(data)) {
          } else if (utils.isArrayBuffer(data)) {
            data = Buffer.from(new Uint8Array(data));
          } else if (utils.isString(data)) {
            data = Buffer.from(data, "utf-8");
          } else {
            return reject(createError("Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream", config2));
          }
          headers["Content-Length"] = data.length;
        }
        var auth = void 0;
        if (config2.auth) {
          var username = config2.auth.username || "";
          var password = config2.auth.password || "";
          auth = username + ":" + password;
        }
        var fullPath = buildFullPath(config2.baseURL, config2.url);
        var parsed = url.parse(fullPath);
        var protocol = parsed.protocol || "http:";
        if (!auth && parsed.auth) {
          var urlAuth = parsed.auth.split(":");
          var urlUsername = urlAuth[0] || "";
          var urlPassword = urlAuth[1] || "";
          auth = urlUsername + ":" + urlPassword;
        }
        if (auth) {
          delete headers.Authorization;
        }
        var isHttpsRequest = isHttps.test(protocol);
        var agent = isHttpsRequest ? config2.httpsAgent : config2.httpAgent;
        var options = {
          path: buildURL(parsed.path, config2.params, config2.paramsSerializer).replace(/^\?/, ""),
          method: config2.method.toUpperCase(),
          headers,
          agent,
          agents: { http: config2.httpAgent, https: config2.httpsAgent },
          auth
        };
        if (config2.socketPath) {
          options.socketPath = config2.socketPath;
        } else {
          options.hostname = parsed.hostname;
          options.port = parsed.port;
        }
        var proxy = config2.proxy;
        if (!proxy && proxy !== false) {
          var proxyEnv = protocol.slice(0, -1) + "_proxy";
          var proxyUrl = process.env[proxyEnv] || process.env[proxyEnv.toUpperCase()];
          if (proxyUrl) {
            var parsedProxyUrl = url.parse(proxyUrl);
            var noProxyEnv = process.env.no_proxy || process.env.NO_PROXY;
            var shouldProxy = true;
            if (noProxyEnv) {
              var noProxy = noProxyEnv.split(",").map(function trim(s) {
                return s.trim();
              });
              shouldProxy = !noProxy.some(function proxyMatch(proxyElement) {
                if (!proxyElement) {
                  return false;
                }
                if (proxyElement === "*") {
                  return true;
                }
                if (proxyElement[0] === "." && parsed.hostname.substr(parsed.hostname.length - proxyElement.length) === proxyElement) {
                  return true;
                }
                return parsed.hostname === proxyElement;
              });
            }
            if (shouldProxy) {
              proxy = {
                host: parsedProxyUrl.hostname,
                port: parsedProxyUrl.port
              };
              if (parsedProxyUrl.auth) {
                var proxyUrlAuth = parsedProxyUrl.auth.split(":");
                proxy.auth = {
                  username: proxyUrlAuth[0],
                  password: proxyUrlAuth[1]
                };
              }
            }
          }
        }
        if (proxy) {
          options.hostname = proxy.host;
          options.host = proxy.host;
          options.headers.host = parsed.hostname + (parsed.port ? ":" + parsed.port : "");
          options.port = proxy.port;
          options.path = protocol + "//" + parsed.hostname + (parsed.port ? ":" + parsed.port : "") + options.path;
          if (proxy.auth) {
            var base64 = Buffer.from(proxy.auth.username + ":" + proxy.auth.password, "utf8").toString("base64");
            options.headers["Proxy-Authorization"] = "Basic " + base64;
          }
        }
        var transport;
        var isHttpsProxy = isHttpsRequest && (proxy ? isHttps.test(proxy.protocol) : true);
        if (config2.transport) {
          transport = config2.transport;
        } else if (config2.maxRedirects === 0) {
          transport = isHttpsProxy ? https : http;
        } else {
          if (config2.maxRedirects) {
            options.maxRedirects = config2.maxRedirects;
          }
          transport = isHttpsProxy ? httpsFollow : httpFollow;
        }
        if (config2.maxContentLength && config2.maxContentLength > -1) {
          options.maxBodyLength = config2.maxContentLength;
        }
        var req = transport.request(options, function handleResponse(res) {
          if (req.aborted)
            return;
          var stream = res;
          switch (res.headers["content-encoding"]) {
            case "gzip":
            case "compress":
            case "deflate":
              stream = res.statusCode === 204 ? stream : stream.pipe(zlib.createUnzip());
              delete res.headers["content-encoding"];
              break;
          }
          var lastRequest = res.req || req;
          var response = {
            status: res.statusCode,
            statusText: res.statusMessage,
            headers: res.headers,
            config: config2,
            request: lastRequest
          };
          if (config2.responseType === "stream") {
            response.data = stream;
            settle(resolve, reject, response);
          } else {
            var responseBuffer = [];
            stream.on("data", function handleStreamData(chunk) {
              responseBuffer.push(chunk);
              if (config2.maxContentLength > -1 && Buffer.concat(responseBuffer).length > config2.maxContentLength) {
                stream.destroy();
                reject(createError("maxContentLength size of " + config2.maxContentLength + " exceeded", config2, null, lastRequest));
              }
            });
            stream.on("error", function handleStreamError(err) {
              if (req.aborted)
                return;
              reject(enhanceError(err, config2, null, lastRequest));
            });
            stream.on("end", function handleStreamEnd() {
              var responseData = Buffer.concat(responseBuffer);
              if (config2.responseType !== "arraybuffer") {
                responseData = responseData.toString(config2.responseEncoding);
              }
              response.data = responseData;
              settle(resolve, reject, response);
            });
          }
        });
        req.on("error", function handleRequestError(err) {
          if (req.aborted)
            return;
          reject(enhanceError(err, config2, null, req));
        });
        if (config2.timeout) {
          req.setTimeout(config2.timeout, function handleRequestTimeout() {
            req.abort();
            reject(createError("timeout of " + config2.timeout + "ms exceeded", config2, "ECONNABORTED", req));
          });
        }
        if (config2.cancelToken) {
          config2.cancelToken.promise.then(function onCanceled(cancel) {
            if (req.aborted)
              return;
            req.abort();
            reject(cancel);
          });
        }
        if (utils.isStream(data)) {
          data.on("error", function handleStreamError(err) {
            reject(enhanceError(err, config2, null, req));
          }).pipe(req);
        } else {
          req.end(data);
        }
      });
    };
  }
});

// node_modules/axios/lib/defaults.js
var require_defaults = __commonJS({
  "node_modules/axios/lib/defaults.js"(exports, module2) {
    "use strict";
    var utils = require_utils2();
    var normalizeHeaderName = require_normalizeHeaderName();
    var DEFAULT_CONTENT_TYPE = {
      "Content-Type": "application/x-www-form-urlencoded"
    };
    function setContentTypeIfUnset(headers, value) {
      if (!utils.isUndefined(headers) && utils.isUndefined(headers["Content-Type"])) {
        headers["Content-Type"] = value;
      }
    }
    function getDefaultAdapter() {
      var adapter;
      if (typeof XMLHttpRequest !== "undefined") {
        adapter = require_xhr();
      } else if (typeof process !== "undefined" && Object.prototype.toString.call(process) === "[object process]") {
        adapter = require_http();
      }
      return adapter;
    }
    var defaults = {
      adapter: getDefaultAdapter(),
      transformRequest: [function transformRequest(data, headers) {
        normalizeHeaderName(headers, "Accept");
        normalizeHeaderName(headers, "Content-Type");
        if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {
          return data;
        }
        if (utils.isArrayBufferView(data)) {
          return data.buffer;
        }
        if (utils.isURLSearchParams(data)) {
          setContentTypeIfUnset(headers, "application/x-www-form-urlencoded;charset=utf-8");
          return data.toString();
        }
        if (utils.isObject(data)) {
          setContentTypeIfUnset(headers, "application/json;charset=utf-8");
          return JSON.stringify(data);
        }
        return data;
      }],
      transformResponse: [function transformResponse(data) {
        if (typeof data === "string") {
          try {
            data = JSON.parse(data);
          } catch (e) {
          }
        }
        return data;
      }],
      timeout: 0,
      xsrfCookieName: "XSRF-TOKEN",
      xsrfHeaderName: "X-XSRF-TOKEN",
      maxContentLength: -1,
      validateStatus: function validateStatus(status) {
        return status >= 200 && status < 300;
      }
    };
    defaults.headers = {
      common: {
        "Accept": "application/json, text/plain, */*"
      }
    };
    utils.forEach(["delete", "get", "head"], function forEachMethodNoData(method) {
      defaults.headers[method] = {};
    });
    utils.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
      defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
    });
    module2.exports = defaults;
  }
});

// node_modules/axios/lib/core/dispatchRequest.js
var require_dispatchRequest = __commonJS({
  "node_modules/axios/lib/core/dispatchRequest.js"(exports, module2) {
    "use strict";
    var utils = require_utils2();
    var transformData = require_transformData();
    var isCancel = require_isCancel();
    var defaults = require_defaults();
    function throwIfCancellationRequested(config2) {
      if (config2.cancelToken) {
        config2.cancelToken.throwIfRequested();
      }
    }
    module2.exports = function dispatchRequest(config2) {
      throwIfCancellationRequested(config2);
      config2.headers = config2.headers || {};
      config2.data = transformData(config2.data, config2.headers, config2.transformRequest);
      config2.headers = utils.merge(config2.headers.common || {}, config2.headers[config2.method] || {}, config2.headers);
      utils.forEach(["delete", "get", "head", "post", "put", "patch", "common"], function cleanHeaderConfig(method) {
        delete config2.headers[method];
      });
      var adapter = config2.adapter || defaults.adapter;
      return adapter(config2).then(function onAdapterResolution(response) {
        throwIfCancellationRequested(config2);
        response.data = transformData(response.data, response.headers, config2.transformResponse);
        return response;
      }, function onAdapterRejection(reason) {
        if (!isCancel(reason)) {
          throwIfCancellationRequested(config2);
          if (reason && reason.response) {
            reason.response.data = transformData(reason.response.data, reason.response.headers, config2.transformResponse);
          }
        }
        return Promise.reject(reason);
      });
    };
  }
});

// node_modules/axios/lib/core/mergeConfig.js
var require_mergeConfig = __commonJS({
  "node_modules/axios/lib/core/mergeConfig.js"(exports, module2) {
    "use strict";
    var utils = require_utils2();
    module2.exports = function mergeConfig(config1, config2) {
      config2 = config2 || {};
      var config3 = {};
      var valueFromConfig2Keys = ["url", "method", "params", "data"];
      var mergeDeepPropertiesKeys = ["headers", "auth", "proxy"];
      var defaultToConfig2Keys = [
        "baseURL",
        "url",
        "transformRequest",
        "transformResponse",
        "paramsSerializer",
        "timeout",
        "withCredentials",
        "adapter",
        "responseType",
        "xsrfCookieName",
        "xsrfHeaderName",
        "onUploadProgress",
        "onDownloadProgress",
        "maxContentLength",
        "validateStatus",
        "maxRedirects",
        "httpAgent",
        "httpsAgent",
        "cancelToken",
        "socketPath"
      ];
      utils.forEach(valueFromConfig2Keys, function valueFromConfig2(prop) {
        if (typeof config2[prop] !== "undefined") {
          config3[prop] = config2[prop];
        }
      });
      utils.forEach(mergeDeepPropertiesKeys, function mergeDeepProperties(prop) {
        if (utils.isObject(config2[prop])) {
          config3[prop] = utils.deepMerge(config1[prop], config2[prop]);
        } else if (typeof config2[prop] !== "undefined") {
          config3[prop] = config2[prop];
        } else if (utils.isObject(config1[prop])) {
          config3[prop] = utils.deepMerge(config1[prop]);
        } else if (typeof config1[prop] !== "undefined") {
          config3[prop] = config1[prop];
        }
      });
      utils.forEach(defaultToConfig2Keys, function defaultToConfig2(prop) {
        if (typeof config2[prop] !== "undefined") {
          config3[prop] = config2[prop];
        } else if (typeof config1[prop] !== "undefined") {
          config3[prop] = config1[prop];
        }
      });
      var axiosKeys = valueFromConfig2Keys.concat(mergeDeepPropertiesKeys).concat(defaultToConfig2Keys);
      var otherKeys = Object.keys(config2).filter(function filterAxiosKeys(key) {
        return axiosKeys.indexOf(key) === -1;
      });
      utils.forEach(otherKeys, function otherKeysDefaultToConfig2(prop) {
        if (typeof config2[prop] !== "undefined") {
          config3[prop] = config2[prop];
        } else if (typeof config1[prop] !== "undefined") {
          config3[prop] = config1[prop];
        }
      });
      return config3;
    };
  }
});

// node_modules/axios/lib/core/Axios.js
var require_Axios = __commonJS({
  "node_modules/axios/lib/core/Axios.js"(exports, module2) {
    "use strict";
    var utils = require_utils2();
    var buildURL = require_buildURL();
    var InterceptorManager = require_InterceptorManager();
    var dispatchRequest = require_dispatchRequest();
    var mergeConfig = require_mergeConfig();
    function Axios(instanceConfig) {
      this.defaults = instanceConfig;
      this.interceptors = {
        request: new InterceptorManager(),
        response: new InterceptorManager()
      };
    }
    Axios.prototype.request = function request(config2) {
      if (typeof config2 === "string") {
        config2 = arguments[1] || {};
        config2.url = arguments[0];
      } else {
        config2 = config2 || {};
      }
      config2 = mergeConfig(this.defaults, config2);
      if (config2.method) {
        config2.method = config2.method.toLowerCase();
      } else if (this.defaults.method) {
        config2.method = this.defaults.method.toLowerCase();
      } else {
        config2.method = "get";
      }
      var chain = [dispatchRequest, void 0];
      var promise = Promise.resolve(config2);
      this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
        chain.unshift(interceptor.fulfilled, interceptor.rejected);
      });
      this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
        chain.push(interceptor.fulfilled, interceptor.rejected);
      });
      while (chain.length) {
        promise = promise.then(chain.shift(), chain.shift());
      }
      return promise;
    };
    Axios.prototype.getUri = function getUri(config2) {
      config2 = mergeConfig(this.defaults, config2);
      return buildURL(config2.url, config2.params, config2.paramsSerializer).replace(/^\?/, "");
    };
    utils.forEach(["delete", "get", "head", "options"], function forEachMethodNoData(method) {
      Axios.prototype[method] = function(url, config2) {
        return this.request(utils.merge(config2 || {}, {
          method,
          url
        }));
      };
    });
    utils.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
      Axios.prototype[method] = function(url, data, config2) {
        return this.request(utils.merge(config2 || {}, {
          method,
          url,
          data
        }));
      };
    });
    module2.exports = Axios;
  }
});

// node_modules/axios/lib/cancel/Cancel.js
var require_Cancel = __commonJS({
  "node_modules/axios/lib/cancel/Cancel.js"(exports, module2) {
    "use strict";
    function Cancel(message) {
      this.message = message;
    }
    Cancel.prototype.toString = function toString() {
      return "Cancel" + (this.message ? ": " + this.message : "");
    };
    Cancel.prototype.__CANCEL__ = true;
    module2.exports = Cancel;
  }
});

// node_modules/axios/lib/cancel/CancelToken.js
var require_CancelToken = __commonJS({
  "node_modules/axios/lib/cancel/CancelToken.js"(exports, module2) {
    "use strict";
    var Cancel = require_Cancel();
    function CancelToken(executor) {
      if (typeof executor !== "function") {
        throw new TypeError("executor must be a function.");
      }
      var resolvePromise;
      this.promise = new Promise(function promiseExecutor(resolve) {
        resolvePromise = resolve;
      });
      var token = this;
      executor(function cancel(message) {
        if (token.reason) {
          return;
        }
        token.reason = new Cancel(message);
        resolvePromise(token.reason);
      });
    }
    CancelToken.prototype.throwIfRequested = function throwIfRequested() {
      if (this.reason) {
        throw this.reason;
      }
    };
    CancelToken.source = function source() {
      var cancel;
      var token = new CancelToken(function executor(c) {
        cancel = c;
      });
      return {
        token,
        cancel
      };
    };
    module2.exports = CancelToken;
  }
});

// node_modules/axios/lib/helpers/spread.js
var require_spread = __commonJS({
  "node_modules/axios/lib/helpers/spread.js"(exports, module2) {
    "use strict";
    module2.exports = function spread(callback) {
      return function wrap(arr) {
        return callback.apply(null, arr);
      };
    };
  }
});

// node_modules/axios/lib/axios.js
var require_axios = __commonJS({
  "node_modules/axios/lib/axios.js"(exports, module2) {
    "use strict";
    var utils = require_utils2();
    var bind = require_bind();
    var Axios = require_Axios();
    var mergeConfig = require_mergeConfig();
    var defaults = require_defaults();
    function createInstance(defaultConfig) {
      var context = new Axios(defaultConfig);
      var instance = bind(Axios.prototype.request, context);
      utils.extend(instance, Axios.prototype, context);
      utils.extend(instance, context);
      return instance;
    }
    var axios = createInstance(defaults);
    axios.Axios = Axios;
    axios.create = function create(instanceConfig) {
      return createInstance(mergeConfig(axios.defaults, instanceConfig));
    };
    axios.Cancel = require_Cancel();
    axios.CancelToken = require_CancelToken();
    axios.isCancel = require_isCancel();
    axios.all = function all(promises) {
      return Promise.all(promises);
    };
    axios.spread = require_spread();
    module2.exports = axios;
    module2.exports.default = axios;
  }
});

// node_modules/axios/index.js
var require_axios2 = __commonJS({
  "node_modules/axios/index.js"(exports, module2) {
    module2.exports = require_axios();
  }
});

// node_modules/@tbmini/server-mock/dist/sdk/request.js
var require_request = __commonJS({
  "node_modules/@tbmini/server-mock/dist/sdk/request.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TBAPI_REQUEST = exports.CURD_REQUEST = void 0;
    var axios_1 = require_axios2();
    var request = function(path, params, port2) {
      if (port2 === void 0) {
        port2 = 5555;
      }
      return __awaiter(void 0, void 0, void 0, function() {
        var res;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, (0, axios_1.default)({
                method: "post",
                url: path,
                data: params,
                baseURL: "http://127.0.0.1:" + port2
              })];
            case 1:
              res = _a.sent();
              if (!res.data.data) {
                console.log("\u8C03\u7528" + path + JSON.stringify(params) + "\n\u8FD4\u56DE\u7ED3\u679C", res.data);
                return [2, res.data.data];
              }
              return [2, res.data.data];
          }
        });
      });
    };
    var CURD_REQUEST = function(_a) {
      var db = _a.db, TABLE = _a.TABLE, type = _a.type, query = _a.query, options = _a.options, document2 = _a.document;
      return __awaiter(void 0, void 0, void 0, function() {
        var data, path;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              data = {
                dbName: db,
                TABLE,
                query,
                options,
                document: document2
              };
              console.log("\u8BF7\u6C42\u53C2\u6570", data);
              path = "/proxy/dataMock/" + type;
              return [4, request(path, data)];
            case 1:
              return [2, _b.sent()];
          }
        });
      });
    };
    exports.CURD_REQUEST = CURD_REQUEST;
    var TBAPI_REQUEST = function(db, funName, query) {
      return __awaiter(void 0, void 0, void 0, function() {
        var data, path, params;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              data = {
                dbName: db,
                funName
              };
              path = "/proxy/dataMock/tbapi";
              params = {
                dbName: data.dbName,
                funName: data.funName,
                query
              };
              return [4, request(path, params)];
            case 1:
              return [2, _a.sent()];
          }
        });
      });
    };
    exports.TBAPI_REQUEST = TBAPI_REQUEST;
  }
});

// node_modules/@tbmini/server-mock/dist/sdk/BaseDao.js
var require_BaseDao = __commonJS({
  "node_modules/@tbmini/server-mock/dist/sdk/BaseDao.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BaseDao = void 0;
    var CURD_REQUEST = require_request().CURD_REQUEST;
    var BaseDao3 = function() {
      function BaseDao4(context, dbName) {
        this.db = context.db;
        this.TABLE = dbName;
      }
      BaseDao4.prototype.findOne = function(query, options) {
        return __awaiter(this, void 0, void 0, function() {
          var result;
          return __generator(this, function(_a) {
            switch (_a.label) {
              case 0:
                return [4, CURD_REQUEST({
                  db: this.db,
                  TABLE: this.TABLE,
                  type: "find",
                  query: query || {},
                  options: options || {}
                })];
              case 1:
                result = _a.sent();
                return [2, result[0]];
            }
          });
        });
      };
      BaseDao4.prototype.find = function(query, options) {
        return __awaiter(this, void 0, void 0, function() {
          var result;
          return __generator(this, function(_a) {
            switch (_a.label) {
              case 0:
                console.log("db", this.db);
                return [4, CURD_REQUEST({
                  db: this.db,
                  TABLE: this.TABLE,
                  type: "find",
                  query: query || {},
                  options: options || {}
                })];
              case 1:
                result = _a.sent();
                return [2, result];
            }
          });
        });
      };
      BaseDao4.prototype.insertOne = function(document2) {
        return __awaiter(this, void 0, void 0, function() {
          var result;
          return __generator(this, function(_a) {
            switch (_a.label) {
              case 0:
                console.log("insertOne", document2);
                return [4, CURD_REQUEST({ db: this.db, TABLE: this.TABLE, type: "insert", document: document2 || {} })];
              case 1:
                result = _a.sent();
                return [2, result._id || result.inertId || result];
            }
          });
        });
      };
      BaseDao4.prototype.insertMany = function(documents) {
        return __awaiter(this, void 0, void 0, function() {
          var result;
          return __generator(this, function(_a) {
            switch (_a.label) {
              case 0:
                return [4, CURD_REQUEST({ db: this.db, TABLE: this.TABLE, type: "insert", document: documents || [{}] })];
              case 1:
                result = _a.sent();
                return [2, result];
            }
          });
        });
      };
      BaseDao4.prototype.update = function(query, options) {
        return __awaiter(this, void 0, void 0, function() {
          var result, res;
          return __generator(this, function(_a) {
            switch (_a.label) {
              case 0:
                return [4, CURD_REQUEST({
                  db: this.db,
                  TABLE: this.TABLE,
                  type: "update",
                  query: query || {},
                  options: options || {}
                })];
              case 1:
                result = _a.sent();
                console.log(result);
                res = result && result.nModified > 0 ? 1 : 0;
                console.log("update\u7ED3\u679C", res);
                return [2, res];
            }
          });
        });
      };
      BaseDao4.prototype.delete = function(query, options) {
        return __awaiter(this, void 0, void 0, function() {
          var result;
          return __generator(this, function(_a) {
            switch (_a.label) {
              case 0:
                return [4, CURD_REQUEST({
                  db: this.db,
                  TABLE: this.TABLE,
                  type: "delete",
                  query: query || {},
                  options: options || {}
                })];
              case 1:
                result = _a.sent();
                return [2, result];
            }
          });
        });
      };
      BaseDao4.prototype.count = function(query, options) {
        return __awaiter(this, void 0, void 0, function() {
          var result;
          return __generator(this, function(_a) {
            switch (_a.label) {
              case 0:
                return [4, CURD_REQUEST({
                  db: this.db,
                  TABLE: this.TABLE,
                  type: "count",
                  query: query || {},
                  options: options || {}
                })];
              case 1:
                result = _a.sent();
                return [2, result];
            }
          });
        });
      };
      BaseDao4.prototype.aggregate = function(query) {
        return __awaiter(this, void 0, void 0, function() {
          var result;
          return __generator(this, function(_a) {
            switch (_a.label) {
              case 0:
                return [4, CURD_REQUEST({
                  db: this.db,
                  TABLE: this.TABLE,
                  type: "aggregate",
                  query: query || {}
                })];
              case 1:
                result = _a.sent();
                return [2, result];
            }
          });
        });
      };
      return BaseDao4;
    }();
    exports.BaseDao = BaseDao3;
  }
});

// node_modules/@tbmini/server-mock/dist/sdk/dateFormatter.js
var require_dateFormatter = __commonJS({
  "node_modules/@tbmini/server-mock/dist/sdk/dateFormatter.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.dateFormatter = void 0;
    var dateFormatter3 = function(thisDate, fmt) {
      if (fmt === void 0) {
        fmt = "yyyy-MM-dd hh:mm:ss";
      }
      thisDate = new Date(thisDate);
      console.log("thisDate", thisDate);
      var o = {
        "M+": thisDate.getMonth() + 1,
        "d+": thisDate.getDate(),
        "h+": thisDate.getHours(),
        "m+": thisDate.getMinutes(),
        "s+": thisDate.getSeconds(),
        "q+": Math.floor((thisDate.getMonth() + 3) / 3),
        S: thisDate.getMilliseconds()
      };
      if (/(y+)/.test(fmt))
        fmt = fmt.replace(RegExp.$1, (thisDate.getFullYear() + "").substr(4 - RegExp.$1.length));
      for (var k in o) {
        if (new RegExp("(" + k + ")").test(fmt)) {
          fmt = fmt.replace(RegExp.$1, RegExp.$1.length === 1 ? o[k] : ("00" + o[k]).substr(("" + o[k]).length));
        }
      }
      return fmt;
    };
    exports.dateFormatter = dateFormatter3;
  }
});

// node_modules/@tbmini/server-mock/dist/sdk/transformBeijingDate.js
var require_transformBeijingDate = __commonJS({
  "node_modules/@tbmini/server-mock/dist/sdk/transformBeijingDate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.transformBeijingDate = void 0;
    var transformBeijingDate3 = function(day) {
      if (day) {
        return new Date(day).getTime();
      } else {
        return new Date().getTime();
      }
    };
    exports.transformBeijingDate = transformBeijingDate3;
  }
});

// node_modules/@tbmini/server-mock/dist/sdk/TBAPIS.js
var require_TBAPIS = __commonJS({
  "node_modules/@tbmini/server-mock/dist/sdk/TBAPIS.js"(exports) {
    "use strict";
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TBAPIS = void 0;
    var request_1 = require_request();
    var APIS = [
      "getItemListByItemIds",
      "getPrizeByEname",
      "getShopVipUrl",
      "queryVipinfo",
      "benefitSend",
      "queryCredits",
      "changeCredits",
      "getShopInfo",
      "getBuyerOrderList"
    ];
    exports.TBAPIS = APIS.reduce(function(prev, api) {
      var _a;
      var method = function(query) {
        return __awaiter(void 0, void 0, void 0, function() {
          var result;
          return __generator(this, function(_a2) {
            switch (_a2.label) {
              case 0:
                return [
                  4,
                  (0, request_1.TBAPI_REQUEST)(process.db, api, query)
                ];
              case 1:
                result = _a2.sent();
                console.log("TBAPIS." + api + "----\u53C2\u6570", process.db, api, query);
                console.log("result", result);
                return [2, result.tbvalue];
            }
          });
        });
      };
      return __assign(__assign({}, prev), (_a = {}, _a[api] = method, _a));
    }, {});
  }
});

// node_modules/@tbmini/server-mock/dist/sdk/index.js
var require_sdk = __commonJS({
  "node_modules/@tbmini/server-mock/dist/sdk/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_BaseDao(), exports);
    __exportStar(require_dateFormatter(), exports);
    __exportStar(require_transformBeijingDate(), exports);
    __exportStar(require_request(), exports);
    __exportStar(require_TBAPIS(), exports);
  }
});

// node_modules/@tbmini/server-mock/dist/index.js
var require_dist2 = __commonJS({
  "node_modules/@tbmini/server-mock/dist/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_sdk(), exports);
  }
});

// node_modules/lodash/lodash.js
var require_lodash = __commonJS({
  "node_modules/lodash/lodash.js"(exports, module2) {
    (function() {
      var undefined2;
      var VERSION = "4.17.21";
      var LARGE_ARRAY_SIZE = 200;
      var CORE_ERROR_TEXT = "Unsupported core-js use. Try https://npms.io/search?q=ponyfill.", FUNC_ERROR_TEXT = "Expected a function", INVALID_TEMPL_VAR_ERROR_TEXT = "Invalid `variable` option passed into `_.template`";
      var HASH_UNDEFINED = "__lodash_hash_undefined__";
      var MAX_MEMOIZE_SIZE = 500;
      var PLACEHOLDER = "__lodash_placeholder__";
      var CLONE_DEEP_FLAG = 1, CLONE_FLAT_FLAG = 2, CLONE_SYMBOLS_FLAG = 4;
      var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
      var WRAP_BIND_FLAG = 1, WRAP_BIND_KEY_FLAG = 2, WRAP_CURRY_BOUND_FLAG = 4, WRAP_CURRY_FLAG = 8, WRAP_CURRY_RIGHT_FLAG = 16, WRAP_PARTIAL_FLAG = 32, WRAP_PARTIAL_RIGHT_FLAG = 64, WRAP_ARY_FLAG = 128, WRAP_REARG_FLAG = 256, WRAP_FLIP_FLAG = 512;
      var DEFAULT_TRUNC_LENGTH = 30, DEFAULT_TRUNC_OMISSION = "...";
      var HOT_COUNT = 800, HOT_SPAN = 16;
      var LAZY_FILTER_FLAG = 1, LAZY_MAP_FLAG = 2, LAZY_WHILE_FLAG = 3;
      var INFINITY = 1 / 0, MAX_SAFE_INTEGER = 9007199254740991, MAX_INTEGER = 17976931348623157e292, NAN = 0 / 0;
      var MAX_ARRAY_LENGTH = 4294967295, MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1, HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;
      var wrapFlags = [
        ["ary", WRAP_ARY_FLAG],
        ["bind", WRAP_BIND_FLAG],
        ["bindKey", WRAP_BIND_KEY_FLAG],
        ["curry", WRAP_CURRY_FLAG],
        ["curryRight", WRAP_CURRY_RIGHT_FLAG],
        ["flip", WRAP_FLIP_FLAG],
        ["partial", WRAP_PARTIAL_FLAG],
        ["partialRight", WRAP_PARTIAL_RIGHT_FLAG],
        ["rearg", WRAP_REARG_FLAG]
      ];
      var argsTag = "[object Arguments]", arrayTag = "[object Array]", asyncTag = "[object AsyncFunction]", boolTag = "[object Boolean]", dateTag = "[object Date]", domExcTag = "[object DOMException]", errorTag = "[object Error]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]", mapTag = "[object Map]", numberTag = "[object Number]", nullTag = "[object Null]", objectTag = "[object Object]", promiseTag = "[object Promise]", proxyTag = "[object Proxy]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", symbolTag = "[object Symbol]", undefinedTag = "[object Undefined]", weakMapTag = "[object WeakMap]", weakSetTag = "[object WeakSet]";
      var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
      var reEmptyStringLeading = /\b__p \+= '';/g, reEmptyStringMiddle = /\b(__p \+=) '' \+/g, reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
      var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g, reUnescapedHtml = /[&<>"']/g, reHasEscapedHtml = RegExp(reEscapedHtml.source), reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
      var reEscape = /<%-([\s\S]+?)%>/g, reEvaluate = /<%([\s\S]+?)%>/g, reInterpolate = /<%=([\s\S]+?)%>/g;
      var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp = /^\w*$/, rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
      var reRegExpChar = /[\\^$.*+?()[\]{}|]/g, reHasRegExpChar = RegExp(reRegExpChar.source);
      var reTrimStart = /^\s+/;
      var reWhitespace = /\s/;
      var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/, reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/, reSplitDetails = /,? & /;
      var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
      var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;
      var reEscapeChar = /\\(\\)?/g;
      var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
      var reFlags = /\w*$/;
      var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
      var reIsBinary = /^0b[01]+$/i;
      var reIsHostCtor = /^\[object .+?Constructor\]$/;
      var reIsOctal = /^0o[0-7]+$/i;
      var reIsUint = /^(?:0|[1-9]\d*)$/;
      var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
      var reNoMatch = /($^)/;
      var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
      var rsAstralRange = "\\ud800-\\udfff", rsComboMarksRange = "\\u0300-\\u036f", reComboHalfMarksRange = "\\ufe20-\\ufe2f", rsComboSymbolsRange = "\\u20d0-\\u20ff", rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange, rsDingbatRange = "\\u2700-\\u27bf", rsLowerRange = "a-z\\xdf-\\xf6\\xf8-\\xff", rsMathOpRange = "\\xac\\xb1\\xd7\\xf7", rsNonCharRange = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf", rsPunctuationRange = "\\u2000-\\u206f", rsSpaceRange = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000", rsUpperRange = "A-Z\\xc0-\\xd6\\xd8-\\xde", rsVarRange = "\\ufe0e\\ufe0f", rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
      var rsApos = "['\u2019]", rsAstral = "[" + rsAstralRange + "]", rsBreak = "[" + rsBreakRange + "]", rsCombo = "[" + rsComboRange + "]", rsDigits = "\\d+", rsDingbat = "[" + rsDingbatRange + "]", rsLower = "[" + rsLowerRange + "]", rsMisc = "[^" + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + "]", rsFitz = "\\ud83c[\\udffb-\\udfff]", rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")", rsNonAstral = "[^" + rsAstralRange + "]", rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}", rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]", rsUpper = "[" + rsUpperRange + "]", rsZWJ = "\\u200d";
      var rsMiscLower = "(?:" + rsLower + "|" + rsMisc + ")", rsMiscUpper = "(?:" + rsUpper + "|" + rsMisc + ")", rsOptContrLower = "(?:" + rsApos + "(?:d|ll|m|re|s|t|ve))?", rsOptContrUpper = "(?:" + rsApos + "(?:D|LL|M|RE|S|T|VE))?", reOptMod = rsModifier + "?", rsOptVar = "[" + rsVarRange + "]?", rsOptJoin = "(?:" + rsZWJ + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*", rsOrdLower = "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])", rsOrdUpper = "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])", rsSeq = rsOptVar + reOptMod + rsOptJoin, rsEmoji = "(?:" + [rsDingbat, rsRegional, rsSurrPair].join("|") + ")" + rsSeq, rsSymbol = "(?:" + [rsNonAstral + rsCombo + "?", rsCombo, rsRegional, rsSurrPair, rsAstral].join("|") + ")";
      var reApos = RegExp(rsApos, "g");
      var reComboMark = RegExp(rsCombo, "g");
      var reUnicode = RegExp(rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq, "g");
      var reUnicodeWord = RegExp([
        rsUpper + "?" + rsLower + "+" + rsOptContrLower + "(?=" + [rsBreak, rsUpper, "$"].join("|") + ")",
        rsMiscUpper + "+" + rsOptContrUpper + "(?=" + [rsBreak, rsUpper + rsMiscLower, "$"].join("|") + ")",
        rsUpper + "?" + rsMiscLower + "+" + rsOptContrLower,
        rsUpper + "+" + rsOptContrUpper,
        rsOrdUpper,
        rsOrdLower,
        rsDigits,
        rsEmoji
      ].join("|"), "g");
      var reHasUnicode = RegExp("[" + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + "]");
      var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
      var contextProps = [
        "Array",
        "Buffer",
        "DataView",
        "Date",
        "Error",
        "Float32Array",
        "Float64Array",
        "Function",
        "Int8Array",
        "Int16Array",
        "Int32Array",
        "Map",
        "Math",
        "Object",
        "Promise",
        "RegExp",
        "Set",
        "String",
        "Symbol",
        "TypeError",
        "Uint8Array",
        "Uint8ClampedArray",
        "Uint16Array",
        "Uint32Array",
        "WeakMap",
        "_",
        "clearTimeout",
        "isFinite",
        "parseInt",
        "setTimeout"
      ];
      var templateCounter = -1;
      var typedArrayTags = {};
      typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
      typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
      var cloneableTags = {};
      cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
      cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
      var deburredLetters = {
        "\xC0": "A",
        "\xC1": "A",
        "\xC2": "A",
        "\xC3": "A",
        "\xC4": "A",
        "\xC5": "A",
        "\xE0": "a",
        "\xE1": "a",
        "\xE2": "a",
        "\xE3": "a",
        "\xE4": "a",
        "\xE5": "a",
        "\xC7": "C",
        "\xE7": "c",
        "\xD0": "D",
        "\xF0": "d",
        "\xC8": "E",
        "\xC9": "E",
        "\xCA": "E",
        "\xCB": "E",
        "\xE8": "e",
        "\xE9": "e",
        "\xEA": "e",
        "\xEB": "e",
        "\xCC": "I",
        "\xCD": "I",
        "\xCE": "I",
        "\xCF": "I",
        "\xEC": "i",
        "\xED": "i",
        "\xEE": "i",
        "\xEF": "i",
        "\xD1": "N",
        "\xF1": "n",
        "\xD2": "O",
        "\xD3": "O",
        "\xD4": "O",
        "\xD5": "O",
        "\xD6": "O",
        "\xD8": "O",
        "\xF2": "o",
        "\xF3": "o",
        "\xF4": "o",
        "\xF5": "o",
        "\xF6": "o",
        "\xF8": "o",
        "\xD9": "U",
        "\xDA": "U",
        "\xDB": "U",
        "\xDC": "U",
        "\xF9": "u",
        "\xFA": "u",
        "\xFB": "u",
        "\xFC": "u",
        "\xDD": "Y",
        "\xFD": "y",
        "\xFF": "y",
        "\xC6": "Ae",
        "\xE6": "ae",
        "\xDE": "Th",
        "\xFE": "th",
        "\xDF": "ss",
        "\u0100": "A",
        "\u0102": "A",
        "\u0104": "A",
        "\u0101": "a",
        "\u0103": "a",
        "\u0105": "a",
        "\u0106": "C",
        "\u0108": "C",
        "\u010A": "C",
        "\u010C": "C",
        "\u0107": "c",
        "\u0109": "c",
        "\u010B": "c",
        "\u010D": "c",
        "\u010E": "D",
        "\u0110": "D",
        "\u010F": "d",
        "\u0111": "d",
        "\u0112": "E",
        "\u0114": "E",
        "\u0116": "E",
        "\u0118": "E",
        "\u011A": "E",
        "\u0113": "e",
        "\u0115": "e",
        "\u0117": "e",
        "\u0119": "e",
        "\u011B": "e",
        "\u011C": "G",
        "\u011E": "G",
        "\u0120": "G",
        "\u0122": "G",
        "\u011D": "g",
        "\u011F": "g",
        "\u0121": "g",
        "\u0123": "g",
        "\u0124": "H",
        "\u0126": "H",
        "\u0125": "h",
        "\u0127": "h",
        "\u0128": "I",
        "\u012A": "I",
        "\u012C": "I",
        "\u012E": "I",
        "\u0130": "I",
        "\u0129": "i",
        "\u012B": "i",
        "\u012D": "i",
        "\u012F": "i",
        "\u0131": "i",
        "\u0134": "J",
        "\u0135": "j",
        "\u0136": "K",
        "\u0137": "k",
        "\u0138": "k",
        "\u0139": "L",
        "\u013B": "L",
        "\u013D": "L",
        "\u013F": "L",
        "\u0141": "L",
        "\u013A": "l",
        "\u013C": "l",
        "\u013E": "l",
        "\u0140": "l",
        "\u0142": "l",
        "\u0143": "N",
        "\u0145": "N",
        "\u0147": "N",
        "\u014A": "N",
        "\u0144": "n",
        "\u0146": "n",
        "\u0148": "n",
        "\u014B": "n",
        "\u014C": "O",
        "\u014E": "O",
        "\u0150": "O",
        "\u014D": "o",
        "\u014F": "o",
        "\u0151": "o",
        "\u0154": "R",
        "\u0156": "R",
        "\u0158": "R",
        "\u0155": "r",
        "\u0157": "r",
        "\u0159": "r",
        "\u015A": "S",
        "\u015C": "S",
        "\u015E": "S",
        "\u0160": "S",
        "\u015B": "s",
        "\u015D": "s",
        "\u015F": "s",
        "\u0161": "s",
        "\u0162": "T",
        "\u0164": "T",
        "\u0166": "T",
        "\u0163": "t",
        "\u0165": "t",
        "\u0167": "t",
        "\u0168": "U",
        "\u016A": "U",
        "\u016C": "U",
        "\u016E": "U",
        "\u0170": "U",
        "\u0172": "U",
        "\u0169": "u",
        "\u016B": "u",
        "\u016D": "u",
        "\u016F": "u",
        "\u0171": "u",
        "\u0173": "u",
        "\u0174": "W",
        "\u0175": "w",
        "\u0176": "Y",
        "\u0177": "y",
        "\u0178": "Y",
        "\u0179": "Z",
        "\u017B": "Z",
        "\u017D": "Z",
        "\u017A": "z",
        "\u017C": "z",
        "\u017E": "z",
        "\u0132": "IJ",
        "\u0133": "ij",
        "\u0152": "Oe",
        "\u0153": "oe",
        "\u0149": "'n",
        "\u017F": "s"
      };
      var htmlEscapes = {
        "&": "&amp;",
        "<": "&lt;",
        ">": "&gt;",
        '"': "&quot;",
        "'": "&#39;"
      };
      var htmlUnescapes = {
        "&amp;": "&",
        "&lt;": "<",
        "&gt;": ">",
        "&quot;": '"',
        "&#39;": "'"
      };
      var stringEscapes = {
        "\\": "\\",
        "'": "'",
        "\n": "n",
        "\r": "r",
        "\u2028": "u2028",
        "\u2029": "u2029"
      };
      var freeParseFloat = parseFloat, freeParseInt = parseInt;
      var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
      var freeSelf = typeof self == "object" && self && self.Object === Object && self;
      var root = freeGlobal || freeSelf || Function("return this")();
      var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
      var freeModule = freeExports && typeof module2 == "object" && module2 && !module2.nodeType && module2;
      var moduleExports = freeModule && freeModule.exports === freeExports;
      var freeProcess = moduleExports && freeGlobal.process;
      var nodeUtil = function() {
        try {
          var types = freeModule && freeModule.require && freeModule.require("util").types;
          if (types) {
            return types;
          }
          return freeProcess && freeProcess.binding && freeProcess.binding("util");
        } catch (e) {
        }
      }();
      var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer, nodeIsDate = nodeUtil && nodeUtil.isDate, nodeIsMap = nodeUtil && nodeUtil.isMap, nodeIsRegExp = nodeUtil && nodeUtil.isRegExp, nodeIsSet = nodeUtil && nodeUtil.isSet, nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
      function apply(func, thisArg, args) {
        switch (args.length) {
          case 0:
            return func.call(thisArg);
          case 1:
            return func.call(thisArg, args[0]);
          case 2:
            return func.call(thisArg, args[0], args[1]);
          case 3:
            return func.call(thisArg, args[0], args[1], args[2]);
        }
        return func.apply(thisArg, args);
      }
      function arrayAggregator(array, setter, iteratee, accumulator) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
          var value = array[index];
          setter(accumulator, value, iteratee(value), array);
        }
        return accumulator;
      }
      function arrayEach(array, iteratee) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
          if (iteratee(array[index], index, array) === false) {
            break;
          }
        }
        return array;
      }
      function arrayEachRight(array, iteratee) {
        var length = array == null ? 0 : array.length;
        while (length--) {
          if (iteratee(array[length], length, array) === false) {
            break;
          }
        }
        return array;
      }
      function arrayEvery(array, predicate) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
          if (!predicate(array[index], index, array)) {
            return false;
          }
        }
        return true;
      }
      function arrayFilter(array, predicate) {
        var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
        while (++index < length) {
          var value = array[index];
          if (predicate(value, index, array)) {
            result[resIndex++] = value;
          }
        }
        return result;
      }
      function arrayIncludes(array, value) {
        var length = array == null ? 0 : array.length;
        return !!length && baseIndexOf(array, value, 0) > -1;
      }
      function arrayIncludesWith(array, value, comparator) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
          if (comparator(value, array[index])) {
            return true;
          }
        }
        return false;
      }
      function arrayMap(array, iteratee) {
        var index = -1, length = array == null ? 0 : array.length, result = Array(length);
        while (++index < length) {
          result[index] = iteratee(array[index], index, array);
        }
        return result;
      }
      function arrayPush(array, values) {
        var index = -1, length = values.length, offset = array.length;
        while (++index < length) {
          array[offset + index] = values[index];
        }
        return array;
      }
      function arrayReduce(array, iteratee, accumulator, initAccum) {
        var index = -1, length = array == null ? 0 : array.length;
        if (initAccum && length) {
          accumulator = array[++index];
        }
        while (++index < length) {
          accumulator = iteratee(accumulator, array[index], index, array);
        }
        return accumulator;
      }
      function arrayReduceRight(array, iteratee, accumulator, initAccum) {
        var length = array == null ? 0 : array.length;
        if (initAccum && length) {
          accumulator = array[--length];
        }
        while (length--) {
          accumulator = iteratee(accumulator, array[length], length, array);
        }
        return accumulator;
      }
      function arraySome(array, predicate) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
          if (predicate(array[index], index, array)) {
            return true;
          }
        }
        return false;
      }
      var asciiSize = baseProperty("length");
      function asciiToArray(string) {
        return string.split("");
      }
      function asciiWords(string) {
        return string.match(reAsciiWord) || [];
      }
      function baseFindKey(collection, predicate, eachFunc) {
        var result;
        eachFunc(collection, function(value, key, collection2) {
          if (predicate(value, key, collection2)) {
            result = key;
            return false;
          }
        });
        return result;
      }
      function baseFindIndex(array, predicate, fromIndex, fromRight) {
        var length = array.length, index = fromIndex + (fromRight ? 1 : -1);
        while (fromRight ? index-- : ++index < length) {
          if (predicate(array[index], index, array)) {
            return index;
          }
        }
        return -1;
      }
      function baseIndexOf(array, value, fromIndex) {
        return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
      }
      function baseIndexOfWith(array, value, fromIndex, comparator) {
        var index = fromIndex - 1, length = array.length;
        while (++index < length) {
          if (comparator(array[index], value)) {
            return index;
          }
        }
        return -1;
      }
      function baseIsNaN(value) {
        return value !== value;
      }
      function baseMean(array, iteratee) {
        var length = array == null ? 0 : array.length;
        return length ? baseSum(array, iteratee) / length : NAN;
      }
      function baseProperty(key) {
        return function(object) {
          return object == null ? undefined2 : object[key];
        };
      }
      function basePropertyOf(object) {
        return function(key) {
          return object == null ? undefined2 : object[key];
        };
      }
      function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
        eachFunc(collection, function(value, index, collection2) {
          accumulator = initAccum ? (initAccum = false, value) : iteratee(accumulator, value, index, collection2);
        });
        return accumulator;
      }
      function baseSortBy(array, comparer) {
        var length = array.length;
        array.sort(comparer);
        while (length--) {
          array[length] = array[length].value;
        }
        return array;
      }
      function baseSum(array, iteratee) {
        var result, index = -1, length = array.length;
        while (++index < length) {
          var current = iteratee(array[index]);
          if (current !== undefined2) {
            result = result === undefined2 ? current : result + current;
          }
        }
        return result;
      }
      function baseTimes(n, iteratee) {
        var index = -1, result = Array(n);
        while (++index < n) {
          result[index] = iteratee(index);
        }
        return result;
      }
      function baseToPairs(object, props) {
        return arrayMap(props, function(key) {
          return [key, object[key]];
        });
      }
      function baseTrim(string) {
        return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, "") : string;
      }
      function baseUnary(func) {
        return function(value) {
          return func(value);
        };
      }
      function baseValues(object, props) {
        return arrayMap(props, function(key) {
          return object[key];
        });
      }
      function cacheHas(cache, key) {
        return cache.has(key);
      }
      function charsStartIndex(strSymbols, chrSymbols) {
        var index = -1, length = strSymbols.length;
        while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {
        }
        return index;
      }
      function charsEndIndex(strSymbols, chrSymbols) {
        var index = strSymbols.length;
        while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {
        }
        return index;
      }
      function countHolders(array, placeholder) {
        var length = array.length, result = 0;
        while (length--) {
          if (array[length] === placeholder) {
            ++result;
          }
        }
        return result;
      }
      var deburrLetter = basePropertyOf(deburredLetters);
      var escapeHtmlChar = basePropertyOf(htmlEscapes);
      function escapeStringChar(chr) {
        return "\\" + stringEscapes[chr];
      }
      function getValue(object, key) {
        return object == null ? undefined2 : object[key];
      }
      function hasUnicode(string) {
        return reHasUnicode.test(string);
      }
      function hasUnicodeWord(string) {
        return reHasUnicodeWord.test(string);
      }
      function iteratorToArray(iterator) {
        var data, result = [];
        while (!(data = iterator.next()).done) {
          result.push(data.value);
        }
        return result;
      }
      function mapToArray(map) {
        var index = -1, result = Array(map.size);
        map.forEach(function(value, key) {
          result[++index] = [key, value];
        });
        return result;
      }
      function overArg(func, transform) {
        return function(arg) {
          return func(transform(arg));
        };
      }
      function replaceHolders(array, placeholder) {
        var index = -1, length = array.length, resIndex = 0, result = [];
        while (++index < length) {
          var value = array[index];
          if (value === placeholder || value === PLACEHOLDER) {
            array[index] = PLACEHOLDER;
            result[resIndex++] = index;
          }
        }
        return result;
      }
      function setToArray(set2) {
        var index = -1, result = Array(set2.size);
        set2.forEach(function(value) {
          result[++index] = value;
        });
        return result;
      }
      function setToPairs(set2) {
        var index = -1, result = Array(set2.size);
        set2.forEach(function(value) {
          result[++index] = [value, value];
        });
        return result;
      }
      function strictIndexOf(array, value, fromIndex) {
        var index = fromIndex - 1, length = array.length;
        while (++index < length) {
          if (array[index] === value) {
            return index;
          }
        }
        return -1;
      }
      function strictLastIndexOf(array, value, fromIndex) {
        var index = fromIndex + 1;
        while (index--) {
          if (array[index] === value) {
            return index;
          }
        }
        return index;
      }
      function stringSize(string) {
        return hasUnicode(string) ? unicodeSize(string) : asciiSize(string);
      }
      function stringToArray(string) {
        return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
      }
      function trimmedEndIndex(string) {
        var index = string.length;
        while (index-- && reWhitespace.test(string.charAt(index))) {
        }
        return index;
      }
      var unescapeHtmlChar = basePropertyOf(htmlUnescapes);
      function unicodeSize(string) {
        var result = reUnicode.lastIndex = 0;
        while (reUnicode.test(string)) {
          ++result;
        }
        return result;
      }
      function unicodeToArray(string) {
        return string.match(reUnicode) || [];
      }
      function unicodeWords(string) {
        return string.match(reUnicodeWord) || [];
      }
      var runInContext = function runInContext2(context) {
        context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));
        var Array2 = context.Array, Date2 = context.Date, Error2 = context.Error, Function2 = context.Function, Math2 = context.Math, Object2 = context.Object, RegExp2 = context.RegExp, String2 = context.String, TypeError2 = context.TypeError;
        var arrayProto = Array2.prototype, funcProto = Function2.prototype, objectProto = Object2.prototype;
        var coreJsData = context["__core-js_shared__"];
        var funcToString = funcProto.toString;
        var hasOwnProperty = objectProto.hasOwnProperty;
        var idCounter = 0;
        var maskSrcKey = function() {
          var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
          return uid ? "Symbol(src)_1." + uid : "";
        }();
        var nativeObjectToString = objectProto.toString;
        var objectCtorString = funcToString.call(Object2);
        var oldDash = root._;
        var reIsNative = RegExp2("^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
        var Buffer2 = moduleExports ? context.Buffer : undefined2, Symbol2 = context.Symbol, Uint8Array2 = context.Uint8Array, allocUnsafe = Buffer2 ? Buffer2.allocUnsafe : undefined2, getPrototype = overArg(Object2.getPrototypeOf, Object2), objectCreate = Object2.create, propertyIsEnumerable = objectProto.propertyIsEnumerable, splice = arrayProto.splice, spreadableSymbol = Symbol2 ? Symbol2.isConcatSpreadable : undefined2, symIterator = Symbol2 ? Symbol2.iterator : undefined2, symToStringTag = Symbol2 ? Symbol2.toStringTag : undefined2;
        var defineProperty = function() {
          try {
            var func = getNative(Object2, "defineProperty");
            func({}, "", {});
            return func;
          } catch (e) {
          }
        }();
        var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout, ctxNow = Date2 && Date2.now !== root.Date.now && Date2.now, ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;
        var nativeCeil = Math2.ceil, nativeFloor = Math2.floor, nativeGetSymbols = Object2.getOwnPropertySymbols, nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : undefined2, nativeIsFinite = context.isFinite, nativeJoin = arrayProto.join, nativeKeys = overArg(Object2.keys, Object2), nativeMax = Math2.max, nativeMin = Math2.min, nativeNow = Date2.now, nativeParseInt = context.parseInt, nativeRandom = Math2.random, nativeReverse = arrayProto.reverse;
        var DataView = getNative(context, "DataView"), Map2 = getNative(context, "Map"), Promise2 = getNative(context, "Promise"), Set2 = getNative(context, "Set"), WeakMap2 = getNative(context, "WeakMap"), nativeCreate = getNative(Object2, "create");
        var metaMap = WeakMap2 && new WeakMap2();
        var realNames = {};
        var dataViewCtorString = toSource(DataView), mapCtorString = toSource(Map2), promiseCtorString = toSource(Promise2), setCtorString = toSource(Set2), weakMapCtorString = toSource(WeakMap2);
        var symbolProto = Symbol2 ? Symbol2.prototype : undefined2, symbolValueOf = symbolProto ? symbolProto.valueOf : undefined2, symbolToString = symbolProto ? symbolProto.toString : undefined2;
        function lodash(value) {
          if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
            if (value instanceof LodashWrapper) {
              return value;
            }
            if (hasOwnProperty.call(value, "__wrapped__")) {
              return wrapperClone(value);
            }
          }
          return new LodashWrapper(value);
        }
        var baseCreate = function() {
          function object() {
          }
          return function(proto) {
            if (!isObject(proto)) {
              return {};
            }
            if (objectCreate) {
              return objectCreate(proto);
            }
            object.prototype = proto;
            var result2 = new object();
            object.prototype = undefined2;
            return result2;
          };
        }();
        function baseLodash() {
        }
        function LodashWrapper(value, chainAll) {
          this.__wrapped__ = value;
          this.__actions__ = [];
          this.__chain__ = !!chainAll;
          this.__index__ = 0;
          this.__values__ = undefined2;
        }
        lodash.templateSettings = {
          "escape": reEscape,
          "evaluate": reEvaluate,
          "interpolate": reInterpolate,
          "variable": "",
          "imports": {
            "_": lodash
          }
        };
        lodash.prototype = baseLodash.prototype;
        lodash.prototype.constructor = lodash;
        LodashWrapper.prototype = baseCreate(baseLodash.prototype);
        LodashWrapper.prototype.constructor = LodashWrapper;
        function LazyWrapper(value) {
          this.__wrapped__ = value;
          this.__actions__ = [];
          this.__dir__ = 1;
          this.__filtered__ = false;
          this.__iteratees__ = [];
          this.__takeCount__ = MAX_ARRAY_LENGTH;
          this.__views__ = [];
        }
        function lazyClone() {
          var result2 = new LazyWrapper(this.__wrapped__);
          result2.__actions__ = copyArray(this.__actions__);
          result2.__dir__ = this.__dir__;
          result2.__filtered__ = this.__filtered__;
          result2.__iteratees__ = copyArray(this.__iteratees__);
          result2.__takeCount__ = this.__takeCount__;
          result2.__views__ = copyArray(this.__views__);
          return result2;
        }
        function lazyReverse() {
          if (this.__filtered__) {
            var result2 = new LazyWrapper(this);
            result2.__dir__ = -1;
            result2.__filtered__ = true;
          } else {
            result2 = this.clone();
            result2.__dir__ *= -1;
          }
          return result2;
        }
        function lazyValue() {
          var array = this.__wrapped__.value(), dir = this.__dir__, isArr = isArray(array), isRight = dir < 0, arrLength = isArr ? array.length : 0, view = getView(0, arrLength, this.__views__), start = view.start, end = view.end, length = end - start, index = isRight ? end : start - 1, iteratees = this.__iteratees__, iterLength = iteratees.length, resIndex = 0, takeCount = nativeMin(length, this.__takeCount__);
          if (!isArr || !isRight && arrLength == length && takeCount == length) {
            return baseWrapperValue(array, this.__actions__);
          }
          var result2 = [];
          outer:
            while (length-- && resIndex < takeCount) {
              index += dir;
              var iterIndex = -1, value = array[index];
              while (++iterIndex < iterLength) {
                var data = iteratees[iterIndex], iteratee2 = data.iteratee, type = data.type, computed = iteratee2(value);
                if (type == LAZY_MAP_FLAG) {
                  value = computed;
                } else if (!computed) {
                  if (type == LAZY_FILTER_FLAG) {
                    continue outer;
                  } else {
                    break outer;
                  }
                }
              }
              result2[resIndex++] = value;
            }
          return result2;
        }
        LazyWrapper.prototype = baseCreate(baseLodash.prototype);
        LazyWrapper.prototype.constructor = LazyWrapper;
        function Hash(entries) {
          var index = -1, length = entries == null ? 0 : entries.length;
          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }
        function hashClear() {
          this.__data__ = nativeCreate ? nativeCreate(null) : {};
          this.size = 0;
        }
        function hashDelete(key) {
          var result2 = this.has(key) && delete this.__data__[key];
          this.size -= result2 ? 1 : 0;
          return result2;
        }
        function hashGet(key) {
          var data = this.__data__;
          if (nativeCreate) {
            var result2 = data[key];
            return result2 === HASH_UNDEFINED ? undefined2 : result2;
          }
          return hasOwnProperty.call(data, key) ? data[key] : undefined2;
        }
        function hashHas(key) {
          var data = this.__data__;
          return nativeCreate ? data[key] !== undefined2 : hasOwnProperty.call(data, key);
        }
        function hashSet(key, value) {
          var data = this.__data__;
          this.size += this.has(key) ? 0 : 1;
          data[key] = nativeCreate && value === undefined2 ? HASH_UNDEFINED : value;
          return this;
        }
        Hash.prototype.clear = hashClear;
        Hash.prototype["delete"] = hashDelete;
        Hash.prototype.get = hashGet;
        Hash.prototype.has = hashHas;
        Hash.prototype.set = hashSet;
        function ListCache(entries) {
          var index = -1, length = entries == null ? 0 : entries.length;
          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }
        function listCacheClear() {
          this.__data__ = [];
          this.size = 0;
        }
        function listCacheDelete(key) {
          var data = this.__data__, index = assocIndexOf(data, key);
          if (index < 0) {
            return false;
          }
          var lastIndex = data.length - 1;
          if (index == lastIndex) {
            data.pop();
          } else {
            splice.call(data, index, 1);
          }
          --this.size;
          return true;
        }
        function listCacheGet(key) {
          var data = this.__data__, index = assocIndexOf(data, key);
          return index < 0 ? undefined2 : data[index][1];
        }
        function listCacheHas(key) {
          return assocIndexOf(this.__data__, key) > -1;
        }
        function listCacheSet(key, value) {
          var data = this.__data__, index = assocIndexOf(data, key);
          if (index < 0) {
            ++this.size;
            data.push([key, value]);
          } else {
            data[index][1] = value;
          }
          return this;
        }
        ListCache.prototype.clear = listCacheClear;
        ListCache.prototype["delete"] = listCacheDelete;
        ListCache.prototype.get = listCacheGet;
        ListCache.prototype.has = listCacheHas;
        ListCache.prototype.set = listCacheSet;
        function MapCache(entries) {
          var index = -1, length = entries == null ? 0 : entries.length;
          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }
        function mapCacheClear() {
          this.size = 0;
          this.__data__ = {
            "hash": new Hash(),
            "map": new (Map2 || ListCache)(),
            "string": new Hash()
          };
        }
        function mapCacheDelete(key) {
          var result2 = getMapData(this, key)["delete"](key);
          this.size -= result2 ? 1 : 0;
          return result2;
        }
        function mapCacheGet(key) {
          return getMapData(this, key).get(key);
        }
        function mapCacheHas(key) {
          return getMapData(this, key).has(key);
        }
        function mapCacheSet(key, value) {
          var data = getMapData(this, key), size2 = data.size;
          data.set(key, value);
          this.size += data.size == size2 ? 0 : 1;
          return this;
        }
        MapCache.prototype.clear = mapCacheClear;
        MapCache.prototype["delete"] = mapCacheDelete;
        MapCache.prototype.get = mapCacheGet;
        MapCache.prototype.has = mapCacheHas;
        MapCache.prototype.set = mapCacheSet;
        function SetCache(values2) {
          var index = -1, length = values2 == null ? 0 : values2.length;
          this.__data__ = new MapCache();
          while (++index < length) {
            this.add(values2[index]);
          }
        }
        function setCacheAdd(value) {
          this.__data__.set(value, HASH_UNDEFINED);
          return this;
        }
        function setCacheHas(value) {
          return this.__data__.has(value);
        }
        SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
        SetCache.prototype.has = setCacheHas;
        function Stack(entries) {
          var data = this.__data__ = new ListCache(entries);
          this.size = data.size;
        }
        function stackClear() {
          this.__data__ = new ListCache();
          this.size = 0;
        }
        function stackDelete(key) {
          var data = this.__data__, result2 = data["delete"](key);
          this.size = data.size;
          return result2;
        }
        function stackGet(key) {
          return this.__data__.get(key);
        }
        function stackHas(key) {
          return this.__data__.has(key);
        }
        function stackSet(key, value) {
          var data = this.__data__;
          if (data instanceof ListCache) {
            var pairs = data.__data__;
            if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
              pairs.push([key, value]);
              this.size = ++data.size;
              return this;
            }
            data = this.__data__ = new MapCache(pairs);
          }
          data.set(key, value);
          this.size = data.size;
          return this;
        }
        Stack.prototype.clear = stackClear;
        Stack.prototype["delete"] = stackDelete;
        Stack.prototype.get = stackGet;
        Stack.prototype.has = stackHas;
        Stack.prototype.set = stackSet;
        function arrayLikeKeys(value, inherited) {
          var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result2 = skipIndexes ? baseTimes(value.length, String2) : [], length = result2.length;
          for (var key in value) {
            if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (key == "length" || isBuff && (key == "offset" || key == "parent") || isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || isIndex(key, length)))) {
              result2.push(key);
            }
          }
          return result2;
        }
        function arraySample(array) {
          var length = array.length;
          return length ? array[baseRandom(0, length - 1)] : undefined2;
        }
        function arraySampleSize(array, n) {
          return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
        }
        function arrayShuffle(array) {
          return shuffleSelf(copyArray(array));
        }
        function assignMergeValue(object, key, value) {
          if (value !== undefined2 && !eq(object[key], value) || value === undefined2 && !(key in object)) {
            baseAssignValue(object, key, value);
          }
        }
        function assignValue(object, key, value) {
          var objValue = object[key];
          if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined2 && !(key in object)) {
            baseAssignValue(object, key, value);
          }
        }
        function assocIndexOf(array, key) {
          var length = array.length;
          while (length--) {
            if (eq(array[length][0], key)) {
              return length;
            }
          }
          return -1;
        }
        function baseAggregator(collection, setter, iteratee2, accumulator) {
          baseEach(collection, function(value, key, collection2) {
            setter(accumulator, value, iteratee2(value), collection2);
          });
          return accumulator;
        }
        function baseAssign(object, source) {
          return object && copyObject(source, keys(source), object);
        }
        function baseAssignIn(object, source) {
          return object && copyObject(source, keysIn(source), object);
        }
        function baseAssignValue(object, key, value) {
          if (key == "__proto__" && defineProperty) {
            defineProperty(object, key, {
              "configurable": true,
              "enumerable": true,
              "value": value,
              "writable": true
            });
          } else {
            object[key] = value;
          }
        }
        function baseAt(object, paths) {
          var index = -1, length = paths.length, result2 = Array2(length), skip = object == null;
          while (++index < length) {
            result2[index] = skip ? undefined2 : get2(object, paths[index]);
          }
          return result2;
        }
        function baseClamp(number, lower, upper) {
          if (number === number) {
            if (upper !== undefined2) {
              number = number <= upper ? number : upper;
            }
            if (lower !== undefined2) {
              number = number >= lower ? number : lower;
            }
          }
          return number;
        }
        function baseClone(value, bitmask, customizer, key, object, stack) {
          var result2, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG;
          if (customizer) {
            result2 = object ? customizer(value, key, object, stack) : customizer(value);
          }
          if (result2 !== undefined2) {
            return result2;
          }
          if (!isObject(value)) {
            return value;
          }
          var isArr = isArray(value);
          if (isArr) {
            result2 = initCloneArray(value);
            if (!isDeep) {
              return copyArray(value, result2);
            }
          } else {
            var tag = getTag(value), isFunc = tag == funcTag || tag == genTag;
            if (isBuffer(value)) {
              return cloneBuffer(value, isDeep);
            }
            if (tag == objectTag || tag == argsTag || isFunc && !object) {
              result2 = isFlat || isFunc ? {} : initCloneObject(value);
              if (!isDeep) {
                return isFlat ? copySymbolsIn(value, baseAssignIn(result2, value)) : copySymbols(value, baseAssign(result2, value));
              }
            } else {
              if (!cloneableTags[tag]) {
                return object ? value : {};
              }
              result2 = initCloneByTag(value, tag, isDeep);
            }
          }
          stack || (stack = new Stack());
          var stacked = stack.get(value);
          if (stacked) {
            return stacked;
          }
          stack.set(value, result2);
          if (isSet(value)) {
            value.forEach(function(subValue) {
              result2.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
            });
          } else if (isMap(value)) {
            value.forEach(function(subValue, key2) {
              result2.set(key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
            });
          }
          var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;
          var props = isArr ? undefined2 : keysFunc(value);
          arrayEach(props || value, function(subValue, key2) {
            if (props) {
              key2 = subValue;
              subValue = value[key2];
            }
            assignValue(result2, key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
          });
          return result2;
        }
        function baseConforms(source) {
          var props = keys(source);
          return function(object) {
            return baseConformsTo(object, source, props);
          };
        }
        function baseConformsTo(object, source, props) {
          var length = props.length;
          if (object == null) {
            return !length;
          }
          object = Object2(object);
          while (length--) {
            var key = props[length], predicate = source[key], value = object[key];
            if (value === undefined2 && !(key in object) || !predicate(value)) {
              return false;
            }
          }
          return true;
        }
        function baseDelay(func, wait, args) {
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          return setTimeout2(function() {
            func.apply(undefined2, args);
          }, wait);
        }
        function baseDifference(array, values2, iteratee2, comparator) {
          var index = -1, includes2 = arrayIncludes, isCommon = true, length = array.length, result2 = [], valuesLength = values2.length;
          if (!length) {
            return result2;
          }
          if (iteratee2) {
            values2 = arrayMap(values2, baseUnary(iteratee2));
          }
          if (comparator) {
            includes2 = arrayIncludesWith;
            isCommon = false;
          } else if (values2.length >= LARGE_ARRAY_SIZE) {
            includes2 = cacheHas;
            isCommon = false;
            values2 = new SetCache(values2);
          }
          outer:
            while (++index < length) {
              var value = array[index], computed = iteratee2 == null ? value : iteratee2(value);
              value = comparator || value !== 0 ? value : 0;
              if (isCommon && computed === computed) {
                var valuesIndex = valuesLength;
                while (valuesIndex--) {
                  if (values2[valuesIndex] === computed) {
                    continue outer;
                  }
                }
                result2.push(value);
              } else if (!includes2(values2, computed, comparator)) {
                result2.push(value);
              }
            }
          return result2;
        }
        var baseEach = createBaseEach(baseForOwn);
        var baseEachRight = createBaseEach(baseForOwnRight, true);
        function baseEvery(collection, predicate) {
          var result2 = true;
          baseEach(collection, function(value, index, collection2) {
            result2 = !!predicate(value, index, collection2);
            return result2;
          });
          return result2;
        }
        function baseExtremum(array, iteratee2, comparator) {
          var index = -1, length = array.length;
          while (++index < length) {
            var value = array[index], current = iteratee2(value);
            if (current != null && (computed === undefined2 ? current === current && !isSymbol(current) : comparator(current, computed))) {
              var computed = current, result2 = value;
            }
          }
          return result2;
        }
        function baseFill(array, value, start, end) {
          var length = array.length;
          start = toInteger(start);
          if (start < 0) {
            start = -start > length ? 0 : length + start;
          }
          end = end === undefined2 || end > length ? length : toInteger(end);
          if (end < 0) {
            end += length;
          }
          end = start > end ? 0 : toLength(end);
          while (start < end) {
            array[start++] = value;
          }
          return array;
        }
        function baseFilter(collection, predicate) {
          var result2 = [];
          baseEach(collection, function(value, index, collection2) {
            if (predicate(value, index, collection2)) {
              result2.push(value);
            }
          });
          return result2;
        }
        function baseFlatten(array, depth, predicate, isStrict, result2) {
          var index = -1, length = array.length;
          predicate || (predicate = isFlattenable);
          result2 || (result2 = []);
          while (++index < length) {
            var value = array[index];
            if (depth > 0 && predicate(value)) {
              if (depth > 1) {
                baseFlatten(value, depth - 1, predicate, isStrict, result2);
              } else {
                arrayPush(result2, value);
              }
            } else if (!isStrict) {
              result2[result2.length] = value;
            }
          }
          return result2;
        }
        var baseFor = createBaseFor();
        var baseForRight = createBaseFor(true);
        function baseForOwn(object, iteratee2) {
          return object && baseFor(object, iteratee2, keys);
        }
        function baseForOwnRight(object, iteratee2) {
          return object && baseForRight(object, iteratee2, keys);
        }
        function baseFunctions(object, props) {
          return arrayFilter(props, function(key) {
            return isFunction2(object[key]);
          });
        }
        function baseGet(object, path) {
          path = castPath(path, object);
          var index = 0, length = path.length;
          while (object != null && index < length) {
            object = object[toKey(path[index++])];
          }
          return index && index == length ? object : undefined2;
        }
        function baseGetAllKeys(object, keysFunc, symbolsFunc) {
          var result2 = keysFunc(object);
          return isArray(object) ? result2 : arrayPush(result2, symbolsFunc(object));
        }
        function baseGetTag(value) {
          if (value == null) {
            return value === undefined2 ? undefinedTag : nullTag;
          }
          return symToStringTag && symToStringTag in Object2(value) ? getRawTag(value) : objectToString(value);
        }
        function baseGt(value, other) {
          return value > other;
        }
        function baseHas(object, key) {
          return object != null && hasOwnProperty.call(object, key);
        }
        function baseHasIn(object, key) {
          return object != null && key in Object2(object);
        }
        function baseInRange(number, start, end) {
          return number >= nativeMin(start, end) && number < nativeMax(start, end);
        }
        function baseIntersection(arrays, iteratee2, comparator) {
          var includes2 = comparator ? arrayIncludesWith : arrayIncludes, length = arrays[0].length, othLength = arrays.length, othIndex = othLength, caches = Array2(othLength), maxLength = Infinity, result2 = [];
          while (othIndex--) {
            var array = arrays[othIndex];
            if (othIndex && iteratee2) {
              array = arrayMap(array, baseUnary(iteratee2));
            }
            maxLength = nativeMin(array.length, maxLength);
            caches[othIndex] = !comparator && (iteratee2 || length >= 120 && array.length >= 120) ? new SetCache(othIndex && array) : undefined2;
          }
          array = arrays[0];
          var index = -1, seen = caches[0];
          outer:
            while (++index < length && result2.length < maxLength) {
              var value = array[index], computed = iteratee2 ? iteratee2(value) : value;
              value = comparator || value !== 0 ? value : 0;
              if (!(seen ? cacheHas(seen, computed) : includes2(result2, computed, comparator))) {
                othIndex = othLength;
                while (--othIndex) {
                  var cache = caches[othIndex];
                  if (!(cache ? cacheHas(cache, computed) : includes2(arrays[othIndex], computed, comparator))) {
                    continue outer;
                  }
                }
                if (seen) {
                  seen.push(computed);
                }
                result2.push(value);
              }
            }
          return result2;
        }
        function baseInverter(object, setter, iteratee2, accumulator) {
          baseForOwn(object, function(value, key, object2) {
            setter(accumulator, iteratee2(value), key, object2);
          });
          return accumulator;
        }
        function baseInvoke(object, path, args) {
          path = castPath(path, object);
          object = parent(object, path);
          var func = object == null ? object : object[toKey(last(path))];
          return func == null ? undefined2 : apply(func, object, args);
        }
        function baseIsArguments(value) {
          return isObjectLike(value) && baseGetTag(value) == argsTag;
        }
        function baseIsArrayBuffer(value) {
          return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
        }
        function baseIsDate(value) {
          return isObjectLike(value) && baseGetTag(value) == dateTag;
        }
        function baseIsEqual(value, other, bitmask, customizer, stack) {
          if (value === other) {
            return true;
          }
          if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
            return value !== value && other !== other;
          }
          return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
        }
        function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
          var objIsArr = isArray(object), othIsArr = isArray(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);
          objTag = objTag == argsTag ? objectTag : objTag;
          othTag = othTag == argsTag ? objectTag : othTag;
          var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
          if (isSameTag && isBuffer(object)) {
            if (!isBuffer(other)) {
              return false;
            }
            objIsArr = true;
            objIsObj = false;
          }
          if (isSameTag && !objIsObj) {
            stack || (stack = new Stack());
            return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
          }
          if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
            var objIsWrapped = objIsObj && hasOwnProperty.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty.call(other, "__wrapped__");
            if (objIsWrapped || othIsWrapped) {
              var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
              stack || (stack = new Stack());
              return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
            }
          }
          if (!isSameTag) {
            return false;
          }
          stack || (stack = new Stack());
          return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
        }
        function baseIsMap(value) {
          return isObjectLike(value) && getTag(value) == mapTag;
        }
        function baseIsMatch(object, source, matchData, customizer) {
          var index = matchData.length, length = index, noCustomizer = !customizer;
          if (object == null) {
            return !length;
          }
          object = Object2(object);
          while (index--) {
            var data = matchData[index];
            if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
              return false;
            }
          }
          while (++index < length) {
            data = matchData[index];
            var key = data[0], objValue = object[key], srcValue = data[1];
            if (noCustomizer && data[2]) {
              if (objValue === undefined2 && !(key in object)) {
                return false;
              }
            } else {
              var stack = new Stack();
              if (customizer) {
                var result2 = customizer(objValue, srcValue, key, object, source, stack);
              }
              if (!(result2 === undefined2 ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result2)) {
                return false;
              }
            }
          }
          return true;
        }
        function baseIsNative(value) {
          if (!isObject(value) || isMasked(value)) {
            return false;
          }
          var pattern = isFunction2(value) ? reIsNative : reIsHostCtor;
          return pattern.test(toSource(value));
        }
        function baseIsRegExp(value) {
          return isObjectLike(value) && baseGetTag(value) == regexpTag;
        }
        function baseIsSet(value) {
          return isObjectLike(value) && getTag(value) == setTag;
        }
        function baseIsTypedArray(value) {
          return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
        }
        function baseIteratee(value) {
          if (typeof value == "function") {
            return value;
          }
          if (value == null) {
            return identity;
          }
          if (typeof value == "object") {
            return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
          }
          return property(value);
        }
        function baseKeys(object) {
          if (!isPrototype(object)) {
            return nativeKeys(object);
          }
          var result2 = [];
          for (var key in Object2(object)) {
            if (hasOwnProperty.call(object, key) && key != "constructor") {
              result2.push(key);
            }
          }
          return result2;
        }
        function baseKeysIn(object) {
          if (!isObject(object)) {
            return nativeKeysIn(object);
          }
          var isProto = isPrototype(object), result2 = [];
          for (var key in object) {
            if (!(key == "constructor" && (isProto || !hasOwnProperty.call(object, key)))) {
              result2.push(key);
            }
          }
          return result2;
        }
        function baseLt(value, other) {
          return value < other;
        }
        function baseMap(collection, iteratee2) {
          var index = -1, result2 = isArrayLike(collection) ? Array2(collection.length) : [];
          baseEach(collection, function(value, key, collection2) {
            result2[++index] = iteratee2(value, key, collection2);
          });
          return result2;
        }
        function baseMatches(source) {
          var matchData = getMatchData(source);
          if (matchData.length == 1 && matchData[0][2]) {
            return matchesStrictComparable(matchData[0][0], matchData[0][1]);
          }
          return function(object) {
            return object === source || baseIsMatch(object, source, matchData);
          };
        }
        function baseMatchesProperty(path, srcValue) {
          if (isKey(path) && isStrictComparable(srcValue)) {
            return matchesStrictComparable(toKey(path), srcValue);
          }
          return function(object) {
            var objValue = get2(object, path);
            return objValue === undefined2 && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
          };
        }
        function baseMerge(object, source, srcIndex, customizer, stack) {
          if (object === source) {
            return;
          }
          baseFor(source, function(srcValue, key) {
            stack || (stack = new Stack());
            if (isObject(srcValue)) {
              baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
            } else {
              var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + "", object, source, stack) : undefined2;
              if (newValue === undefined2) {
                newValue = srcValue;
              }
              assignMergeValue(object, key, newValue);
            }
          }, keysIn);
        }
        function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
          var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
          if (stacked) {
            assignMergeValue(object, key, stacked);
            return;
          }
          var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : undefined2;
          var isCommon = newValue === undefined2;
          if (isCommon) {
            var isArr = isArray(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
            newValue = srcValue;
            if (isArr || isBuff || isTyped) {
              if (isArray(objValue)) {
                newValue = objValue;
              } else if (isArrayLikeObject(objValue)) {
                newValue = copyArray(objValue);
              } else if (isBuff) {
                isCommon = false;
                newValue = cloneBuffer(srcValue, true);
              } else if (isTyped) {
                isCommon = false;
                newValue = cloneTypedArray(srcValue, true);
              } else {
                newValue = [];
              }
            } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
              newValue = objValue;
              if (isArguments(objValue)) {
                newValue = toPlainObject(objValue);
              } else if (!isObject(objValue) || isFunction2(objValue)) {
                newValue = initCloneObject(srcValue);
              }
            } else {
              isCommon = false;
            }
          }
          if (isCommon) {
            stack.set(srcValue, newValue);
            mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
            stack["delete"](srcValue);
          }
          assignMergeValue(object, key, newValue);
        }
        function baseNth(array, n) {
          var length = array.length;
          if (!length) {
            return;
          }
          n += n < 0 ? length : 0;
          return isIndex(n, length) ? array[n] : undefined2;
        }
        function baseOrderBy(collection, iteratees, orders) {
          if (iteratees.length) {
            iteratees = arrayMap(iteratees, function(iteratee2) {
              if (isArray(iteratee2)) {
                return function(value) {
                  return baseGet(value, iteratee2.length === 1 ? iteratee2[0] : iteratee2);
                };
              }
              return iteratee2;
            });
          } else {
            iteratees = [identity];
          }
          var index = -1;
          iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
          var result2 = baseMap(collection, function(value, key, collection2) {
            var criteria = arrayMap(iteratees, function(iteratee2) {
              return iteratee2(value);
            });
            return { "criteria": criteria, "index": ++index, "value": value };
          });
          return baseSortBy(result2, function(object, other) {
            return compareMultiple(object, other, orders);
          });
        }
        function basePick(object, paths) {
          return basePickBy(object, paths, function(value, path) {
            return hasIn(object, path);
          });
        }
        function basePickBy(object, paths, predicate) {
          var index = -1, length = paths.length, result2 = {};
          while (++index < length) {
            var path = paths[index], value = baseGet(object, path);
            if (predicate(value, path)) {
              baseSet(result2, castPath(path, object), value);
            }
          }
          return result2;
        }
        function basePropertyDeep(path) {
          return function(object) {
            return baseGet(object, path);
          };
        }
        function basePullAll(array, values2, iteratee2, comparator) {
          var indexOf2 = comparator ? baseIndexOfWith : baseIndexOf, index = -1, length = values2.length, seen = array;
          if (array === values2) {
            values2 = copyArray(values2);
          }
          if (iteratee2) {
            seen = arrayMap(array, baseUnary(iteratee2));
          }
          while (++index < length) {
            var fromIndex = 0, value = values2[index], computed = iteratee2 ? iteratee2(value) : value;
            while ((fromIndex = indexOf2(seen, computed, fromIndex, comparator)) > -1) {
              if (seen !== array) {
                splice.call(seen, fromIndex, 1);
              }
              splice.call(array, fromIndex, 1);
            }
          }
          return array;
        }
        function basePullAt(array, indexes) {
          var length = array ? indexes.length : 0, lastIndex = length - 1;
          while (length--) {
            var index = indexes[length];
            if (length == lastIndex || index !== previous) {
              var previous = index;
              if (isIndex(index)) {
                splice.call(array, index, 1);
              } else {
                baseUnset(array, index);
              }
            }
          }
          return array;
        }
        function baseRandom(lower, upper) {
          return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
        }
        function baseRange(start, end, step, fromRight) {
          var index = -1, length = nativeMax(nativeCeil((end - start) / (step || 1)), 0), result2 = Array2(length);
          while (length--) {
            result2[fromRight ? length : ++index] = start;
            start += step;
          }
          return result2;
        }
        function baseRepeat(string, n) {
          var result2 = "";
          if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
            return result2;
          }
          do {
            if (n % 2) {
              result2 += string;
            }
            n = nativeFloor(n / 2);
            if (n) {
              string += string;
            }
          } while (n);
          return result2;
        }
        function baseRest(func, start) {
          return setToString(overRest(func, start, identity), func + "");
        }
        function baseSample(collection) {
          return arraySample(values(collection));
        }
        function baseSampleSize(collection, n) {
          var array = values(collection);
          return shuffleSelf(array, baseClamp(n, 0, array.length));
        }
        function baseSet(object, path, value, customizer) {
          if (!isObject(object)) {
            return object;
          }
          path = castPath(path, object);
          var index = -1, length = path.length, lastIndex = length - 1, nested = object;
          while (nested != null && ++index < length) {
            var key = toKey(path[index]), newValue = value;
            if (key === "__proto__" || key === "constructor" || key === "prototype") {
              return object;
            }
            if (index != lastIndex) {
              var objValue = nested[key];
              newValue = customizer ? customizer(objValue, key, nested) : undefined2;
              if (newValue === undefined2) {
                newValue = isObject(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {};
              }
            }
            assignValue(nested, key, newValue);
            nested = nested[key];
          }
          return object;
        }
        var baseSetData = !metaMap ? identity : function(func, data) {
          metaMap.set(func, data);
          return func;
        };
        var baseSetToString = !defineProperty ? identity : function(func, string) {
          return defineProperty(func, "toString", {
            "configurable": true,
            "enumerable": false,
            "value": constant(string),
            "writable": true
          });
        };
        function baseShuffle(collection) {
          return shuffleSelf(values(collection));
        }
        function baseSlice(array, start, end) {
          var index = -1, length = array.length;
          if (start < 0) {
            start = -start > length ? 0 : length + start;
          }
          end = end > length ? length : end;
          if (end < 0) {
            end += length;
          }
          length = start > end ? 0 : end - start >>> 0;
          start >>>= 0;
          var result2 = Array2(length);
          while (++index < length) {
            result2[index] = array[index + start];
          }
          return result2;
        }
        function baseSome(collection, predicate) {
          var result2;
          baseEach(collection, function(value, index, collection2) {
            result2 = predicate(value, index, collection2);
            return !result2;
          });
          return !!result2;
        }
        function baseSortedIndex(array, value, retHighest) {
          var low = 0, high = array == null ? low : array.length;
          if (typeof value == "number" && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
            while (low < high) {
              var mid = low + high >>> 1, computed = array[mid];
              if (computed !== null && !isSymbol(computed) && (retHighest ? computed <= value : computed < value)) {
                low = mid + 1;
              } else {
                high = mid;
              }
            }
            return high;
          }
          return baseSortedIndexBy(array, value, identity, retHighest);
        }
        function baseSortedIndexBy(array, value, iteratee2, retHighest) {
          var low = 0, high = array == null ? 0 : array.length;
          if (high === 0) {
            return 0;
          }
          value = iteratee2(value);
          var valIsNaN = value !== value, valIsNull = value === null, valIsSymbol = isSymbol(value), valIsUndefined = value === undefined2;
          while (low < high) {
            var mid = nativeFloor((low + high) / 2), computed = iteratee2(array[mid]), othIsDefined = computed !== undefined2, othIsNull = computed === null, othIsReflexive = computed === computed, othIsSymbol = isSymbol(computed);
            if (valIsNaN) {
              var setLow = retHighest || othIsReflexive;
            } else if (valIsUndefined) {
              setLow = othIsReflexive && (retHighest || othIsDefined);
            } else if (valIsNull) {
              setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
            } else if (valIsSymbol) {
              setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
            } else if (othIsNull || othIsSymbol) {
              setLow = false;
            } else {
              setLow = retHighest ? computed <= value : computed < value;
            }
            if (setLow) {
              low = mid + 1;
            } else {
              high = mid;
            }
          }
          return nativeMin(high, MAX_ARRAY_INDEX);
        }
        function baseSortedUniq(array, iteratee2) {
          var index = -1, length = array.length, resIndex = 0, result2 = [];
          while (++index < length) {
            var value = array[index], computed = iteratee2 ? iteratee2(value) : value;
            if (!index || !eq(computed, seen)) {
              var seen = computed;
              result2[resIndex++] = value === 0 ? 0 : value;
            }
          }
          return result2;
        }
        function baseToNumber(value) {
          if (typeof value == "number") {
            return value;
          }
          if (isSymbol(value)) {
            return NAN;
          }
          return +value;
        }
        function baseToString(value) {
          if (typeof value == "string") {
            return value;
          }
          if (isArray(value)) {
            return arrayMap(value, baseToString) + "";
          }
          if (isSymbol(value)) {
            return symbolToString ? symbolToString.call(value) : "";
          }
          var result2 = value + "";
          return result2 == "0" && 1 / value == -INFINITY ? "-0" : result2;
        }
        function baseUniq(array, iteratee2, comparator) {
          var index = -1, includes2 = arrayIncludes, length = array.length, isCommon = true, result2 = [], seen = result2;
          if (comparator) {
            isCommon = false;
            includes2 = arrayIncludesWith;
          } else if (length >= LARGE_ARRAY_SIZE) {
            var set3 = iteratee2 ? null : createSet(array);
            if (set3) {
              return setToArray(set3);
            }
            isCommon = false;
            includes2 = cacheHas;
            seen = new SetCache();
          } else {
            seen = iteratee2 ? [] : result2;
          }
          outer:
            while (++index < length) {
              var value = array[index], computed = iteratee2 ? iteratee2(value) : value;
              value = comparator || value !== 0 ? value : 0;
              if (isCommon && computed === computed) {
                var seenIndex = seen.length;
                while (seenIndex--) {
                  if (seen[seenIndex] === computed) {
                    continue outer;
                  }
                }
                if (iteratee2) {
                  seen.push(computed);
                }
                result2.push(value);
              } else if (!includes2(seen, computed, comparator)) {
                if (seen !== result2) {
                  seen.push(computed);
                }
                result2.push(value);
              }
            }
          return result2;
        }
        function baseUnset(object, path) {
          path = castPath(path, object);
          object = parent(object, path);
          return object == null || delete object[toKey(last(path))];
        }
        function baseUpdate(object, path, updater, customizer) {
          return baseSet(object, path, updater(baseGet(object, path)), customizer);
        }
        function baseWhile(array, predicate, isDrop, fromRight) {
          var length = array.length, index = fromRight ? length : -1;
          while ((fromRight ? index-- : ++index < length) && predicate(array[index], index, array)) {
          }
          return isDrop ? baseSlice(array, fromRight ? 0 : index, fromRight ? index + 1 : length) : baseSlice(array, fromRight ? index + 1 : 0, fromRight ? length : index);
        }
        function baseWrapperValue(value, actions) {
          var result2 = value;
          if (result2 instanceof LazyWrapper) {
            result2 = result2.value();
          }
          return arrayReduce(actions, function(result3, action) {
            return action.func.apply(action.thisArg, arrayPush([result3], action.args));
          }, result2);
        }
        function baseXor(arrays, iteratee2, comparator) {
          var length = arrays.length;
          if (length < 2) {
            return length ? baseUniq(arrays[0]) : [];
          }
          var index = -1, result2 = Array2(length);
          while (++index < length) {
            var array = arrays[index], othIndex = -1;
            while (++othIndex < length) {
              if (othIndex != index) {
                result2[index] = baseDifference(result2[index] || array, arrays[othIndex], iteratee2, comparator);
              }
            }
          }
          return baseUniq(baseFlatten(result2, 1), iteratee2, comparator);
        }
        function baseZipObject(props, values2, assignFunc) {
          var index = -1, length = props.length, valsLength = values2.length, result2 = {};
          while (++index < length) {
            var value = index < valsLength ? values2[index] : undefined2;
            assignFunc(result2, props[index], value);
          }
          return result2;
        }
        function castArrayLikeObject(value) {
          return isArrayLikeObject(value) ? value : [];
        }
        function castFunction(value) {
          return typeof value == "function" ? value : identity;
        }
        function castPath(value, object) {
          if (isArray(value)) {
            return value;
          }
          return isKey(value, object) ? [value] : stringToPath(toString(value));
        }
        var castRest = baseRest;
        function castSlice(array, start, end) {
          var length = array.length;
          end = end === undefined2 ? length : end;
          return !start && end >= length ? array : baseSlice(array, start, end);
        }
        var clearTimeout = ctxClearTimeout || function(id) {
          return root.clearTimeout(id);
        };
        function cloneBuffer(buffer, isDeep) {
          if (isDeep) {
            return buffer.slice();
          }
          var length = buffer.length, result2 = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
          buffer.copy(result2);
          return result2;
        }
        function cloneArrayBuffer(arrayBuffer) {
          var result2 = new arrayBuffer.constructor(arrayBuffer.byteLength);
          new Uint8Array2(result2).set(new Uint8Array2(arrayBuffer));
          return result2;
        }
        function cloneDataView(dataView, isDeep) {
          var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
          return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
        }
        function cloneRegExp(regexp) {
          var result2 = new regexp.constructor(regexp.source, reFlags.exec(regexp));
          result2.lastIndex = regexp.lastIndex;
          return result2;
        }
        function cloneSymbol(symbol) {
          return symbolValueOf ? Object2(symbolValueOf.call(symbol)) : {};
        }
        function cloneTypedArray(typedArray, isDeep) {
          var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
          return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
        }
        function compareAscending(value, other) {
          if (value !== other) {
            var valIsDefined = value !== undefined2, valIsNull = value === null, valIsReflexive = value === value, valIsSymbol = isSymbol(value);
            var othIsDefined = other !== undefined2, othIsNull = other === null, othIsReflexive = other === other, othIsSymbol = isSymbol(other);
            if (!othIsNull && !othIsSymbol && !valIsSymbol && value > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) {
              return 1;
            }
            if (!valIsNull && !valIsSymbol && !othIsSymbol && value < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) {
              return -1;
            }
          }
          return 0;
        }
        function compareMultiple(object, other, orders) {
          var index = -1, objCriteria = object.criteria, othCriteria = other.criteria, length = objCriteria.length, ordersLength = orders.length;
          while (++index < length) {
            var result2 = compareAscending(objCriteria[index], othCriteria[index]);
            if (result2) {
              if (index >= ordersLength) {
                return result2;
              }
              var order = orders[index];
              return result2 * (order == "desc" ? -1 : 1);
            }
          }
          return object.index - other.index;
        }
        function composeArgs(args, partials, holders, isCurried) {
          var argsIndex = -1, argsLength = args.length, holdersLength = holders.length, leftIndex = -1, leftLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result2 = Array2(leftLength + rangeLength), isUncurried = !isCurried;
          while (++leftIndex < leftLength) {
            result2[leftIndex] = partials[leftIndex];
          }
          while (++argsIndex < holdersLength) {
            if (isUncurried || argsIndex < argsLength) {
              result2[holders[argsIndex]] = args[argsIndex];
            }
          }
          while (rangeLength--) {
            result2[leftIndex++] = args[argsIndex++];
          }
          return result2;
        }
        function composeArgsRight(args, partials, holders, isCurried) {
          var argsIndex = -1, argsLength = args.length, holdersIndex = -1, holdersLength = holders.length, rightIndex = -1, rightLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result2 = Array2(rangeLength + rightLength), isUncurried = !isCurried;
          while (++argsIndex < rangeLength) {
            result2[argsIndex] = args[argsIndex];
          }
          var offset = argsIndex;
          while (++rightIndex < rightLength) {
            result2[offset + rightIndex] = partials[rightIndex];
          }
          while (++holdersIndex < holdersLength) {
            if (isUncurried || argsIndex < argsLength) {
              result2[offset + holders[holdersIndex]] = args[argsIndex++];
            }
          }
          return result2;
        }
        function copyArray(source, array) {
          var index = -1, length = source.length;
          array || (array = Array2(length));
          while (++index < length) {
            array[index] = source[index];
          }
          return array;
        }
        function copyObject(source, props, object, customizer) {
          var isNew = !object;
          object || (object = {});
          var index = -1, length = props.length;
          while (++index < length) {
            var key = props[index];
            var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined2;
            if (newValue === undefined2) {
              newValue = source[key];
            }
            if (isNew) {
              baseAssignValue(object, key, newValue);
            } else {
              assignValue(object, key, newValue);
            }
          }
          return object;
        }
        function copySymbols(source, object) {
          return copyObject(source, getSymbols(source), object);
        }
        function copySymbolsIn(source, object) {
          return copyObject(source, getSymbolsIn(source), object);
        }
        function createAggregator(setter, initializer) {
          return function(collection, iteratee2) {
            var func = isArray(collection) ? arrayAggregator : baseAggregator, accumulator = initializer ? initializer() : {};
            return func(collection, setter, getIteratee(iteratee2, 2), accumulator);
          };
        }
        function createAssigner(assigner) {
          return baseRest(function(object, sources) {
            var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : undefined2, guard = length > 2 ? sources[2] : undefined2;
            customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : undefined2;
            if (guard && isIterateeCall(sources[0], sources[1], guard)) {
              customizer = length < 3 ? undefined2 : customizer;
              length = 1;
            }
            object = Object2(object);
            while (++index < length) {
              var source = sources[index];
              if (source) {
                assigner(object, source, index, customizer);
              }
            }
            return object;
          });
        }
        function createBaseEach(eachFunc, fromRight) {
          return function(collection, iteratee2) {
            if (collection == null) {
              return collection;
            }
            if (!isArrayLike(collection)) {
              return eachFunc(collection, iteratee2);
            }
            var length = collection.length, index = fromRight ? length : -1, iterable = Object2(collection);
            while (fromRight ? index-- : ++index < length) {
              if (iteratee2(iterable[index], index, iterable) === false) {
                break;
              }
            }
            return collection;
          };
        }
        function createBaseFor(fromRight) {
          return function(object, iteratee2, keysFunc) {
            var index = -1, iterable = Object2(object), props = keysFunc(object), length = props.length;
            while (length--) {
              var key = props[fromRight ? length : ++index];
              if (iteratee2(iterable[key], key, iterable) === false) {
                break;
              }
            }
            return object;
          };
        }
        function createBind(func, bitmask, thisArg) {
          var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
          function wrapper() {
            var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
            return fn.apply(isBind ? thisArg : this, arguments);
          }
          return wrapper;
        }
        function createCaseFirst(methodName) {
          return function(string) {
            string = toString(string);
            var strSymbols = hasUnicode(string) ? stringToArray(string) : undefined2;
            var chr = strSymbols ? strSymbols[0] : string.charAt(0);
            var trailing = strSymbols ? castSlice(strSymbols, 1).join("") : string.slice(1);
            return chr[methodName]() + trailing;
          };
        }
        function createCompounder(callback) {
          return function(string) {
            return arrayReduce(words(deburr(string).replace(reApos, "")), callback, "");
          };
        }
        function createCtor(Ctor) {
          return function() {
            var args = arguments;
            switch (args.length) {
              case 0:
                return new Ctor();
              case 1:
                return new Ctor(args[0]);
              case 2:
                return new Ctor(args[0], args[1]);
              case 3:
                return new Ctor(args[0], args[1], args[2]);
              case 4:
                return new Ctor(args[0], args[1], args[2], args[3]);
              case 5:
                return new Ctor(args[0], args[1], args[2], args[3], args[4]);
              case 6:
                return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
              case 7:
                return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
            }
            var thisBinding = baseCreate(Ctor.prototype), result2 = Ctor.apply(thisBinding, args);
            return isObject(result2) ? result2 : thisBinding;
          };
        }
        function createCurry(func, bitmask, arity) {
          var Ctor = createCtor(func);
          function wrapper() {
            var length = arguments.length, args = Array2(length), index = length, placeholder = getHolder(wrapper);
            while (index--) {
              args[index] = arguments[index];
            }
            var holders = length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder ? [] : replaceHolders(args, placeholder);
            length -= holders.length;
            if (length < arity) {
              return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, undefined2, args, holders, undefined2, undefined2, arity - length);
            }
            var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
            return apply(fn, this, args);
          }
          return wrapper;
        }
        function createFind(findIndexFunc) {
          return function(collection, predicate, fromIndex) {
            var iterable = Object2(collection);
            if (!isArrayLike(collection)) {
              var iteratee2 = getIteratee(predicate, 3);
              collection = keys(collection);
              predicate = function(key) {
                return iteratee2(iterable[key], key, iterable);
              };
            }
            var index = findIndexFunc(collection, predicate, fromIndex);
            return index > -1 ? iterable[iteratee2 ? collection[index] : index] : undefined2;
          };
        }
        function createFlow(fromRight) {
          return flatRest(function(funcs) {
            var length = funcs.length, index = length, prereq = LodashWrapper.prototype.thru;
            if (fromRight) {
              funcs.reverse();
            }
            while (index--) {
              var func = funcs[index];
              if (typeof func != "function") {
                throw new TypeError2(FUNC_ERROR_TEXT);
              }
              if (prereq && !wrapper && getFuncName(func) == "wrapper") {
                var wrapper = new LodashWrapper([], true);
              }
            }
            index = wrapper ? index : length;
            while (++index < length) {
              func = funcs[index];
              var funcName = getFuncName(func), data = funcName == "wrapper" ? getData(func) : undefined2;
              if (data && isLaziable(data[0]) && data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) && !data[4].length && data[9] == 1) {
                wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
              } else {
                wrapper = func.length == 1 && isLaziable(func) ? wrapper[funcName]() : wrapper.thru(func);
              }
            }
            return function() {
              var args = arguments, value = args[0];
              if (wrapper && args.length == 1 && isArray(value)) {
                return wrapper.plant(value).value();
              }
              var index2 = 0, result2 = length ? funcs[index2].apply(this, args) : value;
              while (++index2 < length) {
                result2 = funcs[index2].call(this, result2);
              }
              return result2;
            };
          });
        }
        function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary2, arity) {
          var isAry = bitmask & WRAP_ARY_FLAG, isBind = bitmask & WRAP_BIND_FLAG, isBindKey = bitmask & WRAP_BIND_KEY_FLAG, isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG), isFlip = bitmask & WRAP_FLIP_FLAG, Ctor = isBindKey ? undefined2 : createCtor(func);
          function wrapper() {
            var length = arguments.length, args = Array2(length), index = length;
            while (index--) {
              args[index] = arguments[index];
            }
            if (isCurried) {
              var placeholder = getHolder(wrapper), holdersCount = countHolders(args, placeholder);
            }
            if (partials) {
              args = composeArgs(args, partials, holders, isCurried);
            }
            if (partialsRight) {
              args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
            }
            length -= holdersCount;
            if (isCurried && length < arity) {
              var newHolders = replaceHolders(args, placeholder);
              return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, thisArg, args, newHolders, argPos, ary2, arity - length);
            }
            var thisBinding = isBind ? thisArg : this, fn = isBindKey ? thisBinding[func] : func;
            length = args.length;
            if (argPos) {
              args = reorder(args, argPos);
            } else if (isFlip && length > 1) {
              args.reverse();
            }
            if (isAry && ary2 < length) {
              args.length = ary2;
            }
            if (this && this !== root && this instanceof wrapper) {
              fn = Ctor || createCtor(fn);
            }
            return fn.apply(thisBinding, args);
          }
          return wrapper;
        }
        function createInverter(setter, toIteratee) {
          return function(object, iteratee2) {
            return baseInverter(object, setter, toIteratee(iteratee2), {});
          };
        }
        function createMathOperation(operator, defaultValue) {
          return function(value, other) {
            var result2;
            if (value === undefined2 && other === undefined2) {
              return defaultValue;
            }
            if (value !== undefined2) {
              result2 = value;
            }
            if (other !== undefined2) {
              if (result2 === undefined2) {
                return other;
              }
              if (typeof value == "string" || typeof other == "string") {
                value = baseToString(value);
                other = baseToString(other);
              } else {
                value = baseToNumber(value);
                other = baseToNumber(other);
              }
              result2 = operator(value, other);
            }
            return result2;
          };
        }
        function createOver(arrayFunc) {
          return flatRest(function(iteratees) {
            iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
            return baseRest(function(args) {
              var thisArg = this;
              return arrayFunc(iteratees, function(iteratee2) {
                return apply(iteratee2, thisArg, args);
              });
            });
          });
        }
        function createPadding(length, chars) {
          chars = chars === undefined2 ? " " : baseToString(chars);
          var charsLength = chars.length;
          if (charsLength < 2) {
            return charsLength ? baseRepeat(chars, length) : chars;
          }
          var result2 = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
          return hasUnicode(chars) ? castSlice(stringToArray(result2), 0, length).join("") : result2.slice(0, length);
        }
        function createPartial(func, bitmask, thisArg, partials) {
          var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
          function wrapper() {
            var argsIndex = -1, argsLength = arguments.length, leftIndex = -1, leftLength = partials.length, args = Array2(leftLength + argsLength), fn = this && this !== root && this instanceof wrapper ? Ctor : func;
            while (++leftIndex < leftLength) {
              args[leftIndex] = partials[leftIndex];
            }
            while (argsLength--) {
              args[leftIndex++] = arguments[++argsIndex];
            }
            return apply(fn, isBind ? thisArg : this, args);
          }
          return wrapper;
        }
        function createRange(fromRight) {
          return function(start, end, step) {
            if (step && typeof step != "number" && isIterateeCall(start, end, step)) {
              end = step = undefined2;
            }
            start = toFinite(start);
            if (end === undefined2) {
              end = start;
              start = 0;
            } else {
              end = toFinite(end);
            }
            step = step === undefined2 ? start < end ? 1 : -1 : toFinite(step);
            return baseRange(start, end, step, fromRight);
          };
        }
        function createRelationalOperation(operator) {
          return function(value, other) {
            if (!(typeof value == "string" && typeof other == "string")) {
              value = toNumber(value);
              other = toNumber(other);
            }
            return operator(value, other);
          };
        }
        function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary2, arity) {
          var isCurry = bitmask & WRAP_CURRY_FLAG, newHolders = isCurry ? holders : undefined2, newHoldersRight = isCurry ? undefined2 : holders, newPartials = isCurry ? partials : undefined2, newPartialsRight = isCurry ? undefined2 : partials;
          bitmask |= isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG;
          bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);
          if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
            bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
          }
          var newData = [
            func,
            bitmask,
            thisArg,
            newPartials,
            newHolders,
            newPartialsRight,
            newHoldersRight,
            argPos,
            ary2,
            arity
          ];
          var result2 = wrapFunc.apply(undefined2, newData);
          if (isLaziable(func)) {
            setData(result2, newData);
          }
          result2.placeholder = placeholder;
          return setWrapToString(result2, func, bitmask);
        }
        function createRound(methodName) {
          var func = Math2[methodName];
          return function(number, precision) {
            number = toNumber(number);
            precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
            if (precision && nativeIsFinite(number)) {
              var pair = (toString(number) + "e").split("e"), value = func(pair[0] + "e" + (+pair[1] + precision));
              pair = (toString(value) + "e").split("e");
              return +(pair[0] + "e" + (+pair[1] - precision));
            }
            return func(number);
          };
        }
        var createSet = !(Set2 && 1 / setToArray(new Set2([, -0]))[1] == INFINITY) ? noop : function(values2) {
          return new Set2(values2);
        };
        function createToPairs(keysFunc) {
          return function(object) {
            var tag = getTag(object);
            if (tag == mapTag) {
              return mapToArray(object);
            }
            if (tag == setTag) {
              return setToPairs(object);
            }
            return baseToPairs(object, keysFunc(object));
          };
        }
        function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary2, arity) {
          var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
          if (!isBindKey && typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          var length = partials ? partials.length : 0;
          if (!length) {
            bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
            partials = holders = undefined2;
          }
          ary2 = ary2 === undefined2 ? ary2 : nativeMax(toInteger(ary2), 0);
          arity = arity === undefined2 ? arity : toInteger(arity);
          length -= holders ? holders.length : 0;
          if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
            var partialsRight = partials, holdersRight = holders;
            partials = holders = undefined2;
          }
          var data = isBindKey ? undefined2 : getData(func);
          var newData = [
            func,
            bitmask,
            thisArg,
            partials,
            holders,
            partialsRight,
            holdersRight,
            argPos,
            ary2,
            arity
          ];
          if (data) {
            mergeData(newData, data);
          }
          func = newData[0];
          bitmask = newData[1];
          thisArg = newData[2];
          partials = newData[3];
          holders = newData[4];
          arity = newData[9] = newData[9] === undefined2 ? isBindKey ? 0 : func.length : nativeMax(newData[9] - length, 0);
          if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
            bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
          }
          if (!bitmask || bitmask == WRAP_BIND_FLAG) {
            var result2 = createBind(func, bitmask, thisArg);
          } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
            result2 = createCurry(func, bitmask, arity);
          } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
            result2 = createPartial(func, bitmask, thisArg, partials);
          } else {
            result2 = createHybrid.apply(undefined2, newData);
          }
          var setter = data ? baseSetData : setData;
          return setWrapToString(setter(result2, newData), func, bitmask);
        }
        function customDefaultsAssignIn(objValue, srcValue, key, object) {
          if (objValue === undefined2 || eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key)) {
            return srcValue;
          }
          return objValue;
        }
        function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
          if (isObject(objValue) && isObject(srcValue)) {
            stack.set(srcValue, objValue);
            baseMerge(objValue, srcValue, undefined2, customDefaultsMerge, stack);
            stack["delete"](srcValue);
          }
          return objValue;
        }
        function customOmitClone(value) {
          return isPlainObject(value) ? undefined2 : value;
        }
        function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
          if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
            return false;
          }
          var arrStacked = stack.get(array);
          var othStacked = stack.get(other);
          if (arrStacked && othStacked) {
            return arrStacked == other && othStacked == array;
          }
          var index = -1, result2 = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined2;
          stack.set(array, other);
          stack.set(other, array);
          while (++index < arrLength) {
            var arrValue = array[index], othValue = other[index];
            if (customizer) {
              var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
            }
            if (compared !== undefined2) {
              if (compared) {
                continue;
              }
              result2 = false;
              break;
            }
            if (seen) {
              if (!arraySome(other, function(othValue2, othIndex) {
                if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
                  return seen.push(othIndex);
                }
              })) {
                result2 = false;
                break;
              }
            } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
              result2 = false;
              break;
            }
          }
          stack["delete"](array);
          stack["delete"](other);
          return result2;
        }
        function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
          switch (tag) {
            case dataViewTag:
              if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
                return false;
              }
              object = object.buffer;
              other = other.buffer;
            case arrayBufferTag:
              if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array2(object), new Uint8Array2(other))) {
                return false;
              }
              return true;
            case boolTag:
            case dateTag:
            case numberTag:
              return eq(+object, +other);
            case errorTag:
              return object.name == other.name && object.message == other.message;
            case regexpTag:
            case stringTag:
              return object == other + "";
            case mapTag:
              var convert = mapToArray;
            case setTag:
              var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
              convert || (convert = setToArray);
              if (object.size != other.size && !isPartial) {
                return false;
              }
              var stacked = stack.get(object);
              if (stacked) {
                return stacked == other;
              }
              bitmask |= COMPARE_UNORDERED_FLAG;
              stack.set(object, other);
              var result2 = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
              stack["delete"](object);
              return result2;
            case symbolTag:
              if (symbolValueOf) {
                return symbolValueOf.call(object) == symbolValueOf.call(other);
              }
          }
          return false;
        }
        function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
          if (objLength != othLength && !isPartial) {
            return false;
          }
          var index = objLength;
          while (index--) {
            var key = objProps[index];
            if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
              return false;
            }
          }
          var objStacked = stack.get(object);
          var othStacked = stack.get(other);
          if (objStacked && othStacked) {
            return objStacked == other && othStacked == object;
          }
          var result2 = true;
          stack.set(object, other);
          stack.set(other, object);
          var skipCtor = isPartial;
          while (++index < objLength) {
            key = objProps[index];
            var objValue = object[key], othValue = other[key];
            if (customizer) {
              var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
            }
            if (!(compared === undefined2 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
              result2 = false;
              break;
            }
            skipCtor || (skipCtor = key == "constructor");
          }
          if (result2 && !skipCtor) {
            var objCtor = object.constructor, othCtor = other.constructor;
            if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
              result2 = false;
            }
          }
          stack["delete"](object);
          stack["delete"](other);
          return result2;
        }
        function flatRest(func) {
          return setToString(overRest(func, undefined2, flatten), func + "");
        }
        function getAllKeys(object) {
          return baseGetAllKeys(object, keys, getSymbols);
        }
        function getAllKeysIn(object) {
          return baseGetAllKeys(object, keysIn, getSymbolsIn);
        }
        var getData = !metaMap ? noop : function(func) {
          return metaMap.get(func);
        };
        function getFuncName(func) {
          var result2 = func.name + "", array = realNames[result2], length = hasOwnProperty.call(realNames, result2) ? array.length : 0;
          while (length--) {
            var data = array[length], otherFunc = data.func;
            if (otherFunc == null || otherFunc == func) {
              return data.name;
            }
          }
          return result2;
        }
        function getHolder(func) {
          var object = hasOwnProperty.call(lodash, "placeholder") ? lodash : func;
          return object.placeholder;
        }
        function getIteratee() {
          var result2 = lodash.iteratee || iteratee;
          result2 = result2 === iteratee ? baseIteratee : result2;
          return arguments.length ? result2(arguments[0], arguments[1]) : result2;
        }
        function getMapData(map2, key) {
          var data = map2.__data__;
          return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
        }
        function getMatchData(object) {
          var result2 = keys(object), length = result2.length;
          while (length--) {
            var key = result2[length], value = object[key];
            result2[length] = [key, value, isStrictComparable(value)];
          }
          return result2;
        }
        function getNative(object, key) {
          var value = getValue(object, key);
          return baseIsNative(value) ? value : undefined2;
        }
        function getRawTag(value) {
          var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
          try {
            value[symToStringTag] = undefined2;
            var unmasked = true;
          } catch (e) {
          }
          var result2 = nativeObjectToString.call(value);
          if (unmasked) {
            if (isOwn) {
              value[symToStringTag] = tag;
            } else {
              delete value[symToStringTag];
            }
          }
          return result2;
        }
        var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
          if (object == null) {
            return [];
          }
          object = Object2(object);
          return arrayFilter(nativeGetSymbols(object), function(symbol) {
            return propertyIsEnumerable.call(object, symbol);
          });
        };
        var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
          var result2 = [];
          while (object) {
            arrayPush(result2, getSymbols(object));
            object = getPrototype(object);
          }
          return result2;
        };
        var getTag = baseGetTag;
        if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag || WeakMap2 && getTag(new WeakMap2()) != weakMapTag) {
          getTag = function(value) {
            var result2 = baseGetTag(value), Ctor = result2 == objectTag ? value.constructor : undefined2, ctorString = Ctor ? toSource(Ctor) : "";
            if (ctorString) {
              switch (ctorString) {
                case dataViewCtorString:
                  return dataViewTag;
                case mapCtorString:
                  return mapTag;
                case promiseCtorString:
                  return promiseTag;
                case setCtorString:
                  return setTag;
                case weakMapCtorString:
                  return weakMapTag;
              }
            }
            return result2;
          };
        }
        function getView(start, end, transforms) {
          var index = -1, length = transforms.length;
          while (++index < length) {
            var data = transforms[index], size2 = data.size;
            switch (data.type) {
              case "drop":
                start += size2;
                break;
              case "dropRight":
                end -= size2;
                break;
              case "take":
                end = nativeMin(end, start + size2);
                break;
              case "takeRight":
                start = nativeMax(start, end - size2);
                break;
            }
          }
          return { "start": start, "end": end };
        }
        function getWrapDetails(source) {
          var match = source.match(reWrapDetails);
          return match ? match[1].split(reSplitDetails) : [];
        }
        function hasPath(object, path, hasFunc) {
          path = castPath(path, object);
          var index = -1, length = path.length, result2 = false;
          while (++index < length) {
            var key = toKey(path[index]);
            if (!(result2 = object != null && hasFunc(object, key))) {
              break;
            }
            object = object[key];
          }
          if (result2 || ++index != length) {
            return result2;
          }
          length = object == null ? 0 : object.length;
          return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
        }
        function initCloneArray(array) {
          var length = array.length, result2 = new array.constructor(length);
          if (length && typeof array[0] == "string" && hasOwnProperty.call(array, "index")) {
            result2.index = array.index;
            result2.input = array.input;
          }
          return result2;
        }
        function initCloneObject(object) {
          return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
        }
        function initCloneByTag(object, tag, isDeep) {
          var Ctor = object.constructor;
          switch (tag) {
            case arrayBufferTag:
              return cloneArrayBuffer(object);
            case boolTag:
            case dateTag:
              return new Ctor(+object);
            case dataViewTag:
              return cloneDataView(object, isDeep);
            case float32Tag:
            case float64Tag:
            case int8Tag:
            case int16Tag:
            case int32Tag:
            case uint8Tag:
            case uint8ClampedTag:
            case uint16Tag:
            case uint32Tag:
              return cloneTypedArray(object, isDeep);
            case mapTag:
              return new Ctor();
            case numberTag:
            case stringTag:
              return new Ctor(object);
            case regexpTag:
              return cloneRegExp(object);
            case setTag:
              return new Ctor();
            case symbolTag:
              return cloneSymbol(object);
          }
        }
        function insertWrapDetails(source, details) {
          var length = details.length;
          if (!length) {
            return source;
          }
          var lastIndex = length - 1;
          details[lastIndex] = (length > 1 ? "& " : "") + details[lastIndex];
          details = details.join(length > 2 ? ", " : " ");
          return source.replace(reWrapComment, "{\n/* [wrapped with " + details + "] */\n");
        }
        function isFlattenable(value) {
          return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
        }
        function isIndex(value, length) {
          var type = typeof value;
          length = length == null ? MAX_SAFE_INTEGER : length;
          return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
        }
        function isIterateeCall(value, index, object) {
          if (!isObject(object)) {
            return false;
          }
          var type = typeof index;
          if (type == "number" ? isArrayLike(object) && isIndex(index, object.length) : type == "string" && index in object) {
            return eq(object[index], value);
          }
          return false;
        }
        function isKey(value, object) {
          if (isArray(value)) {
            return false;
          }
          var type = typeof value;
          if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol(value)) {
            return true;
          }
          return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object2(object);
        }
        function isKeyable(value) {
          var type = typeof value;
          return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
        }
        function isLaziable(func) {
          var funcName = getFuncName(func), other = lodash[funcName];
          if (typeof other != "function" || !(funcName in LazyWrapper.prototype)) {
            return false;
          }
          if (func === other) {
            return true;
          }
          var data = getData(other);
          return !!data && func === data[0];
        }
        function isMasked(func) {
          return !!maskSrcKey && maskSrcKey in func;
        }
        var isMaskable = coreJsData ? isFunction2 : stubFalse;
        function isPrototype(value) {
          var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
          return value === proto;
        }
        function isStrictComparable(value) {
          return value === value && !isObject(value);
        }
        function matchesStrictComparable(key, srcValue) {
          return function(object) {
            if (object == null) {
              return false;
            }
            return object[key] === srcValue && (srcValue !== undefined2 || key in Object2(object));
          };
        }
        function memoizeCapped(func) {
          var result2 = memoize(func, function(key) {
            if (cache.size === MAX_MEMOIZE_SIZE) {
              cache.clear();
            }
            return key;
          });
          var cache = result2.cache;
          return result2;
        }
        function mergeData(data, source) {
          var bitmask = data[1], srcBitmask = source[1], newBitmask = bitmask | srcBitmask, isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);
          var isCombo = srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_CURRY_FLAG || srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_REARG_FLAG && data[7].length <= source[8] || srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG) && source[7].length <= source[8] && bitmask == WRAP_CURRY_FLAG;
          if (!(isCommon || isCombo)) {
            return data;
          }
          if (srcBitmask & WRAP_BIND_FLAG) {
            data[2] = source[2];
            newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
          }
          var value = source[3];
          if (value) {
            var partials = data[3];
            data[3] = partials ? composeArgs(partials, value, source[4]) : value;
            data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
          }
          value = source[5];
          if (value) {
            partials = data[5];
            data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
            data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
          }
          value = source[7];
          if (value) {
            data[7] = value;
          }
          if (srcBitmask & WRAP_ARY_FLAG) {
            data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
          }
          if (data[9] == null) {
            data[9] = source[9];
          }
          data[0] = source[0];
          data[1] = newBitmask;
          return data;
        }
        function nativeKeysIn(object) {
          var result2 = [];
          if (object != null) {
            for (var key in Object2(object)) {
              result2.push(key);
            }
          }
          return result2;
        }
        function objectToString(value) {
          return nativeObjectToString.call(value);
        }
        function overRest(func, start, transform2) {
          start = nativeMax(start === undefined2 ? func.length - 1 : start, 0);
          return function() {
            var args = arguments, index = -1, length = nativeMax(args.length - start, 0), array = Array2(length);
            while (++index < length) {
              array[index] = args[start + index];
            }
            index = -1;
            var otherArgs = Array2(start + 1);
            while (++index < start) {
              otherArgs[index] = args[index];
            }
            otherArgs[start] = transform2(array);
            return apply(func, this, otherArgs);
          };
        }
        function parent(object, path) {
          return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
        }
        function reorder(array, indexes) {
          var arrLength = array.length, length = nativeMin(indexes.length, arrLength), oldArray = copyArray(array);
          while (length--) {
            var index = indexes[length];
            array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined2;
          }
          return array;
        }
        function safeGet(object, key) {
          if (key === "constructor" && typeof object[key] === "function") {
            return;
          }
          if (key == "__proto__") {
            return;
          }
          return object[key];
        }
        var setData = shortOut(baseSetData);
        var setTimeout2 = ctxSetTimeout || function(func, wait) {
          return root.setTimeout(func, wait);
        };
        var setToString = shortOut(baseSetToString);
        function setWrapToString(wrapper, reference, bitmask) {
          var source = reference + "";
          return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
        }
        function shortOut(func) {
          var count = 0, lastCalled = 0;
          return function() {
            var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
            lastCalled = stamp;
            if (remaining > 0) {
              if (++count >= HOT_COUNT) {
                return arguments[0];
              }
            } else {
              count = 0;
            }
            return func.apply(undefined2, arguments);
          };
        }
        function shuffleSelf(array, size2) {
          var index = -1, length = array.length, lastIndex = length - 1;
          size2 = size2 === undefined2 ? length : size2;
          while (++index < size2) {
            var rand3 = baseRandom(index, lastIndex), value = array[rand3];
            array[rand3] = array[index];
            array[index] = value;
          }
          array.length = size2;
          return array;
        }
        var stringToPath = memoizeCapped(function(string) {
          var result2 = [];
          if (string.charCodeAt(0) === 46) {
            result2.push("");
          }
          string.replace(rePropName, function(match, number, quote, subString) {
            result2.push(quote ? subString.replace(reEscapeChar, "$1") : number || match);
          });
          return result2;
        });
        function toKey(value) {
          if (typeof value == "string" || isSymbol(value)) {
            return value;
          }
          var result2 = value + "";
          return result2 == "0" && 1 / value == -INFINITY ? "-0" : result2;
        }
        function toSource(func) {
          if (func != null) {
            try {
              return funcToString.call(func);
            } catch (e) {
            }
            try {
              return func + "";
            } catch (e) {
            }
          }
          return "";
        }
        function updateWrapDetails(details, bitmask) {
          arrayEach(wrapFlags, function(pair) {
            var value = "_." + pair[0];
            if (bitmask & pair[1] && !arrayIncludes(details, value)) {
              details.push(value);
            }
          });
          return details.sort();
        }
        function wrapperClone(wrapper) {
          if (wrapper instanceof LazyWrapper) {
            return wrapper.clone();
          }
          var result2 = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
          result2.__actions__ = copyArray(wrapper.__actions__);
          result2.__index__ = wrapper.__index__;
          result2.__values__ = wrapper.__values__;
          return result2;
        }
        function chunk(array, size2, guard) {
          if (guard ? isIterateeCall(array, size2, guard) : size2 === undefined2) {
            size2 = 1;
          } else {
            size2 = nativeMax(toInteger(size2), 0);
          }
          var length = array == null ? 0 : array.length;
          if (!length || size2 < 1) {
            return [];
          }
          var index = 0, resIndex = 0, result2 = Array2(nativeCeil(length / size2));
          while (index < length) {
            result2[resIndex++] = baseSlice(array, index, index += size2);
          }
          return result2;
        }
        function compact(array) {
          var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result2 = [];
          while (++index < length) {
            var value = array[index];
            if (value) {
              result2[resIndex++] = value;
            }
          }
          return result2;
        }
        function concat() {
          var length = arguments.length;
          if (!length) {
            return [];
          }
          var args = Array2(length - 1), array = arguments[0], index = length;
          while (index--) {
            args[index - 1] = arguments[index];
          }
          return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
        }
        var difference = baseRest(function(array, values2) {
          return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true)) : [];
        });
        var differenceBy = baseRest(function(array, values2) {
          var iteratee2 = last(values2);
          if (isArrayLikeObject(iteratee2)) {
            iteratee2 = undefined2;
          }
          return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true), getIteratee(iteratee2, 2)) : [];
        });
        var differenceWith = baseRest(function(array, values2) {
          var comparator = last(values2);
          if (isArrayLikeObject(comparator)) {
            comparator = undefined2;
          }
          return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true), undefined2, comparator) : [];
        });
        function drop(array, n, guard) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          n = guard || n === undefined2 ? 1 : toInteger(n);
          return baseSlice(array, n < 0 ? 0 : n, length);
        }
        function dropRight(array, n, guard) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          n = guard || n === undefined2 ? 1 : toInteger(n);
          n = length - n;
          return baseSlice(array, 0, n < 0 ? 0 : n);
        }
        function dropRightWhile(array, predicate) {
          return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true, true) : [];
        }
        function dropWhile(array, predicate) {
          return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true) : [];
        }
        function fill(array, value, start, end) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          if (start && typeof start != "number" && isIterateeCall(array, value, start)) {
            start = 0;
            end = length;
          }
          return baseFill(array, value, start, end);
        }
        function findIndex(array, predicate, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = fromIndex == null ? 0 : toInteger(fromIndex);
          if (index < 0) {
            index = nativeMax(length + index, 0);
          }
          return baseFindIndex(array, getIteratee(predicate, 3), index);
        }
        function findLastIndex(array, predicate, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = length - 1;
          if (fromIndex !== undefined2) {
            index = toInteger(fromIndex);
            index = fromIndex < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
          }
          return baseFindIndex(array, getIteratee(predicate, 3), index, true);
        }
        function flatten(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseFlatten(array, 1) : [];
        }
        function flattenDeep(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseFlatten(array, INFINITY) : [];
        }
        function flattenDepth(array, depth) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          depth = depth === undefined2 ? 1 : toInteger(depth);
          return baseFlatten(array, depth);
        }
        function fromPairs(pairs) {
          var index = -1, length = pairs == null ? 0 : pairs.length, result2 = {};
          while (++index < length) {
            var pair = pairs[index];
            result2[pair[0]] = pair[1];
          }
          return result2;
        }
        function head(array) {
          return array && array.length ? array[0] : undefined2;
        }
        function indexOf(array, value, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = fromIndex == null ? 0 : toInteger(fromIndex);
          if (index < 0) {
            index = nativeMax(length + index, 0);
          }
          return baseIndexOf(array, value, index);
        }
        function initial(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseSlice(array, 0, -1) : [];
        }
        var intersection = baseRest(function(arrays) {
          var mapped = arrayMap(arrays, castArrayLikeObject);
          return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped) : [];
        });
        var intersectionBy = baseRest(function(arrays) {
          var iteratee2 = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
          if (iteratee2 === last(mapped)) {
            iteratee2 = undefined2;
          } else {
            mapped.pop();
          }
          return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, getIteratee(iteratee2, 2)) : [];
        });
        var intersectionWith = baseRest(function(arrays) {
          var comparator = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
          comparator = typeof comparator == "function" ? comparator : undefined2;
          if (comparator) {
            mapped.pop();
          }
          return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, undefined2, comparator) : [];
        });
        function join(array, separator) {
          return array == null ? "" : nativeJoin.call(array, separator);
        }
        function last(array) {
          var length = array == null ? 0 : array.length;
          return length ? array[length - 1] : undefined2;
        }
        function lastIndexOf(array, value, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = length;
          if (fromIndex !== undefined2) {
            index = toInteger(fromIndex);
            index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
          }
          return value === value ? strictLastIndexOf(array, value, index) : baseFindIndex(array, baseIsNaN, index, true);
        }
        function nth(array, n) {
          return array && array.length ? baseNth(array, toInteger(n)) : undefined2;
        }
        var pull = baseRest(pullAll);
        function pullAll(array, values2) {
          return array && array.length && values2 && values2.length ? basePullAll(array, values2) : array;
        }
        function pullAllBy(array, values2, iteratee2) {
          return array && array.length && values2 && values2.length ? basePullAll(array, values2, getIteratee(iteratee2, 2)) : array;
        }
        function pullAllWith(array, values2, comparator) {
          return array && array.length && values2 && values2.length ? basePullAll(array, values2, undefined2, comparator) : array;
        }
        var pullAt = flatRest(function(array, indexes) {
          var length = array == null ? 0 : array.length, result2 = baseAt(array, indexes);
          basePullAt(array, arrayMap(indexes, function(index) {
            return isIndex(index, length) ? +index : index;
          }).sort(compareAscending));
          return result2;
        });
        function remove(array, predicate) {
          var result2 = [];
          if (!(array && array.length)) {
            return result2;
          }
          var index = -1, indexes = [], length = array.length;
          predicate = getIteratee(predicate, 3);
          while (++index < length) {
            var value = array[index];
            if (predicate(value, index, array)) {
              result2.push(value);
              indexes.push(index);
            }
          }
          basePullAt(array, indexes);
          return result2;
        }
        function reverse(array) {
          return array == null ? array : nativeReverse.call(array);
        }
        function slice(array, start, end) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          if (end && typeof end != "number" && isIterateeCall(array, start, end)) {
            start = 0;
            end = length;
          } else {
            start = start == null ? 0 : toInteger(start);
            end = end === undefined2 ? length : toInteger(end);
          }
          return baseSlice(array, start, end);
        }
        function sortedIndex(array, value) {
          return baseSortedIndex(array, value);
        }
        function sortedIndexBy(array, value, iteratee2) {
          return baseSortedIndexBy(array, value, getIteratee(iteratee2, 2));
        }
        function sortedIndexOf(array, value) {
          var length = array == null ? 0 : array.length;
          if (length) {
            var index = baseSortedIndex(array, value);
            if (index < length && eq(array[index], value)) {
              return index;
            }
          }
          return -1;
        }
        function sortedLastIndex(array, value) {
          return baseSortedIndex(array, value, true);
        }
        function sortedLastIndexBy(array, value, iteratee2) {
          return baseSortedIndexBy(array, value, getIteratee(iteratee2, 2), true);
        }
        function sortedLastIndexOf(array, value) {
          var length = array == null ? 0 : array.length;
          if (length) {
            var index = baseSortedIndex(array, value, true) - 1;
            if (eq(array[index], value)) {
              return index;
            }
          }
          return -1;
        }
        function sortedUniq(array) {
          return array && array.length ? baseSortedUniq(array) : [];
        }
        function sortedUniqBy(array, iteratee2) {
          return array && array.length ? baseSortedUniq(array, getIteratee(iteratee2, 2)) : [];
        }
        function tail(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseSlice(array, 1, length) : [];
        }
        function take(array, n, guard) {
          if (!(array && array.length)) {
            return [];
          }
          n = guard || n === undefined2 ? 1 : toInteger(n);
          return baseSlice(array, 0, n < 0 ? 0 : n);
        }
        function takeRight(array, n, guard) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          n = guard || n === undefined2 ? 1 : toInteger(n);
          n = length - n;
          return baseSlice(array, n < 0 ? 0 : n, length);
        }
        function takeRightWhile(array, predicate) {
          return array && array.length ? baseWhile(array, getIteratee(predicate, 3), false, true) : [];
        }
        function takeWhile(array, predicate) {
          return array && array.length ? baseWhile(array, getIteratee(predicate, 3)) : [];
        }
        var union = baseRest(function(arrays) {
          return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
        });
        var unionBy = baseRest(function(arrays) {
          var iteratee2 = last(arrays);
          if (isArrayLikeObject(iteratee2)) {
            iteratee2 = undefined2;
          }
          return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee2, 2));
        });
        var unionWith = baseRest(function(arrays) {
          var comparator = last(arrays);
          comparator = typeof comparator == "function" ? comparator : undefined2;
          return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined2, comparator);
        });
        function uniq(array) {
          return array && array.length ? baseUniq(array) : [];
        }
        function uniqBy(array, iteratee2) {
          return array && array.length ? baseUniq(array, getIteratee(iteratee2, 2)) : [];
        }
        function uniqWith(array, comparator) {
          comparator = typeof comparator == "function" ? comparator : undefined2;
          return array && array.length ? baseUniq(array, undefined2, comparator) : [];
        }
        function unzip(array) {
          if (!(array && array.length)) {
            return [];
          }
          var length = 0;
          array = arrayFilter(array, function(group) {
            if (isArrayLikeObject(group)) {
              length = nativeMax(group.length, length);
              return true;
            }
          });
          return baseTimes(length, function(index) {
            return arrayMap(array, baseProperty(index));
          });
        }
        function unzipWith(array, iteratee2) {
          if (!(array && array.length)) {
            return [];
          }
          var result2 = unzip(array);
          if (iteratee2 == null) {
            return result2;
          }
          return arrayMap(result2, function(group) {
            return apply(iteratee2, undefined2, group);
          });
        }
        var without = baseRest(function(array, values2) {
          return isArrayLikeObject(array) ? baseDifference(array, values2) : [];
        });
        var xor = baseRest(function(arrays) {
          return baseXor(arrayFilter(arrays, isArrayLikeObject));
        });
        var xorBy = baseRest(function(arrays) {
          var iteratee2 = last(arrays);
          if (isArrayLikeObject(iteratee2)) {
            iteratee2 = undefined2;
          }
          return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee2, 2));
        });
        var xorWith = baseRest(function(arrays) {
          var comparator = last(arrays);
          comparator = typeof comparator == "function" ? comparator : undefined2;
          return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined2, comparator);
        });
        var zip = baseRest(unzip);
        function zipObject(props, values2) {
          return baseZipObject(props || [], values2 || [], assignValue);
        }
        function zipObjectDeep(props, values2) {
          return baseZipObject(props || [], values2 || [], baseSet);
        }
        var zipWith = baseRest(function(arrays) {
          var length = arrays.length, iteratee2 = length > 1 ? arrays[length - 1] : undefined2;
          iteratee2 = typeof iteratee2 == "function" ? (arrays.pop(), iteratee2) : undefined2;
          return unzipWith(arrays, iteratee2);
        });
        function chain(value) {
          var result2 = lodash(value);
          result2.__chain__ = true;
          return result2;
        }
        function tap(value, interceptor) {
          interceptor(value);
          return value;
        }
        function thru(value, interceptor) {
          return interceptor(value);
        }
        var wrapperAt = flatRest(function(paths) {
          var length = paths.length, start = length ? paths[0] : 0, value = this.__wrapped__, interceptor = function(object) {
            return baseAt(object, paths);
          };
          if (length > 1 || this.__actions__.length || !(value instanceof LazyWrapper) || !isIndex(start)) {
            return this.thru(interceptor);
          }
          value = value.slice(start, +start + (length ? 1 : 0));
          value.__actions__.push({
            "func": thru,
            "args": [interceptor],
            "thisArg": undefined2
          });
          return new LodashWrapper(value, this.__chain__).thru(function(array) {
            if (length && !array.length) {
              array.push(undefined2);
            }
            return array;
          });
        });
        function wrapperChain() {
          return chain(this);
        }
        function wrapperCommit() {
          return new LodashWrapper(this.value(), this.__chain__);
        }
        function wrapperNext() {
          if (this.__values__ === undefined2) {
            this.__values__ = toArray(this.value());
          }
          var done = this.__index__ >= this.__values__.length, value = done ? undefined2 : this.__values__[this.__index__++];
          return { "done": done, "value": value };
        }
        function wrapperToIterator() {
          return this;
        }
        function wrapperPlant(value) {
          var result2, parent2 = this;
          while (parent2 instanceof baseLodash) {
            var clone2 = wrapperClone(parent2);
            clone2.__index__ = 0;
            clone2.__values__ = undefined2;
            if (result2) {
              previous.__wrapped__ = clone2;
            } else {
              result2 = clone2;
            }
            var previous = clone2;
            parent2 = parent2.__wrapped__;
          }
          previous.__wrapped__ = value;
          return result2;
        }
        function wrapperReverse() {
          var value = this.__wrapped__;
          if (value instanceof LazyWrapper) {
            var wrapped = value;
            if (this.__actions__.length) {
              wrapped = new LazyWrapper(this);
            }
            wrapped = wrapped.reverse();
            wrapped.__actions__.push({
              "func": thru,
              "args": [reverse],
              "thisArg": undefined2
            });
            return new LodashWrapper(wrapped, this.__chain__);
          }
          return this.thru(reverse);
        }
        function wrapperValue() {
          return baseWrapperValue(this.__wrapped__, this.__actions__);
        }
        var countBy = createAggregator(function(result2, value, key) {
          if (hasOwnProperty.call(result2, key)) {
            ++result2[key];
          } else {
            baseAssignValue(result2, key, 1);
          }
        });
        function every(collection, predicate, guard) {
          var func = isArray(collection) ? arrayEvery : baseEvery;
          if (guard && isIterateeCall(collection, predicate, guard)) {
            predicate = undefined2;
          }
          return func(collection, getIteratee(predicate, 3));
        }
        function filter(collection, predicate) {
          var func = isArray(collection) ? arrayFilter : baseFilter;
          return func(collection, getIteratee(predicate, 3));
        }
        var find = createFind(findIndex);
        var findLast = createFind(findLastIndex);
        function flatMap(collection, iteratee2) {
          return baseFlatten(map(collection, iteratee2), 1);
        }
        function flatMapDeep(collection, iteratee2) {
          return baseFlatten(map(collection, iteratee2), INFINITY);
        }
        function flatMapDepth(collection, iteratee2, depth) {
          depth = depth === undefined2 ? 1 : toInteger(depth);
          return baseFlatten(map(collection, iteratee2), depth);
        }
        function forEach(collection, iteratee2) {
          var func = isArray(collection) ? arrayEach : baseEach;
          return func(collection, getIteratee(iteratee2, 3));
        }
        function forEachRight(collection, iteratee2) {
          var func = isArray(collection) ? arrayEachRight : baseEachRight;
          return func(collection, getIteratee(iteratee2, 3));
        }
        var groupBy = createAggregator(function(result2, value, key) {
          if (hasOwnProperty.call(result2, key)) {
            result2[key].push(value);
          } else {
            baseAssignValue(result2, key, [value]);
          }
        });
        function includes(collection, value, fromIndex, guard) {
          collection = isArrayLike(collection) ? collection : values(collection);
          fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0;
          var length = collection.length;
          if (fromIndex < 0) {
            fromIndex = nativeMax(length + fromIndex, 0);
          }
          return isString2(collection) ? fromIndex <= length && collection.indexOf(value, fromIndex) > -1 : !!length && baseIndexOf(collection, value, fromIndex) > -1;
        }
        var invokeMap = baseRest(function(collection, path, args) {
          var index = -1, isFunc = typeof path == "function", result2 = isArrayLike(collection) ? Array2(collection.length) : [];
          baseEach(collection, function(value) {
            result2[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
          });
          return result2;
        });
        var keyBy = createAggregator(function(result2, value, key) {
          baseAssignValue(result2, key, value);
        });
        function map(collection, iteratee2) {
          var func = isArray(collection) ? arrayMap : baseMap;
          return func(collection, getIteratee(iteratee2, 3));
        }
        function orderBy(collection, iteratees, orders, guard) {
          if (collection == null) {
            return [];
          }
          if (!isArray(iteratees)) {
            iteratees = iteratees == null ? [] : [iteratees];
          }
          orders = guard ? undefined2 : orders;
          if (!isArray(orders)) {
            orders = orders == null ? [] : [orders];
          }
          return baseOrderBy(collection, iteratees, orders);
        }
        var partition2 = createAggregator(function(result2, value, key) {
          result2[key ? 0 : 1].push(value);
        }, function() {
          return [[], []];
        });
        function reduce(collection, iteratee2, accumulator) {
          var func = isArray(collection) ? arrayReduce : baseReduce, initAccum = arguments.length < 3;
          return func(collection, getIteratee(iteratee2, 4), accumulator, initAccum, baseEach);
        }
        function reduceRight(collection, iteratee2, accumulator) {
          var func = isArray(collection) ? arrayReduceRight : baseReduce, initAccum = arguments.length < 3;
          return func(collection, getIteratee(iteratee2, 4), accumulator, initAccum, baseEachRight);
        }
        function reject(collection, predicate) {
          var func = isArray(collection) ? arrayFilter : baseFilter;
          return func(collection, negate(getIteratee(predicate, 3)));
        }
        function sample(collection) {
          var func = isArray(collection) ? arraySample : baseSample;
          return func(collection);
        }
        function sampleSize(collection, n, guard) {
          if (guard ? isIterateeCall(collection, n, guard) : n === undefined2) {
            n = 1;
          } else {
            n = toInteger(n);
          }
          var func = isArray(collection) ? arraySampleSize : baseSampleSize;
          return func(collection, n);
        }
        function shuffle(collection) {
          var func = isArray(collection) ? arrayShuffle : baseShuffle;
          return func(collection);
        }
        function size(collection) {
          if (collection == null) {
            return 0;
          }
          if (isArrayLike(collection)) {
            return isString2(collection) ? stringSize(collection) : collection.length;
          }
          var tag = getTag(collection);
          if (tag == mapTag || tag == setTag) {
            return collection.size;
          }
          return baseKeys(collection).length;
        }
        function some(collection, predicate, guard) {
          var func = isArray(collection) ? arraySome : baseSome;
          if (guard && isIterateeCall(collection, predicate, guard)) {
            predicate = undefined2;
          }
          return func(collection, getIteratee(predicate, 3));
        }
        var sortBy = baseRest(function(collection, iteratees) {
          if (collection == null) {
            return [];
          }
          var length = iteratees.length;
          if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
            iteratees = [];
          } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
            iteratees = [iteratees[0]];
          }
          return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
        });
        var now = ctxNow || function() {
          return root.Date.now();
        };
        function after(n, func) {
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          n = toInteger(n);
          return function() {
            if (--n < 1) {
              return func.apply(this, arguments);
            }
          };
        }
        function ary(func, n, guard) {
          n = guard ? undefined2 : n;
          n = func && n == null ? func.length : n;
          return createWrap(func, WRAP_ARY_FLAG, undefined2, undefined2, undefined2, undefined2, n);
        }
        function before(n, func) {
          var result2;
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          n = toInteger(n);
          return function() {
            if (--n > 0) {
              result2 = func.apply(this, arguments);
            }
            if (n <= 1) {
              func = undefined2;
            }
            return result2;
          };
        }
        var bind = baseRest(function(func, thisArg, partials) {
          var bitmask = WRAP_BIND_FLAG;
          if (partials.length) {
            var holders = replaceHolders(partials, getHolder(bind));
            bitmask |= WRAP_PARTIAL_FLAG;
          }
          return createWrap(func, bitmask, thisArg, partials, holders);
        });
        var bindKey = baseRest(function(object, key, partials) {
          var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
          if (partials.length) {
            var holders = replaceHolders(partials, getHolder(bindKey));
            bitmask |= WRAP_PARTIAL_FLAG;
          }
          return createWrap(key, bitmask, object, partials, holders);
        });
        function curry(func, arity, guard) {
          arity = guard ? undefined2 : arity;
          var result2 = createWrap(func, WRAP_CURRY_FLAG, undefined2, undefined2, undefined2, undefined2, undefined2, arity);
          result2.placeholder = curry.placeholder;
          return result2;
        }
        function curryRight(func, arity, guard) {
          arity = guard ? undefined2 : arity;
          var result2 = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined2, undefined2, undefined2, undefined2, undefined2, arity);
          result2.placeholder = curryRight.placeholder;
          return result2;
        }
        function debounce(func, wait, options) {
          var lastArgs, lastThis, maxWait, result2, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          wait = toNumber(wait) || 0;
          if (isObject(options)) {
            leading = !!options.leading;
            maxing = "maxWait" in options;
            maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
            trailing = "trailing" in options ? !!options.trailing : trailing;
          }
          function invokeFunc(time) {
            var args = lastArgs, thisArg = lastThis;
            lastArgs = lastThis = undefined2;
            lastInvokeTime = time;
            result2 = func.apply(thisArg, args);
            return result2;
          }
          function leadingEdge(time) {
            lastInvokeTime = time;
            timerId = setTimeout2(timerExpired, wait);
            return leading ? invokeFunc(time) : result2;
          }
          function remainingWait(time) {
            var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
            return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
          }
          function shouldInvoke(time) {
            var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
            return lastCallTime === undefined2 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
          }
          function timerExpired() {
            var time = now();
            if (shouldInvoke(time)) {
              return trailingEdge(time);
            }
            timerId = setTimeout2(timerExpired, remainingWait(time));
          }
          function trailingEdge(time) {
            timerId = undefined2;
            if (trailing && lastArgs) {
              return invokeFunc(time);
            }
            lastArgs = lastThis = undefined2;
            return result2;
          }
          function cancel() {
            if (timerId !== undefined2) {
              clearTimeout(timerId);
            }
            lastInvokeTime = 0;
            lastArgs = lastCallTime = lastThis = timerId = undefined2;
          }
          function flush() {
            return timerId === undefined2 ? result2 : trailingEdge(now());
          }
          function debounced() {
            var time = now(), isInvoking = shouldInvoke(time);
            lastArgs = arguments;
            lastThis = this;
            lastCallTime = time;
            if (isInvoking) {
              if (timerId === undefined2) {
                return leadingEdge(lastCallTime);
              }
              if (maxing) {
                clearTimeout(timerId);
                timerId = setTimeout2(timerExpired, wait);
                return invokeFunc(lastCallTime);
              }
            }
            if (timerId === undefined2) {
              timerId = setTimeout2(timerExpired, wait);
            }
            return result2;
          }
          debounced.cancel = cancel;
          debounced.flush = flush;
          return debounced;
        }
        var defer = baseRest(function(func, args) {
          return baseDelay(func, 1, args);
        });
        var delay = baseRest(function(func, wait, args) {
          return baseDelay(func, toNumber(wait) || 0, args);
        });
        function flip(func) {
          return createWrap(func, WRAP_FLIP_FLAG);
        }
        function memoize(func, resolver) {
          if (typeof func != "function" || resolver != null && typeof resolver != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          var memoized = function() {
            var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
            if (cache.has(key)) {
              return cache.get(key);
            }
            var result2 = func.apply(this, args);
            memoized.cache = cache.set(key, result2) || cache;
            return result2;
          };
          memoized.cache = new (memoize.Cache || MapCache)();
          return memoized;
        }
        memoize.Cache = MapCache;
        function negate(predicate) {
          if (typeof predicate != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          return function() {
            var args = arguments;
            switch (args.length) {
              case 0:
                return !predicate.call(this);
              case 1:
                return !predicate.call(this, args[0]);
              case 2:
                return !predicate.call(this, args[0], args[1]);
              case 3:
                return !predicate.call(this, args[0], args[1], args[2]);
            }
            return !predicate.apply(this, args);
          };
        }
        function once(func) {
          return before(2, func);
        }
        var overArgs = castRest(function(func, transforms) {
          transforms = transforms.length == 1 && isArray(transforms[0]) ? arrayMap(transforms[0], baseUnary(getIteratee())) : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));
          var funcsLength = transforms.length;
          return baseRest(function(args) {
            var index = -1, length = nativeMin(args.length, funcsLength);
            while (++index < length) {
              args[index] = transforms[index].call(this, args[index]);
            }
            return apply(func, this, args);
          });
        });
        var partial = baseRest(function(func, partials) {
          var holders = replaceHolders(partials, getHolder(partial));
          return createWrap(func, WRAP_PARTIAL_FLAG, undefined2, partials, holders);
        });
        var partialRight = baseRest(function(func, partials) {
          var holders = replaceHolders(partials, getHolder(partialRight));
          return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined2, partials, holders);
        });
        var rearg = flatRest(function(func, indexes) {
          return createWrap(func, WRAP_REARG_FLAG, undefined2, undefined2, undefined2, indexes);
        });
        function rest(func, start) {
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          start = start === undefined2 ? start : toInteger(start);
          return baseRest(func, start);
        }
        function spread(func, start) {
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          start = start == null ? 0 : nativeMax(toInteger(start), 0);
          return baseRest(function(args) {
            var array = args[start], otherArgs = castSlice(args, 0, start);
            if (array) {
              arrayPush(otherArgs, array);
            }
            return apply(func, this, otherArgs);
          });
        }
        function throttle(func, wait, options) {
          var leading = true, trailing = true;
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          if (isObject(options)) {
            leading = "leading" in options ? !!options.leading : leading;
            trailing = "trailing" in options ? !!options.trailing : trailing;
          }
          return debounce(func, wait, {
            "leading": leading,
            "maxWait": wait,
            "trailing": trailing
          });
        }
        function unary(func) {
          return ary(func, 1);
        }
        function wrap(value, wrapper) {
          return partial(castFunction(wrapper), value);
        }
        function castArray() {
          if (!arguments.length) {
            return [];
          }
          var value = arguments[0];
          return isArray(value) ? value : [value];
        }
        function clone(value) {
          return baseClone(value, CLONE_SYMBOLS_FLAG);
        }
        function cloneWith(value, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
        }
        function cloneDeep(value) {
          return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
        }
        function cloneDeepWith(value, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
        }
        function conformsTo(object, source) {
          return source == null || baseConformsTo(object, source, keys(source));
        }
        function eq(value, other) {
          return value === other || value !== value && other !== other;
        }
        var gt = createRelationalOperation(baseGt);
        var gte = createRelationalOperation(function(value, other) {
          return value >= other;
        });
        var isArguments = baseIsArguments(function() {
          return arguments;
        }()) ? baseIsArguments : function(value) {
          return isObjectLike(value) && hasOwnProperty.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
        };
        var isArray = Array2.isArray;
        var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;
        function isArrayLike(value) {
          return value != null && isLength(value.length) && !isFunction2(value);
        }
        function isArrayLikeObject(value) {
          return isObjectLike(value) && isArrayLike(value);
        }
        function isBoolean(value) {
          return value === true || value === false || isObjectLike(value) && baseGetTag(value) == boolTag;
        }
        var isBuffer = nativeIsBuffer || stubFalse;
        var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;
        function isElement(value) {
          return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
        }
        function isEmpty2(value) {
          if (value == null) {
            return true;
          }
          if (isArrayLike(value) && (isArray(value) || typeof value == "string" || typeof value.splice == "function" || isBuffer(value) || isTypedArray(value) || isArguments(value))) {
            return !value.length;
          }
          var tag = getTag(value);
          if (tag == mapTag || tag == setTag) {
            return !value.size;
          }
          if (isPrototype(value)) {
            return !baseKeys(value).length;
          }
          for (var key in value) {
            if (hasOwnProperty.call(value, key)) {
              return false;
            }
          }
          return true;
        }
        function isEqual(value, other) {
          return baseIsEqual(value, other);
        }
        function isEqualWith(value, other, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          var result2 = customizer ? customizer(value, other) : undefined2;
          return result2 === undefined2 ? baseIsEqual(value, other, undefined2, customizer) : !!result2;
        }
        function isError(value) {
          if (!isObjectLike(value)) {
            return false;
          }
          var tag = baseGetTag(value);
          return tag == errorTag || tag == domExcTag || typeof value.message == "string" && typeof value.name == "string" && !isPlainObject(value);
        }
        function isFinite2(value) {
          return typeof value == "number" && nativeIsFinite(value);
        }
        function isFunction2(value) {
          if (!isObject(value)) {
            return false;
          }
          var tag = baseGetTag(value);
          return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
        }
        function isInteger(value) {
          return typeof value == "number" && value == toInteger(value);
        }
        function isLength(value) {
          return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
        }
        function isObject(value) {
          var type = typeof value;
          return value != null && (type == "object" || type == "function");
        }
        function isObjectLike(value) {
          return value != null && typeof value == "object";
        }
        var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
        function isMatch(object, source) {
          return object === source || baseIsMatch(object, source, getMatchData(source));
        }
        function isMatchWith(object, source, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          return baseIsMatch(object, source, getMatchData(source), customizer);
        }
        function isNaN2(value) {
          return isNumber(value) && value != +value;
        }
        function isNative(value) {
          if (isMaskable(value)) {
            throw new Error2(CORE_ERROR_TEXT);
          }
          return baseIsNative(value);
        }
        function isNull(value) {
          return value === null;
        }
        function isNil(value) {
          return value == null;
        }
        function isNumber(value) {
          return typeof value == "number" || isObjectLike(value) && baseGetTag(value) == numberTag;
        }
        function isPlainObject(value) {
          if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
            return false;
          }
          var proto = getPrototype(value);
          if (proto === null) {
            return true;
          }
          var Ctor = hasOwnProperty.call(proto, "constructor") && proto.constructor;
          return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
        }
        var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;
        function isSafeInteger(value) {
          return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
        }
        var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
        function isString2(value) {
          return typeof value == "string" || !isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag;
        }
        function isSymbol(value) {
          return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag;
        }
        var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
        function isUndefined(value) {
          return value === undefined2;
        }
        function isWeakMap(value) {
          return isObjectLike(value) && getTag(value) == weakMapTag;
        }
        function isWeakSet(value) {
          return isObjectLike(value) && baseGetTag(value) == weakSetTag;
        }
        var lt = createRelationalOperation(baseLt);
        var lte = createRelationalOperation(function(value, other) {
          return value <= other;
        });
        function toArray(value) {
          if (!value) {
            return [];
          }
          if (isArrayLike(value)) {
            return isString2(value) ? stringToArray(value) : copyArray(value);
          }
          if (symIterator && value[symIterator]) {
            return iteratorToArray(value[symIterator]());
          }
          var tag = getTag(value), func = tag == mapTag ? mapToArray : tag == setTag ? setToArray : values;
          return func(value);
        }
        function toFinite(value) {
          if (!value) {
            return value === 0 ? value : 0;
          }
          value = toNumber(value);
          if (value === INFINITY || value === -INFINITY) {
            var sign = value < 0 ? -1 : 1;
            return sign * MAX_INTEGER;
          }
          return value === value ? value : 0;
        }
        function toInteger(value) {
          var result2 = toFinite(value), remainder = result2 % 1;
          return result2 === result2 ? remainder ? result2 - remainder : result2 : 0;
        }
        function toLength(value) {
          return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
        }
        function toNumber(value) {
          if (typeof value == "number") {
            return value;
          }
          if (isSymbol(value)) {
            return NAN;
          }
          if (isObject(value)) {
            var other = typeof value.valueOf == "function" ? value.valueOf() : value;
            value = isObject(other) ? other + "" : other;
          }
          if (typeof value != "string") {
            return value === 0 ? value : +value;
          }
          value = baseTrim(value);
          var isBinary = reIsBinary.test(value);
          return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
        }
        function toPlainObject(value) {
          return copyObject(value, keysIn(value));
        }
        function toSafeInteger(value) {
          return value ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER) : value === 0 ? value : 0;
        }
        function toString(value) {
          return value == null ? "" : baseToString(value);
        }
        var assign2 = createAssigner(function(object, source) {
          if (isPrototype(source) || isArrayLike(source)) {
            copyObject(source, keys(source), object);
            return;
          }
          for (var key in source) {
            if (hasOwnProperty.call(source, key)) {
              assignValue(object, key, source[key]);
            }
          }
        });
        var assignIn = createAssigner(function(object, source) {
          copyObject(source, keysIn(source), object);
        });
        var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
          copyObject(source, keysIn(source), object, customizer);
        });
        var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
          copyObject(source, keys(source), object, customizer);
        });
        var at = flatRest(baseAt);
        function create(prototype, properties) {
          var result2 = baseCreate(prototype);
          return properties == null ? result2 : baseAssign(result2, properties);
        }
        var defaults = baseRest(function(object, sources) {
          object = Object2(object);
          var index = -1;
          var length = sources.length;
          var guard = length > 2 ? sources[2] : undefined2;
          if (guard && isIterateeCall(sources[0], sources[1], guard)) {
            length = 1;
          }
          while (++index < length) {
            var source = sources[index];
            var props = keysIn(source);
            var propsIndex = -1;
            var propsLength = props.length;
            while (++propsIndex < propsLength) {
              var key = props[propsIndex];
              var value = object[key];
              if (value === undefined2 || eq(value, objectProto[key]) && !hasOwnProperty.call(object, key)) {
                object[key] = source[key];
              }
            }
          }
          return object;
        });
        var defaultsDeep = baseRest(function(args) {
          args.push(undefined2, customDefaultsMerge);
          return apply(mergeWith, undefined2, args);
        });
        function findKey(object, predicate) {
          return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
        }
        function findLastKey(object, predicate) {
          return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
        }
        function forIn(object, iteratee2) {
          return object == null ? object : baseFor(object, getIteratee(iteratee2, 3), keysIn);
        }
        function forInRight(object, iteratee2) {
          return object == null ? object : baseForRight(object, getIteratee(iteratee2, 3), keysIn);
        }
        function forOwn(object, iteratee2) {
          return object && baseForOwn(object, getIteratee(iteratee2, 3));
        }
        function forOwnRight(object, iteratee2) {
          return object && baseForOwnRight(object, getIteratee(iteratee2, 3));
        }
        function functions(object) {
          return object == null ? [] : baseFunctions(object, keys(object));
        }
        function functionsIn(object) {
          return object == null ? [] : baseFunctions(object, keysIn(object));
        }
        function get2(object, path, defaultValue) {
          var result2 = object == null ? undefined2 : baseGet(object, path);
          return result2 === undefined2 ? defaultValue : result2;
        }
        function has(object, path) {
          return object != null && hasPath(object, path, baseHas);
        }
        function hasIn(object, path) {
          return object != null && hasPath(object, path, baseHasIn);
        }
        var invert = createInverter(function(result2, value, key) {
          if (value != null && typeof value.toString != "function") {
            value = nativeObjectToString.call(value);
          }
          result2[value] = key;
        }, constant(identity));
        var invertBy = createInverter(function(result2, value, key) {
          if (value != null && typeof value.toString != "function") {
            value = nativeObjectToString.call(value);
          }
          if (hasOwnProperty.call(result2, value)) {
            result2[value].push(key);
          } else {
            result2[value] = [key];
          }
        }, getIteratee);
        var invoke = baseRest(baseInvoke);
        function keys(object) {
          return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
        }
        function keysIn(object) {
          return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
        }
        function mapKeys(object, iteratee2) {
          var result2 = {};
          iteratee2 = getIteratee(iteratee2, 3);
          baseForOwn(object, function(value, key, object2) {
            baseAssignValue(result2, iteratee2(value, key, object2), value);
          });
          return result2;
        }
        function mapValues(object, iteratee2) {
          var result2 = {};
          iteratee2 = getIteratee(iteratee2, 3);
          baseForOwn(object, function(value, key, object2) {
            baseAssignValue(result2, key, iteratee2(value, key, object2));
          });
          return result2;
        }
        var merge = createAssigner(function(object, source, srcIndex) {
          baseMerge(object, source, srcIndex);
        });
        var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
          baseMerge(object, source, srcIndex, customizer);
        });
        var omit = flatRest(function(object, paths) {
          var result2 = {};
          if (object == null) {
            return result2;
          }
          var isDeep = false;
          paths = arrayMap(paths, function(path) {
            path = castPath(path, object);
            isDeep || (isDeep = path.length > 1);
            return path;
          });
          copyObject(object, getAllKeysIn(object), result2);
          if (isDeep) {
            result2 = baseClone(result2, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
          }
          var length = paths.length;
          while (length--) {
            baseUnset(result2, paths[length]);
          }
          return result2;
        });
        function omitBy(object, predicate) {
          return pickBy(object, negate(getIteratee(predicate)));
        }
        var pick = flatRest(function(object, paths) {
          return object == null ? {} : basePick(object, paths);
        });
        function pickBy(object, predicate) {
          if (object == null) {
            return {};
          }
          var props = arrayMap(getAllKeysIn(object), function(prop) {
            return [prop];
          });
          predicate = getIteratee(predicate);
          return basePickBy(object, props, function(value, path) {
            return predicate(value, path[0]);
          });
        }
        function result(object, path, defaultValue) {
          path = castPath(path, object);
          var index = -1, length = path.length;
          if (!length) {
            length = 1;
            object = undefined2;
          }
          while (++index < length) {
            var value = object == null ? undefined2 : object[toKey(path[index])];
            if (value === undefined2) {
              index = length;
              value = defaultValue;
            }
            object = isFunction2(value) ? value.call(object) : value;
          }
          return object;
        }
        function set2(object, path, value) {
          return object == null ? object : baseSet(object, path, value);
        }
        function setWith(object, path, value, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          return object == null ? object : baseSet(object, path, value, customizer);
        }
        var toPairs = createToPairs(keys);
        var toPairsIn = createToPairs(keysIn);
        function transform(object, iteratee2, accumulator) {
          var isArr = isArray(object), isArrLike = isArr || isBuffer(object) || isTypedArray(object);
          iteratee2 = getIteratee(iteratee2, 4);
          if (accumulator == null) {
            var Ctor = object && object.constructor;
            if (isArrLike) {
              accumulator = isArr ? new Ctor() : [];
            } else if (isObject(object)) {
              accumulator = isFunction2(Ctor) ? baseCreate(getPrototype(object)) : {};
            } else {
              accumulator = {};
            }
          }
          (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object2) {
            return iteratee2(accumulator, value, index, object2);
          });
          return accumulator;
        }
        function unset(object, path) {
          return object == null ? true : baseUnset(object, path);
        }
        function update(object, path, updater) {
          return object == null ? object : baseUpdate(object, path, castFunction(updater));
        }
        function updateWith(object, path, updater, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
        }
        function values(object) {
          return object == null ? [] : baseValues(object, keys(object));
        }
        function valuesIn(object) {
          return object == null ? [] : baseValues(object, keysIn(object));
        }
        function clamp(number, lower, upper) {
          if (upper === undefined2) {
            upper = lower;
            lower = undefined2;
          }
          if (upper !== undefined2) {
            upper = toNumber(upper);
            upper = upper === upper ? upper : 0;
          }
          if (lower !== undefined2) {
            lower = toNumber(lower);
            lower = lower === lower ? lower : 0;
          }
          return baseClamp(toNumber(number), lower, upper);
        }
        function inRange(number, start, end) {
          start = toFinite(start);
          if (end === undefined2) {
            end = start;
            start = 0;
          } else {
            end = toFinite(end);
          }
          number = toNumber(number);
          return baseInRange(number, start, end);
        }
        function random(lower, upper, floating) {
          if (floating && typeof floating != "boolean" && isIterateeCall(lower, upper, floating)) {
            upper = floating = undefined2;
          }
          if (floating === undefined2) {
            if (typeof upper == "boolean") {
              floating = upper;
              upper = undefined2;
            } else if (typeof lower == "boolean") {
              floating = lower;
              lower = undefined2;
            }
          }
          if (lower === undefined2 && upper === undefined2) {
            lower = 0;
            upper = 1;
          } else {
            lower = toFinite(lower);
            if (upper === undefined2) {
              upper = lower;
              lower = 0;
            } else {
              upper = toFinite(upper);
            }
          }
          if (lower > upper) {
            var temp = lower;
            lower = upper;
            upper = temp;
          }
          if (floating || lower % 1 || upper % 1) {
            var rand3 = nativeRandom();
            return nativeMin(lower + rand3 * (upper - lower + freeParseFloat("1e-" + ((rand3 + "").length - 1))), upper);
          }
          return baseRandom(lower, upper);
        }
        var camelCase = createCompounder(function(result2, word, index) {
          word = word.toLowerCase();
          return result2 + (index ? capitalize3(word) : word);
        });
        function capitalize3(string) {
          return upperFirst(toString(string).toLowerCase());
        }
        function deburr(string) {
          string = toString(string);
          return string && string.replace(reLatin, deburrLetter).replace(reComboMark, "");
        }
        function endsWith(string, target, position) {
          string = toString(string);
          target = baseToString(target);
          var length = string.length;
          position = position === undefined2 ? length : baseClamp(toInteger(position), 0, length);
          var end = position;
          position -= target.length;
          return position >= 0 && string.slice(position, end) == target;
        }
        function escape(string) {
          string = toString(string);
          return string && reHasUnescapedHtml.test(string) ? string.replace(reUnescapedHtml, escapeHtmlChar) : string;
        }
        function escapeRegExp(string) {
          string = toString(string);
          return string && reHasRegExpChar.test(string) ? string.replace(reRegExpChar, "\\$&") : string;
        }
        var kebabCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? "-" : "") + word.toLowerCase();
        });
        var lowerCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? " " : "") + word.toLowerCase();
        });
        var lowerFirst3 = createCaseFirst("toLowerCase");
        function pad(string, length, chars) {
          string = toString(string);
          length = toInteger(length);
          var strLength = length ? stringSize(string) : 0;
          if (!length || strLength >= length) {
            return string;
          }
          var mid = (length - strLength) / 2;
          return createPadding(nativeFloor(mid), chars) + string + createPadding(nativeCeil(mid), chars);
        }
        function padEnd(string, length, chars) {
          string = toString(string);
          length = toInteger(length);
          var strLength = length ? stringSize(string) : 0;
          return length && strLength < length ? string + createPadding(length - strLength, chars) : string;
        }
        function padStart(string, length, chars) {
          string = toString(string);
          length = toInteger(length);
          var strLength = length ? stringSize(string) : 0;
          return length && strLength < length ? createPadding(length - strLength, chars) + string : string;
        }
        function parseInt2(string, radix, guard) {
          if (guard || radix == null) {
            radix = 0;
          } else if (radix) {
            radix = +radix;
          }
          return nativeParseInt(toString(string).replace(reTrimStart, ""), radix || 0);
        }
        function repeat(string, n, guard) {
          if (guard ? isIterateeCall(string, n, guard) : n === undefined2) {
            n = 1;
          } else {
            n = toInteger(n);
          }
          return baseRepeat(toString(string), n);
        }
        function replace() {
          var args = arguments, string = toString(args[0]);
          return args.length < 3 ? string : string.replace(args[1], args[2]);
        }
        var snakeCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? "_" : "") + word.toLowerCase();
        });
        function split(string, separator, limit) {
          if (limit && typeof limit != "number" && isIterateeCall(string, separator, limit)) {
            separator = limit = undefined2;
          }
          limit = limit === undefined2 ? MAX_ARRAY_LENGTH : limit >>> 0;
          if (!limit) {
            return [];
          }
          string = toString(string);
          if (string && (typeof separator == "string" || separator != null && !isRegExp(separator))) {
            separator = baseToString(separator);
            if (!separator && hasUnicode(string)) {
              return castSlice(stringToArray(string), 0, limit);
            }
          }
          return string.split(separator, limit);
        }
        var startCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? " " : "") + upperFirst(word);
        });
        function startsWith(string, target, position) {
          string = toString(string);
          position = position == null ? 0 : baseClamp(toInteger(position), 0, string.length);
          target = baseToString(target);
          return string.slice(position, position + target.length) == target;
        }
        function template(string, options, guard) {
          var settings = lodash.templateSettings;
          if (guard && isIterateeCall(string, options, guard)) {
            options = undefined2;
          }
          string = toString(string);
          options = assignInWith({}, options, settings, customDefaultsAssignIn);
          var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn), importsKeys = keys(imports), importsValues = baseValues(imports, importsKeys);
          var isEscaping, isEvaluating, index = 0, interpolate = options.interpolate || reNoMatch, source = "__p += '";
          var reDelimiters = RegExp2((options.escape || reNoMatch).source + "|" + interpolate.source + "|" + (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + "|" + (options.evaluate || reNoMatch).source + "|$", "g");
          var sourceURL = "//# sourceURL=" + (hasOwnProperty.call(options, "sourceURL") ? (options.sourceURL + "").replace(/\s/g, " ") : "lodash.templateSources[" + ++templateCounter + "]") + "\n";
          string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
            interpolateValue || (interpolateValue = esTemplateValue);
            source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);
            if (escapeValue) {
              isEscaping = true;
              source += "' +\n__e(" + escapeValue + ") +\n'";
            }
            if (evaluateValue) {
              isEvaluating = true;
              source += "';\n" + evaluateValue + ";\n__p += '";
            }
            if (interpolateValue) {
              source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
            }
            index = offset + match.length;
            return match;
          });
          source += "';\n";
          var variable = hasOwnProperty.call(options, "variable") && options.variable;
          if (!variable) {
            source = "with (obj) {\n" + source + "\n}\n";
          } else if (reForbiddenIdentifierChars.test(variable)) {
            throw new Error2(INVALID_TEMPL_VAR_ERROR_TEXT);
          }
          source = (isEvaluating ? source.replace(reEmptyStringLeading, "") : source).replace(reEmptyStringMiddle, "$1").replace(reEmptyStringTrailing, "$1;");
          source = "function(" + (variable || "obj") + ") {\n" + (variable ? "" : "obj || (obj = {});\n") + "var __t, __p = ''" + (isEscaping ? ", __e = _.escape" : "") + (isEvaluating ? ", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n" : ";\n") + source + "return __p\n}";
          var result2 = attempt(function() {
            return Function2(importsKeys, sourceURL + "return " + source).apply(undefined2, importsValues);
          });
          result2.source = source;
          if (isError(result2)) {
            throw result2;
          }
          return result2;
        }
        function toLower(value) {
          return toString(value).toLowerCase();
        }
        function toUpper(value) {
          return toString(value).toUpperCase();
        }
        function trim(string, chars, guard) {
          string = toString(string);
          if (string && (guard || chars === undefined2)) {
            return baseTrim(string);
          }
          if (!string || !(chars = baseToString(chars))) {
            return string;
          }
          var strSymbols = stringToArray(string), chrSymbols = stringToArray(chars), start = charsStartIndex(strSymbols, chrSymbols), end = charsEndIndex(strSymbols, chrSymbols) + 1;
          return castSlice(strSymbols, start, end).join("");
        }
        function trimEnd(string, chars, guard) {
          string = toString(string);
          if (string && (guard || chars === undefined2)) {
            return string.slice(0, trimmedEndIndex(string) + 1);
          }
          if (!string || !(chars = baseToString(chars))) {
            return string;
          }
          var strSymbols = stringToArray(string), end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;
          return castSlice(strSymbols, 0, end).join("");
        }
        function trimStart(string, chars, guard) {
          string = toString(string);
          if (string && (guard || chars === undefined2)) {
            return string.replace(reTrimStart, "");
          }
          if (!string || !(chars = baseToString(chars))) {
            return string;
          }
          var strSymbols = stringToArray(string), start = charsStartIndex(strSymbols, stringToArray(chars));
          return castSlice(strSymbols, start).join("");
        }
        function truncate(string, options) {
          var length = DEFAULT_TRUNC_LENGTH, omission = DEFAULT_TRUNC_OMISSION;
          if (isObject(options)) {
            var separator = "separator" in options ? options.separator : separator;
            length = "length" in options ? toInteger(options.length) : length;
            omission = "omission" in options ? baseToString(options.omission) : omission;
          }
          string = toString(string);
          var strLength = string.length;
          if (hasUnicode(string)) {
            var strSymbols = stringToArray(string);
            strLength = strSymbols.length;
          }
          if (length >= strLength) {
            return string;
          }
          var end = length - stringSize(omission);
          if (end < 1) {
            return omission;
          }
          var result2 = strSymbols ? castSlice(strSymbols, 0, end).join("") : string.slice(0, end);
          if (separator === undefined2) {
            return result2 + omission;
          }
          if (strSymbols) {
            end += result2.length - end;
          }
          if (isRegExp(separator)) {
            if (string.slice(end).search(separator)) {
              var match, substring = result2;
              if (!separator.global) {
                separator = RegExp2(separator.source, toString(reFlags.exec(separator)) + "g");
              }
              separator.lastIndex = 0;
              while (match = separator.exec(substring)) {
                var newEnd = match.index;
              }
              result2 = result2.slice(0, newEnd === undefined2 ? end : newEnd);
            }
          } else if (string.indexOf(baseToString(separator), end) != end) {
            var index = result2.lastIndexOf(separator);
            if (index > -1) {
              result2 = result2.slice(0, index);
            }
          }
          return result2 + omission;
        }
        function unescape(string) {
          string = toString(string);
          return string && reHasEscapedHtml.test(string) ? string.replace(reEscapedHtml, unescapeHtmlChar) : string;
        }
        var upperCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? " " : "") + word.toUpperCase();
        });
        var upperFirst = createCaseFirst("toUpperCase");
        function words(string, pattern, guard) {
          string = toString(string);
          pattern = guard ? undefined2 : pattern;
          if (pattern === undefined2) {
            return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
          }
          return string.match(pattern) || [];
        }
        var attempt = baseRest(function(func, args) {
          try {
            return apply(func, undefined2, args);
          } catch (e) {
            return isError(e) ? e : new Error2(e);
          }
        });
        var bindAll = flatRest(function(object, methodNames) {
          arrayEach(methodNames, function(key) {
            key = toKey(key);
            baseAssignValue(object, key, bind(object[key], object));
          });
          return object;
        });
        function cond(pairs) {
          var length = pairs == null ? 0 : pairs.length, toIteratee = getIteratee();
          pairs = !length ? [] : arrayMap(pairs, function(pair) {
            if (typeof pair[1] != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            return [toIteratee(pair[0]), pair[1]];
          });
          return baseRest(function(args) {
            var index = -1;
            while (++index < length) {
              var pair = pairs[index];
              if (apply(pair[0], this, args)) {
                return apply(pair[1], this, args);
              }
            }
          });
        }
        function conforms(source) {
          return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
        }
        function constant(value) {
          return function() {
            return value;
          };
        }
        function defaultTo(value, defaultValue) {
          return value == null || value !== value ? defaultValue : value;
        }
        var flow = createFlow();
        var flowRight = createFlow(true);
        function identity(value) {
          return value;
        }
        function iteratee(func) {
          return baseIteratee(typeof func == "function" ? func : baseClone(func, CLONE_DEEP_FLAG));
        }
        function matches(source) {
          return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
        }
        function matchesProperty(path, srcValue) {
          return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
        }
        var method = baseRest(function(path, args) {
          return function(object) {
            return baseInvoke(object, path, args);
          };
        });
        var methodOf = baseRest(function(object, args) {
          return function(path) {
            return baseInvoke(object, path, args);
          };
        });
        function mixin(object, source, options) {
          var props = keys(source), methodNames = baseFunctions(source, props);
          if (options == null && !(isObject(source) && (methodNames.length || !props.length))) {
            options = source;
            source = object;
            object = this;
            methodNames = baseFunctions(source, keys(source));
          }
          var chain2 = !(isObject(options) && "chain" in options) || !!options.chain, isFunc = isFunction2(object);
          arrayEach(methodNames, function(methodName) {
            var func = source[methodName];
            object[methodName] = func;
            if (isFunc) {
              object.prototype[methodName] = function() {
                var chainAll = this.__chain__;
                if (chain2 || chainAll) {
                  var result2 = object(this.__wrapped__), actions = result2.__actions__ = copyArray(this.__actions__);
                  actions.push({ "func": func, "args": arguments, "thisArg": object });
                  result2.__chain__ = chainAll;
                  return result2;
                }
                return func.apply(object, arrayPush([this.value()], arguments));
              };
            }
          });
          return object;
        }
        function noConflict() {
          if (root._ === this) {
            root._ = oldDash;
          }
          return this;
        }
        function noop() {
        }
        function nthArg(n) {
          n = toInteger(n);
          return baseRest(function(args) {
            return baseNth(args, n);
          });
        }
        var over = createOver(arrayMap);
        var overEvery = createOver(arrayEvery);
        var overSome = createOver(arraySome);
        function property(path) {
          return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
        }
        function propertyOf(object) {
          return function(path) {
            return object == null ? undefined2 : baseGet(object, path);
          };
        }
        var range = createRange();
        var rangeRight = createRange(true);
        function stubArray() {
          return [];
        }
        function stubFalse() {
          return false;
        }
        function stubObject() {
          return {};
        }
        function stubString() {
          return "";
        }
        function stubTrue() {
          return true;
        }
        function times(n, iteratee2) {
          n = toInteger(n);
          if (n < 1 || n > MAX_SAFE_INTEGER) {
            return [];
          }
          var index = MAX_ARRAY_LENGTH, length = nativeMin(n, MAX_ARRAY_LENGTH);
          iteratee2 = getIteratee(iteratee2);
          n -= MAX_ARRAY_LENGTH;
          var result2 = baseTimes(length, iteratee2);
          while (++index < n) {
            iteratee2(index);
          }
          return result2;
        }
        function toPath(value) {
          if (isArray(value)) {
            return arrayMap(value, toKey);
          }
          return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
        }
        function uniqueId(prefix) {
          var id = ++idCounter;
          return toString(prefix) + id;
        }
        var add = createMathOperation(function(augend, addend) {
          return augend + addend;
        }, 0);
        var ceil = createRound("ceil");
        var divide = createMathOperation(function(dividend, divisor) {
          return dividend / divisor;
        }, 1);
        var floor = createRound("floor");
        function max(array) {
          return array && array.length ? baseExtremum(array, identity, baseGt) : undefined2;
        }
        function maxBy(array, iteratee2) {
          return array && array.length ? baseExtremum(array, getIteratee(iteratee2, 2), baseGt) : undefined2;
        }
        function mean(array) {
          return baseMean(array, identity);
        }
        function meanBy(array, iteratee2) {
          return baseMean(array, getIteratee(iteratee2, 2));
        }
        function min(array) {
          return array && array.length ? baseExtremum(array, identity, baseLt) : undefined2;
        }
        function minBy(array, iteratee2) {
          return array && array.length ? baseExtremum(array, getIteratee(iteratee2, 2), baseLt) : undefined2;
        }
        var multiply = createMathOperation(function(multiplier, multiplicand) {
          return multiplier * multiplicand;
        }, 1);
        var round = createRound("round");
        var subtract = createMathOperation(function(minuend, subtrahend) {
          return minuend - subtrahend;
        }, 0);
        function sum(array) {
          return array && array.length ? baseSum(array, identity) : 0;
        }
        function sumBy(array, iteratee2) {
          return array && array.length ? baseSum(array, getIteratee(iteratee2, 2)) : 0;
        }
        lodash.after = after;
        lodash.ary = ary;
        lodash.assign = assign2;
        lodash.assignIn = assignIn;
        lodash.assignInWith = assignInWith;
        lodash.assignWith = assignWith;
        lodash.at = at;
        lodash.before = before;
        lodash.bind = bind;
        lodash.bindAll = bindAll;
        lodash.bindKey = bindKey;
        lodash.castArray = castArray;
        lodash.chain = chain;
        lodash.chunk = chunk;
        lodash.compact = compact;
        lodash.concat = concat;
        lodash.cond = cond;
        lodash.conforms = conforms;
        lodash.constant = constant;
        lodash.countBy = countBy;
        lodash.create = create;
        lodash.curry = curry;
        lodash.curryRight = curryRight;
        lodash.debounce = debounce;
        lodash.defaults = defaults;
        lodash.defaultsDeep = defaultsDeep;
        lodash.defer = defer;
        lodash.delay = delay;
        lodash.difference = difference;
        lodash.differenceBy = differenceBy;
        lodash.differenceWith = differenceWith;
        lodash.drop = drop;
        lodash.dropRight = dropRight;
        lodash.dropRightWhile = dropRightWhile;
        lodash.dropWhile = dropWhile;
        lodash.fill = fill;
        lodash.filter = filter;
        lodash.flatMap = flatMap;
        lodash.flatMapDeep = flatMapDeep;
        lodash.flatMapDepth = flatMapDepth;
        lodash.flatten = flatten;
        lodash.flattenDeep = flattenDeep;
        lodash.flattenDepth = flattenDepth;
        lodash.flip = flip;
        lodash.flow = flow;
        lodash.flowRight = flowRight;
        lodash.fromPairs = fromPairs;
        lodash.functions = functions;
        lodash.functionsIn = functionsIn;
        lodash.groupBy = groupBy;
        lodash.initial = initial;
        lodash.intersection = intersection;
        lodash.intersectionBy = intersectionBy;
        lodash.intersectionWith = intersectionWith;
        lodash.invert = invert;
        lodash.invertBy = invertBy;
        lodash.invokeMap = invokeMap;
        lodash.iteratee = iteratee;
        lodash.keyBy = keyBy;
        lodash.keys = keys;
        lodash.keysIn = keysIn;
        lodash.map = map;
        lodash.mapKeys = mapKeys;
        lodash.mapValues = mapValues;
        lodash.matches = matches;
        lodash.matchesProperty = matchesProperty;
        lodash.memoize = memoize;
        lodash.merge = merge;
        lodash.mergeWith = mergeWith;
        lodash.method = method;
        lodash.methodOf = methodOf;
        lodash.mixin = mixin;
        lodash.negate = negate;
        lodash.nthArg = nthArg;
        lodash.omit = omit;
        lodash.omitBy = omitBy;
        lodash.once = once;
        lodash.orderBy = orderBy;
        lodash.over = over;
        lodash.overArgs = overArgs;
        lodash.overEvery = overEvery;
        lodash.overSome = overSome;
        lodash.partial = partial;
        lodash.partialRight = partialRight;
        lodash.partition = partition2;
        lodash.pick = pick;
        lodash.pickBy = pickBy;
        lodash.property = property;
        lodash.propertyOf = propertyOf;
        lodash.pull = pull;
        lodash.pullAll = pullAll;
        lodash.pullAllBy = pullAllBy;
        lodash.pullAllWith = pullAllWith;
        lodash.pullAt = pullAt;
        lodash.range = range;
        lodash.rangeRight = rangeRight;
        lodash.rearg = rearg;
        lodash.reject = reject;
        lodash.remove = remove;
        lodash.rest = rest;
        lodash.reverse = reverse;
        lodash.sampleSize = sampleSize;
        lodash.set = set2;
        lodash.setWith = setWith;
        lodash.shuffle = shuffle;
        lodash.slice = slice;
        lodash.sortBy = sortBy;
        lodash.sortedUniq = sortedUniq;
        lodash.sortedUniqBy = sortedUniqBy;
        lodash.split = split;
        lodash.spread = spread;
        lodash.tail = tail;
        lodash.take = take;
        lodash.takeRight = takeRight;
        lodash.takeRightWhile = takeRightWhile;
        lodash.takeWhile = takeWhile;
        lodash.tap = tap;
        lodash.throttle = throttle;
        lodash.thru = thru;
        lodash.toArray = toArray;
        lodash.toPairs = toPairs;
        lodash.toPairsIn = toPairsIn;
        lodash.toPath = toPath;
        lodash.toPlainObject = toPlainObject;
        lodash.transform = transform;
        lodash.unary = unary;
        lodash.union = union;
        lodash.unionBy = unionBy;
        lodash.unionWith = unionWith;
        lodash.uniq = uniq;
        lodash.uniqBy = uniqBy;
        lodash.uniqWith = uniqWith;
        lodash.unset = unset;
        lodash.unzip = unzip;
        lodash.unzipWith = unzipWith;
        lodash.update = update;
        lodash.updateWith = updateWith;
        lodash.values = values;
        lodash.valuesIn = valuesIn;
        lodash.without = without;
        lodash.words = words;
        lodash.wrap = wrap;
        lodash.xor = xor;
        lodash.xorBy = xorBy;
        lodash.xorWith = xorWith;
        lodash.zip = zip;
        lodash.zipObject = zipObject;
        lodash.zipObjectDeep = zipObjectDeep;
        lodash.zipWith = zipWith;
        lodash.entries = toPairs;
        lodash.entriesIn = toPairsIn;
        lodash.extend = assignIn;
        lodash.extendWith = assignInWith;
        mixin(lodash, lodash);
        lodash.add = add;
        lodash.attempt = attempt;
        lodash.camelCase = camelCase;
        lodash.capitalize = capitalize3;
        lodash.ceil = ceil;
        lodash.clamp = clamp;
        lodash.clone = clone;
        lodash.cloneDeep = cloneDeep;
        lodash.cloneDeepWith = cloneDeepWith;
        lodash.cloneWith = cloneWith;
        lodash.conformsTo = conformsTo;
        lodash.deburr = deburr;
        lodash.defaultTo = defaultTo;
        lodash.divide = divide;
        lodash.endsWith = endsWith;
        lodash.eq = eq;
        lodash.escape = escape;
        lodash.escapeRegExp = escapeRegExp;
        lodash.every = every;
        lodash.find = find;
        lodash.findIndex = findIndex;
        lodash.findKey = findKey;
        lodash.findLast = findLast;
        lodash.findLastIndex = findLastIndex;
        lodash.findLastKey = findLastKey;
        lodash.floor = floor;
        lodash.forEach = forEach;
        lodash.forEachRight = forEachRight;
        lodash.forIn = forIn;
        lodash.forInRight = forInRight;
        lodash.forOwn = forOwn;
        lodash.forOwnRight = forOwnRight;
        lodash.get = get2;
        lodash.gt = gt;
        lodash.gte = gte;
        lodash.has = has;
        lodash.hasIn = hasIn;
        lodash.head = head;
        lodash.identity = identity;
        lodash.includes = includes;
        lodash.indexOf = indexOf;
        lodash.inRange = inRange;
        lodash.invoke = invoke;
        lodash.isArguments = isArguments;
        lodash.isArray = isArray;
        lodash.isArrayBuffer = isArrayBuffer;
        lodash.isArrayLike = isArrayLike;
        lodash.isArrayLikeObject = isArrayLikeObject;
        lodash.isBoolean = isBoolean;
        lodash.isBuffer = isBuffer;
        lodash.isDate = isDate;
        lodash.isElement = isElement;
        lodash.isEmpty = isEmpty2;
        lodash.isEqual = isEqual;
        lodash.isEqualWith = isEqualWith;
        lodash.isError = isError;
        lodash.isFinite = isFinite2;
        lodash.isFunction = isFunction2;
        lodash.isInteger = isInteger;
        lodash.isLength = isLength;
        lodash.isMap = isMap;
        lodash.isMatch = isMatch;
        lodash.isMatchWith = isMatchWith;
        lodash.isNaN = isNaN2;
        lodash.isNative = isNative;
        lodash.isNil = isNil;
        lodash.isNull = isNull;
        lodash.isNumber = isNumber;
        lodash.isObject = isObject;
        lodash.isObjectLike = isObjectLike;
        lodash.isPlainObject = isPlainObject;
        lodash.isRegExp = isRegExp;
        lodash.isSafeInteger = isSafeInteger;
        lodash.isSet = isSet;
        lodash.isString = isString2;
        lodash.isSymbol = isSymbol;
        lodash.isTypedArray = isTypedArray;
        lodash.isUndefined = isUndefined;
        lodash.isWeakMap = isWeakMap;
        lodash.isWeakSet = isWeakSet;
        lodash.join = join;
        lodash.kebabCase = kebabCase;
        lodash.last = last;
        lodash.lastIndexOf = lastIndexOf;
        lodash.lowerCase = lowerCase;
        lodash.lowerFirst = lowerFirst3;
        lodash.lt = lt;
        lodash.lte = lte;
        lodash.max = max;
        lodash.maxBy = maxBy;
        lodash.mean = mean;
        lodash.meanBy = meanBy;
        lodash.min = min;
        lodash.minBy = minBy;
        lodash.stubArray = stubArray;
        lodash.stubFalse = stubFalse;
        lodash.stubObject = stubObject;
        lodash.stubString = stubString;
        lodash.stubTrue = stubTrue;
        lodash.multiply = multiply;
        lodash.nth = nth;
        lodash.noConflict = noConflict;
        lodash.noop = noop;
        lodash.now = now;
        lodash.pad = pad;
        lodash.padEnd = padEnd;
        lodash.padStart = padStart;
        lodash.parseInt = parseInt2;
        lodash.random = random;
        lodash.reduce = reduce;
        lodash.reduceRight = reduceRight;
        lodash.repeat = repeat;
        lodash.replace = replace;
        lodash.result = result;
        lodash.round = round;
        lodash.runInContext = runInContext2;
        lodash.sample = sample;
        lodash.size = size;
        lodash.snakeCase = snakeCase;
        lodash.some = some;
        lodash.sortedIndex = sortedIndex;
        lodash.sortedIndexBy = sortedIndexBy;
        lodash.sortedIndexOf = sortedIndexOf;
        lodash.sortedLastIndex = sortedLastIndex;
        lodash.sortedLastIndexBy = sortedLastIndexBy;
        lodash.sortedLastIndexOf = sortedLastIndexOf;
        lodash.startCase = startCase;
        lodash.startsWith = startsWith;
        lodash.subtract = subtract;
        lodash.sum = sum;
        lodash.sumBy = sumBy;
        lodash.template = template;
        lodash.times = times;
        lodash.toFinite = toFinite;
        lodash.toInteger = toInteger;
        lodash.toLength = toLength;
        lodash.toLower = toLower;
        lodash.toNumber = toNumber;
        lodash.toSafeInteger = toSafeInteger;
        lodash.toString = toString;
        lodash.toUpper = toUpper;
        lodash.trim = trim;
        lodash.trimEnd = trimEnd;
        lodash.trimStart = trimStart;
        lodash.truncate = truncate;
        lodash.unescape = unescape;
        lodash.uniqueId = uniqueId;
        lodash.upperCase = upperCase;
        lodash.upperFirst = upperFirst;
        lodash.each = forEach;
        lodash.eachRight = forEachRight;
        lodash.first = head;
        mixin(lodash, function() {
          var source = {};
          baseForOwn(lodash, function(func, methodName) {
            if (!hasOwnProperty.call(lodash.prototype, methodName)) {
              source[methodName] = func;
            }
          });
          return source;
        }(), { "chain": false });
        lodash.VERSION = VERSION;
        arrayEach(["bind", "bindKey", "curry", "curryRight", "partial", "partialRight"], function(methodName) {
          lodash[methodName].placeholder = lodash;
        });
        arrayEach(["drop", "take"], function(methodName, index) {
          LazyWrapper.prototype[methodName] = function(n) {
            n = n === undefined2 ? 1 : nativeMax(toInteger(n), 0);
            var result2 = this.__filtered__ && !index ? new LazyWrapper(this) : this.clone();
            if (result2.__filtered__) {
              result2.__takeCount__ = nativeMin(n, result2.__takeCount__);
            } else {
              result2.__views__.push({
                "size": nativeMin(n, MAX_ARRAY_LENGTH),
                "type": methodName + (result2.__dir__ < 0 ? "Right" : "")
              });
            }
            return result2;
          };
          LazyWrapper.prototype[methodName + "Right"] = function(n) {
            return this.reverse()[methodName](n).reverse();
          };
        });
        arrayEach(["filter", "map", "takeWhile"], function(methodName, index) {
          var type = index + 1, isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;
          LazyWrapper.prototype[methodName] = function(iteratee2) {
            var result2 = this.clone();
            result2.__iteratees__.push({
              "iteratee": getIteratee(iteratee2, 3),
              "type": type
            });
            result2.__filtered__ = result2.__filtered__ || isFilter;
            return result2;
          };
        });
        arrayEach(["head", "last"], function(methodName, index) {
          var takeName = "take" + (index ? "Right" : "");
          LazyWrapper.prototype[methodName] = function() {
            return this[takeName](1).value()[0];
          };
        });
        arrayEach(["initial", "tail"], function(methodName, index) {
          var dropName = "drop" + (index ? "" : "Right");
          LazyWrapper.prototype[methodName] = function() {
            return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
          };
        });
        LazyWrapper.prototype.compact = function() {
          return this.filter(identity);
        };
        LazyWrapper.prototype.find = function(predicate) {
          return this.filter(predicate).head();
        };
        LazyWrapper.prototype.findLast = function(predicate) {
          return this.reverse().find(predicate);
        };
        LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
          if (typeof path == "function") {
            return new LazyWrapper(this);
          }
          return this.map(function(value) {
            return baseInvoke(value, path, args);
          });
        });
        LazyWrapper.prototype.reject = function(predicate) {
          return this.filter(negate(getIteratee(predicate)));
        };
        LazyWrapper.prototype.slice = function(start, end) {
          start = toInteger(start);
          var result2 = this;
          if (result2.__filtered__ && (start > 0 || end < 0)) {
            return new LazyWrapper(result2);
          }
          if (start < 0) {
            result2 = result2.takeRight(-start);
          } else if (start) {
            result2 = result2.drop(start);
          }
          if (end !== undefined2) {
            end = toInteger(end);
            result2 = end < 0 ? result2.dropRight(-end) : result2.take(end - start);
          }
          return result2;
        };
        LazyWrapper.prototype.takeRightWhile = function(predicate) {
          return this.reverse().takeWhile(predicate).reverse();
        };
        LazyWrapper.prototype.toArray = function() {
          return this.take(MAX_ARRAY_LENGTH);
        };
        baseForOwn(LazyWrapper.prototype, function(func, methodName) {
          var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName), isTaker = /^(?:head|last)$/.test(methodName), lodashFunc = lodash[isTaker ? "take" + (methodName == "last" ? "Right" : "") : methodName], retUnwrapped = isTaker || /^find/.test(methodName);
          if (!lodashFunc) {
            return;
          }
          lodash.prototype[methodName] = function() {
            var value = this.__wrapped__, args = isTaker ? [1] : arguments, isLazy = value instanceof LazyWrapper, iteratee2 = args[0], useLazy = isLazy || isArray(value);
            var interceptor = function(value2) {
              var result3 = lodashFunc.apply(lodash, arrayPush([value2], args));
              return isTaker && chainAll ? result3[0] : result3;
            };
            if (useLazy && checkIteratee && typeof iteratee2 == "function" && iteratee2.length != 1) {
              isLazy = useLazy = false;
            }
            var chainAll = this.__chain__, isHybrid = !!this.__actions__.length, isUnwrapped = retUnwrapped && !chainAll, onlyLazy = isLazy && !isHybrid;
            if (!retUnwrapped && useLazy) {
              value = onlyLazy ? value : new LazyWrapper(this);
              var result2 = func.apply(value, args);
              result2.__actions__.push({ "func": thru, "args": [interceptor], "thisArg": undefined2 });
              return new LodashWrapper(result2, chainAll);
            }
            if (isUnwrapped && onlyLazy) {
              return func.apply(this, args);
            }
            result2 = this.thru(interceptor);
            return isUnwrapped ? isTaker ? result2.value()[0] : result2.value() : result2;
          };
        });
        arrayEach(["pop", "push", "shift", "sort", "splice", "unshift"], function(methodName) {
          var func = arrayProto[methodName], chainName = /^(?:push|sort|unshift)$/.test(methodName) ? "tap" : "thru", retUnwrapped = /^(?:pop|shift)$/.test(methodName);
          lodash.prototype[methodName] = function() {
            var args = arguments;
            if (retUnwrapped && !this.__chain__) {
              var value = this.value();
              return func.apply(isArray(value) ? value : [], args);
            }
            return this[chainName](function(value2) {
              return func.apply(isArray(value2) ? value2 : [], args);
            });
          };
        });
        baseForOwn(LazyWrapper.prototype, function(func, methodName) {
          var lodashFunc = lodash[methodName];
          if (lodashFunc) {
            var key = lodashFunc.name + "";
            if (!hasOwnProperty.call(realNames, key)) {
              realNames[key] = [];
            }
            realNames[key].push({ "name": methodName, "func": lodashFunc });
          }
        });
        realNames[createHybrid(undefined2, WRAP_BIND_KEY_FLAG).name] = [{
          "name": "wrapper",
          "func": undefined2
        }];
        LazyWrapper.prototype.clone = lazyClone;
        LazyWrapper.prototype.reverse = lazyReverse;
        LazyWrapper.prototype.value = lazyValue;
        lodash.prototype.at = wrapperAt;
        lodash.prototype.chain = wrapperChain;
        lodash.prototype.commit = wrapperCommit;
        lodash.prototype.next = wrapperNext;
        lodash.prototype.plant = wrapperPlant;
        lodash.prototype.reverse = wrapperReverse;
        lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;
        lodash.prototype.first = lodash.prototype.head;
        if (symIterator) {
          lodash.prototype[symIterator] = wrapperToIterator;
        }
        return lodash;
      };
      var _ = runInContext();
      if (typeof define == "function" && typeof define.amd == "object" && define.amd) {
        root._ = _;
        define(function() {
          return _;
        });
      } else if (freeModule) {
        (freeModule.exports = _)._ = _;
        freeExports._ = _;
      } else {
        root._ = _;
      }
    }).call(exports);
  }
});

// node_modules/dayjs/dayjs.min.js
var require_dayjs_min = __commonJS({
  "node_modules/dayjs/dayjs.min.js"(exports, module2) {
    !function(t, e) {
      typeof exports == "object" && typeof module2 != "undefined" ? module2.exports = e() : typeof define == "function" && define.amd ? define(e) : (t = typeof globalThis != "undefined" ? globalThis : t || self).dayjs = e();
    }(exports, function() {
      "use strict";
      var t = 1e3, e = 6e4, n = 36e5, r = "millisecond", i = "second", s = "minute", u = "hour", a = "day", o = "week", f = "month", h = "quarter", c = "year", d = "date", $2 = "Invalid Date", l = /^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[Tt\s]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/, y = /\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g, M = { name: "en", weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_") }, m = function(t2, e2, n2) {
        var r2 = String(t2);
        return !r2 || r2.length >= e2 ? t2 : "" + Array(e2 + 1 - r2.length).join(n2) + t2;
      }, g = { s: m, z: function(t2) {
        var e2 = -t2.utcOffset(), n2 = Math.abs(e2), r2 = Math.floor(n2 / 60), i2 = n2 % 60;
        return (e2 <= 0 ? "+" : "-") + m(r2, 2, "0") + ":" + m(i2, 2, "0");
      }, m: function t2(e2, n2) {
        if (e2.date() < n2.date())
          return -t2(n2, e2);
        var r2 = 12 * (n2.year() - e2.year()) + (n2.month() - e2.month()), i2 = e2.clone().add(r2, f), s2 = n2 - i2 < 0, u2 = e2.clone().add(r2 + (s2 ? -1 : 1), f);
        return +(-(r2 + (n2 - i2) / (s2 ? i2 - u2 : u2 - i2)) || 0);
      }, a: function(t2) {
        return t2 < 0 ? Math.ceil(t2) || 0 : Math.floor(t2);
      }, p: function(t2) {
        return { M: f, y: c, w: o, d: a, D: d, h: u, m: s, s: i, ms: r, Q: h }[t2] || String(t2 || "").toLowerCase().replace(/s$/, "");
      }, u: function(t2) {
        return t2 === void 0;
      } }, D = "en", v = {};
      v[D] = M;
      var p = function(t2) {
        return t2 instanceof _;
      }, S = function(t2, e2, n2) {
        var r2;
        if (!t2)
          return D;
        if (typeof t2 == "string")
          v[t2] && (r2 = t2), e2 && (v[t2] = e2, r2 = t2);
        else {
          var i2 = t2.name;
          v[i2] = t2, r2 = i2;
        }
        return !n2 && r2 && (D = r2), r2 || !n2 && D;
      }, w = function(t2, e2) {
        if (p(t2))
          return t2.clone();
        var n2 = typeof e2 == "object" ? e2 : {};
        return n2.date = t2, n2.args = arguments, new _(n2);
      }, O = g;
      O.l = S, O.i = p, O.w = function(t2, e2) {
        return w(t2, { locale: e2.$L, utc: e2.$u, x: e2.$x, $offset: e2.$offset });
      };
      var _ = function() {
        function M2(t2) {
          this.$L = S(t2.locale, null, true), this.parse(t2);
        }
        var m2 = M2.prototype;
        return m2.parse = function(t2) {
          this.$d = function(t3) {
            var e2 = t3.date, n2 = t3.utc;
            if (e2 === null)
              return new Date(NaN);
            if (O.u(e2))
              return new Date();
            if (e2 instanceof Date)
              return new Date(e2);
            if (typeof e2 == "string" && !/Z$/i.test(e2)) {
              var r2 = e2.match(l);
              if (r2) {
                var i2 = r2[2] - 1 || 0, s2 = (r2[7] || "0").substring(0, 3);
                return n2 ? new Date(Date.UTC(r2[1], i2, r2[3] || 1, r2[4] || 0, r2[5] || 0, r2[6] || 0, s2)) : new Date(r2[1], i2, r2[3] || 1, r2[4] || 0, r2[5] || 0, r2[6] || 0, s2);
              }
            }
            return new Date(e2);
          }(t2), this.$x = t2.x || {}, this.init();
        }, m2.init = function() {
          var t2 = this.$d;
          this.$y = t2.getFullYear(), this.$M = t2.getMonth(), this.$D = t2.getDate(), this.$W = t2.getDay(), this.$H = t2.getHours(), this.$m = t2.getMinutes(), this.$s = t2.getSeconds(), this.$ms = t2.getMilliseconds();
        }, m2.$utils = function() {
          return O;
        }, m2.isValid = function() {
          return !(this.$d.toString() === $2);
        }, m2.isSame = function(t2, e2) {
          var n2 = w(t2);
          return this.startOf(e2) <= n2 && n2 <= this.endOf(e2);
        }, m2.isAfter = function(t2, e2) {
          return w(t2) < this.startOf(e2);
        }, m2.isBefore = function(t2, e2) {
          return this.endOf(e2) < w(t2);
        }, m2.$g = function(t2, e2, n2) {
          return O.u(t2) ? this[e2] : this.set(n2, t2);
        }, m2.unix = function() {
          return Math.floor(this.valueOf() / 1e3);
        }, m2.valueOf = function() {
          return this.$d.getTime();
        }, m2.startOf = function(t2, e2) {
          var n2 = this, r2 = !!O.u(e2) || e2, h2 = O.p(t2), $3 = function(t3, e3) {
            var i2 = O.w(n2.$u ? Date.UTC(n2.$y, e3, t3) : new Date(n2.$y, e3, t3), n2);
            return r2 ? i2 : i2.endOf(a);
          }, l2 = function(t3, e3) {
            return O.w(n2.toDate()[t3].apply(n2.toDate("s"), (r2 ? [0, 0, 0, 0] : [23, 59, 59, 999]).slice(e3)), n2);
          }, y2 = this.$W, M3 = this.$M, m3 = this.$D, g2 = "set" + (this.$u ? "UTC" : "");
          switch (h2) {
            case c:
              return r2 ? $3(1, 0) : $3(31, 11);
            case f:
              return r2 ? $3(1, M3) : $3(0, M3 + 1);
            case o:
              var D2 = this.$locale().weekStart || 0, v2 = (y2 < D2 ? y2 + 7 : y2) - D2;
              return $3(r2 ? m3 - v2 : m3 + (6 - v2), M3);
            case a:
            case d:
              return l2(g2 + "Hours", 0);
            case u:
              return l2(g2 + "Minutes", 1);
            case s:
              return l2(g2 + "Seconds", 2);
            case i:
              return l2(g2 + "Milliseconds", 3);
            default:
              return this.clone();
          }
        }, m2.endOf = function(t2) {
          return this.startOf(t2, false);
        }, m2.$set = function(t2, e2) {
          var n2, o2 = O.p(t2), h2 = "set" + (this.$u ? "UTC" : ""), $3 = (n2 = {}, n2[a] = h2 + "Date", n2[d] = h2 + "Date", n2[f] = h2 + "Month", n2[c] = h2 + "FullYear", n2[u] = h2 + "Hours", n2[s] = h2 + "Minutes", n2[i] = h2 + "Seconds", n2[r] = h2 + "Milliseconds", n2)[o2], l2 = o2 === a ? this.$D + (e2 - this.$W) : e2;
          if (o2 === f || o2 === c) {
            var y2 = this.clone().set(d, 1);
            y2.$d[$3](l2), y2.init(), this.$d = y2.set(d, Math.min(this.$D, y2.daysInMonth())).$d;
          } else
            $3 && this.$d[$3](l2);
          return this.init(), this;
        }, m2.set = function(t2, e2) {
          return this.clone().$set(t2, e2);
        }, m2.get = function(t2) {
          return this[O.p(t2)]();
        }, m2.add = function(r2, h2) {
          var d2, $3 = this;
          r2 = Number(r2);
          var l2 = O.p(h2), y2 = function(t2) {
            var e2 = w($3);
            return O.w(e2.date(e2.date() + Math.round(t2 * r2)), $3);
          };
          if (l2 === f)
            return this.set(f, this.$M + r2);
          if (l2 === c)
            return this.set(c, this.$y + r2);
          if (l2 === a)
            return y2(1);
          if (l2 === o)
            return y2(7);
          var M3 = (d2 = {}, d2[s] = e, d2[u] = n, d2[i] = t, d2)[l2] || 1, m3 = this.$d.getTime() + r2 * M3;
          return O.w(m3, this);
        }, m2.subtract = function(t2, e2) {
          return this.add(-1 * t2, e2);
        }, m2.format = function(t2) {
          var e2 = this, n2 = this.$locale();
          if (!this.isValid())
            return n2.invalidDate || $2;
          var r2 = t2 || "YYYY-MM-DDTHH:mm:ssZ", i2 = O.z(this), s2 = this.$H, u2 = this.$m, a2 = this.$M, o2 = n2.weekdays, f2 = n2.months, h2 = function(t3, n3, i3, s3) {
            return t3 && (t3[n3] || t3(e2, r2)) || i3[n3].substr(0, s3);
          }, c2 = function(t3) {
            return O.s(s2 % 12 || 12, t3, "0");
          }, d2 = n2.meridiem || function(t3, e3, n3) {
            var r3 = t3 < 12 ? "AM" : "PM";
            return n3 ? r3.toLowerCase() : r3;
          }, l2 = { YY: String(this.$y).slice(-2), YYYY: this.$y, M: a2 + 1, MM: O.s(a2 + 1, 2, "0"), MMM: h2(n2.monthsShort, a2, f2, 3), MMMM: h2(f2, a2), D: this.$D, DD: O.s(this.$D, 2, "0"), d: String(this.$W), dd: h2(n2.weekdaysMin, this.$W, o2, 2), ddd: h2(n2.weekdaysShort, this.$W, o2, 3), dddd: o2[this.$W], H: String(s2), HH: O.s(s2, 2, "0"), h: c2(1), hh: c2(2), a: d2(s2, u2, true), A: d2(s2, u2, false), m: String(u2), mm: O.s(u2, 2, "0"), s: String(this.$s), ss: O.s(this.$s, 2, "0"), SSS: O.s(this.$ms, 3, "0"), Z: i2 };
          return r2.replace(y, function(t3, e3) {
            return e3 || l2[t3] || i2.replace(":", "");
          });
        }, m2.utcOffset = function() {
          return 15 * -Math.round(this.$d.getTimezoneOffset() / 15);
        }, m2.diff = function(r2, d2, $3) {
          var l2, y2 = O.p(d2), M3 = w(r2), m3 = (M3.utcOffset() - this.utcOffset()) * e, g2 = this - M3, D2 = O.m(this, M3);
          return D2 = (l2 = {}, l2[c] = D2 / 12, l2[f] = D2, l2[h] = D2 / 3, l2[o] = (g2 - m3) / 6048e5, l2[a] = (g2 - m3) / 864e5, l2[u] = g2 / n, l2[s] = g2 / e, l2[i] = g2 / t, l2)[y2] || g2, $3 ? D2 : O.a(D2);
        }, m2.daysInMonth = function() {
          return this.endOf(f).$D;
        }, m2.$locale = function() {
          return v[this.$L];
        }, m2.locale = function(t2, e2) {
          if (!t2)
            return this.$L;
          var n2 = this.clone(), r2 = S(t2, e2, true);
          return r2 && (n2.$L = r2), n2;
        }, m2.clone = function() {
          return O.w(this.$d, this);
        }, m2.toDate = function() {
          return new Date(this.valueOf());
        }, m2.toJSON = function() {
          return this.isValid() ? this.toISOString() : null;
        }, m2.toISOString = function() {
          return this.$d.toISOString();
        }, m2.toString = function() {
          return this.$d.toUTCString();
        }, M2;
      }(), b = _.prototype;
      return w.prototype = b, [["$ms", r], ["$s", i], ["$m", s], ["$H", u], ["$W", a], ["$M", f], ["$y", c], ["$D", d]].forEach(function(t2) {
        b[t2[1]] = function(e2) {
          return this.$g(e2, t2[0], t2[1]);
        };
      }), w.extend = function(t2, e2) {
        return t2.$i || (t2(e2, _, w), t2.$i = true), w;
      }, w.locale = S, w.isDayjs = p, w.unix = function(t2) {
        return w(1e3 * t2);
      }, w.en = v[D], w.Ls = v, w.p = {}, w;
    });
  }
});

// node_modules/mpath/lib/index.js
var require_lib = __commonJS({
  "node_modules/mpath/lib/index.js"(exports) {
    var ignoreProperties = ["__proto__", "constructor", "prototype"];
    exports.get = function(path, o, special, map) {
      var lookup;
      if (typeof special == "function") {
        if (special.length < 2) {
          map = special;
          special = void 0;
        } else {
          lookup = special;
          special = void 0;
        }
      }
      map || (map = K);
      var parts = typeof path == "string" ? path.split(".") : path;
      if (!Array.isArray(parts)) {
        throw new TypeError("Invalid `path`. Must be either string or array");
      }
      var obj = o, part;
      for (var i = 0; i < parts.length; ++i) {
        part = parts[i];
        if (Array.isArray(obj) && !/^\d+$/.test(part)) {
          var paths = parts.slice(i);
          return [].concat(obj).map(function(item2) {
            return item2 ? exports.get(paths, item2, special || lookup, map) : map(void 0);
          });
        }
        if (lookup) {
          obj = lookup(obj, part);
        } else {
          var _from = special && obj[special] ? obj[special] : obj;
          obj = _from instanceof Map ? _from.get(part) : _from[part];
        }
        if (!obj)
          return map(obj);
      }
      return map(obj);
    };
    exports.has = function(path, o) {
      var parts = typeof path === "string" ? path.split(".") : path;
      if (!Array.isArray(parts)) {
        throw new TypeError("Invalid `path`. Must be either string or array");
      }
      var len = parts.length;
      var cur = o;
      for (var i = 0; i < len; ++i) {
        if (cur == null || typeof cur !== "object" || !(parts[i] in cur)) {
          return false;
        }
        cur = cur[parts[i]];
      }
      return true;
    };
    exports.unset = function(path, o) {
      var parts = typeof path === "string" ? path.split(".") : path;
      if (!Array.isArray(parts)) {
        throw new TypeError("Invalid `path`. Must be either string or array");
      }
      var len = parts.length;
      var cur = o;
      for (var i = 0; i < len; ++i) {
        if (cur == null || typeof cur !== "object" || !(parts[i] in cur)) {
          return false;
        }
        if (ignoreProperties.indexOf(parts[i]) !== -1) {
          return false;
        }
        if (i === len - 1) {
          delete cur[parts[i]];
          return true;
        }
        cur = cur instanceof Map ? cur.get(parts[i]) : cur[parts[i]];
      }
      return true;
    };
    exports.set = function(path, val, o, special, map, _copying) {
      var lookup;
      if (typeof special == "function") {
        if (special.length < 2) {
          map = special;
          special = void 0;
        } else {
          lookup = special;
          special = void 0;
        }
      }
      map || (map = K);
      var parts = typeof path == "string" ? path.split(".") : path;
      if (!Array.isArray(parts)) {
        throw new TypeError("Invalid `path`. Must be either string or array");
      }
      if (o == null)
        return;
      for (var i = 0; i < parts.length; ++i) {
        if (ignoreProperties.indexOf(parts[i]) !== -1) {
          return;
        }
      }
      var copy = _copying || /\$/.test(path) && _copying !== false, obj = o, part;
      for (var i = 0, len = parts.length - 1; i < len; ++i) {
        part = parts[i];
        if (part == "$") {
          if (i == len - 1) {
            break;
          } else {
            continue;
          }
        }
        if (Array.isArray(obj) && !/^\d+$/.test(part)) {
          var paths = parts.slice(i);
          if (!copy && Array.isArray(val)) {
            for (var j = 0; j < obj.length && j < val.length; ++j) {
              exports.set(paths, val[j], obj[j], special || lookup, map, copy);
            }
          } else {
            for (var j = 0; j < obj.length; ++j) {
              exports.set(paths, val, obj[j], special || lookup, map, copy);
            }
          }
          return;
        }
        if (lookup) {
          obj = lookup(obj, part);
        } else {
          var _to = special && obj[special] ? obj[special] : obj;
          obj = _to instanceof Map ? _to.get(part) : _to[part];
        }
        if (!obj)
          return;
      }
      part = parts[len];
      if (special && obj[special]) {
        obj = obj[special];
      }
      if (Array.isArray(obj) && !/^\d+$/.test(part)) {
        if (!copy && Array.isArray(val)) {
          _setArray(obj, val, part, lookup, special, map);
        } else {
          for (var j = 0; j < obj.length; ++j) {
            item = obj[j];
            if (item) {
              if (lookup) {
                lookup(item, part, map(val));
              } else {
                if (item[special])
                  item = item[special];
                item[part] = map(val);
              }
            }
          }
        }
      } else {
        if (lookup) {
          lookup(obj, part, map(val));
        } else if (obj instanceof Map) {
          obj.set(part, map(val));
        } else {
          obj[part] = map(val);
        }
      }
    };
    function _setArray(obj, val, part, lookup, special, map) {
      for (var item2, j = 0; j < obj.length && j < val.length; ++j) {
        item2 = obj[j];
        if (Array.isArray(item2) && Array.isArray(val[j])) {
          _setArray(item2, val[j], part, lookup, special, map);
        } else if (item2) {
          if (lookup) {
            lookup(item2, part, map(val[j]));
          } else {
            if (item2[special])
              item2 = item2[special];
            item2[part] = map(val[j]);
          }
        }
      }
    }
    function K(v) {
      return v;
    }
  }
});

// node_modules/mpath/index.js
var require_mpath = __commonJS({
  "node_modules/mpath/index.js"(exports, module2) {
    module2.exports = exports = require_lib();
  }
});

// node_modules/@babel/runtime/helpers/interopRequireDefault.js
var require_interopRequireDefault = __commonJS({
  "node_modules/@babel/runtime/helpers/interopRequireDefault.js"(exports, module2) {
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        "default": obj
      };
    }
    module2.exports = _interopRequireDefault;
    module2.exports["default"] = module2.exports, module2.exports.__esModule = true;
  }
});

// node_modules/@babel/runtime/helpers/extends.js
var require_extends = __commonJS({
  "node_modules/@babel/runtime/helpers/extends.js"(exports, module2) {
    function _extends() {
      module2.exports = _extends = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      module2.exports["default"] = module2.exports, module2.exports.__esModule = true;
      return _extends.apply(this, arguments);
    }
    module2.exports = _extends;
    module2.exports["default"] = module2.exports, module2.exports.__esModule = true;
  }
});

// node_modules/xlsx/dist/cpexcel.js
var require_cpexcel = __commonJS({
  "node_modules/xlsx/dist/cpexcel.js"(exports, module2) {
    var cptable2 = { version: "1.15.0" };
    cptable2[437] = function() {
      var d = "\0\x07\b	\n\v\f\r !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\xC7\xFC\xE9\xE2\xE4\xE0\xE5\xE7\xEA\xEB\xE8\xEF\xEE\xEC\xC4\xC5\xC9\xE6\xC6\xF4\xF6\xF2\xFB\xF9\xFF\xD6\xDC\xA2\xA3\xA5\u20A7\u0192\xE1\xED\xF3\xFA\xF1\xD1\xAA\xBA\xBF\u2310\xAC\xBD\xBC\xA1\xAB\xBB\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255D\u255C\u255B\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u255E\u255F\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256B\u256A\u2518\u250C\u2588\u2584\u258C\u2590\u2580\u03B1\xDF\u0393\u03C0\u03A3\u03C3\xB5\u03C4\u03A6\u0398\u03A9\u03B4\u221E\u03C6\u03B5\u2229\u2261\xB1\u2265\u2264\u2320\u2321\xF7\u2248\xB0\u2219\xB7\u221A\u207F\xB2\u25A0\xA0", D = [], e = {};
      for (var i = 0; i != d.length; ++i) {
        if (d.charCodeAt(i) !== 65533)
          e[d.charAt(i)] = i;
        D[i] = d.charAt(i);
      }
      return { "enc": e, "dec": D };
    }();
    cptable2[620] = function() {
      var d = "\0\x07\b	\n\v\f\r !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\xC7\xFC\xE9\xE2\xE4\xE0\u0105\xE7\xEA\xEB\xE8\xEF\xEE\u0107\xC4\u0104\u0118\u0119\u0142\xF4\xF6\u0106\xFB\xF9\u015A\xD6\xDC\xA2\u0141\xA5\u015B\u0192\u0179\u017B\xF3\xD3\u0144\u0143\u017A\u017C\xBF\u2310\xAC\xBD\xBC\xA1\xAB\xBB\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255D\u255C\u255B\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u255E\u255F\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256B\u256A\u2518\u250C\u2588\u2584\u258C\u2590\u2580\u03B1\xDF\u0393\u03C0\u03A3\u03C3\xB5\u03C4\u03A6\u0398\u03A9\u03B4\u221E\u03C6\u03B5\u2229\u2261\xB1\u2265\u2264\u2320\u2321\xF7\u2248\xB0\u2219\xB7\u221A\u207F\xB2\u25A0\xA0", D = [], e = {};
      for (var i = 0; i != d.length; ++i) {
        if (d.charCodeAt(i) !== 65533)
          e[d.charAt(i)] = i;
        D[i] = d.charAt(i);
      }
      return { "enc": e, "dec": D };
    }();
    cptable2[737] = function() {
      var d = "\0\x07\b	\n\v\f\r !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\u0391\u0392\u0393\u0394\u0395\u0396\u0397\u0398\u0399\u039A\u039B\u039C\u039D\u039E\u039F\u03A0\u03A1\u03A3\u03A4\u03A5\u03A6\u03A7\u03A8\u03A9\u03B1\u03B2\u03B3\u03B4\u03B5\u03B6\u03B7\u03B8\u03B9\u03BA\u03BB\u03BC\u03BD\u03BE\u03BF\u03C0\u03C1\u03C3\u03C2\u03C4\u03C5\u03C6\u03C7\u03C8\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255D\u255C\u255B\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u255E\u255F\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256B\u256A\u2518\u250C\u2588\u2584\u258C\u2590\u2580\u03C9\u03AC\u03AD\u03AE\u03CA\u03AF\u03CC\u03CD\u03CB\u03CE\u0386\u0388\u0389\u038A\u038C\u038E\u038F\xB1\u2265\u2264\u03AA\u03AB\xF7\u2248\xB0\u2219\xB7\u221A\u207F\xB2\u25A0\xA0", D = [], e = {};
      for (var i = 0; i != d.length; ++i) {
        if (d.charCodeAt(i) !== 65533)
          e[d.charAt(i)] = i;
        D[i] = d.charAt(i);
      }
      return { "enc": e, "dec": D };
    }();
    cptable2[850] = function() {
      var d = "\0\x07\b	\n\v\f\r !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\xC7\xFC\xE9\xE2\xE4\xE0\xE5\xE7\xEA\xEB\xE8\xEF\xEE\xEC\xC4\xC5\xC9\xE6\xC6\xF4\xF6\xF2\xFB\xF9\xFF\xD6\xDC\xF8\xA3\xD8\xD7\u0192\xE1\xED\xF3\xFA\xF1\xD1\xAA\xBA\xBF\xAE\xAC\xBD\xBC\xA1\xAB\xBB\u2591\u2592\u2593\u2502\u2524\xC1\xC2\xC0\xA9\u2563\u2551\u2557\u255D\xA2\xA5\u2510\u2514\u2534\u252C\u251C\u2500\u253C\xE3\xC3\u255A\u2554\u2569\u2566\u2560\u2550\u256C\xA4\xF0\xD0\xCA\xCB\xC8\u0131\xCD\xCE\xCF\u2518\u250C\u2588\u2584\xA6\xCC\u2580\xD3\xDF\xD4\xD2\xF5\xD5\xB5\xFE\xDE\xDA\xDB\xD9\xFD\xDD\xAF\xB4\xAD\xB1\u2017\xBE\xB6\xA7\xF7\xB8\xB0\xA8\xB7\xB9\xB3\xB2\u25A0\xA0", D = [], e = {};
      for (var i = 0; i != d.length; ++i) {
        if (d.charCodeAt(i) !== 65533)
          e[d.charAt(i)] = i;
        D[i] = d.charAt(i);
      }
      return { "enc": e, "dec": D };
    }();
    cptable2[852] = function() {
      var d = "\0\x07\b	\n\v\f\r !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\xC7\xFC\xE9\xE2\xE4\u016F\u0107\xE7\u0142\xEB\u0150\u0151\xEE\u0179\xC4\u0106\xC9\u0139\u013A\xF4\xF6\u013D\u013E\u015A\u015B\xD6\xDC\u0164\u0165\u0141\xD7\u010D\xE1\xED\xF3\xFA\u0104\u0105\u017D\u017E\u0118\u0119\xAC\u017A\u010C\u015F\xAB\xBB\u2591\u2592\u2593\u2502\u2524\xC1\xC2\u011A\u015E\u2563\u2551\u2557\u255D\u017B\u017C\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u0102\u0103\u255A\u2554\u2569\u2566\u2560\u2550\u256C\xA4\u0111\u0110\u010E\xCB\u010F\u0147\xCD\xCE\u011B\u2518\u250C\u2588\u2584\u0162\u016E\u2580\xD3\xDF\xD4\u0143\u0144\u0148\u0160\u0161\u0154\xDA\u0155\u0170\xFD\xDD\u0163\xB4\xAD\u02DD\u02DB\u02C7\u02D8\xA7\xF7\xB8\xB0\xA8\u02D9\u0171\u0158\u0159\u25A0\xA0", D = [], e = {};
      for (var i = 0; i != d.length; ++i) {
        if (d.charCodeAt(i) !== 65533)
          e[d.charAt(i)] = i;
        D[i] = d.charAt(i);
      }
      return { "enc": e, "dec": D };
    }();
    cptable2[857] = function() {
      var d = "\0\x07\b	\n\v\f\r !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\xC7\xFC\xE9\xE2\xE4\xE0\xE5\xE7\xEA\xEB\xE8\xEF\xEE\u0131\xC4\xC5\xC9\xE6\xC6\xF4\xF6\xF2\xFB\xF9\u0130\xD6\xDC\xF8\xA3\xD8\u015E\u015F\xE1\xED\xF3\xFA\xF1\xD1\u011E\u011F\xBF\xAE\xAC\xBD\xBC\xA1\xAB\xBB\u2591\u2592\u2593\u2502\u2524\xC1\xC2\xC0\xA9\u2563\u2551\u2557\u255D\xA2\xA5\u2510\u2514\u2534\u252C\u251C\u2500\u253C\xE3\xC3\u255A\u2554\u2569\u2566\u2560\u2550\u256C\xA4\xBA\xAA\xCA\xCB\xC8\uFFFD\xCD\xCE\xCF\u2518\u250C\u2588\u2584\xA6\xCC\u2580\xD3\xDF\xD4\xD2\xF5\xD5\xB5\uFFFD\xD7\xDA\xDB\xD9\xEC\xFF\xAF\xB4\xAD\xB1\uFFFD\xBE\xB6\xA7\xF7\xB8\xB0\xA8\xB7\xB9\xB3\xB2\u25A0\xA0", D = [], e = {};
      for (var i = 0; i != d.length; ++i) {
        if (d.charCodeAt(i) !== 65533)
          e[d.charAt(i)] = i;
        D[i] = d.charAt(i);
      }
      return { "enc": e, "dec": D };
    }();
    cptable2[861] = function() {
      var d = "\0\x07\b	\n\v\f\r !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\xC7\xFC\xE9\xE2\xE4\xE0\xE5\xE7\xEA\xEB\xE8\xD0\xF0\xDE\xC4\xC5\xC9\xE6\xC6\xF4\xF6\xFE\xFB\xDD\xFD\xD6\xDC\xF8\xA3\xD8\u20A7\u0192\xE1\xED\xF3\xFA\xC1\xCD\xD3\xDA\xBF\u2310\xAC\xBD\xBC\xA1\xAB\xBB\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255D\u255C\u255B\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u255E\u255F\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256B\u256A\u2518\u250C\u2588\u2584\u258C\u2590\u2580\u03B1\xDF\u0393\u03C0\u03A3\u03C3\xB5\u03C4\u03A6\u0398\u03A9\u03B4\u221E\u03C6\u03B5\u2229\u2261\xB1\u2265\u2264\u2320\u2321\xF7\u2248\xB0\u2219\xB7\u221A\u207F\xB2\u25A0\xA0", D = [], e = {};
      for (var i = 0; i != d.length; ++i) {
        if (d.charCodeAt(i) !== 65533)
          e[d.charAt(i)] = i;
        D[i] = d.charAt(i);
      }
      return { "enc": e, "dec": D };
    }();
    cptable2[865] = function() {
      var d = "\0\x07\b	\n\v\f\r !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\xC7\xFC\xE9\xE2\xE4\xE0\xE5\xE7\xEA\xEB\xE8\xEF\xEE\xEC\xC4\xC5\xC9\xE6\xC6\xF4\xF6\xF2\xFB\xF9\xFF\xD6\xDC\xF8\xA3\xD8\u20A7\u0192\xE1\xED\xF3\xFA\xF1\xD1\xAA\xBA\xBF\u2310\xAC\xBD\xBC\xA1\xAB\xA4\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255D\u255C\u255B\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u255E\u255F\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256B\u256A\u2518\u250C\u2588\u2584\u258C\u2590\u2580\u03B1\xDF\u0393\u03C0\u03A3\u03C3\xB5\u03C4\u03A6\u0398\u03A9\u03B4\u221E\u03C6\u03B5\u2229\u2261\xB1\u2265\u2264\u2320\u2321\xF7\u2248\xB0\u2219\xB7\u221A\u207F\xB2\u25A0\xA0", D = [], e = {};
      for (var i = 0; i != d.length; ++i) {
        if (d.charCodeAt(i) !== 65533)
          e[d.charAt(i)] = i;
        D[i] = d.charAt(i);
      }
      return { "enc": e, "dec": D };
    }();
    cptable2[866] = function() {
      var d = "\0\x07\b	\n\v\f\r !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\u0410\u0411\u0412\u0413\u0414\u0415\u0416\u0417\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u0420\u0421\u0422\u0423\u0424\u0425\u0426\u0427\u0428\u0429\u042A\u042B\u042C\u042D\u042E\u042F\u0430\u0431\u0432\u0433\u0434\u0435\u0436\u0437\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255D\u255C\u255B\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u255E\u255F\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256B\u256A\u2518\u250C\u2588\u2584\u258C\u2590\u2580\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044A\u044B\u044C\u044D\u044E\u044F\u0401\u0451\u0404\u0454\u0407\u0457\u040E\u045E\xB0\u2219\xB7\u221A\u2116\xA4\u25A0\xA0", D = [], e = {};
      for (var i = 0; i != d.length; ++i) {
        if (d.charCodeAt(i) !== 65533)
          e[d.charAt(i)] = i;
        D[i] = d.charAt(i);
      }
      return { "enc": e, "dec": D };
    }();
    cptable2[874] = function() {
      var d = "\0\x07\b	\n\v\f\r !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\u20AC\uFFFD\uFFFD\uFFFD\uFFFD\u2026\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u2018\u2019\u201C\u201D\u2022\u2013\u2014\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\xA0\u0E01\u0E02\u0E03\u0E04\u0E05\u0E06\u0E07\u0E08\u0E09\u0E0A\u0E0B\u0E0C\u0E0D\u0E0E\u0E0F\u0E10\u0E11\u0E12\u0E13\u0E14\u0E15\u0E16\u0E17\u0E18\u0E19\u0E1A\u0E1B\u0E1C\u0E1D\u0E1E\u0E1F\u0E20\u0E21\u0E22\u0E23\u0E24\u0E25\u0E26\u0E27\u0E28\u0E29\u0E2A\u0E2B\u0E2C\u0E2D\u0E2E\u0E2F\u0E30\u0E31\u0E32\u0E33\u0E34\u0E35\u0E36\u0E37\u0E38\u0E39\u0E3A\uFFFD\uFFFD\uFFFD\uFFFD\u0E3F\u0E40\u0E41\u0E42\u0E43\u0E44\u0E45\u0E46\u0E47\u0E48\u0E49\u0E4A\u0E4B\u0E4C\u0E4D\u0E4E\u0E4F\u0E50\u0E51\u0E52\u0E53\u0E54\u0E55\u0E56\u0E57\u0E58\u0E59\u0E5A\u0E5B\uFFFD\uFFFD\uFFFD\uFFFD", D = [], e = {};
      for (var i = 0; i != d.length; ++i) {
        if (d.charCodeAt(i) !== 65533)
          e[d.charAt(i)] = i;
        D[i] = d.charAt(i);
      }
      return { "enc": e, "dec": D };
    }();
    cptable2[895] = function() {
      var d = "\0\x07\b	\n\v\f\r !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\u010C\xFC\xE9\u010F\xE4\u010E\u0164\u010D\u011B\u011A\u0139\xCD\u013E\u01EA\xC4\xC1\xC9\u017E\u017D\xF4\xF6\xD3\u016F\xDA\xFD\xD6\xDC\u0160\u013D\xDD\u0158\u0165\xE1\xED\xF3\xFA\u0148\u0147\u016E\xD4\u0161\u0159\u0155\u0154\xBC\xA7\xAB\xBB\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255D\u255C\u255B\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u255E\u255F\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256B\u256A\u2518\u250C\u2588\u2584\u258C\u2590\u2580\u03B1\xDF\u0393\u03C0\u03A3\u03C3\xB5\u03C4\u03A6\u0398\u03A9\u03B4\u221E\u03C6\u03B5\u2229\u2261\xB1\u2265\u2264\u2320\u2321\xF7\u2248\xB0\u2219\xB7\u221A\u207F\xB2\u25A0\xA0", D = [], e = {};
      for (var i = 0; i != d.length; ++i) {
        if (d.charCodeAt(i) !== 65533)
          e[d.charAt(i)] = i;
        D[i] = d.charAt(i);
      }
      return { "enc": e, "dec": D };
    }();
    cptable2[932] = function() {
      var d = [], e = {}, D = [], j;
      D[0] = "\0\x07\b	\n\v\f\r !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFF61\uFF62\uFF63\uFF64\uFF65\uFF66\uFF67\uFF68\uFF69\uFF6A\uFF6B\uFF6C\uFF6D\uFF6E\uFF6F\uFF70\uFF71\uFF72\uFF73\uFF74\uFF75\uFF76\uFF77\uFF78\uFF79\uFF7A\uFF7B\uFF7C\uFF7D\uFF7E\uFF7F\uFF80\uFF81\uFF82\uFF83\uFF84\uFF85\uFF86\uFF87\uFF88\uFF89\uFF8A\uFF8B\uFF8C\uFF8D\uFF8E\uFF8F\uFF90\uFF91\uFF92\uFF93\uFF94\uFF95\uFF96\uFF97\uFF98\uFF99\uFF9A\uFF9B\uFF9C\uFF9D\uFF9E\uFF9F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[0].length; ++j)
        if (D[0][j].charCodeAt(0) !== 65533) {
          e[D[0][j]] = 0 + j;
          d[0 + j] = D[0][j];
        }
      D[129] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u3000\u3001\u3002\uFF0C\uFF0E\u30FB\uFF1A\uFF1B\uFF1F\uFF01\u309B\u309C\xB4\uFF40\xA8\uFF3E\uFFE3\uFF3F\u30FD\u30FE\u309D\u309E\u3003\u4EDD\u3005\u3006\u3007\u30FC\u2015\u2010\uFF0F\uFF3C\uFF5E\u2225\uFF5C\u2026\u2025\u2018\u2019\u201C\u201D\uFF08\uFF09\u3014\u3015\uFF3B\uFF3D\uFF5B\uFF5D\u3008\u3009\u300A\u300B\u300C\u300D\u300E\u300F\u3010\u3011\uFF0B\uFF0D\xB1\xD7\uFFFD\xF7\uFF1D\u2260\uFF1C\uFF1E\u2266\u2267\u221E\u2234\u2642\u2640\xB0\u2032\u2033\u2103\uFFE5\uFF04\uFFE0\uFFE1\uFF05\uFF03\uFF06\uFF0A\uFF20\xA7\u2606\u2605\u25CB\u25CF\u25CE\u25C7\u25C6\u25A1\u25A0\u25B3\u25B2\u25BD\u25BC\u203B\u3012\u2192\u2190\u2191\u2193\u3013\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u2208\u220B\u2286\u2287\u2282\u2283\u222A\u2229\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u2227\u2228\uFFE2\u21D2\u21D4\u2200\u2203\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u2220\u22A5\u2312\u2202\u2207\u2261\u2252\u226A\u226B\u221A\u223D\u221D\u2235\u222B\u222C\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u212B\u2030\u266F\u266D\u266A\u2020\u2021\xB6\uFFFD\uFFFD\uFFFD\uFFFD\u25EF\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[129].length; ++j)
        if (D[129][j].charCodeAt(0) !== 65533) {
          e[D[129][j]] = 33024 + j;
          d[33024 + j] = D[129][j];
        }
      D[130] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFF10\uFF11\uFF12\uFF13\uFF14\uFF15\uFF16\uFF17\uFF18\uFF19\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFF21\uFF22\uFF23\uFF24\uFF25\uFF26\uFF27\uFF28\uFF29\uFF2A\uFF2B\uFF2C\uFF2D\uFF2E\uFF2F\uFF30\uFF31\uFF32\uFF33\uFF34\uFF35\uFF36\uFF37\uFF38\uFF39\uFF3A\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFF41\uFF42\uFF43\uFF44\uFF45\uFF46\uFF47\uFF48\uFF49\uFF4A\uFF4B\uFF4C\uFF4D\uFF4E\uFF4F\uFF50\uFF51\uFF52\uFF53\uFF54\uFF55\uFF56\uFF57\uFF58\uFF59\uFF5A\uFFFD\uFFFD\uFFFD\uFFFD\u3041\u3042\u3043\u3044\u3045\u3046\u3047\u3048\u3049\u304A\u304B\u304C\u304D\u304E\u304F\u3050\u3051\u3052\u3053\u3054\u3055\u3056\u3057\u3058\u3059\u305A\u305B\u305C\u305D\u305E\u305F\u3060\u3061\u3062\u3063\u3064\u3065\u3066\u3067\u3068\u3069\u306A\u306B\u306C\u306D\u306E\u306F\u3070\u3071\u3072\u3073\u3074\u3075\u3076\u3077\u3078\u3079\u307A\u307B\u307C\u307D\u307E\u307F\u3080\u3081\u3082\u3083\u3084\u3085\u3086\u3087\u3088\u3089\u308A\u308B\u308C\u308D\u308E\u308F\u3090\u3091\u3092\u3093\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[130].length; ++j)
        if (D[130][j].charCodeAt(0) !== 65533) {
          e[D[130][j]] = 33280 + j;
          d[33280 + j] = D[130][j];
        }
      D[131] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u30A1\u30A2\u30A3\u30A4\u30A5\u30A6\u30A7\u30A8\u30A9\u30AA\u30AB\u30AC\u30AD\u30AE\u30AF\u30B0\u30B1\u30B2\u30B3\u30B4\u30B5\u30B6\u30B7\u30B8\u30B9\u30BA\u30BB\u30BC\u30BD\u30BE\u30BF\u30C0\u30C1\u30C2\u30C3\u30C4\u30C5\u30C6\u30C7\u30C8\u30C9\u30CA\u30CB\u30CC\u30CD\u30CE\u30CF\u30D0\u30D1\u30D2\u30D3\u30D4\u30D5\u30D6\u30D7\u30D8\u30D9\u30DA\u30DB\u30DC\u30DD\u30DE\u30DF\uFFFD\u30E0\u30E1\u30E2\u30E3\u30E4\u30E5\u30E6\u30E7\u30E8\u30E9\u30EA\u30EB\u30EC\u30ED\u30EE\u30EF\u30F0\u30F1\u30F2\u30F3\u30F4\u30F5\u30F6\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0391\u0392\u0393\u0394\u0395\u0396\u0397\u0398\u0399\u039A\u039B\u039C\u039D\u039E\u039F\u03A0\u03A1\u03A3\u03A4\u03A5\u03A6\u03A7\u03A8\u03A9\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u03B1\u03B2\u03B3\u03B4\u03B5\u03B6\u03B7\u03B8\u03B9\u03BA\u03BB\u03BC\u03BD\u03BE\u03BF\u03C0\u03C1\u03C3\u03C4\u03C5\u03C6\u03C7\u03C8\u03C9\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[131].length; ++j)
        if (D[131][j].charCodeAt(0) !== 65533) {
          e[D[131][j]] = 33536 + j;
          d[33536 + j] = D[131][j];
        }
      D[132] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0410\u0411\u0412\u0413\u0414\u0415\u0401\u0416\u0417\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u0420\u0421\u0422\u0423\u0424\u0425\u0426\u0427\u0428\u0429\u042A\u042B\u042C\u042D\u042E\u042F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0430\u0431\u0432\u0433\u0434\u0435\u0451\u0436\u0437\u0438\u0439\u043A\u043B\u043C\u043D\uFFFD\u043E\u043F\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044A\u044B\u044C\u044D\u044E\u044F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u2500\u2502\u250C\u2510\u2518\u2514\u251C\u252C\u2524\u2534\u253C\u2501\u2503\u250F\u2513\u251B\u2517\u2523\u2533\u252B\u253B\u254B\u2520\u252F\u2528\u2537\u253F\u251D\u2530\u2525\u2538\u2542\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[132].length; ++j)
        if (D[132][j].charCodeAt(0) !== 65533) {
          e[D[132][j]] = 33792 + j;
          d[33792 + j] = D[132][j];
        }
      D[135] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u2460\u2461\u2462\u2463\u2464\u2465\u2466\u2467\u2468\u2469\u246A\u246B\u246C\u246D\u246E\u246F\u2470\u2471\u2472\u2473\u2160\u2161\u2162\u2163\u2164\u2165\u2166\u2167\u2168\u2169\uFFFD\u3349\u3314\u3322\u334D\u3318\u3327\u3303\u3336\u3351\u3357\u330D\u3326\u3323\u332B\u334A\u333B\u339C\u339D\u339E\u338E\u338F\u33C4\u33A1\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u337B\uFFFD\u301D\u301F\u2116\u33CD\u2121\u32A4\u32A5\u32A6\u32A7\u32A8\u3231\u3232\u3239\u337E\u337D\u337C\u2252\u2261\u222B\u222E\u2211\u221A\u22A5\u2220\u221F\u22BF\u2235\u2229\u222A\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[135].length; ++j)
        if (D[135][j].charCodeAt(0) !== 65533) {
          e[D[135][j]] = 34560 + j;
          d[34560 + j] = D[135][j];
        }
      D[136] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u4E9C\u5516\u5A03\u963F\u54C0\u611B\u6328\u59F6\u9022\u8475\u831C\u7A50\u60AA\u63E1\u6E25\u65ED\u8466\u82A6\u9BF5\u6893\u5727\u65A1\u6271\u5B9B\u59D0\u867B\u98F4\u7D62\u7DBE\u9B8E\u6216\u7C9F\u88B7\u5B89\u5EB5\u6309\u6697\u6848\u95C7\u978D\u674F\u4EE5\u4F0A\u4F4D\u4F9D\u5049\u56F2\u5937\u59D4\u5A01\u5C09\u60DF\u610F\u6170\u6613\u6905\u70BA\u754F\u7570\u79FB\u7DAD\u7DEF\u80C3\u840E\u8863\u8B02\u9055\u907A\u533B\u4E95\u4EA5\u57DF\u80B2\u90C1\u78EF\u4E00\u58F1\u6EA2\u9038\u7A32\u8328\u828B\u9C2F\u5141\u5370\u54BD\u54E1\u56E0\u59FB\u5F15\u98F2\u6DEB\u80E4\u852D\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[136].length; ++j)
        if (D[136][j].charCodeAt(0) !== 65533) {
          e[D[136][j]] = 34816 + j;
          d[34816 + j] = D[136][j];
        }
      D[137] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9662\u9670\u96A0\u97FB\u540B\u53F3\u5B87\u70CF\u7FBD\u8FC2\u96E8\u536F\u9D5C\u7ABA\u4E11\u7893\u81FC\u6E26\u5618\u5504\u6B1D\u851A\u9C3B\u59E5\u53A9\u6D66\u74DC\u958F\u5642\u4E91\u904B\u96F2\u834F\u990C\u53E1\u55B6\u5B30\u5F71\u6620\u66F3\u6804\u6C38\u6CF3\u6D29\u745B\u76C8\u7A4E\u9834\u82F1\u885B\u8A60\u92ED\u6DB2\u75AB\u76CA\u99C5\u60A6\u8B01\u8D8A\u95B2\u698E\u53AD\u5186\uFFFD\u5712\u5830\u5944\u5BB4\u5EF6\u6028\u63A9\u63F4\u6CBF\u6F14\u708E\u7114\u7159\u71D5\u733F\u7E01\u8276\u82D1\u8597\u9060\u925B\u9D1B\u5869\u65BC\u6C5A\u7525\u51F9\u592E\u5965\u5F80\u5FDC\u62BC\u65FA\u6A2A\u6B27\u6BB4\u738B\u7FC1\u8956\u9D2C\u9D0E\u9EC4\u5CA1\u6C96\u837B\u5104\u5C4B\u61B6\u81C6\u6876\u7261\u4E59\u4FFA\u5378\u6069\u6E29\u7A4F\u97F3\u4E0B\u5316\u4EEE\u4F55\u4F3D\u4FA1\u4F73\u52A0\u53EF\u5609\u590F\u5AC1\u5BB6\u5BE1\u79D1\u6687\u679C\u67B6\u6B4C\u6CB3\u706B\u73C2\u798D\u79BE\u7A3C\u7B87\u82B1\u82DB\u8304\u8377\u83EF\u83D3\u8766\u8AB2\u5629\u8CA8\u8FE6\u904E\u971E\u868A\u4FC4\u5CE8\u6211\u7259\u753B\u81E5\u82BD\u86FE\u8CC0\u96C5\u9913\u99D5\u4ECB\u4F1A\u89E3\u56DE\u584A\u58CA\u5EFB\u5FEB\u602A\u6094\u6062\u61D0\u6212\u62D0\u6539\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[137].length; ++j)
        if (D[137][j].charCodeAt(0) !== 65533) {
          e[D[137][j]] = 35072 + j;
          d[35072 + j] = D[137][j];
        }
      D[138] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9B41\u6666\u68B0\u6D77\u7070\u754C\u7686\u7D75\u82A5\u87F9\u958B\u968E\u8C9D\u51F1\u52BE\u5916\u54B3\u5BB3\u5D16\u6168\u6982\u6DAF\u788D\u84CB\u8857\u8A72\u93A7\u9AB8\u6D6C\u99A8\u86D9\u57A3\u67FF\u86CE\u920E\u5283\u5687\u5404\u5ED3\u62E1\u64B9\u683C\u6838\u6BBB\u7372\u78BA\u7A6B\u899A\u89D2\u8D6B\u8F03\u90ED\u95A3\u9694\u9769\u5B66\u5CB3\u697D\u984D\u984E\u639B\u7B20\u6A2B\uFFFD\u6A7F\u68B6\u9C0D\u6F5F\u5272\u559D\u6070\u62EC\u6D3B\u6E07\u6ED1\u845B\u8910\u8F44\u4E14\u9C39\u53F6\u691B\u6A3A\u9784\u682A\u515C\u7AC3\u84B2\u91DC\u938C\u565B\u9D28\u6822\u8305\u8431\u7CA5\u5208\u82C5\u74E6\u4E7E\u4F83\u51A0\u5BD2\u520A\u52D8\u52E7\u5DFB\u559A\u582A\u59E6\u5B8C\u5B98\u5BDB\u5E72\u5E79\u60A3\u611F\u6163\u61BE\u63DB\u6562\u67D1\u6853\u68FA\u6B3E\u6B53\u6C57\u6F22\u6F97\u6F45\u74B0\u7518\u76E3\u770B\u7AFF\u7BA1\u7C21\u7DE9\u7F36\u7FF0\u809D\u8266\u839E\u89B3\u8ACC\u8CAB\u9084\u9451\u9593\u9591\u95A2\u9665\u97D3\u9928\u8218\u4E38\u542B\u5CB8\u5DCC\u73A9\u764C\u773C\u5CA9\u7FEB\u8D0B\u96C1\u9811\u9854\u9858\u4F01\u4F0E\u5371\u559C\u5668\u57FA\u5947\u5B09\u5BC4\u5C90\u5E0C\u5E7E\u5FCC\u63EE\u673A\u65D7\u65E2\u671F\u68CB\u68C4\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[138].length; ++j)
        if (D[138][j].charCodeAt(0) !== 65533) {
          e[D[138][j]] = 35328 + j;
          d[35328 + j] = D[138][j];
        }
      D[139] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6A5F\u5E30\u6BC5\u6C17\u6C7D\u757F\u7948\u5B63\u7A00\u7D00\u5FBD\u898F\u8A18\u8CB4\u8D77\u8ECC\u8F1D\u98E2\u9A0E\u9B3C\u4E80\u507D\u5100\u5993\u5B9C\u622F\u6280\u64EC\u6B3A\u72A0\u7591\u7947\u7FA9\u87FB\u8ABC\u8B70\u63AC\u83CA\u97A0\u5409\u5403\u55AB\u6854\u6A58\u8A70\u7827\u6775\u9ECD\u5374\u5BA2\u811A\u8650\u9006\u4E18\u4E45\u4EC7\u4F11\u53CA\u5438\u5BAE\u5F13\u6025\u6551\uFFFD\u673D\u6C42\u6C72\u6CE3\u7078\u7403\u7A76\u7AAE\u7B08\u7D1A\u7CFE\u7D66\u65E7\u725B\u53BB\u5C45\u5DE8\u62D2\u62E0\u6319\u6E20\u865A\u8A31\u8DDD\u92F8\u6F01\u79A6\u9B5A\u4EA8\u4EAB\u4EAC\u4F9B\u4FA0\u50D1\u5147\u7AF6\u5171\u51F6\u5354\u5321\u537F\u53EB\u55AC\u5883\u5CE1\u5F37\u5F4A\u602F\u6050\u606D\u631F\u6559\u6A4B\u6CC1\u72C2\u72ED\u77EF\u80F8\u8105\u8208\u854E\u90F7\u93E1\u97FF\u9957\u9A5A\u4EF0\u51DD\u5C2D\u6681\u696D\u5C40\u66F2\u6975\u7389\u6850\u7C81\u50C5\u52E4\u5747\u5DFE\u9326\u65A4\u6B23\u6B3D\u7434\u7981\u79BD\u7B4B\u7DCA\u82B9\u83CC\u887F\u895F\u8B39\u8FD1\u91D1\u541F\u9280\u4E5D\u5036\u53E5\u533A\u72D7\u7396\u77E9\u82E6\u8EAF\u99C6\u99C8\u99D2\u5177\u611A\u865E\u55B0\u7A7A\u5076\u5BD3\u9047\u9685\u4E32\u6ADB\u91E7\u5C51\u5C48\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[139].length; ++j)
        if (D[139][j].charCodeAt(0) !== 65533) {
          e[D[139][j]] = 35584 + j;
          d[35584 + j] = D[139][j];
        }
      D[140] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6398\u7A9F\u6C93\u9774\u8F61\u7AAA\u718A\u9688\u7C82\u6817\u7E70\u6851\u936C\u52F2\u541B\u85AB\u8A13\u7FA4\u8ECD\u90E1\u5366\u8888\u7941\u4FC2\u50BE\u5211\u5144\u5553\u572D\u73EA\u578B\u5951\u5F62\u5F84\u6075\u6176\u6167\u61A9\u63B2\u643A\u656C\u666F\u6842\u6E13\u7566\u7A3D\u7CFB\u7D4C\u7D99\u7E4B\u7F6B\u830E\u834A\u86CD\u8A08\u8A63\u8B66\u8EFD\u981A\u9D8F\u82B8\u8FCE\u9BE8\uFFFD\u5287\u621F\u6483\u6FC0\u9699\u6841\u5091\u6B20\u6C7A\u6F54\u7A74\u7D50\u8840\u8A23\u6708\u4EF6\u5039\u5026\u5065\u517C\u5238\u5263\u55A7\u570F\u5805\u5ACC\u5EFA\u61B2\u61F8\u62F3\u6372\u691C\u6A29\u727D\u72AC\u732E\u7814\u786F\u7D79\u770C\u80A9\u898B\u8B19\u8CE2\u8ED2\u9063\u9375\u967A\u9855\u9A13\u9E78\u5143\u539F\u53B3\u5E7B\u5F26\u6E1B\u6E90\u7384\u73FE\u7D43\u8237\u8A00\u8AFA\u9650\u4E4E\u500B\u53E4\u547C\u56FA\u59D1\u5B64\u5DF1\u5EAB\u5F27\u6238\u6545\u67AF\u6E56\u72D0\u7CCA\u88B4\u80A1\u80E1\u83F0\u864E\u8A87\u8DE8\u9237\u96C7\u9867\u9F13\u4E94\u4E92\u4F0D\u5348\u5449\u543E\u5A2F\u5F8C\u5FA1\u609F\u68A7\u6A8E\u745A\u7881\u8A9E\u8AA4\u8B77\u9190\u4E5E\u9BC9\u4EA4\u4F7C\u4FAF\u5019\u5016\u5149\u516C\u529F\u52B9\u52FE\u539A\u53E3\u5411\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[140].length; ++j)
        if (D[140][j].charCodeAt(0) !== 65533) {
          e[D[140][j]] = 35840 + j;
          d[35840 + j] = D[140][j];
        }
      D[141] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u540E\u5589\u5751\u57A2\u597D\u5B54\u5B5D\u5B8F\u5DE5\u5DE7\u5DF7\u5E78\u5E83\u5E9A\u5EB7\u5F18\u6052\u614C\u6297\u62D8\u63A7\u653B\u6602\u6643\u66F4\u676D\u6821\u6897\u69CB\u6C5F\u6D2A\u6D69\u6E2F\u6E9D\u7532\u7687\u786C\u7A3F\u7CE0\u7D05\u7D18\u7D5E\u7DB1\u8015\u8003\u80AF\u80B1\u8154\u818F\u822A\u8352\u884C\u8861\u8B1B\u8CA2\u8CFC\u90CA\u9175\u9271\u783F\u92FC\u95A4\u964D\uFFFD\u9805\u9999\u9AD8\u9D3B\u525B\u52AB\u53F7\u5408\u58D5\u62F7\u6FE0\u8C6A\u8F5F\u9EB9\u514B\u523B\u544A\u56FD\u7A40\u9177\u9D60\u9ED2\u7344\u6F09\u8170\u7511\u5FFD\u60DA\u9AA8\u72DB\u8FBC\u6B64\u9803\u4ECA\u56F0\u5764\u58BE\u5A5A\u6068\u61C7\u660F\u6606\u6839\u68B1\u6DF7\u75D5\u7D3A\u826E\u9B42\u4E9B\u4F50\u53C9\u5506\u5D6F\u5DE6\u5DEE\u67FB\u6C99\u7473\u7802\u8A50\u9396\u88DF\u5750\u5EA7\u632B\u50B5\u50AC\u518D\u6700\u54C9\u585E\u59BB\u5BB0\u5F69\u624D\u63A1\u683D\u6B73\u6E08\u707D\u91C7\u7280\u7815\u7826\u796D\u658E\u7D30\u83DC\u88C1\u8F09\u969B\u5264\u5728\u6750\u7F6A\u8CA1\u51B4\u5742\u962A\u583A\u698A\u80B4\u54B2\u5D0E\u57FC\u7895\u9DFA\u4F5C\u524A\u548B\u643E\u6628\u6714\u67F5\u7A84\u7B56\u7D22\u932F\u685C\u9BAD\u7B39\u5319\u518A\u5237\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[141].length; ++j)
        if (D[141][j].charCodeAt(0) !== 65533) {
          e[D[141][j]] = 36096 + j;
          d[36096 + j] = D[141][j];
        }
      D[142] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5BDF\u62F6\u64AE\u64E6\u672D\u6BBA\u85A9\u96D1\u7690\u9BD6\u634C\u9306\u9BAB\u76BF\u6652\u4E09\u5098\u53C2\u5C71\u60E8\u6492\u6563\u685F\u71E6\u73CA\u7523\u7B97\u7E82\u8695\u8B83\u8CDB\u9178\u9910\u65AC\u66AB\u6B8B\u4ED5\u4ED4\u4F3A\u4F7F\u523A\u53F8\u53F2\u55E3\u56DB\u58EB\u59CB\u59C9\u59FF\u5B50\u5C4D\u5E02\u5E2B\u5FD7\u601D\u6307\u652F\u5B5C\u65AF\u65BD\u65E8\u679D\u6B62\uFFFD\u6B7B\u6C0F\u7345\u7949\u79C1\u7CF8\u7D19\u7D2B\u80A2\u8102\u81F3\u8996\u8A5E\u8A69\u8A66\u8A8C\u8AEE\u8CC7\u8CDC\u96CC\u98FC\u6B6F\u4E8B\u4F3C\u4F8D\u5150\u5B57\u5BFA\u6148\u6301\u6642\u6B21\u6ECB\u6CBB\u723E\u74BD\u75D4\u78C1\u793A\u800C\u8033\u81EA\u8494\u8F9E\u6C50\u9E7F\u5F0F\u8B58\u9D2B\u7AFA\u8EF8\u5B8D\u96EB\u4E03\u53F1\u57F7\u5931\u5AC9\u5BA4\u6089\u6E7F\u6F06\u75BE\u8CEA\u5B9F\u8500\u7BE0\u5072\u67F4\u829D\u5C61\u854A\u7E1E\u820E\u5199\u5C04\u6368\u8D66\u659C\u716E\u793E\u7D17\u8005\u8B1D\u8ECA\u906E\u86C7\u90AA\u501F\u52FA\u5C3A\u6753\u707C\u7235\u914C\u91C8\u932B\u82E5\u5BC2\u5F31\u60F9\u4E3B\u53D6\u5B88\u624B\u6731\u6B8A\u72E9\u73E0\u7A2E\u816B\u8DA3\u9152\u9996\u5112\u53D7\u546A\u5BFF\u6388\u6A39\u7DAC\u9700\u56DA\u53CE\u5468\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[142].length; ++j)
        if (D[142][j].charCodeAt(0) !== 65533) {
          e[D[142][j]] = 36352 + j;
          d[36352 + j] = D[142][j];
        }
      D[143] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5B97\u5C31\u5DDE\u4FEE\u6101\u62FE\u6D32\u79C0\u79CB\u7D42\u7E4D\u7FD2\u81ED\u821F\u8490\u8846\u8972\u8B90\u8E74\u8F2F\u9031\u914B\u916C\u96C6\u919C\u4EC0\u4F4F\u5145\u5341\u5F93\u620E\u67D4\u6C41\u6E0B\u7363\u7E26\u91CD\u9283\u53D4\u5919\u5BBF\u6DD1\u795D\u7E2E\u7C9B\u587E\u719F\u51FA\u8853\u8FF0\u4FCA\u5CFB\u6625\u77AC\u7AE3\u821C\u99FF\u51C6\u5FAA\u65EC\u696F\u6B89\u6DF3\uFFFD\u6E96\u6F64\u76FE\u7D14\u5DE1\u9075\u9187\u9806\u51E6\u521D\u6240\u6691\u66D9\u6E1A\u5EB6\u7DD2\u7F72\u66F8\u85AF\u85F7\u8AF8\u52A9\u53D9\u5973\u5E8F\u5F90\u6055\u92E4\u9664\u50B7\u511F\u52DD\u5320\u5347\u53EC\u54E8\u5546\u5531\u5617\u5968\u59BE\u5A3C\u5BB5\u5C06\u5C0F\u5C11\u5C1A\u5E84\u5E8A\u5EE0\u5F70\u627F\u6284\u62DB\u638C\u6377\u6607\u660C\u662D\u6676\u677E\u68A2\u6A1F\u6A35\u6CBC\u6D88\u6E09\u6E58\u713C\u7126\u7167\u75C7\u7701\u785D\u7901\u7965\u79F0\u7AE0\u7B11\u7CA7\u7D39\u8096\u83D6\u848B\u8549\u885D\u88F3\u8A1F\u8A3C\u8A54\u8A73\u8C61\u8CDE\u91A4\u9266\u937E\u9418\u969C\u9798\u4E0A\u4E08\u4E1E\u4E57\u5197\u5270\u57CE\u5834\u58CC\u5B22\u5E38\u60C5\u64FE\u6761\u6756\u6D44\u72B6\u7573\u7A63\u84B8\u8B72\u91B8\u9320\u5631\u57F4\u98FE\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[143].length; ++j)
        if (D[143][j].charCodeAt(0) !== 65533) {
          e[D[143][j]] = 36608 + j;
          d[36608 + j] = D[143][j];
        }
      D[144] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u62ED\u690D\u6B96\u71ED\u7E54\u8077\u8272\u89E6\u98DF\u8755\u8FB1\u5C3B\u4F38\u4FE1\u4FB5\u5507\u5A20\u5BDD\u5BE9\u5FC3\u614E\u632F\u65B0\u664B\u68EE\u699B\u6D78\u6DF1\u7533\u75B9\u771F\u795E\u79E6\u7D33\u81E3\u82AF\u85AA\u89AA\u8A3A\u8EAB\u8F9B\u9032\u91DD\u9707\u4EBA\u4EC1\u5203\u5875\u58EC\u5C0B\u751A\u5C3D\u814E\u8A0A\u8FC5\u9663\u976D\u7B25\u8ACF\u9808\u9162\u56F3\u53A8\uFFFD\u9017\u5439\u5782\u5E25\u63A8\u6C34\u708A\u7761\u7C8B\u7FE0\u8870\u9042\u9154\u9310\u9318\u968F\u745E\u9AC4\u5D07\u5D69\u6570\u67A2\u8DA8\u96DB\u636E\u6749\u6919\u83C5\u9817\u96C0\u88FE\u6F84\u647A\u5BF8\u4E16\u702C\u755D\u662F\u51C4\u5236\u52E2\u59D3\u5F81\u6027\u6210\u653F\u6574\u661F\u6674\u68F2\u6816\u6B63\u6E05\u7272\u751F\u76DB\u7CBE\u8056\u58F0\u88FD\u897F\u8AA0\u8A93\u8ACB\u901D\u9192\u9752\u9759\u6589\u7A0E\u8106\u96BB\u5E2D\u60DC\u621A\u65A5\u6614\u6790\u77F3\u7A4D\u7C4D\u7E3E\u810A\u8CAC\u8D64\u8DE1\u8E5F\u78A9\u5207\u62D9\u63A5\u6442\u6298\u8A2D\u7A83\u7BC0\u8AAC\u96EA\u7D76\u820C\u8749\u4ED9\u5148\u5343\u5360\u5BA3\u5C02\u5C16\u5DDD\u6226\u6247\u64B0\u6813\u6834\u6CC9\u6D45\u6D17\u67D3\u6F5C\u714E\u717D\u65CB\u7A7F\u7BAD\u7DDA\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[144].length; ++j)
        if (D[144][j].charCodeAt(0) !== 65533) {
          e[D[144][j]] = 36864 + j;
          d[36864 + j] = D[144][j];
        }
      D[145] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7E4A\u7FA8\u817A\u821B\u8239\u85A6\u8A6E\u8CCE\u8DF5\u9078\u9077\u92AD\u9291\u9583\u9BAE\u524D\u5584\u6F38\u7136\u5168\u7985\u7E55\u81B3\u7CCE\u564C\u5851\u5CA8\u63AA\u66FE\u66FD\u695A\u72D9\u758F\u758E\u790E\u7956\u79DF\u7C97\u7D20\u7D44\u8607\u8A34\u963B\u9061\u9F20\u50E7\u5275\u53CC\u53E2\u5009\u55AA\u58EE\u594F\u723D\u5B8B\u5C64\u531D\u60E3\u60F3\u635C\u6383\u633F\u63BB\uFFFD\u64CD\u65E9\u66F9\u5DE3\u69CD\u69FD\u6F15\u71E5\u4E89\u75E9\u76F8\u7A93\u7CDF\u7DCF\u7D9C\u8061\u8349\u8358\u846C\u84BC\u85FB\u88C5\u8D70\u9001\u906D\u9397\u971C\u9A12\u50CF\u5897\u618E\u81D3\u8535\u8D08\u9020\u4FC3\u5074\u5247\u5373\u606F\u6349\u675F\u6E2C\u8DB3\u901F\u4FD7\u5C5E\u8CCA\u65CF\u7D9A\u5352\u8896\u5176\u63C3\u5B58\u5B6B\u5C0A\u640D\u6751\u905C\u4ED6\u591A\u592A\u6C70\u8A51\u553E\u5815\u59A5\u60F0\u6253\u67C1\u8235\u6955\u9640\u99C4\u9A28\u4F53\u5806\u5BFE\u8010\u5CB1\u5E2F\u5F85\u6020\u614B\u6234\u66FF\u6CF0\u6EDE\u80CE\u817F\u82D4\u888B\u8CB8\u9000\u902E\u968A\u9EDB\u9BDB\u4EE3\u53F0\u5927\u7B2C\u918D\u984C\u9DF9\u6EDD\u7027\u5353\u5544\u5B85\u6258\u629E\u62D3\u6CA2\u6FEF\u7422\u8A17\u9438\u6FC1\u8AFE\u8338\u51E7\u86F8\u53EA\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[145].length; ++j)
        if (D[145][j].charCodeAt(0) !== 65533) {
          e[D[145][j]] = 37120 + j;
          d[37120 + j] = D[145][j];
        }
      D[146] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u53E9\u4F46\u9054\u8FB0\u596A\u8131\u5DFD\u7AEA\u8FBF\u68DA\u8C37\u72F8\u9C48\u6A3D\u8AB0\u4E39\u5358\u5606\u5766\u62C5\u63A2\u65E6\u6B4E\u6DE1\u6E5B\u70AD\u77ED\u7AEF\u7BAA\u7DBB\u803D\u80C6\u86CB\u8A95\u935B\u56E3\u58C7\u5F3E\u65AD\u6696\u6A80\u6BB5\u7537\u8AC7\u5024\u77E5\u5730\u5F1B\u6065\u667A\u6C60\u75F4\u7A1A\u7F6E\u81F4\u8718\u9045\u99B3\u7BC9\u755C\u7AF9\u7B51\u84C4\uFFFD\u9010\u79E9\u7A92\u8336\u5AE1\u7740\u4E2D\u4EF2\u5B99\u5FE0\u62BD\u663C\u67F1\u6CE8\u866B\u8877\u8A3B\u914E\u92F3\u99D0\u6A17\u7026\u732A\u82E7\u8457\u8CAF\u4E01\u5146\u51CB\u558B\u5BF5\u5E16\u5E33\u5E81\u5F14\u5F35\u5F6B\u5FB4\u61F2\u6311\u66A2\u671D\u6F6E\u7252\u753A\u773A\u8074\u8139\u8178\u8776\u8ABF\u8ADC\u8D85\u8DF3\u929A\u9577\u9802\u9CE5\u52C5\u6357\u76F4\u6715\u6C88\u73CD\u8CC3\u93AE\u9673\u6D25\u589C\u690E\u69CC\u8FFD\u939A\u75DB\u901A\u585A\u6802\u63B4\u69FB\u4F43\u6F2C\u67D8\u8FBB\u8526\u7DB4\u9354\u693F\u6F70\u576A\u58F7\u5B2C\u7D2C\u722A\u540A\u91E3\u9DB4\u4EAD\u4F4E\u505C\u5075\u5243\u8C9E\u5448\u5824\u5B9A\u5E1D\u5E95\u5EAD\u5EF7\u5F1F\u608C\u62B5\u633A\u63D0\u68AF\u6C40\u7887\u798E\u7A0B\u7DE0\u8247\u8A02\u8AE6\u8E44\u9013\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[146].length; ++j)
        if (D[146][j].charCodeAt(0) !== 65533) {
          e[D[146][j]] = 37376 + j;
          d[37376 + j] = D[146][j];
        }
      D[147] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u90B8\u912D\u91D8\u9F0E\u6CE5\u6458\u64E2\u6575\u6EF4\u7684\u7B1B\u9069\u93D1\u6EBA\u54F2\u5FB9\u64A4\u8F4D\u8FED\u9244\u5178\u586B\u5929\u5C55\u5E97\u6DFB\u7E8F\u751C\u8CBC\u8EE2\u985B\u70B9\u4F1D\u6BBF\u6FB1\u7530\u96FB\u514E\u5410\u5835\u5857\u59AC\u5C60\u5F92\u6597\u675C\u6E21\u767B\u83DF\u8CED\u9014\u90FD\u934D\u7825\u783A\u52AA\u5EA6\u571F\u5974\u6012\u5012\u515A\u51AC\uFFFD\u51CD\u5200\u5510\u5854\u5858\u5957\u5B95\u5CF6\u5D8B\u60BC\u6295\u642D\u6771\u6843\u68BC\u68DF\u76D7\u6DD8\u6E6F\u6D9B\u706F\u71C8\u5F53\u75D8\u7977\u7B49\u7B54\u7B52\u7CD6\u7D71\u5230\u8463\u8569\u85E4\u8A0E\u8B04\u8C46\u8E0F\u9003\u900F\u9419\u9676\u982D\u9A30\u95D8\u50CD\u52D5\u540C\u5802\u5C0E\u61A7\u649E\u6D1E\u77B3\u7AE5\u80F4\u8404\u9053\u9285\u5CE0\u9D07\u533F\u5F97\u5FB3\u6D9C\u7279\u7763\u79BF\u7BE4\u6BD2\u72EC\u8AAD\u6803\u6A61\u51F8\u7A81\u6934\u5C4A\u9CF6\u82EB\u5BC5\u9149\u701E\u5678\u5C6F\u60C7\u6566\u6C8C\u8C5A\u9041\u9813\u5451\u66C7\u920D\u5948\u90A3\u5185\u4E4D\u51EA\u8599\u8B0E\u7058\u637A\u934B\u6962\u99B4\u7E04\u7577\u5357\u6960\u8EDF\u96E3\u6C5D\u4E8C\u5C3C\u5F10\u8FE9\u5302\u8CD1\u8089\u8679\u5EFF\u65E5\u4E73\u5165\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[147].length; ++j)
        if (D[147][j].charCodeAt(0) !== 65533) {
          e[D[147][j]] = 37632 + j;
          d[37632 + j] = D[147][j];
        }
      D[148] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5982\u5C3F\u97EE\u4EFB\u598A\u5FCD\u8A8D\u6FE1\u79B0\u7962\u5BE7\u8471\u732B\u71B1\u5E74\u5FF5\u637B\u649A\u71C3\u7C98\u4E43\u5EFC\u4E4B\u57DC\u56A2\u60A9\u6FC3\u7D0D\u80FD\u8133\u81BF\u8FB2\u8997\u86A4\u5DF4\u628A\u64AD\u8987\u6777\u6CE2\u6D3E\u7436\u7834\u5A46\u7F75\u82AD\u99AC\u4FF3\u5EC3\u62DD\u6392\u6557\u676F\u76C3\u724C\u80CC\u80BA\u8F29\u914D\u500D\u57F9\u5A92\u6885\uFFFD\u6973\u7164\u72FD\u8CB7\u58F2\u8CE0\u966A\u9019\u877F\u79E4\u77E7\u8429\u4F2F\u5265\u535A\u62CD\u67CF\u6CCA\u767D\u7B94\u7C95\u8236\u8584\u8FEB\u66DD\u6F20\u7206\u7E1B\u83AB\u99C1\u9EA6\u51FD\u7BB1\u7872\u7BB8\u8087\u7B48\u6AE8\u5E61\u808C\u7551\u7560\u516B\u9262\u6E8C\u767A\u9197\u9AEA\u4F10\u7F70\u629C\u7B4F\u95A5\u9CE9\u567A\u5859\u86E4\u96BC\u4F34\u5224\u534A\u53CD\u53DB\u5E06\u642C\u6591\u677F\u6C3E\u6C4E\u7248\u72AF\u73ED\u7554\u7E41\u822C\u85E9\u8CA9\u7BC4\u91C6\u7169\u9812\u98EF\u633D\u6669\u756A\u76E4\u78D0\u8543\u86EE\u532A\u5351\u5426\u5983\u5E87\u5F7C\u60B2\u6249\u6279\u62AB\u6590\u6BD4\u6CCC\u75B2\u76AE\u7891\u79D8\u7DCB\u7F77\u80A5\u88AB\u8AB9\u8CBB\u907F\u975E\u98DB\u6A0B\u7C38\u5099\u5C3E\u5FAE\u6787\u6BD8\u7435\u7709\u7F8E\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[148].length; ++j)
        if (D[148][j].charCodeAt(0) !== 65533) {
          e[D[148][j]] = 37888 + j;
          d[37888 + j] = D[148][j];
        }
      D[149] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9F3B\u67CA\u7A17\u5339\u758B\u9AED\u5F66\u819D\u83F1\u8098\u5F3C\u5FC5\u7562\u7B46\u903C\u6867\u59EB\u5A9B\u7D10\u767E\u8B2C\u4FF5\u5F6A\u6A19\u6C37\u6F02\u74E2\u7968\u8868\u8A55\u8C79\u5EDF\u63CF\u75C5\u79D2\u82D7\u9328\u92F2\u849C\u86ED\u9C2D\u54C1\u5F6C\u658C\u6D5C\u7015\u8CA7\u8CD3\u983B\u654F\u74F6\u4E0D\u4ED8\u57E0\u592B\u5A66\u5BCC\u51A8\u5E03\u5E9C\u6016\u6276\u6577\uFFFD\u65A7\u666E\u6D6E\u7236\u7B26\u8150\u819A\u8299\u8B5C\u8CA0\u8CE6\u8D74\u961C\u9644\u4FAE\u64AB\u6B66\u821E\u8461\u856A\u90E8\u5C01\u6953\u98A8\u847A\u8557\u4F0F\u526F\u5FA9\u5E45\u670D\u798F\u8179\u8907\u8986\u6DF5\u5F17\u6255\u6CB8\u4ECF\u7269\u9B92\u5206\u543B\u5674\u58B3\u61A4\u626E\u711A\u596E\u7C89\u7CDE\u7D1B\u96F0\u6587\u805E\u4E19\u4F75\u5175\u5840\u5E63\u5E73\u5F0A\u67C4\u4E26\u853D\u9589\u965B\u7C73\u9801\u50FB\u58C1\u7656\u78A7\u5225\u77A5\u8511\u7B86\u504F\u5909\u7247\u7BC7\u7DE8\u8FBA\u8FD4\u904D\u4FBF\u52C9\u5A29\u5F01\u97AD\u4FDD\u8217\u92EA\u5703\u6355\u6B69\u752B\u88DC\u8F14\u7A42\u52DF\u5893\u6155\u620A\u66AE\u6BCD\u7C3F\u83E9\u5023\u4FF8\u5305\u5446\u5831\u5949\u5B9D\u5CF0\u5CEF\u5D29\u5E96\u62B1\u6367\u653E\u65B9\u670B\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[149].length; ++j)
        if (D[149][j].charCodeAt(0) !== 65533) {
          e[D[149][j]] = 38144 + j;
          d[38144 + j] = D[149][j];
        }
      D[150] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6CD5\u6CE1\u70F9\u7832\u7E2B\u80DE\u82B3\u840C\u84EC\u8702\u8912\u8A2A\u8C4A\u90A6\u92D2\u98FD\u9CF3\u9D6C\u4E4F\u4EA1\u508D\u5256\u574A\u59A8\u5E3D\u5FD8\u5FD9\u623F\u66B4\u671B\u67D0\u68D2\u5192\u7D21\u80AA\u81A8\u8B00\u8C8C\u8CBF\u927E\u9632\u5420\u982C\u5317\u50D5\u535C\u58A8\u64B2\u6734\u7267\u7766\u7A46\u91E6\u52C3\u6CA1\u6B86\u5800\u5E4C\u5954\u672C\u7FFB\u51E1\u76C6\uFFFD\u6469\u78E8\u9B54\u9EBB\u57CB\u59B9\u6627\u679A\u6BCE\u54E9\u69D9\u5E55\u819C\u6795\u9BAA\u67FE\u9C52\u685D\u4EA6\u4FE3\u53C8\u62B9\u672B\u6CAB\u8FC4\u4FAD\u7E6D\u9EBF\u4E07\u6162\u6E80\u6F2B\u8513\u5473\u672A\u9B45\u5DF3\u7B95\u5CAC\u5BC6\u871C\u6E4A\u84D1\u7A14\u8108\u5999\u7C8D\u6C11\u7720\u52D9\u5922\u7121\u725F\u77DB\u9727\u9D61\u690B\u5A7F\u5A18\u51A5\u540D\u547D\u660E\u76DF\u8FF7\u9298\u9CF4\u59EA\u725D\u6EC5\u514D\u68C9\u7DBF\u7DEC\u9762\u9EBA\u6478\u6A21\u8302\u5984\u5B5F\u6BDB\u731B\u76F2\u7DB2\u8017\u8499\u5132\u6728\u9ED9\u76EE\u6762\u52FF\u9905\u5C24\u623B\u7C7E\u8CB0\u554F\u60B6\u7D0B\u9580\u5301\u4E5F\u51B6\u591C\u723A\u8036\u91CE\u5F25\u77E2\u5384\u5F79\u7D04\u85AC\u8A33\u8E8D\u9756\u67F3\u85AE\u9453\u6109\u6108\u6CB9\u7652\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[150].length; ++j)
        if (D[150][j].charCodeAt(0) !== 65533) {
          e[D[150][j]] = 38400 + j;
          d[38400 + j] = D[150][j];
        }
      D[151] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8AED\u8F38\u552F\u4F51\u512A\u52C7\u53CB\u5BA5\u5E7D\u60A0\u6182\u63D6\u6709\u67DA\u6E67\u6D8C\u7336\u7337\u7531\u7950\u88D5\u8A98\u904A\u9091\u90F5\u96C4\u878D\u5915\u4E88\u4F59\u4E0E\u8A89\u8F3F\u9810\u50AD\u5E7C\u5996\u5BB9\u5EB8\u63DA\u63FA\u64C1\u66DC\u694A\u69D8\u6D0B\u6EB6\u7194\u7528\u7AAF\u7F8A\u8000\u8449\u84C9\u8981\u8B21\u8E0A\u9065\u967D\u990A\u617E\u6291\u6B32\uFFFD\u6C83\u6D74\u7FCC\u7FFC\u6DC0\u7F85\u87BA\u88F8\u6765\u83B1\u983C\u96F7\u6D1B\u7D61\u843D\u916A\u4E71\u5375\u5D50\u6B04\u6FEB\u85CD\u862D\u89A7\u5229\u540F\u5C65\u674E\u68A8\u7406\u7483\u75E2\u88CF\u88E1\u91CC\u96E2\u9678\u5F8B\u7387\u7ACB\u844E\u63A0\u7565\u5289\u6D41\u6E9C\u7409\u7559\u786B\u7C92\u9686\u7ADC\u9F8D\u4FB6\u616E\u65C5\u865C\u4E86\u4EAE\u50DA\u4E21\u51CC\u5BEE\u6599\u6881\u6DBC\u731F\u7642\u77AD\u7A1C\u7CE7\u826F\u8AD2\u907C\u91CF\u9675\u9818\u529B\u7DD1\u502B\u5398\u6797\u6DCB\u71D0\u7433\u81E8\u8F2A\u96A3\u9C57\u9E9F\u7460\u5841\u6D99\u7D2F\u985E\u4EE4\u4F36\u4F8B\u51B7\u52B1\u5DBA\u601C\u73B2\u793C\u82D3\u9234\u96B7\u96F6\u970A\u9E97\u9F62\u66A6\u6B74\u5217\u52A3\u70C8\u88C2\u5EC9\u604B\u6190\u6F23\u7149\u7C3E\u7DF4\u806F\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[151].length; ++j)
        if (D[151][j].charCodeAt(0) !== 65533) {
          e[D[151][j]] = 38656 + j;
          d[38656 + j] = D[151][j];
        }
      D[152] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u84EE\u9023\u932C\u5442\u9B6F\u6AD3\u7089\u8CC2\u8DEF\u9732\u52B4\u5A41\u5ECA\u5F04\u6717\u697C\u6994\u6D6A\u6F0F\u7262\u72FC\u7BED\u8001\u807E\u874B\u90CE\u516D\u9E93\u7984\u808B\u9332\u8AD6\u502D\u548C\u8A71\u6B6A\u8CC4\u8107\u60D1\u67A0\u9DF2\u4E99\u4E98\u9C10\u8A6B\u85C1\u8568\u6900\u6E7E\u7897\u8155\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5F0C\u4E10\u4E15\u4E2A\u4E31\u4E36\u4E3C\u4E3F\u4E42\u4E56\u4E58\u4E82\u4E85\u8C6B\u4E8A\u8212\u5F0D\u4E8E\u4E9E\u4E9F\u4EA0\u4EA2\u4EB0\u4EB3\u4EB6\u4ECE\u4ECD\u4EC4\u4EC6\u4EC2\u4ED7\u4EDE\u4EED\u4EDF\u4EF7\u4F09\u4F5A\u4F30\u4F5B\u4F5D\u4F57\u4F47\u4F76\u4F88\u4F8F\u4F98\u4F7B\u4F69\u4F70\u4F91\u4F6F\u4F86\u4F96\u5118\u4FD4\u4FDF\u4FCE\u4FD8\u4FDB\u4FD1\u4FDA\u4FD0\u4FE4\u4FE5\u501A\u5028\u5014\u502A\u5025\u5005\u4F1C\u4FF6\u5021\u5029\u502C\u4FFE\u4FEF\u5011\u5006\u5043\u5047\u6703\u5055\u5050\u5048\u505A\u5056\u506C\u5078\u5080\u509A\u5085\u50B4\u50B2\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[152].length; ++j)
        if (D[152][j].charCodeAt(0) !== 65533) {
          e[D[152][j]] = 38912 + j;
          d[38912 + j] = D[152][j];
        }
      D[153] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u50C9\u50CA\u50B3\u50C2\u50D6\u50DE\u50E5\u50ED\u50E3\u50EE\u50F9\u50F5\u5109\u5101\u5102\u5116\u5115\u5114\u511A\u5121\u513A\u5137\u513C\u513B\u513F\u5140\u5152\u514C\u5154\u5162\u7AF8\u5169\u516A\u516E\u5180\u5182\u56D8\u518C\u5189\u518F\u5191\u5193\u5195\u5196\u51A4\u51A6\u51A2\u51A9\u51AA\u51AB\u51B3\u51B1\u51B2\u51B0\u51B5\u51BD\u51C5\u51C9\u51DB\u51E0\u8655\u51E9\u51ED\uFFFD\u51F0\u51F5\u51FE\u5204\u520B\u5214\u520E\u5227\u522A\u522E\u5233\u5239\u524F\u5244\u524B\u524C\u525E\u5254\u526A\u5274\u5269\u5273\u527F\u527D\u528D\u5294\u5292\u5271\u5288\u5291\u8FA8\u8FA7\u52AC\u52AD\u52BC\u52B5\u52C1\u52CD\u52D7\u52DE\u52E3\u52E6\u98ED\u52E0\u52F3\u52F5\u52F8\u52F9\u5306\u5308\u7538\u530D\u5310\u530F\u5315\u531A\u5323\u532F\u5331\u5333\u5338\u5340\u5346\u5345\u4E17\u5349\u534D\u51D6\u535E\u5369\u536E\u5918\u537B\u5377\u5382\u5396\u53A0\u53A6\u53A5\u53AE\u53B0\u53B6\u53C3\u7C12\u96D9\u53DF\u66FC\u71EE\u53EE\u53E8\u53ED\u53FA\u5401\u543D\u5440\u542C\u542D\u543C\u542E\u5436\u5429\u541D\u544E\u548F\u5475\u548E\u545F\u5471\u5477\u5470\u5492\u547B\u5480\u5476\u5484\u5490\u5486\u54C7\u54A2\u54B8\u54A5\u54AC\u54C4\u54C8\u54A8\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[153].length; ++j)
        if (D[153][j].charCodeAt(0) !== 65533) {
          e[D[153][j]] = 39168 + j;
          d[39168 + j] = D[153][j];
        }
      D[154] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u54AB\u54C2\u54A4\u54BE\u54BC\u54D8\u54E5\u54E6\u550F\u5514\u54FD\u54EE\u54ED\u54FA\u54E2\u5539\u5540\u5563\u554C\u552E\u555C\u5545\u5556\u5557\u5538\u5533\u555D\u5599\u5580\u54AF\u558A\u559F\u557B\u557E\u5598\u559E\u55AE\u557C\u5583\u55A9\u5587\u55A8\u55DA\u55C5\u55DF\u55C4\u55DC\u55E4\u55D4\u5614\u55F7\u5616\u55FE\u55FD\u561B\u55F9\u564E\u5650\u71DF\u5634\u5636\u5632\u5638\uFFFD\u566B\u5664\u562F\u566C\u566A\u5686\u5680\u568A\u56A0\u5694\u568F\u56A5\u56AE\u56B6\u56B4\u56C2\u56BC\u56C1\u56C3\u56C0\u56C8\u56CE\u56D1\u56D3\u56D7\u56EE\u56F9\u5700\u56FF\u5704\u5709\u5708\u570B\u570D\u5713\u5718\u5716\u55C7\u571C\u5726\u5737\u5738\u574E\u573B\u5740\u574F\u5769\u57C0\u5788\u5761\u577F\u5789\u5793\u57A0\u57B3\u57A4\u57AA\u57B0\u57C3\u57C6\u57D4\u57D2\u57D3\u580A\u57D6\u57E3\u580B\u5819\u581D\u5872\u5821\u5862\u584B\u5870\u6BC0\u5852\u583D\u5879\u5885\u58B9\u589F\u58AB\u58BA\u58DE\u58BB\u58B8\u58AE\u58C5\u58D3\u58D1\u58D7\u58D9\u58D8\u58E5\u58DC\u58E4\u58DF\u58EF\u58FA\u58F9\u58FB\u58FC\u58FD\u5902\u590A\u5910\u591B\u68A6\u5925\u592C\u592D\u5932\u5938\u593E\u7AD2\u5955\u5950\u594E\u595A\u5958\u5962\u5960\u5967\u596C\u5969\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[154].length; ++j)
        if (D[154][j].charCodeAt(0) !== 65533) {
          e[D[154][j]] = 39424 + j;
          d[39424 + j] = D[154][j];
        }
      D[155] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5978\u5981\u599D\u4F5E\u4FAB\u59A3\u59B2\u59C6\u59E8\u59DC\u598D\u59D9\u59DA\u5A25\u5A1F\u5A11\u5A1C\u5A09\u5A1A\u5A40\u5A6C\u5A49\u5A35\u5A36\u5A62\u5A6A\u5A9A\u5ABC\u5ABE\u5ACB\u5AC2\u5ABD\u5AE3\u5AD7\u5AE6\u5AE9\u5AD6\u5AFA\u5AFB\u5B0C\u5B0B\u5B16\u5B32\u5AD0\u5B2A\u5B36\u5B3E\u5B43\u5B45\u5B40\u5B51\u5B55\u5B5A\u5B5B\u5B65\u5B69\u5B70\u5B73\u5B75\u5B78\u6588\u5B7A\u5B80\uFFFD\u5B83\u5BA6\u5BB8\u5BC3\u5BC7\u5BC9\u5BD4\u5BD0\u5BE4\u5BE6\u5BE2\u5BDE\u5BE5\u5BEB\u5BF0\u5BF6\u5BF3\u5C05\u5C07\u5C08\u5C0D\u5C13\u5C20\u5C22\u5C28\u5C38\u5C39\u5C41\u5C46\u5C4E\u5C53\u5C50\u5C4F\u5B71\u5C6C\u5C6E\u4E62\u5C76\u5C79\u5C8C\u5C91\u5C94\u599B\u5CAB\u5CBB\u5CB6\u5CBC\u5CB7\u5CC5\u5CBE\u5CC7\u5CD9\u5CE9\u5CFD\u5CFA\u5CED\u5D8C\u5CEA\u5D0B\u5D15\u5D17\u5D5C\u5D1F\u5D1B\u5D11\u5D14\u5D22\u5D1A\u5D19\u5D18\u5D4C\u5D52\u5D4E\u5D4B\u5D6C\u5D73\u5D76\u5D87\u5D84\u5D82\u5DA2\u5D9D\u5DAC\u5DAE\u5DBD\u5D90\u5DB7\u5DBC\u5DC9\u5DCD\u5DD3\u5DD2\u5DD6\u5DDB\u5DEB\u5DF2\u5DF5\u5E0B\u5E1A\u5E19\u5E11\u5E1B\u5E36\u5E37\u5E44\u5E43\u5E40\u5E4E\u5E57\u5E54\u5E5F\u5E62\u5E64\u5E47\u5E75\u5E76\u5E7A\u9EBC\u5E7F\u5EA0\u5EC1\u5EC2\u5EC8\u5ED0\u5ECF\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[155].length; ++j)
        if (D[155][j].charCodeAt(0) !== 65533) {
          e[D[155][j]] = 39680 + j;
          d[39680 + j] = D[155][j];
        }
      D[156] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5ED6\u5EE3\u5EDD\u5EDA\u5EDB\u5EE2\u5EE1\u5EE8\u5EE9\u5EEC\u5EF1\u5EF3\u5EF0\u5EF4\u5EF8\u5EFE\u5F03\u5F09\u5F5D\u5F5C\u5F0B\u5F11\u5F16\u5F29\u5F2D\u5F38\u5F41\u5F48\u5F4C\u5F4E\u5F2F\u5F51\u5F56\u5F57\u5F59\u5F61\u5F6D\u5F73\u5F77\u5F83\u5F82\u5F7F\u5F8A\u5F88\u5F91\u5F87\u5F9E\u5F99\u5F98\u5FA0\u5FA8\u5FAD\u5FBC\u5FD6\u5FFB\u5FE4\u5FF8\u5FF1\u5FDD\u60B3\u5FFF\u6021\u6060\uFFFD\u6019\u6010\u6029\u600E\u6031\u601B\u6015\u602B\u6026\u600F\u603A\u605A\u6041\u606A\u6077\u605F\u604A\u6046\u604D\u6063\u6043\u6064\u6042\u606C\u606B\u6059\u6081\u608D\u60E7\u6083\u609A\u6084\u609B\u6096\u6097\u6092\u60A7\u608B\u60E1\u60B8\u60E0\u60D3\u60B4\u5FF0\u60BD\u60C6\u60B5\u60D8\u614D\u6115\u6106\u60F6\u60F7\u6100\u60F4\u60FA\u6103\u6121\u60FB\u60F1\u610D\u610E\u6147\u613E\u6128\u6127\u614A\u613F\u613C\u612C\u6134\u613D\u6142\u6144\u6173\u6177\u6158\u6159\u615A\u616B\u6174\u616F\u6165\u6171\u615F\u615D\u6153\u6175\u6199\u6196\u6187\u61AC\u6194\u619A\u618A\u6191\u61AB\u61AE\u61CC\u61CA\u61C9\u61F7\u61C8\u61C3\u61C6\u61BA\u61CB\u7F79\u61CD\u61E6\u61E3\u61F6\u61FA\u61F4\u61FF\u61FD\u61FC\u61FE\u6200\u6208\u6209\u620D\u620C\u6214\u621B\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[156].length; ++j)
        if (D[156][j].charCodeAt(0) !== 65533) {
          e[D[156][j]] = 39936 + j;
          d[39936 + j] = D[156][j];
        }
      D[157] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u621E\u6221\u622A\u622E\u6230\u6232\u6233\u6241\u624E\u625E\u6263\u625B\u6260\u6268\u627C\u6282\u6289\u627E\u6292\u6293\u6296\u62D4\u6283\u6294\u62D7\u62D1\u62BB\u62CF\u62FF\u62C6\u64D4\u62C8\u62DC\u62CC\u62CA\u62C2\u62C7\u629B\u62C9\u630C\u62EE\u62F1\u6327\u6302\u6308\u62EF\u62F5\u6350\u633E\u634D\u641C\u634F\u6396\u638E\u6380\u63AB\u6376\u63A3\u638F\u6389\u639F\u63B5\u636B\uFFFD\u6369\u63BE\u63E9\u63C0\u63C6\u63E3\u63C9\u63D2\u63F6\u63C4\u6416\u6434\u6406\u6413\u6426\u6436\u651D\u6417\u6428\u640F\u6467\u646F\u6476\u644E\u652A\u6495\u6493\u64A5\u64A9\u6488\u64BC\u64DA\u64D2\u64C5\u64C7\u64BB\u64D8\u64C2\u64F1\u64E7\u8209\u64E0\u64E1\u62AC\u64E3\u64EF\u652C\u64F6\u64F4\u64F2\u64FA\u6500\u64FD\u6518\u651C\u6505\u6524\u6523\u652B\u6534\u6535\u6537\u6536\u6538\u754B\u6548\u6556\u6555\u654D\u6558\u655E\u655D\u6572\u6578\u6582\u6583\u8B8A\u659B\u659F\u65AB\u65B7\u65C3\u65C6\u65C1\u65C4\u65CC\u65D2\u65DB\u65D9\u65E0\u65E1\u65F1\u6772\u660A\u6603\u65FB\u6773\u6635\u6636\u6634\u661C\u664F\u6644\u6649\u6641\u665E\u665D\u6664\u6667\u6668\u665F\u6662\u6670\u6683\u6688\u668E\u6689\u6684\u6698\u669D\u66C1\u66B9\u66C9\u66BE\u66BC\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[157].length; ++j)
        if (D[157][j].charCodeAt(0) !== 65533) {
          e[D[157][j]] = 40192 + j;
          d[40192 + j] = D[157][j];
        }
      D[158] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u66C4\u66B8\u66D6\u66DA\u66E0\u663F\u66E6\u66E9\u66F0\u66F5\u66F7\u670F\u6716\u671E\u6726\u6727\u9738\u672E\u673F\u6736\u6741\u6738\u6737\u6746\u675E\u6760\u6759\u6763\u6764\u6789\u6770\u67A9\u677C\u676A\u678C\u678B\u67A6\u67A1\u6785\u67B7\u67EF\u67B4\u67EC\u67B3\u67E9\u67B8\u67E4\u67DE\u67DD\u67E2\u67EE\u67B9\u67CE\u67C6\u67E7\u6A9C\u681E\u6846\u6829\u6840\u684D\u6832\u684E\uFFFD\u68B3\u682B\u6859\u6863\u6877\u687F\u689F\u688F\u68AD\u6894\u689D\u689B\u6883\u6AAE\u68B9\u6874\u68B5\u68A0\u68BA\u690F\u688D\u687E\u6901\u68CA\u6908\u68D8\u6922\u6926\u68E1\u690C\u68CD\u68D4\u68E7\u68D5\u6936\u6912\u6904\u68D7\u68E3\u6925\u68F9\u68E0\u68EF\u6928\u692A\u691A\u6923\u6921\u68C6\u6979\u6977\u695C\u6978\u696B\u6954\u697E\u696E\u6939\u6974\u693D\u6959\u6930\u6961\u695E\u695D\u6981\u696A\u69B2\u69AE\u69D0\u69BF\u69C1\u69D3\u69BE\u69CE\u5BE8\u69CA\u69DD\u69BB\u69C3\u69A7\u6A2E\u6991\u69A0\u699C\u6995\u69B4\u69DE\u69E8\u6A02\u6A1B\u69FF\u6B0A\u69F9\u69F2\u69E7\u6A05\u69B1\u6A1E\u69ED\u6A14\u69EB\u6A0A\u6A12\u6AC1\u6A23\u6A13\u6A44\u6A0C\u6A72\u6A36\u6A78\u6A47\u6A62\u6A59\u6A66\u6A48\u6A38\u6A22\u6A90\u6A8D\u6AA0\u6A84\u6AA2\u6AA3\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[158].length; ++j)
        if (D[158][j].charCodeAt(0) !== 65533) {
          e[D[158][j]] = 40448 + j;
          d[40448 + j] = D[158][j];
        }
      D[159] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6A97\u8617\u6ABB\u6AC3\u6AC2\u6AB8\u6AB3\u6AAC\u6ADE\u6AD1\u6ADF\u6AAA\u6ADA\u6AEA\u6AFB\u6B05\u8616\u6AFA\u6B12\u6B16\u9B31\u6B1F\u6B38\u6B37\u76DC\u6B39\u98EE\u6B47\u6B43\u6B49\u6B50\u6B59\u6B54\u6B5B\u6B5F\u6B61\u6B78\u6B79\u6B7F\u6B80\u6B84\u6B83\u6B8D\u6B98\u6B95\u6B9E\u6BA4\u6BAA\u6BAB\u6BAF\u6BB2\u6BB1\u6BB3\u6BB7\u6BBC\u6BC6\u6BCB\u6BD3\u6BDF\u6BEC\u6BEB\u6BF3\u6BEF\uFFFD\u9EBE\u6C08\u6C13\u6C14\u6C1B\u6C24\u6C23\u6C5E\u6C55\u6C62\u6C6A\u6C82\u6C8D\u6C9A\u6C81\u6C9B\u6C7E\u6C68\u6C73\u6C92\u6C90\u6CC4\u6CF1\u6CD3\u6CBD\u6CD7\u6CC5\u6CDD\u6CAE\u6CB1\u6CBE\u6CBA\u6CDB\u6CEF\u6CD9\u6CEA\u6D1F\u884D\u6D36\u6D2B\u6D3D\u6D38\u6D19\u6D35\u6D33\u6D12\u6D0C\u6D63\u6D93\u6D64\u6D5A\u6D79\u6D59\u6D8E\u6D95\u6FE4\u6D85\u6DF9\u6E15\u6E0A\u6DB5\u6DC7\u6DE6\u6DB8\u6DC6\u6DEC\u6DDE\u6DCC\u6DE8\u6DD2\u6DC5\u6DFA\u6DD9\u6DE4\u6DD5\u6DEA\u6DEE\u6E2D\u6E6E\u6E2E\u6E19\u6E72\u6E5F\u6E3E\u6E23\u6E6B\u6E2B\u6E76\u6E4D\u6E1F\u6E43\u6E3A\u6E4E\u6E24\u6EFF\u6E1D\u6E38\u6E82\u6EAA\u6E98\u6EC9\u6EB7\u6ED3\u6EBD\u6EAF\u6EC4\u6EB2\u6ED4\u6ED5\u6E8F\u6EA5\u6EC2\u6E9F\u6F41\u6F11\u704C\u6EEC\u6EF8\u6EFE\u6F3F\u6EF2\u6F31\u6EEF\u6F32\u6ECC\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[159].length; ++j)
        if (D[159][j].charCodeAt(0) !== 65533) {
          e[D[159][j]] = 40704 + j;
          d[40704 + j] = D[159][j];
        }
      D[224] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6F3E\u6F13\u6EF7\u6F86\u6F7A\u6F78\u6F81\u6F80\u6F6F\u6F5B\u6FF3\u6F6D\u6F82\u6F7C\u6F58\u6F8E\u6F91\u6FC2\u6F66\u6FB3\u6FA3\u6FA1\u6FA4\u6FB9\u6FC6\u6FAA\u6FDF\u6FD5\u6FEC\u6FD4\u6FD8\u6FF1\u6FEE\u6FDB\u7009\u700B\u6FFA\u7011\u7001\u700F\u6FFE\u701B\u701A\u6F74\u701D\u7018\u701F\u7030\u703E\u7032\u7051\u7063\u7099\u7092\u70AF\u70F1\u70AC\u70B8\u70B3\u70AE\u70DF\u70CB\u70DD\uFFFD\u70D9\u7109\u70FD\u711C\u7119\u7165\u7155\u7188\u7166\u7162\u714C\u7156\u716C\u718F\u71FB\u7184\u7195\u71A8\u71AC\u71D7\u71B9\u71BE\u71D2\u71C9\u71D4\u71CE\u71E0\u71EC\u71E7\u71F5\u71FC\u71F9\u71FF\u720D\u7210\u721B\u7228\u722D\u722C\u7230\u7232\u723B\u723C\u723F\u7240\u7246\u724B\u7258\u7274\u727E\u7282\u7281\u7287\u7292\u7296\u72A2\u72A7\u72B9\u72B2\u72C3\u72C6\u72C4\u72CE\u72D2\u72E2\u72E0\u72E1\u72F9\u72F7\u500F\u7317\u730A\u731C\u7316\u731D\u7334\u732F\u7329\u7325\u733E\u734E\u734F\u9ED8\u7357\u736A\u7368\u7370\u7378\u7375\u737B\u737A\u73C8\u73B3\u73CE\u73BB\u73C0\u73E5\u73EE\u73DE\u74A2\u7405\u746F\u7425\u73F8\u7432\u743A\u7455\u743F\u745F\u7459\u7441\u745C\u7469\u7470\u7463\u746A\u7476\u747E\u748B\u749E\u74A7\u74CA\u74CF\u74D4\u73F1\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[224].length; ++j)
        if (D[224][j].charCodeAt(0) !== 65533) {
          e[D[224][j]] = 57344 + j;
          d[57344 + j] = D[224][j];
        }
      D[225] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u74E0\u74E3\u74E7\u74E9\u74EE\u74F2\u74F0\u74F1\u74F8\u74F7\u7504\u7503\u7505\u750C\u750E\u750D\u7515\u7513\u751E\u7526\u752C\u753C\u7544\u754D\u754A\u7549\u755B\u7546\u755A\u7569\u7564\u7567\u756B\u756D\u7578\u7576\u7586\u7587\u7574\u758A\u7589\u7582\u7594\u759A\u759D\u75A5\u75A3\u75C2\u75B3\u75C3\u75B5\u75BD\u75B8\u75BC\u75B1\u75CD\u75CA\u75D2\u75D9\u75E3\u75DE\u75FE\u75FF\uFFFD\u75FC\u7601\u75F0\u75FA\u75F2\u75F3\u760B\u760D\u7609\u761F\u7627\u7620\u7621\u7622\u7624\u7634\u7630\u763B\u7647\u7648\u7646\u765C\u7658\u7661\u7662\u7668\u7669\u766A\u7667\u766C\u7670\u7672\u7676\u7678\u767C\u7680\u7683\u7688\u768B\u768E\u7696\u7693\u7699\u769A\u76B0\u76B4\u76B8\u76B9\u76BA\u76C2\u76CD\u76D6\u76D2\u76DE\u76E1\u76E5\u76E7\u76EA\u862F\u76FB\u7708\u7707\u7704\u7729\u7724\u771E\u7725\u7726\u771B\u7737\u7738\u7747\u775A\u7768\u776B\u775B\u7765\u777F\u777E\u7779\u778E\u778B\u7791\u77A0\u779E\u77B0\u77B6\u77B9\u77BF\u77BC\u77BD\u77BB\u77C7\u77CD\u77D7\u77DA\u77DC\u77E3\u77EE\u77FC\u780C\u7812\u7926\u7820\u792A\u7845\u788E\u7874\u7886\u787C\u789A\u788C\u78A3\u78B5\u78AA\u78AF\u78D1\u78C6\u78CB\u78D4\u78BE\u78BC\u78C5\u78CA\u78EC\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[225].length; ++j)
        if (D[225][j].charCodeAt(0) !== 65533) {
          e[D[225][j]] = 57600 + j;
          d[57600 + j] = D[225][j];
        }
      D[226] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u78E7\u78DA\u78FD\u78F4\u7907\u7912\u7911\u7919\u792C\u792B\u7940\u7960\u7957\u795F\u795A\u7955\u7953\u797A\u797F\u798A\u799D\u79A7\u9F4B\u79AA\u79AE\u79B3\u79B9\u79BA\u79C9\u79D5\u79E7\u79EC\u79E1\u79E3\u7A08\u7A0D\u7A18\u7A19\u7A20\u7A1F\u7980\u7A31\u7A3B\u7A3E\u7A37\u7A43\u7A57\u7A49\u7A61\u7A62\u7A69\u9F9D\u7A70\u7A79\u7A7D\u7A88\u7A97\u7A95\u7A98\u7A96\u7AA9\u7AC8\u7AB0\uFFFD\u7AB6\u7AC5\u7AC4\u7ABF\u9083\u7AC7\u7ACA\u7ACD\u7ACF\u7AD5\u7AD3\u7AD9\u7ADA\u7ADD\u7AE1\u7AE2\u7AE6\u7AED\u7AF0\u7B02\u7B0F\u7B0A\u7B06\u7B33\u7B18\u7B19\u7B1E\u7B35\u7B28\u7B36\u7B50\u7B7A\u7B04\u7B4D\u7B0B\u7B4C\u7B45\u7B75\u7B65\u7B74\u7B67\u7B70\u7B71\u7B6C\u7B6E\u7B9D\u7B98\u7B9F\u7B8D\u7B9C\u7B9A\u7B8B\u7B92\u7B8F\u7B5D\u7B99\u7BCB\u7BC1\u7BCC\u7BCF\u7BB4\u7BC6\u7BDD\u7BE9\u7C11\u7C14\u7BE6\u7BE5\u7C60\u7C00\u7C07\u7C13\u7BF3\u7BF7\u7C17\u7C0D\u7BF6\u7C23\u7C27\u7C2A\u7C1F\u7C37\u7C2B\u7C3D\u7C4C\u7C43\u7C54\u7C4F\u7C40\u7C50\u7C58\u7C5F\u7C64\u7C56\u7C65\u7C6C\u7C75\u7C83\u7C90\u7CA4\u7CAD\u7CA2\u7CAB\u7CA1\u7CA8\u7CB3\u7CB2\u7CB1\u7CAE\u7CB9\u7CBD\u7CC0\u7CC5\u7CC2\u7CD8\u7CD2\u7CDC\u7CE2\u9B3B\u7CEF\u7CF2\u7CF4\u7CF6\u7CFA\u7D06\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[226].length; ++j)
        if (D[226][j].charCodeAt(0) !== 65533) {
          e[D[226][j]] = 57856 + j;
          d[57856 + j] = D[226][j];
        }
      D[227] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7D02\u7D1C\u7D15\u7D0A\u7D45\u7D4B\u7D2E\u7D32\u7D3F\u7D35\u7D46\u7D73\u7D56\u7D4E\u7D72\u7D68\u7D6E\u7D4F\u7D63\u7D93\u7D89\u7D5B\u7D8F\u7D7D\u7D9B\u7DBA\u7DAE\u7DA3\u7DB5\u7DC7\u7DBD\u7DAB\u7E3D\u7DA2\u7DAF\u7DDC\u7DB8\u7D9F\u7DB0\u7DD8\u7DDD\u7DE4\u7DDE\u7DFB\u7DF2\u7DE1\u7E05\u7E0A\u7E23\u7E21\u7E12\u7E31\u7E1F\u7E09\u7E0B\u7E22\u7E46\u7E66\u7E3B\u7E35\u7E39\u7E43\u7E37\uFFFD\u7E32\u7E3A\u7E67\u7E5D\u7E56\u7E5E\u7E59\u7E5A\u7E79\u7E6A\u7E69\u7E7C\u7E7B\u7E83\u7DD5\u7E7D\u8FAE\u7E7F\u7E88\u7E89\u7E8C\u7E92\u7E90\u7E93\u7E94\u7E96\u7E8E\u7E9B\u7E9C\u7F38\u7F3A\u7F45\u7F4C\u7F4D\u7F4E\u7F50\u7F51\u7F55\u7F54\u7F58\u7F5F\u7F60\u7F68\u7F69\u7F67\u7F78\u7F82\u7F86\u7F83\u7F88\u7F87\u7F8C\u7F94\u7F9E\u7F9D\u7F9A\u7FA3\u7FAF\u7FB2\u7FB9\u7FAE\u7FB6\u7FB8\u8B71\u7FC5\u7FC6\u7FCA\u7FD5\u7FD4\u7FE1\u7FE6\u7FE9\u7FF3\u7FF9\u98DC\u8006\u8004\u800B\u8012\u8018\u8019\u801C\u8021\u8028\u803F\u803B\u804A\u8046\u8052\u8058\u805A\u805F\u8062\u8068\u8073\u8072\u8070\u8076\u8079\u807D\u807F\u8084\u8086\u8085\u809B\u8093\u809A\u80AD\u5190\u80AC\u80DB\u80E5\u80D9\u80DD\u80C4\u80DA\u80D6\u8109\u80EF\u80F1\u811B\u8129\u8123\u812F\u814B\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[227].length; ++j)
        if (D[227][j].charCodeAt(0) !== 65533) {
          e[D[227][j]] = 58112 + j;
          d[58112 + j] = D[227][j];
        }
      D[228] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u968B\u8146\u813E\u8153\u8151\u80FC\u8171\u816E\u8165\u8166\u8174\u8183\u8188\u818A\u8180\u8182\u81A0\u8195\u81A4\u81A3\u815F\u8193\u81A9\u81B0\u81B5\u81BE\u81B8\u81BD\u81C0\u81C2\u81BA\u81C9\u81CD\u81D1\u81D9\u81D8\u81C8\u81DA\u81DF\u81E0\u81E7\u81FA\u81FB\u81FE\u8201\u8202\u8205\u8207\u820A\u820D\u8210\u8216\u8229\u822B\u8238\u8233\u8240\u8259\u8258\u825D\u825A\u825F\u8264\uFFFD\u8262\u8268\u826A\u826B\u822E\u8271\u8277\u8278\u827E\u828D\u8292\u82AB\u829F\u82BB\u82AC\u82E1\u82E3\u82DF\u82D2\u82F4\u82F3\u82FA\u8393\u8303\u82FB\u82F9\u82DE\u8306\u82DC\u8309\u82D9\u8335\u8334\u8316\u8332\u8331\u8340\u8339\u8350\u8345\u832F\u832B\u8317\u8318\u8385\u839A\u83AA\u839F\u83A2\u8396\u8323\u838E\u8387\u838A\u837C\u83B5\u8373\u8375\u83A0\u8389\u83A8\u83F4\u8413\u83EB\u83CE\u83FD\u8403\u83D8\u840B\u83C1\u83F7\u8407\u83E0\u83F2\u840D\u8422\u8420\u83BD\u8438\u8506\u83FB\u846D\u842A\u843C\u855A\u8484\u8477\u846B\u84AD\u846E\u8482\u8469\u8446\u842C\u846F\u8479\u8435\u84CA\u8462\u84B9\u84BF\u849F\u84D9\u84CD\u84BB\u84DA\u84D0\u84C1\u84C6\u84D6\u84A1\u8521\u84FF\u84F4\u8517\u8518\u852C\u851F\u8515\u8514\u84FC\u8540\u8563\u8558\u8548\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[228].length; ++j)
        if (D[228][j].charCodeAt(0) !== 65533) {
          e[D[228][j]] = 58368 + j;
          d[58368 + j] = D[228][j];
        }
      D[229] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8541\u8602\u854B\u8555\u8580\u85A4\u8588\u8591\u858A\u85A8\u856D\u8594\u859B\u85EA\u8587\u859C\u8577\u857E\u8590\u85C9\u85BA\u85CF\u85B9\u85D0\u85D5\u85DD\u85E5\u85DC\u85F9\u860A\u8613\u860B\u85FE\u85FA\u8606\u8622\u861A\u8630\u863F\u864D\u4E55\u8654\u865F\u8667\u8671\u8693\u86A3\u86A9\u86AA\u868B\u868C\u86B6\u86AF\u86C4\u86C6\u86B0\u86C9\u8823\u86AB\u86D4\u86DE\u86E9\u86EC\uFFFD\u86DF\u86DB\u86EF\u8712\u8706\u8708\u8700\u8703\u86FB\u8711\u8709\u870D\u86F9\u870A\u8734\u873F\u8737\u873B\u8725\u8729\u871A\u8760\u875F\u8778\u874C\u874E\u8774\u8757\u8768\u876E\u8759\u8753\u8763\u876A\u8805\u87A2\u879F\u8782\u87AF\u87CB\u87BD\u87C0\u87D0\u96D6\u87AB\u87C4\u87B3\u87C7\u87C6\u87BB\u87EF\u87F2\u87E0\u880F\u880D\u87FE\u87F6\u87F7\u880E\u87D2\u8811\u8816\u8815\u8822\u8821\u8831\u8836\u8839\u8827\u883B\u8844\u8842\u8852\u8859\u885E\u8862\u886B\u8881\u887E\u889E\u8875\u887D\u88B5\u8872\u8882\u8897\u8892\u88AE\u8899\u88A2\u888D\u88A4\u88B0\u88BF\u88B1\u88C3\u88C4\u88D4\u88D8\u88D9\u88DD\u88F9\u8902\u88FC\u88F4\u88E8\u88F2\u8904\u890C\u890A\u8913\u8943\u891E\u8925\u892A\u892B\u8941\u8944\u893B\u8936\u8938\u894C\u891D\u8960\u895E\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[229].length; ++j)
        if (D[229][j].charCodeAt(0) !== 65533) {
          e[D[229][j]] = 58624 + j;
          d[58624 + j] = D[229][j];
        }
      D[230] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8966\u8964\u896D\u896A\u896F\u8974\u8977\u897E\u8983\u8988\u898A\u8993\u8998\u89A1\u89A9\u89A6\u89AC\u89AF\u89B2\u89BA\u89BD\u89BF\u89C0\u89DA\u89DC\u89DD\u89E7\u89F4\u89F8\u8A03\u8A16\u8A10\u8A0C\u8A1B\u8A1D\u8A25\u8A36\u8A41\u8A5B\u8A52\u8A46\u8A48\u8A7C\u8A6D\u8A6C\u8A62\u8A85\u8A82\u8A84\u8AA8\u8AA1\u8A91\u8AA5\u8AA6\u8A9A\u8AA3\u8AC4\u8ACD\u8AC2\u8ADA\u8AEB\u8AF3\u8AE7\uFFFD\u8AE4\u8AF1\u8B14\u8AE0\u8AE2\u8AF7\u8ADE\u8ADB\u8B0C\u8B07\u8B1A\u8AE1\u8B16\u8B10\u8B17\u8B20\u8B33\u97AB\u8B26\u8B2B\u8B3E\u8B28\u8B41\u8B4C\u8B4F\u8B4E\u8B49\u8B56\u8B5B\u8B5A\u8B6B\u8B5F\u8B6C\u8B6F\u8B74\u8B7D\u8B80\u8B8C\u8B8E\u8B92\u8B93\u8B96\u8B99\u8B9A\u8C3A\u8C41\u8C3F\u8C48\u8C4C\u8C4E\u8C50\u8C55\u8C62\u8C6C\u8C78\u8C7A\u8C82\u8C89\u8C85\u8C8A\u8C8D\u8C8E\u8C94\u8C7C\u8C98\u621D\u8CAD\u8CAA\u8CBD\u8CB2\u8CB3\u8CAE\u8CB6\u8CC8\u8CC1\u8CE4\u8CE3\u8CDA\u8CFD\u8CFA\u8CFB\u8D04\u8D05\u8D0A\u8D07\u8D0F\u8D0D\u8D10\u9F4E\u8D13\u8CCD\u8D14\u8D16\u8D67\u8D6D\u8D71\u8D73\u8D81\u8D99\u8DC2\u8DBE\u8DBA\u8DCF\u8DDA\u8DD6\u8DCC\u8DDB\u8DCB\u8DEA\u8DEB\u8DDF\u8DE3\u8DFC\u8E08\u8E09\u8DFF\u8E1D\u8E1E\u8E10\u8E1F\u8E42\u8E35\u8E30\u8E34\u8E4A\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[230].length; ++j)
        if (D[230][j].charCodeAt(0) !== 65533) {
          e[D[230][j]] = 58880 + j;
          d[58880 + j] = D[230][j];
        }
      D[231] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8E47\u8E49\u8E4C\u8E50\u8E48\u8E59\u8E64\u8E60\u8E2A\u8E63\u8E55\u8E76\u8E72\u8E7C\u8E81\u8E87\u8E85\u8E84\u8E8B\u8E8A\u8E93\u8E91\u8E94\u8E99\u8EAA\u8EA1\u8EAC\u8EB0\u8EC6\u8EB1\u8EBE\u8EC5\u8EC8\u8ECB\u8EDB\u8EE3\u8EFC\u8EFB\u8EEB\u8EFE\u8F0A\u8F05\u8F15\u8F12\u8F19\u8F13\u8F1C\u8F1F\u8F1B\u8F0C\u8F26\u8F33\u8F3B\u8F39\u8F45\u8F42\u8F3E\u8F4C\u8F49\u8F46\u8F4E\u8F57\u8F5C\uFFFD\u8F62\u8F63\u8F64\u8F9C\u8F9F\u8FA3\u8FAD\u8FAF\u8FB7\u8FDA\u8FE5\u8FE2\u8FEA\u8FEF\u9087\u8FF4\u9005\u8FF9\u8FFA\u9011\u9015\u9021\u900D\u901E\u9016\u900B\u9027\u9036\u9035\u9039\u8FF8\u904F\u9050\u9051\u9052\u900E\u9049\u903E\u9056\u9058\u905E\u9068\u906F\u9076\u96A8\u9072\u9082\u907D\u9081\u9080\u908A\u9089\u908F\u90A8\u90AF\u90B1\u90B5\u90E2\u90E4\u6248\u90DB\u9102\u9112\u9119\u9132\u9130\u914A\u9156\u9158\u9163\u9165\u9169\u9173\u9172\u918B\u9189\u9182\u91A2\u91AB\u91AF\u91AA\u91B5\u91B4\u91BA\u91C0\u91C1\u91C9\u91CB\u91D0\u91D6\u91DF\u91E1\u91DB\u91FC\u91F5\u91F6\u921E\u91FF\u9214\u922C\u9215\u9211\u925E\u9257\u9245\u9249\u9264\u9248\u9295\u923F\u924B\u9250\u929C\u9296\u9293\u929B\u925A\u92CF\u92B9\u92B7\u92E9\u930F\u92FA\u9344\u932E\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[231].length; ++j)
        if (D[231][j].charCodeAt(0) !== 65533) {
          e[D[231][j]] = 59136 + j;
          d[59136 + j] = D[231][j];
        }
      D[232] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9319\u9322\u931A\u9323\u933A\u9335\u933B\u935C\u9360\u937C\u936E\u9356\u93B0\u93AC\u93AD\u9394\u93B9\u93D6\u93D7\u93E8\u93E5\u93D8\u93C3\u93DD\u93D0\u93C8\u93E4\u941A\u9414\u9413\u9403\u9407\u9410\u9436\u942B\u9435\u9421\u943A\u9441\u9452\u9444\u945B\u9460\u9462\u945E\u946A\u9229\u9470\u9475\u9477\u947D\u945A\u947C\u947E\u9481\u947F\u9582\u9587\u958A\u9594\u9596\u9598\u9599\uFFFD\u95A0\u95A8\u95A7\u95AD\u95BC\u95BB\u95B9\u95BE\u95CA\u6FF6\u95C3\u95CD\u95CC\u95D5\u95D4\u95D6\u95DC\u95E1\u95E5\u95E2\u9621\u9628\u962E\u962F\u9642\u964C\u964F\u964B\u9677\u965C\u965E\u965D\u965F\u9666\u9672\u966C\u968D\u9698\u9695\u9697\u96AA\u96A7\u96B1\u96B2\u96B0\u96B4\u96B6\u96B8\u96B9\u96CE\u96CB\u96C9\u96CD\u894D\u96DC\u970D\u96D5\u96F9\u9704\u9706\u9708\u9713\u970E\u9711\u970F\u9716\u9719\u9724\u972A\u9730\u9739\u973D\u973E\u9744\u9746\u9748\u9742\u9749\u975C\u9760\u9764\u9766\u9768\u52D2\u976B\u9771\u9779\u9785\u977C\u9781\u977A\u9786\u978B\u978F\u9790\u979C\u97A8\u97A6\u97A3\u97B3\u97B4\u97C3\u97C6\u97C8\u97CB\u97DC\u97ED\u9F4F\u97F2\u7ADF\u97F6\u97F5\u980F\u980C\u9838\u9824\u9821\u9837\u983D\u9846\u984F\u984B\u986B\u986F\u9870\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[232].length; ++j)
        if (D[232][j].charCodeAt(0) !== 65533) {
          e[D[232][j]] = 59392 + j;
          d[59392 + j] = D[232][j];
        }
      D[233] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9871\u9874\u9873\u98AA\u98AF\u98B1\u98B6\u98C4\u98C3\u98C6\u98E9\u98EB\u9903\u9909\u9912\u9914\u9918\u9921\u991D\u991E\u9924\u9920\u992C\u992E\u993D\u993E\u9942\u9949\u9945\u9950\u994B\u9951\u9952\u994C\u9955\u9997\u9998\u99A5\u99AD\u99AE\u99BC\u99DF\u99DB\u99DD\u99D8\u99D1\u99ED\u99EE\u99F1\u99F2\u99FB\u99F8\u9A01\u9A0F\u9A05\u99E2\u9A19\u9A2B\u9A37\u9A45\u9A42\u9A40\u9A43\uFFFD\u9A3E\u9A55\u9A4D\u9A5B\u9A57\u9A5F\u9A62\u9A65\u9A64\u9A69\u9A6B\u9A6A\u9AAD\u9AB0\u9ABC\u9AC0\u9ACF\u9AD1\u9AD3\u9AD4\u9ADE\u9ADF\u9AE2\u9AE3\u9AE6\u9AEF\u9AEB\u9AEE\u9AF4\u9AF1\u9AF7\u9AFB\u9B06\u9B18\u9B1A\u9B1F\u9B22\u9B23\u9B25\u9B27\u9B28\u9B29\u9B2A\u9B2E\u9B2F\u9B32\u9B44\u9B43\u9B4F\u9B4D\u9B4E\u9B51\u9B58\u9B74\u9B93\u9B83\u9B91\u9B96\u9B97\u9B9F\u9BA0\u9BA8\u9BB4\u9BC0\u9BCA\u9BB9\u9BC6\u9BCF\u9BD1\u9BD2\u9BE3\u9BE2\u9BE4\u9BD4\u9BE1\u9C3A\u9BF2\u9BF1\u9BF0\u9C15\u9C14\u9C09\u9C13\u9C0C\u9C06\u9C08\u9C12\u9C0A\u9C04\u9C2E\u9C1B\u9C25\u9C24\u9C21\u9C30\u9C47\u9C32\u9C46\u9C3E\u9C5A\u9C60\u9C67\u9C76\u9C78\u9CE7\u9CEC\u9CF0\u9D09\u9D08\u9CEB\u9D03\u9D06\u9D2A\u9D26\u9DAF\u9D23\u9D1F\u9D44\u9D15\u9D12\u9D41\u9D3F\u9D3E\u9D46\u9D48\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[233].length; ++j)
        if (D[233][j].charCodeAt(0) !== 65533) {
          e[D[233][j]] = 59648 + j;
          d[59648 + j] = D[233][j];
        }
      D[234] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9D5D\u9D5E\u9D64\u9D51\u9D50\u9D59\u9D72\u9D89\u9D87\u9DAB\u9D6F\u9D7A\u9D9A\u9DA4\u9DA9\u9DB2\u9DC4\u9DC1\u9DBB\u9DB8\u9DBA\u9DC6\u9DCF\u9DC2\u9DD9\u9DD3\u9DF8\u9DE6\u9DED\u9DEF\u9DFD\u9E1A\u9E1B\u9E1E\u9E75\u9E79\u9E7D\u9E81\u9E88\u9E8B\u9E8C\u9E92\u9E95\u9E91\u9E9D\u9EA5\u9EA9\u9EB8\u9EAA\u9EAD\u9761\u9ECC\u9ECE\u9ECF\u9ED0\u9ED4\u9EDC\u9EDE\u9EDD\u9EE0\u9EE5\u9EE8\u9EEF\uFFFD\u9EF4\u9EF6\u9EF7\u9EF9\u9EFB\u9EFC\u9EFD\u9F07\u9F08\u76B7\u9F15\u9F21\u9F2C\u9F3E\u9F4A\u9F52\u9F54\u9F63\u9F5F\u9F60\u9F61\u9F66\u9F67\u9F6C\u9F6A\u9F77\u9F72\u9F76\u9F95\u9F9C\u9FA0\u582F\u69C7\u9059\u7464\u51DC\u7199\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[234].length; ++j)
        if (D[234][j].charCodeAt(0) !== 65533) {
          e[D[234][j]] = 59904 + j;
          d[59904 + j] = D[234][j];
        }
      D[237] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7E8A\u891C\u9348\u9288\u84DC\u4FC9\u70BB\u6631\u68C8\u92F9\u66FB\u5F45\u4E28\u4EE1\u4EFC\u4F00\u4F03\u4F39\u4F56\u4F92\u4F8A\u4F9A\u4F94\u4FCD\u5040\u5022\u4FFF\u501E\u5046\u5070\u5042\u5094\u50F4\u50D8\u514A\u5164\u519D\u51BE\u51EC\u5215\u529C\u52A6\u52C0\u52DB\u5300\u5307\u5324\u5372\u5393\u53B2\u53DD\uFA0E\u549C\u548A\u54A9\u54FF\u5586\u5759\u5765\u57AC\u57C8\u57C7\uFA0F\uFFFD\uFA10\u589E\u58B2\u590B\u5953\u595B\u595D\u5963\u59A4\u59BA\u5B56\u5BC0\u752F\u5BD8\u5BEC\u5C1E\u5CA6\u5CBA\u5CF5\u5D27\u5D53\uFA11\u5D42\u5D6D\u5DB8\u5DB9\u5DD0\u5F21\u5F34\u5F67\u5FB7\u5FDE\u605D\u6085\u608A\u60DE\u60D5\u6120\u60F2\u6111\u6137\u6130\u6198\u6213\u62A6\u63F5\u6460\u649D\u64CE\u654E\u6600\u6615\u663B\u6609\u662E\u661E\u6624\u6665\u6657\u6659\uFA12\u6673\u6699\u66A0\u66B2\u66BF\u66FA\u670E\uF929\u6766\u67BB\u6852\u67C0\u6801\u6844\u68CF\uFA13\u6968\uFA14\u6998\u69E2\u6A30\u6A6B\u6A46\u6A73\u6A7E\u6AE2\u6AE4\u6BD6\u6C3F\u6C5C\u6C86\u6C6F\u6CDA\u6D04\u6D87\u6D6F\u6D96\u6DAC\u6DCF\u6DF8\u6DF2\u6DFC\u6E39\u6E5C\u6E27\u6E3C\u6EBF\u6F88\u6FB5\u6FF5\u7005\u7007\u7028\u7085\u70AB\u710F\u7104\u715C\u7146\u7147\uFA15\u71C1\u71FE\u72B1\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[237].length; ++j)
        if (D[237][j].charCodeAt(0) !== 65533) {
          e[D[237][j]] = 60672 + j;
          d[60672 + j] = D[237][j];
        }
      D[238] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u72BE\u7324\uFA16\u7377\u73BD\u73C9\u73D6\u73E3\u73D2\u7407\u73F5\u7426\u742A\u7429\u742E\u7462\u7489\u749F\u7501\u756F\u7682\u769C\u769E\u769B\u76A6\uFA17\u7746\u52AF\u7821\u784E\u7864\u787A\u7930\uFA18\uFA19\uFA1A\u7994\uFA1B\u799B\u7AD1\u7AE7\uFA1C\u7AEB\u7B9E\uFA1D\u7D48\u7D5C\u7DB7\u7DA0\u7DD6\u7E52\u7F47\u7FA1\uFA1E\u8301\u8362\u837F\u83C7\u83F6\u8448\u84B4\u8553\u8559\uFFFD\u856B\uFA1F\u85B0\uFA20\uFA21\u8807\u88F5\u8A12\u8A37\u8A79\u8AA7\u8ABE\u8ADF\uFA22\u8AF6\u8B53\u8B7F\u8CF0\u8CF4\u8D12\u8D76\uFA23\u8ECF\uFA24\uFA25\u9067\u90DE\uFA26\u9115\u9127\u91DA\u91D7\u91DE\u91ED\u91EE\u91E4\u91E5\u9206\u9210\u920A\u923A\u9240\u923C\u924E\u9259\u9251\u9239\u9267\u92A7\u9277\u9278\u92E7\u92D7\u92D9\u92D0\uFA27\u92D5\u92E0\u92D3\u9325\u9321\u92FB\uFA28\u931E\u92FF\u931D\u9302\u9370\u9357\u93A4\u93C6\u93DE\u93F8\u9431\u9445\u9448\u9592\uF9DC\uFA29\u969D\u96AF\u9733\u973B\u9743\u974D\u974F\u9751\u9755\u9857\u9865\uFA2A\uFA2B\u9927\uFA2C\u999E\u9A4E\u9AD9\u9ADC\u9B75\u9B72\u9B8F\u9BB1\u9BBB\u9C00\u9D70\u9D6B\uFA2D\u9E19\u9ED1\uFFFD\uFFFD\u2170\u2171\u2172\u2173\u2174\u2175\u2176\u2177\u2178\u2179\uFFE2\uFFE4\uFF07\uFF02\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[238].length; ++j)
        if (D[238][j].charCodeAt(0) !== 65533) {
          e[D[238][j]] = 60928 + j;
          d[60928 + j] = D[238][j];
        }
      D[250] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u2170\u2171\u2172\u2173\u2174\u2175\u2176\u2177\u2178\u2179\u2160\u2161\u2162\u2163\u2164\u2165\u2166\u2167\u2168\u2169\uFFE2\uFFE4\uFF07\uFF02\u3231\u2116\u2121\u2235\u7E8A\u891C\u9348\u9288\u84DC\u4FC9\u70BB\u6631\u68C8\u92F9\u66FB\u5F45\u4E28\u4EE1\u4EFC\u4F00\u4F03\u4F39\u4F56\u4F92\u4F8A\u4F9A\u4F94\u4FCD\u5040\u5022\u4FFF\u501E\u5046\u5070\u5042\u5094\u50F4\u50D8\u514A\uFFFD\u5164\u519D\u51BE\u51EC\u5215\u529C\u52A6\u52C0\u52DB\u5300\u5307\u5324\u5372\u5393\u53B2\u53DD\uFA0E\u549C\u548A\u54A9\u54FF\u5586\u5759\u5765\u57AC\u57C8\u57C7\uFA0F\uFA10\u589E\u58B2\u590B\u5953\u595B\u595D\u5963\u59A4\u59BA\u5B56\u5BC0\u752F\u5BD8\u5BEC\u5C1E\u5CA6\u5CBA\u5CF5\u5D27\u5D53\uFA11\u5D42\u5D6D\u5DB8\u5DB9\u5DD0\u5F21\u5F34\u5F67\u5FB7\u5FDE\u605D\u6085\u608A\u60DE\u60D5\u6120\u60F2\u6111\u6137\u6130\u6198\u6213\u62A6\u63F5\u6460\u649D\u64CE\u654E\u6600\u6615\u663B\u6609\u662E\u661E\u6624\u6665\u6657\u6659\uFA12\u6673\u6699\u66A0\u66B2\u66BF\u66FA\u670E\uF929\u6766\u67BB\u6852\u67C0\u6801\u6844\u68CF\uFA13\u6968\uFA14\u6998\u69E2\u6A30\u6A6B\u6A46\u6A73\u6A7E\u6AE2\u6AE4\u6BD6\u6C3F\u6C5C\u6C86\u6C6F\u6CDA\u6D04\u6D87\u6D6F\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[250].length; ++j)
        if (D[250][j].charCodeAt(0) !== 65533) {
          e[D[250][j]] = 64e3 + j;
          d[64e3 + j] = D[250][j];
        }
      D[251] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6D96\u6DAC\u6DCF\u6DF8\u6DF2\u6DFC\u6E39\u6E5C\u6E27\u6E3C\u6EBF\u6F88\u6FB5\u6FF5\u7005\u7007\u7028\u7085\u70AB\u710F\u7104\u715C\u7146\u7147\uFA15\u71C1\u71FE\u72B1\u72BE\u7324\uFA16\u7377\u73BD\u73C9\u73D6\u73E3\u73D2\u7407\u73F5\u7426\u742A\u7429\u742E\u7462\u7489\u749F\u7501\u756F\u7682\u769C\u769E\u769B\u76A6\uFA17\u7746\u52AF\u7821\u784E\u7864\u787A\u7930\uFA18\uFA19\uFFFD\uFA1A\u7994\uFA1B\u799B\u7AD1\u7AE7\uFA1C\u7AEB\u7B9E\uFA1D\u7D48\u7D5C\u7DB7\u7DA0\u7DD6\u7E52\u7F47\u7FA1\uFA1E\u8301\u8362\u837F\u83C7\u83F6\u8448\u84B4\u8553\u8559\u856B\uFA1F\u85B0\uFA20\uFA21\u8807\u88F5\u8A12\u8A37\u8A79\u8AA7\u8ABE\u8ADF\uFA22\u8AF6\u8B53\u8B7F\u8CF0\u8CF4\u8D12\u8D76\uFA23\u8ECF\uFA24\uFA25\u9067\u90DE\uFA26\u9115\u9127\u91DA\u91D7\u91DE\u91ED\u91EE\u91E4\u91E5\u9206\u9210\u920A\u923A\u9240\u923C\u924E\u9259\u9251\u9239\u9267\u92A7\u9277\u9278\u92E7\u92D7\u92D9\u92D0\uFA27\u92D5\u92E0\u92D3\u9325\u9321\u92FB\uFA28\u931E\u92FF\u931D\u9302\u9370\u9357\u93A4\u93C6\u93DE\u93F8\u9431\u9445\u9448\u9592\uF9DC\uFA29\u969D\u96AF\u9733\u973B\u9743\u974D\u974F\u9751\u9755\u9857\u9865\uFA2A\uFA2B\u9927\uFA2C\u999E\u9A4E\u9AD9\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[251].length; ++j)
        if (D[251][j].charCodeAt(0) !== 65533) {
          e[D[251][j]] = 64256 + j;
          d[64256 + j] = D[251][j];
        }
      D[252] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9ADC\u9B75\u9B72\u9B8F\u9BB1\u9BBB\u9C00\u9D70\u9D6B\uFA2D\u9E19\u9ED1\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[252].length; ++j)
        if (D[252][j].charCodeAt(0) !== 65533) {
          e[D[252][j]] = 64512 + j;
          d[64512 + j] = D[252][j];
        }
      return { "enc": e, "dec": d };
    }();
    cptable2[936] = function() {
      var d = [], e = {}, D = [], j;
      D[0] = "\0\x07\b	\n\v\f\r !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\u20AC\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[0].length; ++j)
        if (D[0][j].charCodeAt(0) !== 65533) {
          e[D[0][j]] = 0 + j;
          d[0 + j] = D[0][j];
        }
      D[129] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u4E02\u4E04\u4E05\u4E06\u4E0F\u4E12\u4E17\u4E1F\u4E20\u4E21\u4E23\u4E26\u4E29\u4E2E\u4E2F\u4E31\u4E33\u4E35\u4E37\u4E3C\u4E40\u4E41\u4E42\u4E44\u4E46\u4E4A\u4E51\u4E55\u4E57\u4E5A\u4E5B\u4E62\u4E63\u4E64\u4E65\u4E67\u4E68\u4E6A\u4E6B\u4E6C\u4E6D\u4E6E\u4E6F\u4E72\u4E74\u4E75\u4E76\u4E77\u4E78\u4E79\u4E7A\u4E7B\u4E7C\u4E7D\u4E7F\u4E80\u4E81\u4E82\u4E83\u4E84\u4E85\u4E87\u4E8A\uFFFD\u4E90\u4E96\u4E97\u4E99\u4E9C\u4E9D\u4E9E\u4EA3\u4EAA\u4EAF\u4EB0\u4EB1\u4EB4\u4EB6\u4EB7\u4EB8\u4EB9\u4EBC\u4EBD\u4EBE\u4EC8\u4ECC\u4ECF\u4ED0\u4ED2\u4EDA\u4EDB\u4EDC\u4EE0\u4EE2\u4EE6\u4EE7\u4EE9\u4EED\u4EEE\u4EEF\u4EF1\u4EF4\u4EF8\u4EF9\u4EFA\u4EFC\u4EFE\u4F00\u4F02\u4F03\u4F04\u4F05\u4F06\u4F07\u4F08\u4F0B\u4F0C\u4F12\u4F13\u4F14\u4F15\u4F16\u4F1C\u4F1D\u4F21\u4F23\u4F28\u4F29\u4F2C\u4F2D\u4F2E\u4F31\u4F33\u4F35\u4F37\u4F39\u4F3B\u4F3E\u4F3F\u4F40\u4F41\u4F42\u4F44\u4F45\u4F47\u4F48\u4F49\u4F4A\u4F4B\u4F4C\u4F52\u4F54\u4F56\u4F61\u4F62\u4F66\u4F68\u4F6A\u4F6B\u4F6D\u4F6E\u4F71\u4F72\u4F75\u4F77\u4F78\u4F79\u4F7A\u4F7D\u4F80\u4F81\u4F82\u4F85\u4F86\u4F87\u4F8A\u4F8C\u4F8E\u4F90\u4F92\u4F93\u4F95\u4F96\u4F98\u4F99\u4F9A\u4F9C\u4F9E\u4F9F\u4FA1\u4FA2\uFFFD".split("");
      for (j = 0; j != D[129].length; ++j)
        if (D[129][j].charCodeAt(0) !== 65533) {
          e[D[129][j]] = 33024 + j;
          d[33024 + j] = D[129][j];
        }
      D[130] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u4FA4\u4FAB\u4FAD\u4FB0\u4FB1\u4FB2\u4FB3\u4FB4\u4FB6\u4FB7\u4FB8\u4FB9\u4FBA\u4FBB\u4FBC\u4FBD\u4FBE\u4FC0\u4FC1\u4FC2\u4FC6\u4FC7\u4FC8\u4FC9\u4FCB\u4FCC\u4FCD\u4FD2\u4FD3\u4FD4\u4FD5\u4FD6\u4FD9\u4FDB\u4FE0\u4FE2\u4FE4\u4FE5\u4FE7\u4FEB\u4FEC\u4FF0\u4FF2\u4FF4\u4FF5\u4FF6\u4FF7\u4FF9\u4FFB\u4FFC\u4FFD\u4FFF\u5000\u5001\u5002\u5003\u5004\u5005\u5006\u5007\u5008\u5009\u500A\uFFFD\u500B\u500E\u5010\u5011\u5013\u5015\u5016\u5017\u501B\u501D\u501E\u5020\u5022\u5023\u5024\u5027\u502B\u502F\u5030\u5031\u5032\u5033\u5034\u5035\u5036\u5037\u5038\u5039\u503B\u503D\u503F\u5040\u5041\u5042\u5044\u5045\u5046\u5049\u504A\u504B\u504D\u5050\u5051\u5052\u5053\u5054\u5056\u5057\u5058\u5059\u505B\u505D\u505E\u505F\u5060\u5061\u5062\u5063\u5064\u5066\u5067\u5068\u5069\u506A\u506B\u506D\u506E\u506F\u5070\u5071\u5072\u5073\u5074\u5075\u5078\u5079\u507A\u507C\u507D\u5081\u5082\u5083\u5084\u5086\u5087\u5089\u508A\u508B\u508C\u508E\u508F\u5090\u5091\u5092\u5093\u5094\u5095\u5096\u5097\u5098\u5099\u509A\u509B\u509C\u509D\u509E\u509F\u50A0\u50A1\u50A2\u50A4\u50A6\u50AA\u50AB\u50AD\u50AE\u50AF\u50B0\u50B1\u50B3\u50B4\u50B5\u50B6\u50B7\u50B8\u50B9\u50BC\uFFFD".split("");
      for (j = 0; j != D[130].length; ++j)
        if (D[130][j].charCodeAt(0) !== 65533) {
          e[D[130][j]] = 33280 + j;
          d[33280 + j] = D[130][j];
        }
      D[131] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u50BD\u50BE\u50BF\u50C0\u50C1\u50C2\u50C3\u50C4\u50C5\u50C6\u50C7\u50C8\u50C9\u50CA\u50CB\u50CC\u50CD\u50CE\u50D0\u50D1\u50D2\u50D3\u50D4\u50D5\u50D7\u50D8\u50D9\u50DB\u50DC\u50DD\u50DE\u50DF\u50E0\u50E1\u50E2\u50E3\u50E4\u50E5\u50E8\u50E9\u50EA\u50EB\u50EF\u50F0\u50F1\u50F2\u50F4\u50F6\u50F7\u50F8\u50F9\u50FA\u50FC\u50FD\u50FE\u50FF\u5100\u5101\u5102\u5103\u5104\u5105\u5108\uFFFD\u5109\u510A\u510C\u510D\u510E\u510F\u5110\u5111\u5113\u5114\u5115\u5116\u5117\u5118\u5119\u511A\u511B\u511C\u511D\u511E\u511F\u5120\u5122\u5123\u5124\u5125\u5126\u5127\u5128\u5129\u512A\u512B\u512C\u512D\u512E\u512F\u5130\u5131\u5132\u5133\u5134\u5135\u5136\u5137\u5138\u5139\u513A\u513B\u513C\u513D\u513E\u5142\u5147\u514A\u514C\u514E\u514F\u5150\u5152\u5153\u5157\u5158\u5159\u515B\u515D\u515E\u515F\u5160\u5161\u5163\u5164\u5166\u5167\u5169\u516A\u516F\u5172\u517A\u517E\u517F\u5183\u5184\u5186\u5187\u518A\u518B\u518E\u518F\u5190\u5191\u5193\u5194\u5198\u519A\u519D\u519E\u519F\u51A1\u51A3\u51A6\u51A7\u51A8\u51A9\u51AA\u51AD\u51AE\u51B4\u51B8\u51B9\u51BA\u51BE\u51BF\u51C1\u51C2\u51C3\u51C5\u51C8\u51CA\u51CD\u51CE\u51D0\u51D2\u51D3\u51D4\u51D5\u51D6\u51D7\uFFFD".split("");
      for (j = 0; j != D[131].length; ++j)
        if (D[131][j].charCodeAt(0) !== 65533) {
          e[D[131][j]] = 33536 + j;
          d[33536 + j] = D[131][j];
        }
      D[132] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u51D8\u51D9\u51DA\u51DC\u51DE\u51DF\u51E2\u51E3\u51E5\u51E6\u51E7\u51E8\u51E9\u51EA\u51EC\u51EE\u51F1\u51F2\u51F4\u51F7\u51FE\u5204\u5205\u5209\u520B\u520C\u520F\u5210\u5213\u5214\u5215\u521C\u521E\u521F\u5221\u5222\u5223\u5225\u5226\u5227\u522A\u522C\u522F\u5231\u5232\u5234\u5235\u523C\u523E\u5244\u5245\u5246\u5247\u5248\u5249\u524B\u524E\u524F\u5252\u5253\u5255\u5257\u5258\uFFFD\u5259\u525A\u525B\u525D\u525F\u5260\u5262\u5263\u5264\u5266\u5268\u526B\u526C\u526D\u526E\u5270\u5271\u5273\u5274\u5275\u5276\u5277\u5278\u5279\u527A\u527B\u527C\u527E\u5280\u5283\u5284\u5285\u5286\u5287\u5289\u528A\u528B\u528C\u528D\u528E\u528F\u5291\u5292\u5294\u5295\u5296\u5297\u5298\u5299\u529A\u529C\u52A4\u52A5\u52A6\u52A7\u52AE\u52AF\u52B0\u52B4\u52B5\u52B6\u52B7\u52B8\u52B9\u52BA\u52BB\u52BC\u52BD\u52C0\u52C1\u52C2\u52C4\u52C5\u52C6\u52C8\u52CA\u52CC\u52CD\u52CE\u52CF\u52D1\u52D3\u52D4\u52D5\u52D7\u52D9\u52DA\u52DB\u52DC\u52DD\u52DE\u52E0\u52E1\u52E2\u52E3\u52E5\u52E6\u52E7\u52E8\u52E9\u52EA\u52EB\u52EC\u52ED\u52EE\u52EF\u52F1\u52F2\u52F3\u52F4\u52F5\u52F6\u52F7\u52F8\u52FB\u52FC\u52FD\u5301\u5302\u5303\u5304\u5307\u5309\u530A\u530B\u530C\u530E\uFFFD".split("");
      for (j = 0; j != D[132].length; ++j)
        if (D[132][j].charCodeAt(0) !== 65533) {
          e[D[132][j]] = 33792 + j;
          d[33792 + j] = D[132][j];
        }
      D[133] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5311\u5312\u5313\u5314\u5318\u531B\u531C\u531E\u531F\u5322\u5324\u5325\u5327\u5328\u5329\u532B\u532C\u532D\u532F\u5330\u5331\u5332\u5333\u5334\u5335\u5336\u5337\u5338\u533C\u533D\u5340\u5342\u5344\u5346\u534B\u534C\u534D\u5350\u5354\u5358\u5359\u535B\u535D\u5365\u5368\u536A\u536C\u536D\u5372\u5376\u5379\u537B\u537C\u537D\u537E\u5380\u5381\u5383\u5387\u5388\u538A\u538E\u538F\uFFFD\u5390\u5391\u5392\u5393\u5394\u5396\u5397\u5399\u539B\u539C\u539E\u53A0\u53A1\u53A4\u53A7\u53AA\u53AB\u53AC\u53AD\u53AF\u53B0\u53B1\u53B2\u53B3\u53B4\u53B5\u53B7\u53B8\u53B9\u53BA\u53BC\u53BD\u53BE\u53C0\u53C3\u53C4\u53C5\u53C6\u53C7\u53CE\u53CF\u53D0\u53D2\u53D3\u53D5\u53DA\u53DC\u53DD\u53DE\u53E1\u53E2\u53E7\u53F4\u53FA\u53FE\u53FF\u5400\u5402\u5405\u5407\u540B\u5414\u5418\u5419\u541A\u541C\u5422\u5424\u5425\u542A\u5430\u5433\u5436\u5437\u543A\u543D\u543F\u5441\u5442\u5444\u5445\u5447\u5449\u544C\u544D\u544E\u544F\u5451\u545A\u545D\u545E\u545F\u5460\u5461\u5463\u5465\u5467\u5469\u546A\u546B\u546C\u546D\u546E\u546F\u5470\u5474\u5479\u547A\u547E\u547F\u5481\u5483\u5485\u5487\u5488\u5489\u548A\u548D\u5491\u5493\u5497\u5498\u549C\u549E\u549F\u54A0\u54A1\uFFFD".split("");
      for (j = 0; j != D[133].length; ++j)
        if (D[133][j].charCodeAt(0) !== 65533) {
          e[D[133][j]] = 34048 + j;
          d[34048 + j] = D[133][j];
        }
      D[134] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u54A2\u54A5\u54AE\u54B0\u54B2\u54B5\u54B6\u54B7\u54B9\u54BA\u54BC\u54BE\u54C3\u54C5\u54CA\u54CB\u54D6\u54D8\u54DB\u54E0\u54E1\u54E2\u54E3\u54E4\u54EB\u54EC\u54EF\u54F0\u54F1\u54F4\u54F5\u54F6\u54F7\u54F8\u54F9\u54FB\u54FE\u5500\u5502\u5503\u5504\u5505\u5508\u550A\u550B\u550C\u550D\u550E\u5512\u5513\u5515\u5516\u5517\u5518\u5519\u551A\u551C\u551D\u551E\u551F\u5521\u5525\u5526\uFFFD\u5528\u5529\u552B\u552D\u5532\u5534\u5535\u5536\u5538\u5539\u553A\u553B\u553D\u5540\u5542\u5545\u5547\u5548\u554B\u554C\u554D\u554E\u554F\u5551\u5552\u5553\u5554\u5557\u5558\u5559\u555A\u555B\u555D\u555E\u555F\u5560\u5562\u5563\u5568\u5569\u556B\u556F\u5570\u5571\u5572\u5573\u5574\u5579\u557A\u557D\u557F\u5585\u5586\u558C\u558D\u558E\u5590\u5592\u5593\u5595\u5596\u5597\u559A\u559B\u559E\u55A0\u55A1\u55A2\u55A3\u55A4\u55A5\u55A6\u55A8\u55A9\u55AA\u55AB\u55AC\u55AD\u55AE\u55AF\u55B0\u55B2\u55B4\u55B6\u55B8\u55BA\u55BC\u55BF\u55C0\u55C1\u55C2\u55C3\u55C6\u55C7\u55C8\u55CA\u55CB\u55CE\u55CF\u55D0\u55D5\u55D7\u55D8\u55D9\u55DA\u55DB\u55DE\u55E0\u55E2\u55E7\u55E9\u55ED\u55EE\u55F0\u55F1\u55F4\u55F6\u55F8\u55F9\u55FA\u55FB\u55FC\u55FF\u5602\u5603\u5604\u5605\uFFFD".split("");
      for (j = 0; j != D[134].length; ++j)
        if (D[134][j].charCodeAt(0) !== 65533) {
          e[D[134][j]] = 34304 + j;
          d[34304 + j] = D[134][j];
        }
      D[135] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5606\u5607\u560A\u560B\u560D\u5610\u5611\u5612\u5613\u5614\u5615\u5616\u5617\u5619\u561A\u561C\u561D\u5620\u5621\u5622\u5625\u5626\u5628\u5629\u562A\u562B\u562E\u562F\u5630\u5633\u5635\u5637\u5638\u563A\u563C\u563D\u563E\u5640\u5641\u5642\u5643\u5644\u5645\u5646\u5647\u5648\u5649\u564A\u564B\u564F\u5650\u5651\u5652\u5653\u5655\u5656\u565A\u565B\u565D\u565E\u565F\u5660\u5661\uFFFD\u5663\u5665\u5666\u5667\u566D\u566E\u566F\u5670\u5672\u5673\u5674\u5675\u5677\u5678\u5679\u567A\u567D\u567E\u567F\u5680\u5681\u5682\u5683\u5684\u5687\u5688\u5689\u568A\u568B\u568C\u568D\u5690\u5691\u5692\u5694\u5695\u5696\u5697\u5698\u5699\u569A\u569B\u569C\u569D\u569E\u569F\u56A0\u56A1\u56A2\u56A4\u56A5\u56A6\u56A7\u56A8\u56A9\u56AA\u56AB\u56AC\u56AD\u56AE\u56B0\u56B1\u56B2\u56B3\u56B4\u56B5\u56B6\u56B8\u56B9\u56BA\u56BB\u56BD\u56BE\u56BF\u56C0\u56C1\u56C2\u56C3\u56C4\u56C5\u56C6\u56C7\u56C8\u56C9\u56CB\u56CC\u56CD\u56CE\u56CF\u56D0\u56D1\u56D2\u56D3\u56D5\u56D6\u56D8\u56D9\u56DC\u56E3\u56E5\u56E6\u56E7\u56E8\u56E9\u56EA\u56EC\u56EE\u56EF\u56F2\u56F3\u56F6\u56F7\u56F8\u56FB\u56FC\u5700\u5701\u5702\u5705\u5707\u570B\u570C\u570D\u570E\u570F\u5710\u5711\uFFFD".split("");
      for (j = 0; j != D[135].length; ++j)
        if (D[135][j].charCodeAt(0) !== 65533) {
          e[D[135][j]] = 34560 + j;
          d[34560 + j] = D[135][j];
        }
      D[136] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5712\u5713\u5714\u5715\u5716\u5717\u5718\u5719\u571A\u571B\u571D\u571E\u5720\u5721\u5722\u5724\u5725\u5726\u5727\u572B\u5731\u5732\u5734\u5735\u5736\u5737\u5738\u573C\u573D\u573F\u5741\u5743\u5744\u5745\u5746\u5748\u5749\u574B\u5752\u5753\u5754\u5755\u5756\u5758\u5759\u5762\u5763\u5765\u5767\u576C\u576E\u5770\u5771\u5772\u5774\u5775\u5778\u5779\u577A\u577D\u577E\u577F\u5780\uFFFD\u5781\u5787\u5788\u5789\u578A\u578D\u578E\u578F\u5790\u5791\u5794\u5795\u5796\u5797\u5798\u5799\u579A\u579C\u579D\u579E\u579F\u57A5\u57A8\u57AA\u57AC\u57AF\u57B0\u57B1\u57B3\u57B5\u57B6\u57B7\u57B9\u57BA\u57BB\u57BC\u57BD\u57BE\u57BF\u57C0\u57C1\u57C4\u57C5\u57C6\u57C7\u57C8\u57C9\u57CA\u57CC\u57CD\u57D0\u57D1\u57D3\u57D6\u57D7\u57DB\u57DC\u57DE\u57E1\u57E2\u57E3\u57E5\u57E6\u57E7\u57E8\u57E9\u57EA\u57EB\u57EC\u57EE\u57F0\u57F1\u57F2\u57F3\u57F5\u57F6\u57F7\u57FB\u57FC\u57FE\u57FF\u5801\u5803\u5804\u5805\u5808\u5809\u580A\u580C\u580E\u580F\u5810\u5812\u5813\u5814\u5816\u5817\u5818\u581A\u581B\u581C\u581D\u581F\u5822\u5823\u5825\u5826\u5827\u5828\u5829\u582B\u582C\u582D\u582E\u582F\u5831\u5832\u5833\u5834\u5836\u5837\u5838\u5839\u583A\u583B\u583C\u583D\uFFFD".split("");
      for (j = 0; j != D[136].length; ++j)
        if (D[136][j].charCodeAt(0) !== 65533) {
          e[D[136][j]] = 34816 + j;
          d[34816 + j] = D[136][j];
        }
      D[137] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u583E\u583F\u5840\u5841\u5842\u5843\u5845\u5846\u5847\u5848\u5849\u584A\u584B\u584E\u584F\u5850\u5852\u5853\u5855\u5856\u5857\u5859\u585A\u585B\u585C\u585D\u585F\u5860\u5861\u5862\u5863\u5864\u5866\u5867\u5868\u5869\u586A\u586D\u586E\u586F\u5870\u5871\u5872\u5873\u5874\u5875\u5876\u5877\u5878\u5879\u587A\u587B\u587C\u587D\u587F\u5882\u5884\u5886\u5887\u5888\u588A\u588B\u588C\uFFFD\u588D\u588E\u588F\u5890\u5891\u5894\u5895\u5896\u5897\u5898\u589B\u589C\u589D\u58A0\u58A1\u58A2\u58A3\u58A4\u58A5\u58A6\u58A7\u58AA\u58AB\u58AC\u58AD\u58AE\u58AF\u58B0\u58B1\u58B2\u58B3\u58B4\u58B5\u58B6\u58B7\u58B8\u58B9\u58BA\u58BB\u58BD\u58BE\u58BF\u58C0\u58C2\u58C3\u58C4\u58C6\u58C7\u58C8\u58C9\u58CA\u58CB\u58CC\u58CD\u58CE\u58CF\u58D0\u58D2\u58D3\u58D4\u58D6\u58D7\u58D8\u58D9\u58DA\u58DB\u58DC\u58DD\u58DE\u58DF\u58E0\u58E1\u58E2\u58E3\u58E5\u58E6\u58E7\u58E8\u58E9\u58EA\u58ED\u58EF\u58F1\u58F2\u58F4\u58F5\u58F7\u58F8\u58FA\u58FB\u58FC\u58FD\u58FE\u58FF\u5900\u5901\u5903\u5905\u5906\u5908\u5909\u590A\u590B\u590C\u590E\u5910\u5911\u5912\u5913\u5917\u5918\u591B\u591D\u591E\u5920\u5921\u5922\u5923\u5926\u5928\u592C\u5930\u5932\u5933\u5935\u5936\u593B\uFFFD".split("");
      for (j = 0; j != D[137].length; ++j)
        if (D[137][j].charCodeAt(0) !== 65533) {
          e[D[137][j]] = 35072 + j;
          d[35072 + j] = D[137][j];
        }
      D[138] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u593D\u593E\u593F\u5940\u5943\u5945\u5946\u594A\u594C\u594D\u5950\u5952\u5953\u5959\u595B\u595C\u595D\u595E\u595F\u5961\u5963\u5964\u5966\u5967\u5968\u5969\u596A\u596B\u596C\u596D\u596E\u596F\u5970\u5971\u5972\u5975\u5977\u597A\u597B\u597C\u597E\u597F\u5980\u5985\u5989\u598B\u598C\u598E\u598F\u5990\u5991\u5994\u5995\u5998\u599A\u599B\u599C\u599D\u599F\u59A0\u59A1\u59A2\u59A6\uFFFD\u59A7\u59AC\u59AD\u59B0\u59B1\u59B3\u59B4\u59B5\u59B6\u59B7\u59B8\u59BA\u59BC\u59BD\u59BF\u59C0\u59C1\u59C2\u59C3\u59C4\u59C5\u59C7\u59C8\u59C9\u59CC\u59CD\u59CE\u59CF\u59D5\u59D6\u59D9\u59DB\u59DE\u59DF\u59E0\u59E1\u59E2\u59E4\u59E6\u59E7\u59E9\u59EA\u59EB\u59ED\u59EE\u59EF\u59F0\u59F1\u59F2\u59F3\u59F4\u59F5\u59F6\u59F7\u59F8\u59FA\u59FC\u59FD\u59FE\u5A00\u5A02\u5A0A\u5A0B\u5A0D\u5A0E\u5A0F\u5A10\u5A12\u5A14\u5A15\u5A16\u5A17\u5A19\u5A1A\u5A1B\u5A1D\u5A1E\u5A21\u5A22\u5A24\u5A26\u5A27\u5A28\u5A2A\u5A2B\u5A2C\u5A2D\u5A2E\u5A2F\u5A30\u5A33\u5A35\u5A37\u5A38\u5A39\u5A3A\u5A3B\u5A3D\u5A3E\u5A3F\u5A41\u5A42\u5A43\u5A44\u5A45\u5A47\u5A48\u5A4B\u5A4C\u5A4D\u5A4E\u5A4F\u5A50\u5A51\u5A52\u5A53\u5A54\u5A56\u5A57\u5A58\u5A59\u5A5B\u5A5C\u5A5D\u5A5E\u5A5F\u5A60\uFFFD".split("");
      for (j = 0; j != D[138].length; ++j)
        if (D[138][j].charCodeAt(0) !== 65533) {
          e[D[138][j]] = 35328 + j;
          d[35328 + j] = D[138][j];
        }
      D[139] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5A61\u5A63\u5A64\u5A65\u5A66\u5A68\u5A69\u5A6B\u5A6C\u5A6D\u5A6E\u5A6F\u5A70\u5A71\u5A72\u5A73\u5A78\u5A79\u5A7B\u5A7C\u5A7D\u5A7E\u5A80\u5A81\u5A82\u5A83\u5A84\u5A85\u5A86\u5A87\u5A88\u5A89\u5A8A\u5A8B\u5A8C\u5A8D\u5A8E\u5A8F\u5A90\u5A91\u5A93\u5A94\u5A95\u5A96\u5A97\u5A98\u5A99\u5A9C\u5A9D\u5A9E\u5A9F\u5AA0\u5AA1\u5AA2\u5AA3\u5AA4\u5AA5\u5AA6\u5AA7\u5AA8\u5AA9\u5AAB\u5AAC\uFFFD\u5AAD\u5AAE\u5AAF\u5AB0\u5AB1\u5AB4\u5AB6\u5AB7\u5AB9\u5ABA\u5ABB\u5ABC\u5ABD\u5ABF\u5AC0\u5AC3\u5AC4\u5AC5\u5AC6\u5AC7\u5AC8\u5ACA\u5ACB\u5ACD\u5ACE\u5ACF\u5AD0\u5AD1\u5AD3\u5AD5\u5AD7\u5AD9\u5ADA\u5ADB\u5ADD\u5ADE\u5ADF\u5AE2\u5AE4\u5AE5\u5AE7\u5AE8\u5AEA\u5AEC\u5AED\u5AEE\u5AEF\u5AF0\u5AF2\u5AF3\u5AF4\u5AF5\u5AF6\u5AF7\u5AF8\u5AF9\u5AFA\u5AFB\u5AFC\u5AFD\u5AFE\u5AFF\u5B00\u5B01\u5B02\u5B03\u5B04\u5B05\u5B06\u5B07\u5B08\u5B0A\u5B0B\u5B0C\u5B0D\u5B0E\u5B0F\u5B10\u5B11\u5B12\u5B13\u5B14\u5B15\u5B18\u5B19\u5B1A\u5B1B\u5B1C\u5B1D\u5B1E\u5B1F\u5B20\u5B21\u5B22\u5B23\u5B24\u5B25\u5B26\u5B27\u5B28\u5B29\u5B2A\u5B2B\u5B2C\u5B2D\u5B2E\u5B2F\u5B30\u5B31\u5B33\u5B35\u5B36\u5B38\u5B39\u5B3A\u5B3B\u5B3C\u5B3D\u5B3E\u5B3F\u5B41\u5B42\u5B43\u5B44\u5B45\u5B46\u5B47\uFFFD".split("");
      for (j = 0; j != D[139].length; ++j)
        if (D[139][j].charCodeAt(0) !== 65533) {
          e[D[139][j]] = 35584 + j;
          d[35584 + j] = D[139][j];
        }
      D[140] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5B48\u5B49\u5B4A\u5B4B\u5B4C\u5B4D\u5B4E\u5B4F\u5B52\u5B56\u5B5E\u5B60\u5B61\u5B67\u5B68\u5B6B\u5B6D\u5B6E\u5B6F\u5B72\u5B74\u5B76\u5B77\u5B78\u5B79\u5B7B\u5B7C\u5B7E\u5B7F\u5B82\u5B86\u5B8A\u5B8D\u5B8E\u5B90\u5B91\u5B92\u5B94\u5B96\u5B9F\u5BA7\u5BA8\u5BA9\u5BAC\u5BAD\u5BAE\u5BAF\u5BB1\u5BB2\u5BB7\u5BBA\u5BBB\u5BBC\u5BC0\u5BC1\u5BC3\u5BC8\u5BC9\u5BCA\u5BCB\u5BCD\u5BCE\u5BCF\uFFFD\u5BD1\u5BD4\u5BD5\u5BD6\u5BD7\u5BD8\u5BD9\u5BDA\u5BDB\u5BDC\u5BE0\u5BE2\u5BE3\u5BE6\u5BE7\u5BE9\u5BEA\u5BEB\u5BEC\u5BED\u5BEF\u5BF1\u5BF2\u5BF3\u5BF4\u5BF5\u5BF6\u5BF7\u5BFD\u5BFE\u5C00\u5C02\u5C03\u5C05\u5C07\u5C08\u5C0B\u5C0C\u5C0D\u5C0E\u5C10\u5C12\u5C13\u5C17\u5C19\u5C1B\u5C1E\u5C1F\u5C20\u5C21\u5C23\u5C26\u5C28\u5C29\u5C2A\u5C2B\u5C2D\u5C2E\u5C2F\u5C30\u5C32\u5C33\u5C35\u5C36\u5C37\u5C43\u5C44\u5C46\u5C47\u5C4C\u5C4D\u5C52\u5C53\u5C54\u5C56\u5C57\u5C58\u5C5A\u5C5B\u5C5C\u5C5D\u5C5F\u5C62\u5C64\u5C67\u5C68\u5C69\u5C6A\u5C6B\u5C6C\u5C6D\u5C70\u5C72\u5C73\u5C74\u5C75\u5C76\u5C77\u5C78\u5C7B\u5C7C\u5C7D\u5C7E\u5C80\u5C83\u5C84\u5C85\u5C86\u5C87\u5C89\u5C8A\u5C8B\u5C8E\u5C8F\u5C92\u5C93\u5C95\u5C9D\u5C9E\u5C9F\u5CA0\u5CA1\u5CA4\u5CA5\u5CA6\u5CA7\u5CA8\uFFFD".split("");
      for (j = 0; j != D[140].length; ++j)
        if (D[140][j].charCodeAt(0) !== 65533) {
          e[D[140][j]] = 35840 + j;
          d[35840 + j] = D[140][j];
        }
      D[141] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5CAA\u5CAE\u5CAF\u5CB0\u5CB2\u5CB4\u5CB6\u5CB9\u5CBA\u5CBB\u5CBC\u5CBE\u5CC0\u5CC2\u5CC3\u5CC5\u5CC6\u5CC7\u5CC8\u5CC9\u5CCA\u5CCC\u5CCD\u5CCE\u5CCF\u5CD0\u5CD1\u5CD3\u5CD4\u5CD5\u5CD6\u5CD7\u5CD8\u5CDA\u5CDB\u5CDC\u5CDD\u5CDE\u5CDF\u5CE0\u5CE2\u5CE3\u5CE7\u5CE9\u5CEB\u5CEC\u5CEE\u5CEF\u5CF1\u5CF2\u5CF3\u5CF4\u5CF5\u5CF6\u5CF7\u5CF8\u5CF9\u5CFA\u5CFC\u5CFD\u5CFE\u5CFF\u5D00\uFFFD\u5D01\u5D04\u5D05\u5D08\u5D09\u5D0A\u5D0B\u5D0C\u5D0D\u5D0F\u5D10\u5D11\u5D12\u5D13\u5D15\u5D17\u5D18\u5D19\u5D1A\u5D1C\u5D1D\u5D1F\u5D20\u5D21\u5D22\u5D23\u5D25\u5D28\u5D2A\u5D2B\u5D2C\u5D2F\u5D30\u5D31\u5D32\u5D33\u5D35\u5D36\u5D37\u5D38\u5D39\u5D3A\u5D3B\u5D3C\u5D3F\u5D40\u5D41\u5D42\u5D43\u5D44\u5D45\u5D46\u5D48\u5D49\u5D4D\u5D4E\u5D4F\u5D50\u5D51\u5D52\u5D53\u5D54\u5D55\u5D56\u5D57\u5D59\u5D5A\u5D5C\u5D5E\u5D5F\u5D60\u5D61\u5D62\u5D63\u5D64\u5D65\u5D66\u5D67\u5D68\u5D6A\u5D6D\u5D6E\u5D70\u5D71\u5D72\u5D73\u5D75\u5D76\u5D77\u5D78\u5D79\u5D7A\u5D7B\u5D7C\u5D7D\u5D7E\u5D7F\u5D80\u5D81\u5D83\u5D84\u5D85\u5D86\u5D87\u5D88\u5D89\u5D8A\u5D8B\u5D8C\u5D8D\u5D8E\u5D8F\u5D90\u5D91\u5D92\u5D93\u5D94\u5D95\u5D96\u5D97\u5D98\u5D9A\u5D9B\u5D9C\u5D9E\u5D9F\u5DA0\uFFFD".split("");
      for (j = 0; j != D[141].length; ++j)
        if (D[141][j].charCodeAt(0) !== 65533) {
          e[D[141][j]] = 36096 + j;
          d[36096 + j] = D[141][j];
        }
      D[142] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5DA1\u5DA2\u5DA3\u5DA4\u5DA5\u5DA6\u5DA7\u5DA8\u5DA9\u5DAA\u5DAB\u5DAC\u5DAD\u5DAE\u5DAF\u5DB0\u5DB1\u5DB2\u5DB3\u5DB4\u5DB5\u5DB6\u5DB8\u5DB9\u5DBA\u5DBB\u5DBC\u5DBD\u5DBE\u5DBF\u5DC0\u5DC1\u5DC2\u5DC3\u5DC4\u5DC6\u5DC7\u5DC8\u5DC9\u5DCA\u5DCB\u5DCC\u5DCE\u5DCF\u5DD0\u5DD1\u5DD2\u5DD3\u5DD4\u5DD5\u5DD6\u5DD7\u5DD8\u5DD9\u5DDA\u5DDC\u5DDF\u5DE0\u5DE3\u5DE4\u5DEA\u5DEC\u5DED\uFFFD\u5DF0\u5DF5\u5DF6\u5DF8\u5DF9\u5DFA\u5DFB\u5DFC\u5DFF\u5E00\u5E04\u5E07\u5E09\u5E0A\u5E0B\u5E0D\u5E0E\u5E12\u5E13\u5E17\u5E1E\u5E1F\u5E20\u5E21\u5E22\u5E23\u5E24\u5E25\u5E28\u5E29\u5E2A\u5E2B\u5E2C\u5E2F\u5E30\u5E32\u5E33\u5E34\u5E35\u5E36\u5E39\u5E3A\u5E3E\u5E3F\u5E40\u5E41\u5E43\u5E46\u5E47\u5E48\u5E49\u5E4A\u5E4B\u5E4D\u5E4E\u5E4F\u5E50\u5E51\u5E52\u5E53\u5E56\u5E57\u5E58\u5E59\u5E5A\u5E5C\u5E5D\u5E5F\u5E60\u5E63\u5E64\u5E65\u5E66\u5E67\u5E68\u5E69\u5E6A\u5E6B\u5E6C\u5E6D\u5E6E\u5E6F\u5E70\u5E71\u5E75\u5E77\u5E79\u5E7E\u5E81\u5E82\u5E83\u5E85\u5E88\u5E89\u5E8C\u5E8D\u5E8E\u5E92\u5E98\u5E9B\u5E9D\u5EA1\u5EA2\u5EA3\u5EA4\u5EA8\u5EA9\u5EAA\u5EAB\u5EAC\u5EAE\u5EAF\u5EB0\u5EB1\u5EB2\u5EB4\u5EBA\u5EBB\u5EBC\u5EBD\u5EBF\u5EC0\u5EC1\u5EC2\u5EC3\u5EC4\u5EC5\uFFFD".split("");
      for (j = 0; j != D[142].length; ++j)
        if (D[142][j].charCodeAt(0) !== 65533) {
          e[D[142][j]] = 36352 + j;
          d[36352 + j] = D[142][j];
        }
      D[143] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5EC6\u5EC7\u5EC8\u5ECB\u5ECC\u5ECD\u5ECE\u5ECF\u5ED0\u5ED4\u5ED5\u5ED7\u5ED8\u5ED9\u5EDA\u5EDC\u5EDD\u5EDE\u5EDF\u5EE0\u5EE1\u5EE2\u5EE3\u5EE4\u5EE5\u5EE6\u5EE7\u5EE9\u5EEB\u5EEC\u5EED\u5EEE\u5EEF\u5EF0\u5EF1\u5EF2\u5EF3\u5EF5\u5EF8\u5EF9\u5EFB\u5EFC\u5EFD\u5F05\u5F06\u5F07\u5F09\u5F0C\u5F0D\u5F0E\u5F10\u5F12\u5F14\u5F16\u5F19\u5F1A\u5F1C\u5F1D\u5F1E\u5F21\u5F22\u5F23\u5F24\uFFFD\u5F28\u5F2B\u5F2C\u5F2E\u5F30\u5F32\u5F33\u5F34\u5F35\u5F36\u5F37\u5F38\u5F3B\u5F3D\u5F3E\u5F3F\u5F41\u5F42\u5F43\u5F44\u5F45\u5F46\u5F47\u5F48\u5F49\u5F4A\u5F4B\u5F4C\u5F4D\u5F4E\u5F4F\u5F51\u5F54\u5F59\u5F5A\u5F5B\u5F5C\u5F5E\u5F5F\u5F60\u5F63\u5F65\u5F67\u5F68\u5F6B\u5F6E\u5F6F\u5F72\u5F74\u5F75\u5F76\u5F78\u5F7A\u5F7D\u5F7E\u5F7F\u5F83\u5F86\u5F8D\u5F8E\u5F8F\u5F91\u5F93\u5F94\u5F96\u5F9A\u5F9B\u5F9D\u5F9E\u5F9F\u5FA0\u5FA2\u5FA3\u5FA4\u5FA5\u5FA6\u5FA7\u5FA9\u5FAB\u5FAC\u5FAF\u5FB0\u5FB1\u5FB2\u5FB3\u5FB4\u5FB6\u5FB8\u5FB9\u5FBA\u5FBB\u5FBE\u5FBF\u5FC0\u5FC1\u5FC2\u5FC7\u5FC8\u5FCA\u5FCB\u5FCE\u5FD3\u5FD4\u5FD5\u5FDA\u5FDB\u5FDC\u5FDE\u5FDF\u5FE2\u5FE3\u5FE5\u5FE6\u5FE8\u5FE9\u5FEC\u5FEF\u5FF0\u5FF2\u5FF3\u5FF4\u5FF6\u5FF7\u5FF9\u5FFA\u5FFC\u6007\uFFFD".split("");
      for (j = 0; j != D[143].length; ++j)
        if (D[143][j].charCodeAt(0) !== 65533) {
          e[D[143][j]] = 36608 + j;
          d[36608 + j] = D[143][j];
        }
      D[144] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6008\u6009\u600B\u600C\u6010\u6011\u6013\u6017\u6018\u601A\u601E\u601F\u6022\u6023\u6024\u602C\u602D\u602E\u6030\u6031\u6032\u6033\u6034\u6036\u6037\u6038\u6039\u603A\u603D\u603E\u6040\u6044\u6045\u6046\u6047\u6048\u6049\u604A\u604C\u604E\u604F\u6051\u6053\u6054\u6056\u6057\u6058\u605B\u605C\u605E\u605F\u6060\u6061\u6065\u6066\u606E\u6071\u6072\u6074\u6075\u6077\u607E\u6080\uFFFD\u6081\u6082\u6085\u6086\u6087\u6088\u608A\u608B\u608E\u608F\u6090\u6091\u6093\u6095\u6097\u6098\u6099\u609C\u609E\u60A1\u60A2\u60A4\u60A5\u60A7\u60A9\u60AA\u60AE\u60B0\u60B3\u60B5\u60B6\u60B7\u60B9\u60BA\u60BD\u60BE\u60BF\u60C0\u60C1\u60C2\u60C3\u60C4\u60C7\u60C8\u60C9\u60CC\u60CD\u60CE\u60CF\u60D0\u60D2\u60D3\u60D4\u60D6\u60D7\u60D9\u60DB\u60DE\u60E1\u60E2\u60E3\u60E4\u60E5\u60EA\u60F1\u60F2\u60F5\u60F7\u60F8\u60FB\u60FC\u60FD\u60FE\u60FF\u6102\u6103\u6104\u6105\u6107\u610A\u610B\u610C\u6110\u6111\u6112\u6113\u6114\u6116\u6117\u6118\u6119\u611B\u611C\u611D\u611E\u6121\u6122\u6125\u6128\u6129\u612A\u612C\u612D\u612E\u612F\u6130\u6131\u6132\u6133\u6134\u6135\u6136\u6137\u6138\u6139\u613A\u613B\u613C\u613D\u613E\u6140\u6141\u6142\u6143\u6144\u6145\u6146\uFFFD".split("");
      for (j = 0; j != D[144].length; ++j)
        if (D[144][j].charCodeAt(0) !== 65533) {
          e[D[144][j]] = 36864 + j;
          d[36864 + j] = D[144][j];
        }
      D[145] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6147\u6149\u614B\u614D\u614F\u6150\u6152\u6153\u6154\u6156\u6157\u6158\u6159\u615A\u615B\u615C\u615E\u615F\u6160\u6161\u6163\u6164\u6165\u6166\u6169\u616A\u616B\u616C\u616D\u616E\u616F\u6171\u6172\u6173\u6174\u6176\u6178\u6179\u617A\u617B\u617C\u617D\u617E\u617F\u6180\u6181\u6182\u6183\u6184\u6185\u6186\u6187\u6188\u6189\u618A\u618C\u618D\u618F\u6190\u6191\u6192\u6193\u6195\uFFFD\u6196\u6197\u6198\u6199\u619A\u619B\u619C\u619E\u619F\u61A0\u61A1\u61A2\u61A3\u61A4\u61A5\u61A6\u61AA\u61AB\u61AD\u61AE\u61AF\u61B0\u61B1\u61B2\u61B3\u61B4\u61B5\u61B6\u61B8\u61B9\u61BA\u61BB\u61BC\u61BD\u61BF\u61C0\u61C1\u61C3\u61C4\u61C5\u61C6\u61C7\u61C9\u61CC\u61CD\u61CE\u61CF\u61D0\u61D3\u61D5\u61D6\u61D7\u61D8\u61D9\u61DA\u61DB\u61DC\u61DD\u61DE\u61DF\u61E0\u61E1\u61E2\u61E3\u61E4\u61E5\u61E7\u61E8\u61E9\u61EA\u61EB\u61EC\u61ED\u61EE\u61EF\u61F0\u61F1\u61F2\u61F3\u61F4\u61F6\u61F7\u61F8\u61F9\u61FA\u61FB\u61FC\u61FD\u61FE\u6200\u6201\u6202\u6203\u6204\u6205\u6207\u6209\u6213\u6214\u6219\u621C\u621D\u621E\u6220\u6223\u6226\u6227\u6228\u6229\u622B\u622D\u622F\u6230\u6231\u6232\u6235\u6236\u6238\u6239\u623A\u623B\u623C\u6242\u6244\u6245\u6246\u624A\uFFFD".split("");
      for (j = 0; j != D[145].length; ++j)
        if (D[145][j].charCodeAt(0) !== 65533) {
          e[D[145][j]] = 37120 + j;
          d[37120 + j] = D[145][j];
        }
      D[146] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u624F\u6250\u6255\u6256\u6257\u6259\u625A\u625C\u625D\u625E\u625F\u6260\u6261\u6262\u6264\u6265\u6268\u6271\u6272\u6274\u6275\u6277\u6278\u627A\u627B\u627D\u6281\u6282\u6283\u6285\u6286\u6287\u6288\u628B\u628C\u628D\u628E\u628F\u6290\u6294\u6299\u629C\u629D\u629E\u62A3\u62A6\u62A7\u62A9\u62AA\u62AD\u62AE\u62AF\u62B0\u62B2\u62B3\u62B4\u62B6\u62B7\u62B8\u62BA\u62BE\u62C0\u62C1\uFFFD\u62C3\u62CB\u62CF\u62D1\u62D5\u62DD\u62DE\u62E0\u62E1\u62E4\u62EA\u62EB\u62F0\u62F2\u62F5\u62F8\u62F9\u62FA\u62FB\u6300\u6303\u6304\u6305\u6306\u630A\u630B\u630C\u630D\u630F\u6310\u6312\u6313\u6314\u6315\u6317\u6318\u6319\u631C\u6326\u6327\u6329\u632C\u632D\u632E\u6330\u6331\u6333\u6334\u6335\u6336\u6337\u6338\u633B\u633C\u633E\u633F\u6340\u6341\u6344\u6347\u6348\u634A\u6351\u6352\u6353\u6354\u6356\u6357\u6358\u6359\u635A\u635B\u635C\u635D\u6360\u6364\u6365\u6366\u6368\u636A\u636B\u636C\u636F\u6370\u6372\u6373\u6374\u6375\u6378\u6379\u637C\u637D\u637E\u637F\u6381\u6383\u6384\u6385\u6386\u638B\u638D\u6391\u6393\u6394\u6395\u6397\u6399\u639A\u639B\u639C\u639D\u639E\u639F\u63A1\u63A4\u63A6\u63AB\u63AF\u63B1\u63B2\u63B5\u63B6\u63B9\u63BB\u63BD\u63BF\u63C0\uFFFD".split("");
      for (j = 0; j != D[146].length; ++j)
        if (D[146][j].charCodeAt(0) !== 65533) {
          e[D[146][j]] = 37376 + j;
          d[37376 + j] = D[146][j];
        }
      D[147] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u63C1\u63C2\u63C3\u63C5\u63C7\u63C8\u63CA\u63CB\u63CC\u63D1\u63D3\u63D4\u63D5\u63D7\u63D8\u63D9\u63DA\u63DB\u63DC\u63DD\u63DF\u63E2\u63E4\u63E5\u63E6\u63E7\u63E8\u63EB\u63EC\u63EE\u63EF\u63F0\u63F1\u63F3\u63F5\u63F7\u63F9\u63FA\u63FB\u63FC\u63FE\u6403\u6404\u6406\u6407\u6408\u6409\u640A\u640D\u640E\u6411\u6412\u6415\u6416\u6417\u6418\u6419\u641A\u641D\u641F\u6422\u6423\u6424\uFFFD\u6425\u6427\u6428\u6429\u642B\u642E\u642F\u6430\u6431\u6432\u6433\u6435\u6436\u6437\u6438\u6439\u643B\u643C\u643E\u6440\u6442\u6443\u6449\u644B\u644C\u644D\u644E\u644F\u6450\u6451\u6453\u6455\u6456\u6457\u6459\u645A\u645B\u645C\u645D\u645F\u6460\u6461\u6462\u6463\u6464\u6465\u6466\u6468\u646A\u646B\u646C\u646E\u646F\u6470\u6471\u6472\u6473\u6474\u6475\u6476\u6477\u647B\u647C\u647D\u647E\u647F\u6480\u6481\u6483\u6486\u6488\u6489\u648A\u648B\u648C\u648D\u648E\u648F\u6490\u6493\u6494\u6497\u6498\u649A\u649B\u649C\u649D\u649F\u64A0\u64A1\u64A2\u64A3\u64A5\u64A6\u64A7\u64A8\u64AA\u64AB\u64AF\u64B1\u64B2\u64B3\u64B4\u64B6\u64B9\u64BB\u64BD\u64BE\u64BF\u64C1\u64C3\u64C4\u64C6\u64C7\u64C8\u64C9\u64CA\u64CB\u64CC\u64CF\u64D1\u64D3\u64D4\u64D5\u64D6\u64D9\u64DA\uFFFD".split("");
      for (j = 0; j != D[147].length; ++j)
        if (D[147][j].charCodeAt(0) !== 65533) {
          e[D[147][j]] = 37632 + j;
          d[37632 + j] = D[147][j];
        }
      D[148] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u64DB\u64DC\u64DD\u64DF\u64E0\u64E1\u64E3\u64E5\u64E7\u64E8\u64E9\u64EA\u64EB\u64EC\u64ED\u64EE\u64EF\u64F0\u64F1\u64F2\u64F3\u64F4\u64F5\u64F6\u64F7\u64F8\u64F9\u64FA\u64FB\u64FC\u64FD\u64FE\u64FF\u6501\u6502\u6503\u6504\u6505\u6506\u6507\u6508\u650A\u650B\u650C\u650D\u650E\u650F\u6510\u6511\u6513\u6514\u6515\u6516\u6517\u6519\u651A\u651B\u651C\u651D\u651E\u651F\u6520\u6521\uFFFD\u6522\u6523\u6524\u6526\u6527\u6528\u6529\u652A\u652C\u652D\u6530\u6531\u6532\u6533\u6537\u653A\u653C\u653D\u6540\u6541\u6542\u6543\u6544\u6546\u6547\u654A\u654B\u654D\u654E\u6550\u6552\u6553\u6554\u6557\u6558\u655A\u655C\u655F\u6560\u6561\u6564\u6565\u6567\u6568\u6569\u656A\u656D\u656E\u656F\u6571\u6573\u6575\u6576\u6578\u6579\u657A\u657B\u657C\u657D\u657E\u657F\u6580\u6581\u6582\u6583\u6584\u6585\u6586\u6588\u6589\u658A\u658D\u658E\u658F\u6592\u6594\u6595\u6596\u6598\u659A\u659D\u659E\u65A0\u65A2\u65A3\u65A6\u65A8\u65AA\u65AC\u65AE\u65B1\u65B2\u65B3\u65B4\u65B5\u65B6\u65B7\u65B8\u65BA\u65BB\u65BE\u65BF\u65C0\u65C2\u65C7\u65C8\u65C9\u65CA\u65CD\u65D0\u65D1\u65D3\u65D4\u65D5\u65D8\u65D9\u65DA\u65DB\u65DC\u65DD\u65DE\u65DF\u65E1\u65E3\u65E4\u65EA\u65EB\uFFFD".split("");
      for (j = 0; j != D[148].length; ++j)
        if (D[148][j].charCodeAt(0) !== 65533) {
          e[D[148][j]] = 37888 + j;
          d[37888 + j] = D[148][j];
        }
      D[149] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u65F2\u65F3\u65F4\u65F5\u65F8\u65F9\u65FB\u65FC\u65FD\u65FE\u65FF\u6601\u6604\u6605\u6607\u6608\u6609\u660B\u660D\u6610\u6611\u6612\u6616\u6617\u6618\u661A\u661B\u661C\u661E\u6621\u6622\u6623\u6624\u6626\u6629\u662A\u662B\u662C\u662E\u6630\u6632\u6633\u6637\u6638\u6639\u663A\u663B\u663D\u663F\u6640\u6642\u6644\u6645\u6646\u6647\u6648\u6649\u664A\u664D\u664E\u6650\u6651\u6658\uFFFD\u6659\u665B\u665C\u665D\u665E\u6660\u6662\u6663\u6665\u6667\u6669\u666A\u666B\u666C\u666D\u6671\u6672\u6673\u6675\u6678\u6679\u667B\u667C\u667D\u667F\u6680\u6681\u6683\u6685\u6686\u6688\u6689\u668A\u668B\u668D\u668E\u668F\u6690\u6692\u6693\u6694\u6695\u6698\u6699\u669A\u669B\u669C\u669E\u669F\u66A0\u66A1\u66A2\u66A3\u66A4\u66A5\u66A6\u66A9\u66AA\u66AB\u66AC\u66AD\u66AF\u66B0\u66B1\u66B2\u66B3\u66B5\u66B6\u66B7\u66B8\u66BA\u66BB\u66BC\u66BD\u66BF\u66C0\u66C1\u66C2\u66C3\u66C4\u66C5\u66C6\u66C7\u66C8\u66C9\u66CA\u66CB\u66CC\u66CD\u66CE\u66CF\u66D0\u66D1\u66D2\u66D3\u66D4\u66D5\u66D6\u66D7\u66D8\u66DA\u66DE\u66DF\u66E0\u66E1\u66E2\u66E3\u66E4\u66E5\u66E7\u66E8\u66EA\u66EB\u66EC\u66ED\u66EE\u66EF\u66F1\u66F5\u66F6\u66F8\u66FA\u66FB\u66FD\u6701\u6702\u6703\uFFFD".split("");
      for (j = 0; j != D[149].length; ++j)
        if (D[149][j].charCodeAt(0) !== 65533) {
          e[D[149][j]] = 38144 + j;
          d[38144 + j] = D[149][j];
        }
      D[150] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6704\u6705\u6706\u6707\u670C\u670E\u670F\u6711\u6712\u6713\u6716\u6718\u6719\u671A\u671C\u671E\u6720\u6721\u6722\u6723\u6724\u6725\u6727\u6729\u672E\u6730\u6732\u6733\u6736\u6737\u6738\u6739\u673B\u673C\u673E\u673F\u6741\u6744\u6745\u6747\u674A\u674B\u674D\u6752\u6754\u6755\u6757\u6758\u6759\u675A\u675B\u675D\u6762\u6763\u6764\u6766\u6767\u676B\u676C\u676E\u6771\u6774\u6776\uFFFD\u6778\u6779\u677A\u677B\u677D\u6780\u6782\u6783\u6785\u6786\u6788\u678A\u678C\u678D\u678E\u678F\u6791\u6792\u6793\u6794\u6796\u6799\u679B\u679F\u67A0\u67A1\u67A4\u67A6\u67A9\u67AC\u67AE\u67B1\u67B2\u67B4\u67B9\u67BA\u67BB\u67BC\u67BD\u67BE\u67BF\u67C0\u67C2\u67C5\u67C6\u67C7\u67C8\u67C9\u67CA\u67CB\u67CC\u67CD\u67CE\u67D5\u67D6\u67D7\u67DB\u67DF\u67E1\u67E3\u67E4\u67E6\u67E7\u67E8\u67EA\u67EB\u67ED\u67EE\u67F2\u67F5\u67F6\u67F7\u67F8\u67F9\u67FA\u67FB\u67FC\u67FE\u6801\u6802\u6803\u6804\u6806\u680D\u6810\u6812\u6814\u6815\u6818\u6819\u681A\u681B\u681C\u681E\u681F\u6820\u6822\u6823\u6824\u6825\u6826\u6827\u6828\u682B\u682C\u682D\u682E\u682F\u6830\u6831\u6834\u6835\u6836\u683A\u683B\u683F\u6847\u684B\u684D\u684F\u6852\u6856\u6857\u6858\u6859\u685A\u685B\uFFFD".split("");
      for (j = 0; j != D[150].length; ++j)
        if (D[150][j].charCodeAt(0) !== 65533) {
          e[D[150][j]] = 38400 + j;
          d[38400 + j] = D[150][j];
        }
      D[151] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u685C\u685D\u685E\u685F\u686A\u686C\u686D\u686E\u686F\u6870\u6871\u6872\u6873\u6875\u6878\u6879\u687A\u687B\u687C\u687D\u687E\u687F\u6880\u6882\u6884\u6887\u6888\u6889\u688A\u688B\u688C\u688D\u688E\u6890\u6891\u6892\u6894\u6895\u6896\u6898\u6899\u689A\u689B\u689C\u689D\u689E\u689F\u68A0\u68A1\u68A3\u68A4\u68A5\u68A9\u68AA\u68AB\u68AC\u68AE\u68B1\u68B2\u68B4\u68B6\u68B7\u68B8\uFFFD\u68B9\u68BA\u68BB\u68BC\u68BD\u68BE\u68BF\u68C1\u68C3\u68C4\u68C5\u68C6\u68C7\u68C8\u68CA\u68CC\u68CE\u68CF\u68D0\u68D1\u68D3\u68D4\u68D6\u68D7\u68D9\u68DB\u68DC\u68DD\u68DE\u68DF\u68E1\u68E2\u68E4\u68E5\u68E6\u68E7\u68E8\u68E9\u68EA\u68EB\u68EC\u68ED\u68EF\u68F2\u68F3\u68F4\u68F6\u68F7\u68F8\u68FB\u68FD\u68FE\u68FF\u6900\u6902\u6903\u6904\u6906\u6907\u6908\u6909\u690A\u690C\u690F\u6911\u6913\u6914\u6915\u6916\u6917\u6918\u6919\u691A\u691B\u691C\u691D\u691E\u6921\u6922\u6923\u6925\u6926\u6927\u6928\u6929\u692A\u692B\u692C\u692E\u692F\u6931\u6932\u6933\u6935\u6936\u6937\u6938\u693A\u693B\u693C\u693E\u6940\u6941\u6943\u6944\u6945\u6946\u6947\u6948\u6949\u694A\u694B\u694C\u694D\u694E\u694F\u6950\u6951\u6952\u6953\u6955\u6956\u6958\u6959\u695B\u695C\u695F\uFFFD".split("");
      for (j = 0; j != D[151].length; ++j)
        if (D[151][j].charCodeAt(0) !== 65533) {
          e[D[151][j]] = 38656 + j;
          d[38656 + j] = D[151][j];
        }
      D[152] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6961\u6962\u6964\u6965\u6967\u6968\u6969\u696A\u696C\u696D\u696F\u6970\u6972\u6973\u6974\u6975\u6976\u697A\u697B\u697D\u697E\u697F\u6981\u6983\u6985\u698A\u698B\u698C\u698E\u698F\u6990\u6991\u6992\u6993\u6996\u6997\u6999\u699A\u699D\u699E\u699F\u69A0\u69A1\u69A2\u69A3\u69A4\u69A5\u69A6\u69A9\u69AA\u69AC\u69AE\u69AF\u69B0\u69B2\u69B3\u69B5\u69B6\u69B8\u69B9\u69BA\u69BC\u69BD\uFFFD\u69BE\u69BF\u69C0\u69C2\u69C3\u69C4\u69C5\u69C6\u69C7\u69C8\u69C9\u69CB\u69CD\u69CF\u69D1\u69D2\u69D3\u69D5\u69D6\u69D7\u69D8\u69D9\u69DA\u69DC\u69DD\u69DE\u69E1\u69E2\u69E3\u69E4\u69E5\u69E6\u69E7\u69E8\u69E9\u69EA\u69EB\u69EC\u69EE\u69EF\u69F0\u69F1\u69F3\u69F4\u69F5\u69F6\u69F7\u69F8\u69F9\u69FA\u69FB\u69FC\u69FE\u6A00\u6A01\u6A02\u6A03\u6A04\u6A05\u6A06\u6A07\u6A08\u6A09\u6A0B\u6A0C\u6A0D\u6A0E\u6A0F\u6A10\u6A11\u6A12\u6A13\u6A14\u6A15\u6A16\u6A19\u6A1A\u6A1B\u6A1C\u6A1D\u6A1E\u6A20\u6A22\u6A23\u6A24\u6A25\u6A26\u6A27\u6A29\u6A2B\u6A2C\u6A2D\u6A2E\u6A30\u6A32\u6A33\u6A34\u6A36\u6A37\u6A38\u6A39\u6A3A\u6A3B\u6A3C\u6A3F\u6A40\u6A41\u6A42\u6A43\u6A45\u6A46\u6A48\u6A49\u6A4A\u6A4B\u6A4C\u6A4D\u6A4E\u6A4F\u6A51\u6A52\u6A53\u6A54\u6A55\u6A56\u6A57\u6A5A\uFFFD".split("");
      for (j = 0; j != D[152].length; ++j)
        if (D[152][j].charCodeAt(0) !== 65533) {
          e[D[152][j]] = 38912 + j;
          d[38912 + j] = D[152][j];
        }
      D[153] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6A5C\u6A5D\u6A5E\u6A5F\u6A60\u6A62\u6A63\u6A64\u6A66\u6A67\u6A68\u6A69\u6A6A\u6A6B\u6A6C\u6A6D\u6A6E\u6A6F\u6A70\u6A72\u6A73\u6A74\u6A75\u6A76\u6A77\u6A78\u6A7A\u6A7B\u6A7D\u6A7E\u6A7F\u6A81\u6A82\u6A83\u6A85\u6A86\u6A87\u6A88\u6A89\u6A8A\u6A8B\u6A8C\u6A8D\u6A8F\u6A92\u6A93\u6A94\u6A95\u6A96\u6A98\u6A99\u6A9A\u6A9B\u6A9C\u6A9D\u6A9E\u6A9F\u6AA1\u6AA2\u6AA3\u6AA4\u6AA5\u6AA6\uFFFD\u6AA7\u6AA8\u6AAA\u6AAD\u6AAE\u6AAF\u6AB0\u6AB1\u6AB2\u6AB3\u6AB4\u6AB5\u6AB6\u6AB7\u6AB8\u6AB9\u6ABA\u6ABB\u6ABC\u6ABD\u6ABE\u6ABF\u6AC0\u6AC1\u6AC2\u6AC3\u6AC4\u6AC5\u6AC6\u6AC7\u6AC8\u6AC9\u6ACA\u6ACB\u6ACC\u6ACD\u6ACE\u6ACF\u6AD0\u6AD1\u6AD2\u6AD3\u6AD4\u6AD5\u6AD6\u6AD7\u6AD8\u6AD9\u6ADA\u6ADB\u6ADC\u6ADD\u6ADE\u6ADF\u6AE0\u6AE1\u6AE2\u6AE3\u6AE4\u6AE5\u6AE6\u6AE7\u6AE8\u6AE9\u6AEA\u6AEB\u6AEC\u6AED\u6AEE\u6AEF\u6AF0\u6AF1\u6AF2\u6AF3\u6AF4\u6AF5\u6AF6\u6AF7\u6AF8\u6AF9\u6AFA\u6AFB\u6AFC\u6AFD\u6AFE\u6AFF\u6B00\u6B01\u6B02\u6B03\u6B04\u6B05\u6B06\u6B07\u6B08\u6B09\u6B0A\u6B0B\u6B0C\u6B0D\u6B0E\u6B0F\u6B10\u6B11\u6B12\u6B13\u6B14\u6B15\u6B16\u6B17\u6B18\u6B19\u6B1A\u6B1B\u6B1C\u6B1D\u6B1E\u6B1F\u6B25\u6B26\u6B28\u6B29\u6B2A\u6B2B\u6B2C\u6B2D\u6B2E\uFFFD".split("");
      for (j = 0; j != D[153].length; ++j)
        if (D[153][j].charCodeAt(0) !== 65533) {
          e[D[153][j]] = 39168 + j;
          d[39168 + j] = D[153][j];
        }
      D[154] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6B2F\u6B30\u6B31\u6B33\u6B34\u6B35\u6B36\u6B38\u6B3B\u6B3C\u6B3D\u6B3F\u6B40\u6B41\u6B42\u6B44\u6B45\u6B48\u6B4A\u6B4B\u6B4D\u6B4E\u6B4F\u6B50\u6B51\u6B52\u6B53\u6B54\u6B55\u6B56\u6B57\u6B58\u6B5A\u6B5B\u6B5C\u6B5D\u6B5E\u6B5F\u6B60\u6B61\u6B68\u6B69\u6B6B\u6B6C\u6B6D\u6B6E\u6B6F\u6B70\u6B71\u6B72\u6B73\u6B74\u6B75\u6B76\u6B77\u6B78\u6B7A\u6B7D\u6B7E\u6B7F\u6B80\u6B85\u6B88\uFFFD\u6B8C\u6B8E\u6B8F\u6B90\u6B91\u6B94\u6B95\u6B97\u6B98\u6B99\u6B9C\u6B9D\u6B9E\u6B9F\u6BA0\u6BA2\u6BA3\u6BA4\u6BA5\u6BA6\u6BA7\u6BA8\u6BA9\u6BAB\u6BAC\u6BAD\u6BAE\u6BAF\u6BB0\u6BB1\u6BB2\u6BB6\u6BB8\u6BB9\u6BBA\u6BBB\u6BBC\u6BBD\u6BBE\u6BC0\u6BC3\u6BC4\u6BC6\u6BC7\u6BC8\u6BC9\u6BCA\u6BCC\u6BCE\u6BD0\u6BD1\u6BD8\u6BDA\u6BDC\u6BDD\u6BDE\u6BDF\u6BE0\u6BE2\u6BE3\u6BE4\u6BE5\u6BE6\u6BE7\u6BE8\u6BE9\u6BEC\u6BED\u6BEE\u6BF0\u6BF1\u6BF2\u6BF4\u6BF6\u6BF7\u6BF8\u6BFA\u6BFB\u6BFC\u6BFE\u6BFF\u6C00\u6C01\u6C02\u6C03\u6C04\u6C08\u6C09\u6C0A\u6C0B\u6C0C\u6C0E\u6C12\u6C17\u6C1C\u6C1D\u6C1E\u6C20\u6C23\u6C25\u6C2B\u6C2C\u6C2D\u6C31\u6C33\u6C36\u6C37\u6C39\u6C3A\u6C3B\u6C3C\u6C3E\u6C3F\u6C43\u6C44\u6C45\u6C48\u6C4B\u6C4C\u6C4D\u6C4E\u6C4F\u6C51\u6C52\u6C53\u6C56\u6C58\uFFFD".split("");
      for (j = 0; j != D[154].length; ++j)
        if (D[154][j].charCodeAt(0) !== 65533) {
          e[D[154][j]] = 39424 + j;
          d[39424 + j] = D[154][j];
        }
      D[155] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6C59\u6C5A\u6C62\u6C63\u6C65\u6C66\u6C67\u6C6B\u6C6C\u6C6D\u6C6E\u6C6F\u6C71\u6C73\u6C75\u6C77\u6C78\u6C7A\u6C7B\u6C7C\u6C7F\u6C80\u6C84\u6C87\u6C8A\u6C8B\u6C8D\u6C8E\u6C91\u6C92\u6C95\u6C96\u6C97\u6C98\u6C9A\u6C9C\u6C9D\u6C9E\u6CA0\u6CA2\u6CA8\u6CAC\u6CAF\u6CB0\u6CB4\u6CB5\u6CB6\u6CB7\u6CBA\u6CC0\u6CC1\u6CC2\u6CC3\u6CC6\u6CC7\u6CC8\u6CCB\u6CCD\u6CCE\u6CCF\u6CD1\u6CD2\u6CD8\uFFFD\u6CD9\u6CDA\u6CDC\u6CDD\u6CDF\u6CE4\u6CE6\u6CE7\u6CE9\u6CEC\u6CED\u6CF2\u6CF4\u6CF9\u6CFF\u6D00\u6D02\u6D03\u6D05\u6D06\u6D08\u6D09\u6D0A\u6D0D\u6D0F\u6D10\u6D11\u6D13\u6D14\u6D15\u6D16\u6D18\u6D1C\u6D1D\u6D1F\u6D20\u6D21\u6D22\u6D23\u6D24\u6D26\u6D28\u6D29\u6D2C\u6D2D\u6D2F\u6D30\u6D34\u6D36\u6D37\u6D38\u6D3A\u6D3F\u6D40\u6D42\u6D44\u6D49\u6D4C\u6D50\u6D55\u6D56\u6D57\u6D58\u6D5B\u6D5D\u6D5F\u6D61\u6D62\u6D64\u6D65\u6D67\u6D68\u6D6B\u6D6C\u6D6D\u6D70\u6D71\u6D72\u6D73\u6D75\u6D76\u6D79\u6D7A\u6D7B\u6D7D\u6D7E\u6D7F\u6D80\u6D81\u6D83\u6D84\u6D86\u6D87\u6D8A\u6D8B\u6D8D\u6D8F\u6D90\u6D92\u6D96\u6D97\u6D98\u6D99\u6D9A\u6D9C\u6DA2\u6DA5\u6DAC\u6DAD\u6DB0\u6DB1\u6DB3\u6DB4\u6DB6\u6DB7\u6DB9\u6DBA\u6DBB\u6DBC\u6DBD\u6DBE\u6DC1\u6DC2\u6DC3\u6DC8\u6DC9\u6DCA\uFFFD".split("");
      for (j = 0; j != D[155].length; ++j)
        if (D[155][j].charCodeAt(0) !== 65533) {
          e[D[155][j]] = 39680 + j;
          d[39680 + j] = D[155][j];
        }
      D[156] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6DCD\u6DCE\u6DCF\u6DD0\u6DD2\u6DD3\u6DD4\u6DD5\u6DD7\u6DDA\u6DDB\u6DDC\u6DDF\u6DE2\u6DE3\u6DE5\u6DE7\u6DE8\u6DE9\u6DEA\u6DED\u6DEF\u6DF0\u6DF2\u6DF4\u6DF5\u6DF6\u6DF8\u6DFA\u6DFD\u6DFE\u6DFF\u6E00\u6E01\u6E02\u6E03\u6E04\u6E06\u6E07\u6E08\u6E09\u6E0B\u6E0F\u6E12\u6E13\u6E15\u6E18\u6E19\u6E1B\u6E1C\u6E1E\u6E1F\u6E22\u6E26\u6E27\u6E28\u6E2A\u6E2C\u6E2E\u6E30\u6E31\u6E33\u6E35\uFFFD\u6E36\u6E37\u6E39\u6E3B\u6E3C\u6E3D\u6E3E\u6E3F\u6E40\u6E41\u6E42\u6E45\u6E46\u6E47\u6E48\u6E49\u6E4A\u6E4B\u6E4C\u6E4F\u6E50\u6E51\u6E52\u6E55\u6E57\u6E59\u6E5A\u6E5C\u6E5D\u6E5E\u6E60\u6E61\u6E62\u6E63\u6E64\u6E65\u6E66\u6E67\u6E68\u6E69\u6E6A\u6E6C\u6E6D\u6E6F\u6E70\u6E71\u6E72\u6E73\u6E74\u6E75\u6E76\u6E77\u6E78\u6E79\u6E7A\u6E7B\u6E7C\u6E7D\u6E80\u6E81\u6E82\u6E84\u6E87\u6E88\u6E8A\u6E8B\u6E8C\u6E8D\u6E8E\u6E91\u6E92\u6E93\u6E94\u6E95\u6E96\u6E97\u6E99\u6E9A\u6E9B\u6E9D\u6E9E\u6EA0\u6EA1\u6EA3\u6EA4\u6EA6\u6EA8\u6EA9\u6EAB\u6EAC\u6EAD\u6EAE\u6EB0\u6EB3\u6EB5\u6EB8\u6EB9\u6EBC\u6EBE\u6EBF\u6EC0\u6EC3\u6EC4\u6EC5\u6EC6\u6EC8\u6EC9\u6ECA\u6ECC\u6ECD\u6ECE\u6ED0\u6ED2\u6ED6\u6ED8\u6ED9\u6EDB\u6EDC\u6EDD\u6EE3\u6EE7\u6EEA\u6EEB\u6EEC\u6EED\u6EEE\u6EEF\uFFFD".split("");
      for (j = 0; j != D[156].length; ++j)
        if (D[156][j].charCodeAt(0) !== 65533) {
          e[D[156][j]] = 39936 + j;
          d[39936 + j] = D[156][j];
        }
      D[157] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6EF0\u6EF1\u6EF2\u6EF3\u6EF5\u6EF6\u6EF7\u6EF8\u6EFA\u6EFB\u6EFC\u6EFD\u6EFE\u6EFF\u6F00\u6F01\u6F03\u6F04\u6F05\u6F07\u6F08\u6F0A\u6F0B\u6F0C\u6F0D\u6F0E\u6F10\u6F11\u6F12\u6F16\u6F17\u6F18\u6F19\u6F1A\u6F1B\u6F1C\u6F1D\u6F1E\u6F1F\u6F21\u6F22\u6F23\u6F25\u6F26\u6F27\u6F28\u6F2C\u6F2E\u6F30\u6F32\u6F34\u6F35\u6F37\u6F38\u6F39\u6F3A\u6F3B\u6F3C\u6F3D\u6F3F\u6F40\u6F41\u6F42\uFFFD\u6F43\u6F44\u6F45\u6F48\u6F49\u6F4A\u6F4C\u6F4E\u6F4F\u6F50\u6F51\u6F52\u6F53\u6F54\u6F55\u6F56\u6F57\u6F59\u6F5A\u6F5B\u6F5D\u6F5F\u6F60\u6F61\u6F63\u6F64\u6F65\u6F67\u6F68\u6F69\u6F6A\u6F6B\u6F6C\u6F6F\u6F70\u6F71\u6F73\u6F75\u6F76\u6F77\u6F79\u6F7B\u6F7D\u6F7E\u6F7F\u6F80\u6F81\u6F82\u6F83\u6F85\u6F86\u6F87\u6F8A\u6F8B\u6F8F\u6F90\u6F91\u6F92\u6F93\u6F94\u6F95\u6F96\u6F97\u6F98\u6F99\u6F9A\u6F9B\u6F9D\u6F9E\u6F9F\u6FA0\u6FA2\u6FA3\u6FA4\u6FA5\u6FA6\u6FA8\u6FA9\u6FAA\u6FAB\u6FAC\u6FAD\u6FAE\u6FAF\u6FB0\u6FB1\u6FB2\u6FB4\u6FB5\u6FB7\u6FB8\u6FBA\u6FBB\u6FBC\u6FBD\u6FBE\u6FBF\u6FC1\u6FC3\u6FC4\u6FC5\u6FC6\u6FC7\u6FC8\u6FCA\u6FCB\u6FCC\u6FCD\u6FCE\u6FCF\u6FD0\u6FD3\u6FD4\u6FD5\u6FD6\u6FD7\u6FD8\u6FD9\u6FDA\u6FDB\u6FDC\u6FDD\u6FDF\u6FE2\u6FE3\u6FE4\u6FE5\uFFFD".split("");
      for (j = 0; j != D[157].length; ++j)
        if (D[157][j].charCodeAt(0) !== 65533) {
          e[D[157][j]] = 40192 + j;
          d[40192 + j] = D[157][j];
        }
      D[158] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6FE6\u6FE7\u6FE8\u6FE9\u6FEA\u6FEB\u6FEC\u6FED\u6FF0\u6FF1\u6FF2\u6FF3\u6FF4\u6FF5\u6FF6\u6FF7\u6FF8\u6FF9\u6FFA\u6FFB\u6FFC\u6FFD\u6FFE\u6FFF\u7000\u7001\u7002\u7003\u7004\u7005\u7006\u7007\u7008\u7009\u700A\u700B\u700C\u700D\u700E\u700F\u7010\u7012\u7013\u7014\u7015\u7016\u7017\u7018\u7019\u701C\u701D\u701E\u701F\u7020\u7021\u7022\u7024\u7025\u7026\u7027\u7028\u7029\u702A\uFFFD\u702B\u702C\u702D\u702E\u702F\u7030\u7031\u7032\u7033\u7034\u7036\u7037\u7038\u703A\u703B\u703C\u703D\u703E\u703F\u7040\u7041\u7042\u7043\u7044\u7045\u7046\u7047\u7048\u7049\u704A\u704B\u704D\u704E\u7050\u7051\u7052\u7053\u7054\u7055\u7056\u7057\u7058\u7059\u705A\u705B\u705C\u705D\u705F\u7060\u7061\u7062\u7063\u7064\u7065\u7066\u7067\u7068\u7069\u706A\u706E\u7071\u7072\u7073\u7074\u7077\u7079\u707A\u707B\u707D\u7081\u7082\u7083\u7084\u7086\u7087\u7088\u708B\u708C\u708D\u708F\u7090\u7091\u7093\u7097\u7098\u709A\u709B\u709E\u709F\u70A0\u70A1\u70A2\u70A3\u70A4\u70A5\u70A6\u70A7\u70A8\u70A9\u70AA\u70B0\u70B2\u70B4\u70B5\u70B6\u70BA\u70BE\u70BF\u70C4\u70C5\u70C6\u70C7\u70C9\u70CB\u70CC\u70CD\u70CE\u70CF\u70D0\u70D1\u70D2\u70D3\u70D4\u70D5\u70D6\u70D7\u70DA\uFFFD".split("");
      for (j = 0; j != D[158].length; ++j)
        if (D[158][j].charCodeAt(0) !== 65533) {
          e[D[158][j]] = 40448 + j;
          d[40448 + j] = D[158][j];
        }
      D[159] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u70DC\u70DD\u70DE\u70E0\u70E1\u70E2\u70E3\u70E5\u70EA\u70EE\u70F0\u70F1\u70F2\u70F3\u70F4\u70F5\u70F6\u70F8\u70FA\u70FB\u70FC\u70FE\u70FF\u7100\u7101\u7102\u7103\u7104\u7105\u7106\u7107\u7108\u710B\u710C\u710D\u710E\u710F\u7111\u7112\u7114\u7117\u711B\u711C\u711D\u711E\u711F\u7120\u7121\u7122\u7123\u7124\u7125\u7127\u7128\u7129\u712A\u712B\u712C\u712D\u712E\u7132\u7133\u7134\uFFFD\u7135\u7137\u7138\u7139\u713A\u713B\u713C\u713D\u713E\u713F\u7140\u7141\u7142\u7143\u7144\u7146\u7147\u7148\u7149\u714B\u714D\u714F\u7150\u7151\u7152\u7153\u7154\u7155\u7156\u7157\u7158\u7159\u715A\u715B\u715D\u715F\u7160\u7161\u7162\u7163\u7165\u7169\u716A\u716B\u716C\u716D\u716F\u7170\u7171\u7174\u7175\u7176\u7177\u7179\u717B\u717C\u717E\u717F\u7180\u7181\u7182\u7183\u7185\u7186\u7187\u7188\u7189\u718B\u718C\u718D\u718E\u7190\u7191\u7192\u7193\u7195\u7196\u7197\u719A\u719B\u719C\u719D\u719E\u71A1\u71A2\u71A3\u71A4\u71A5\u71A6\u71A7\u71A9\u71AA\u71AB\u71AD\u71AE\u71AF\u71B0\u71B1\u71B2\u71B4\u71B6\u71B7\u71B8\u71BA\u71BB\u71BC\u71BD\u71BE\u71BF\u71C0\u71C1\u71C2\u71C4\u71C5\u71C6\u71C7\u71C8\u71C9\u71CA\u71CB\u71CC\u71CD\u71CF\u71D0\u71D1\u71D2\u71D3\uFFFD".split("");
      for (j = 0; j != D[159].length; ++j)
        if (D[159][j].charCodeAt(0) !== 65533) {
          e[D[159][j]] = 40704 + j;
          d[40704 + j] = D[159][j];
        }
      D[160] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u71D6\u71D7\u71D8\u71D9\u71DA\u71DB\u71DC\u71DD\u71DE\u71DF\u71E1\u71E2\u71E3\u71E4\u71E6\u71E8\u71E9\u71EA\u71EB\u71EC\u71ED\u71EF\u71F0\u71F1\u71F2\u71F3\u71F4\u71F5\u71F6\u71F7\u71F8\u71FA\u71FB\u71FC\u71FD\u71FE\u71FF\u7200\u7201\u7202\u7203\u7204\u7205\u7207\u7208\u7209\u720A\u720B\u720C\u720D\u720E\u720F\u7210\u7211\u7212\u7213\u7214\u7215\u7216\u7217\u7218\u7219\u721A\uFFFD\u721B\u721C\u721E\u721F\u7220\u7221\u7222\u7223\u7224\u7225\u7226\u7227\u7229\u722B\u722D\u722E\u722F\u7232\u7233\u7234\u723A\u723C\u723E\u7240\u7241\u7242\u7243\u7244\u7245\u7246\u7249\u724A\u724B\u724E\u724F\u7250\u7251\u7253\u7254\u7255\u7257\u7258\u725A\u725C\u725E\u7260\u7263\u7264\u7265\u7268\u726A\u726B\u726C\u726D\u7270\u7271\u7273\u7274\u7276\u7277\u7278\u727B\u727C\u727D\u7282\u7283\u7285\u7286\u7287\u7288\u7289\u728C\u728E\u7290\u7291\u7293\u7294\u7295\u7296\u7297\u7298\u7299\u729A\u729B\u729C\u729D\u729E\u72A0\u72A1\u72A2\u72A3\u72A4\u72A5\u72A6\u72A7\u72A8\u72A9\u72AA\u72AB\u72AE\u72B1\u72B2\u72B3\u72B5\u72BA\u72BB\u72BC\u72BD\u72BE\u72BF\u72C0\u72C5\u72C6\u72C7\u72C9\u72CA\u72CB\u72CC\u72CF\u72D1\u72D3\u72D4\u72D5\u72D6\u72D8\u72DA\u72DB\uFFFD".split("");
      for (j = 0; j != D[160].length; ++j)
        if (D[160][j].charCodeAt(0) !== 65533) {
          e[D[160][j]] = 40960 + j;
          d[40960 + j] = D[160][j];
        }
      D[161] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u3000\u3001\u3002\xB7\u02C9\u02C7\xA8\u3003\u3005\u2014\uFF5E\u2016\u2026\u2018\u2019\u201C\u201D\u3014\u3015\u3008\u3009\u300A\u300B\u300C\u300D\u300E\u300F\u3016\u3017\u3010\u3011\xB1\xD7\xF7\u2236\u2227\u2228\u2211\u220F\u222A\u2229\u2208\u2237\u221A\u22A5\u2225\u2220\u2312\u2299\u222B\u222E\u2261\u224C\u2248\u223D\u221D\u2260\u226E\u226F\u2264\u2265\u221E\u2235\u2234\u2642\u2640\xB0\u2032\u2033\u2103\uFF04\xA4\uFFE0\uFFE1\u2030\xA7\u2116\u2606\u2605\u25CB\u25CF\u25CE\u25C7\u25C6\u25A1\u25A0\u25B3\u25B2\u203B\u2192\u2190\u2191\u2193\u3013\uFFFD".split("");
      for (j = 0; j != D[161].length; ++j)
        if (D[161][j].charCodeAt(0) !== 65533) {
          e[D[161][j]] = 41216 + j;
          d[41216 + j] = D[161][j];
        }
      D[162] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u2170\u2171\u2172\u2173\u2174\u2175\u2176\u2177\u2178\u2179\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u2488\u2489\u248A\u248B\u248C\u248D\u248E\u248F\u2490\u2491\u2492\u2493\u2494\u2495\u2496\u2497\u2498\u2499\u249A\u249B\u2474\u2475\u2476\u2477\u2478\u2479\u247A\u247B\u247C\u247D\u247E\u247F\u2480\u2481\u2482\u2483\u2484\u2485\u2486\u2487\u2460\u2461\u2462\u2463\u2464\u2465\u2466\u2467\u2468\u2469\uFFFD\uFFFD\u3220\u3221\u3222\u3223\u3224\u3225\u3226\u3227\u3228\u3229\uFFFD\uFFFD\u2160\u2161\u2162\u2163\u2164\u2165\u2166\u2167\u2168\u2169\u216A\u216B\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[162].length; ++j)
        if (D[162][j].charCodeAt(0) !== 65533) {
          e[D[162][j]] = 41472 + j;
          d[41472 + j] = D[162][j];
        }
      D[163] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFF01\uFF02\uFF03\uFFE5\uFF05\uFF06\uFF07\uFF08\uFF09\uFF0A\uFF0B\uFF0C\uFF0D\uFF0E\uFF0F\uFF10\uFF11\uFF12\uFF13\uFF14\uFF15\uFF16\uFF17\uFF18\uFF19\uFF1A\uFF1B\uFF1C\uFF1D\uFF1E\uFF1F\uFF20\uFF21\uFF22\uFF23\uFF24\uFF25\uFF26\uFF27\uFF28\uFF29\uFF2A\uFF2B\uFF2C\uFF2D\uFF2E\uFF2F\uFF30\uFF31\uFF32\uFF33\uFF34\uFF35\uFF36\uFF37\uFF38\uFF39\uFF3A\uFF3B\uFF3C\uFF3D\uFF3E\uFF3F\uFF40\uFF41\uFF42\uFF43\uFF44\uFF45\uFF46\uFF47\uFF48\uFF49\uFF4A\uFF4B\uFF4C\uFF4D\uFF4E\uFF4F\uFF50\uFF51\uFF52\uFF53\uFF54\uFF55\uFF56\uFF57\uFF58\uFF59\uFF5A\uFF5B\uFF5C\uFF5D\uFFE3\uFFFD".split("");
      for (j = 0; j != D[163].length; ++j)
        if (D[163][j].charCodeAt(0) !== 65533) {
          e[D[163][j]] = 41728 + j;
          d[41728 + j] = D[163][j];
        }
      D[164] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u3041\u3042\u3043\u3044\u3045\u3046\u3047\u3048\u3049\u304A\u304B\u304C\u304D\u304E\u304F\u3050\u3051\u3052\u3053\u3054\u3055\u3056\u3057\u3058\u3059\u305A\u305B\u305C\u305D\u305E\u305F\u3060\u3061\u3062\u3063\u3064\u3065\u3066\u3067\u3068\u3069\u306A\u306B\u306C\u306D\u306E\u306F\u3070\u3071\u3072\u3073\u3074\u3075\u3076\u3077\u3078\u3079\u307A\u307B\u307C\u307D\u307E\u307F\u3080\u3081\u3082\u3083\u3084\u3085\u3086\u3087\u3088\u3089\u308A\u308B\u308C\u308D\u308E\u308F\u3090\u3091\u3092\u3093\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[164].length; ++j)
        if (D[164][j].charCodeAt(0) !== 65533) {
          e[D[164][j]] = 41984 + j;
          d[41984 + j] = D[164][j];
        }
      D[165] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u30A1\u30A2\u30A3\u30A4\u30A5\u30A6\u30A7\u30A8\u30A9\u30AA\u30AB\u30AC\u30AD\u30AE\u30AF\u30B0\u30B1\u30B2\u30B3\u30B4\u30B5\u30B6\u30B7\u30B8\u30B9\u30BA\u30BB\u30BC\u30BD\u30BE\u30BF\u30C0\u30C1\u30C2\u30C3\u30C4\u30C5\u30C6\u30C7\u30C8\u30C9\u30CA\u30CB\u30CC\u30CD\u30CE\u30CF\u30D0\u30D1\u30D2\u30D3\u30D4\u30D5\u30D6\u30D7\u30D8\u30D9\u30DA\u30DB\u30DC\u30DD\u30DE\u30DF\u30E0\u30E1\u30E2\u30E3\u30E4\u30E5\u30E6\u30E7\u30E8\u30E9\u30EA\u30EB\u30EC\u30ED\u30EE\u30EF\u30F0\u30F1\u30F2\u30F3\u30F4\u30F5\u30F6\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[165].length; ++j)
        if (D[165][j].charCodeAt(0) !== 65533) {
          e[D[165][j]] = 42240 + j;
          d[42240 + j] = D[165][j];
        }
      D[166] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0391\u0392\u0393\u0394\u0395\u0396\u0397\u0398\u0399\u039A\u039B\u039C\u039D\u039E\u039F\u03A0\u03A1\u03A3\u03A4\u03A5\u03A6\u03A7\u03A8\u03A9\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u03B1\u03B2\u03B3\u03B4\u03B5\u03B6\u03B7\u03B8\u03B9\u03BA\u03BB\u03BC\u03BD\u03BE\u03BF\u03C0\u03C1\u03C3\u03C4\u03C5\u03C6\u03C7\u03C8\u03C9\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFE35\uFE36\uFE39\uFE3A\uFE3F\uFE40\uFE3D\uFE3E\uFE41\uFE42\uFE43\uFE44\uFFFD\uFFFD\uFE3B\uFE3C\uFE37\uFE38\uFE31\uFFFD\uFE33\uFE34\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[166].length; ++j)
        if (D[166][j].charCodeAt(0) !== 65533) {
          e[D[166][j]] = 42496 + j;
          d[42496 + j] = D[166][j];
        }
      D[167] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0410\u0411\u0412\u0413\u0414\u0415\u0401\u0416\u0417\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u0420\u0421\u0422\u0423\u0424\u0425\u0426\u0427\u0428\u0429\u042A\u042B\u042C\u042D\u042E\u042F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0430\u0431\u0432\u0433\u0434\u0435\u0451\u0436\u0437\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044A\u044B\u044C\u044D\u044E\u044F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[167].length; ++j)
        if (D[167][j].charCodeAt(0) !== 65533) {
          e[D[167][j]] = 42752 + j;
          d[42752 + j] = D[167][j];
        }
      D[168] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u02CA\u02CB\u02D9\u2013\u2015\u2025\u2035\u2105\u2109\u2196\u2197\u2198\u2199\u2215\u221F\u2223\u2252\u2266\u2267\u22BF\u2550\u2551\u2552\u2553\u2554\u2555\u2556\u2557\u2558\u2559\u255A\u255B\u255C\u255D\u255E\u255F\u2560\u2561\u2562\u2563\u2564\u2565\u2566\u2567\u2568\u2569\u256A\u256B\u256C\u256D\u256E\u256F\u2570\u2571\u2572\u2573\u2581\u2582\u2583\u2584\u2585\u2586\u2587\uFFFD\u2588\u2589\u258A\u258B\u258C\u258D\u258E\u258F\u2593\u2594\u2595\u25BC\u25BD\u25E2\u25E3\u25E4\u25E5\u2609\u2295\u3012\u301D\u301E\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0101\xE1\u01CE\xE0\u0113\xE9\u011B\xE8\u012B\xED\u01D0\xEC\u014D\xF3\u01D2\xF2\u016B\xFA\u01D4\xF9\u01D6\u01D8\u01DA\u01DC\xFC\xEA\u0251\uFFFD\u0144\u0148\uFFFD\u0261\uFFFD\uFFFD\uFFFD\uFFFD\u3105\u3106\u3107\u3108\u3109\u310A\u310B\u310C\u310D\u310E\u310F\u3110\u3111\u3112\u3113\u3114\u3115\u3116\u3117\u3118\u3119\u311A\u311B\u311C\u311D\u311E\u311F\u3120\u3121\u3122\u3123\u3124\u3125\u3126\u3127\u3128\u3129\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[168].length; ++j)
        if (D[168][j].charCodeAt(0) !== 65533) {
          e[D[168][j]] = 43008 + j;
          d[43008 + j] = D[168][j];
        }
      D[169] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u3021\u3022\u3023\u3024\u3025\u3026\u3027\u3028\u3029\u32A3\u338E\u338F\u339C\u339D\u339E\u33A1\u33C4\u33CE\u33D1\u33D2\u33D5\uFE30\uFFE2\uFFE4\uFFFD\u2121\u3231\uFFFD\u2010\uFFFD\uFFFD\uFFFD\u30FC\u309B\u309C\u30FD\u30FE\u3006\u309D\u309E\uFE49\uFE4A\uFE4B\uFE4C\uFE4D\uFE4E\uFE4F\uFE50\uFE51\uFE52\uFE54\uFE55\uFE56\uFE57\uFE59\uFE5A\uFE5B\uFE5C\uFE5D\uFE5E\uFE5F\uFE60\uFE61\uFFFD\uFE62\uFE63\uFE64\uFE65\uFE66\uFE68\uFE69\uFE6A\uFE6B\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u3007\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u2500\u2501\u2502\u2503\u2504\u2505\u2506\u2507\u2508\u2509\u250A\u250B\u250C\u250D\u250E\u250F\u2510\u2511\u2512\u2513\u2514\u2515\u2516\u2517\u2518\u2519\u251A\u251B\u251C\u251D\u251E\u251F\u2520\u2521\u2522\u2523\u2524\u2525\u2526\u2527\u2528\u2529\u252A\u252B\u252C\u252D\u252E\u252F\u2530\u2531\u2532\u2533\u2534\u2535\u2536\u2537\u2538\u2539\u253A\u253B\u253C\u253D\u253E\u253F\u2540\u2541\u2542\u2543\u2544\u2545\u2546\u2547\u2548\u2549\u254A\u254B\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[169].length; ++j)
        if (D[169][j].charCodeAt(0) !== 65533) {
          e[D[169][j]] = 43264 + j;
          d[43264 + j] = D[169][j];
        }
      D[170] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u72DC\u72DD\u72DF\u72E2\u72E3\u72E4\u72E5\u72E6\u72E7\u72EA\u72EB\u72F5\u72F6\u72F9\u72FD\u72FE\u72FF\u7300\u7302\u7304\u7305\u7306\u7307\u7308\u7309\u730B\u730C\u730D\u730F\u7310\u7311\u7312\u7314\u7318\u7319\u731A\u731F\u7320\u7323\u7324\u7326\u7327\u7328\u732D\u732F\u7330\u7332\u7333\u7335\u7336\u733A\u733B\u733C\u733D\u7340\u7341\u7342\u7343\u7344\u7345\u7346\u7347\u7348\uFFFD\u7349\u734A\u734B\u734C\u734E\u734F\u7351\u7353\u7354\u7355\u7356\u7358\u7359\u735A\u735B\u735C\u735D\u735E\u735F\u7361\u7362\u7363\u7364\u7365\u7366\u7367\u7368\u7369\u736A\u736B\u736E\u7370\u7371\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[170].length; ++j)
        if (D[170][j].charCodeAt(0) !== 65533) {
          e[D[170][j]] = 43520 + j;
          d[43520 + j] = D[170][j];
        }
      D[171] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7372\u7373\u7374\u7375\u7376\u7377\u7378\u7379\u737A\u737B\u737C\u737D\u737F\u7380\u7381\u7382\u7383\u7385\u7386\u7388\u738A\u738C\u738D\u738F\u7390\u7392\u7393\u7394\u7395\u7397\u7398\u7399\u739A\u739C\u739D\u739E\u73A0\u73A1\u73A3\u73A4\u73A5\u73A6\u73A7\u73A8\u73AA\u73AC\u73AD\u73B1\u73B4\u73B5\u73B6\u73B8\u73B9\u73BC\u73BD\u73BE\u73BF\u73C1\u73C3\u73C4\u73C5\u73C6\u73C7\uFFFD\u73CB\u73CC\u73CE\u73D2\u73D3\u73D4\u73D5\u73D6\u73D7\u73D8\u73DA\u73DB\u73DC\u73DD\u73DF\u73E1\u73E2\u73E3\u73E4\u73E6\u73E8\u73EA\u73EB\u73EC\u73EE\u73EF\u73F0\u73F1\u73F3\u73F4\u73F5\u73F6\u73F7\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[171].length; ++j)
        if (D[171][j].charCodeAt(0) !== 65533) {
          e[D[171][j]] = 43776 + j;
          d[43776 + j] = D[171][j];
        }
      D[172] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u73F8\u73F9\u73FA\u73FB\u73FC\u73FD\u73FE\u73FF\u7400\u7401\u7402\u7404\u7407\u7408\u740B\u740C\u740D\u740E\u7411\u7412\u7413\u7414\u7415\u7416\u7417\u7418\u7419\u741C\u741D\u741E\u741F\u7420\u7421\u7423\u7424\u7427\u7429\u742B\u742D\u742F\u7431\u7432\u7437\u7438\u7439\u743A\u743B\u743D\u743E\u743F\u7440\u7442\u7443\u7444\u7445\u7446\u7447\u7448\u7449\u744A\u744B\u744C\u744D\uFFFD\u744E\u744F\u7450\u7451\u7452\u7453\u7454\u7456\u7458\u745D\u7460\u7461\u7462\u7463\u7464\u7465\u7466\u7467\u7468\u7469\u746A\u746B\u746C\u746E\u746F\u7471\u7472\u7473\u7474\u7475\u7478\u7479\u747A\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[172].length; ++j)
        if (D[172][j].charCodeAt(0) !== 65533) {
          e[D[172][j]] = 44032 + j;
          d[44032 + j] = D[172][j];
        }
      D[173] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u747B\u747C\u747D\u747F\u7482\u7484\u7485\u7486\u7488\u7489\u748A\u748C\u748D\u748F\u7491\u7492\u7493\u7494\u7495\u7496\u7497\u7498\u7499\u749A\u749B\u749D\u749F\u74A0\u74A1\u74A2\u74A3\u74A4\u74A5\u74A6\u74AA\u74AB\u74AC\u74AD\u74AE\u74AF\u74B0\u74B1\u74B2\u74B3\u74B4\u74B5\u74B6\u74B7\u74B8\u74B9\u74BB\u74BC\u74BD\u74BE\u74BF\u74C0\u74C1\u74C2\u74C3\u74C4\u74C5\u74C6\u74C7\uFFFD\u74C8\u74C9\u74CA\u74CB\u74CC\u74CD\u74CE\u74CF\u74D0\u74D1\u74D3\u74D4\u74D5\u74D6\u74D7\u74D8\u74D9\u74DA\u74DB\u74DD\u74DF\u74E1\u74E5\u74E7\u74E8\u74E9\u74EA\u74EB\u74EC\u74ED\u74F0\u74F1\u74F2\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[173].length; ++j)
        if (D[173][j].charCodeAt(0) !== 65533) {
          e[D[173][j]] = 44288 + j;
          d[44288 + j] = D[173][j];
        }
      D[174] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u74F3\u74F5\u74F8\u74F9\u74FA\u74FB\u74FC\u74FD\u74FE\u7500\u7501\u7502\u7503\u7505\u7506\u7507\u7508\u7509\u750A\u750B\u750C\u750E\u7510\u7512\u7514\u7515\u7516\u7517\u751B\u751D\u751E\u7520\u7521\u7522\u7523\u7524\u7526\u7527\u752A\u752E\u7534\u7536\u7539\u753C\u753D\u753F\u7541\u7542\u7543\u7544\u7546\u7547\u7549\u754A\u754D\u7550\u7551\u7552\u7553\u7555\u7556\u7557\u7558\uFFFD\u755D\u755E\u755F\u7560\u7561\u7562\u7563\u7564\u7567\u7568\u7569\u756B\u756C\u756D\u756E\u756F\u7570\u7571\u7573\u7575\u7576\u7577\u757A\u757B\u757C\u757D\u757E\u7580\u7581\u7582\u7584\u7585\u7587\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[174].length; ++j)
        if (D[174][j].charCodeAt(0) !== 65533) {
          e[D[174][j]] = 44544 + j;
          d[44544 + j] = D[174][j];
        }
      D[175] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7588\u7589\u758A\u758C\u758D\u758E\u7590\u7593\u7595\u7598\u759B\u759C\u759E\u75A2\u75A6\u75A7\u75A8\u75A9\u75AA\u75AD\u75B6\u75B7\u75BA\u75BB\u75BF\u75C0\u75C1\u75C6\u75CB\u75CC\u75CE\u75CF\u75D0\u75D1\u75D3\u75D7\u75D9\u75DA\u75DC\u75DD\u75DF\u75E0\u75E1\u75E5\u75E9\u75EC\u75ED\u75EE\u75EF\u75F2\u75F3\u75F5\u75F6\u75F7\u75F8\u75FA\u75FB\u75FD\u75FE\u7602\u7604\u7606\u7607\uFFFD\u7608\u7609\u760B\u760D\u760E\u760F\u7611\u7612\u7613\u7614\u7616\u761A\u761C\u761D\u761E\u7621\u7623\u7627\u7628\u762C\u762E\u762F\u7631\u7632\u7636\u7637\u7639\u763A\u763B\u763D\u7641\u7642\u7644\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[175].length; ++j)
        if (D[175][j].charCodeAt(0) !== 65533) {
          e[D[175][j]] = 44800 + j;
          d[44800 + j] = D[175][j];
        }
      D[176] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7645\u7646\u7647\u7648\u7649\u764A\u764B\u764E\u764F\u7650\u7651\u7652\u7653\u7655\u7657\u7658\u7659\u765A\u765B\u765D\u765F\u7660\u7661\u7662\u7664\u7665\u7666\u7667\u7668\u7669\u766A\u766C\u766D\u766E\u7670\u7671\u7672\u7673\u7674\u7675\u7676\u7677\u7679\u767A\u767C\u767F\u7680\u7681\u7683\u7685\u7689\u768A\u768C\u768D\u768F\u7690\u7692\u7694\u7695\u7697\u7698\u769A\u769B\uFFFD\u769C\u769D\u769E\u769F\u76A0\u76A1\u76A2\u76A3\u76A5\u76A6\u76A7\u76A8\u76A9\u76AA\u76AB\u76AC\u76AD\u76AF\u76B0\u76B3\u76B5\u76B6\u76B7\u76B8\u76B9\u76BA\u76BB\u76BC\u76BD\u76BE\u76C0\u76C1\u76C3\u554A\u963F\u57C3\u6328\u54CE\u5509\u54C0\u7691\u764C\u853C\u77EE\u827E\u788D\u7231\u9698\u978D\u6C28\u5B89\u4FFA\u6309\u6697\u5CB8\u80FA\u6848\u80AE\u6602\u76CE\u51F9\u6556\u71AC\u7FF1\u8884\u50B2\u5965\u61CA\u6FB3\u82AD\u634C\u6252\u53ED\u5427\u7B06\u516B\u75A4\u5DF4\u62D4\u8DCB\u9776\u628A\u8019\u575D\u9738\u7F62\u7238\u767D\u67CF\u767E\u6446\u4F70\u8D25\u62DC\u7A17\u6591\u73ED\u642C\u6273\u822C\u9881\u677F\u7248\u626E\u62CC\u4F34\u74E3\u534A\u529E\u7ECA\u90A6\u5E2E\u6886\u699C\u8180\u7ED1\u68D2\u78C5\u868C\u9551\u508D\u8C24\u82DE\u80DE\u5305\u8912\u5265\uFFFD".split("");
      for (j = 0; j != D[176].length; ++j)
        if (D[176][j].charCodeAt(0) !== 65533) {
          e[D[176][j]] = 45056 + j;
          d[45056 + j] = D[176][j];
        }
      D[177] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u76C4\u76C7\u76C9\u76CB\u76CC\u76D3\u76D5\u76D9\u76DA\u76DC\u76DD\u76DE\u76E0\u76E1\u76E2\u76E3\u76E4\u76E6\u76E7\u76E8\u76E9\u76EA\u76EB\u76EC\u76ED\u76F0\u76F3\u76F5\u76F6\u76F7\u76FA\u76FB\u76FD\u76FF\u7700\u7702\u7703\u7705\u7706\u770A\u770C\u770E\u770F\u7710\u7711\u7712\u7713\u7714\u7715\u7716\u7717\u7718\u771B\u771C\u771D\u771E\u7721\u7723\u7724\u7725\u7727\u772A\u772B\uFFFD\u772C\u772E\u7730\u7731\u7732\u7733\u7734\u7739\u773B\u773D\u773E\u773F\u7742\u7744\u7745\u7746\u7748\u7749\u774A\u774B\u774C\u774D\u774E\u774F\u7752\u7753\u7754\u7755\u7756\u7757\u7758\u7759\u775C\u8584\u96F9\u4FDD\u5821\u9971\u5B9D\u62B1\u62A5\u66B4\u8C79\u9C8D\u7206\u676F\u7891\u60B2\u5351\u5317\u8F88\u80CC\u8D1D\u94A1\u500D\u72C8\u5907\u60EB\u7119\u88AB\u5954\u82EF\u672C\u7B28\u5D29\u7EF7\u752D\u6CF5\u8E66\u8FF8\u903C\u9F3B\u6BD4\u9119\u7B14\u5F7C\u78A7\u84D6\u853D\u6BD5\u6BD9\u6BD6\u5E01\u5E87\u75F9\u95ED\u655D\u5F0A\u5FC5\u8F9F\u58C1\u81C2\u907F\u965B\u97AD\u8FB9\u7F16\u8D2C\u6241\u4FBF\u53D8\u535E\u8FA8\u8FA9\u8FAB\u904D\u6807\u5F6A\u8198\u8868\u9CD6\u618B\u522B\u762A\u5F6C\u658C\u6FD2\u6EE8\u5BBE\u6448\u5175\u51B0\u67C4\u4E19\u79C9\u997C\u70B3\uFFFD".split("");
      for (j = 0; j != D[177].length; ++j)
        if (D[177][j].charCodeAt(0) !== 65533) {
          e[D[177][j]] = 45312 + j;
          d[45312 + j] = D[177][j];
        }
      D[178] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u775D\u775E\u775F\u7760\u7764\u7767\u7769\u776A\u776D\u776E\u776F\u7770\u7771\u7772\u7773\u7774\u7775\u7776\u7777\u7778\u777A\u777B\u777C\u7781\u7782\u7783\u7786\u7787\u7788\u7789\u778A\u778B\u778F\u7790\u7793\u7794\u7795\u7796\u7797\u7798\u7799\u779A\u779B\u779C\u779D\u779E\u77A1\u77A3\u77A4\u77A6\u77A8\u77AB\u77AD\u77AE\u77AF\u77B1\u77B2\u77B4\u77B6\u77B7\u77B8\u77B9\u77BA\uFFFD\u77BC\u77BE\u77C0\u77C1\u77C2\u77C3\u77C4\u77C5\u77C6\u77C7\u77C8\u77C9\u77CA\u77CB\u77CC\u77CE\u77CF\u77D0\u77D1\u77D2\u77D3\u77D4\u77D5\u77D6\u77D8\u77D9\u77DA\u77DD\u77DE\u77DF\u77E0\u77E1\u77E4\u75C5\u5E76\u73BB\u83E0\u64AD\u62E8\u94B5\u6CE2\u535A\u52C3\u640F\u94C2\u7B94\u4F2F\u5E1B\u8236\u8116\u818A\u6E24\u6CCA\u9A73\u6355\u535C\u54FA\u8865\u57E0\u4E0D\u5E03\u6B65\u7C3F\u90E8\u6016\u64E6\u731C\u88C1\u6750\u624D\u8D22\u776C\u8E29\u91C7\u5F69\u83DC\u8521\u9910\u53C2\u8695\u6B8B\u60ED\u60E8\u707F\u82CD\u8231\u4ED3\u6CA7\u85CF\u64CD\u7CD9\u69FD\u66F9\u8349\u5395\u7B56\u4FA7\u518C\u6D4B\u5C42\u8E6D\u63D2\u53C9\u832C\u8336\u67E5\u78B4\u643D\u5BDF\u5C94\u5DEE\u8BE7\u62C6\u67F4\u8C7A\u6400\u63BA\u8749\u998B\u8C17\u7F20\u94F2\u4EA7\u9610\u98A4\u660C\u7316\uFFFD".split("");
      for (j = 0; j != D[178].length; ++j)
        if (D[178][j].charCodeAt(0) !== 65533) {
          e[D[178][j]] = 45568 + j;
          d[45568 + j] = D[178][j];
        }
      D[179] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u77E6\u77E8\u77EA\u77EF\u77F0\u77F1\u77F2\u77F4\u77F5\u77F7\u77F9\u77FA\u77FB\u77FC\u7803\u7804\u7805\u7806\u7807\u7808\u780A\u780B\u780E\u780F\u7810\u7813\u7815\u7819\u781B\u781E\u7820\u7821\u7822\u7824\u7828\u782A\u782B\u782E\u782F\u7831\u7832\u7833\u7835\u7836\u783D\u783F\u7841\u7842\u7843\u7844\u7846\u7848\u7849\u784A\u784B\u784D\u784F\u7851\u7853\u7854\u7858\u7859\u785A\uFFFD\u785B\u785C\u785E\u785F\u7860\u7861\u7862\u7863\u7864\u7865\u7866\u7867\u7868\u7869\u786F\u7870\u7871\u7872\u7873\u7874\u7875\u7876\u7878\u7879\u787A\u787B\u787D\u787E\u787F\u7880\u7881\u7882\u7883\u573A\u5C1D\u5E38\u957F\u507F\u80A0\u5382\u655E\u7545\u5531\u5021\u8D85\u6284\u949E\u671D\u5632\u6F6E\u5DE2\u5435\u7092\u8F66\u626F\u64A4\u63A3\u5F7B\u6F88\u90F4\u81E3\u8FB0\u5C18\u6668\u5FF1\u6C89\u9648\u8D81\u886C\u6491\u79F0\u57CE\u6A59\u6210\u5448\u4E58\u7A0B\u60E9\u6F84\u8BDA\u627F\u901E\u9A8B\u79E4\u5403\u75F4\u6301\u5319\u6C60\u8FDF\u5F1B\u9A70\u803B\u9F7F\u4F88\u5C3A\u8D64\u7FC5\u65A5\u70BD\u5145\u51B2\u866B\u5D07\u5BA0\u62BD\u916C\u7574\u8E0C\u7A20\u6101\u7B79\u4EC7\u7EF8\u7785\u4E11\u81ED\u521D\u51FA\u6A71\u53A8\u8E87\u9504\u96CF\u6EC1\u9664\u695A\uFFFD".split("");
      for (j = 0; j != D[179].length; ++j)
        if (D[179][j].charCodeAt(0) !== 65533) {
          e[D[179][j]] = 45824 + j;
          d[45824 + j] = D[179][j];
        }
      D[180] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7884\u7885\u7886\u7888\u788A\u788B\u788F\u7890\u7892\u7894\u7895\u7896\u7899\u789D\u789E\u78A0\u78A2\u78A4\u78A6\u78A8\u78A9\u78AA\u78AB\u78AC\u78AD\u78AE\u78AF\u78B5\u78B6\u78B7\u78B8\u78BA\u78BB\u78BC\u78BD\u78BF\u78C0\u78C2\u78C3\u78C4\u78C6\u78C7\u78C8\u78CC\u78CD\u78CE\u78CF\u78D1\u78D2\u78D3\u78D6\u78D7\u78D8\u78DA\u78DB\u78DC\u78DD\u78DE\u78DF\u78E0\u78E1\u78E2\u78E3\uFFFD\u78E4\u78E5\u78E6\u78E7\u78E9\u78EA\u78EB\u78ED\u78EE\u78EF\u78F0\u78F1\u78F3\u78F5\u78F6\u78F8\u78F9\u78FB\u78FC\u78FD\u78FE\u78FF\u7900\u7902\u7903\u7904\u7906\u7907\u7908\u7909\u790A\u790B\u790C\u7840\u50A8\u77D7\u6410\u89E6\u5904\u63E3\u5DDD\u7A7F\u693D\u4F20\u8239\u5598\u4E32\u75AE\u7A97\u5E62\u5E8A\u95EF\u521B\u5439\u708A\u6376\u9524\u5782\u6625\u693F\u9187\u5507\u6DF3\u7EAF\u8822\u6233\u7EF0\u75B5\u8328\u78C1\u96CC\u8F9E\u6148\u74F7\u8BCD\u6B64\u523A\u8D50\u6B21\u806A\u8471\u56F1\u5306\u4ECE\u4E1B\u51D1\u7C97\u918B\u7C07\u4FC3\u8E7F\u7BE1\u7A9C\u6467\u5D14\u50AC\u8106\u7601\u7CB9\u6DEC\u7FE0\u6751\u5B58\u5BF8\u78CB\u64AE\u6413\u63AA\u632B\u9519\u642D\u8FBE\u7B54\u7629\u6253\u5927\u5446\u6B79\u50A3\u6234\u5E26\u6B86\u4EE3\u8D37\u888B\u5F85\u902E\uFFFD".split("");
      for (j = 0; j != D[180].length; ++j)
        if (D[180][j].charCodeAt(0) !== 65533) {
          e[D[180][j]] = 46080 + j;
          d[46080 + j] = D[180][j];
        }
      D[181] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u790D\u790E\u790F\u7910\u7911\u7912\u7914\u7915\u7916\u7917\u7918\u7919\u791A\u791B\u791C\u791D\u791F\u7920\u7921\u7922\u7923\u7925\u7926\u7927\u7928\u7929\u792A\u792B\u792C\u792D\u792E\u792F\u7930\u7931\u7932\u7933\u7935\u7936\u7937\u7938\u7939\u793D\u793F\u7942\u7943\u7944\u7945\u7947\u794A\u794B\u794C\u794D\u794E\u794F\u7950\u7951\u7952\u7954\u7955\u7958\u7959\u7961\u7963\uFFFD\u7964\u7966\u7969\u796A\u796B\u796C\u796E\u7970\u7971\u7972\u7973\u7974\u7975\u7976\u7979\u797B\u797C\u797D\u797E\u797F\u7982\u7983\u7986\u7987\u7988\u7989\u798B\u798C\u798D\u798E\u7990\u7991\u7992\u6020\u803D\u62C5\u4E39\u5355\u90F8\u63B8\u80C6\u65E6\u6C2E\u4F46\u60EE\u6DE1\u8BDE\u5F39\u86CB\u5F53\u6321\u515A\u8361\u6863\u5200\u6363\u8E48\u5012\u5C9B\u7977\u5BFC\u5230\u7A3B\u60BC\u9053\u76D7\u5FB7\u5F97\u7684\u8E6C\u706F\u767B\u7B49\u77AA\u51F3\u9093\u5824\u4F4E\u6EF4\u8FEA\u654C\u7B1B\u72C4\u6DA4\u7FDF\u5AE1\u62B5\u5E95\u5730\u8482\u7B2C\u5E1D\u5F1F\u9012\u7F14\u98A0\u6382\u6EC7\u7898\u70B9\u5178\u975B\u57AB\u7535\u4F43\u7538\u5E97\u60E6\u5960\u6DC0\u6BBF\u7889\u53FC\u96D5\u51CB\u5201\u6389\u540A\u9493\u8C03\u8DCC\u7239\u789F\u8776\u8FED\u8C0D\u53E0\uFFFD".split("");
      for (j = 0; j != D[181].length; ++j)
        if (D[181][j].charCodeAt(0) !== 65533) {
          e[D[181][j]] = 46336 + j;
          d[46336 + j] = D[181][j];
        }
      D[182] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7993\u7994\u7995\u7996\u7997\u7998\u7999\u799B\u799C\u799D\u799E\u799F\u79A0\u79A1\u79A2\u79A3\u79A4\u79A5\u79A6\u79A8\u79A9\u79AA\u79AB\u79AC\u79AD\u79AE\u79AF\u79B0\u79B1\u79B2\u79B4\u79B5\u79B6\u79B7\u79B8\u79BC\u79BF\u79C2\u79C4\u79C5\u79C7\u79C8\u79CA\u79CC\u79CE\u79CF\u79D0\u79D3\u79D4\u79D6\u79D7\u79D9\u79DA\u79DB\u79DC\u79DD\u79DE\u79E0\u79E1\u79E2\u79E5\u79E8\u79EA\uFFFD\u79EC\u79EE\u79F1\u79F2\u79F3\u79F4\u79F5\u79F6\u79F7\u79F9\u79FA\u79FC\u79FE\u79FF\u7A01\u7A04\u7A05\u7A07\u7A08\u7A09\u7A0A\u7A0C\u7A0F\u7A10\u7A11\u7A12\u7A13\u7A15\u7A16\u7A18\u7A19\u7A1B\u7A1C\u4E01\u76EF\u53EE\u9489\u9876\u9F0E\u952D\u5B9A\u8BA2\u4E22\u4E1C\u51AC\u8463\u61C2\u52A8\u680B\u4F97\u606B\u51BB\u6D1E\u515C\u6296\u6597\u9661\u8C46\u9017\u75D8\u90FD\u7763\u6BD2\u728A\u72EC\u8BFB\u5835\u7779\u8D4C\u675C\u9540\u809A\u5EA6\u6E21\u5992\u7AEF\u77ED\u953B\u6BB5\u65AD\u7F0E\u5806\u5151\u961F\u5BF9\u58A9\u5428\u8E72\u6566\u987F\u56E4\u949D\u76FE\u9041\u6387\u54C6\u591A\u593A\u579B\u8EB2\u6735\u8DFA\u8235\u5241\u60F0\u5815\u86FE\u5CE8\u9E45\u4FC4\u989D\u8BB9\u5A25\u6076\u5384\u627C\u904F\u9102\u997F\u6069\u800C\u513F\u8033\u5C14\u9975\u6D31\u4E8C\uFFFD".split("");
      for (j = 0; j != D[182].length; ++j)
        if (D[182][j].charCodeAt(0) !== 65533) {
          e[D[182][j]] = 46592 + j;
          d[46592 + j] = D[182][j];
        }
      D[183] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7A1D\u7A1F\u7A21\u7A22\u7A24\u7A25\u7A26\u7A27\u7A28\u7A29\u7A2A\u7A2B\u7A2C\u7A2D\u7A2E\u7A2F\u7A30\u7A31\u7A32\u7A34\u7A35\u7A36\u7A38\u7A3A\u7A3E\u7A40\u7A41\u7A42\u7A43\u7A44\u7A45\u7A47\u7A48\u7A49\u7A4A\u7A4B\u7A4C\u7A4D\u7A4E\u7A4F\u7A50\u7A52\u7A53\u7A54\u7A55\u7A56\u7A58\u7A59\u7A5A\u7A5B\u7A5C\u7A5D\u7A5E\u7A5F\u7A60\u7A61\u7A62\u7A63\u7A64\u7A65\u7A66\u7A67\u7A68\uFFFD\u7A69\u7A6A\u7A6B\u7A6C\u7A6D\u7A6E\u7A6F\u7A71\u7A72\u7A73\u7A75\u7A7B\u7A7C\u7A7D\u7A7E\u7A82\u7A85\u7A87\u7A89\u7A8A\u7A8B\u7A8C\u7A8E\u7A8F\u7A90\u7A93\u7A94\u7A99\u7A9A\u7A9B\u7A9E\u7AA1\u7AA2\u8D30\u53D1\u7F5A\u7B4F\u4F10\u4E4F\u9600\u6CD5\u73D0\u85E9\u5E06\u756A\u7FFB\u6A0A\u77FE\u9492\u7E41\u51E1\u70E6\u53CD\u8FD4\u8303\u8D29\u72AF\u996D\u6CDB\u574A\u82B3\u65B9\u80AA\u623F\u9632\u59A8\u4EFF\u8BBF\u7EBA\u653E\u83F2\u975E\u5561\u98DE\u80A5\u532A\u8BFD\u5420\u80BA\u5E9F\u6CB8\u8D39\u82AC\u915A\u5429\u6C1B\u5206\u7EB7\u575F\u711A\u6C7E\u7C89\u594B\u4EFD\u5FFF\u6124\u7CAA\u4E30\u5C01\u67AB\u8702\u5CF0\u950B\u98CE\u75AF\u70FD\u9022\u51AF\u7F1D\u8BBD\u5949\u51E4\u4F5B\u5426\u592B\u6577\u80A4\u5B75\u6276\u62C2\u8F90\u5E45\u6C1F\u7B26\u4F0F\u4FD8\u670D\uFFFD".split("");
      for (j = 0; j != D[183].length; ++j)
        if (D[183][j].charCodeAt(0) !== 65533) {
          e[D[183][j]] = 46848 + j;
          d[46848 + j] = D[183][j];
        }
      D[184] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7AA3\u7AA4\u7AA7\u7AA9\u7AAA\u7AAB\u7AAE\u7AAF\u7AB0\u7AB1\u7AB2\u7AB4\u7AB5\u7AB6\u7AB7\u7AB8\u7AB9\u7ABA\u7ABB\u7ABC\u7ABD\u7ABE\u7AC0\u7AC1\u7AC2\u7AC3\u7AC4\u7AC5\u7AC6\u7AC7\u7AC8\u7AC9\u7ACA\u7ACC\u7ACD\u7ACE\u7ACF\u7AD0\u7AD1\u7AD2\u7AD3\u7AD4\u7AD5\u7AD7\u7AD8\u7ADA\u7ADB\u7ADC\u7ADD\u7AE1\u7AE2\u7AE4\u7AE7\u7AE8\u7AE9\u7AEA\u7AEB\u7AEC\u7AEE\u7AF0\u7AF1\u7AF2\u7AF3\uFFFD\u7AF4\u7AF5\u7AF6\u7AF7\u7AF8\u7AFB\u7AFC\u7AFE\u7B00\u7B01\u7B02\u7B05\u7B07\u7B09\u7B0C\u7B0D\u7B0E\u7B10\u7B12\u7B13\u7B16\u7B17\u7B18\u7B1A\u7B1C\u7B1D\u7B1F\u7B21\u7B22\u7B23\u7B27\u7B29\u7B2D\u6D6E\u6DAA\u798F\u88B1\u5F17\u752B\u629A\u8F85\u4FEF\u91DC\u65A7\u812F\u8151\u5E9C\u8150\u8D74\u526F\u8986\u8D4B\u590D\u5085\u4ED8\u961C\u7236\u8179\u8D1F\u5BCC\u8BA3\u9644\u5987\u7F1A\u5490\u5676\u560E\u8BE5\u6539\u6982\u9499\u76D6\u6E89\u5E72\u7518\u6746\u67D1\u7AFF\u809D\u8D76\u611F\u79C6\u6562\u8D63\u5188\u521A\u94A2\u7F38\u809B\u7EB2\u5C97\u6E2F\u6760\u7BD9\u768B\u9AD8\u818F\u7F94\u7CD5\u641E\u9550\u7A3F\u544A\u54E5\u6B4C\u6401\u6208\u9E3D\u80F3\u7599\u5272\u9769\u845B\u683C\u86E4\u9601\u9694\u94EC\u4E2A\u5404\u7ED9\u6839\u8DDF\u8015\u66F4\u5E9A\u7FB9\uFFFD".split("");
      for (j = 0; j != D[184].length; ++j)
        if (D[184][j].charCodeAt(0) !== 65533) {
          e[D[184][j]] = 47104 + j;
          d[47104 + j] = D[184][j];
        }
      D[185] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7B2F\u7B30\u7B32\u7B34\u7B35\u7B36\u7B37\u7B39\u7B3B\u7B3D\u7B3F\u7B40\u7B41\u7B42\u7B43\u7B44\u7B46\u7B48\u7B4A\u7B4D\u7B4E\u7B53\u7B55\u7B57\u7B59\u7B5C\u7B5E\u7B5F\u7B61\u7B63\u7B64\u7B65\u7B66\u7B67\u7B68\u7B69\u7B6A\u7B6B\u7B6C\u7B6D\u7B6F\u7B70\u7B73\u7B74\u7B76\u7B78\u7B7A\u7B7C\u7B7D\u7B7F\u7B81\u7B82\u7B83\u7B84\u7B86\u7B87\u7B88\u7B89\u7B8A\u7B8B\u7B8C\u7B8E\u7B8F\uFFFD\u7B91\u7B92\u7B93\u7B96\u7B98\u7B99\u7B9A\u7B9B\u7B9E\u7B9F\u7BA0\u7BA3\u7BA4\u7BA5\u7BAE\u7BAF\u7BB0\u7BB2\u7BB3\u7BB5\u7BB6\u7BB7\u7BB9\u7BBA\u7BBB\u7BBC\u7BBD\u7BBE\u7BBF\u7BC0\u7BC2\u7BC3\u7BC4\u57C2\u803F\u6897\u5DE5\u653B\u529F\u606D\u9F9A\u4F9B\u8EAC\u516C\u5BAB\u5F13\u5DE9\u6C5E\u62F1\u8D21\u5171\u94A9\u52FE\u6C9F\u82DF\u72D7\u57A2\u6784\u8D2D\u591F\u8F9C\u83C7\u5495\u7B8D\u4F30\u6CBD\u5B64\u59D1\u9F13\u53E4\u86CA\u9AA8\u8C37\u80A1\u6545\u987E\u56FA\u96C7\u522E\u74DC\u5250\u5BE1\u6302\u8902\u4E56\u62D0\u602A\u68FA\u5173\u5B98\u51A0\u89C2\u7BA1\u9986\u7F50\u60EF\u704C\u8D2F\u5149\u5E7F\u901B\u7470\u89C4\u572D\u7845\u5F52\u9F9F\u95FA\u8F68\u9B3C\u8BE1\u7678\u6842\u67DC\u8DEA\u8D35\u523D\u8F8A\u6EDA\u68CD\u9505\u90ED\u56FD\u679C\u88F9\u8FC7\u54C8\uFFFD".split("");
      for (j = 0; j != D[185].length; ++j)
        if (D[185][j].charCodeAt(0) !== 65533) {
          e[D[185][j]] = 47360 + j;
          d[47360 + j] = D[185][j];
        }
      D[186] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7BC5\u7BC8\u7BC9\u7BCA\u7BCB\u7BCD\u7BCE\u7BCF\u7BD0\u7BD2\u7BD4\u7BD5\u7BD6\u7BD7\u7BD8\u7BDB\u7BDC\u7BDE\u7BDF\u7BE0\u7BE2\u7BE3\u7BE4\u7BE7\u7BE8\u7BE9\u7BEB\u7BEC\u7BED\u7BEF\u7BF0\u7BF2\u7BF3\u7BF4\u7BF5\u7BF6\u7BF8\u7BF9\u7BFA\u7BFB\u7BFD\u7BFF\u7C00\u7C01\u7C02\u7C03\u7C04\u7C05\u7C06\u7C08\u7C09\u7C0A\u7C0D\u7C0E\u7C10\u7C11\u7C12\u7C13\u7C14\u7C15\u7C17\u7C18\u7C19\uFFFD\u7C1A\u7C1B\u7C1C\u7C1D\u7C1E\u7C20\u7C21\u7C22\u7C23\u7C24\u7C25\u7C28\u7C29\u7C2B\u7C2C\u7C2D\u7C2E\u7C2F\u7C30\u7C31\u7C32\u7C33\u7C34\u7C35\u7C36\u7C37\u7C39\u7C3A\u7C3B\u7C3C\u7C3D\u7C3E\u7C42\u9AB8\u5B69\u6D77\u6C26\u4EA5\u5BB3\u9A87\u9163\u61A8\u90AF\u97E9\u542B\u6DB5\u5BD2\u51FD\u558A\u7F55\u7FF0\u64BC\u634D\u65F1\u61BE\u608D\u710A\u6C57\u6C49\u592F\u676D\u822A\u58D5\u568E\u8C6A\u6BEB\u90DD\u597D\u8017\u53F7\u6D69\u5475\u559D\u8377\u83CF\u6838\u79BE\u548C\u4F55\u5408\u76D2\u8C89\u9602\u6CB3\u6DB8\u8D6B\u8910\u9E64\u8D3A\u563F\u9ED1\u75D5\u5F88\u72E0\u6068\u54FC\u4EA8\u6A2A\u8861\u6052\u8F70\u54C4\u70D8\u8679\u9E3F\u6D2A\u5B8F\u5F18\u7EA2\u5589\u4FAF\u7334\u543C\u539A\u5019\u540E\u547C\u4E4E\u5FFD\u745A\u58F6\u846B\u80E1\u8774\u72D0\u7CCA\u6E56\uFFFD".split("");
      for (j = 0; j != D[186].length; ++j)
        if (D[186][j].charCodeAt(0) !== 65533) {
          e[D[186][j]] = 47616 + j;
          d[47616 + j] = D[186][j];
        }
      D[187] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7C43\u7C44\u7C45\u7C46\u7C47\u7C48\u7C49\u7C4A\u7C4B\u7C4C\u7C4E\u7C4F\u7C50\u7C51\u7C52\u7C53\u7C54\u7C55\u7C56\u7C57\u7C58\u7C59\u7C5A\u7C5B\u7C5C\u7C5D\u7C5E\u7C5F\u7C60\u7C61\u7C62\u7C63\u7C64\u7C65\u7C66\u7C67\u7C68\u7C69\u7C6A\u7C6B\u7C6C\u7C6D\u7C6E\u7C6F\u7C70\u7C71\u7C72\u7C75\u7C76\u7C77\u7C78\u7C79\u7C7A\u7C7E\u7C7F\u7C80\u7C81\u7C82\u7C83\u7C84\u7C85\u7C86\u7C87\uFFFD\u7C88\u7C8A\u7C8B\u7C8C\u7C8D\u7C8E\u7C8F\u7C90\u7C93\u7C94\u7C96\u7C99\u7C9A\u7C9B\u7CA0\u7CA1\u7CA3\u7CA6\u7CA7\u7CA8\u7CA9\u7CAB\u7CAC\u7CAD\u7CAF\u7CB0\u7CB4\u7CB5\u7CB6\u7CB7\u7CB8\u7CBA\u7CBB\u5F27\u864E\u552C\u62A4\u4E92\u6CAA\u6237\u82B1\u54D7\u534E\u733E\u6ED1\u753B\u5212\u5316\u8BDD\u69D0\u5F8A\u6000\u6DEE\u574F\u6B22\u73AF\u6853\u8FD8\u7F13\u6362\u60A3\u5524\u75EA\u8C62\u7115\u6DA3\u5BA6\u5E7B\u8352\u614C\u9EC4\u78FA\u8757\u7C27\u7687\u51F0\u60F6\u714C\u6643\u5E4C\u604D\u8C0E\u7070\u6325\u8F89\u5FBD\u6062\u86D4\u56DE\u6BC1\u6094\u6167\u5349\u60E0\u6666\u8D3F\u79FD\u4F1A\u70E9\u6C47\u8BB3\u8BF2\u7ED8\u8364\u660F\u5A5A\u9B42\u6D51\u6DF7\u8C41\u6D3B\u4F19\u706B\u83B7\u6216\u60D1\u970D\u8D27\u7978\u51FB\u573E\u57FA\u673A\u7578\u7A3D\u79EF\u7B95\uFFFD".split("");
      for (j = 0; j != D[187].length; ++j)
        if (D[187][j].charCodeAt(0) !== 65533) {
          e[D[187][j]] = 47872 + j;
          d[47872 + j] = D[187][j];
        }
      D[188] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7CBF\u7CC0\u7CC2\u7CC3\u7CC4\u7CC6\u7CC9\u7CCB\u7CCE\u7CCF\u7CD0\u7CD1\u7CD2\u7CD3\u7CD4\u7CD8\u7CDA\u7CDB\u7CDD\u7CDE\u7CE1\u7CE2\u7CE3\u7CE4\u7CE5\u7CE6\u7CE7\u7CE9\u7CEA\u7CEB\u7CEC\u7CED\u7CEE\u7CF0\u7CF1\u7CF2\u7CF3\u7CF4\u7CF5\u7CF6\u7CF7\u7CF9\u7CFA\u7CFC\u7CFD\u7CFE\u7CFF\u7D00\u7D01\u7D02\u7D03\u7D04\u7D05\u7D06\u7D07\u7D08\u7D09\u7D0B\u7D0C\u7D0D\u7D0E\u7D0F\u7D10\uFFFD\u7D11\u7D12\u7D13\u7D14\u7D15\u7D16\u7D17\u7D18\u7D19\u7D1A\u7D1B\u7D1C\u7D1D\u7D1E\u7D1F\u7D21\u7D23\u7D24\u7D25\u7D26\u7D28\u7D29\u7D2A\u7D2C\u7D2D\u7D2E\u7D30\u7D31\u7D32\u7D33\u7D34\u7D35\u7D36\u808C\u9965\u8FF9\u6FC0\u8BA5\u9E21\u59EC\u7EE9\u7F09\u5409\u6781\u68D8\u8F91\u7C4D\u96C6\u53CA\u6025\u75BE\u6C72\u5373\u5AC9\u7EA7\u6324\u51E0\u810A\u5DF1\u84DF\u6280\u5180\u5B63\u4F0E\u796D\u5242\u60B8\u6D4E\u5BC4\u5BC2\u8BA1\u8BB0\u65E2\u5FCC\u9645\u5993\u7EE7\u7EAA\u5609\u67B7\u5939\u4F73\u5BB6\u52A0\u835A\u988A\u8D3E\u7532\u94BE\u5047\u7A3C\u4EF7\u67B6\u9A7E\u5AC1\u6B7C\u76D1\u575A\u5C16\u7B3A\u95F4\u714E\u517C\u80A9\u8270\u5978\u7F04\u8327\u68C0\u67EC\u78B1\u7877\u62E3\u6361\u7B80\u4FED\u526A\u51CF\u8350\u69DB\u9274\u8DF5\u8D31\u89C1\u952E\u7BAD\u4EF6\uFFFD".split("");
      for (j = 0; j != D[188].length; ++j)
        if (D[188][j].charCodeAt(0) !== 65533) {
          e[D[188][j]] = 48128 + j;
          d[48128 + j] = D[188][j];
        }
      D[189] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7D37\u7D38\u7D39\u7D3A\u7D3B\u7D3C\u7D3D\u7D3E\u7D3F\u7D40\u7D41\u7D42\u7D43\u7D44\u7D45\u7D46\u7D47\u7D48\u7D49\u7D4A\u7D4B\u7D4C\u7D4D\u7D4E\u7D4F\u7D50\u7D51\u7D52\u7D53\u7D54\u7D55\u7D56\u7D57\u7D58\u7D59\u7D5A\u7D5B\u7D5C\u7D5D\u7D5E\u7D5F\u7D60\u7D61\u7D62\u7D63\u7D64\u7D65\u7D66\u7D67\u7D68\u7D69\u7D6A\u7D6B\u7D6C\u7D6D\u7D6F\u7D70\u7D71\u7D72\u7D73\u7D74\u7D75\u7D76\uFFFD\u7D78\u7D79\u7D7A\u7D7B\u7D7C\u7D7D\u7D7E\u7D7F\u7D80\u7D81\u7D82\u7D83\u7D84\u7D85\u7D86\u7D87\u7D88\u7D89\u7D8A\u7D8B\u7D8C\u7D8D\u7D8E\u7D8F\u7D90\u7D91\u7D92\u7D93\u7D94\u7D95\u7D96\u7D97\u7D98\u5065\u8230\u5251\u996F\u6E10\u6E85\u6DA7\u5EFA\u50F5\u59DC\u5C06\u6D46\u6C5F\u7586\u848B\u6868\u5956\u8BB2\u5320\u9171\u964D\u8549\u6912\u7901\u7126\u80F6\u4EA4\u90CA\u6D47\u9A84\u5A07\u56BC\u6405\u94F0\u77EB\u4FA5\u811A\u72E1\u89D2\u997A\u7F34\u7EDE\u527F\u6559\u9175\u8F7F\u8F83\u53EB\u7A96\u63ED\u63A5\u7686\u79F8\u8857\u9636\u622A\u52AB\u8282\u6854\u6770\u6377\u776B\u7AED\u6D01\u7ED3\u89E3\u59D0\u6212\u85C9\u82A5\u754C\u501F\u4ECB\u75A5\u8BEB\u5C4A\u5DFE\u7B4B\u65A4\u91D1\u4ECA\u6D25\u895F\u7D27\u9526\u4EC5\u8C28\u8FDB\u9773\u664B\u7981\u8FD1\u70EC\u6D78\uFFFD".split("");
      for (j = 0; j != D[189].length; ++j)
        if (D[189][j].charCodeAt(0) !== 65533) {
          e[D[189][j]] = 48384 + j;
          d[48384 + j] = D[189][j];
        }
      D[190] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7D99\u7D9A\u7D9B\u7D9C\u7D9D\u7D9E\u7D9F\u7DA0\u7DA1\u7DA2\u7DA3\u7DA4\u7DA5\u7DA7\u7DA8\u7DA9\u7DAA\u7DAB\u7DAC\u7DAD\u7DAF\u7DB0\u7DB1\u7DB2\u7DB3\u7DB4\u7DB5\u7DB6\u7DB7\u7DB8\u7DB9\u7DBA\u7DBB\u7DBC\u7DBD\u7DBE\u7DBF\u7DC0\u7DC1\u7DC2\u7DC3\u7DC4\u7DC5\u7DC6\u7DC7\u7DC8\u7DC9\u7DCA\u7DCB\u7DCC\u7DCD\u7DCE\u7DCF\u7DD0\u7DD1\u7DD2\u7DD3\u7DD4\u7DD5\u7DD6\u7DD7\u7DD8\u7DD9\uFFFD\u7DDA\u7DDB\u7DDC\u7DDD\u7DDE\u7DDF\u7DE0\u7DE1\u7DE2\u7DE3\u7DE4\u7DE5\u7DE6\u7DE7\u7DE8\u7DE9\u7DEA\u7DEB\u7DEC\u7DED\u7DEE\u7DEF\u7DF0\u7DF1\u7DF2\u7DF3\u7DF4\u7DF5\u7DF6\u7DF7\u7DF8\u7DF9\u7DFA\u5C3D\u52B2\u8346\u5162\u830E\u775B\u6676\u9CB8\u4EAC\u60CA\u7CBE\u7CB3\u7ECF\u4E95\u8B66\u666F\u9888\u9759\u5883\u656C\u955C\u5F84\u75C9\u9756\u7ADF\u7ADE\u51C0\u70AF\u7A98\u63EA\u7A76\u7EA0\u7396\u97ED\u4E45\u7078\u4E5D\u9152\u53A9\u6551\u65E7\u81FC\u8205\u548E\u5C31\u759A\u97A0\u62D8\u72D9\u75BD\u5C45\u9A79\u83CA\u5C40\u5480\u77E9\u4E3E\u6CAE\u805A\u62D2\u636E\u5DE8\u5177\u8DDD\u8E1E\u952F\u4FF1\u53E5\u60E7\u70AC\u5267\u6350\u9E43\u5A1F\u5026\u7737\u5377\u7EE2\u6485\u652B\u6289\u6398\u5014\u7235\u89C9\u51B3\u8BC0\u7EDD\u5747\u83CC\u94A7\u519B\u541B\u5CFB\uFFFD".split("");
      for (j = 0; j != D[190].length; ++j)
        if (D[190][j].charCodeAt(0) !== 65533) {
          e[D[190][j]] = 48640 + j;
          d[48640 + j] = D[190][j];
        }
      D[191] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7DFB\u7DFC\u7DFD\u7DFE\u7DFF\u7E00\u7E01\u7E02\u7E03\u7E04\u7E05\u7E06\u7E07\u7E08\u7E09\u7E0A\u7E0B\u7E0C\u7E0D\u7E0E\u7E0F\u7E10\u7E11\u7E12\u7E13\u7E14\u7E15\u7E16\u7E17\u7E18\u7E19\u7E1A\u7E1B\u7E1C\u7E1D\u7E1E\u7E1F\u7E20\u7E21\u7E22\u7E23\u7E24\u7E25\u7E26\u7E27\u7E28\u7E29\u7E2A\u7E2B\u7E2C\u7E2D\u7E2E\u7E2F\u7E30\u7E31\u7E32\u7E33\u7E34\u7E35\u7E36\u7E37\u7E38\u7E39\uFFFD\u7E3A\u7E3C\u7E3D\u7E3E\u7E3F\u7E40\u7E42\u7E43\u7E44\u7E45\u7E46\u7E48\u7E49\u7E4A\u7E4B\u7E4C\u7E4D\u7E4E\u7E4F\u7E50\u7E51\u7E52\u7E53\u7E54\u7E55\u7E56\u7E57\u7E58\u7E59\u7E5A\u7E5B\u7E5C\u7E5D\u4FCA\u7AE3\u6D5A\u90E1\u9A8F\u5580\u5496\u5361\u54AF\u5F00\u63E9\u6977\u51EF\u6168\u520A\u582A\u52D8\u574E\u780D\u770B\u5EB7\u6177\u7CE0\u625B\u6297\u4EA2\u7095\u8003\u62F7\u70E4\u9760\u5777\u82DB\u67EF\u68F5\u78D5\u9897\u79D1\u58F3\u54B3\u53EF\u6E34\u514B\u523B\u5BA2\u8BFE\u80AF\u5543\u57A6\u6073\u5751\u542D\u7A7A\u6050\u5B54\u63A7\u62A0\u53E3\u6263\u5BC7\u67AF\u54ED\u7A9F\u82E6\u9177\u5E93\u88E4\u5938\u57AE\u630E\u8DE8\u80EF\u5757\u7B77\u4FA9\u5FEB\u5BBD\u6B3E\u5321\u7B50\u72C2\u6846\u77FF\u7736\u65F7\u51B5\u4E8F\u76D4\u5CBF\u7AA5\u8475\u594E\u9B41\u5080\uFFFD".split("");
      for (j = 0; j != D[191].length; ++j)
        if (D[191][j].charCodeAt(0) !== 65533) {
          e[D[191][j]] = 48896 + j;
          d[48896 + j] = D[191][j];
        }
      D[192] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7E5E\u7E5F\u7E60\u7E61\u7E62\u7E63\u7E64\u7E65\u7E66\u7E67\u7E68\u7E69\u7E6A\u7E6B\u7E6C\u7E6D\u7E6E\u7E6F\u7E70\u7E71\u7E72\u7E73\u7E74\u7E75\u7E76\u7E77\u7E78\u7E79\u7E7A\u7E7B\u7E7C\u7E7D\u7E7E\u7E7F\u7E80\u7E81\u7E83\u7E84\u7E85\u7E86\u7E87\u7E88\u7E89\u7E8A\u7E8B\u7E8C\u7E8D\u7E8E\u7E8F\u7E90\u7E91\u7E92\u7E93\u7E94\u7E95\u7E96\u7E97\u7E98\u7E99\u7E9A\u7E9C\u7E9D\u7E9E\uFFFD\u7EAE\u7EB4\u7EBB\u7EBC\u7ED6\u7EE4\u7EEC\u7EF9\u7F0A\u7F10\u7F1E\u7F37\u7F39\u7F3B\u7F3C\u7F3D\u7F3E\u7F3F\u7F40\u7F41\u7F43\u7F46\u7F47\u7F48\u7F49\u7F4A\u7F4B\u7F4C\u7F4D\u7F4E\u7F4F\u7F52\u7F53\u9988\u6127\u6E83\u5764\u6606\u6346\u56F0\u62EC\u6269\u5ED3\u9614\u5783\u62C9\u5587\u8721\u814A\u8FA3\u5566\u83B1\u6765\u8D56\u84DD\u5A6A\u680F\u62E6\u7BEE\u9611\u5170\u6F9C\u8C30\u63FD\u89C8\u61D2\u7F06\u70C2\u6EE5\u7405\u6994\u72FC\u5ECA\u90CE\u6717\u6D6A\u635E\u52B3\u7262\u8001\u4F6C\u59E5\u916A\u70D9\u6D9D\u52D2\u4E50\u96F7\u956D\u857E\u78CA\u7D2F\u5121\u5792\u64C2\u808B\u7C7B\u6CEA\u68F1\u695E\u51B7\u5398\u68A8\u7281\u9ECE\u7BF1\u72F8\u79BB\u6F13\u7406\u674E\u91CC\u9CA4\u793C\u8389\u8354\u540F\u6817\u4E3D\u5389\u52B1\u783E\u5386\u5229\u5088\u4F8B\u4FD0\uFFFD".split("");
      for (j = 0; j != D[192].length; ++j)
        if (D[192][j].charCodeAt(0) !== 65533) {
          e[D[192][j]] = 49152 + j;
          d[49152 + j] = D[192][j];
        }
      D[193] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7F56\u7F59\u7F5B\u7F5C\u7F5D\u7F5E\u7F60\u7F63\u7F64\u7F65\u7F66\u7F67\u7F6B\u7F6C\u7F6D\u7F6F\u7F70\u7F73\u7F75\u7F76\u7F77\u7F78\u7F7A\u7F7B\u7F7C\u7F7D\u7F7F\u7F80\u7F82\u7F83\u7F84\u7F85\u7F86\u7F87\u7F88\u7F89\u7F8B\u7F8D\u7F8F\u7F90\u7F91\u7F92\u7F93\u7F95\u7F96\u7F97\u7F98\u7F99\u7F9B\u7F9C\u7FA0\u7FA2\u7FA3\u7FA5\u7FA6\u7FA8\u7FA9\u7FAA\u7FAB\u7FAC\u7FAD\u7FAE\u7FB1\uFFFD\u7FB3\u7FB4\u7FB5\u7FB6\u7FB7\u7FBA\u7FBB\u7FBE\u7FC0\u7FC2\u7FC3\u7FC4\u7FC6\u7FC7\u7FC8\u7FC9\u7FCB\u7FCD\u7FCF\u7FD0\u7FD1\u7FD2\u7FD3\u7FD6\u7FD7\u7FD9\u7FDA\u7FDB\u7FDC\u7FDD\u7FDE\u7FE2\u7FE3\u75E2\u7ACB\u7C92\u6CA5\u96B6\u529B\u7483\u54E9\u4FE9\u8054\u83B2\u8FDE\u9570\u5EC9\u601C\u6D9F\u5E18\u655B\u8138\u94FE\u604B\u70BC\u7EC3\u7CAE\u51C9\u6881\u7CB1\u826F\u4E24\u8F86\u91CF\u667E\u4EAE\u8C05\u64A9\u804A\u50DA\u7597\u71CE\u5BE5\u8FBD\u6F66\u4E86\u6482\u9563\u5ED6\u6599\u5217\u88C2\u70C8\u52A3\u730E\u7433\u6797\u78F7\u9716\u4E34\u90BB\u9CDE\u6DCB\u51DB\u8D41\u541D\u62CE\u73B2\u83F1\u96F6\u9F84\u94C3\u4F36\u7F9A\u51CC\u7075\u9675\u5CAD\u9886\u53E6\u4EE4\u6E9C\u7409\u69B4\u786B\u998F\u7559\u5218\u7624\u6D41\u67F3\u516D\u9F99\u804B\u5499\u7B3C\u7ABF\uFFFD".split("");
      for (j = 0; j != D[193].length; ++j)
        if (D[193][j].charCodeAt(0) !== 65533) {
          e[D[193][j]] = 49408 + j;
          d[49408 + j] = D[193][j];
        }
      D[194] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7FE4\u7FE7\u7FE8\u7FEA\u7FEB\u7FEC\u7FED\u7FEF\u7FF2\u7FF4\u7FF5\u7FF6\u7FF7\u7FF8\u7FF9\u7FFA\u7FFD\u7FFE\u7FFF\u8002\u8007\u8008\u8009\u800A\u800E\u800F\u8011\u8013\u801A\u801B\u801D\u801E\u801F\u8021\u8023\u8024\u802B\u802C\u802D\u802E\u802F\u8030\u8032\u8034\u8039\u803A\u803C\u803E\u8040\u8041\u8044\u8045\u8047\u8048\u8049\u804E\u804F\u8050\u8051\u8053\u8055\u8056\u8057\uFFFD\u8059\u805B\u805C\u805D\u805E\u805F\u8060\u8061\u8062\u8063\u8064\u8065\u8066\u8067\u8068\u806B\u806C\u806D\u806E\u806F\u8070\u8072\u8073\u8074\u8075\u8076\u8077\u8078\u8079\u807A\u807B\u807C\u807D\u9686\u5784\u62E2\u9647\u697C\u5A04\u6402\u7BD3\u6F0F\u964B\u82A6\u5362\u9885\u5E90\u7089\u63B3\u5364\u864F\u9C81\u9E93\u788C\u9732\u8DEF\u8D42\u9E7F\u6F5E\u7984\u5F55\u9646\u622E\u9A74\u5415\u94DD\u4FA3\u65C5\u5C65\u5C61\u7F15\u8651\u6C2F\u5F8B\u7387\u6EE4\u7EFF\u5CE6\u631B\u5B6A\u6EE6\u5375\u4E71\u63A0\u7565\u62A1\u8F6E\u4F26\u4ED1\u6CA6\u7EB6\u8BBA\u841D\u87BA\u7F57\u903B\u9523\u7BA9\u9AA1\u88F8\u843D\u6D1B\u9A86\u7EDC\u5988\u9EBB\u739B\u7801\u8682\u9A6C\u9A82\u561B\u5417\u57CB\u4E70\u9EA6\u5356\u8FC8\u8109\u7792\u9992\u86EE\u6EE1\u8513\u66FC\u6162\u6F2B\uFFFD".split("");
      for (j = 0; j != D[194].length; ++j)
        if (D[194][j].charCodeAt(0) !== 65533) {
          e[D[194][j]] = 49664 + j;
          d[49664 + j] = D[194][j];
        }
      D[195] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u807E\u8081\u8082\u8085\u8088\u808A\u808D\u808E\u808F\u8090\u8091\u8092\u8094\u8095\u8097\u8099\u809E\u80A3\u80A6\u80A7\u80A8\u80AC\u80B0\u80B3\u80B5\u80B6\u80B8\u80B9\u80BB\u80C5\u80C7\u80C8\u80C9\u80CA\u80CB\u80CF\u80D0\u80D1\u80D2\u80D3\u80D4\u80D5\u80D8\u80DF\u80E0\u80E2\u80E3\u80E6\u80EE\u80F5\u80F7\u80F9\u80FB\u80FE\u80FF\u8100\u8101\u8103\u8104\u8105\u8107\u8108\u810B\uFFFD\u810C\u8115\u8117\u8119\u811B\u811C\u811D\u811F\u8120\u8121\u8122\u8123\u8124\u8125\u8126\u8127\u8128\u8129\u812A\u812B\u812D\u812E\u8130\u8133\u8134\u8135\u8137\u8139\u813A\u813B\u813C\u813D\u813F\u8C29\u8292\u832B\u76F2\u6C13\u5FD9\u83BD\u732B\u8305\u951A\u6BDB\u77DB\u94C6\u536F\u8302\u5192\u5E3D\u8C8C\u8D38\u4E48\u73AB\u679A\u6885\u9176\u9709\u7164\u6CA1\u7709\u5A92\u9541\u6BCF\u7F8E\u6627\u5BD0\u59B9\u5A9A\u95E8\u95F7\u4EEC\u840C\u8499\u6AAC\u76DF\u9530\u731B\u68A6\u5B5F\u772F\u919A\u9761\u7CDC\u8FF7\u8C1C\u5F25\u7C73\u79D8\u89C5\u6CCC\u871C\u5BC6\u5E42\u68C9\u7720\u7EF5\u5195\u514D\u52C9\u5A29\u7F05\u9762\u82D7\u63CF\u7784\u85D0\u79D2\u6E3A\u5E99\u5999\u8511\u706D\u6C11\u62BF\u76BF\u654F\u60AF\u95FD\u660E\u879F\u9E23\u94ED\u540D\u547D\u8C2C\u6478\uFFFD".split("");
      for (j = 0; j != D[195].length; ++j)
        if (D[195][j].charCodeAt(0) !== 65533) {
          e[D[195][j]] = 49920 + j;
          d[49920 + j] = D[195][j];
        }
      D[196] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8140\u8141\u8142\u8143\u8144\u8145\u8147\u8149\u814D\u814E\u814F\u8152\u8156\u8157\u8158\u815B\u815C\u815D\u815E\u815F\u8161\u8162\u8163\u8164\u8166\u8168\u816A\u816B\u816C\u816F\u8172\u8173\u8175\u8176\u8177\u8178\u8181\u8183\u8184\u8185\u8186\u8187\u8189\u818B\u818C\u818D\u818E\u8190\u8192\u8193\u8194\u8195\u8196\u8197\u8199\u819A\u819E\u819F\u81A0\u81A1\u81A2\u81A4\u81A5\uFFFD\u81A7\u81A9\u81AB\u81AC\u81AD\u81AE\u81AF\u81B0\u81B1\u81B2\u81B4\u81B5\u81B6\u81B7\u81B8\u81B9\u81BC\u81BD\u81BE\u81BF\u81C4\u81C5\u81C7\u81C8\u81C9\u81CB\u81CD\u81CE\u81CF\u81D0\u81D1\u81D2\u81D3\u6479\u8611\u6A21\u819C\u78E8\u6469\u9B54\u62B9\u672B\u83AB\u58A8\u9ED8\u6CAB\u6F20\u5BDE\u964C\u8C0B\u725F\u67D0\u62C7\u7261\u4EA9\u59C6\u6BCD\u5893\u66AE\u5E55\u52DF\u6155\u6728\u76EE\u7766\u7267\u7A46\u62FF\u54EA\u5450\u94A0\u90A3\u5A1C\u7EB3\u6C16\u4E43\u5976\u8010\u5948\u5357\u7537\u96BE\u56CA\u6320\u8111\u607C\u95F9\u6DD6\u5462\u9981\u5185\u5AE9\u80FD\u59AE\u9713\u502A\u6CE5\u5C3C\u62DF\u4F60\u533F\u817B\u9006\u6EBA\u852B\u62C8\u5E74\u78BE\u64B5\u637B\u5FF5\u5A18\u917F\u9E1F\u5C3F\u634F\u8042\u5B7D\u556E\u954A\u954D\u6D85\u60A8\u67E0\u72DE\u51DD\u5B81\uFFFD".split("");
      for (j = 0; j != D[196].length; ++j)
        if (D[196][j].charCodeAt(0) !== 65533) {
          e[D[196][j]] = 50176 + j;
          d[50176 + j] = D[196][j];
        }
      D[197] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u81D4\u81D5\u81D6\u81D7\u81D8\u81D9\u81DA\u81DB\u81DC\u81DD\u81DE\u81DF\u81E0\u81E1\u81E2\u81E4\u81E5\u81E6\u81E8\u81E9\u81EB\u81EE\u81EF\u81F0\u81F1\u81F2\u81F5\u81F6\u81F7\u81F8\u81F9\u81FA\u81FD\u81FF\u8203\u8207\u8208\u8209\u820A\u820B\u820E\u820F\u8211\u8213\u8215\u8216\u8217\u8218\u8219\u821A\u821D\u8220\u8224\u8225\u8226\u8227\u8229\u822E\u8232\u823A\u823C\u823D\u823F\uFFFD\u8240\u8241\u8242\u8243\u8245\u8246\u8248\u824A\u824C\u824D\u824E\u8250\u8251\u8252\u8253\u8254\u8255\u8256\u8257\u8259\u825B\u825C\u825D\u825E\u8260\u8261\u8262\u8263\u8264\u8265\u8266\u8267\u8269\u62E7\u6CDE\u725B\u626D\u94AE\u7EBD\u8113\u6D53\u519C\u5F04\u5974\u52AA\u6012\u5973\u6696\u8650\u759F\u632A\u61E6\u7CEF\u8BFA\u54E6\u6B27\u9E25\u6BB4\u85D5\u5455\u5076\u6CA4\u556A\u8DB4\u722C\u5E15\u6015\u7436\u62CD\u6392\u724C\u5F98\u6E43\u6D3E\u6500\u6F58\u76D8\u78D0\u76FC\u7554\u5224\u53DB\u4E53\u5E9E\u65C1\u802A\u80D6\u629B\u5486\u5228\u70AE\u888D\u8DD1\u6CE1\u5478\u80DA\u57F9\u88F4\u8D54\u966A\u914D\u4F69\u6C9B\u55B7\u76C6\u7830\u62A8\u70F9\u6F8E\u5F6D\u84EC\u68DA\u787C\u7BF7\u81A8\u670B\u9E4F\u6367\u78B0\u576F\u7812\u9739\u6279\u62AB\u5288\u7435\u6BD7\uFFFD".split("");
      for (j = 0; j != D[197].length; ++j)
        if (D[197][j].charCodeAt(0) !== 65533) {
          e[D[197][j]] = 50432 + j;
          d[50432 + j] = D[197][j];
        }
      D[198] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u826A\u826B\u826C\u826D\u8271\u8275\u8276\u8277\u8278\u827B\u827C\u8280\u8281\u8283\u8285\u8286\u8287\u8289\u828C\u8290\u8293\u8294\u8295\u8296\u829A\u829B\u829E\u82A0\u82A2\u82A3\u82A7\u82B2\u82B5\u82B6\u82BA\u82BB\u82BC\u82BF\u82C0\u82C2\u82C3\u82C5\u82C6\u82C9\u82D0\u82D6\u82D9\u82DA\u82DD\u82E2\u82E7\u82E8\u82E9\u82EA\u82EC\u82ED\u82EE\u82F0\u82F2\u82F3\u82F5\u82F6\u82F8\uFFFD\u82FA\u82FC\u82FD\u82FE\u82FF\u8300\u830A\u830B\u830D\u8310\u8312\u8313\u8316\u8318\u8319\u831D\u831E\u831F\u8320\u8321\u8322\u8323\u8324\u8325\u8326\u8329\u832A\u832E\u8330\u8332\u8337\u833B\u833D\u5564\u813E\u75B2\u76AE\u5339\u75DE\u50FB\u5C41\u8B6C\u7BC7\u504F\u7247\u9A97\u98D8\u6F02\u74E2\u7968\u6487\u77A5\u62FC\u9891\u8D2B\u54C1\u8058\u4E52\u576A\u82F9\u840D\u5E73\u51ED\u74F6\u8BC4\u5C4F\u5761\u6CFC\u9887\u5A46\u7834\u9B44\u8FEB\u7C95\u5256\u6251\u94FA\u4EC6\u8386\u8461\u83E9\u84B2\u57D4\u6734\u5703\u666E\u6D66\u8C31\u66DD\u7011\u671F\u6B3A\u6816\u621A\u59BB\u4E03\u51C4\u6F06\u67D2\u6C8F\u5176\u68CB\u5947\u6B67\u7566\u5D0E\u8110\u9F50\u65D7\u7948\u7941\u9A91\u8D77\u5C82\u4E5E\u4F01\u542F\u5951\u780C\u5668\u6C14\u8FC4\u5F03\u6C7D\u6CE3\u8BAB\u6390\uFFFD".split("");
      for (j = 0; j != D[198].length; ++j)
        if (D[198][j].charCodeAt(0) !== 65533) {
          e[D[198][j]] = 50688 + j;
          d[50688 + j] = D[198][j];
        }
      D[199] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u833E\u833F\u8341\u8342\u8344\u8345\u8348\u834A\u834B\u834C\u834D\u834E\u8353\u8355\u8356\u8357\u8358\u8359\u835D\u8362\u8370\u8371\u8372\u8373\u8374\u8375\u8376\u8379\u837A\u837E\u837F\u8380\u8381\u8382\u8383\u8384\u8387\u8388\u838A\u838B\u838C\u838D\u838F\u8390\u8391\u8394\u8395\u8396\u8397\u8399\u839A\u839D\u839F\u83A1\u83A2\u83A3\u83A4\u83A5\u83A6\u83A7\u83AC\u83AD\u83AE\uFFFD\u83AF\u83B5\u83BB\u83BE\u83BF\u83C2\u83C3\u83C4\u83C6\u83C8\u83C9\u83CB\u83CD\u83CE\u83D0\u83D1\u83D2\u83D3\u83D5\u83D7\u83D9\u83DA\u83DB\u83DE\u83E2\u83E3\u83E4\u83E6\u83E7\u83E8\u83EB\u83EC\u83ED\u6070\u6D3D\u7275\u6266\u948E\u94C5\u5343\u8FC1\u7B7E\u4EDF\u8C26\u4E7E\u9ED4\u94B1\u94B3\u524D\u6F5C\u9063\u6D45\u8C34\u5811\u5D4C\u6B20\u6B49\u67AA\u545B\u8154\u7F8C\u5899\u8537\u5F3A\u62A2\u6A47\u9539\u6572\u6084\u6865\u77A7\u4E54\u4FA8\u5DE7\u9798\u64AC\u7FD8\u5CED\u4FCF\u7A8D\u5207\u8304\u4E14\u602F\u7A83\u94A6\u4FB5\u4EB2\u79E6\u7434\u52E4\u82B9\u64D2\u79BD\u5BDD\u6C81\u9752\u8F7B\u6C22\u503E\u537F\u6E05\u64CE\u6674\u6C30\u60C5\u9877\u8BF7\u5E86\u743C\u7A77\u79CB\u4E18\u90B1\u7403\u6C42\u56DA\u914B\u6CC5\u8D8B\u533A\u86C6\u66F2\u8EAF\u5C48\u9A71\u6E20\uFFFD".split("");
      for (j = 0; j != D[199].length; ++j)
        if (D[199][j].charCodeAt(0) !== 65533) {
          e[D[199][j]] = 50944 + j;
          d[50944 + j] = D[199][j];
        }
      D[200] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u83EE\u83EF\u83F3\u83F4\u83F5\u83F6\u83F7\u83FA\u83FB\u83FC\u83FE\u83FF\u8400\u8402\u8405\u8407\u8408\u8409\u840A\u8410\u8412\u8413\u8414\u8415\u8416\u8417\u8419\u841A\u841B\u841E\u841F\u8420\u8421\u8422\u8423\u8429\u842A\u842B\u842C\u842D\u842E\u842F\u8430\u8432\u8433\u8434\u8435\u8436\u8437\u8439\u843A\u843B\u843E\u843F\u8440\u8441\u8442\u8443\u8444\u8445\u8447\u8448\u8449\uFFFD\u844A\u844B\u844C\u844D\u844E\u844F\u8450\u8452\u8453\u8454\u8455\u8456\u8458\u845D\u845E\u845F\u8460\u8462\u8464\u8465\u8466\u8467\u8468\u846A\u846E\u846F\u8470\u8472\u8474\u8477\u8479\u847B\u847C\u53D6\u5A36\u9F8B\u8DA3\u53BB\u5708\u98A7\u6743\u919B\u6CC9\u5168\u75CA\u62F3\u72AC\u5238\u529D\u7F3A\u7094\u7638\u5374\u9E4A\u69B7\u786E\u96C0\u88D9\u7FA4\u7136\u71C3\u5189\u67D3\u74E4\u58E4\u6518\u56B7\u8BA9\u9976\u6270\u7ED5\u60F9\u70ED\u58EC\u4EC1\u4EBA\u5FCD\u97E7\u4EFB\u8BA4\u5203\u598A\u7EAB\u6254\u4ECD\u65E5\u620E\u8338\u84C9\u8363\u878D\u7194\u6EB6\u5BB9\u7ED2\u5197\u63C9\u67D4\u8089\u8339\u8815\u5112\u5B7A\u5982\u8FB1\u4E73\u6C5D\u5165\u8925\u8F6F\u962E\u854A\u745E\u9510\u95F0\u6DA6\u82E5\u5F31\u6492\u6D12\u8428\u816E\u9CC3\u585E\u8D5B\u4E09\u53C1\uFFFD".split("");
      for (j = 0; j != D[200].length; ++j)
        if (D[200][j].charCodeAt(0) !== 65533) {
          e[D[200][j]] = 51200 + j;
          d[51200 + j] = D[200][j];
        }
      D[201] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u847D\u847E\u847F\u8480\u8481\u8483\u8484\u8485\u8486\u848A\u848D\u848F\u8490\u8491\u8492\u8493\u8494\u8495\u8496\u8498\u849A\u849B\u849D\u849E\u849F\u84A0\u84A2\u84A3\u84A4\u84A5\u84A6\u84A7\u84A8\u84A9\u84AA\u84AB\u84AC\u84AD\u84AE\u84B0\u84B1\u84B3\u84B5\u84B6\u84B7\u84BB\u84BC\u84BE\u84C0\u84C2\u84C3\u84C5\u84C6\u84C7\u84C8\u84CB\u84CC\u84CE\u84CF\u84D2\u84D4\u84D5\u84D7\uFFFD\u84D8\u84D9\u84DA\u84DB\u84DC\u84DE\u84E1\u84E2\u84E4\u84E7\u84E8\u84E9\u84EA\u84EB\u84ED\u84EE\u84EF\u84F1\u84F2\u84F3\u84F4\u84F5\u84F6\u84F7\u84F8\u84F9\u84FA\u84FB\u84FD\u84FE\u8500\u8501\u8502\u4F1E\u6563\u6851\u55D3\u4E27\u6414\u9A9A\u626B\u5AC2\u745F\u8272\u6DA9\u68EE\u50E7\u838E\u7802\u6740\u5239\u6C99\u7EB1\u50BB\u5565\u715E\u7B5B\u6652\u73CA\u82EB\u6749\u5C71\u5220\u717D\u886B\u95EA\u9655\u64C5\u8D61\u81B3\u5584\u6C55\u6247\u7F2E\u5892\u4F24\u5546\u8D4F\u664C\u4E0A\u5C1A\u88F3\u68A2\u634E\u7A0D\u70E7\u828D\u52FA\u97F6\u5C11\u54E8\u90B5\u7ECD\u5962\u8D4A\u86C7\u820C\u820D\u8D66\u6444\u5C04\u6151\u6D89\u793E\u8BBE\u7837\u7533\u547B\u4F38\u8EAB\u6DF1\u5A20\u7EC5\u795E\u6C88\u5BA1\u5A76\u751A\u80BE\u614E\u6E17\u58F0\u751F\u7525\u7272\u5347\u7EF3\uFFFD".split("");
      for (j = 0; j != D[201].length; ++j)
        if (D[201][j].charCodeAt(0) !== 65533) {
          e[D[201][j]] = 51456 + j;
          d[51456 + j] = D[201][j];
        }
      D[202] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8503\u8504\u8505\u8506\u8507\u8508\u8509\u850A\u850B\u850D\u850E\u850F\u8510\u8512\u8514\u8515\u8516\u8518\u8519\u851B\u851C\u851D\u851E\u8520\u8522\u8523\u8524\u8525\u8526\u8527\u8528\u8529\u852A\u852D\u852E\u852F\u8530\u8531\u8532\u8533\u8534\u8535\u8536\u853E\u853F\u8540\u8541\u8542\u8544\u8545\u8546\u8547\u854B\u854C\u854D\u854E\u854F\u8550\u8551\u8552\u8553\u8554\u8555\uFFFD\u8557\u8558\u855A\u855B\u855C\u855D\u855F\u8560\u8561\u8562\u8563\u8565\u8566\u8567\u8569\u856A\u856B\u856C\u856D\u856E\u856F\u8570\u8571\u8573\u8575\u8576\u8577\u8578\u857C\u857D\u857F\u8580\u8581\u7701\u76DB\u5269\u80DC\u5723\u5E08\u5931\u72EE\u65BD\u6E7F\u8BD7\u5C38\u8671\u5341\u77F3\u62FE\u65F6\u4EC0\u98DF\u8680\u5B9E\u8BC6\u53F2\u77E2\u4F7F\u5C4E\u9A76\u59CB\u5F0F\u793A\u58EB\u4E16\u67FF\u4E8B\u62ED\u8A93\u901D\u52BF\u662F\u55DC\u566C\u9002\u4ED5\u4F8D\u91CA\u9970\u6C0F\u5E02\u6043\u5BA4\u89C6\u8BD5\u6536\u624B\u9996\u5B88\u5BFF\u6388\u552E\u53D7\u7626\u517D\u852C\u67A2\u68B3\u6B8A\u6292\u8F93\u53D4\u8212\u6DD1\u758F\u4E66\u8D4E\u5B70\u719F\u85AF\u6691\u66D9\u7F72\u8700\u9ECD\u9F20\u5C5E\u672F\u8FF0\u6811\u675F\u620D\u7AD6\u5885\u5EB6\u6570\u6F31\uFFFD".split("");
      for (j = 0; j != D[202].length; ++j)
        if (D[202][j].charCodeAt(0) !== 65533) {
          e[D[202][j]] = 51712 + j;
          d[51712 + j] = D[202][j];
        }
      D[203] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8582\u8583\u8586\u8588\u8589\u858A\u858B\u858C\u858D\u858E\u8590\u8591\u8592\u8593\u8594\u8595\u8596\u8597\u8598\u8599\u859A\u859D\u859E\u859F\u85A0\u85A1\u85A2\u85A3\u85A5\u85A6\u85A7\u85A9\u85AB\u85AC\u85AD\u85B1\u85B2\u85B3\u85B4\u85B5\u85B6\u85B8\u85BA\u85BB\u85BC\u85BD\u85BE\u85BF\u85C0\u85C2\u85C3\u85C4\u85C5\u85C6\u85C7\u85C8\u85CA\u85CB\u85CC\u85CD\u85CE\u85D1\u85D2\uFFFD\u85D4\u85D6\u85D7\u85D8\u85D9\u85DA\u85DB\u85DD\u85DE\u85DF\u85E0\u85E1\u85E2\u85E3\u85E5\u85E6\u85E7\u85E8\u85EA\u85EB\u85EC\u85ED\u85EE\u85EF\u85F0\u85F1\u85F2\u85F3\u85F4\u85F5\u85F6\u85F7\u85F8\u6055\u5237\u800D\u6454\u8870\u7529\u5E05\u6813\u62F4\u971C\u53CC\u723D\u8C01\u6C34\u7761\u7A0E\u542E\u77AC\u987A\u821C\u8BF4\u7855\u6714\u70C1\u65AF\u6495\u5636\u601D\u79C1\u53F8\u4E1D\u6B7B\u8086\u5BFA\u55E3\u56DB\u4F3A\u4F3C\u9972\u5DF3\u677E\u8038\u6002\u9882\u9001\u5B8B\u8BBC\u8BF5\u641C\u8258\u64DE\u55FD\u82CF\u9165\u4FD7\u7D20\u901F\u7C9F\u50F3\u5851\u6EAF\u5BBF\u8BC9\u8083\u9178\u849C\u7B97\u867D\u968B\u968F\u7EE5\u9AD3\u788E\u5C81\u7A57\u9042\u96A7\u795F\u5B59\u635F\u7B0B\u84D1\u68AD\u5506\u7F29\u7410\u7D22\u9501\u6240\u584C\u4ED6\u5B83\u5979\u5854\uFFFD".split("");
      for (j = 0; j != D[203].length; ++j)
        if (D[203][j].charCodeAt(0) !== 65533) {
          e[D[203][j]] = 51968 + j;
          d[51968 + j] = D[203][j];
        }
      D[204] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u85F9\u85FA\u85FC\u85FD\u85FE\u8600\u8601\u8602\u8603\u8604\u8606\u8607\u8608\u8609\u860A\u860B\u860C\u860D\u860E\u860F\u8610\u8612\u8613\u8614\u8615\u8617\u8618\u8619\u861A\u861B\u861C\u861D\u861E\u861F\u8620\u8621\u8622\u8623\u8624\u8625\u8626\u8628\u862A\u862B\u862C\u862D\u862E\u862F\u8630\u8631\u8632\u8633\u8634\u8635\u8636\u8637\u8639\u863A\u863B\u863D\u863E\u863F\u8640\uFFFD\u8641\u8642\u8643\u8644\u8645\u8646\u8647\u8648\u8649\u864A\u864B\u864C\u8652\u8653\u8655\u8656\u8657\u8658\u8659\u865B\u865C\u865D\u865F\u8660\u8661\u8663\u8664\u8665\u8666\u8667\u8668\u8669\u866A\u736D\u631E\u8E4B\u8E0F\u80CE\u82D4\u62AC\u53F0\u6CF0\u915E\u592A\u6001\u6C70\u574D\u644A\u8D2A\u762B\u6EE9\u575B\u6A80\u75F0\u6F6D\u8C2D\u8C08\u5766\u6BEF\u8892\u78B3\u63A2\u53F9\u70AD\u6C64\u5858\u642A\u5802\u68E0\u819B\u5510\u7CD6\u5018\u8EBA\u6DCC\u8D9F\u70EB\u638F\u6D9B\u6ED4\u7EE6\u8404\u6843\u9003\u6DD8\u9676\u8BA8\u5957\u7279\u85E4\u817E\u75BC\u8A8A\u68AF\u5254\u8E22\u9511\u63D0\u9898\u8E44\u557C\u4F53\u66FF\u568F\u60D5\u6D95\u5243\u5C49\u5929\u6DFB\u586B\u7530\u751C\u606C\u8214\u8146\u6311\u6761\u8FE2\u773A\u8DF3\u8D34\u94C1\u5E16\u5385\u542C\u70C3\uFFFD".split("");
      for (j = 0; j != D[204].length; ++j)
        if (D[204][j].charCodeAt(0) !== 65533) {
          e[D[204][j]] = 52224 + j;
          d[52224 + j] = D[204][j];
        }
      D[205] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u866D\u866F\u8670\u8672\u8673\u8674\u8675\u8676\u8677\u8678\u8683\u8684\u8685\u8686\u8687\u8688\u8689\u868E\u868F\u8690\u8691\u8692\u8694\u8696\u8697\u8698\u8699\u869A\u869B\u869E\u869F\u86A0\u86A1\u86A2\u86A5\u86A6\u86AB\u86AD\u86AE\u86B2\u86B3\u86B7\u86B8\u86B9\u86BB\u86BC\u86BD\u86BE\u86BF\u86C1\u86C2\u86C3\u86C5\u86C8\u86CC\u86CD\u86D2\u86D3\u86D5\u86D6\u86D7\u86DA\u86DC\uFFFD\u86DD\u86E0\u86E1\u86E2\u86E3\u86E5\u86E6\u86E7\u86E8\u86EA\u86EB\u86EC\u86EF\u86F5\u86F6\u86F7\u86FA\u86FB\u86FC\u86FD\u86FF\u8701\u8704\u8705\u8706\u870B\u870C\u870E\u870F\u8710\u8711\u8714\u8716\u6C40\u5EF7\u505C\u4EAD\u5EAD\u633A\u8247\u901A\u6850\u916E\u77B3\u540C\u94DC\u5F64\u7AE5\u6876\u6345\u7B52\u7EDF\u75DB\u5077\u6295\u5934\u900F\u51F8\u79C3\u7A81\u56FE\u5F92\u9014\u6D82\u5C60\u571F\u5410\u5154\u6E4D\u56E2\u63A8\u9893\u817F\u8715\u892A\u9000\u541E\u5C6F\u81C0\u62D6\u6258\u8131\u9E35\u9640\u9A6E\u9A7C\u692D\u59A5\u62D3\u553E\u6316\u54C7\u86D9\u6D3C\u5A03\u74E6\u889C\u6B6A\u5916\u8C4C\u5F2F\u6E7E\u73A9\u987D\u4E38\u70F7\u5B8C\u7897\u633D\u665A\u7696\u60CB\u5B9B\u5A49\u4E07\u8155\u6C6A\u738B\u4EA1\u6789\u7F51\u5F80\u65FA\u671B\u5FD8\u5984\u5A01\uFFFD".split("");
      for (j = 0; j != D[205].length; ++j)
        if (D[205][j].charCodeAt(0) !== 65533) {
          e[D[205][j]] = 52480 + j;
          d[52480 + j] = D[205][j];
        }
      D[206] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8719\u871B\u871D\u871F\u8720\u8724\u8726\u8727\u8728\u872A\u872B\u872C\u872D\u872F\u8730\u8732\u8733\u8735\u8736\u8738\u8739\u873A\u873C\u873D\u8740\u8741\u8742\u8743\u8744\u8745\u8746\u874A\u874B\u874D\u874F\u8750\u8751\u8752\u8754\u8755\u8756\u8758\u875A\u875B\u875C\u875D\u875E\u875F\u8761\u8762\u8766\u8767\u8768\u8769\u876A\u876B\u876C\u876D\u876F\u8771\u8772\u8773\u8775\uFFFD\u8777\u8778\u8779\u877A\u877F\u8780\u8781\u8784\u8786\u8787\u8789\u878A\u878C\u878E\u878F\u8790\u8791\u8792\u8794\u8795\u8796\u8798\u8799\u879A\u879B\u879C\u879D\u879E\u87A0\u87A1\u87A2\u87A3\u87A4\u5DCD\u5FAE\u5371\u97E6\u8FDD\u6845\u56F4\u552F\u60DF\u4E3A\u6F4D\u7EF4\u82C7\u840E\u59D4\u4F1F\u4F2A\u5C3E\u7EAC\u672A\u851A\u5473\u754F\u80C3\u5582\u9B4F\u4F4D\u6E2D\u8C13\u5C09\u6170\u536B\u761F\u6E29\u868A\u6587\u95FB\u7EB9\u543B\u7A33\u7D0A\u95EE\u55E1\u7FC1\u74EE\u631D\u8717\u6DA1\u7A9D\u6211\u65A1\u5367\u63E1\u6C83\u5DEB\u545C\u94A8\u4E4C\u6C61\u8BEC\u5C4B\u65E0\u829C\u68A7\u543E\u5434\u6BCB\u6B66\u4E94\u6342\u5348\u821E\u4F0D\u4FAE\u575E\u620A\u96FE\u6664\u7269\u52FF\u52A1\u609F\u8BEF\u6614\u7199\u6790\u897F\u7852\u77FD\u6670\u563B\u5438\u9521\u727A\uFFFD".split("");
      for (j = 0; j != D[206].length; ++j)
        if (D[206][j].charCodeAt(0) !== 65533) {
          e[D[206][j]] = 52736 + j;
          d[52736 + j] = D[206][j];
        }
      D[207] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u87A5\u87A6\u87A7\u87A9\u87AA\u87AE\u87B0\u87B1\u87B2\u87B4\u87B6\u87B7\u87B8\u87B9\u87BB\u87BC\u87BE\u87BF\u87C1\u87C2\u87C3\u87C4\u87C5\u87C7\u87C8\u87C9\u87CC\u87CD\u87CE\u87CF\u87D0\u87D4\u87D5\u87D6\u87D7\u87D8\u87D9\u87DA\u87DC\u87DD\u87DE\u87DF\u87E1\u87E2\u87E3\u87E4\u87E6\u87E7\u87E8\u87E9\u87EB\u87EC\u87ED\u87EF\u87F0\u87F1\u87F2\u87F3\u87F4\u87F5\u87F6\u87F7\u87F8\uFFFD\u87FA\u87FB\u87FC\u87FD\u87FF\u8800\u8801\u8802\u8804\u8805\u8806\u8807\u8808\u8809\u880B\u880C\u880D\u880E\u880F\u8810\u8811\u8812\u8814\u8817\u8818\u8819\u881A\u881C\u881D\u881E\u881F\u8820\u8823\u7A00\u606F\u5E0C\u6089\u819D\u5915\u60DC\u7184\u70EF\u6EAA\u6C50\u7280\u6A84\u88AD\u5E2D\u4E60\u5AB3\u559C\u94E3\u6D17\u7CFB\u9699\u620F\u7EC6\u778E\u867E\u5323\u971E\u8F96\u6687\u5CE1\u4FA0\u72ED\u4E0B\u53A6\u590F\u5413\u6380\u9528\u5148\u4ED9\u9C9C\u7EA4\u54B8\u8D24\u8854\u8237\u95F2\u6D8E\u5F26\u5ACC\u663E\u9669\u73B0\u732E\u53BF\u817A\u9985\u7FA1\u5BAA\u9677\u9650\u7EBF\u76F8\u53A2\u9576\u9999\u7BB1\u8944\u6E58\u4E61\u7FD4\u7965\u8BE6\u60F3\u54CD\u4EAB\u9879\u5DF7\u6A61\u50CF\u5411\u8C61\u8427\u785D\u9704\u524A\u54EE\u56A3\u9500\u6D88\u5BB5\u6DC6\u6653\uFFFD".split("");
      for (j = 0; j != D[207].length; ++j)
        if (D[207][j].charCodeAt(0) !== 65533) {
          e[D[207][j]] = 52992 + j;
          d[52992 + j] = D[207][j];
        }
      D[208] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8824\u8825\u8826\u8827\u8828\u8829\u882A\u882B\u882C\u882D\u882E\u882F\u8830\u8831\u8833\u8834\u8835\u8836\u8837\u8838\u883A\u883B\u883D\u883E\u883F\u8841\u8842\u8843\u8846\u8847\u8848\u8849\u884A\u884B\u884E\u884F\u8850\u8851\u8852\u8853\u8855\u8856\u8858\u885A\u885B\u885C\u885D\u885E\u885F\u8860\u8866\u8867\u886A\u886D\u886F\u8871\u8873\u8874\u8875\u8876\u8878\u8879\u887A\uFFFD\u887B\u887C\u8880\u8883\u8886\u8887\u8889\u888A\u888C\u888E\u888F\u8890\u8891\u8893\u8894\u8895\u8897\u8898\u8899\u889A\u889B\u889D\u889E\u889F\u88A0\u88A1\u88A3\u88A5\u88A6\u88A7\u88A8\u88A9\u88AA\u5C0F\u5B5D\u6821\u8096\u5578\u7B11\u6548\u6954\u4E9B\u6B47\u874E\u978B\u534F\u631F\u643A\u90AA\u659C\u80C1\u8C10\u5199\u68B0\u5378\u87F9\u61C8\u6CC4\u6CFB\u8C22\u5C51\u85AA\u82AF\u950C\u6B23\u8F9B\u65B0\u5FFB\u5FC3\u4FE1\u8845\u661F\u8165\u7329\u60FA\u5174\u5211\u578B\u5F62\u90A2\u884C\u9192\u5E78\u674F\u6027\u59D3\u5144\u51F6\u80F8\u5308\u6C79\u96C4\u718A\u4F11\u4FEE\u7F9E\u673D\u55C5\u9508\u79C0\u8896\u7EE3\u589F\u620C\u9700\u865A\u5618\u987B\u5F90\u8BB8\u84C4\u9157\u53D9\u65ED\u5E8F\u755C\u6064\u7D6E\u5A7F\u7EEA\u7EED\u8F69\u55A7\u5BA3\u60AC\u65CB\u7384\uFFFD".split("");
      for (j = 0; j != D[208].length; ++j)
        if (D[208][j].charCodeAt(0) !== 65533) {
          e[D[208][j]] = 53248 + j;
          d[53248 + j] = D[208][j];
        }
      D[209] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u88AC\u88AE\u88AF\u88B0\u88B2\u88B3\u88B4\u88B5\u88B6\u88B8\u88B9\u88BA\u88BB\u88BD\u88BE\u88BF\u88C0\u88C3\u88C4\u88C7\u88C8\u88CA\u88CB\u88CC\u88CD\u88CF\u88D0\u88D1\u88D3\u88D6\u88D7\u88DA\u88DB\u88DC\u88DD\u88DE\u88E0\u88E1\u88E6\u88E7\u88E9\u88EA\u88EB\u88EC\u88ED\u88EE\u88EF\u88F2\u88F5\u88F6\u88F7\u88FA\u88FB\u88FD\u88FF\u8900\u8901\u8903\u8904\u8905\u8906\u8907\u8908\uFFFD\u8909\u890B\u890C\u890D\u890E\u890F\u8911\u8914\u8915\u8916\u8917\u8918\u891C\u891D\u891E\u891F\u8920\u8922\u8923\u8924\u8926\u8927\u8928\u8929\u892C\u892D\u892E\u892F\u8931\u8932\u8933\u8935\u8937\u9009\u7663\u7729\u7EDA\u9774\u859B\u5B66\u7A74\u96EA\u8840\u52CB\u718F\u5FAA\u65EC\u8BE2\u5BFB\u9A6F\u5DE1\u6B89\u6C5B\u8BAD\u8BAF\u900A\u8FC5\u538B\u62BC\u9E26\u9E2D\u5440\u4E2B\u82BD\u7259\u869C\u5D16\u8859\u6DAF\u96C5\u54D1\u4E9A\u8BB6\u7109\u54BD\u9609\u70DF\u6DF9\u76D0\u4E25\u7814\u8712\u5CA9\u5EF6\u8A00\u989C\u960E\u708E\u6CBF\u5944\u63A9\u773C\u884D\u6F14\u8273\u5830\u71D5\u538C\u781A\u96C1\u5501\u5F66\u7130\u5BB4\u8C1A\u9A8C\u6B83\u592E\u9E2F\u79E7\u6768\u626C\u4F6F\u75A1\u7F8A\u6D0B\u9633\u6C27\u4EF0\u75D2\u517B\u6837\u6F3E\u9080\u8170\u5996\u7476\uFFFD".split("");
      for (j = 0; j != D[209].length; ++j)
        if (D[209][j].charCodeAt(0) !== 65533) {
          e[D[209][j]] = 53504 + j;
          d[53504 + j] = D[209][j];
        }
      D[210] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8938\u8939\u893A\u893B\u893C\u893D\u893E\u893F\u8940\u8942\u8943\u8945\u8946\u8947\u8948\u8949\u894A\u894B\u894C\u894D\u894E\u894F\u8950\u8951\u8952\u8953\u8954\u8955\u8956\u8957\u8958\u8959\u895A\u895B\u895C\u895D\u8960\u8961\u8962\u8963\u8964\u8965\u8967\u8968\u8969\u896A\u896B\u896C\u896D\u896E\u896F\u8970\u8971\u8972\u8973\u8974\u8975\u8976\u8977\u8978\u8979\u897A\u897C\uFFFD\u897D\u897E\u8980\u8982\u8984\u8985\u8987\u8988\u8989\u898A\u898B\u898C\u898D\u898E\u898F\u8990\u8991\u8992\u8993\u8994\u8995\u8996\u8997\u8998\u8999\u899A\u899B\u899C\u899D\u899E\u899F\u89A0\u89A1\u6447\u5C27\u9065\u7A91\u8C23\u59DA\u54AC\u8200\u836F\u8981\u8000\u6930\u564E\u8036\u7237\u91CE\u51B6\u4E5F\u9875\u6396\u4E1A\u53F6\u66F3\u814B\u591C\u6DB2\u4E00\u58F9\u533B\u63D6\u94F1\u4F9D\u4F0A\u8863\u9890\u5937\u9057\u79FB\u4EEA\u80F0\u7591\u6C82\u5B9C\u59E8\u5F5D\u6905\u8681\u501A\u5DF2\u4E59\u77E3\u4EE5\u827A\u6291\u6613\u9091\u5C79\u4EBF\u5F79\u81C6\u9038\u8084\u75AB\u4EA6\u88D4\u610F\u6BC5\u5FC6\u4E49\u76CA\u6EA2\u8BE3\u8BAE\u8C0A\u8BD1\u5F02\u7FFC\u7FCC\u7ECE\u8335\u836B\u56E0\u6BB7\u97F3\u9634\u59FB\u541F\u94F6\u6DEB\u5BC5\u996E\u5C39\u5F15\u9690\uFFFD".split("");
      for (j = 0; j != D[210].length; ++j)
        if (D[210][j].charCodeAt(0) !== 65533) {
          e[D[210][j]] = 53760 + j;
          d[53760 + j] = D[210][j];
        }
      D[211] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u89A2\u89A3\u89A4\u89A5\u89A6\u89A7\u89A8\u89A9\u89AA\u89AB\u89AC\u89AD\u89AE\u89AF\u89B0\u89B1\u89B2\u89B3\u89B4\u89B5\u89B6\u89B7\u89B8\u89B9\u89BA\u89BB\u89BC\u89BD\u89BE\u89BF\u89C0\u89C3\u89CD\u89D3\u89D4\u89D5\u89D7\u89D8\u89D9\u89DB\u89DD\u89DF\u89E0\u89E1\u89E2\u89E4\u89E7\u89E8\u89E9\u89EA\u89EC\u89ED\u89EE\u89F0\u89F1\u89F2\u89F4\u89F5\u89F6\u89F7\u89F8\u89F9\u89FA\uFFFD\u89FB\u89FC\u89FD\u89FE\u89FF\u8A01\u8A02\u8A03\u8A04\u8A05\u8A06\u8A08\u8A09\u8A0A\u8A0B\u8A0C\u8A0D\u8A0E\u8A0F\u8A10\u8A11\u8A12\u8A13\u8A14\u8A15\u8A16\u8A17\u8A18\u8A19\u8A1A\u8A1B\u8A1C\u8A1D\u5370\u82F1\u6A31\u5A74\u9E70\u5E94\u7F28\u83B9\u8424\u8425\u8367\u8747\u8FCE\u8D62\u76C8\u5F71\u9896\u786C\u6620\u54DF\u62E5\u4F63\u81C3\u75C8\u5EB8\u96CD\u8E0A\u86F9\u548F\u6CF3\u6D8C\u6C38\u607F\u52C7\u7528\u5E7D\u4F18\u60A0\u5FE7\u5C24\u7531\u90AE\u94C0\u72B9\u6CB9\u6E38\u9149\u6709\u53CB\u53F3\u4F51\u91C9\u8BF1\u53C8\u5E7C\u8FC2\u6DE4\u4E8E\u76C2\u6986\u865E\u611A\u8206\u4F59\u4FDE\u903E\u9C7C\u6109\u6E1D\u6E14\u9685\u4E88\u5A31\u96E8\u4E0E\u5C7F\u79B9\u5B87\u8BED\u7FBD\u7389\u57DF\u828B\u90C1\u5401\u9047\u55BB\u5CEA\u5FA1\u6108\u6B32\u72F1\u80B2\u8A89\uFFFD".split("");
      for (j = 0; j != D[211].length; ++j)
        if (D[211][j].charCodeAt(0) !== 65533) {
          e[D[211][j]] = 54016 + j;
          d[54016 + j] = D[211][j];
        }
      D[212] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8A1E\u8A1F\u8A20\u8A21\u8A22\u8A23\u8A24\u8A25\u8A26\u8A27\u8A28\u8A29\u8A2A\u8A2B\u8A2C\u8A2D\u8A2E\u8A2F\u8A30\u8A31\u8A32\u8A33\u8A34\u8A35\u8A36\u8A37\u8A38\u8A39\u8A3A\u8A3B\u8A3C\u8A3D\u8A3F\u8A40\u8A41\u8A42\u8A43\u8A44\u8A45\u8A46\u8A47\u8A49\u8A4A\u8A4B\u8A4C\u8A4D\u8A4E\u8A4F\u8A50\u8A51\u8A52\u8A53\u8A54\u8A55\u8A56\u8A57\u8A58\u8A59\u8A5A\u8A5B\u8A5C\u8A5D\u8A5E\uFFFD\u8A5F\u8A60\u8A61\u8A62\u8A63\u8A64\u8A65\u8A66\u8A67\u8A68\u8A69\u8A6A\u8A6B\u8A6C\u8A6D\u8A6E\u8A6F\u8A70\u8A71\u8A72\u8A73\u8A74\u8A75\u8A76\u8A77\u8A78\u8A7A\u8A7B\u8A7C\u8A7D\u8A7E\u8A7F\u8A80\u6D74\u5BD3\u88D5\u9884\u8C6B\u9A6D\u9E33\u6E0A\u51A4\u5143\u57A3\u8881\u539F\u63F4\u8F95\u56ED\u5458\u5706\u733F\u6E90\u7F18\u8FDC\u82D1\u613F\u6028\u9662\u66F0\u7EA6\u8D8A\u8DC3\u94A5\u5CB3\u7CA4\u6708\u60A6\u9605\u8018\u4E91\u90E7\u5300\u9668\u5141\u8FD0\u8574\u915D\u6655\u97F5\u5B55\u531D\u7838\u6742\u683D\u54C9\u707E\u5BB0\u8F7D\u518D\u5728\u54B1\u6512\u6682\u8D5E\u8D43\u810F\u846C\u906D\u7CDF\u51FF\u85FB\u67A3\u65E9\u6FA1\u86A4\u8E81\u566A\u9020\u7682\u7076\u71E5\u8D23\u62E9\u5219\u6CFD\u8D3C\u600E\u589E\u618E\u66FE\u8D60\u624E\u55B3\u6E23\u672D\u8F67\uFFFD".split("");
      for (j = 0; j != D[212].length; ++j)
        if (D[212][j].charCodeAt(0) !== 65533) {
          e[D[212][j]] = 54272 + j;
          d[54272 + j] = D[212][j];
        }
      D[213] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8A81\u8A82\u8A83\u8A84\u8A85\u8A86\u8A87\u8A88\u8A8B\u8A8C\u8A8D\u8A8E\u8A8F\u8A90\u8A91\u8A92\u8A94\u8A95\u8A96\u8A97\u8A98\u8A99\u8A9A\u8A9B\u8A9C\u8A9D\u8A9E\u8A9F\u8AA0\u8AA1\u8AA2\u8AA3\u8AA4\u8AA5\u8AA6\u8AA7\u8AA8\u8AA9\u8AAA\u8AAB\u8AAC\u8AAD\u8AAE\u8AAF\u8AB0\u8AB1\u8AB2\u8AB3\u8AB4\u8AB5\u8AB6\u8AB7\u8AB8\u8AB9\u8ABA\u8ABB\u8ABC\u8ABD\u8ABE\u8ABF\u8AC0\u8AC1\u8AC2\uFFFD\u8AC3\u8AC4\u8AC5\u8AC6\u8AC7\u8AC8\u8AC9\u8ACA\u8ACB\u8ACC\u8ACD\u8ACE\u8ACF\u8AD0\u8AD1\u8AD2\u8AD3\u8AD4\u8AD5\u8AD6\u8AD7\u8AD8\u8AD9\u8ADA\u8ADB\u8ADC\u8ADD\u8ADE\u8ADF\u8AE0\u8AE1\u8AE2\u8AE3\u94E1\u95F8\u7728\u6805\u69A8\u548B\u4E4D\u70B8\u8BC8\u6458\u658B\u5B85\u7A84\u503A\u5BE8\u77BB\u6BE1\u8A79\u7C98\u6CBE\u76CF\u65A9\u8F97\u5D2D\u5C55\u8638\u6808\u5360\u6218\u7AD9\u6E5B\u7EFD\u6A1F\u7AE0\u5F70\u6F33\u5F20\u638C\u6DA8\u6756\u4E08\u5E10\u8D26\u4ED7\u80C0\u7634\u969C\u62DB\u662D\u627E\u6CBC\u8D75\u7167\u7F69\u5146\u8087\u53EC\u906E\u6298\u54F2\u86F0\u8F99\u8005\u9517\u8517\u8FD9\u6D59\u73CD\u659F\u771F\u7504\u7827\u81FB\u8D1E\u9488\u4FA6\u6795\u75B9\u8BCA\u9707\u632F\u9547\u9635\u84B8\u6323\u7741\u5F81\u72F0\u4E89\u6014\u6574\u62EF\u6B63\u653F\uFFFD".split("");
      for (j = 0; j != D[213].length; ++j)
        if (D[213][j].charCodeAt(0) !== 65533) {
          e[D[213][j]] = 54528 + j;
          d[54528 + j] = D[213][j];
        }
      D[214] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8AE4\u8AE5\u8AE6\u8AE7\u8AE8\u8AE9\u8AEA\u8AEB\u8AEC\u8AED\u8AEE\u8AEF\u8AF0\u8AF1\u8AF2\u8AF3\u8AF4\u8AF5\u8AF6\u8AF7\u8AF8\u8AF9\u8AFA\u8AFB\u8AFC\u8AFD\u8AFE\u8AFF\u8B00\u8B01\u8B02\u8B03\u8B04\u8B05\u8B06\u8B08\u8B09\u8B0A\u8B0B\u8B0C\u8B0D\u8B0E\u8B0F\u8B10\u8B11\u8B12\u8B13\u8B14\u8B15\u8B16\u8B17\u8B18\u8B19\u8B1A\u8B1B\u8B1C\u8B1D\u8B1E\u8B1F\u8B20\u8B21\u8B22\u8B23\uFFFD\u8B24\u8B25\u8B27\u8B28\u8B29\u8B2A\u8B2B\u8B2C\u8B2D\u8B2E\u8B2F\u8B30\u8B31\u8B32\u8B33\u8B34\u8B35\u8B36\u8B37\u8B38\u8B39\u8B3A\u8B3B\u8B3C\u8B3D\u8B3E\u8B3F\u8B40\u8B41\u8B42\u8B43\u8B44\u8B45\u5E27\u75C7\u90D1\u8BC1\u829D\u679D\u652F\u5431\u8718\u77E5\u80A2\u8102\u6C41\u4E4B\u7EC7\u804C\u76F4\u690D\u6B96\u6267\u503C\u4F84\u5740\u6307\u6B62\u8DBE\u53EA\u65E8\u7EB8\u5FD7\u631A\u63B7\u81F3\u81F4\u7F6E\u5E1C\u5CD9\u5236\u667A\u79E9\u7A1A\u8D28\u7099\u75D4\u6EDE\u6CBB\u7A92\u4E2D\u76C5\u5FE0\u949F\u8877\u7EC8\u79CD\u80BF\u91CD\u4EF2\u4F17\u821F\u5468\u5DDE\u6D32\u8BCC\u7CA5\u8F74\u8098\u5E1A\u5492\u76B1\u5B99\u663C\u9AA4\u73E0\u682A\u86DB\u6731\u732A\u8BF8\u8BDB\u9010\u7AF9\u70DB\u716E\u62C4\u77A9\u5631\u4E3B\u8457\u67F1\u52A9\u86C0\u8D2E\u94F8\u7B51\uFFFD".split("");
      for (j = 0; j != D[214].length; ++j)
        if (D[214][j].charCodeAt(0) !== 65533) {
          e[D[214][j]] = 54784 + j;
          d[54784 + j] = D[214][j];
        }
      D[215] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8B46\u8B47\u8B48\u8B49\u8B4A\u8B4B\u8B4C\u8B4D\u8B4E\u8B4F\u8B50\u8B51\u8B52\u8B53\u8B54\u8B55\u8B56\u8B57\u8B58\u8B59\u8B5A\u8B5B\u8B5C\u8B5D\u8B5E\u8B5F\u8B60\u8B61\u8B62\u8B63\u8B64\u8B65\u8B67\u8B68\u8B69\u8B6A\u8B6B\u8B6D\u8B6E\u8B6F\u8B70\u8B71\u8B72\u8B73\u8B74\u8B75\u8B76\u8B77\u8B78\u8B79\u8B7A\u8B7B\u8B7C\u8B7D\u8B7E\u8B7F\u8B80\u8B81\u8B82\u8B83\u8B84\u8B85\u8B86\uFFFD\u8B87\u8B88\u8B89\u8B8A\u8B8B\u8B8C\u8B8D\u8B8E\u8B8F\u8B90\u8B91\u8B92\u8B93\u8B94\u8B95\u8B96\u8B97\u8B98\u8B99\u8B9A\u8B9B\u8B9C\u8B9D\u8B9E\u8B9F\u8BAC\u8BB1\u8BBB\u8BC7\u8BD0\u8BEA\u8C09\u8C1E\u4F4F\u6CE8\u795D\u9A7B\u6293\u722A\u62FD\u4E13\u7816\u8F6C\u64B0\u8D5A\u7BC6\u6869\u5E84\u88C5\u5986\u649E\u58EE\u72B6\u690E\u9525\u8FFD\u8D58\u5760\u7F00\u8C06\u51C6\u6349\u62D9\u5353\u684C\u7422\u8301\u914C\u5544\u7740\u707C\u6D4A\u5179\u54A8\u8D44\u59FF\u6ECB\u6DC4\u5B5C\u7D2B\u4ED4\u7C7D\u6ED3\u5B50\u81EA\u6E0D\u5B57\u9B03\u68D5\u8E2A\u5B97\u7EFC\u603B\u7EB5\u90B9\u8D70\u594F\u63CD\u79DF\u8DB3\u5352\u65CF\u7956\u8BC5\u963B\u7EC4\u94BB\u7E82\u5634\u9189\u6700\u7F6A\u5C0A\u9075\u6628\u5DE6\u4F50\u67DE\u505A\u4F5C\u5750\u5EA7\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[215].length; ++j)
        if (D[215][j].charCodeAt(0) !== 65533) {
          e[D[215][j]] = 55040 + j;
          d[55040 + j] = D[215][j];
        }
      D[216] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8C38\u8C39\u8C3A\u8C3B\u8C3C\u8C3D\u8C3E\u8C3F\u8C40\u8C42\u8C43\u8C44\u8C45\u8C48\u8C4A\u8C4B\u8C4D\u8C4E\u8C4F\u8C50\u8C51\u8C52\u8C53\u8C54\u8C56\u8C57\u8C58\u8C59\u8C5B\u8C5C\u8C5D\u8C5E\u8C5F\u8C60\u8C63\u8C64\u8C65\u8C66\u8C67\u8C68\u8C69\u8C6C\u8C6D\u8C6E\u8C6F\u8C70\u8C71\u8C72\u8C74\u8C75\u8C76\u8C77\u8C7B\u8C7C\u8C7D\u8C7E\u8C7F\u8C80\u8C81\u8C83\u8C84\u8C86\u8C87\uFFFD\u8C88\u8C8B\u8C8D\u8C8E\u8C8F\u8C90\u8C91\u8C92\u8C93\u8C95\u8C96\u8C97\u8C99\u8C9A\u8C9B\u8C9C\u8C9D\u8C9E\u8C9F\u8CA0\u8CA1\u8CA2\u8CA3\u8CA4\u8CA5\u8CA6\u8CA7\u8CA8\u8CA9\u8CAA\u8CAB\u8CAC\u8CAD\u4E8D\u4E0C\u5140\u4E10\u5EFF\u5345\u4E15\u4E98\u4E1E\u9B32\u5B6C\u5669\u4E28\u79BA\u4E3F\u5315\u4E47\u592D\u723B\u536E\u6C10\u56DF\u80E4\u9997\u6BD3\u777E\u9F17\u4E36\u4E9F\u9F10\u4E5C\u4E69\u4E93\u8288\u5B5B\u556C\u560F\u4EC4\u538D\u539D\u53A3\u53A5\u53AE\u9765\u8D5D\u531A\u53F5\u5326\u532E\u533E\u8D5C\u5366\u5363\u5202\u5208\u520E\u522D\u5233\u523F\u5240\u524C\u525E\u5261\u525C\u84AF\u527D\u5282\u5281\u5290\u5293\u5182\u7F54\u4EBB\u4EC3\u4EC9\u4EC2\u4EE8\u4EE1\u4EEB\u4EDE\u4F1B\u4EF3\u4F22\u4F64\u4EF5\u4F25\u4F27\u4F09\u4F2B\u4F5E\u4F67\u6538\u4F5A\u4F5D\uFFFD".split("");
      for (j = 0; j != D[216].length; ++j)
        if (D[216][j].charCodeAt(0) !== 65533) {
          e[D[216][j]] = 55296 + j;
          d[55296 + j] = D[216][j];
        }
      D[217] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8CAE\u8CAF\u8CB0\u8CB1\u8CB2\u8CB3\u8CB4\u8CB5\u8CB6\u8CB7\u8CB8\u8CB9\u8CBA\u8CBB\u8CBC\u8CBD\u8CBE\u8CBF\u8CC0\u8CC1\u8CC2\u8CC3\u8CC4\u8CC5\u8CC6\u8CC7\u8CC8\u8CC9\u8CCA\u8CCB\u8CCC\u8CCD\u8CCE\u8CCF\u8CD0\u8CD1\u8CD2\u8CD3\u8CD4\u8CD5\u8CD6\u8CD7\u8CD8\u8CD9\u8CDA\u8CDB\u8CDC\u8CDD\u8CDE\u8CDF\u8CE0\u8CE1\u8CE2\u8CE3\u8CE4\u8CE5\u8CE6\u8CE7\u8CE8\u8CE9\u8CEA\u8CEB\u8CEC\uFFFD\u8CED\u8CEE\u8CEF\u8CF0\u8CF1\u8CF2\u8CF3\u8CF4\u8CF5\u8CF6\u8CF7\u8CF8\u8CF9\u8CFA\u8CFB\u8CFC\u8CFD\u8CFE\u8CFF\u8D00\u8D01\u8D02\u8D03\u8D04\u8D05\u8D06\u8D07\u8D08\u8D09\u8D0A\u8D0B\u8D0C\u8D0D\u4F5F\u4F57\u4F32\u4F3D\u4F76\u4F74\u4F91\u4F89\u4F83\u4F8F\u4F7E\u4F7B\u4FAA\u4F7C\u4FAC\u4F94\u4FE6\u4FE8\u4FEA\u4FC5\u4FDA\u4FE3\u4FDC\u4FD1\u4FDF\u4FF8\u5029\u504C\u4FF3\u502C\u500F\u502E\u502D\u4FFE\u501C\u500C\u5025\u5028\u507E\u5043\u5055\u5048\u504E\u506C\u507B\u50A5\u50A7\u50A9\u50BA\u50D6\u5106\u50ED\u50EC\u50E6\u50EE\u5107\u510B\u4EDD\u6C3D\u4F58\u4F65\u4FCE\u9FA0\u6C46\u7C74\u516E\u5DFD\u9EC9\u9998\u5181\u5914\u52F9\u530D\u8A07\u5310\u51EB\u5919\u5155\u4EA0\u5156\u4EB3\u886E\u88A4\u4EB5\u8114\u88D2\u7980\u5B34\u8803\u7FB8\u51AB\u51B1\u51BD\u51BC\uFFFD".split("");
      for (j = 0; j != D[217].length; ++j)
        if (D[217][j].charCodeAt(0) !== 65533) {
          e[D[217][j]] = 55552 + j;
          d[55552 + j] = D[217][j];
        }
      D[218] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8D0E\u8D0F\u8D10\u8D11\u8D12\u8D13\u8D14\u8D15\u8D16\u8D17\u8D18\u8D19\u8D1A\u8D1B\u8D1C\u8D20\u8D51\u8D52\u8D57\u8D5F\u8D65\u8D68\u8D69\u8D6A\u8D6C\u8D6E\u8D6F\u8D71\u8D72\u8D78\u8D79\u8D7A\u8D7B\u8D7C\u8D7D\u8D7E\u8D7F\u8D80\u8D82\u8D83\u8D86\u8D87\u8D88\u8D89\u8D8C\u8D8D\u8D8E\u8D8F\u8D90\u8D92\u8D93\u8D95\u8D96\u8D97\u8D98\u8D99\u8D9A\u8D9B\u8D9C\u8D9D\u8D9E\u8DA0\u8DA1\uFFFD\u8DA2\u8DA4\u8DA5\u8DA6\u8DA7\u8DA8\u8DA9\u8DAA\u8DAB\u8DAC\u8DAD\u8DAE\u8DAF\u8DB0\u8DB2\u8DB6\u8DB7\u8DB9\u8DBB\u8DBD\u8DC0\u8DC1\u8DC2\u8DC5\u8DC7\u8DC8\u8DC9\u8DCA\u8DCD\u8DD0\u8DD2\u8DD3\u8DD4\u51C7\u5196\u51A2\u51A5\u8BA0\u8BA6\u8BA7\u8BAA\u8BB4\u8BB5\u8BB7\u8BC2\u8BC3\u8BCB\u8BCF\u8BCE\u8BD2\u8BD3\u8BD4\u8BD6\u8BD8\u8BD9\u8BDC\u8BDF\u8BE0\u8BE4\u8BE8\u8BE9\u8BEE\u8BF0\u8BF3\u8BF6\u8BF9\u8BFC\u8BFF\u8C00\u8C02\u8C04\u8C07\u8C0C\u8C0F\u8C11\u8C12\u8C14\u8C15\u8C16\u8C19\u8C1B\u8C18\u8C1D\u8C1F\u8C20\u8C21\u8C25\u8C27\u8C2A\u8C2B\u8C2E\u8C2F\u8C32\u8C33\u8C35\u8C36\u5369\u537A\u961D\u9622\u9621\u9631\u962A\u963D\u963C\u9642\u9649\u9654\u965F\u9667\u966C\u9672\u9674\u9688\u968D\u9697\u96B0\u9097\u909B\u909D\u9099\u90AC\u90A1\u90B4\u90B3\u90B6\u90BA\uFFFD".split("");
      for (j = 0; j != D[218].length; ++j)
        if (D[218][j].charCodeAt(0) !== 65533) {
          e[D[218][j]] = 55808 + j;
          d[55808 + j] = D[218][j];
        }
      D[219] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8DD5\u8DD8\u8DD9\u8DDC\u8DE0\u8DE1\u8DE2\u8DE5\u8DE6\u8DE7\u8DE9\u8DED\u8DEE\u8DF0\u8DF1\u8DF2\u8DF4\u8DF6\u8DFC\u8DFE\u8DFF\u8E00\u8E01\u8E02\u8E03\u8E04\u8E06\u8E07\u8E08\u8E0B\u8E0D\u8E0E\u8E10\u8E11\u8E12\u8E13\u8E15\u8E16\u8E17\u8E18\u8E19\u8E1A\u8E1B\u8E1C\u8E20\u8E21\u8E24\u8E25\u8E26\u8E27\u8E28\u8E2B\u8E2D\u8E30\u8E32\u8E33\u8E34\u8E36\u8E37\u8E38\u8E3B\u8E3C\u8E3E\uFFFD\u8E3F\u8E43\u8E45\u8E46\u8E4C\u8E4D\u8E4E\u8E4F\u8E50\u8E53\u8E54\u8E55\u8E56\u8E57\u8E58\u8E5A\u8E5B\u8E5C\u8E5D\u8E5E\u8E5F\u8E60\u8E61\u8E62\u8E63\u8E64\u8E65\u8E67\u8E68\u8E6A\u8E6B\u8E6E\u8E71\u90B8\u90B0\u90CF\u90C5\u90BE\u90D0\u90C4\u90C7\u90D3\u90E6\u90E2\u90DC\u90D7\u90DB\u90EB\u90EF\u90FE\u9104\u9122\u911E\u9123\u9131\u912F\u9139\u9143\u9146\u520D\u5942\u52A2\u52AC\u52AD\u52BE\u54FF\u52D0\u52D6\u52F0\u53DF\u71EE\u77CD\u5EF4\u51F5\u51FC\u9B2F\u53B6\u5F01\u755A\u5DEF\u574C\u57A9\u57A1\u587E\u58BC\u58C5\u58D1\u5729\u572C\u572A\u5733\u5739\u572E\u572F\u575C\u573B\u5742\u5769\u5785\u576B\u5786\u577C\u577B\u5768\u576D\u5776\u5773\u57AD\u57A4\u578C\u57B2\u57CF\u57A7\u57B4\u5793\u57A0\u57D5\u57D8\u57DA\u57D9\u57D2\u57B8\u57F4\u57EF\u57F8\u57E4\u57DD\uFFFD".split("");
      for (j = 0; j != D[219].length; ++j)
        if (D[219][j].charCodeAt(0) !== 65533) {
          e[D[219][j]] = 56064 + j;
          d[56064 + j] = D[219][j];
        }
      D[220] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8E73\u8E75\u8E77\u8E78\u8E79\u8E7A\u8E7B\u8E7D\u8E7E\u8E80\u8E82\u8E83\u8E84\u8E86\u8E88\u8E89\u8E8A\u8E8B\u8E8C\u8E8D\u8E8E\u8E91\u8E92\u8E93\u8E95\u8E96\u8E97\u8E98\u8E99\u8E9A\u8E9B\u8E9D\u8E9F\u8EA0\u8EA1\u8EA2\u8EA3\u8EA4\u8EA5\u8EA6\u8EA7\u8EA8\u8EA9\u8EAA\u8EAD\u8EAE\u8EB0\u8EB1\u8EB3\u8EB4\u8EB5\u8EB6\u8EB7\u8EB8\u8EB9\u8EBB\u8EBC\u8EBD\u8EBE\u8EBF\u8EC0\u8EC1\u8EC2\uFFFD\u8EC3\u8EC4\u8EC5\u8EC6\u8EC7\u8EC8\u8EC9\u8ECA\u8ECB\u8ECC\u8ECD\u8ECF\u8ED0\u8ED1\u8ED2\u8ED3\u8ED4\u8ED5\u8ED6\u8ED7\u8ED8\u8ED9\u8EDA\u8EDB\u8EDC\u8EDD\u8EDE\u8EDF\u8EE0\u8EE1\u8EE2\u8EE3\u8EE4\u580B\u580D\u57FD\u57ED\u5800\u581E\u5819\u5844\u5820\u5865\u586C\u5881\u5889\u589A\u5880\u99A8\u9F19\u61FF\u8279\u827D\u827F\u828F\u828A\u82A8\u8284\u828E\u8291\u8297\u8299\u82AB\u82B8\u82BE\u82B0\u82C8\u82CA\u82E3\u8298\u82B7\u82AE\u82CB\u82CC\u82C1\u82A9\u82B4\u82A1\u82AA\u829F\u82C4\u82CE\u82A4\u82E1\u8309\u82F7\u82E4\u830F\u8307\u82DC\u82F4\u82D2\u82D8\u830C\u82FB\u82D3\u8311\u831A\u8306\u8314\u8315\u82E0\u82D5\u831C\u8351\u835B\u835C\u8308\u8392\u833C\u8334\u8331\u839B\u835E\u832F\u834F\u8347\u8343\u835F\u8340\u8317\u8360\u832D\u833A\u8333\u8366\u8365\uFFFD".split("");
      for (j = 0; j != D[220].length; ++j)
        if (D[220][j].charCodeAt(0) !== 65533) {
          e[D[220][j]] = 56320 + j;
          d[56320 + j] = D[220][j];
        }
      D[221] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8EE5\u8EE6\u8EE7\u8EE8\u8EE9\u8EEA\u8EEB\u8EEC\u8EED\u8EEE\u8EEF\u8EF0\u8EF1\u8EF2\u8EF3\u8EF4\u8EF5\u8EF6\u8EF7\u8EF8\u8EF9\u8EFA\u8EFB\u8EFC\u8EFD\u8EFE\u8EFF\u8F00\u8F01\u8F02\u8F03\u8F04\u8F05\u8F06\u8F07\u8F08\u8F09\u8F0A\u8F0B\u8F0C\u8F0D\u8F0E\u8F0F\u8F10\u8F11\u8F12\u8F13\u8F14\u8F15\u8F16\u8F17\u8F18\u8F19\u8F1A\u8F1B\u8F1C\u8F1D\u8F1E\u8F1F\u8F20\u8F21\u8F22\u8F23\uFFFD\u8F24\u8F25\u8F26\u8F27\u8F28\u8F29\u8F2A\u8F2B\u8F2C\u8F2D\u8F2E\u8F2F\u8F30\u8F31\u8F32\u8F33\u8F34\u8F35\u8F36\u8F37\u8F38\u8F39\u8F3A\u8F3B\u8F3C\u8F3D\u8F3E\u8F3F\u8F40\u8F41\u8F42\u8F43\u8F44\u8368\u831B\u8369\u836C\u836A\u836D\u836E\u83B0\u8378\u83B3\u83B4\u83A0\u83AA\u8393\u839C\u8385\u837C\u83B6\u83A9\u837D\u83B8\u837B\u8398\u839E\u83A8\u83BA\u83BC\u83C1\u8401\u83E5\u83D8\u5807\u8418\u840B\u83DD\u83FD\u83D6\u841C\u8438\u8411\u8406\u83D4\u83DF\u840F\u8403\u83F8\u83F9\u83EA\u83C5\u83C0\u8426\u83F0\u83E1\u845C\u8451\u845A\u8459\u8473\u8487\u8488\u847A\u8489\u8478\u843C\u8446\u8469\u8476\u848C\u848E\u8431\u846D\u84C1\u84CD\u84D0\u84E6\u84BD\u84D3\u84CA\u84BF\u84BA\u84E0\u84A1\u84B9\u84B4\u8497\u84E5\u84E3\u850C\u750D\u8538\u84F0\u8539\u851F\u853A\uFFFD".split("");
      for (j = 0; j != D[221].length; ++j)
        if (D[221][j].charCodeAt(0) !== 65533) {
          e[D[221][j]] = 56576 + j;
          d[56576 + j] = D[221][j];
        }
      D[222] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8F45\u8F46\u8F47\u8F48\u8F49\u8F4A\u8F4B\u8F4C\u8F4D\u8F4E\u8F4F\u8F50\u8F51\u8F52\u8F53\u8F54\u8F55\u8F56\u8F57\u8F58\u8F59\u8F5A\u8F5B\u8F5C\u8F5D\u8F5E\u8F5F\u8F60\u8F61\u8F62\u8F63\u8F64\u8F65\u8F6A\u8F80\u8F8C\u8F92\u8F9D\u8FA0\u8FA1\u8FA2\u8FA4\u8FA5\u8FA6\u8FA7\u8FAA\u8FAC\u8FAD\u8FAE\u8FAF\u8FB2\u8FB3\u8FB4\u8FB5\u8FB7\u8FB8\u8FBA\u8FBB\u8FBC\u8FBF\u8FC0\u8FC3\u8FC6\uFFFD\u8FC9\u8FCA\u8FCB\u8FCC\u8FCD\u8FCF\u8FD2\u8FD6\u8FD7\u8FDA\u8FE0\u8FE1\u8FE3\u8FE7\u8FEC\u8FEF\u8FF1\u8FF2\u8FF4\u8FF5\u8FF6\u8FFA\u8FFB\u8FFC\u8FFE\u8FFF\u9007\u9008\u900C\u900E\u9013\u9015\u9018\u8556\u853B\u84FF\u84FC\u8559\u8548\u8568\u8564\u855E\u857A\u77A2\u8543\u8572\u857B\u85A4\u85A8\u8587\u858F\u8579\u85AE\u859C\u8585\u85B9\u85B7\u85B0\u85D3\u85C1\u85DC\u85FF\u8627\u8605\u8629\u8616\u863C\u5EFE\u5F08\u593C\u5941\u8037\u5955\u595A\u5958\u530F\u5C22\u5C25\u5C2C\u5C34\u624C\u626A\u629F\u62BB\u62CA\u62DA\u62D7\u62EE\u6322\u62F6\u6339\u634B\u6343\u63AD\u63F6\u6371\u637A\u638E\u63B4\u636D\u63AC\u638A\u6369\u63AE\u63BC\u63F2\u63F8\u63E0\u63FF\u63C4\u63DE\u63CE\u6452\u63C6\u63BE\u6445\u6441\u640B\u641B\u6420\u640C\u6426\u6421\u645E\u6484\u646D\u6496\uFFFD".split("");
      for (j = 0; j != D[222].length; ++j)
        if (D[222][j].charCodeAt(0) !== 65533) {
          e[D[222][j]] = 56832 + j;
          d[56832 + j] = D[222][j];
        }
      D[223] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9019\u901C\u9023\u9024\u9025\u9027\u9028\u9029\u902A\u902B\u902C\u9030\u9031\u9032\u9033\u9034\u9037\u9039\u903A\u903D\u903F\u9040\u9043\u9045\u9046\u9048\u9049\u904A\u904B\u904C\u904E\u9054\u9055\u9056\u9059\u905A\u905C\u905D\u905E\u905F\u9060\u9061\u9064\u9066\u9067\u9069\u906A\u906B\u906C\u906F\u9070\u9071\u9072\u9073\u9076\u9077\u9078\u9079\u907A\u907B\u907C\u907E\u9081\uFFFD\u9084\u9085\u9086\u9087\u9089\u908A\u908C\u908D\u908E\u908F\u9090\u9092\u9094\u9096\u9098\u909A\u909C\u909E\u909F\u90A0\u90A4\u90A5\u90A7\u90A8\u90A9\u90AB\u90AD\u90B2\u90B7\u90BC\u90BD\u90BF\u90C0\u647A\u64B7\u64B8\u6499\u64BA\u64C0\u64D0\u64D7\u64E4\u64E2\u6509\u6525\u652E\u5F0B\u5FD2\u7519\u5F11\u535F\u53F1\u53FD\u53E9\u53E8\u53FB\u5412\u5416\u5406\u544B\u5452\u5453\u5454\u5456\u5443\u5421\u5457\u5459\u5423\u5432\u5482\u5494\u5477\u5471\u5464\u549A\u549B\u5484\u5476\u5466\u549D\u54D0\u54AD\u54C2\u54B4\u54D2\u54A7\u54A6\u54D3\u54D4\u5472\u54A3\u54D5\u54BB\u54BF\u54CC\u54D9\u54DA\u54DC\u54A9\u54AA\u54A4\u54DD\u54CF\u54DE\u551B\u54E7\u5520\u54FD\u5514\u54F3\u5522\u5523\u550F\u5511\u5527\u552A\u5567\u558F\u55B5\u5549\u556D\u5541\u5555\u553F\u5550\u553C\uFFFD".split("");
      for (j = 0; j != D[223].length; ++j)
        if (D[223][j].charCodeAt(0) !== 65533) {
          e[D[223][j]] = 57088 + j;
          d[57088 + j] = D[223][j];
        }
      D[224] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u90C2\u90C3\u90C6\u90C8\u90C9\u90CB\u90CC\u90CD\u90D2\u90D4\u90D5\u90D6\u90D8\u90D9\u90DA\u90DE\u90DF\u90E0\u90E3\u90E4\u90E5\u90E9\u90EA\u90EC\u90EE\u90F0\u90F1\u90F2\u90F3\u90F5\u90F6\u90F7\u90F9\u90FA\u90FB\u90FC\u90FF\u9100\u9101\u9103\u9105\u9106\u9107\u9108\u9109\u910A\u910B\u910C\u910D\u910E\u910F\u9110\u9111\u9112\u9113\u9114\u9115\u9116\u9117\u9118\u911A\u911B\u911C\uFFFD\u911D\u911F\u9120\u9121\u9124\u9125\u9126\u9127\u9128\u9129\u912A\u912B\u912C\u912D\u912E\u9130\u9132\u9133\u9134\u9135\u9136\u9137\u9138\u913A\u913B\u913C\u913D\u913E\u913F\u9140\u9141\u9142\u9144\u5537\u5556\u5575\u5576\u5577\u5533\u5530\u555C\u558B\u55D2\u5583\u55B1\u55B9\u5588\u5581\u559F\u557E\u55D6\u5591\u557B\u55DF\u55BD\u55BE\u5594\u5599\u55EA\u55F7\u55C9\u561F\u55D1\u55EB\u55EC\u55D4\u55E6\u55DD\u55C4\u55EF\u55E5\u55F2\u55F3\u55CC\u55CD\u55E8\u55F5\u55E4\u8F94\u561E\u5608\u560C\u5601\u5624\u5623\u55FE\u5600\u5627\u562D\u5658\u5639\u5657\u562C\u564D\u5662\u5659\u565C\u564C\u5654\u5686\u5664\u5671\u566B\u567B\u567C\u5685\u5693\u56AF\u56D4\u56D7\u56DD\u56E1\u56F5\u56EB\u56F9\u56FF\u5704\u570A\u5709\u571C\u5E0F\u5E19\u5E14\u5E11\u5E31\u5E3B\u5E3C\uFFFD".split("");
      for (j = 0; j != D[224].length; ++j)
        if (D[224][j].charCodeAt(0) !== 65533) {
          e[D[224][j]] = 57344 + j;
          d[57344 + j] = D[224][j];
        }
      D[225] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9145\u9147\u9148\u9151\u9153\u9154\u9155\u9156\u9158\u9159\u915B\u915C\u915F\u9160\u9166\u9167\u9168\u916B\u916D\u9173\u917A\u917B\u917C\u9180\u9181\u9182\u9183\u9184\u9186\u9188\u918A\u918E\u918F\u9193\u9194\u9195\u9196\u9197\u9198\u9199\u919C\u919D\u919E\u919F\u91A0\u91A1\u91A4\u91A5\u91A6\u91A7\u91A8\u91A9\u91AB\u91AC\u91B0\u91B1\u91B2\u91B3\u91B6\u91B7\u91B8\u91B9\u91BB\uFFFD\u91BC\u91BD\u91BE\u91BF\u91C0\u91C1\u91C2\u91C3\u91C4\u91C5\u91C6\u91C8\u91CB\u91D0\u91D2\u91D3\u91D4\u91D5\u91D6\u91D7\u91D8\u91D9\u91DA\u91DB\u91DD\u91DE\u91DF\u91E0\u91E1\u91E2\u91E3\u91E4\u91E5\u5E37\u5E44\u5E54\u5E5B\u5E5E\u5E61\u5C8C\u5C7A\u5C8D\u5C90\u5C96\u5C88\u5C98\u5C99\u5C91\u5C9A\u5C9C\u5CB5\u5CA2\u5CBD\u5CAC\u5CAB\u5CB1\u5CA3\u5CC1\u5CB7\u5CC4\u5CD2\u5CE4\u5CCB\u5CE5\u5D02\u5D03\u5D27\u5D26\u5D2E\u5D24\u5D1E\u5D06\u5D1B\u5D58\u5D3E\u5D34\u5D3D\u5D6C\u5D5B\u5D6F\u5D5D\u5D6B\u5D4B\u5D4A\u5D69\u5D74\u5D82\u5D99\u5D9D\u8C73\u5DB7\u5DC5\u5F73\u5F77\u5F82\u5F87\u5F89\u5F8C\u5F95\u5F99\u5F9C\u5FA8\u5FAD\u5FB5\u5FBC\u8862\u5F61\u72AD\u72B0\u72B4\u72B7\u72B8\u72C3\u72C1\u72CE\u72CD\u72D2\u72E8\u72EF\u72E9\u72F2\u72F4\u72F7\u7301\u72F3\u7303\u72FA\uFFFD".split("");
      for (j = 0; j != D[225].length; ++j)
        if (D[225][j].charCodeAt(0) !== 65533) {
          e[D[225][j]] = 57600 + j;
          d[57600 + j] = D[225][j];
        }
      D[226] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u91E6\u91E7\u91E8\u91E9\u91EA\u91EB\u91EC\u91ED\u91EE\u91EF\u91F0\u91F1\u91F2\u91F3\u91F4\u91F5\u91F6\u91F7\u91F8\u91F9\u91FA\u91FB\u91FC\u91FD\u91FE\u91FF\u9200\u9201\u9202\u9203\u9204\u9205\u9206\u9207\u9208\u9209\u920A\u920B\u920C\u920D\u920E\u920F\u9210\u9211\u9212\u9213\u9214\u9215\u9216\u9217\u9218\u9219\u921A\u921B\u921C\u921D\u921E\u921F\u9220\u9221\u9222\u9223\u9224\uFFFD\u9225\u9226\u9227\u9228\u9229\u922A\u922B\u922C\u922D\u922E\u922F\u9230\u9231\u9232\u9233\u9234\u9235\u9236\u9237\u9238\u9239\u923A\u923B\u923C\u923D\u923E\u923F\u9240\u9241\u9242\u9243\u9244\u9245\u72FB\u7317\u7313\u7321\u730A\u731E\u731D\u7315\u7322\u7339\u7325\u732C\u7338\u7331\u7350\u734D\u7357\u7360\u736C\u736F\u737E\u821B\u5925\u98E7\u5924\u5902\u9963\u9967\u9968\u9969\u996A\u996B\u996C\u9974\u9977\u997D\u9980\u9984\u9987\u998A\u998D\u9990\u9991\u9993\u9994\u9995\u5E80\u5E91\u5E8B\u5E96\u5EA5\u5EA0\u5EB9\u5EB5\u5EBE\u5EB3\u8D53\u5ED2\u5ED1\u5EDB\u5EE8\u5EEA\u81BA\u5FC4\u5FC9\u5FD6\u5FCF\u6003\u5FEE\u6004\u5FE1\u5FE4\u5FFE\u6005\u6006\u5FEA\u5FED\u5FF8\u6019\u6035\u6026\u601B\u600F\u600D\u6029\u602B\u600A\u603F\u6021\u6078\u6079\u607B\u607A\u6042\uFFFD".split("");
      for (j = 0; j != D[226].length; ++j)
        if (D[226][j].charCodeAt(0) !== 65533) {
          e[D[226][j]] = 57856 + j;
          d[57856 + j] = D[226][j];
        }
      D[227] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9246\u9247\u9248\u9249\u924A\u924B\u924C\u924D\u924E\u924F\u9250\u9251\u9252\u9253\u9254\u9255\u9256\u9257\u9258\u9259\u925A\u925B\u925C\u925D\u925E\u925F\u9260\u9261\u9262\u9263\u9264\u9265\u9266\u9267\u9268\u9269\u926A\u926B\u926C\u926D\u926E\u926F\u9270\u9271\u9272\u9273\u9275\u9276\u9277\u9278\u9279\u927A\u927B\u927C\u927D\u927E\u927F\u9280\u9281\u9282\u9283\u9284\u9285\uFFFD\u9286\u9287\u9288\u9289\u928A\u928B\u928C\u928D\u928F\u9290\u9291\u9292\u9293\u9294\u9295\u9296\u9297\u9298\u9299\u929A\u929B\u929C\u929D\u929E\u929F\u92A0\u92A1\u92A2\u92A3\u92A4\u92A5\u92A6\u92A7\u606A\u607D\u6096\u609A\u60AD\u609D\u6083\u6092\u608C\u609B\u60EC\u60BB\u60B1\u60DD\u60D8\u60C6\u60DA\u60B4\u6120\u6126\u6115\u6123\u60F4\u6100\u610E\u612B\u614A\u6175\u61AC\u6194\u61A7\u61B7\u61D4\u61F5\u5FDD\u96B3\u95E9\u95EB\u95F1\u95F3\u95F5\u95F6\u95FC\u95FE\u9603\u9604\u9606\u9608\u960A\u960B\u960C\u960D\u960F\u9612\u9615\u9616\u9617\u9619\u961A\u4E2C\u723F\u6215\u6C35\u6C54\u6C5C\u6C4A\u6CA3\u6C85\u6C90\u6C94\u6C8C\u6C68\u6C69\u6C74\u6C76\u6C86\u6CA9\u6CD0\u6CD4\u6CAD\u6CF7\u6CF8\u6CF1\u6CD7\u6CB2\u6CE0\u6CD6\u6CFA\u6CEB\u6CEE\u6CB1\u6CD3\u6CEF\u6CFE\uFFFD".split("");
      for (j = 0; j != D[227].length; ++j)
        if (D[227][j].charCodeAt(0) !== 65533) {
          e[D[227][j]] = 58112 + j;
          d[58112 + j] = D[227][j];
        }
      D[228] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u92A8\u92A9\u92AA\u92AB\u92AC\u92AD\u92AF\u92B0\u92B1\u92B2\u92B3\u92B4\u92B5\u92B6\u92B7\u92B8\u92B9\u92BA\u92BB\u92BC\u92BD\u92BE\u92BF\u92C0\u92C1\u92C2\u92C3\u92C4\u92C5\u92C6\u92C7\u92C9\u92CA\u92CB\u92CC\u92CD\u92CE\u92CF\u92D0\u92D1\u92D2\u92D3\u92D4\u92D5\u92D6\u92D7\u92D8\u92D9\u92DA\u92DB\u92DC\u92DD\u92DE\u92DF\u92E0\u92E1\u92E2\u92E3\u92E4\u92E5\u92E6\u92E7\u92E8\uFFFD\u92E9\u92EA\u92EB\u92EC\u92ED\u92EE\u92EF\u92F0\u92F1\u92F2\u92F3\u92F4\u92F5\u92F6\u92F7\u92F8\u92F9\u92FA\u92FB\u92FC\u92FD\u92FE\u92FF\u9300\u9301\u9302\u9303\u9304\u9305\u9306\u9307\u9308\u9309\u6D39\u6D27\u6D0C\u6D43\u6D48\u6D07\u6D04\u6D19\u6D0E\u6D2B\u6D4D\u6D2E\u6D35\u6D1A\u6D4F\u6D52\u6D54\u6D33\u6D91\u6D6F\u6D9E\u6DA0\u6D5E\u6D93\u6D94\u6D5C\u6D60\u6D7C\u6D63\u6E1A\u6DC7\u6DC5\u6DDE\u6E0E\u6DBF\u6DE0\u6E11\u6DE6\u6DDD\u6DD9\u6E16\u6DAB\u6E0C\u6DAE\u6E2B\u6E6E\u6E4E\u6E6B\u6EB2\u6E5F\u6E86\u6E53\u6E54\u6E32\u6E25\u6E44\u6EDF\u6EB1\u6E98\u6EE0\u6F2D\u6EE2\u6EA5\u6EA7\u6EBD\u6EBB\u6EB7\u6ED7\u6EB4\u6ECF\u6E8F\u6EC2\u6E9F\u6F62\u6F46\u6F47\u6F24\u6F15\u6EF9\u6F2F\u6F36\u6F4B\u6F74\u6F2A\u6F09\u6F29\u6F89\u6F8D\u6F8C\u6F78\u6F72\u6F7C\u6F7A\u6FD1\uFFFD".split("");
      for (j = 0; j != D[228].length; ++j)
        if (D[228][j].charCodeAt(0) !== 65533) {
          e[D[228][j]] = 58368 + j;
          d[58368 + j] = D[228][j];
        }
      D[229] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u930A\u930B\u930C\u930D\u930E\u930F\u9310\u9311\u9312\u9313\u9314\u9315\u9316\u9317\u9318\u9319\u931A\u931B\u931C\u931D\u931E\u931F\u9320\u9321\u9322\u9323\u9324\u9325\u9326\u9327\u9328\u9329\u932A\u932B\u932C\u932D\u932E\u932F\u9330\u9331\u9332\u9333\u9334\u9335\u9336\u9337\u9338\u9339\u933A\u933B\u933C\u933D\u933F\u9340\u9341\u9342\u9343\u9344\u9345\u9346\u9347\u9348\u9349\uFFFD\u934A\u934B\u934C\u934D\u934E\u934F\u9350\u9351\u9352\u9353\u9354\u9355\u9356\u9357\u9358\u9359\u935A\u935B\u935C\u935D\u935E\u935F\u9360\u9361\u9362\u9363\u9364\u9365\u9366\u9367\u9368\u9369\u936B\u6FC9\u6FA7\u6FB9\u6FB6\u6FC2\u6FE1\u6FEE\u6FDE\u6FE0\u6FEF\u701A\u7023\u701B\u7039\u7035\u704F\u705E\u5B80\u5B84\u5B95\u5B93\u5BA5\u5BB8\u752F\u9A9E\u6434\u5BE4\u5BEE\u8930\u5BF0\u8E47\u8B07\u8FB6\u8FD3\u8FD5\u8FE5\u8FEE\u8FE4\u8FE9\u8FE6\u8FF3\u8FE8\u9005\u9004\u900B\u9026\u9011\u900D\u9016\u9021\u9035\u9036\u902D\u902F\u9044\u9051\u9052\u9050\u9068\u9058\u9062\u905B\u66B9\u9074\u907D\u9082\u9088\u9083\u908B\u5F50\u5F57\u5F56\u5F58\u5C3B\u54AB\u5C50\u5C59\u5B71\u5C63\u5C66\u7FBC\u5F2A\u5F29\u5F2D\u8274\u5F3C\u9B3B\u5C6E\u5981\u5983\u598D\u59A9\u59AA\u59A3\uFFFD".split("");
      for (j = 0; j != D[229].length; ++j)
        if (D[229][j].charCodeAt(0) !== 65533) {
          e[D[229][j]] = 58624 + j;
          d[58624 + j] = D[229][j];
        }
      D[230] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u936C\u936D\u936E\u936F\u9370\u9371\u9372\u9373\u9374\u9375\u9376\u9377\u9378\u9379\u937A\u937B\u937C\u937D\u937E\u937F\u9380\u9381\u9382\u9383\u9384\u9385\u9386\u9387\u9388\u9389\u938A\u938B\u938C\u938D\u938E\u9390\u9391\u9392\u9393\u9394\u9395\u9396\u9397\u9398\u9399\u939A\u939B\u939C\u939D\u939E\u939F\u93A0\u93A1\u93A2\u93A3\u93A4\u93A5\u93A6\u93A7\u93A8\u93A9\u93AA\u93AB\uFFFD\u93AC\u93AD\u93AE\u93AF\u93B0\u93B1\u93B2\u93B3\u93B4\u93B5\u93B6\u93B7\u93B8\u93B9\u93BA\u93BB\u93BC\u93BD\u93BE\u93BF\u93C0\u93C1\u93C2\u93C3\u93C4\u93C5\u93C6\u93C7\u93C8\u93C9\u93CB\u93CC\u93CD\u5997\u59CA\u59AB\u599E\u59A4\u59D2\u59B2\u59AF\u59D7\u59BE\u5A05\u5A06\u59DD\u5A08\u59E3\u59D8\u59F9\u5A0C\u5A09\u5A32\u5A34\u5A11\u5A23\u5A13\u5A40\u5A67\u5A4A\u5A55\u5A3C\u5A62\u5A75\u80EC\u5AAA\u5A9B\u5A77\u5A7A\u5ABE\u5AEB\u5AB2\u5AD2\u5AD4\u5AB8\u5AE0\u5AE3\u5AF1\u5AD6\u5AE6\u5AD8\u5ADC\u5B09\u5B17\u5B16\u5B32\u5B37\u5B40\u5C15\u5C1C\u5B5A\u5B65\u5B73\u5B51\u5B53\u5B62\u9A75\u9A77\u9A78\u9A7A\u9A7F\u9A7D\u9A80\u9A81\u9A85\u9A88\u9A8A\u9A90\u9A92\u9A93\u9A96\u9A98\u9A9B\u9A9C\u9A9D\u9A9F\u9AA0\u9AA2\u9AA3\u9AA5\u9AA7\u7E9F\u7EA1\u7EA3\u7EA5\u7EA8\u7EA9\uFFFD".split("");
      for (j = 0; j != D[230].length; ++j)
        if (D[230][j].charCodeAt(0) !== 65533) {
          e[D[230][j]] = 58880 + j;
          d[58880 + j] = D[230][j];
        }
      D[231] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u93CE\u93CF\u93D0\u93D1\u93D2\u93D3\u93D4\u93D5\u93D7\u93D8\u93D9\u93DA\u93DB\u93DC\u93DD\u93DE\u93DF\u93E0\u93E1\u93E2\u93E3\u93E4\u93E5\u93E6\u93E7\u93E8\u93E9\u93EA\u93EB\u93EC\u93ED\u93EE\u93EF\u93F0\u93F1\u93F2\u93F3\u93F4\u93F5\u93F6\u93F7\u93F8\u93F9\u93FA\u93FB\u93FC\u93FD\u93FE\u93FF\u9400\u9401\u9402\u9403\u9404\u9405\u9406\u9407\u9408\u9409\u940A\u940B\u940C\u940D\uFFFD\u940E\u940F\u9410\u9411\u9412\u9413\u9414\u9415\u9416\u9417\u9418\u9419\u941A\u941B\u941C\u941D\u941E\u941F\u9420\u9421\u9422\u9423\u9424\u9425\u9426\u9427\u9428\u9429\u942A\u942B\u942C\u942D\u942E\u7EAD\u7EB0\u7EBE\u7EC0\u7EC1\u7EC2\u7EC9\u7ECB\u7ECC\u7ED0\u7ED4\u7ED7\u7EDB\u7EE0\u7EE1\u7EE8\u7EEB\u7EEE\u7EEF\u7EF1\u7EF2\u7F0D\u7EF6\u7EFA\u7EFB\u7EFE\u7F01\u7F02\u7F03\u7F07\u7F08\u7F0B\u7F0C\u7F0F\u7F11\u7F12\u7F17\u7F19\u7F1C\u7F1B\u7F1F\u7F21\u7F22\u7F23\u7F24\u7F25\u7F26\u7F27\u7F2A\u7F2B\u7F2C\u7F2D\u7F2F\u7F30\u7F31\u7F32\u7F33\u7F35\u5E7A\u757F\u5DDB\u753E\u9095\u738E\u7391\u73AE\u73A2\u739F\u73CF\u73C2\u73D1\u73B7\u73B3\u73C0\u73C9\u73C8\u73E5\u73D9\u987C\u740A\u73E9\u73E7\u73DE\u73BA\u73F2\u740F\u742A\u745B\u7426\u7425\u7428\u7430\u742E\u742C\uFFFD".split("");
      for (j = 0; j != D[231].length; ++j)
        if (D[231][j].charCodeAt(0) !== 65533) {
          e[D[231][j]] = 59136 + j;
          d[59136 + j] = D[231][j];
        }
      D[232] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u942F\u9430\u9431\u9432\u9433\u9434\u9435\u9436\u9437\u9438\u9439\u943A\u943B\u943C\u943D\u943F\u9440\u9441\u9442\u9443\u9444\u9445\u9446\u9447\u9448\u9449\u944A\u944B\u944C\u944D\u944E\u944F\u9450\u9451\u9452\u9453\u9454\u9455\u9456\u9457\u9458\u9459\u945A\u945B\u945C\u945D\u945E\u945F\u9460\u9461\u9462\u9463\u9464\u9465\u9466\u9467\u9468\u9469\u946A\u946C\u946D\u946E\u946F\uFFFD\u9470\u9471\u9472\u9473\u9474\u9475\u9476\u9477\u9478\u9479\u947A\u947B\u947C\u947D\u947E\u947F\u9480\u9481\u9482\u9483\u9484\u9491\u9496\u9498\u94C7\u94CF\u94D3\u94D4\u94DA\u94E6\u94FB\u951C\u9520\u741B\u741A\u7441\u745C\u7457\u7455\u7459\u7477\u746D\u747E\u749C\u748E\u7480\u7481\u7487\u748B\u749E\u74A8\u74A9\u7490\u74A7\u74D2\u74BA\u97EA\u97EB\u97EC\u674C\u6753\u675E\u6748\u6769\u67A5\u6787\u676A\u6773\u6798\u67A7\u6775\u67A8\u679E\u67AD\u678B\u6777\u677C\u67F0\u6809\u67D8\u680A\u67E9\u67B0\u680C\u67D9\u67B5\u67DA\u67B3\u67DD\u6800\u67C3\u67B8\u67E2\u680E\u67C1\u67FD\u6832\u6833\u6860\u6861\u684E\u6862\u6844\u6864\u6883\u681D\u6855\u6866\u6841\u6867\u6840\u683E\u684A\u6849\u6829\u68B5\u688F\u6874\u6877\u6893\u686B\u68C2\u696E\u68FC\u691F\u6920\u68F9\uFFFD".split("");
      for (j = 0; j != D[232].length; ++j)
        if (D[232][j].charCodeAt(0) !== 65533) {
          e[D[232][j]] = 59392 + j;
          d[59392 + j] = D[232][j];
        }
      D[233] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9527\u9533\u953D\u9543\u9548\u954B\u9555\u955A\u9560\u956E\u9574\u9575\u9577\u9578\u9579\u957A\u957B\u957C\u957D\u957E\u9580\u9581\u9582\u9583\u9584\u9585\u9586\u9587\u9588\u9589\u958A\u958B\u958C\u958D\u958E\u958F\u9590\u9591\u9592\u9593\u9594\u9595\u9596\u9597\u9598\u9599\u959A\u959B\u959C\u959D\u959E\u959F\u95A0\u95A1\u95A2\u95A3\u95A4\u95A5\u95A6\u95A7\u95A8\u95A9\u95AA\uFFFD\u95AB\u95AC\u95AD\u95AE\u95AF\u95B0\u95B1\u95B2\u95B3\u95B4\u95B5\u95B6\u95B7\u95B8\u95B9\u95BA\u95BB\u95BC\u95BD\u95BE\u95BF\u95C0\u95C1\u95C2\u95C3\u95C4\u95C5\u95C6\u95C7\u95C8\u95C9\u95CA\u95CB\u6924\u68F0\u690B\u6901\u6957\u68E3\u6910\u6971\u6939\u6960\u6942\u695D\u6984\u696B\u6980\u6998\u6978\u6934\u69CC\u6987\u6988\u69CE\u6989\u6966\u6963\u6979\u699B\u69A7\u69BB\u69AB\u69AD\u69D4\u69B1\u69C1\u69CA\u69DF\u6995\u69E0\u698D\u69FF\u6A2F\u69ED\u6A17\u6A18\u6A65\u69F2\u6A44\u6A3E\u6AA0\u6A50\u6A5B\u6A35\u6A8E\u6A79\u6A3D\u6A28\u6A58\u6A7C\u6A91\u6A90\u6AA9\u6A97\u6AAB\u7337\u7352\u6B81\u6B82\u6B87\u6B84\u6B92\u6B93\u6B8D\u6B9A\u6B9B\u6BA1\u6BAA\u8F6B\u8F6D\u8F71\u8F72\u8F73\u8F75\u8F76\u8F78\u8F77\u8F79\u8F7A\u8F7C\u8F7E\u8F81\u8F82\u8F84\u8F87\u8F8B\uFFFD".split("");
      for (j = 0; j != D[233].length; ++j)
        if (D[233][j].charCodeAt(0) !== 65533) {
          e[D[233][j]] = 59648 + j;
          d[59648 + j] = D[233][j];
        }
      D[234] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u95CC\u95CD\u95CE\u95CF\u95D0\u95D1\u95D2\u95D3\u95D4\u95D5\u95D6\u95D7\u95D8\u95D9\u95DA\u95DB\u95DC\u95DD\u95DE\u95DF\u95E0\u95E1\u95E2\u95E3\u95E4\u95E5\u95E6\u95E7\u95EC\u95FF\u9607\u9613\u9618\u961B\u961E\u9620\u9623\u9624\u9625\u9626\u9627\u9628\u9629\u962B\u962C\u962D\u962F\u9630\u9637\u9638\u9639\u963A\u963E\u9641\u9643\u964A\u964E\u964F\u9651\u9652\u9653\u9656\u9657\uFFFD\u9658\u9659\u965A\u965C\u965D\u965E\u9660\u9663\u9665\u9666\u966B\u966D\u966E\u966F\u9670\u9671\u9673\u9678\u9679\u967A\u967B\u967C\u967D\u967E\u967F\u9680\u9681\u9682\u9683\u9684\u9687\u9689\u968A\u8F8D\u8F8E\u8F8F\u8F98\u8F9A\u8ECE\u620B\u6217\u621B\u621F\u6222\u6221\u6225\u6224\u622C\u81E7\u74EF\u74F4\u74FF\u750F\u7511\u7513\u6534\u65EE\u65EF\u65F0\u660A\u6619\u6772\u6603\u6615\u6600\u7085\u66F7\u661D\u6634\u6631\u6636\u6635\u8006\u665F\u6654\u6641\u664F\u6656\u6661\u6657\u6677\u6684\u668C\u66A7\u669D\u66BE\u66DB\u66DC\u66E6\u66E9\u8D32\u8D33\u8D36\u8D3B\u8D3D\u8D40\u8D45\u8D46\u8D48\u8D49\u8D47\u8D4D\u8D55\u8D59\u89C7\u89CA\u89CB\u89CC\u89CE\u89CF\u89D0\u89D1\u726E\u729F\u725D\u7266\u726F\u727E\u727F\u7284\u728B\u728D\u728F\u7292\u6308\u6332\u63B0\uFFFD".split("");
      for (j = 0; j != D[234].length; ++j)
        if (D[234][j].charCodeAt(0) !== 65533) {
          e[D[234][j]] = 59904 + j;
          d[59904 + j] = D[234][j];
        }
      D[235] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u968C\u968E\u9691\u9692\u9693\u9695\u9696\u969A\u969B\u969D\u969E\u969F\u96A0\u96A1\u96A2\u96A3\u96A4\u96A5\u96A6\u96A8\u96A9\u96AA\u96AB\u96AC\u96AD\u96AE\u96AF\u96B1\u96B2\u96B4\u96B5\u96B7\u96B8\u96BA\u96BB\u96BF\u96C2\u96C3\u96C8\u96CA\u96CB\u96D0\u96D1\u96D3\u96D4\u96D6\u96D7\u96D8\u96D9\u96DA\u96DB\u96DC\u96DD\u96DE\u96DF\u96E1\u96E2\u96E3\u96E4\u96E5\u96E6\u96E7\u96EB\uFFFD\u96EC\u96ED\u96EE\u96F0\u96F1\u96F2\u96F4\u96F5\u96F8\u96FA\u96FB\u96FC\u96FD\u96FF\u9702\u9703\u9705\u970A\u970B\u970C\u9710\u9711\u9712\u9714\u9715\u9717\u9718\u9719\u971A\u971B\u971D\u971F\u9720\u643F\u64D8\u8004\u6BEA\u6BF3\u6BFD\u6BF5\u6BF9\u6C05\u6C07\u6C06\u6C0D\u6C15\u6C18\u6C19\u6C1A\u6C21\u6C29\u6C24\u6C2A\u6C32\u6535\u6555\u656B\u724D\u7252\u7256\u7230\u8662\u5216\u809F\u809C\u8093\u80BC\u670A\u80BD\u80B1\u80AB\u80AD\u80B4\u80B7\u80E7\u80E8\u80E9\u80EA\u80DB\u80C2\u80C4\u80D9\u80CD\u80D7\u6710\u80DD\u80EB\u80F1\u80F4\u80ED\u810D\u810E\u80F2\u80FC\u6715\u8112\u8C5A\u8136\u811E\u812C\u8118\u8132\u8148\u814C\u8153\u8174\u8159\u815A\u8171\u8160\u8169\u817C\u817D\u816D\u8167\u584D\u5AB5\u8188\u8182\u8191\u6ED5\u81A3\u81AA\u81CC\u6726\u81CA\u81BB\uFFFD".split("");
      for (j = 0; j != D[235].length; ++j)
        if (D[235][j].charCodeAt(0) !== 65533) {
          e[D[235][j]] = 60160 + j;
          d[60160 + j] = D[235][j];
        }
      D[236] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9721\u9722\u9723\u9724\u9725\u9726\u9727\u9728\u9729\u972B\u972C\u972E\u972F\u9731\u9733\u9734\u9735\u9736\u9737\u973A\u973B\u973C\u973D\u973F\u9740\u9741\u9742\u9743\u9744\u9745\u9746\u9747\u9748\u9749\u974A\u974B\u974C\u974D\u974E\u974F\u9750\u9751\u9754\u9755\u9757\u9758\u975A\u975C\u975D\u975F\u9763\u9764\u9766\u9767\u9768\u976A\u976B\u976C\u976D\u976E\u976F\u9770\u9771\uFFFD\u9772\u9775\u9777\u9778\u9779\u977A\u977B\u977D\u977E\u977F\u9780\u9781\u9782\u9783\u9784\u9786\u9787\u9788\u9789\u978A\u978C\u978E\u978F\u9790\u9793\u9795\u9796\u9797\u9799\u979A\u979B\u979C\u979D\u81C1\u81A6\u6B24\u6B37\u6B39\u6B43\u6B46\u6B59\u98D1\u98D2\u98D3\u98D5\u98D9\u98DA\u6BB3\u5F40\u6BC2\u89F3\u6590\u9F51\u6593\u65BC\u65C6\u65C4\u65C3\u65CC\u65CE\u65D2\u65D6\u7080\u709C\u7096\u709D\u70BB\u70C0\u70B7\u70AB\u70B1\u70E8\u70CA\u7110\u7113\u7116\u712F\u7131\u7173\u715C\u7168\u7145\u7172\u714A\u7178\u717A\u7198\u71B3\u71B5\u71A8\u71A0\u71E0\u71D4\u71E7\u71F9\u721D\u7228\u706C\u7118\u7166\u71B9\u623E\u623D\u6243\u6248\u6249\u793B\u7940\u7946\u7949\u795B\u795C\u7953\u795A\u7962\u7957\u7960\u796F\u7967\u797A\u7985\u798A\u799A\u79A7\u79B3\u5FD1\u5FD0\uFFFD".split("");
      for (j = 0; j != D[236].length; ++j)
        if (D[236][j].charCodeAt(0) !== 65533) {
          e[D[236][j]] = 60416 + j;
          d[60416 + j] = D[236][j];
        }
      D[237] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u979E\u979F\u97A1\u97A2\u97A4\u97A5\u97A6\u97A7\u97A8\u97A9\u97AA\u97AC\u97AE\u97B0\u97B1\u97B3\u97B5\u97B6\u97B7\u97B8\u97B9\u97BA\u97BB\u97BC\u97BD\u97BE\u97BF\u97C0\u97C1\u97C2\u97C3\u97C4\u97C5\u97C6\u97C7\u97C8\u97C9\u97CA\u97CB\u97CC\u97CD\u97CE\u97CF\u97D0\u97D1\u97D2\u97D3\u97D4\u97D5\u97D6\u97D7\u97D8\u97D9\u97DA\u97DB\u97DC\u97DD\u97DE\u97DF\u97E0\u97E1\u97E2\u97E3\uFFFD\u97E4\u97E5\u97E8\u97EE\u97EF\u97F0\u97F1\u97F2\u97F4\u97F7\u97F8\u97F9\u97FA\u97FB\u97FC\u97FD\u97FE\u97FF\u9800\u9801\u9802\u9803\u9804\u9805\u9806\u9807\u9808\u9809\u980A\u980B\u980C\u980D\u980E\u603C\u605D\u605A\u6067\u6041\u6059\u6063\u60AB\u6106\u610D\u615D\u61A9\u619D\u61CB\u61D1\u6206\u8080\u807F\u6C93\u6CF6\u6DFC\u77F6\u77F8\u7800\u7809\u7817\u7818\u7811\u65AB\u782D\u781C\u781D\u7839\u783A\u783B\u781F\u783C\u7825\u782C\u7823\u7829\u784E\u786D\u7856\u7857\u7826\u7850\u7847\u784C\u786A\u789B\u7893\u789A\u7887\u789C\u78A1\u78A3\u78B2\u78B9\u78A5\u78D4\u78D9\u78C9\u78EC\u78F2\u7905\u78F4\u7913\u7924\u791E\u7934\u9F9B\u9EF9\u9EFB\u9EFC\u76F1\u7704\u770D\u76F9\u7707\u7708\u771A\u7722\u7719\u772D\u7726\u7735\u7738\u7750\u7751\u7747\u7743\u775A\u7768\uFFFD".split("");
      for (j = 0; j != D[237].length; ++j)
        if (D[237][j].charCodeAt(0) !== 65533) {
          e[D[237][j]] = 60672 + j;
          d[60672 + j] = D[237][j];
        }
      D[238] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u980F\u9810\u9811\u9812\u9813\u9814\u9815\u9816\u9817\u9818\u9819\u981A\u981B\u981C\u981D\u981E\u981F\u9820\u9821\u9822\u9823\u9824\u9825\u9826\u9827\u9828\u9829\u982A\u982B\u982C\u982D\u982E\u982F\u9830\u9831\u9832\u9833\u9834\u9835\u9836\u9837\u9838\u9839\u983A\u983B\u983C\u983D\u983E\u983F\u9840\u9841\u9842\u9843\u9844\u9845\u9846\u9847\u9848\u9849\u984A\u984B\u984C\u984D\uFFFD\u984E\u984F\u9850\u9851\u9852\u9853\u9854\u9855\u9856\u9857\u9858\u9859\u985A\u985B\u985C\u985D\u985E\u985F\u9860\u9861\u9862\u9863\u9864\u9865\u9866\u9867\u9868\u9869\u986A\u986B\u986C\u986D\u986E\u7762\u7765\u777F\u778D\u777D\u7780\u778C\u7791\u779F\u77A0\u77B0\u77B5\u77BD\u753A\u7540\u754E\u754B\u7548\u755B\u7572\u7579\u7583\u7F58\u7F61\u7F5F\u8A48\u7F68\u7F74\u7F71\u7F79\u7F81\u7F7E\u76CD\u76E5\u8832\u9485\u9486\u9487\u948B\u948A\u948C\u948D\u948F\u9490\u9494\u9497\u9495\u949A\u949B\u949C\u94A3\u94A4\u94AB\u94AA\u94AD\u94AC\u94AF\u94B0\u94B2\u94B4\u94B6\u94B7\u94B8\u94B9\u94BA\u94BC\u94BD\u94BF\u94C4\u94C8\u94C9\u94CA\u94CB\u94CC\u94CD\u94CE\u94D0\u94D1\u94D2\u94D5\u94D6\u94D7\u94D9\u94D8\u94DB\u94DE\u94DF\u94E0\u94E2\u94E4\u94E5\u94E7\u94E8\u94EA\uFFFD".split("");
      for (j = 0; j != D[238].length; ++j)
        if (D[238][j].charCodeAt(0) !== 65533) {
          e[D[238][j]] = 60928 + j;
          d[60928 + j] = D[238][j];
        }
      D[239] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u986F\u9870\u9871\u9872\u9873\u9874\u988B\u988E\u9892\u9895\u9899\u98A3\u98A8\u98A9\u98AA\u98AB\u98AC\u98AD\u98AE\u98AF\u98B0\u98B1\u98B2\u98B3\u98B4\u98B5\u98B6\u98B7\u98B8\u98B9\u98BA\u98BB\u98BC\u98BD\u98BE\u98BF\u98C0\u98C1\u98C2\u98C3\u98C4\u98C5\u98C6\u98C7\u98C8\u98C9\u98CA\u98CB\u98CC\u98CD\u98CF\u98D0\u98D4\u98D6\u98D7\u98DB\u98DC\u98DD\u98E0\u98E1\u98E2\u98E3\u98E4\uFFFD\u98E5\u98E6\u98E9\u98EA\u98EB\u98EC\u98ED\u98EE\u98EF\u98F0\u98F1\u98F2\u98F3\u98F4\u98F5\u98F6\u98F7\u98F8\u98F9\u98FA\u98FB\u98FC\u98FD\u98FE\u98FF\u9900\u9901\u9902\u9903\u9904\u9905\u9906\u9907\u94E9\u94EB\u94EE\u94EF\u94F3\u94F4\u94F5\u94F7\u94F9\u94FC\u94FD\u94FF\u9503\u9502\u9506\u9507\u9509\u950A\u950D\u950E\u950F\u9512\u9513\u9514\u9515\u9516\u9518\u951B\u951D\u951E\u951F\u9522\u952A\u952B\u9529\u952C\u9531\u9532\u9534\u9536\u9537\u9538\u953C\u953E\u953F\u9542\u9535\u9544\u9545\u9546\u9549\u954C\u954E\u954F\u9552\u9553\u9554\u9556\u9557\u9558\u9559\u955B\u955E\u955F\u955D\u9561\u9562\u9564\u9565\u9566\u9567\u9568\u9569\u956A\u956B\u956C\u956F\u9571\u9572\u9573\u953A\u77E7\u77EC\u96C9\u79D5\u79ED\u79E3\u79EB\u7A06\u5D47\u7A03\u7A02\u7A1E\u7A14\uFFFD".split("");
      for (j = 0; j != D[239].length; ++j)
        if (D[239][j].charCodeAt(0) !== 65533) {
          e[D[239][j]] = 61184 + j;
          d[61184 + j] = D[239][j];
        }
      D[240] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9908\u9909\u990A\u990B\u990C\u990E\u990F\u9911\u9912\u9913\u9914\u9915\u9916\u9917\u9918\u9919\u991A\u991B\u991C\u991D\u991E\u991F\u9920\u9921\u9922\u9923\u9924\u9925\u9926\u9927\u9928\u9929\u992A\u992B\u992C\u992D\u992F\u9930\u9931\u9932\u9933\u9934\u9935\u9936\u9937\u9938\u9939\u993A\u993B\u993C\u993D\u993E\u993F\u9940\u9941\u9942\u9943\u9944\u9945\u9946\u9947\u9948\u9949\uFFFD\u994A\u994B\u994C\u994D\u994E\u994F\u9950\u9951\u9952\u9953\u9956\u9957\u9958\u9959\u995A\u995B\u995C\u995D\u995E\u995F\u9960\u9961\u9962\u9964\u9966\u9973\u9978\u9979\u997B\u997E\u9982\u9983\u9989\u7A39\u7A37\u7A51\u9ECF\u99A5\u7A70\u7688\u768E\u7693\u7699\u76A4\u74DE\u74E0\u752C\u9E20\u9E22\u9E28\u9E29\u9E2A\u9E2B\u9E2C\u9E32\u9E31\u9E36\u9E38\u9E37\u9E39\u9E3A\u9E3E\u9E41\u9E42\u9E44\u9E46\u9E47\u9E48\u9E49\u9E4B\u9E4C\u9E4E\u9E51\u9E55\u9E57\u9E5A\u9E5B\u9E5C\u9E5E\u9E63\u9E66\u9E67\u9E68\u9E69\u9E6A\u9E6B\u9E6C\u9E71\u9E6D\u9E73\u7592\u7594\u7596\u75A0\u759D\u75AC\u75A3\u75B3\u75B4\u75B8\u75C4\u75B1\u75B0\u75C3\u75C2\u75D6\u75CD\u75E3\u75E8\u75E6\u75E4\u75EB\u75E7\u7603\u75F1\u75FC\u75FF\u7610\u7600\u7605\u760C\u7617\u760A\u7625\u7618\u7615\u7619\uFFFD".split("");
      for (j = 0; j != D[240].length; ++j)
        if (D[240][j].charCodeAt(0) !== 65533) {
          e[D[240][j]] = 61440 + j;
          d[61440 + j] = D[240][j];
        }
      D[241] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u998C\u998E\u999A\u999B\u999C\u999D\u999E\u999F\u99A0\u99A1\u99A2\u99A3\u99A4\u99A6\u99A7\u99A9\u99AA\u99AB\u99AC\u99AD\u99AE\u99AF\u99B0\u99B1\u99B2\u99B3\u99B4\u99B5\u99B6\u99B7\u99B8\u99B9\u99BA\u99BB\u99BC\u99BD\u99BE\u99BF\u99C0\u99C1\u99C2\u99C3\u99C4\u99C5\u99C6\u99C7\u99C8\u99C9\u99CA\u99CB\u99CC\u99CD\u99CE\u99CF\u99D0\u99D1\u99D2\u99D3\u99D4\u99D5\u99D6\u99D7\u99D8\uFFFD\u99D9\u99DA\u99DB\u99DC\u99DD\u99DE\u99DF\u99E0\u99E1\u99E2\u99E3\u99E4\u99E5\u99E6\u99E7\u99E8\u99E9\u99EA\u99EB\u99EC\u99ED\u99EE\u99EF\u99F0\u99F1\u99F2\u99F3\u99F4\u99F5\u99F6\u99F7\u99F8\u99F9\u761B\u763C\u7622\u7620\u7640\u762D\u7630\u763F\u7635\u7643\u763E\u7633\u764D\u765E\u7654\u765C\u7656\u766B\u766F\u7FCA\u7AE6\u7A78\u7A79\u7A80\u7A86\u7A88\u7A95\u7AA6\u7AA0\u7AAC\u7AA8\u7AAD\u7AB3\u8864\u8869\u8872\u887D\u887F\u8882\u88A2\u88C6\u88B7\u88BC\u88C9\u88E2\u88CE\u88E3\u88E5\u88F1\u891A\u88FC\u88E8\u88FE\u88F0\u8921\u8919\u8913\u891B\u890A\u8934\u892B\u8936\u8941\u8966\u897B\u758B\u80E5\u76B2\u76B4\u77DC\u8012\u8014\u8016\u801C\u8020\u8022\u8025\u8026\u8027\u8029\u8028\u8031\u800B\u8035\u8043\u8046\u804D\u8052\u8069\u8071\u8983\u9878\u9880\u9883\uFFFD".split("");
      for (j = 0; j != D[241].length; ++j)
        if (D[241][j].charCodeAt(0) !== 65533) {
          e[D[241][j]] = 61696 + j;
          d[61696 + j] = D[241][j];
        }
      D[242] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u99FA\u99FB\u99FC\u99FD\u99FE\u99FF\u9A00\u9A01\u9A02\u9A03\u9A04\u9A05\u9A06\u9A07\u9A08\u9A09\u9A0A\u9A0B\u9A0C\u9A0D\u9A0E\u9A0F\u9A10\u9A11\u9A12\u9A13\u9A14\u9A15\u9A16\u9A17\u9A18\u9A19\u9A1A\u9A1B\u9A1C\u9A1D\u9A1E\u9A1F\u9A20\u9A21\u9A22\u9A23\u9A24\u9A25\u9A26\u9A27\u9A28\u9A29\u9A2A\u9A2B\u9A2C\u9A2D\u9A2E\u9A2F\u9A30\u9A31\u9A32\u9A33\u9A34\u9A35\u9A36\u9A37\u9A38\uFFFD\u9A39\u9A3A\u9A3B\u9A3C\u9A3D\u9A3E\u9A3F\u9A40\u9A41\u9A42\u9A43\u9A44\u9A45\u9A46\u9A47\u9A48\u9A49\u9A4A\u9A4B\u9A4C\u9A4D\u9A4E\u9A4F\u9A50\u9A51\u9A52\u9A53\u9A54\u9A55\u9A56\u9A57\u9A58\u9A59\u9889\u988C\u988D\u988F\u9894\u989A\u989B\u989E\u989F\u98A1\u98A2\u98A5\u98A6\u864D\u8654\u866C\u866E\u867F\u867A\u867C\u867B\u86A8\u868D\u868B\u86AC\u869D\u86A7\u86A3\u86AA\u8693\u86A9\u86B6\u86C4\u86B5\u86CE\u86B0\u86BA\u86B1\u86AF\u86C9\u86CF\u86B4\u86E9\u86F1\u86F2\u86ED\u86F3\u86D0\u8713\u86DE\u86F4\u86DF\u86D8\u86D1\u8703\u8707\u86F8\u8708\u870A\u870D\u8709\u8723\u873B\u871E\u8725\u872E\u871A\u873E\u8748\u8734\u8731\u8729\u8737\u873F\u8782\u8722\u877D\u877E\u877B\u8760\u8770\u874C\u876E\u878B\u8753\u8763\u877C\u8764\u8759\u8765\u8793\u87AF\u87A8\u87D2\uFFFD".split("");
      for (j = 0; j != D[242].length; ++j)
        if (D[242][j].charCodeAt(0) !== 65533) {
          e[D[242][j]] = 61952 + j;
          d[61952 + j] = D[242][j];
        }
      D[243] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9A5A\u9A5B\u9A5C\u9A5D\u9A5E\u9A5F\u9A60\u9A61\u9A62\u9A63\u9A64\u9A65\u9A66\u9A67\u9A68\u9A69\u9A6A\u9A6B\u9A72\u9A83\u9A89\u9A8D\u9A8E\u9A94\u9A95\u9A99\u9AA6\u9AA9\u9AAA\u9AAB\u9AAC\u9AAD\u9AAE\u9AAF\u9AB2\u9AB3\u9AB4\u9AB5\u9AB9\u9ABB\u9ABD\u9ABE\u9ABF\u9AC3\u9AC4\u9AC6\u9AC7\u9AC8\u9AC9\u9ACA\u9ACD\u9ACE\u9ACF\u9AD0\u9AD2\u9AD4\u9AD5\u9AD6\u9AD7\u9AD9\u9ADA\u9ADB\u9ADC\uFFFD\u9ADD\u9ADE\u9AE0\u9AE2\u9AE3\u9AE4\u9AE5\u9AE7\u9AE8\u9AE9\u9AEA\u9AEC\u9AEE\u9AF0\u9AF1\u9AF2\u9AF3\u9AF4\u9AF5\u9AF6\u9AF7\u9AF8\u9AFA\u9AFC\u9AFD\u9AFE\u9AFF\u9B00\u9B01\u9B02\u9B04\u9B05\u9B06\u87C6\u8788\u8785\u87AD\u8797\u8783\u87AB\u87E5\u87AC\u87B5\u87B3\u87CB\u87D3\u87BD\u87D1\u87C0\u87CA\u87DB\u87EA\u87E0\u87EE\u8816\u8813\u87FE\u880A\u881B\u8821\u8839\u883C\u7F36\u7F42\u7F44\u7F45\u8210\u7AFA\u7AFD\u7B08\u7B03\u7B04\u7B15\u7B0A\u7B2B\u7B0F\u7B47\u7B38\u7B2A\u7B19\u7B2E\u7B31\u7B20\u7B25\u7B24\u7B33\u7B3E\u7B1E\u7B58\u7B5A\u7B45\u7B75\u7B4C\u7B5D\u7B60\u7B6E\u7B7B\u7B62\u7B72\u7B71\u7B90\u7BA6\u7BA7\u7BB8\u7BAC\u7B9D\u7BA8\u7B85\u7BAA\u7B9C\u7BA2\u7BAB\u7BB4\u7BD1\u7BC1\u7BCC\u7BDD\u7BDA\u7BE5\u7BE6\u7BEA\u7C0C\u7BFE\u7BFC\u7C0F\u7C16\u7C0B\uFFFD".split("");
      for (j = 0; j != D[243].length; ++j)
        if (D[243][j].charCodeAt(0) !== 65533) {
          e[D[243][j]] = 62208 + j;
          d[62208 + j] = D[243][j];
        }
      D[244] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9B07\u9B09\u9B0A\u9B0B\u9B0C\u9B0D\u9B0E\u9B10\u9B11\u9B12\u9B14\u9B15\u9B16\u9B17\u9B18\u9B19\u9B1A\u9B1B\u9B1C\u9B1D\u9B1E\u9B20\u9B21\u9B22\u9B24\u9B25\u9B26\u9B27\u9B28\u9B29\u9B2A\u9B2B\u9B2C\u9B2D\u9B2E\u9B30\u9B31\u9B33\u9B34\u9B35\u9B36\u9B37\u9B38\u9B39\u9B3A\u9B3D\u9B3E\u9B3F\u9B40\u9B46\u9B4A\u9B4B\u9B4C\u9B4E\u9B50\u9B52\u9B53\u9B55\u9B56\u9B57\u9B58\u9B59\u9B5A\uFFFD\u9B5B\u9B5C\u9B5D\u9B5E\u9B5F\u9B60\u9B61\u9B62\u9B63\u9B64\u9B65\u9B66\u9B67\u9B68\u9B69\u9B6A\u9B6B\u9B6C\u9B6D\u9B6E\u9B6F\u9B70\u9B71\u9B72\u9B73\u9B74\u9B75\u9B76\u9B77\u9B78\u9B79\u9B7A\u9B7B\u7C1F\u7C2A\u7C26\u7C38\u7C41\u7C40\u81FE\u8201\u8202\u8204\u81EC\u8844\u8221\u8222\u8223\u822D\u822F\u8228\u822B\u8238\u823B\u8233\u8234\u823E\u8244\u8249\u824B\u824F\u825A\u825F\u8268\u887E\u8885\u8888\u88D8\u88DF\u895E\u7F9D\u7F9F\u7FA7\u7FAF\u7FB0\u7FB2\u7C7C\u6549\u7C91\u7C9D\u7C9C\u7C9E\u7CA2\u7CB2\u7CBC\u7CBD\u7CC1\u7CC7\u7CCC\u7CCD\u7CC8\u7CC5\u7CD7\u7CE8\u826E\u66A8\u7FBF\u7FCE\u7FD5\u7FE5\u7FE1\u7FE6\u7FE9\u7FEE\u7FF3\u7CF8\u7D77\u7DA6\u7DAE\u7E47\u7E9B\u9EB8\u9EB4\u8D73\u8D84\u8D94\u8D91\u8DB1\u8D67\u8D6D\u8C47\u8C49\u914A\u9150\u914E\u914F\u9164\uFFFD".split("");
      for (j = 0; j != D[244].length; ++j)
        if (D[244][j].charCodeAt(0) !== 65533) {
          e[D[244][j]] = 62464 + j;
          d[62464 + j] = D[244][j];
        }
      D[245] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9B7C\u9B7D\u9B7E\u9B7F\u9B80\u9B81\u9B82\u9B83\u9B84\u9B85\u9B86\u9B87\u9B88\u9B89\u9B8A\u9B8B\u9B8C\u9B8D\u9B8E\u9B8F\u9B90\u9B91\u9B92\u9B93\u9B94\u9B95\u9B96\u9B97\u9B98\u9B99\u9B9A\u9B9B\u9B9C\u9B9D\u9B9E\u9B9F\u9BA0\u9BA1\u9BA2\u9BA3\u9BA4\u9BA5\u9BA6\u9BA7\u9BA8\u9BA9\u9BAA\u9BAB\u9BAC\u9BAD\u9BAE\u9BAF\u9BB0\u9BB1\u9BB2\u9BB3\u9BB4\u9BB5\u9BB6\u9BB7\u9BB8\u9BB9\u9BBA\uFFFD\u9BBB\u9BBC\u9BBD\u9BBE\u9BBF\u9BC0\u9BC1\u9BC2\u9BC3\u9BC4\u9BC5\u9BC6\u9BC7\u9BC8\u9BC9\u9BCA\u9BCB\u9BCC\u9BCD\u9BCE\u9BCF\u9BD0\u9BD1\u9BD2\u9BD3\u9BD4\u9BD5\u9BD6\u9BD7\u9BD8\u9BD9\u9BDA\u9BDB\u9162\u9161\u9170\u9169\u916F\u917D\u917E\u9172\u9174\u9179\u918C\u9185\u9190\u918D\u9191\u91A2\u91A3\u91AA\u91AD\u91AE\u91AF\u91B5\u91B4\u91BA\u8C55\u9E7E\u8DB8\u8DEB\u8E05\u8E59\u8E69\u8DB5\u8DBF\u8DBC\u8DBA\u8DC4\u8DD6\u8DD7\u8DDA\u8DDE\u8DCE\u8DCF\u8DDB\u8DC6\u8DEC\u8DF7\u8DF8\u8DE3\u8DF9\u8DFB\u8DE4\u8E09\u8DFD\u8E14\u8E1D\u8E1F\u8E2C\u8E2E\u8E23\u8E2F\u8E3A\u8E40\u8E39\u8E35\u8E3D\u8E31\u8E49\u8E41\u8E42\u8E51\u8E52\u8E4A\u8E70\u8E76\u8E7C\u8E6F\u8E74\u8E85\u8E8F\u8E94\u8E90\u8E9C\u8E9E\u8C78\u8C82\u8C8A\u8C85\u8C98\u8C94\u659B\u89D6\u89DE\u89DA\u89DC\uFFFD".split("");
      for (j = 0; j != D[245].length; ++j)
        if (D[245][j].charCodeAt(0) !== 65533) {
          e[D[245][j]] = 62720 + j;
          d[62720 + j] = D[245][j];
        }
      D[246] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9BDC\u9BDD\u9BDE\u9BDF\u9BE0\u9BE1\u9BE2\u9BE3\u9BE4\u9BE5\u9BE6\u9BE7\u9BE8\u9BE9\u9BEA\u9BEB\u9BEC\u9BED\u9BEE\u9BEF\u9BF0\u9BF1\u9BF2\u9BF3\u9BF4\u9BF5\u9BF6\u9BF7\u9BF8\u9BF9\u9BFA\u9BFB\u9BFC\u9BFD\u9BFE\u9BFF\u9C00\u9C01\u9C02\u9C03\u9C04\u9C05\u9C06\u9C07\u9C08\u9C09\u9C0A\u9C0B\u9C0C\u9C0D\u9C0E\u9C0F\u9C10\u9C11\u9C12\u9C13\u9C14\u9C15\u9C16\u9C17\u9C18\u9C19\u9C1A\uFFFD\u9C1B\u9C1C\u9C1D\u9C1E\u9C1F\u9C20\u9C21\u9C22\u9C23\u9C24\u9C25\u9C26\u9C27\u9C28\u9C29\u9C2A\u9C2B\u9C2C\u9C2D\u9C2E\u9C2F\u9C30\u9C31\u9C32\u9C33\u9C34\u9C35\u9C36\u9C37\u9C38\u9C39\u9C3A\u9C3B\u89E5\u89EB\u89EF\u8A3E\u8B26\u9753\u96E9\u96F3\u96EF\u9706\u9701\u9708\u970F\u970E\u972A\u972D\u9730\u973E\u9F80\u9F83\u9F85\u9F86\u9F87\u9F88\u9F89\u9F8A\u9F8C\u9EFE\u9F0B\u9F0D\u96B9\u96BC\u96BD\u96CE\u96D2\u77BF\u96E0\u928E\u92AE\u92C8\u933E\u936A\u93CA\u938F\u943E\u946B\u9C7F\u9C82\u9C85\u9C86\u9C87\u9C88\u7A23\u9C8B\u9C8E\u9C90\u9C91\u9C92\u9C94\u9C95\u9C9A\u9C9B\u9C9E\u9C9F\u9CA0\u9CA1\u9CA2\u9CA3\u9CA5\u9CA6\u9CA7\u9CA8\u9CA9\u9CAB\u9CAD\u9CAE\u9CB0\u9CB1\u9CB2\u9CB3\u9CB4\u9CB5\u9CB6\u9CB7\u9CBA\u9CBB\u9CBC\u9CBD\u9CC4\u9CC5\u9CC6\u9CC7\u9CCA\u9CCB\uFFFD".split("");
      for (j = 0; j != D[246].length; ++j)
        if (D[246][j].charCodeAt(0) !== 65533) {
          e[D[246][j]] = 62976 + j;
          d[62976 + j] = D[246][j];
        }
      D[247] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9C3C\u9C3D\u9C3E\u9C3F\u9C40\u9C41\u9C42\u9C43\u9C44\u9C45\u9C46\u9C47\u9C48\u9C49\u9C4A\u9C4B\u9C4C\u9C4D\u9C4E\u9C4F\u9C50\u9C51\u9C52\u9C53\u9C54\u9C55\u9C56\u9C57\u9C58\u9C59\u9C5A\u9C5B\u9C5C\u9C5D\u9C5E\u9C5F\u9C60\u9C61\u9C62\u9C63\u9C64\u9C65\u9C66\u9C67\u9C68\u9C69\u9C6A\u9C6B\u9C6C\u9C6D\u9C6E\u9C6F\u9C70\u9C71\u9C72\u9C73\u9C74\u9C75\u9C76\u9C77\u9C78\u9C79\u9C7A\uFFFD\u9C7B\u9C7D\u9C7E\u9C80\u9C83\u9C84\u9C89\u9C8A\u9C8C\u9C8F\u9C93\u9C96\u9C97\u9C98\u9C99\u9C9D\u9CAA\u9CAC\u9CAF\u9CB9\u9CBE\u9CBF\u9CC0\u9CC1\u9CC2\u9CC8\u9CC9\u9CD1\u9CD2\u9CDA\u9CDB\u9CE0\u9CE1\u9CCC\u9CCD\u9CCE\u9CCF\u9CD0\u9CD3\u9CD4\u9CD5\u9CD7\u9CD8\u9CD9\u9CDC\u9CDD\u9CDF\u9CE2\u977C\u9785\u9791\u9792\u9794\u97AF\u97AB\u97A3\u97B2\u97B4\u9AB1\u9AB0\u9AB7\u9E58\u9AB6\u9ABA\u9ABC\u9AC1\u9AC0\u9AC5\u9AC2\u9ACB\u9ACC\u9AD1\u9B45\u9B43\u9B47\u9B49\u9B48\u9B4D\u9B51\u98E8\u990D\u992E\u9955\u9954\u9ADF\u9AE1\u9AE6\u9AEF\u9AEB\u9AFB\u9AED\u9AF9\u9B08\u9B0F\u9B13\u9B1F\u9B23\u9EBD\u9EBE\u7E3B\u9E82\u9E87\u9E88\u9E8B\u9E92\u93D6\u9E9D\u9E9F\u9EDB\u9EDC\u9EDD\u9EE0\u9EDF\u9EE2\u9EE9\u9EE7\u9EE5\u9EEA\u9EEF\u9F22\u9F2C\u9F2F\u9F39\u9F37\u9F3D\u9F3E\u9F44\uFFFD".split("");
      for (j = 0; j != D[247].length; ++j)
        if (D[247][j].charCodeAt(0) !== 65533) {
          e[D[247][j]] = 63232 + j;
          d[63232 + j] = D[247][j];
        }
      D[248] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9CE3\u9CE4\u9CE5\u9CE6\u9CE7\u9CE8\u9CE9\u9CEA\u9CEB\u9CEC\u9CED\u9CEE\u9CEF\u9CF0\u9CF1\u9CF2\u9CF3\u9CF4\u9CF5\u9CF6\u9CF7\u9CF8\u9CF9\u9CFA\u9CFB\u9CFC\u9CFD\u9CFE\u9CFF\u9D00\u9D01\u9D02\u9D03\u9D04\u9D05\u9D06\u9D07\u9D08\u9D09\u9D0A\u9D0B\u9D0C\u9D0D\u9D0E\u9D0F\u9D10\u9D11\u9D12\u9D13\u9D14\u9D15\u9D16\u9D17\u9D18\u9D19\u9D1A\u9D1B\u9D1C\u9D1D\u9D1E\u9D1F\u9D20\u9D21\uFFFD\u9D22\u9D23\u9D24\u9D25\u9D26\u9D27\u9D28\u9D29\u9D2A\u9D2B\u9D2C\u9D2D\u9D2E\u9D2F\u9D30\u9D31\u9D32\u9D33\u9D34\u9D35\u9D36\u9D37\u9D38\u9D39\u9D3A\u9D3B\u9D3C\u9D3D\u9D3E\u9D3F\u9D40\u9D41\u9D42\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[248].length; ++j)
        if (D[248][j].charCodeAt(0) !== 65533) {
          e[D[248][j]] = 63488 + j;
          d[63488 + j] = D[248][j];
        }
      D[249] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9D43\u9D44\u9D45\u9D46\u9D47\u9D48\u9D49\u9D4A\u9D4B\u9D4C\u9D4D\u9D4E\u9D4F\u9D50\u9D51\u9D52\u9D53\u9D54\u9D55\u9D56\u9D57\u9D58\u9D59\u9D5A\u9D5B\u9D5C\u9D5D\u9D5E\u9D5F\u9D60\u9D61\u9D62\u9D63\u9D64\u9D65\u9D66\u9D67\u9D68\u9D69\u9D6A\u9D6B\u9D6C\u9D6D\u9D6E\u9D6F\u9D70\u9D71\u9D72\u9D73\u9D74\u9D75\u9D76\u9D77\u9D78\u9D79\u9D7A\u9D7B\u9D7C\u9D7D\u9D7E\u9D7F\u9D80\u9D81\uFFFD\u9D82\u9D83\u9D84\u9D85\u9D86\u9D87\u9D88\u9D89\u9D8A\u9D8B\u9D8C\u9D8D\u9D8E\u9D8F\u9D90\u9D91\u9D92\u9D93\u9D94\u9D95\u9D96\u9D97\u9D98\u9D99\u9D9A\u9D9B\u9D9C\u9D9D\u9D9E\u9D9F\u9DA0\u9DA1\u9DA2\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[249].length; ++j)
        if (D[249][j].charCodeAt(0) !== 65533) {
          e[D[249][j]] = 63744 + j;
          d[63744 + j] = D[249][j];
        }
      D[250] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9DA3\u9DA4\u9DA5\u9DA6\u9DA7\u9DA8\u9DA9\u9DAA\u9DAB\u9DAC\u9DAD\u9DAE\u9DAF\u9DB0\u9DB1\u9DB2\u9DB3\u9DB4\u9DB5\u9DB6\u9DB7\u9DB8\u9DB9\u9DBA\u9DBB\u9DBC\u9DBD\u9DBE\u9DBF\u9DC0\u9DC1\u9DC2\u9DC3\u9DC4\u9DC5\u9DC6\u9DC7\u9DC8\u9DC9\u9DCA\u9DCB\u9DCC\u9DCD\u9DCE\u9DCF\u9DD0\u9DD1\u9DD2\u9DD3\u9DD4\u9DD5\u9DD6\u9DD7\u9DD8\u9DD9\u9DDA\u9DDB\u9DDC\u9DDD\u9DDE\u9DDF\u9DE0\u9DE1\uFFFD\u9DE2\u9DE3\u9DE4\u9DE5\u9DE6\u9DE7\u9DE8\u9DE9\u9DEA\u9DEB\u9DEC\u9DED\u9DEE\u9DEF\u9DF0\u9DF1\u9DF2\u9DF3\u9DF4\u9DF5\u9DF6\u9DF7\u9DF8\u9DF9\u9DFA\u9DFB\u9DFC\u9DFD\u9DFE\u9DFF\u9E00\u9E01\u9E02\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[250].length; ++j)
        if (D[250][j].charCodeAt(0) !== 65533) {
          e[D[250][j]] = 64e3 + j;
          d[64e3 + j] = D[250][j];
        }
      D[251] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9E03\u9E04\u9E05\u9E06\u9E07\u9E08\u9E09\u9E0A\u9E0B\u9E0C\u9E0D\u9E0E\u9E0F\u9E10\u9E11\u9E12\u9E13\u9E14\u9E15\u9E16\u9E17\u9E18\u9E19\u9E1A\u9E1B\u9E1C\u9E1D\u9E1E\u9E24\u9E27\u9E2E\u9E30\u9E34\u9E3B\u9E3C\u9E40\u9E4D\u9E50\u9E52\u9E53\u9E54\u9E56\u9E59\u9E5D\u9E5F\u9E60\u9E61\u9E62\u9E65\u9E6E\u9E6F\u9E72\u9E74\u9E75\u9E76\u9E77\u9E78\u9E79\u9E7A\u9E7B\u9E7C\u9E7D\u9E80\uFFFD\u9E81\u9E83\u9E84\u9E85\u9E86\u9E89\u9E8A\u9E8C\u9E8D\u9E8E\u9E8F\u9E90\u9E91\u9E94\u9E95\u9E96\u9E97\u9E98\u9E99\u9E9A\u9E9B\u9E9C\u9E9E\u9EA0\u9EA1\u9EA2\u9EA3\u9EA4\u9EA5\u9EA7\u9EA8\u9EA9\u9EAA\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[251].length; ++j)
        if (D[251][j].charCodeAt(0) !== 65533) {
          e[D[251][j]] = 64256 + j;
          d[64256 + j] = D[251][j];
        }
      D[252] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9EAB\u9EAC\u9EAD\u9EAE\u9EAF\u9EB0\u9EB1\u9EB2\u9EB3\u9EB5\u9EB6\u9EB7\u9EB9\u9EBA\u9EBC\u9EBF\u9EC0\u9EC1\u9EC2\u9EC3\u9EC5\u9EC6\u9EC7\u9EC8\u9ECA\u9ECB\u9ECC\u9ED0\u9ED2\u9ED3\u9ED5\u9ED6\u9ED7\u9ED9\u9EDA\u9EDE\u9EE1\u9EE3\u9EE4\u9EE6\u9EE8\u9EEB\u9EEC\u9EED\u9EEE\u9EF0\u9EF1\u9EF2\u9EF3\u9EF4\u9EF5\u9EF6\u9EF7\u9EF8\u9EFA\u9EFD\u9EFF\u9F00\u9F01\u9F02\u9F03\u9F04\u9F05\uFFFD\u9F06\u9F07\u9F08\u9F09\u9F0A\u9F0C\u9F0F\u9F11\u9F12\u9F14\u9F15\u9F16\u9F18\u9F1A\u9F1B\u9F1C\u9F1D\u9F1E\u9F1F\u9F21\u9F23\u9F24\u9F25\u9F26\u9F27\u9F28\u9F29\u9F2A\u9F2B\u9F2D\u9F2E\u9F30\u9F31\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[252].length; ++j)
        if (D[252][j].charCodeAt(0) !== 65533) {
          e[D[252][j]] = 64512 + j;
          d[64512 + j] = D[252][j];
        }
      D[253] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9F32\u9F33\u9F34\u9F35\u9F36\u9F38\u9F3A\u9F3C\u9F3F\u9F40\u9F41\u9F42\u9F43\u9F45\u9F46\u9F47\u9F48\u9F49\u9F4A\u9F4B\u9F4C\u9F4D\u9F4E\u9F4F\u9F52\u9F53\u9F54\u9F55\u9F56\u9F57\u9F58\u9F59\u9F5A\u9F5B\u9F5C\u9F5D\u9F5E\u9F5F\u9F60\u9F61\u9F62\u9F63\u9F64\u9F65\u9F66\u9F67\u9F68\u9F69\u9F6A\u9F6B\u9F6C\u9F6D\u9F6E\u9F6F\u9F70\u9F71\u9F72\u9F73\u9F74\u9F75\u9F76\u9F77\u9F78\uFFFD\u9F79\u9F7A\u9F7B\u9F7C\u9F7D\u9F7E\u9F81\u9F82\u9F8D\u9F8E\u9F8F\u9F90\u9F91\u9F92\u9F93\u9F94\u9F95\u9F96\u9F97\u9F98\u9F9C\u9F9D\u9F9E\u9FA1\u9FA2\u9FA3\u9FA4\u9FA5\uF92C\uF979\uF995\uF9E7\uF9F1\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[253].length; ++j)
        if (D[253][j].charCodeAt(0) !== 65533) {
          e[D[253][j]] = 64768 + j;
          d[64768 + j] = D[253][j];
        }
      D[254] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFA0C\uFA0D\uFA0E\uFA0F\uFA11\uFA13\uFA14\uFA18\uFA1F\uFA20\uFA21\uFA23\uFA24\uFA27\uFA28\uFA29\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[254].length; ++j)
        if (D[254][j].charCodeAt(0) !== 65533) {
          e[D[254][j]] = 65024 + j;
          d[65024 + j] = D[254][j];
        }
      return { "enc": e, "dec": d };
    }();
    cptable2[949] = function() {
      var d = [], e = {}, D = [], j;
      D[0] = "\0\x07\b	\n\v\f\r !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[0].length; ++j)
        if (D[0][j].charCodeAt(0) !== 65533) {
          e[D[0][j]] = 0 + j;
          d[0 + j] = D[0][j];
        }
      D[129] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uAC02\uAC03\uAC05\uAC06\uAC0B\uAC0C\uAC0D\uAC0E\uAC0F\uAC18\uAC1E\uAC1F\uAC21\uAC22\uAC23\uAC25\uAC26\uAC27\uAC28\uAC29\uAC2A\uAC2B\uAC2E\uAC32\uAC33\uAC34\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uAC35\uAC36\uAC37\uAC3A\uAC3B\uAC3D\uAC3E\uAC3F\uAC41\uAC42\uAC43\uAC44\uAC45\uAC46\uAC47\uAC48\uAC49\uAC4A\uAC4C\uAC4E\uAC4F\uAC50\uAC51\uAC52\uAC53\uAC55\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uAC56\uAC57\uAC59\uAC5A\uAC5B\uAC5D\uAC5E\uAC5F\uAC60\uAC61\uAC62\uAC63\uAC64\uAC65\uAC66\uAC67\uAC68\uAC69\uAC6A\uAC6B\uAC6C\uAC6D\uAC6E\uAC6F\uAC72\uAC73\uAC75\uAC76\uAC79\uAC7B\uAC7C\uAC7D\uAC7E\uAC7F\uAC82\uAC87\uAC88\uAC8D\uAC8E\uAC8F\uAC91\uAC92\uAC93\uAC95\uAC96\uAC97\uAC98\uAC99\uAC9A\uAC9B\uAC9E\uACA2\uACA3\uACA4\uACA5\uACA6\uACA7\uACAB\uACAD\uACAE\uACB1\uACB2\uACB3\uACB4\uACB5\uACB6\uACB7\uACBA\uACBE\uACBF\uACC0\uACC2\uACC3\uACC5\uACC6\uACC7\uACC9\uACCA\uACCB\uACCD\uACCE\uACCF\uACD0\uACD1\uACD2\uACD3\uACD4\uACD6\uACD8\uACD9\uACDA\uACDB\uACDC\uACDD\uACDE\uACDF\uACE2\uACE3\uACE5\uACE6\uACE9\uACEB\uACED\uACEE\uACF2\uACF4\uACF7\uACF8\uACF9\uACFA\uACFB\uACFE\uACFF\uAD01\uAD02\uAD03\uAD05\uAD07\uAD08\uAD09\uAD0A\uAD0B\uAD0E\uAD10\uAD12\uAD13\uFFFD".split("");
      for (j = 0; j != D[129].length; ++j)
        if (D[129][j].charCodeAt(0) !== 65533) {
          e[D[129][j]] = 33024 + j;
          d[33024 + j] = D[129][j];
        }
      D[130] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uAD14\uAD15\uAD16\uAD17\uAD19\uAD1A\uAD1B\uAD1D\uAD1E\uAD1F\uAD21\uAD22\uAD23\uAD24\uAD25\uAD26\uAD27\uAD28\uAD2A\uAD2B\uAD2E\uAD2F\uAD30\uAD31\uAD32\uAD33\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uAD36\uAD37\uAD39\uAD3A\uAD3B\uAD3D\uAD3E\uAD3F\uAD40\uAD41\uAD42\uAD43\uAD46\uAD48\uAD4A\uAD4B\uAD4C\uAD4D\uAD4E\uAD4F\uAD51\uAD52\uAD53\uAD55\uAD56\uAD57\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uAD59\uAD5A\uAD5B\uAD5C\uAD5D\uAD5E\uAD5F\uAD60\uAD62\uAD64\uAD65\uAD66\uAD67\uAD68\uAD69\uAD6A\uAD6B\uAD6E\uAD6F\uAD71\uAD72\uAD77\uAD78\uAD79\uAD7A\uAD7E\uAD80\uAD83\uAD84\uAD85\uAD86\uAD87\uAD8A\uAD8B\uAD8D\uAD8E\uAD8F\uAD91\uAD92\uAD93\uAD94\uAD95\uAD96\uAD97\uAD98\uAD99\uAD9A\uAD9B\uAD9E\uAD9F\uADA0\uADA1\uADA2\uADA3\uADA5\uADA6\uADA7\uADA8\uADA9\uADAA\uADAB\uADAC\uADAD\uADAE\uADAF\uADB0\uADB1\uADB2\uADB3\uADB4\uADB5\uADB6\uADB8\uADB9\uADBA\uADBB\uADBC\uADBD\uADBE\uADBF\uADC2\uADC3\uADC5\uADC6\uADC7\uADC9\uADCA\uADCB\uADCC\uADCD\uADCE\uADCF\uADD2\uADD4\uADD5\uADD6\uADD7\uADD8\uADD9\uADDA\uADDB\uADDD\uADDE\uADDF\uADE1\uADE2\uADE3\uADE5\uADE6\uADE7\uADE8\uADE9\uADEA\uADEB\uADEC\uADED\uADEE\uADEF\uADF0\uADF1\uADF2\uADF3\uADF4\uADF5\uADF6\uADF7\uFFFD".split("");
      for (j = 0; j != D[130].length; ++j)
        if (D[130][j].charCodeAt(0) !== 65533) {
          e[D[130][j]] = 33280 + j;
          d[33280 + j] = D[130][j];
        }
      D[131] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uADFA\uADFB\uADFD\uADFE\uAE02\uAE03\uAE04\uAE05\uAE06\uAE07\uAE0A\uAE0C\uAE0E\uAE0F\uAE10\uAE11\uAE12\uAE13\uAE15\uAE16\uAE17\uAE18\uAE19\uAE1A\uAE1B\uAE1C\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uAE1D\uAE1E\uAE1F\uAE20\uAE21\uAE22\uAE23\uAE24\uAE25\uAE26\uAE27\uAE28\uAE29\uAE2A\uAE2B\uAE2C\uAE2D\uAE2E\uAE2F\uAE32\uAE33\uAE35\uAE36\uAE39\uAE3B\uAE3C\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uAE3D\uAE3E\uAE3F\uAE42\uAE44\uAE47\uAE48\uAE49\uAE4B\uAE4F\uAE51\uAE52\uAE53\uAE55\uAE57\uAE58\uAE59\uAE5A\uAE5B\uAE5E\uAE62\uAE63\uAE64\uAE66\uAE67\uAE6A\uAE6B\uAE6D\uAE6E\uAE6F\uAE71\uAE72\uAE73\uAE74\uAE75\uAE76\uAE77\uAE7A\uAE7E\uAE7F\uAE80\uAE81\uAE82\uAE83\uAE86\uAE87\uAE88\uAE89\uAE8A\uAE8B\uAE8D\uAE8E\uAE8F\uAE90\uAE91\uAE92\uAE93\uAE94\uAE95\uAE96\uAE97\uAE98\uAE99\uAE9A\uAE9B\uAE9C\uAE9D\uAE9E\uAE9F\uAEA0\uAEA1\uAEA2\uAEA3\uAEA4\uAEA5\uAEA6\uAEA7\uAEA8\uAEA9\uAEAA\uAEAB\uAEAC\uAEAD\uAEAE\uAEAF\uAEB0\uAEB1\uAEB2\uAEB3\uAEB4\uAEB5\uAEB6\uAEB7\uAEB8\uAEB9\uAEBA\uAEBB\uAEBF\uAEC1\uAEC2\uAEC3\uAEC5\uAEC6\uAEC7\uAEC8\uAEC9\uAECA\uAECB\uAECE\uAED2\uAED3\uAED4\uAED5\uAED6\uAED7\uAEDA\uAEDB\uAEDD\uAEDE\uAEDF\uAEE0\uAEE1\uAEE2\uAEE3\uAEE4\uAEE5\uFFFD".split("");
      for (j = 0; j != D[131].length; ++j)
        if (D[131][j].charCodeAt(0) !== 65533) {
          e[D[131][j]] = 33536 + j;
          d[33536 + j] = D[131][j];
        }
      D[132] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uAEE6\uAEE7\uAEE9\uAEEA\uAEEC\uAEEE\uAEEF\uAEF0\uAEF1\uAEF2\uAEF3\uAEF5\uAEF6\uAEF7\uAEF9\uAEFA\uAEFB\uAEFD\uAEFE\uAEFF\uAF00\uAF01\uAF02\uAF03\uAF04\uAF05\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uAF06\uAF09\uAF0A\uAF0B\uAF0C\uAF0E\uAF0F\uAF11\uAF12\uAF13\uAF14\uAF15\uAF16\uAF17\uAF18\uAF19\uAF1A\uAF1B\uAF1C\uAF1D\uAF1E\uAF1F\uAF20\uAF21\uAF22\uAF23\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uAF24\uAF25\uAF26\uAF27\uAF28\uAF29\uAF2A\uAF2B\uAF2E\uAF2F\uAF31\uAF33\uAF35\uAF36\uAF37\uAF38\uAF39\uAF3A\uAF3B\uAF3E\uAF40\uAF44\uAF45\uAF46\uAF47\uAF4A\uAF4B\uAF4C\uAF4D\uAF4E\uAF4F\uAF51\uAF52\uAF53\uAF54\uAF55\uAF56\uAF57\uAF58\uAF59\uAF5A\uAF5B\uAF5E\uAF5F\uAF60\uAF61\uAF62\uAF63\uAF66\uAF67\uAF68\uAF69\uAF6A\uAF6B\uAF6C\uAF6D\uAF6E\uAF6F\uAF70\uAF71\uAF72\uAF73\uAF74\uAF75\uAF76\uAF77\uAF78\uAF7A\uAF7B\uAF7C\uAF7D\uAF7E\uAF7F\uAF81\uAF82\uAF83\uAF85\uAF86\uAF87\uAF89\uAF8A\uAF8B\uAF8C\uAF8D\uAF8E\uAF8F\uAF92\uAF93\uAF94\uAF96\uAF97\uAF98\uAF99\uAF9A\uAF9B\uAF9D\uAF9E\uAF9F\uAFA0\uAFA1\uAFA2\uAFA3\uAFA4\uAFA5\uAFA6\uAFA7\uAFA8\uAFA9\uAFAA\uAFAB\uAFAC\uAFAD\uAFAE\uAFAF\uAFB0\uAFB1\uAFB2\uAFB3\uAFB4\uAFB5\uAFB6\uAFB7\uAFBA\uAFBB\uAFBD\uAFBE\uFFFD".split("");
      for (j = 0; j != D[132].length; ++j)
        if (D[132][j].charCodeAt(0) !== 65533) {
          e[D[132][j]] = 33792 + j;
          d[33792 + j] = D[132][j];
        }
      D[133] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uAFBF\uAFC1\uAFC2\uAFC3\uAFC4\uAFC5\uAFC6\uAFCA\uAFCC\uAFCF\uAFD0\uAFD1\uAFD2\uAFD3\uAFD5\uAFD6\uAFD7\uAFD8\uAFD9\uAFDA\uAFDB\uAFDD\uAFDE\uAFDF\uAFE0\uAFE1\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uAFE2\uAFE3\uAFE4\uAFE5\uAFE6\uAFE7\uAFEA\uAFEB\uAFEC\uAFED\uAFEE\uAFEF\uAFF2\uAFF3\uAFF5\uAFF6\uAFF7\uAFF9\uAFFA\uAFFB\uAFFC\uAFFD\uAFFE\uAFFF\uB002\uB003\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB005\uB006\uB007\uB008\uB009\uB00A\uB00B\uB00D\uB00E\uB00F\uB011\uB012\uB013\uB015\uB016\uB017\uB018\uB019\uB01A\uB01B\uB01E\uB01F\uB020\uB021\uB022\uB023\uB024\uB025\uB026\uB027\uB029\uB02A\uB02B\uB02C\uB02D\uB02E\uB02F\uB030\uB031\uB032\uB033\uB034\uB035\uB036\uB037\uB038\uB039\uB03A\uB03B\uB03C\uB03D\uB03E\uB03F\uB040\uB041\uB042\uB043\uB046\uB047\uB049\uB04B\uB04D\uB04F\uB050\uB051\uB052\uB056\uB058\uB05A\uB05B\uB05C\uB05E\uB05F\uB060\uB061\uB062\uB063\uB064\uB065\uB066\uB067\uB068\uB069\uB06A\uB06B\uB06C\uB06D\uB06E\uB06F\uB070\uB071\uB072\uB073\uB074\uB075\uB076\uB077\uB078\uB079\uB07A\uB07B\uB07E\uB07F\uB081\uB082\uB083\uB085\uB086\uB087\uB088\uB089\uB08A\uB08B\uB08E\uB090\uB092\uB093\uB094\uB095\uB096\uB097\uB09B\uB09D\uB09E\uB0A3\uB0A4\uFFFD".split("");
      for (j = 0; j != D[133].length; ++j)
        if (D[133][j].charCodeAt(0) !== 65533) {
          e[D[133][j]] = 34048 + j;
          d[34048 + j] = D[133][j];
        }
      D[134] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB0A5\uB0A6\uB0A7\uB0AA\uB0B0\uB0B2\uB0B6\uB0B7\uB0B9\uB0BA\uB0BB\uB0BD\uB0BE\uB0BF\uB0C0\uB0C1\uB0C2\uB0C3\uB0C6\uB0CA\uB0CB\uB0CC\uB0CD\uB0CE\uB0CF\uB0D2\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB0D3\uB0D5\uB0D6\uB0D7\uB0D9\uB0DA\uB0DB\uB0DC\uB0DD\uB0DE\uB0DF\uB0E1\uB0E2\uB0E3\uB0E4\uB0E6\uB0E7\uB0E8\uB0E9\uB0EA\uB0EB\uB0EC\uB0ED\uB0EE\uB0EF\uB0F0\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB0F1\uB0F2\uB0F3\uB0F4\uB0F5\uB0F6\uB0F7\uB0F8\uB0F9\uB0FA\uB0FB\uB0FC\uB0FD\uB0FE\uB0FF\uB100\uB101\uB102\uB103\uB104\uB105\uB106\uB107\uB10A\uB10D\uB10E\uB10F\uB111\uB114\uB115\uB116\uB117\uB11A\uB11E\uB11F\uB120\uB121\uB122\uB126\uB127\uB129\uB12A\uB12B\uB12D\uB12E\uB12F\uB130\uB131\uB132\uB133\uB136\uB13A\uB13B\uB13C\uB13D\uB13E\uB13F\uB142\uB143\uB145\uB146\uB147\uB149\uB14A\uB14B\uB14C\uB14D\uB14E\uB14F\uB152\uB153\uB156\uB157\uB159\uB15A\uB15B\uB15D\uB15E\uB15F\uB161\uB162\uB163\uB164\uB165\uB166\uB167\uB168\uB169\uB16A\uB16B\uB16C\uB16D\uB16E\uB16F\uB170\uB171\uB172\uB173\uB174\uB175\uB176\uB177\uB17A\uB17B\uB17D\uB17E\uB17F\uB181\uB183\uB184\uB185\uB186\uB187\uB18A\uB18C\uB18E\uB18F\uB190\uB191\uB195\uB196\uB197\uB199\uB19A\uB19B\uB19D\uFFFD".split("");
      for (j = 0; j != D[134].length; ++j)
        if (D[134][j].charCodeAt(0) !== 65533) {
          e[D[134][j]] = 34304 + j;
          d[34304 + j] = D[134][j];
        }
      D[135] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB19E\uB19F\uB1A0\uB1A1\uB1A2\uB1A3\uB1A4\uB1A5\uB1A6\uB1A7\uB1A9\uB1AA\uB1AB\uB1AC\uB1AD\uB1AE\uB1AF\uB1B0\uB1B1\uB1B2\uB1B3\uB1B4\uB1B5\uB1B6\uB1B7\uB1B8\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB1B9\uB1BA\uB1BB\uB1BC\uB1BD\uB1BE\uB1BF\uB1C0\uB1C1\uB1C2\uB1C3\uB1C4\uB1C5\uB1C6\uB1C7\uB1C8\uB1C9\uB1CA\uB1CB\uB1CD\uB1CE\uB1CF\uB1D1\uB1D2\uB1D3\uB1D5\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB1D6\uB1D7\uB1D8\uB1D9\uB1DA\uB1DB\uB1DE\uB1E0\uB1E1\uB1E2\uB1E3\uB1E4\uB1E5\uB1E6\uB1E7\uB1EA\uB1EB\uB1ED\uB1EE\uB1EF\uB1F1\uB1F2\uB1F3\uB1F4\uB1F5\uB1F6\uB1F7\uB1F8\uB1FA\uB1FC\uB1FE\uB1FF\uB200\uB201\uB202\uB203\uB206\uB207\uB209\uB20A\uB20D\uB20E\uB20F\uB210\uB211\uB212\uB213\uB216\uB218\uB21A\uB21B\uB21C\uB21D\uB21E\uB21F\uB221\uB222\uB223\uB224\uB225\uB226\uB227\uB228\uB229\uB22A\uB22B\uB22C\uB22D\uB22E\uB22F\uB230\uB231\uB232\uB233\uB235\uB236\uB237\uB238\uB239\uB23A\uB23B\uB23D\uB23E\uB23F\uB240\uB241\uB242\uB243\uB244\uB245\uB246\uB247\uB248\uB249\uB24A\uB24B\uB24C\uB24D\uB24E\uB24F\uB250\uB251\uB252\uB253\uB254\uB255\uB256\uB257\uB259\uB25A\uB25B\uB25D\uB25E\uB25F\uB261\uB262\uB263\uB264\uB265\uB266\uB267\uB26A\uB26B\uB26C\uB26D\uB26E\uFFFD".split("");
      for (j = 0; j != D[135].length; ++j)
        if (D[135][j].charCodeAt(0) !== 65533) {
          e[D[135][j]] = 34560 + j;
          d[34560 + j] = D[135][j];
        }
      D[136] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB26F\uB270\uB271\uB272\uB273\uB276\uB277\uB278\uB279\uB27A\uB27B\uB27D\uB27E\uB27F\uB280\uB281\uB282\uB283\uB286\uB287\uB288\uB28A\uB28B\uB28C\uB28D\uB28E\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB28F\uB292\uB293\uB295\uB296\uB297\uB29B\uB29C\uB29D\uB29E\uB29F\uB2A2\uB2A4\uB2A7\uB2A8\uB2A9\uB2AB\uB2AD\uB2AE\uB2AF\uB2B1\uB2B2\uB2B3\uB2B5\uB2B6\uB2B7\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB2B8\uB2B9\uB2BA\uB2BB\uB2BC\uB2BD\uB2BE\uB2BF\uB2C0\uB2C1\uB2C2\uB2C3\uB2C4\uB2C5\uB2C6\uB2C7\uB2CA\uB2CB\uB2CD\uB2CE\uB2CF\uB2D1\uB2D3\uB2D4\uB2D5\uB2D6\uB2D7\uB2DA\uB2DC\uB2DE\uB2DF\uB2E0\uB2E1\uB2E3\uB2E7\uB2E9\uB2EA\uB2F0\uB2F1\uB2F2\uB2F6\uB2FC\uB2FD\uB2FE\uB302\uB303\uB305\uB306\uB307\uB309\uB30A\uB30B\uB30C\uB30D\uB30E\uB30F\uB312\uB316\uB317\uB318\uB319\uB31A\uB31B\uB31D\uB31E\uB31F\uB320\uB321\uB322\uB323\uB324\uB325\uB326\uB327\uB328\uB329\uB32A\uB32B\uB32C\uB32D\uB32E\uB32F\uB330\uB331\uB332\uB333\uB334\uB335\uB336\uB337\uB338\uB339\uB33A\uB33B\uB33C\uB33D\uB33E\uB33F\uB340\uB341\uB342\uB343\uB344\uB345\uB346\uB347\uB348\uB349\uB34A\uB34B\uB34C\uB34D\uB34E\uB34F\uB350\uB351\uB352\uB353\uB357\uB359\uB35A\uB35D\uB360\uB361\uB362\uB363\uFFFD".split("");
      for (j = 0; j != D[136].length; ++j)
        if (D[136][j].charCodeAt(0) !== 65533) {
          e[D[136][j]] = 34816 + j;
          d[34816 + j] = D[136][j];
        }
      D[137] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB366\uB368\uB36A\uB36C\uB36D\uB36F\uB372\uB373\uB375\uB376\uB377\uB379\uB37A\uB37B\uB37C\uB37D\uB37E\uB37F\uB382\uB386\uB387\uB388\uB389\uB38A\uB38B\uB38D\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB38E\uB38F\uB391\uB392\uB393\uB395\uB396\uB397\uB398\uB399\uB39A\uB39B\uB39C\uB39D\uB39E\uB39F\uB3A2\uB3A3\uB3A4\uB3A5\uB3A6\uB3A7\uB3A9\uB3AA\uB3AB\uB3AD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB3AE\uB3AF\uB3B0\uB3B1\uB3B2\uB3B3\uB3B4\uB3B5\uB3B6\uB3B7\uB3B8\uB3B9\uB3BA\uB3BB\uB3BC\uB3BD\uB3BE\uB3BF\uB3C0\uB3C1\uB3C2\uB3C3\uB3C6\uB3C7\uB3C9\uB3CA\uB3CD\uB3CF\uB3D1\uB3D2\uB3D3\uB3D6\uB3D8\uB3DA\uB3DC\uB3DE\uB3DF\uB3E1\uB3E2\uB3E3\uB3E5\uB3E6\uB3E7\uB3E9\uB3EA\uB3EB\uB3EC\uB3ED\uB3EE\uB3EF\uB3F0\uB3F1\uB3F2\uB3F3\uB3F4\uB3F5\uB3F6\uB3F7\uB3F8\uB3F9\uB3FA\uB3FB\uB3FD\uB3FE\uB3FF\uB400\uB401\uB402\uB403\uB404\uB405\uB406\uB407\uB408\uB409\uB40A\uB40B\uB40C\uB40D\uB40E\uB40F\uB411\uB412\uB413\uB414\uB415\uB416\uB417\uB419\uB41A\uB41B\uB41D\uB41E\uB41F\uB421\uB422\uB423\uB424\uB425\uB426\uB427\uB42A\uB42C\uB42D\uB42E\uB42F\uB430\uB431\uB432\uB433\uB435\uB436\uB437\uB438\uB439\uB43A\uB43B\uB43C\uB43D\uB43E\uB43F\uB440\uB441\uB442\uB443\uB444\uFFFD".split("");
      for (j = 0; j != D[137].length; ++j)
        if (D[137][j].charCodeAt(0) !== 65533) {
          e[D[137][j]] = 35072 + j;
          d[35072 + j] = D[137][j];
        }
      D[138] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB445\uB446\uB447\uB448\uB449\uB44A\uB44B\uB44C\uB44D\uB44E\uB44F\uB452\uB453\uB455\uB456\uB457\uB459\uB45A\uB45B\uB45C\uB45D\uB45E\uB45F\uB462\uB464\uB466\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB467\uB468\uB469\uB46A\uB46B\uB46D\uB46E\uB46F\uB470\uB471\uB472\uB473\uB474\uB475\uB476\uB477\uB478\uB479\uB47A\uB47B\uB47C\uB47D\uB47E\uB47F\uB481\uB482\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB483\uB484\uB485\uB486\uB487\uB489\uB48A\uB48B\uB48C\uB48D\uB48E\uB48F\uB490\uB491\uB492\uB493\uB494\uB495\uB496\uB497\uB498\uB499\uB49A\uB49B\uB49C\uB49E\uB49F\uB4A0\uB4A1\uB4A2\uB4A3\uB4A5\uB4A6\uB4A7\uB4A9\uB4AA\uB4AB\uB4AD\uB4AE\uB4AF\uB4B0\uB4B1\uB4B2\uB4B3\uB4B4\uB4B6\uB4B8\uB4BA\uB4BB\uB4BC\uB4BD\uB4BE\uB4BF\uB4C1\uB4C2\uB4C3\uB4C5\uB4C6\uB4C7\uB4C9\uB4CA\uB4CB\uB4CC\uB4CD\uB4CE\uB4CF\uB4D1\uB4D2\uB4D3\uB4D4\uB4D6\uB4D7\uB4D8\uB4D9\uB4DA\uB4DB\uB4DE\uB4DF\uB4E1\uB4E2\uB4E5\uB4E7\uB4E8\uB4E9\uB4EA\uB4EB\uB4EE\uB4F0\uB4F2\uB4F3\uB4F4\uB4F5\uB4F6\uB4F7\uB4F9\uB4FA\uB4FB\uB4FC\uB4FD\uB4FE\uB4FF\uB500\uB501\uB502\uB503\uB504\uB505\uB506\uB507\uB508\uB509\uB50A\uB50B\uB50C\uB50D\uB50E\uB50F\uB510\uB511\uB512\uB513\uB516\uB517\uB519\uB51A\uB51D\uFFFD".split("");
      for (j = 0; j != D[138].length; ++j)
        if (D[138][j].charCodeAt(0) !== 65533) {
          e[D[138][j]] = 35328 + j;
          d[35328 + j] = D[138][j];
        }
      D[139] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB51E\uB51F\uB520\uB521\uB522\uB523\uB526\uB52B\uB52C\uB52D\uB52E\uB52F\uB532\uB533\uB535\uB536\uB537\uB539\uB53A\uB53B\uB53C\uB53D\uB53E\uB53F\uB542\uB546\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB547\uB548\uB549\uB54A\uB54E\uB54F\uB551\uB552\uB553\uB555\uB556\uB557\uB558\uB559\uB55A\uB55B\uB55E\uB562\uB563\uB564\uB565\uB566\uB567\uB568\uB569\uB56A\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB56B\uB56C\uB56D\uB56E\uB56F\uB570\uB571\uB572\uB573\uB574\uB575\uB576\uB577\uB578\uB579\uB57A\uB57B\uB57C\uB57D\uB57E\uB57F\uB580\uB581\uB582\uB583\uB584\uB585\uB586\uB587\uB588\uB589\uB58A\uB58B\uB58C\uB58D\uB58E\uB58F\uB590\uB591\uB592\uB593\uB594\uB595\uB596\uB597\uB598\uB599\uB59A\uB59B\uB59C\uB59D\uB59E\uB59F\uB5A2\uB5A3\uB5A5\uB5A6\uB5A7\uB5A9\uB5AC\uB5AD\uB5AE\uB5AF\uB5B2\uB5B6\uB5B7\uB5B8\uB5B9\uB5BA\uB5BE\uB5BF\uB5C1\uB5C2\uB5C3\uB5C5\uB5C6\uB5C7\uB5C8\uB5C9\uB5CA\uB5CB\uB5CE\uB5D2\uB5D3\uB5D4\uB5D5\uB5D6\uB5D7\uB5D9\uB5DA\uB5DB\uB5DC\uB5DD\uB5DE\uB5DF\uB5E0\uB5E1\uB5E2\uB5E3\uB5E4\uB5E5\uB5E6\uB5E7\uB5E8\uB5E9\uB5EA\uB5EB\uB5ED\uB5EE\uB5EF\uB5F0\uB5F1\uB5F2\uB5F3\uB5F4\uB5F5\uB5F6\uB5F7\uB5F8\uB5F9\uB5FA\uB5FB\uB5FC\uB5FD\uB5FE\uB5FF\uFFFD".split("");
      for (j = 0; j != D[139].length; ++j)
        if (D[139][j].charCodeAt(0) !== 65533) {
          e[D[139][j]] = 35584 + j;
          d[35584 + j] = D[139][j];
        }
      D[140] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB600\uB601\uB602\uB603\uB604\uB605\uB606\uB607\uB608\uB609\uB60A\uB60B\uB60C\uB60D\uB60E\uB60F\uB612\uB613\uB615\uB616\uB617\uB619\uB61A\uB61B\uB61C\uB61D\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB61E\uB61F\uB620\uB621\uB622\uB623\uB624\uB626\uB627\uB628\uB629\uB62A\uB62B\uB62D\uB62E\uB62F\uB630\uB631\uB632\uB633\uB635\uB636\uB637\uB638\uB639\uB63A\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB63B\uB63C\uB63D\uB63E\uB63F\uB640\uB641\uB642\uB643\uB644\uB645\uB646\uB647\uB649\uB64A\uB64B\uB64C\uB64D\uB64E\uB64F\uB650\uB651\uB652\uB653\uB654\uB655\uB656\uB657\uB658\uB659\uB65A\uB65B\uB65C\uB65D\uB65E\uB65F\uB660\uB661\uB662\uB663\uB665\uB666\uB667\uB669\uB66A\uB66B\uB66C\uB66D\uB66E\uB66F\uB670\uB671\uB672\uB673\uB674\uB675\uB676\uB677\uB678\uB679\uB67A\uB67B\uB67C\uB67D\uB67E\uB67F\uB680\uB681\uB682\uB683\uB684\uB685\uB686\uB687\uB688\uB689\uB68A\uB68B\uB68C\uB68D\uB68E\uB68F\uB690\uB691\uB692\uB693\uB694\uB695\uB696\uB697\uB698\uB699\uB69A\uB69B\uB69E\uB69F\uB6A1\uB6A2\uB6A3\uB6A5\uB6A6\uB6A7\uB6A8\uB6A9\uB6AA\uB6AD\uB6AE\uB6AF\uB6B0\uB6B2\uB6B3\uB6B4\uB6B5\uB6B6\uB6B7\uB6B8\uB6B9\uB6BA\uB6BB\uB6BC\uB6BD\uB6BE\uB6BF\uB6C0\uB6C1\uB6C2\uFFFD".split("");
      for (j = 0; j != D[140].length; ++j)
        if (D[140][j].charCodeAt(0) !== 65533) {
          e[D[140][j]] = 35840 + j;
          d[35840 + j] = D[140][j];
        }
      D[141] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB6C3\uB6C4\uB6C5\uB6C6\uB6C7\uB6C8\uB6C9\uB6CA\uB6CB\uB6CC\uB6CD\uB6CE\uB6CF\uB6D0\uB6D1\uB6D2\uB6D3\uB6D5\uB6D6\uB6D7\uB6D8\uB6D9\uB6DA\uB6DB\uB6DC\uB6DD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB6DE\uB6DF\uB6E0\uB6E1\uB6E2\uB6E3\uB6E4\uB6E5\uB6E6\uB6E7\uB6E8\uB6E9\uB6EA\uB6EB\uB6EC\uB6ED\uB6EE\uB6EF\uB6F1\uB6F2\uB6F3\uB6F5\uB6F6\uB6F7\uB6F9\uB6FA\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB6FB\uB6FC\uB6FD\uB6FE\uB6FF\uB702\uB703\uB704\uB706\uB707\uB708\uB709\uB70A\uB70B\uB70C\uB70D\uB70E\uB70F\uB710\uB711\uB712\uB713\uB714\uB715\uB716\uB717\uB718\uB719\uB71A\uB71B\uB71C\uB71D\uB71E\uB71F\uB720\uB721\uB722\uB723\uB724\uB725\uB726\uB727\uB72A\uB72B\uB72D\uB72E\uB731\uB732\uB733\uB734\uB735\uB736\uB737\uB73A\uB73C\uB73D\uB73E\uB73F\uB740\uB741\uB742\uB743\uB745\uB746\uB747\uB749\uB74A\uB74B\uB74D\uB74E\uB74F\uB750\uB751\uB752\uB753\uB756\uB757\uB758\uB759\uB75A\uB75B\uB75C\uB75D\uB75E\uB75F\uB761\uB762\uB763\uB765\uB766\uB767\uB769\uB76A\uB76B\uB76C\uB76D\uB76E\uB76F\uB772\uB774\uB776\uB777\uB778\uB779\uB77A\uB77B\uB77E\uB77F\uB781\uB782\uB783\uB785\uB786\uB787\uB788\uB789\uB78A\uB78B\uB78E\uB793\uB794\uB795\uB79A\uB79B\uB79D\uB79E\uFFFD".split("");
      for (j = 0; j != D[141].length; ++j)
        if (D[141][j].charCodeAt(0) !== 65533) {
          e[D[141][j]] = 36096 + j;
          d[36096 + j] = D[141][j];
        }
      D[142] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB79F\uB7A1\uB7A2\uB7A3\uB7A4\uB7A5\uB7A6\uB7A7\uB7AA\uB7AE\uB7AF\uB7B0\uB7B1\uB7B2\uB7B3\uB7B6\uB7B7\uB7B9\uB7BA\uB7BB\uB7BC\uB7BD\uB7BE\uB7BF\uB7C0\uB7C1\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB7C2\uB7C3\uB7C4\uB7C5\uB7C6\uB7C8\uB7CA\uB7CB\uB7CC\uB7CD\uB7CE\uB7CF\uB7D0\uB7D1\uB7D2\uB7D3\uB7D4\uB7D5\uB7D6\uB7D7\uB7D8\uB7D9\uB7DA\uB7DB\uB7DC\uB7DD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB7DE\uB7DF\uB7E0\uB7E1\uB7E2\uB7E3\uB7E4\uB7E5\uB7E6\uB7E7\uB7E8\uB7E9\uB7EA\uB7EB\uB7EE\uB7EF\uB7F1\uB7F2\uB7F3\uB7F5\uB7F6\uB7F7\uB7F8\uB7F9\uB7FA\uB7FB\uB7FE\uB802\uB803\uB804\uB805\uB806\uB80A\uB80B\uB80D\uB80E\uB80F\uB811\uB812\uB813\uB814\uB815\uB816\uB817\uB81A\uB81C\uB81E\uB81F\uB820\uB821\uB822\uB823\uB826\uB827\uB829\uB82A\uB82B\uB82D\uB82E\uB82F\uB830\uB831\uB832\uB833\uB836\uB83A\uB83B\uB83C\uB83D\uB83E\uB83F\uB841\uB842\uB843\uB845\uB846\uB847\uB848\uB849\uB84A\uB84B\uB84C\uB84D\uB84E\uB84F\uB850\uB852\uB854\uB855\uB856\uB857\uB858\uB859\uB85A\uB85B\uB85E\uB85F\uB861\uB862\uB863\uB865\uB866\uB867\uB868\uB869\uB86A\uB86B\uB86E\uB870\uB872\uB873\uB874\uB875\uB876\uB877\uB879\uB87A\uB87B\uB87D\uB87E\uB87F\uB880\uB881\uB882\uB883\uB884\uFFFD".split("");
      for (j = 0; j != D[142].length; ++j)
        if (D[142][j].charCodeAt(0) !== 65533) {
          e[D[142][j]] = 36352 + j;
          d[36352 + j] = D[142][j];
        }
      D[143] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB885\uB886\uB887\uB888\uB889\uB88A\uB88B\uB88C\uB88E\uB88F\uB890\uB891\uB892\uB893\uB894\uB895\uB896\uB897\uB898\uB899\uB89A\uB89B\uB89C\uB89D\uB89E\uB89F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB8A0\uB8A1\uB8A2\uB8A3\uB8A4\uB8A5\uB8A6\uB8A7\uB8A9\uB8AA\uB8AB\uB8AC\uB8AD\uB8AE\uB8AF\uB8B1\uB8B2\uB8B3\uB8B5\uB8B6\uB8B7\uB8B9\uB8BA\uB8BB\uB8BC\uB8BD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB8BE\uB8BF\uB8C2\uB8C4\uB8C6\uB8C7\uB8C8\uB8C9\uB8CA\uB8CB\uB8CD\uB8CE\uB8CF\uB8D1\uB8D2\uB8D3\uB8D5\uB8D6\uB8D7\uB8D8\uB8D9\uB8DA\uB8DB\uB8DC\uB8DE\uB8E0\uB8E2\uB8E3\uB8E4\uB8E5\uB8E6\uB8E7\uB8EA\uB8EB\uB8ED\uB8EE\uB8EF\uB8F1\uB8F2\uB8F3\uB8F4\uB8F5\uB8F6\uB8F7\uB8FA\uB8FC\uB8FE\uB8FF\uB900\uB901\uB902\uB903\uB905\uB906\uB907\uB908\uB909\uB90A\uB90B\uB90C\uB90D\uB90E\uB90F\uB910\uB911\uB912\uB913\uB914\uB915\uB916\uB917\uB919\uB91A\uB91B\uB91C\uB91D\uB91E\uB91F\uB921\uB922\uB923\uB924\uB925\uB926\uB927\uB928\uB929\uB92A\uB92B\uB92C\uB92D\uB92E\uB92F\uB930\uB931\uB932\uB933\uB934\uB935\uB936\uB937\uB938\uB939\uB93A\uB93B\uB93E\uB93F\uB941\uB942\uB943\uB945\uB946\uB947\uB948\uB949\uB94A\uB94B\uB94D\uB94E\uB950\uB952\uB953\uB954\uB955\uB956\uB957\uFFFD".split("");
      for (j = 0; j != D[143].length; ++j)
        if (D[143][j].charCodeAt(0) !== 65533) {
          e[D[143][j]] = 36608 + j;
          d[36608 + j] = D[143][j];
        }
      D[144] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB95A\uB95B\uB95D\uB95E\uB95F\uB961\uB962\uB963\uB964\uB965\uB966\uB967\uB96A\uB96C\uB96E\uB96F\uB970\uB971\uB972\uB973\uB976\uB977\uB979\uB97A\uB97B\uB97D\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB97E\uB97F\uB980\uB981\uB982\uB983\uB986\uB988\uB98B\uB98C\uB98F\uB990\uB991\uB992\uB993\uB994\uB995\uB996\uB997\uB998\uB999\uB99A\uB99B\uB99C\uB99D\uB99E\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB99F\uB9A0\uB9A1\uB9A2\uB9A3\uB9A4\uB9A5\uB9A6\uB9A7\uB9A8\uB9A9\uB9AA\uB9AB\uB9AE\uB9AF\uB9B1\uB9B2\uB9B3\uB9B5\uB9B6\uB9B7\uB9B8\uB9B9\uB9BA\uB9BB\uB9BE\uB9C0\uB9C2\uB9C3\uB9C4\uB9C5\uB9C6\uB9C7\uB9CA\uB9CB\uB9CD\uB9D3\uB9D4\uB9D5\uB9D6\uB9D7\uB9DA\uB9DC\uB9DF\uB9E0\uB9E2\uB9E6\uB9E7\uB9E9\uB9EA\uB9EB\uB9ED\uB9EE\uB9EF\uB9F0\uB9F1\uB9F2\uB9F3\uB9F6\uB9FB\uB9FC\uB9FD\uB9FE\uB9FF\uBA02\uBA03\uBA04\uBA05\uBA06\uBA07\uBA09\uBA0A\uBA0B\uBA0C\uBA0D\uBA0E\uBA0F\uBA10\uBA11\uBA12\uBA13\uBA14\uBA16\uBA17\uBA18\uBA19\uBA1A\uBA1B\uBA1C\uBA1D\uBA1E\uBA1F\uBA20\uBA21\uBA22\uBA23\uBA24\uBA25\uBA26\uBA27\uBA28\uBA29\uBA2A\uBA2B\uBA2C\uBA2D\uBA2E\uBA2F\uBA30\uBA31\uBA32\uBA33\uBA34\uBA35\uBA36\uBA37\uBA3A\uBA3B\uBA3D\uBA3E\uBA3F\uBA41\uBA43\uBA44\uBA45\uBA46\uFFFD".split("");
      for (j = 0; j != D[144].length; ++j)
        if (D[144][j].charCodeAt(0) !== 65533) {
          e[D[144][j]] = 36864 + j;
          d[36864 + j] = D[144][j];
        }
      D[145] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uBA47\uBA4A\uBA4C\uBA4F\uBA50\uBA51\uBA52\uBA56\uBA57\uBA59\uBA5A\uBA5B\uBA5D\uBA5E\uBA5F\uBA60\uBA61\uBA62\uBA63\uBA66\uBA6A\uBA6B\uBA6C\uBA6D\uBA6E\uBA6F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uBA72\uBA73\uBA75\uBA76\uBA77\uBA79\uBA7A\uBA7B\uBA7C\uBA7D\uBA7E\uBA7F\uBA80\uBA81\uBA82\uBA86\uBA88\uBA89\uBA8A\uBA8B\uBA8D\uBA8E\uBA8F\uBA90\uBA91\uBA92\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uBA93\uBA94\uBA95\uBA96\uBA97\uBA98\uBA99\uBA9A\uBA9B\uBA9C\uBA9D\uBA9E\uBA9F\uBAA0\uBAA1\uBAA2\uBAA3\uBAA4\uBAA5\uBAA6\uBAA7\uBAAA\uBAAD\uBAAE\uBAAF\uBAB1\uBAB3\uBAB4\uBAB5\uBAB6\uBAB7\uBABA\uBABC\uBABE\uBABF\uBAC0\uBAC1\uBAC2\uBAC3\uBAC5\uBAC6\uBAC7\uBAC9\uBACA\uBACB\uBACC\uBACD\uBACE\uBACF\uBAD0\uBAD1\uBAD2\uBAD3\uBAD4\uBAD5\uBAD6\uBAD7\uBADA\uBADB\uBADC\uBADD\uBADE\uBADF\uBAE0\uBAE1\uBAE2\uBAE3\uBAE4\uBAE5\uBAE6\uBAE7\uBAE8\uBAE9\uBAEA\uBAEB\uBAEC\uBAED\uBAEE\uBAEF\uBAF0\uBAF1\uBAF2\uBAF3\uBAF4\uBAF5\uBAF6\uBAF7\uBAF8\uBAF9\uBAFA\uBAFB\uBAFD\uBAFE\uBAFF\uBB01\uBB02\uBB03\uBB05\uBB06\uBB07\uBB08\uBB09\uBB0A\uBB0B\uBB0C\uBB0E\uBB10\uBB12\uBB13\uBB14\uBB15\uBB16\uBB17\uBB19\uBB1A\uBB1B\uBB1D\uBB1E\uBB1F\uBB21\uBB22\uBB23\uBB24\uBB25\uBB26\uBB27\uFFFD".split("");
      for (j = 0; j != D[145].length; ++j)
        if (D[145][j].charCodeAt(0) !== 65533) {
          e[D[145][j]] = 37120 + j;
          d[37120 + j] = D[145][j];
        }
      D[146] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uBB28\uBB2A\uBB2C\uBB2D\uBB2E\uBB2F\uBB30\uBB31\uBB32\uBB33\uBB37\uBB39\uBB3A\uBB3F\uBB40\uBB41\uBB42\uBB43\uBB46\uBB48\uBB4A\uBB4B\uBB4C\uBB4E\uBB51\uBB52\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uBB53\uBB55\uBB56\uBB57\uBB59\uBB5A\uBB5B\uBB5C\uBB5D\uBB5E\uBB5F\uBB60\uBB62\uBB64\uBB65\uBB66\uBB67\uBB68\uBB69\uBB6A\uBB6B\uBB6D\uBB6E\uBB6F\uBB70\uBB71\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uBB72\uBB73\uBB74\uBB75\uBB76\uBB77\uBB78\uBB79\uBB7A\uBB7B\uBB7C\uBB7D\uBB7E\uBB7F\uBB80\uBB81\uBB82\uBB83\uBB84\uBB85\uBB86\uBB87\uBB89\uBB8A\uBB8B\uBB8D\uBB8E\uBB8F\uBB91\uBB92\uBB93\uBB94\uBB95\uBB96\uBB97\uBB98\uBB99\uBB9A\uBB9B\uBB9C\uBB9D\uBB9E\uBB9F\uBBA0\uBBA1\uBBA2\uBBA3\uBBA5\uBBA6\uBBA7\uBBA9\uBBAA\uBBAB\uBBAD\uBBAE\uBBAF\uBBB0\uBBB1\uBBB2\uBBB3\uBBB5\uBBB6\uBBB8\uBBB9\uBBBA\uBBBB\uBBBC\uBBBD\uBBBE\uBBBF\uBBC1\uBBC2\uBBC3\uBBC5\uBBC6\uBBC7\uBBC9\uBBCA\uBBCB\uBBCC\uBBCD\uBBCE\uBBCF\uBBD1\uBBD2\uBBD4\uBBD5\uBBD6\uBBD7\uBBD8\uBBD9\uBBDA\uBBDB\uBBDC\uBBDD\uBBDE\uBBDF\uBBE0\uBBE1\uBBE2\uBBE3\uBBE4\uBBE5\uBBE6\uBBE7\uBBE8\uBBE9\uBBEA\uBBEB\uBBEC\uBBED\uBBEE\uBBEF\uBBF0\uBBF1\uBBF2\uBBF3\uBBF4\uBBF5\uBBF6\uBBF7\uBBFA\uBBFB\uBBFD\uBBFE\uBC01\uFFFD".split("");
      for (j = 0; j != D[146].length; ++j)
        if (D[146][j].charCodeAt(0) !== 65533) {
          e[D[146][j]] = 37376 + j;
          d[37376 + j] = D[146][j];
        }
      D[147] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uBC03\uBC04\uBC05\uBC06\uBC07\uBC0A\uBC0E\uBC10\uBC12\uBC13\uBC19\uBC1A\uBC20\uBC21\uBC22\uBC23\uBC26\uBC28\uBC2A\uBC2B\uBC2C\uBC2E\uBC2F\uBC32\uBC33\uBC35\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uBC36\uBC37\uBC39\uBC3A\uBC3B\uBC3C\uBC3D\uBC3E\uBC3F\uBC42\uBC46\uBC47\uBC48\uBC4A\uBC4B\uBC4E\uBC4F\uBC51\uBC52\uBC53\uBC54\uBC55\uBC56\uBC57\uBC58\uBC59\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uBC5A\uBC5B\uBC5C\uBC5E\uBC5F\uBC60\uBC61\uBC62\uBC63\uBC64\uBC65\uBC66\uBC67\uBC68\uBC69\uBC6A\uBC6B\uBC6C\uBC6D\uBC6E\uBC6F\uBC70\uBC71\uBC72\uBC73\uBC74\uBC75\uBC76\uBC77\uBC78\uBC79\uBC7A\uBC7B\uBC7C\uBC7D\uBC7E\uBC7F\uBC80\uBC81\uBC82\uBC83\uBC86\uBC87\uBC89\uBC8A\uBC8D\uBC8F\uBC90\uBC91\uBC92\uBC93\uBC96\uBC98\uBC9B\uBC9C\uBC9D\uBC9E\uBC9F\uBCA2\uBCA3\uBCA5\uBCA6\uBCA9\uBCAA\uBCAB\uBCAC\uBCAD\uBCAE\uBCAF\uBCB2\uBCB6\uBCB7\uBCB8\uBCB9\uBCBA\uBCBB\uBCBE\uBCBF\uBCC1\uBCC2\uBCC3\uBCC5\uBCC6\uBCC7\uBCC8\uBCC9\uBCCA\uBCCB\uBCCC\uBCCE\uBCD2\uBCD3\uBCD4\uBCD6\uBCD7\uBCD9\uBCDA\uBCDB\uBCDD\uBCDE\uBCDF\uBCE0\uBCE1\uBCE2\uBCE3\uBCE4\uBCE5\uBCE6\uBCE7\uBCE8\uBCE9\uBCEA\uBCEB\uBCEC\uBCED\uBCEE\uBCEF\uBCF0\uBCF1\uBCF2\uBCF3\uBCF7\uBCF9\uBCFA\uBCFB\uBCFD\uFFFD".split("");
      for (j = 0; j != D[147].length; ++j)
        if (D[147][j].charCodeAt(0) !== 65533) {
          e[D[147][j]] = 37632 + j;
          d[37632 + j] = D[147][j];
        }
      D[148] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uBCFE\uBCFF\uBD00\uBD01\uBD02\uBD03\uBD06\uBD08\uBD0A\uBD0B\uBD0C\uBD0D\uBD0E\uBD0F\uBD11\uBD12\uBD13\uBD15\uBD16\uBD17\uBD18\uBD19\uBD1A\uBD1B\uBD1C\uBD1D\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uBD1E\uBD1F\uBD20\uBD21\uBD22\uBD23\uBD25\uBD26\uBD27\uBD28\uBD29\uBD2A\uBD2B\uBD2D\uBD2E\uBD2F\uBD30\uBD31\uBD32\uBD33\uBD34\uBD35\uBD36\uBD37\uBD38\uBD39\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uBD3A\uBD3B\uBD3C\uBD3D\uBD3E\uBD3F\uBD41\uBD42\uBD43\uBD44\uBD45\uBD46\uBD47\uBD4A\uBD4B\uBD4D\uBD4E\uBD4F\uBD51\uBD52\uBD53\uBD54\uBD55\uBD56\uBD57\uBD5A\uBD5B\uBD5C\uBD5D\uBD5E\uBD5F\uBD60\uBD61\uBD62\uBD63\uBD65\uBD66\uBD67\uBD69\uBD6A\uBD6B\uBD6C\uBD6D\uBD6E\uBD6F\uBD70\uBD71\uBD72\uBD73\uBD74\uBD75\uBD76\uBD77\uBD78\uBD79\uBD7A\uBD7B\uBD7C\uBD7D\uBD7E\uBD7F\uBD82\uBD83\uBD85\uBD86\uBD8B\uBD8C\uBD8D\uBD8E\uBD8F\uBD92\uBD94\uBD96\uBD97\uBD98\uBD9B\uBD9D\uBD9E\uBD9F\uBDA0\uBDA1\uBDA2\uBDA3\uBDA5\uBDA6\uBDA7\uBDA8\uBDA9\uBDAA\uBDAB\uBDAC\uBDAD\uBDAE\uBDAF\uBDB1\uBDB2\uBDB3\uBDB4\uBDB5\uBDB6\uBDB7\uBDB9\uBDBA\uBDBB\uBDBC\uBDBD\uBDBE\uBDBF\uBDC0\uBDC1\uBDC2\uBDC3\uBDC4\uBDC5\uBDC6\uBDC7\uBDC8\uBDC9\uBDCA\uBDCB\uBDCC\uBDCD\uBDCE\uBDCF\uBDD0\uBDD1\uFFFD".split("");
      for (j = 0; j != D[148].length; ++j)
        if (D[148][j].charCodeAt(0) !== 65533) {
          e[D[148][j]] = 37888 + j;
          d[37888 + j] = D[148][j];
        }
      D[149] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uBDD2\uBDD3\uBDD6\uBDD7\uBDD9\uBDDA\uBDDB\uBDDD\uBDDE\uBDDF\uBDE0\uBDE1\uBDE2\uBDE3\uBDE4\uBDE5\uBDE6\uBDE7\uBDE8\uBDEA\uBDEB\uBDEC\uBDED\uBDEE\uBDEF\uBDF1\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uBDF2\uBDF3\uBDF5\uBDF6\uBDF7\uBDF9\uBDFA\uBDFB\uBDFC\uBDFD\uBDFE\uBDFF\uBE01\uBE02\uBE04\uBE06\uBE07\uBE08\uBE09\uBE0A\uBE0B\uBE0E\uBE0F\uBE11\uBE12\uBE13\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uBE15\uBE16\uBE17\uBE18\uBE19\uBE1A\uBE1B\uBE1E\uBE20\uBE21\uBE22\uBE23\uBE24\uBE25\uBE26\uBE27\uBE28\uBE29\uBE2A\uBE2B\uBE2C\uBE2D\uBE2E\uBE2F\uBE30\uBE31\uBE32\uBE33\uBE34\uBE35\uBE36\uBE37\uBE38\uBE39\uBE3A\uBE3B\uBE3C\uBE3D\uBE3E\uBE3F\uBE40\uBE41\uBE42\uBE43\uBE46\uBE47\uBE49\uBE4A\uBE4B\uBE4D\uBE4F\uBE50\uBE51\uBE52\uBE53\uBE56\uBE58\uBE5C\uBE5D\uBE5E\uBE5F\uBE62\uBE63\uBE65\uBE66\uBE67\uBE69\uBE6B\uBE6C\uBE6D\uBE6E\uBE6F\uBE72\uBE76\uBE77\uBE78\uBE79\uBE7A\uBE7E\uBE7F\uBE81\uBE82\uBE83\uBE85\uBE86\uBE87\uBE88\uBE89\uBE8A\uBE8B\uBE8E\uBE92\uBE93\uBE94\uBE95\uBE96\uBE97\uBE9A\uBE9B\uBE9C\uBE9D\uBE9E\uBE9F\uBEA0\uBEA1\uBEA2\uBEA3\uBEA4\uBEA5\uBEA6\uBEA7\uBEA9\uBEAA\uBEAB\uBEAC\uBEAD\uBEAE\uBEAF\uBEB0\uBEB1\uBEB2\uBEB3\uBEB4\uBEB5\uBEB6\uBEB7\uFFFD".split("");
      for (j = 0; j != D[149].length; ++j)
        if (D[149][j].charCodeAt(0) !== 65533) {
          e[D[149][j]] = 38144 + j;
          d[38144 + j] = D[149][j];
        }
      D[150] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uBEB8\uBEB9\uBEBA\uBEBB\uBEBC\uBEBD\uBEBE\uBEBF\uBEC0\uBEC1\uBEC2\uBEC3\uBEC4\uBEC5\uBEC6\uBEC7\uBEC8\uBEC9\uBECA\uBECB\uBECC\uBECD\uBECE\uBECF\uBED2\uBED3\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uBED5\uBED6\uBED9\uBEDA\uBEDB\uBEDC\uBEDD\uBEDE\uBEDF\uBEE1\uBEE2\uBEE6\uBEE7\uBEE8\uBEE9\uBEEA\uBEEB\uBEED\uBEEE\uBEEF\uBEF0\uBEF1\uBEF2\uBEF3\uBEF4\uBEF5\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uBEF6\uBEF7\uBEF8\uBEF9\uBEFA\uBEFB\uBEFC\uBEFD\uBEFE\uBEFF\uBF00\uBF02\uBF03\uBF04\uBF05\uBF06\uBF07\uBF0A\uBF0B\uBF0C\uBF0D\uBF0E\uBF0F\uBF10\uBF11\uBF12\uBF13\uBF14\uBF15\uBF16\uBF17\uBF1A\uBF1E\uBF1F\uBF20\uBF21\uBF22\uBF23\uBF24\uBF25\uBF26\uBF27\uBF28\uBF29\uBF2A\uBF2B\uBF2C\uBF2D\uBF2E\uBF2F\uBF30\uBF31\uBF32\uBF33\uBF34\uBF35\uBF36\uBF37\uBF38\uBF39\uBF3A\uBF3B\uBF3C\uBF3D\uBF3E\uBF3F\uBF42\uBF43\uBF45\uBF46\uBF47\uBF49\uBF4A\uBF4B\uBF4C\uBF4D\uBF4E\uBF4F\uBF52\uBF53\uBF54\uBF56\uBF57\uBF58\uBF59\uBF5A\uBF5B\uBF5C\uBF5D\uBF5E\uBF5F\uBF60\uBF61\uBF62\uBF63\uBF64\uBF65\uBF66\uBF67\uBF68\uBF69\uBF6A\uBF6B\uBF6C\uBF6D\uBF6E\uBF6F\uBF70\uBF71\uBF72\uBF73\uBF74\uBF75\uBF76\uBF77\uBF78\uBF79\uBF7A\uBF7B\uBF7C\uBF7D\uBF7E\uBF7F\uBF80\uBF81\uBF82\uFFFD".split("");
      for (j = 0; j != D[150].length; ++j)
        if (D[150][j].charCodeAt(0) !== 65533) {
          e[D[150][j]] = 38400 + j;
          d[38400 + j] = D[150][j];
        }
      D[151] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uBF83\uBF84\uBF85\uBF86\uBF87\uBF88\uBF89\uBF8A\uBF8B\uBF8C\uBF8D\uBF8E\uBF8F\uBF90\uBF91\uBF92\uBF93\uBF95\uBF96\uBF97\uBF98\uBF99\uBF9A\uBF9B\uBF9C\uBF9D\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uBF9E\uBF9F\uBFA0\uBFA1\uBFA2\uBFA3\uBFA4\uBFA5\uBFA6\uBFA7\uBFA8\uBFA9\uBFAA\uBFAB\uBFAC\uBFAD\uBFAE\uBFAF\uBFB1\uBFB2\uBFB3\uBFB4\uBFB5\uBFB6\uBFB7\uBFB8\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uBFB9\uBFBA\uBFBB\uBFBC\uBFBD\uBFBE\uBFBF\uBFC0\uBFC1\uBFC2\uBFC3\uBFC4\uBFC6\uBFC7\uBFC8\uBFC9\uBFCA\uBFCB\uBFCE\uBFCF\uBFD1\uBFD2\uBFD3\uBFD5\uBFD6\uBFD7\uBFD8\uBFD9\uBFDA\uBFDB\uBFDD\uBFDE\uBFE0\uBFE2\uBFE3\uBFE4\uBFE5\uBFE6\uBFE7\uBFE8\uBFE9\uBFEA\uBFEB\uBFEC\uBFED\uBFEE\uBFEF\uBFF0\uBFF1\uBFF2\uBFF3\uBFF4\uBFF5\uBFF6\uBFF7\uBFF8\uBFF9\uBFFA\uBFFB\uBFFC\uBFFD\uBFFE\uBFFF\uC000\uC001\uC002\uC003\uC004\uC005\uC006\uC007\uC008\uC009\uC00A\uC00B\uC00C\uC00D\uC00E\uC00F\uC010\uC011\uC012\uC013\uC014\uC015\uC016\uC017\uC018\uC019\uC01A\uC01B\uC01C\uC01D\uC01E\uC01F\uC020\uC021\uC022\uC023\uC024\uC025\uC026\uC027\uC028\uC029\uC02A\uC02B\uC02C\uC02D\uC02E\uC02F\uC030\uC031\uC032\uC033\uC034\uC035\uC036\uC037\uC038\uC039\uC03A\uC03B\uC03D\uC03E\uC03F\uFFFD".split("");
      for (j = 0; j != D[151].length; ++j)
        if (D[151][j].charCodeAt(0) !== 65533) {
          e[D[151][j]] = 38656 + j;
          d[38656 + j] = D[151][j];
        }
      D[152] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC040\uC041\uC042\uC043\uC044\uC045\uC046\uC047\uC048\uC049\uC04A\uC04B\uC04C\uC04D\uC04E\uC04F\uC050\uC052\uC053\uC054\uC055\uC056\uC057\uC059\uC05A\uC05B\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC05D\uC05E\uC05F\uC061\uC062\uC063\uC064\uC065\uC066\uC067\uC06A\uC06B\uC06C\uC06D\uC06E\uC06F\uC070\uC071\uC072\uC073\uC074\uC075\uC076\uC077\uC078\uC079\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC07A\uC07B\uC07C\uC07D\uC07E\uC07F\uC080\uC081\uC082\uC083\uC084\uC085\uC086\uC087\uC088\uC089\uC08A\uC08B\uC08C\uC08D\uC08E\uC08F\uC092\uC093\uC095\uC096\uC097\uC099\uC09A\uC09B\uC09C\uC09D\uC09E\uC09F\uC0A2\uC0A4\uC0A6\uC0A7\uC0A8\uC0A9\uC0AA\uC0AB\uC0AE\uC0B1\uC0B2\uC0B7\uC0B8\uC0B9\uC0BA\uC0BB\uC0BE\uC0C2\uC0C3\uC0C4\uC0C6\uC0C7\uC0CA\uC0CB\uC0CD\uC0CE\uC0CF\uC0D1\uC0D2\uC0D3\uC0D4\uC0D5\uC0D6\uC0D7\uC0DA\uC0DE\uC0DF\uC0E0\uC0E1\uC0E2\uC0E3\uC0E6\uC0E7\uC0E9\uC0EA\uC0EB\uC0ED\uC0EE\uC0EF\uC0F0\uC0F1\uC0F2\uC0F3\uC0F6\uC0F8\uC0FA\uC0FB\uC0FC\uC0FD\uC0FE\uC0FF\uC101\uC102\uC103\uC105\uC106\uC107\uC109\uC10A\uC10B\uC10C\uC10D\uC10E\uC10F\uC111\uC112\uC113\uC114\uC116\uC117\uC118\uC119\uC11A\uC11B\uC121\uC122\uC125\uC128\uC129\uC12A\uC12B\uC12E\uFFFD".split("");
      for (j = 0; j != D[152].length; ++j)
        if (D[152][j].charCodeAt(0) !== 65533) {
          e[D[152][j]] = 38912 + j;
          d[38912 + j] = D[152][j];
        }
      D[153] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC132\uC133\uC134\uC135\uC137\uC13A\uC13B\uC13D\uC13E\uC13F\uC141\uC142\uC143\uC144\uC145\uC146\uC147\uC14A\uC14E\uC14F\uC150\uC151\uC152\uC153\uC156\uC157\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC159\uC15A\uC15B\uC15D\uC15E\uC15F\uC160\uC161\uC162\uC163\uC166\uC16A\uC16B\uC16C\uC16D\uC16E\uC16F\uC171\uC172\uC173\uC175\uC176\uC177\uC179\uC17A\uC17B\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC17C\uC17D\uC17E\uC17F\uC180\uC181\uC182\uC183\uC184\uC186\uC187\uC188\uC189\uC18A\uC18B\uC18F\uC191\uC192\uC193\uC195\uC197\uC198\uC199\uC19A\uC19B\uC19E\uC1A0\uC1A2\uC1A3\uC1A4\uC1A6\uC1A7\uC1AA\uC1AB\uC1AD\uC1AE\uC1AF\uC1B1\uC1B2\uC1B3\uC1B4\uC1B5\uC1B6\uC1B7\uC1B8\uC1B9\uC1BA\uC1BB\uC1BC\uC1BE\uC1BF\uC1C0\uC1C1\uC1C2\uC1C3\uC1C5\uC1C6\uC1C7\uC1C9\uC1CA\uC1CB\uC1CD\uC1CE\uC1CF\uC1D0\uC1D1\uC1D2\uC1D3\uC1D5\uC1D6\uC1D9\uC1DA\uC1DB\uC1DC\uC1DD\uC1DE\uC1DF\uC1E1\uC1E2\uC1E3\uC1E5\uC1E6\uC1E7\uC1E9\uC1EA\uC1EB\uC1EC\uC1ED\uC1EE\uC1EF\uC1F2\uC1F4\uC1F5\uC1F6\uC1F7\uC1F8\uC1F9\uC1FA\uC1FB\uC1FE\uC1FF\uC201\uC202\uC203\uC205\uC206\uC207\uC208\uC209\uC20A\uC20B\uC20E\uC210\uC212\uC213\uC214\uC215\uC216\uC217\uC21A\uC21B\uC21D\uC21E\uC221\uC222\uC223\uFFFD".split("");
      for (j = 0; j != D[153].length; ++j)
        if (D[153][j].charCodeAt(0) !== 65533) {
          e[D[153][j]] = 39168 + j;
          d[39168 + j] = D[153][j];
        }
      D[154] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC224\uC225\uC226\uC227\uC22A\uC22C\uC22E\uC230\uC233\uC235\uC236\uC237\uC238\uC239\uC23A\uC23B\uC23C\uC23D\uC23E\uC23F\uC240\uC241\uC242\uC243\uC244\uC245\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC246\uC247\uC249\uC24A\uC24B\uC24C\uC24D\uC24E\uC24F\uC252\uC253\uC255\uC256\uC257\uC259\uC25A\uC25B\uC25C\uC25D\uC25E\uC25F\uC261\uC262\uC263\uC264\uC266\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC267\uC268\uC269\uC26A\uC26B\uC26E\uC26F\uC271\uC272\uC273\uC275\uC276\uC277\uC278\uC279\uC27A\uC27B\uC27E\uC280\uC282\uC283\uC284\uC285\uC286\uC287\uC28A\uC28B\uC28C\uC28D\uC28E\uC28F\uC291\uC292\uC293\uC294\uC295\uC296\uC297\uC299\uC29A\uC29C\uC29E\uC29F\uC2A0\uC2A1\uC2A2\uC2A3\uC2A6\uC2A7\uC2A9\uC2AA\uC2AB\uC2AE\uC2AF\uC2B0\uC2B1\uC2B2\uC2B3\uC2B6\uC2B8\uC2BA\uC2BB\uC2BC\uC2BD\uC2BE\uC2BF\uC2C0\uC2C1\uC2C2\uC2C3\uC2C4\uC2C5\uC2C6\uC2C7\uC2C8\uC2C9\uC2CA\uC2CB\uC2CC\uC2CD\uC2CE\uC2CF\uC2D0\uC2D1\uC2D2\uC2D3\uC2D4\uC2D5\uC2D6\uC2D7\uC2D8\uC2D9\uC2DA\uC2DB\uC2DE\uC2DF\uC2E1\uC2E2\uC2E5\uC2E6\uC2E7\uC2E8\uC2E9\uC2EA\uC2EE\uC2F0\uC2F2\uC2F3\uC2F4\uC2F5\uC2F7\uC2FA\uC2FD\uC2FE\uC2FF\uC301\uC302\uC303\uC304\uC305\uC306\uC307\uC30A\uC30B\uC30E\uC30F\uFFFD".split("");
      for (j = 0; j != D[154].length; ++j)
        if (D[154][j].charCodeAt(0) !== 65533) {
          e[D[154][j]] = 39424 + j;
          d[39424 + j] = D[154][j];
        }
      D[155] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC310\uC311\uC312\uC316\uC317\uC319\uC31A\uC31B\uC31D\uC31E\uC31F\uC320\uC321\uC322\uC323\uC326\uC327\uC32A\uC32B\uC32C\uC32D\uC32E\uC32F\uC330\uC331\uC332\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC333\uC334\uC335\uC336\uC337\uC338\uC339\uC33A\uC33B\uC33C\uC33D\uC33E\uC33F\uC340\uC341\uC342\uC343\uC344\uC346\uC347\uC348\uC349\uC34A\uC34B\uC34C\uC34D\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC34E\uC34F\uC350\uC351\uC352\uC353\uC354\uC355\uC356\uC357\uC358\uC359\uC35A\uC35B\uC35C\uC35D\uC35E\uC35F\uC360\uC361\uC362\uC363\uC364\uC365\uC366\uC367\uC36A\uC36B\uC36D\uC36E\uC36F\uC371\uC373\uC374\uC375\uC376\uC377\uC37A\uC37B\uC37E\uC37F\uC380\uC381\uC382\uC383\uC385\uC386\uC387\uC389\uC38A\uC38B\uC38D\uC38E\uC38F\uC390\uC391\uC392\uC393\uC394\uC395\uC396\uC397\uC398\uC399\uC39A\uC39B\uC39C\uC39D\uC39E\uC39F\uC3A0\uC3A1\uC3A2\uC3A3\uC3A4\uC3A5\uC3A6\uC3A7\uC3A8\uC3A9\uC3AA\uC3AB\uC3AC\uC3AD\uC3AE\uC3AF\uC3B0\uC3B1\uC3B2\uC3B3\uC3B4\uC3B5\uC3B6\uC3B7\uC3B8\uC3B9\uC3BA\uC3BB\uC3BC\uC3BD\uC3BE\uC3BF\uC3C1\uC3C2\uC3C3\uC3C4\uC3C5\uC3C6\uC3C7\uC3C8\uC3C9\uC3CA\uC3CB\uC3CC\uC3CD\uC3CE\uC3CF\uC3D0\uC3D1\uC3D2\uC3D3\uC3D4\uC3D5\uC3D6\uC3D7\uC3DA\uFFFD".split("");
      for (j = 0; j != D[155].length; ++j)
        if (D[155][j].charCodeAt(0) !== 65533) {
          e[D[155][j]] = 39680 + j;
          d[39680 + j] = D[155][j];
        }
      D[156] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC3DB\uC3DD\uC3DE\uC3E1\uC3E3\uC3E4\uC3E5\uC3E6\uC3E7\uC3EA\uC3EB\uC3EC\uC3EE\uC3EF\uC3F0\uC3F1\uC3F2\uC3F3\uC3F6\uC3F7\uC3F9\uC3FA\uC3FB\uC3FC\uC3FD\uC3FE\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC3FF\uC400\uC401\uC402\uC403\uC404\uC405\uC406\uC407\uC409\uC40A\uC40B\uC40C\uC40D\uC40E\uC40F\uC411\uC412\uC413\uC414\uC415\uC416\uC417\uC418\uC419\uC41A\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC41B\uC41C\uC41D\uC41E\uC41F\uC420\uC421\uC422\uC423\uC425\uC426\uC427\uC428\uC429\uC42A\uC42B\uC42D\uC42E\uC42F\uC431\uC432\uC433\uC435\uC436\uC437\uC438\uC439\uC43A\uC43B\uC43E\uC43F\uC440\uC441\uC442\uC443\uC444\uC445\uC446\uC447\uC449\uC44A\uC44B\uC44C\uC44D\uC44E\uC44F\uC450\uC451\uC452\uC453\uC454\uC455\uC456\uC457\uC458\uC459\uC45A\uC45B\uC45C\uC45D\uC45E\uC45F\uC460\uC461\uC462\uC463\uC466\uC467\uC469\uC46A\uC46B\uC46D\uC46E\uC46F\uC470\uC471\uC472\uC473\uC476\uC477\uC478\uC47A\uC47B\uC47C\uC47D\uC47E\uC47F\uC481\uC482\uC483\uC484\uC485\uC486\uC487\uC488\uC489\uC48A\uC48B\uC48C\uC48D\uC48E\uC48F\uC490\uC491\uC492\uC493\uC495\uC496\uC497\uC498\uC499\uC49A\uC49B\uC49D\uC49E\uC49F\uC4A0\uC4A1\uC4A2\uC4A3\uC4A4\uC4A5\uC4A6\uC4A7\uC4A8\uC4A9\uFFFD".split("");
      for (j = 0; j != D[156].length; ++j)
        if (D[156][j].charCodeAt(0) !== 65533) {
          e[D[156][j]] = 39936 + j;
          d[39936 + j] = D[156][j];
        }
      D[157] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC4AA\uC4AB\uC4AC\uC4AD\uC4AE\uC4AF\uC4B0\uC4B1\uC4B2\uC4B3\uC4B4\uC4B5\uC4B6\uC4B7\uC4B9\uC4BA\uC4BB\uC4BD\uC4BE\uC4BF\uC4C0\uC4C1\uC4C2\uC4C3\uC4C4\uC4C5\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC4C6\uC4C7\uC4C8\uC4C9\uC4CA\uC4CB\uC4CC\uC4CD\uC4CE\uC4CF\uC4D0\uC4D1\uC4D2\uC4D3\uC4D4\uC4D5\uC4D6\uC4D7\uC4D8\uC4D9\uC4DA\uC4DB\uC4DC\uC4DD\uC4DE\uC4DF\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC4E0\uC4E1\uC4E2\uC4E3\uC4E4\uC4E5\uC4E6\uC4E7\uC4E8\uC4EA\uC4EB\uC4EC\uC4ED\uC4EE\uC4EF\uC4F2\uC4F3\uC4F5\uC4F6\uC4F7\uC4F9\uC4FB\uC4FC\uC4FD\uC4FE\uC502\uC503\uC504\uC505\uC506\uC507\uC508\uC509\uC50A\uC50B\uC50D\uC50E\uC50F\uC511\uC512\uC513\uC515\uC516\uC517\uC518\uC519\uC51A\uC51B\uC51D\uC51E\uC51F\uC520\uC521\uC522\uC523\uC524\uC525\uC526\uC527\uC52A\uC52B\uC52D\uC52E\uC52F\uC531\uC532\uC533\uC534\uC535\uC536\uC537\uC53A\uC53C\uC53E\uC53F\uC540\uC541\uC542\uC543\uC546\uC547\uC54B\uC54F\uC550\uC551\uC552\uC556\uC55A\uC55B\uC55C\uC55F\uC562\uC563\uC565\uC566\uC567\uC569\uC56A\uC56B\uC56C\uC56D\uC56E\uC56F\uC572\uC576\uC577\uC578\uC579\uC57A\uC57B\uC57E\uC57F\uC581\uC582\uC583\uC585\uC586\uC588\uC589\uC58A\uC58B\uC58E\uC590\uC592\uC593\uC594\uFFFD".split("");
      for (j = 0; j != D[157].length; ++j)
        if (D[157][j].charCodeAt(0) !== 65533) {
          e[D[157][j]] = 40192 + j;
          d[40192 + j] = D[157][j];
        }
      D[158] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC596\uC599\uC59A\uC59B\uC59D\uC59E\uC59F\uC5A1\uC5A2\uC5A3\uC5A4\uC5A5\uC5A6\uC5A7\uC5A8\uC5AA\uC5AB\uC5AC\uC5AD\uC5AE\uC5AF\uC5B0\uC5B1\uC5B2\uC5B3\uC5B6\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC5B7\uC5BA\uC5BF\uC5C0\uC5C1\uC5C2\uC5C3\uC5CB\uC5CD\uC5CF\uC5D2\uC5D3\uC5D5\uC5D6\uC5D7\uC5D9\uC5DA\uC5DB\uC5DC\uC5DD\uC5DE\uC5DF\uC5E2\uC5E4\uC5E6\uC5E7\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC5E8\uC5E9\uC5EA\uC5EB\uC5EF\uC5F1\uC5F2\uC5F3\uC5F5\uC5F8\uC5F9\uC5FA\uC5FB\uC602\uC603\uC604\uC609\uC60A\uC60B\uC60D\uC60E\uC60F\uC611\uC612\uC613\uC614\uC615\uC616\uC617\uC61A\uC61D\uC61E\uC61F\uC620\uC621\uC622\uC623\uC626\uC627\uC629\uC62A\uC62B\uC62F\uC631\uC632\uC636\uC638\uC63A\uC63C\uC63D\uC63E\uC63F\uC642\uC643\uC645\uC646\uC647\uC649\uC64A\uC64B\uC64C\uC64D\uC64E\uC64F\uC652\uC656\uC657\uC658\uC659\uC65A\uC65B\uC65E\uC65F\uC661\uC662\uC663\uC664\uC665\uC666\uC667\uC668\uC669\uC66A\uC66B\uC66D\uC66E\uC670\uC672\uC673\uC674\uC675\uC676\uC677\uC67A\uC67B\uC67D\uC67E\uC67F\uC681\uC682\uC683\uC684\uC685\uC686\uC687\uC68A\uC68C\uC68E\uC68F\uC690\uC691\uC692\uC693\uC696\uC697\uC699\uC69A\uC69B\uC69D\uC69E\uC69F\uC6A0\uC6A1\uC6A2\uC6A3\uC6A6\uFFFD".split("");
      for (j = 0; j != D[158].length; ++j)
        if (D[158][j].charCodeAt(0) !== 65533) {
          e[D[158][j]] = 40448 + j;
          d[40448 + j] = D[158][j];
        }
      D[159] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC6A8\uC6AA\uC6AB\uC6AC\uC6AD\uC6AE\uC6AF\uC6B2\uC6B3\uC6B5\uC6B6\uC6B7\uC6BB\uC6BC\uC6BD\uC6BE\uC6BF\uC6C2\uC6C4\uC6C6\uC6C7\uC6C8\uC6C9\uC6CA\uC6CB\uC6CE\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC6CF\uC6D1\uC6D2\uC6D3\uC6D5\uC6D6\uC6D7\uC6D8\uC6D9\uC6DA\uC6DB\uC6DE\uC6DF\uC6E2\uC6E3\uC6E4\uC6E5\uC6E6\uC6E7\uC6EA\uC6EB\uC6ED\uC6EE\uC6EF\uC6F1\uC6F2\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC6F3\uC6F4\uC6F5\uC6F6\uC6F7\uC6FA\uC6FB\uC6FC\uC6FE\uC6FF\uC700\uC701\uC702\uC703\uC706\uC707\uC709\uC70A\uC70B\uC70D\uC70E\uC70F\uC710\uC711\uC712\uC713\uC716\uC718\uC71A\uC71B\uC71C\uC71D\uC71E\uC71F\uC722\uC723\uC725\uC726\uC727\uC729\uC72A\uC72B\uC72C\uC72D\uC72E\uC72F\uC732\uC734\uC736\uC738\uC739\uC73A\uC73B\uC73E\uC73F\uC741\uC742\uC743\uC745\uC746\uC747\uC748\uC749\uC74B\uC74E\uC750\uC759\uC75A\uC75B\uC75D\uC75E\uC75F\uC761\uC762\uC763\uC764\uC765\uC766\uC767\uC769\uC76A\uC76C\uC76D\uC76E\uC76F\uC770\uC771\uC772\uC773\uC776\uC777\uC779\uC77A\uC77B\uC77F\uC780\uC781\uC782\uC786\uC78B\uC78C\uC78D\uC78F\uC792\uC793\uC795\uC799\uC79B\uC79C\uC79D\uC79E\uC79F\uC7A2\uC7A7\uC7A8\uC7A9\uC7AA\uC7AB\uC7AE\uC7AF\uC7B1\uC7B2\uC7B3\uC7B5\uC7B6\uC7B7\uFFFD".split("");
      for (j = 0; j != D[159].length; ++j)
        if (D[159][j].charCodeAt(0) !== 65533) {
          e[D[159][j]] = 40704 + j;
          d[40704 + j] = D[159][j];
        }
      D[160] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC7B8\uC7B9\uC7BA\uC7BB\uC7BE\uC7C2\uC7C3\uC7C4\uC7C5\uC7C6\uC7C7\uC7CA\uC7CB\uC7CD\uC7CF\uC7D1\uC7D2\uC7D3\uC7D4\uC7D5\uC7D6\uC7D7\uC7D9\uC7DA\uC7DB\uC7DC\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC7DE\uC7DF\uC7E0\uC7E1\uC7E2\uC7E3\uC7E5\uC7E6\uC7E7\uC7E9\uC7EA\uC7EB\uC7ED\uC7EE\uC7EF\uC7F0\uC7F1\uC7F2\uC7F3\uC7F4\uC7F5\uC7F6\uC7F7\uC7F8\uC7F9\uC7FA\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC7FB\uC7FC\uC7FD\uC7FE\uC7FF\uC802\uC803\uC805\uC806\uC807\uC809\uC80B\uC80C\uC80D\uC80E\uC80F\uC812\uC814\uC817\uC818\uC819\uC81A\uC81B\uC81E\uC81F\uC821\uC822\uC823\uC825\uC826\uC827\uC828\uC829\uC82A\uC82B\uC82E\uC830\uC832\uC833\uC834\uC835\uC836\uC837\uC839\uC83A\uC83B\uC83D\uC83E\uC83F\uC841\uC842\uC843\uC844\uC845\uC846\uC847\uC84A\uC84B\uC84E\uC84F\uC850\uC851\uC852\uC853\uC855\uC856\uC857\uC858\uC859\uC85A\uC85B\uC85C\uC85D\uC85E\uC85F\uC860\uC861\uC862\uC863\uC864\uC865\uC866\uC867\uC868\uC869\uC86A\uC86B\uC86C\uC86D\uC86E\uC86F\uC872\uC873\uC875\uC876\uC877\uC879\uC87B\uC87C\uC87D\uC87E\uC87F\uC882\uC884\uC888\uC889\uC88A\uC88E\uC88F\uC890\uC891\uC892\uC893\uC895\uC896\uC897\uC898\uC899\uC89A\uC89B\uC89C\uC89E\uC8A0\uC8A2\uC8A3\uC8A4\uFFFD".split("");
      for (j = 0; j != D[160].length; ++j)
        if (D[160][j].charCodeAt(0) !== 65533) {
          e[D[160][j]] = 40960 + j;
          d[40960 + j] = D[160][j];
        }
      D[161] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC8A5\uC8A6\uC8A7\uC8A9\uC8AA\uC8AB\uC8AC\uC8AD\uC8AE\uC8AF\uC8B0\uC8B1\uC8B2\uC8B3\uC8B4\uC8B5\uC8B6\uC8B7\uC8B8\uC8B9\uC8BA\uC8BB\uC8BE\uC8BF\uC8C0\uC8C1\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC8C2\uC8C3\uC8C5\uC8C6\uC8C7\uC8C9\uC8CA\uC8CB\uC8CD\uC8CE\uC8CF\uC8D0\uC8D1\uC8D2\uC8D3\uC8D6\uC8D8\uC8DA\uC8DB\uC8DC\uC8DD\uC8DE\uC8DF\uC8E2\uC8E3\uC8E5\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC8E6\uC8E7\uC8E8\uC8E9\uC8EA\uC8EB\uC8EC\uC8ED\uC8EE\uC8EF\uC8F0\uC8F1\uC8F2\uC8F3\uC8F4\uC8F6\uC8F7\uC8F8\uC8F9\uC8FA\uC8FB\uC8FE\uC8FF\uC901\uC902\uC903\uC907\uC908\uC909\uC90A\uC90B\uC90E\u3000\u3001\u3002\xB7\u2025\u2026\xA8\u3003\xAD\u2015\u2225\uFF3C\u223C\u2018\u2019\u201C\u201D\u3014\u3015\u3008\u3009\u300A\u300B\u300C\u300D\u300E\u300F\u3010\u3011\xB1\xD7\xF7\u2260\u2264\u2265\u221E\u2234\xB0\u2032\u2033\u2103\u212B\uFFE0\uFFE1\uFFE5\u2642\u2640\u2220\u22A5\u2312\u2202\u2207\u2261\u2252\xA7\u203B\u2606\u2605\u25CB\u25CF\u25CE\u25C7\u25C6\u25A1\u25A0\u25B3\u25B2\u25BD\u25BC\u2192\u2190\u2191\u2193\u2194\u3013\u226A\u226B\u221A\u223D\u221D\u2235\u222B\u222C\u2208\u220B\u2286\u2287\u2282\u2283\u222A\u2229\u2227\u2228\uFFE2\uFFFD".split("");
      for (j = 0; j != D[161].length; ++j)
        if (D[161][j].charCodeAt(0) !== 65533) {
          e[D[161][j]] = 41216 + j;
          d[41216 + j] = D[161][j];
        }
      D[162] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC910\uC912\uC913\uC914\uC915\uC916\uC917\uC919\uC91A\uC91B\uC91C\uC91D\uC91E\uC91F\uC920\uC921\uC922\uC923\uC924\uC925\uC926\uC927\uC928\uC929\uC92A\uC92B\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC92D\uC92E\uC92F\uC930\uC931\uC932\uC933\uC935\uC936\uC937\uC938\uC939\uC93A\uC93B\uC93C\uC93D\uC93E\uC93F\uC940\uC941\uC942\uC943\uC944\uC945\uC946\uC947\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC948\uC949\uC94A\uC94B\uC94C\uC94D\uC94E\uC94F\uC952\uC953\uC955\uC956\uC957\uC959\uC95A\uC95B\uC95C\uC95D\uC95E\uC95F\uC962\uC964\uC965\uC966\uC967\uC968\uC969\uC96A\uC96B\uC96D\uC96E\uC96F\u21D2\u21D4\u2200\u2203\xB4\uFF5E\u02C7\u02D8\u02DD\u02DA\u02D9\xB8\u02DB\xA1\xBF\u02D0\u222E\u2211\u220F\xA4\u2109\u2030\u25C1\u25C0\u25B7\u25B6\u2664\u2660\u2661\u2665\u2667\u2663\u2299\u25C8\u25A3\u25D0\u25D1\u2592\u25A4\u25A5\u25A8\u25A7\u25A6\u25A9\u2668\u260F\u260E\u261C\u261E\xB6\u2020\u2021\u2195\u2197\u2199\u2196\u2198\u266D\u2669\u266A\u266C\u327F\u321C\u2116\u33C7\u2122\u33C2\u33D8\u2121\u20AC\xAE\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[162].length; ++j)
        if (D[162][j].charCodeAt(0) !== 65533) {
          e[D[162][j]] = 41472 + j;
          d[41472 + j] = D[162][j];
        }
      D[163] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC971\uC972\uC973\uC975\uC976\uC977\uC978\uC979\uC97A\uC97B\uC97D\uC97E\uC97F\uC980\uC981\uC982\uC983\uC984\uC985\uC986\uC987\uC98A\uC98B\uC98D\uC98E\uC98F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC991\uC992\uC993\uC994\uC995\uC996\uC997\uC99A\uC99C\uC99E\uC99F\uC9A0\uC9A1\uC9A2\uC9A3\uC9A4\uC9A5\uC9A6\uC9A7\uC9A8\uC9A9\uC9AA\uC9AB\uC9AC\uC9AD\uC9AE\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC9AF\uC9B0\uC9B1\uC9B2\uC9B3\uC9B4\uC9B5\uC9B6\uC9B7\uC9B8\uC9B9\uC9BA\uC9BB\uC9BC\uC9BD\uC9BE\uC9BF\uC9C2\uC9C3\uC9C5\uC9C6\uC9C9\uC9CB\uC9CC\uC9CD\uC9CE\uC9CF\uC9D2\uC9D4\uC9D7\uC9D8\uC9DB\uFF01\uFF02\uFF03\uFF04\uFF05\uFF06\uFF07\uFF08\uFF09\uFF0A\uFF0B\uFF0C\uFF0D\uFF0E\uFF0F\uFF10\uFF11\uFF12\uFF13\uFF14\uFF15\uFF16\uFF17\uFF18\uFF19\uFF1A\uFF1B\uFF1C\uFF1D\uFF1E\uFF1F\uFF20\uFF21\uFF22\uFF23\uFF24\uFF25\uFF26\uFF27\uFF28\uFF29\uFF2A\uFF2B\uFF2C\uFF2D\uFF2E\uFF2F\uFF30\uFF31\uFF32\uFF33\uFF34\uFF35\uFF36\uFF37\uFF38\uFF39\uFF3A\uFF3B\uFFE6\uFF3D\uFF3E\uFF3F\uFF40\uFF41\uFF42\uFF43\uFF44\uFF45\uFF46\uFF47\uFF48\uFF49\uFF4A\uFF4B\uFF4C\uFF4D\uFF4E\uFF4F\uFF50\uFF51\uFF52\uFF53\uFF54\uFF55\uFF56\uFF57\uFF58\uFF59\uFF5A\uFF5B\uFF5C\uFF5D\uFFE3\uFFFD".split("");
      for (j = 0; j != D[163].length; ++j)
        if (D[163][j].charCodeAt(0) !== 65533) {
          e[D[163][j]] = 41728 + j;
          d[41728 + j] = D[163][j];
        }
      D[164] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC9DE\uC9DF\uC9E1\uC9E3\uC9E5\uC9E6\uC9E8\uC9E9\uC9EA\uC9EB\uC9EE\uC9F2\uC9F3\uC9F4\uC9F5\uC9F6\uC9F7\uC9FA\uC9FB\uC9FD\uC9FE\uC9FF\uCA01\uCA02\uCA03\uCA04\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCA05\uCA06\uCA07\uCA0A\uCA0E\uCA0F\uCA10\uCA11\uCA12\uCA13\uCA15\uCA16\uCA17\uCA19\uCA1A\uCA1B\uCA1C\uCA1D\uCA1E\uCA1F\uCA20\uCA21\uCA22\uCA23\uCA24\uCA25\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCA26\uCA27\uCA28\uCA2A\uCA2B\uCA2C\uCA2D\uCA2E\uCA2F\uCA30\uCA31\uCA32\uCA33\uCA34\uCA35\uCA36\uCA37\uCA38\uCA39\uCA3A\uCA3B\uCA3C\uCA3D\uCA3E\uCA3F\uCA40\uCA41\uCA42\uCA43\uCA44\uCA45\uCA46\u3131\u3132\u3133\u3134\u3135\u3136\u3137\u3138\u3139\u313A\u313B\u313C\u313D\u313E\u313F\u3140\u3141\u3142\u3143\u3144\u3145\u3146\u3147\u3148\u3149\u314A\u314B\u314C\u314D\u314E\u314F\u3150\u3151\u3152\u3153\u3154\u3155\u3156\u3157\u3158\u3159\u315A\u315B\u315C\u315D\u315E\u315F\u3160\u3161\u3162\u3163\u3164\u3165\u3166\u3167\u3168\u3169\u316A\u316B\u316C\u316D\u316E\u316F\u3170\u3171\u3172\u3173\u3174\u3175\u3176\u3177\u3178\u3179\u317A\u317B\u317C\u317D\u317E\u317F\u3180\u3181\u3182\u3183\u3184\u3185\u3186\u3187\u3188\u3189\u318A\u318B\u318C\u318D\u318E\uFFFD".split("");
      for (j = 0; j != D[164].length; ++j)
        if (D[164][j].charCodeAt(0) !== 65533) {
          e[D[164][j]] = 41984 + j;
          d[41984 + j] = D[164][j];
        }
      D[165] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCA47\uCA48\uCA49\uCA4A\uCA4B\uCA4E\uCA4F\uCA51\uCA52\uCA53\uCA55\uCA56\uCA57\uCA58\uCA59\uCA5A\uCA5B\uCA5E\uCA62\uCA63\uCA64\uCA65\uCA66\uCA67\uCA69\uCA6A\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCA6B\uCA6C\uCA6D\uCA6E\uCA6F\uCA70\uCA71\uCA72\uCA73\uCA74\uCA75\uCA76\uCA77\uCA78\uCA79\uCA7A\uCA7B\uCA7C\uCA7E\uCA7F\uCA80\uCA81\uCA82\uCA83\uCA85\uCA86\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCA87\uCA88\uCA89\uCA8A\uCA8B\uCA8C\uCA8D\uCA8E\uCA8F\uCA90\uCA91\uCA92\uCA93\uCA94\uCA95\uCA96\uCA97\uCA99\uCA9A\uCA9B\uCA9C\uCA9D\uCA9E\uCA9F\uCAA0\uCAA1\uCAA2\uCAA3\uCAA4\uCAA5\uCAA6\uCAA7\u2170\u2171\u2172\u2173\u2174\u2175\u2176\u2177\u2178\u2179\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u2160\u2161\u2162\u2163\u2164\u2165\u2166\u2167\u2168\u2169\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0391\u0392\u0393\u0394\u0395\u0396\u0397\u0398\u0399\u039A\u039B\u039C\u039D\u039E\u039F\u03A0\u03A1\u03A3\u03A4\u03A5\u03A6\u03A7\u03A8\u03A9\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u03B1\u03B2\u03B3\u03B4\u03B5\u03B6\u03B7\u03B8\u03B9\u03BA\u03BB\u03BC\u03BD\u03BE\u03BF\u03C0\u03C1\u03C3\u03C4\u03C5\u03C6\u03C7\u03C8\u03C9\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[165].length; ++j)
        if (D[165][j].charCodeAt(0) !== 65533) {
          e[D[165][j]] = 42240 + j;
          d[42240 + j] = D[165][j];
        }
      D[166] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCAA8\uCAA9\uCAAA\uCAAB\uCAAC\uCAAD\uCAAE\uCAAF\uCAB0\uCAB1\uCAB2\uCAB3\uCAB4\uCAB5\uCAB6\uCAB7\uCAB8\uCAB9\uCABA\uCABB\uCABE\uCABF\uCAC1\uCAC2\uCAC3\uCAC5\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCAC6\uCAC7\uCAC8\uCAC9\uCACA\uCACB\uCACE\uCAD0\uCAD2\uCAD4\uCAD5\uCAD6\uCAD7\uCADA\uCADB\uCADC\uCADD\uCADE\uCADF\uCAE1\uCAE2\uCAE3\uCAE4\uCAE5\uCAE6\uCAE7\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCAE8\uCAE9\uCAEA\uCAEB\uCAED\uCAEE\uCAEF\uCAF0\uCAF1\uCAF2\uCAF3\uCAF5\uCAF6\uCAF7\uCAF8\uCAF9\uCAFA\uCAFB\uCAFC\uCAFD\uCAFE\uCAFF\uCB00\uCB01\uCB02\uCB03\uCB04\uCB05\uCB06\uCB07\uCB09\uCB0A\u2500\u2502\u250C\u2510\u2518\u2514\u251C\u252C\u2524\u2534\u253C\u2501\u2503\u250F\u2513\u251B\u2517\u2523\u2533\u252B\u253B\u254B\u2520\u252F\u2528\u2537\u253F\u251D\u2530\u2525\u2538\u2542\u2512\u2511\u251A\u2519\u2516\u2515\u250E\u250D\u251E\u251F\u2521\u2522\u2526\u2527\u2529\u252A\u252D\u252E\u2531\u2532\u2535\u2536\u2539\u253A\u253D\u253E\u2540\u2541\u2543\u2544\u2545\u2546\u2547\u2548\u2549\u254A\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[166].length; ++j)
        if (D[166][j].charCodeAt(0) !== 65533) {
          e[D[166][j]] = 42496 + j;
          d[42496 + j] = D[166][j];
        }
      D[167] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCB0B\uCB0C\uCB0D\uCB0E\uCB0F\uCB11\uCB12\uCB13\uCB15\uCB16\uCB17\uCB19\uCB1A\uCB1B\uCB1C\uCB1D\uCB1E\uCB1F\uCB22\uCB23\uCB24\uCB25\uCB26\uCB27\uCB28\uCB29\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCB2A\uCB2B\uCB2C\uCB2D\uCB2E\uCB2F\uCB30\uCB31\uCB32\uCB33\uCB34\uCB35\uCB36\uCB37\uCB38\uCB39\uCB3A\uCB3B\uCB3C\uCB3D\uCB3E\uCB3F\uCB40\uCB42\uCB43\uCB44\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCB45\uCB46\uCB47\uCB4A\uCB4B\uCB4D\uCB4E\uCB4F\uCB51\uCB52\uCB53\uCB54\uCB55\uCB56\uCB57\uCB5A\uCB5B\uCB5C\uCB5E\uCB5F\uCB60\uCB61\uCB62\uCB63\uCB65\uCB66\uCB67\uCB68\uCB69\uCB6A\uCB6B\uCB6C\u3395\u3396\u3397\u2113\u3398\u33C4\u33A3\u33A4\u33A5\u33A6\u3399\u339A\u339B\u339C\u339D\u339E\u339F\u33A0\u33A1\u33A2\u33CA\u338D\u338E\u338F\u33CF\u3388\u3389\u33C8\u33A7\u33A8\u33B0\u33B1\u33B2\u33B3\u33B4\u33B5\u33B6\u33B7\u33B8\u33B9\u3380\u3381\u3382\u3383\u3384\u33BA\u33BB\u33BC\u33BD\u33BE\u33BF\u3390\u3391\u3392\u3393\u3394\u2126\u33C0\u33C1\u338A\u338B\u338C\u33D6\u33C5\u33AD\u33AE\u33AF\u33DB\u33A9\u33AA\u33AB\u33AC\u33DD\u33D0\u33D3\u33C3\u33C9\u33DC\u33C6\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[167].length; ++j)
        if (D[167][j].charCodeAt(0) !== 65533) {
          e[D[167][j]] = 42752 + j;
          d[42752 + j] = D[167][j];
        }
      D[168] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCB6D\uCB6E\uCB6F\uCB70\uCB71\uCB72\uCB73\uCB74\uCB75\uCB76\uCB77\uCB7A\uCB7B\uCB7C\uCB7D\uCB7E\uCB7F\uCB80\uCB81\uCB82\uCB83\uCB84\uCB85\uCB86\uCB87\uCB88\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCB89\uCB8A\uCB8B\uCB8C\uCB8D\uCB8E\uCB8F\uCB90\uCB91\uCB92\uCB93\uCB94\uCB95\uCB96\uCB97\uCB98\uCB99\uCB9A\uCB9B\uCB9D\uCB9E\uCB9F\uCBA0\uCBA1\uCBA2\uCBA3\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCBA4\uCBA5\uCBA6\uCBA7\uCBA8\uCBA9\uCBAA\uCBAB\uCBAC\uCBAD\uCBAE\uCBAF\uCBB0\uCBB1\uCBB2\uCBB3\uCBB4\uCBB5\uCBB6\uCBB7\uCBB9\uCBBA\uCBBB\uCBBC\uCBBD\uCBBE\uCBBF\uCBC0\uCBC1\uCBC2\uCBC3\uCBC4\xC6\xD0\xAA\u0126\uFFFD\u0132\uFFFD\u013F\u0141\xD8\u0152\xBA\xDE\u0166\u014A\uFFFD\u3260\u3261\u3262\u3263\u3264\u3265\u3266\u3267\u3268\u3269\u326A\u326B\u326C\u326D\u326E\u326F\u3270\u3271\u3272\u3273\u3274\u3275\u3276\u3277\u3278\u3279\u327A\u327B\u24D0\u24D1\u24D2\u24D3\u24D4\u24D5\u24D6\u24D7\u24D8\u24D9\u24DA\u24DB\u24DC\u24DD\u24DE\u24DF\u24E0\u24E1\u24E2\u24E3\u24E4\u24E5\u24E6\u24E7\u24E8\u24E9\u2460\u2461\u2462\u2463\u2464\u2465\u2466\u2467\u2468\u2469\u246A\u246B\u246C\u246D\u246E\xBD\u2153\u2154\xBC\xBE\u215B\u215C\u215D\u215E\uFFFD".split("");
      for (j = 0; j != D[168].length; ++j)
        if (D[168][j].charCodeAt(0) !== 65533) {
          e[D[168][j]] = 43008 + j;
          d[43008 + j] = D[168][j];
        }
      D[169] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCBC5\uCBC6\uCBC7\uCBC8\uCBC9\uCBCA\uCBCB\uCBCC\uCBCD\uCBCE\uCBCF\uCBD0\uCBD1\uCBD2\uCBD3\uCBD5\uCBD6\uCBD7\uCBD8\uCBD9\uCBDA\uCBDB\uCBDC\uCBDD\uCBDE\uCBDF\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCBE0\uCBE1\uCBE2\uCBE3\uCBE5\uCBE6\uCBE8\uCBEA\uCBEB\uCBEC\uCBED\uCBEE\uCBEF\uCBF0\uCBF1\uCBF2\uCBF3\uCBF4\uCBF5\uCBF6\uCBF7\uCBF8\uCBF9\uCBFA\uCBFB\uCBFC\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCBFD\uCBFE\uCBFF\uCC00\uCC01\uCC02\uCC03\uCC04\uCC05\uCC06\uCC07\uCC08\uCC09\uCC0A\uCC0B\uCC0E\uCC0F\uCC11\uCC12\uCC13\uCC15\uCC16\uCC17\uCC18\uCC19\uCC1A\uCC1B\uCC1E\uCC1F\uCC20\uCC23\uCC24\xE6\u0111\xF0\u0127\u0131\u0133\u0138\u0140\u0142\xF8\u0153\xDF\xFE\u0167\u014B\u0149\u3200\u3201\u3202\u3203\u3204\u3205\u3206\u3207\u3208\u3209\u320A\u320B\u320C\u320D\u320E\u320F\u3210\u3211\u3212\u3213\u3214\u3215\u3216\u3217\u3218\u3219\u321A\u321B\u249C\u249D\u249E\u249F\u24A0\u24A1\u24A2\u24A3\u24A4\u24A5\u24A6\u24A7\u24A8\u24A9\u24AA\u24AB\u24AC\u24AD\u24AE\u24AF\u24B0\u24B1\u24B2\u24B3\u24B4\u24B5\u2474\u2475\u2476\u2477\u2478\u2479\u247A\u247B\u247C\u247D\u247E\u247F\u2480\u2481\u2482\xB9\xB2\xB3\u2074\u207F\u2081\u2082\u2083\u2084\uFFFD".split("");
      for (j = 0; j != D[169].length; ++j)
        if (D[169][j].charCodeAt(0) !== 65533) {
          e[D[169][j]] = 43264 + j;
          d[43264 + j] = D[169][j];
        }
      D[170] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCC25\uCC26\uCC2A\uCC2B\uCC2D\uCC2F\uCC31\uCC32\uCC33\uCC34\uCC35\uCC36\uCC37\uCC3A\uCC3F\uCC40\uCC41\uCC42\uCC43\uCC46\uCC47\uCC49\uCC4A\uCC4B\uCC4D\uCC4E\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCC4F\uCC50\uCC51\uCC52\uCC53\uCC56\uCC5A\uCC5B\uCC5C\uCC5D\uCC5E\uCC5F\uCC61\uCC62\uCC63\uCC65\uCC67\uCC69\uCC6A\uCC6B\uCC6C\uCC6D\uCC6E\uCC6F\uCC71\uCC72\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCC73\uCC74\uCC76\uCC77\uCC78\uCC79\uCC7A\uCC7B\uCC7C\uCC7D\uCC7E\uCC7F\uCC80\uCC81\uCC82\uCC83\uCC84\uCC85\uCC86\uCC87\uCC88\uCC89\uCC8A\uCC8B\uCC8C\uCC8D\uCC8E\uCC8F\uCC90\uCC91\uCC92\uCC93\u3041\u3042\u3043\u3044\u3045\u3046\u3047\u3048\u3049\u304A\u304B\u304C\u304D\u304E\u304F\u3050\u3051\u3052\u3053\u3054\u3055\u3056\u3057\u3058\u3059\u305A\u305B\u305C\u305D\u305E\u305F\u3060\u3061\u3062\u3063\u3064\u3065\u3066\u3067\u3068\u3069\u306A\u306B\u306C\u306D\u306E\u306F\u3070\u3071\u3072\u3073\u3074\u3075\u3076\u3077\u3078\u3079\u307A\u307B\u307C\u307D\u307E\u307F\u3080\u3081\u3082\u3083\u3084\u3085\u3086\u3087\u3088\u3089\u308A\u308B\u308C\u308D\u308E\u308F\u3090\u3091\u3092\u3093\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[170].length; ++j)
        if (D[170][j].charCodeAt(0) !== 65533) {
          e[D[170][j]] = 43520 + j;
          d[43520 + j] = D[170][j];
        }
      D[171] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCC94\uCC95\uCC96\uCC97\uCC9A\uCC9B\uCC9D\uCC9E\uCC9F\uCCA1\uCCA2\uCCA3\uCCA4\uCCA5\uCCA6\uCCA7\uCCAA\uCCAE\uCCAF\uCCB0\uCCB1\uCCB2\uCCB3\uCCB6\uCCB7\uCCB9\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCCBA\uCCBB\uCCBD\uCCBE\uCCBF\uCCC0\uCCC1\uCCC2\uCCC3\uCCC6\uCCC8\uCCCA\uCCCB\uCCCC\uCCCD\uCCCE\uCCCF\uCCD1\uCCD2\uCCD3\uCCD5\uCCD6\uCCD7\uCCD8\uCCD9\uCCDA\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCCDB\uCCDC\uCCDD\uCCDE\uCCDF\uCCE0\uCCE1\uCCE2\uCCE3\uCCE5\uCCE6\uCCE7\uCCE8\uCCE9\uCCEA\uCCEB\uCCED\uCCEE\uCCEF\uCCF1\uCCF2\uCCF3\uCCF4\uCCF5\uCCF6\uCCF7\uCCF8\uCCF9\uCCFA\uCCFB\uCCFC\uCCFD\u30A1\u30A2\u30A3\u30A4\u30A5\u30A6\u30A7\u30A8\u30A9\u30AA\u30AB\u30AC\u30AD\u30AE\u30AF\u30B0\u30B1\u30B2\u30B3\u30B4\u30B5\u30B6\u30B7\u30B8\u30B9\u30BA\u30BB\u30BC\u30BD\u30BE\u30BF\u30C0\u30C1\u30C2\u30C3\u30C4\u30C5\u30C6\u30C7\u30C8\u30C9\u30CA\u30CB\u30CC\u30CD\u30CE\u30CF\u30D0\u30D1\u30D2\u30D3\u30D4\u30D5\u30D6\u30D7\u30D8\u30D9\u30DA\u30DB\u30DC\u30DD\u30DE\u30DF\u30E0\u30E1\u30E2\u30E3\u30E4\u30E5\u30E6\u30E7\u30E8\u30E9\u30EA\u30EB\u30EC\u30ED\u30EE\u30EF\u30F0\u30F1\u30F2\u30F3\u30F4\u30F5\u30F6\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[171].length; ++j)
        if (D[171][j].charCodeAt(0) !== 65533) {
          e[D[171][j]] = 43776 + j;
          d[43776 + j] = D[171][j];
        }
      D[172] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCCFE\uCCFF\uCD00\uCD02\uCD03\uCD04\uCD05\uCD06\uCD07\uCD0A\uCD0B\uCD0D\uCD0E\uCD0F\uCD11\uCD12\uCD13\uCD14\uCD15\uCD16\uCD17\uCD1A\uCD1C\uCD1E\uCD1F\uCD20\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCD21\uCD22\uCD23\uCD25\uCD26\uCD27\uCD29\uCD2A\uCD2B\uCD2D\uCD2E\uCD2F\uCD30\uCD31\uCD32\uCD33\uCD34\uCD35\uCD36\uCD37\uCD38\uCD3A\uCD3B\uCD3C\uCD3D\uCD3E\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCD3F\uCD40\uCD41\uCD42\uCD43\uCD44\uCD45\uCD46\uCD47\uCD48\uCD49\uCD4A\uCD4B\uCD4C\uCD4D\uCD4E\uCD4F\uCD50\uCD51\uCD52\uCD53\uCD54\uCD55\uCD56\uCD57\uCD58\uCD59\uCD5A\uCD5B\uCD5D\uCD5E\uCD5F\u0410\u0411\u0412\u0413\u0414\u0415\u0401\u0416\u0417\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u0420\u0421\u0422\u0423\u0424\u0425\u0426\u0427\u0428\u0429\u042A\u042B\u042C\u042D\u042E\u042F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0430\u0431\u0432\u0433\u0434\u0435\u0451\u0436\u0437\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044A\u044B\u044C\u044D\u044E\u044F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[172].length; ++j)
        if (D[172][j].charCodeAt(0) !== 65533) {
          e[D[172][j]] = 44032 + j;
          d[44032 + j] = D[172][j];
        }
      D[173] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCD61\uCD62\uCD63\uCD65\uCD66\uCD67\uCD68\uCD69\uCD6A\uCD6B\uCD6E\uCD70\uCD72\uCD73\uCD74\uCD75\uCD76\uCD77\uCD79\uCD7A\uCD7B\uCD7C\uCD7D\uCD7E\uCD7F\uCD80\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCD81\uCD82\uCD83\uCD84\uCD85\uCD86\uCD87\uCD89\uCD8A\uCD8B\uCD8C\uCD8D\uCD8E\uCD8F\uCD90\uCD91\uCD92\uCD93\uCD96\uCD97\uCD99\uCD9A\uCD9B\uCD9D\uCD9E\uCD9F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCDA0\uCDA1\uCDA2\uCDA3\uCDA6\uCDA8\uCDAA\uCDAB\uCDAC\uCDAD\uCDAE\uCDAF\uCDB1\uCDB2\uCDB3\uCDB4\uCDB5\uCDB6\uCDB7\uCDB8\uCDB9\uCDBA\uCDBB\uCDBC\uCDBD\uCDBE\uCDBF\uCDC0\uCDC1\uCDC2\uCDC3\uCDC5\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[173].length; ++j)
        if (D[173][j].charCodeAt(0) !== 65533) {
          e[D[173][j]] = 44288 + j;
          d[44288 + j] = D[173][j];
        }
      D[174] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCDC6\uCDC7\uCDC8\uCDC9\uCDCA\uCDCB\uCDCD\uCDCE\uCDCF\uCDD1\uCDD2\uCDD3\uCDD4\uCDD5\uCDD6\uCDD7\uCDD8\uCDD9\uCDDA\uCDDB\uCDDC\uCDDD\uCDDE\uCDDF\uCDE0\uCDE1\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCDE2\uCDE3\uCDE4\uCDE5\uCDE6\uCDE7\uCDE9\uCDEA\uCDEB\uCDED\uCDEE\uCDEF\uCDF1\uCDF2\uCDF3\uCDF4\uCDF5\uCDF6\uCDF7\uCDFA\uCDFC\uCDFE\uCDFF\uCE00\uCE01\uCE02\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCE03\uCE05\uCE06\uCE07\uCE09\uCE0A\uCE0B\uCE0D\uCE0E\uCE0F\uCE10\uCE11\uCE12\uCE13\uCE15\uCE16\uCE17\uCE18\uCE1A\uCE1B\uCE1C\uCE1D\uCE1E\uCE1F\uCE22\uCE23\uCE25\uCE26\uCE27\uCE29\uCE2A\uCE2B\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[174].length; ++j)
        if (D[174][j].charCodeAt(0) !== 65533) {
          e[D[174][j]] = 44544 + j;
          d[44544 + j] = D[174][j];
        }
      D[175] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCE2C\uCE2D\uCE2E\uCE2F\uCE32\uCE34\uCE36\uCE37\uCE38\uCE39\uCE3A\uCE3B\uCE3C\uCE3D\uCE3E\uCE3F\uCE40\uCE41\uCE42\uCE43\uCE44\uCE45\uCE46\uCE47\uCE48\uCE49\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCE4A\uCE4B\uCE4C\uCE4D\uCE4E\uCE4F\uCE50\uCE51\uCE52\uCE53\uCE54\uCE55\uCE56\uCE57\uCE5A\uCE5B\uCE5D\uCE5E\uCE62\uCE63\uCE64\uCE65\uCE66\uCE67\uCE6A\uCE6C\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCE6E\uCE6F\uCE70\uCE71\uCE72\uCE73\uCE76\uCE77\uCE79\uCE7A\uCE7B\uCE7D\uCE7E\uCE7F\uCE80\uCE81\uCE82\uCE83\uCE86\uCE88\uCE8A\uCE8B\uCE8C\uCE8D\uCE8E\uCE8F\uCE92\uCE93\uCE95\uCE96\uCE97\uCE99\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[175].length; ++j)
        if (D[175][j].charCodeAt(0) !== 65533) {
          e[D[175][j]] = 44800 + j;
          d[44800 + j] = D[175][j];
        }
      D[176] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCE9A\uCE9B\uCE9C\uCE9D\uCE9E\uCE9F\uCEA2\uCEA6\uCEA7\uCEA8\uCEA9\uCEAA\uCEAB\uCEAE\uCEAF\uCEB0\uCEB1\uCEB2\uCEB3\uCEB4\uCEB5\uCEB6\uCEB7\uCEB8\uCEB9\uCEBA\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCEBB\uCEBC\uCEBD\uCEBE\uCEBF\uCEC0\uCEC2\uCEC3\uCEC4\uCEC5\uCEC6\uCEC7\uCEC8\uCEC9\uCECA\uCECB\uCECC\uCECD\uCECE\uCECF\uCED0\uCED1\uCED2\uCED3\uCED4\uCED5\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCED6\uCED7\uCED8\uCED9\uCEDA\uCEDB\uCEDC\uCEDD\uCEDE\uCEDF\uCEE0\uCEE1\uCEE2\uCEE3\uCEE6\uCEE7\uCEE9\uCEEA\uCEED\uCEEE\uCEEF\uCEF0\uCEF1\uCEF2\uCEF3\uCEF6\uCEFA\uCEFB\uCEFC\uCEFD\uCEFE\uCEFF\uAC00\uAC01\uAC04\uAC07\uAC08\uAC09\uAC0A\uAC10\uAC11\uAC12\uAC13\uAC14\uAC15\uAC16\uAC17\uAC19\uAC1A\uAC1B\uAC1C\uAC1D\uAC20\uAC24\uAC2C\uAC2D\uAC2F\uAC30\uAC31\uAC38\uAC39\uAC3C\uAC40\uAC4B\uAC4D\uAC54\uAC58\uAC5C\uAC70\uAC71\uAC74\uAC77\uAC78\uAC7A\uAC80\uAC81\uAC83\uAC84\uAC85\uAC86\uAC89\uAC8A\uAC8B\uAC8C\uAC90\uAC94\uAC9C\uAC9D\uAC9F\uACA0\uACA1\uACA8\uACA9\uACAA\uACAC\uACAF\uACB0\uACB8\uACB9\uACBB\uACBC\uACBD\uACC1\uACC4\uACC8\uACCC\uACD5\uACD7\uACE0\uACE1\uACE4\uACE7\uACE8\uACEA\uACEC\uACEF\uACF0\uACF1\uACF3\uACF5\uACF6\uACFC\uACFD\uAD00\uAD04\uAD06\uFFFD".split("");
      for (j = 0; j != D[176].length; ++j)
        if (D[176][j].charCodeAt(0) !== 65533) {
          e[D[176][j]] = 45056 + j;
          d[45056 + j] = D[176][j];
        }
      D[177] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCF02\uCF03\uCF05\uCF06\uCF07\uCF09\uCF0A\uCF0B\uCF0C\uCF0D\uCF0E\uCF0F\uCF12\uCF14\uCF16\uCF17\uCF18\uCF19\uCF1A\uCF1B\uCF1D\uCF1E\uCF1F\uCF21\uCF22\uCF23\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCF25\uCF26\uCF27\uCF28\uCF29\uCF2A\uCF2B\uCF2E\uCF32\uCF33\uCF34\uCF35\uCF36\uCF37\uCF39\uCF3A\uCF3B\uCF3C\uCF3D\uCF3E\uCF3F\uCF40\uCF41\uCF42\uCF43\uCF44\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCF45\uCF46\uCF47\uCF48\uCF49\uCF4A\uCF4B\uCF4C\uCF4D\uCF4E\uCF4F\uCF50\uCF51\uCF52\uCF53\uCF56\uCF57\uCF59\uCF5A\uCF5B\uCF5D\uCF5E\uCF5F\uCF60\uCF61\uCF62\uCF63\uCF66\uCF68\uCF6A\uCF6B\uCF6C\uAD0C\uAD0D\uAD0F\uAD11\uAD18\uAD1C\uAD20\uAD29\uAD2C\uAD2D\uAD34\uAD35\uAD38\uAD3C\uAD44\uAD45\uAD47\uAD49\uAD50\uAD54\uAD58\uAD61\uAD63\uAD6C\uAD6D\uAD70\uAD73\uAD74\uAD75\uAD76\uAD7B\uAD7C\uAD7D\uAD7F\uAD81\uAD82\uAD88\uAD89\uAD8C\uAD90\uAD9C\uAD9D\uADA4\uADB7\uADC0\uADC1\uADC4\uADC8\uADD0\uADD1\uADD3\uADDC\uADE0\uADE4\uADF8\uADF9\uADFC\uADFF\uAE00\uAE01\uAE08\uAE09\uAE0B\uAE0D\uAE14\uAE30\uAE31\uAE34\uAE37\uAE38\uAE3A\uAE40\uAE41\uAE43\uAE45\uAE46\uAE4A\uAE4C\uAE4D\uAE4E\uAE50\uAE54\uAE56\uAE5C\uAE5D\uAE5F\uAE60\uAE61\uAE65\uAE68\uAE69\uAE6C\uAE70\uAE78\uFFFD".split("");
      for (j = 0; j != D[177].length; ++j)
        if (D[177][j].charCodeAt(0) !== 65533) {
          e[D[177][j]] = 45312 + j;
          d[45312 + j] = D[177][j];
        }
      D[178] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCF6D\uCF6E\uCF6F\uCF72\uCF73\uCF75\uCF76\uCF77\uCF79\uCF7A\uCF7B\uCF7C\uCF7D\uCF7E\uCF7F\uCF81\uCF82\uCF83\uCF84\uCF86\uCF87\uCF88\uCF89\uCF8A\uCF8B\uCF8D\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCF8E\uCF8F\uCF90\uCF91\uCF92\uCF93\uCF94\uCF95\uCF96\uCF97\uCF98\uCF99\uCF9A\uCF9B\uCF9C\uCF9D\uCF9E\uCF9F\uCFA0\uCFA2\uCFA3\uCFA4\uCFA5\uCFA6\uCFA7\uCFA9\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCFAA\uCFAB\uCFAC\uCFAD\uCFAE\uCFAF\uCFB1\uCFB2\uCFB3\uCFB4\uCFB5\uCFB6\uCFB7\uCFB8\uCFB9\uCFBA\uCFBB\uCFBC\uCFBD\uCFBE\uCFBF\uCFC0\uCFC1\uCFC2\uCFC3\uCFC5\uCFC6\uCFC7\uCFC8\uCFC9\uCFCA\uCFCB\uAE79\uAE7B\uAE7C\uAE7D\uAE84\uAE85\uAE8C\uAEBC\uAEBD\uAEBE\uAEC0\uAEC4\uAECC\uAECD\uAECF\uAED0\uAED1\uAED8\uAED9\uAEDC\uAEE8\uAEEB\uAEED\uAEF4\uAEF8\uAEFC\uAF07\uAF08\uAF0D\uAF10\uAF2C\uAF2D\uAF30\uAF32\uAF34\uAF3C\uAF3D\uAF3F\uAF41\uAF42\uAF43\uAF48\uAF49\uAF50\uAF5C\uAF5D\uAF64\uAF65\uAF79\uAF80\uAF84\uAF88\uAF90\uAF91\uAF95\uAF9C\uAFB8\uAFB9\uAFBC\uAFC0\uAFC7\uAFC8\uAFC9\uAFCB\uAFCD\uAFCE\uAFD4\uAFDC\uAFE8\uAFE9\uAFF0\uAFF1\uAFF4\uAFF8\uB000\uB001\uB004\uB00C\uB010\uB014\uB01C\uB01D\uB028\uB044\uB045\uB048\uB04A\uB04C\uB04E\uB053\uB054\uB055\uB057\uB059\uFFFD".split("");
      for (j = 0; j != D[178].length; ++j)
        if (D[178][j].charCodeAt(0) !== 65533) {
          e[D[178][j]] = 45568 + j;
          d[45568 + j] = D[178][j];
        }
      D[179] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCFCC\uCFCD\uCFCE\uCFCF\uCFD0\uCFD1\uCFD2\uCFD3\uCFD4\uCFD5\uCFD6\uCFD7\uCFD8\uCFD9\uCFDA\uCFDB\uCFDC\uCFDD\uCFDE\uCFDF\uCFE2\uCFE3\uCFE5\uCFE6\uCFE7\uCFE9\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCFEA\uCFEB\uCFEC\uCFED\uCFEE\uCFEF\uCFF2\uCFF4\uCFF6\uCFF7\uCFF8\uCFF9\uCFFA\uCFFB\uCFFD\uCFFE\uCFFF\uD001\uD002\uD003\uD005\uD006\uD007\uD008\uD009\uD00A\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD00B\uD00C\uD00D\uD00E\uD00F\uD010\uD012\uD013\uD014\uD015\uD016\uD017\uD019\uD01A\uD01B\uD01C\uD01D\uD01E\uD01F\uD020\uD021\uD022\uD023\uD024\uD025\uD026\uD027\uD028\uD029\uD02A\uD02B\uD02C\uB05D\uB07C\uB07D\uB080\uB084\uB08C\uB08D\uB08F\uB091\uB098\uB099\uB09A\uB09C\uB09F\uB0A0\uB0A1\uB0A2\uB0A8\uB0A9\uB0AB\uB0AC\uB0AD\uB0AE\uB0AF\uB0B1\uB0B3\uB0B4\uB0B5\uB0B8\uB0BC\uB0C4\uB0C5\uB0C7\uB0C8\uB0C9\uB0D0\uB0D1\uB0D4\uB0D8\uB0E0\uB0E5\uB108\uB109\uB10B\uB10C\uB110\uB112\uB113\uB118\uB119\uB11B\uB11C\uB11D\uB123\uB124\uB125\uB128\uB12C\uB134\uB135\uB137\uB138\uB139\uB140\uB141\uB144\uB148\uB150\uB151\uB154\uB155\uB158\uB15C\uB160\uB178\uB179\uB17C\uB180\uB182\uB188\uB189\uB18B\uB18D\uB192\uB193\uB194\uB198\uB19C\uB1A8\uB1CC\uB1D0\uB1D4\uB1DC\uB1DD\uFFFD".split("");
      for (j = 0; j != D[179].length; ++j)
        if (D[179][j].charCodeAt(0) !== 65533) {
          e[D[179][j]] = 45824 + j;
          d[45824 + j] = D[179][j];
        }
      D[180] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD02E\uD02F\uD030\uD031\uD032\uD033\uD036\uD037\uD039\uD03A\uD03B\uD03D\uD03E\uD03F\uD040\uD041\uD042\uD043\uD046\uD048\uD04A\uD04B\uD04C\uD04D\uD04E\uD04F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD051\uD052\uD053\uD055\uD056\uD057\uD059\uD05A\uD05B\uD05C\uD05D\uD05E\uD05F\uD061\uD062\uD063\uD064\uD065\uD066\uD067\uD068\uD069\uD06A\uD06B\uD06E\uD06F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD071\uD072\uD073\uD075\uD076\uD077\uD078\uD079\uD07A\uD07B\uD07E\uD07F\uD080\uD082\uD083\uD084\uD085\uD086\uD087\uD088\uD089\uD08A\uD08B\uD08C\uD08D\uD08E\uD08F\uD090\uD091\uD092\uD093\uD094\uB1DF\uB1E8\uB1E9\uB1EC\uB1F0\uB1F9\uB1FB\uB1FD\uB204\uB205\uB208\uB20B\uB20C\uB214\uB215\uB217\uB219\uB220\uB234\uB23C\uB258\uB25C\uB260\uB268\uB269\uB274\uB275\uB27C\uB284\uB285\uB289\uB290\uB291\uB294\uB298\uB299\uB29A\uB2A0\uB2A1\uB2A3\uB2A5\uB2A6\uB2AA\uB2AC\uB2B0\uB2B4\uB2C8\uB2C9\uB2CC\uB2D0\uB2D2\uB2D8\uB2D9\uB2DB\uB2DD\uB2E2\uB2E4\uB2E5\uB2E6\uB2E8\uB2EB\uB2EC\uB2ED\uB2EE\uB2EF\uB2F3\uB2F4\uB2F5\uB2F7\uB2F8\uB2F9\uB2FA\uB2FB\uB2FF\uB300\uB301\uB304\uB308\uB310\uB311\uB313\uB314\uB315\uB31C\uB354\uB355\uB356\uB358\uB35B\uB35C\uB35E\uB35F\uB364\uB365\uFFFD".split("");
      for (j = 0; j != D[180].length; ++j)
        if (D[180][j].charCodeAt(0) !== 65533) {
          e[D[180][j]] = 46080 + j;
          d[46080 + j] = D[180][j];
        }
      D[181] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD095\uD096\uD097\uD098\uD099\uD09A\uD09B\uD09C\uD09D\uD09E\uD09F\uD0A0\uD0A1\uD0A2\uD0A3\uD0A6\uD0A7\uD0A9\uD0AA\uD0AB\uD0AD\uD0AE\uD0AF\uD0B0\uD0B1\uD0B2\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD0B3\uD0B6\uD0B8\uD0BA\uD0BB\uD0BC\uD0BD\uD0BE\uD0BF\uD0C2\uD0C3\uD0C5\uD0C6\uD0C7\uD0CA\uD0CB\uD0CC\uD0CD\uD0CE\uD0CF\uD0D2\uD0D6\uD0D7\uD0D8\uD0D9\uD0DA\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD0DB\uD0DE\uD0DF\uD0E1\uD0E2\uD0E3\uD0E5\uD0E6\uD0E7\uD0E8\uD0E9\uD0EA\uD0EB\uD0EE\uD0F2\uD0F3\uD0F4\uD0F5\uD0F6\uD0F7\uD0F9\uD0FA\uD0FB\uD0FC\uD0FD\uD0FE\uD0FF\uD100\uD101\uD102\uD103\uD104\uB367\uB369\uB36B\uB36E\uB370\uB371\uB374\uB378\uB380\uB381\uB383\uB384\uB385\uB38C\uB390\uB394\uB3A0\uB3A1\uB3A8\uB3AC\uB3C4\uB3C5\uB3C8\uB3CB\uB3CC\uB3CE\uB3D0\uB3D4\uB3D5\uB3D7\uB3D9\uB3DB\uB3DD\uB3E0\uB3E4\uB3E8\uB3FC\uB410\uB418\uB41C\uB420\uB428\uB429\uB42B\uB434\uB450\uB451\uB454\uB458\uB460\uB461\uB463\uB465\uB46C\uB480\uB488\uB49D\uB4A4\uB4A8\uB4AC\uB4B5\uB4B7\uB4B9\uB4C0\uB4C4\uB4C8\uB4D0\uB4D5\uB4DC\uB4DD\uB4E0\uB4E3\uB4E4\uB4E6\uB4EC\uB4ED\uB4EF\uB4F1\uB4F8\uB514\uB515\uB518\uB51B\uB51C\uB524\uB525\uB527\uB528\uB529\uB52A\uB530\uB531\uB534\uB538\uFFFD".split("");
      for (j = 0; j != D[181].length; ++j)
        if (D[181][j].charCodeAt(0) !== 65533) {
          e[D[181][j]] = 46336 + j;
          d[46336 + j] = D[181][j];
        }
      D[182] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD105\uD106\uD107\uD108\uD109\uD10A\uD10B\uD10C\uD10E\uD10F\uD110\uD111\uD112\uD113\uD114\uD115\uD116\uD117\uD118\uD119\uD11A\uD11B\uD11C\uD11D\uD11E\uD11F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD120\uD121\uD122\uD123\uD124\uD125\uD126\uD127\uD128\uD129\uD12A\uD12B\uD12C\uD12D\uD12E\uD12F\uD132\uD133\uD135\uD136\uD137\uD139\uD13B\uD13C\uD13D\uD13E\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD13F\uD142\uD146\uD147\uD148\uD149\uD14A\uD14B\uD14E\uD14F\uD151\uD152\uD153\uD155\uD156\uD157\uD158\uD159\uD15A\uD15B\uD15E\uD160\uD162\uD163\uD164\uD165\uD166\uD167\uD169\uD16A\uD16B\uD16D\uB540\uB541\uB543\uB544\uB545\uB54B\uB54C\uB54D\uB550\uB554\uB55C\uB55D\uB55F\uB560\uB561\uB5A0\uB5A1\uB5A4\uB5A8\uB5AA\uB5AB\uB5B0\uB5B1\uB5B3\uB5B4\uB5B5\uB5BB\uB5BC\uB5BD\uB5C0\uB5C4\uB5CC\uB5CD\uB5CF\uB5D0\uB5D1\uB5D8\uB5EC\uB610\uB611\uB614\uB618\uB625\uB62C\uB634\uB648\uB664\uB668\uB69C\uB69D\uB6A0\uB6A4\uB6AB\uB6AC\uB6B1\uB6D4\uB6F0\uB6F4\uB6F8\uB700\uB701\uB705\uB728\uB729\uB72C\uB72F\uB730\uB738\uB739\uB73B\uB744\uB748\uB74C\uB754\uB755\uB760\uB764\uB768\uB770\uB771\uB773\uB775\uB77C\uB77D\uB780\uB784\uB78C\uB78D\uB78F\uB790\uB791\uB792\uB796\uB797\uFFFD".split("");
      for (j = 0; j != D[182].length; ++j)
        if (D[182][j].charCodeAt(0) !== 65533) {
          e[D[182][j]] = 46592 + j;
          d[46592 + j] = D[182][j];
        }
      D[183] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD16E\uD16F\uD170\uD171\uD172\uD173\uD174\uD175\uD176\uD177\uD178\uD179\uD17A\uD17B\uD17D\uD17E\uD17F\uD180\uD181\uD182\uD183\uD185\uD186\uD187\uD189\uD18A\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD18B\uD18C\uD18D\uD18E\uD18F\uD190\uD191\uD192\uD193\uD194\uD195\uD196\uD197\uD198\uD199\uD19A\uD19B\uD19C\uD19D\uD19E\uD19F\uD1A2\uD1A3\uD1A5\uD1A6\uD1A7\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD1A9\uD1AA\uD1AB\uD1AC\uD1AD\uD1AE\uD1AF\uD1B2\uD1B4\uD1B6\uD1B7\uD1B8\uD1B9\uD1BB\uD1BD\uD1BE\uD1BF\uD1C1\uD1C2\uD1C3\uD1C4\uD1C5\uD1C6\uD1C7\uD1C8\uD1C9\uD1CA\uD1CB\uD1CC\uD1CD\uD1CE\uD1CF\uB798\uB799\uB79C\uB7A0\uB7A8\uB7A9\uB7AB\uB7AC\uB7AD\uB7B4\uB7B5\uB7B8\uB7C7\uB7C9\uB7EC\uB7ED\uB7F0\uB7F4\uB7FC\uB7FD\uB7FF\uB800\uB801\uB807\uB808\uB809\uB80C\uB810\uB818\uB819\uB81B\uB81D\uB824\uB825\uB828\uB82C\uB834\uB835\uB837\uB838\uB839\uB840\uB844\uB851\uB853\uB85C\uB85D\uB860\uB864\uB86C\uB86D\uB86F\uB871\uB878\uB87C\uB88D\uB8A8\uB8B0\uB8B4\uB8B8\uB8C0\uB8C1\uB8C3\uB8C5\uB8CC\uB8D0\uB8D4\uB8DD\uB8DF\uB8E1\uB8E8\uB8E9\uB8EC\uB8F0\uB8F8\uB8F9\uB8FB\uB8FD\uB904\uB918\uB920\uB93C\uB93D\uB940\uB944\uB94C\uB94F\uB951\uB958\uB959\uB95C\uB960\uB968\uB969\uFFFD".split("");
      for (j = 0; j != D[183].length; ++j)
        if (D[183][j].charCodeAt(0) !== 65533) {
          e[D[183][j]] = 46848 + j;
          d[46848 + j] = D[183][j];
        }
      D[184] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD1D0\uD1D1\uD1D2\uD1D3\uD1D4\uD1D5\uD1D6\uD1D7\uD1D9\uD1DA\uD1DB\uD1DC\uD1DD\uD1DE\uD1DF\uD1E0\uD1E1\uD1E2\uD1E3\uD1E4\uD1E5\uD1E6\uD1E7\uD1E8\uD1E9\uD1EA\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD1EB\uD1EC\uD1ED\uD1EE\uD1EF\uD1F0\uD1F1\uD1F2\uD1F3\uD1F5\uD1F6\uD1F7\uD1F9\uD1FA\uD1FB\uD1FC\uD1FD\uD1FE\uD1FF\uD200\uD201\uD202\uD203\uD204\uD205\uD206\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD208\uD20A\uD20B\uD20C\uD20D\uD20E\uD20F\uD211\uD212\uD213\uD214\uD215\uD216\uD217\uD218\uD219\uD21A\uD21B\uD21C\uD21D\uD21E\uD21F\uD220\uD221\uD222\uD223\uD224\uD225\uD226\uD227\uD228\uD229\uB96B\uB96D\uB974\uB975\uB978\uB97C\uB984\uB985\uB987\uB989\uB98A\uB98D\uB98E\uB9AC\uB9AD\uB9B0\uB9B4\uB9BC\uB9BD\uB9BF\uB9C1\uB9C8\uB9C9\uB9CC\uB9CE\uB9CF\uB9D0\uB9D1\uB9D2\uB9D8\uB9D9\uB9DB\uB9DD\uB9DE\uB9E1\uB9E3\uB9E4\uB9E5\uB9E8\uB9EC\uB9F4\uB9F5\uB9F7\uB9F8\uB9F9\uB9FA\uBA00\uBA01\uBA08\uBA15\uBA38\uBA39\uBA3C\uBA40\uBA42\uBA48\uBA49\uBA4B\uBA4D\uBA4E\uBA53\uBA54\uBA55\uBA58\uBA5C\uBA64\uBA65\uBA67\uBA68\uBA69\uBA70\uBA71\uBA74\uBA78\uBA83\uBA84\uBA85\uBA87\uBA8C\uBAA8\uBAA9\uBAAB\uBAAC\uBAB0\uBAB2\uBAB8\uBAB9\uBABB\uBABD\uBAC4\uBAC8\uBAD8\uBAD9\uBAFC\uFFFD".split("");
      for (j = 0; j != D[184].length; ++j)
        if (D[184][j].charCodeAt(0) !== 65533) {
          e[D[184][j]] = 47104 + j;
          d[47104 + j] = D[184][j];
        }
      D[185] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD22A\uD22B\uD22E\uD22F\uD231\uD232\uD233\uD235\uD236\uD237\uD238\uD239\uD23A\uD23B\uD23E\uD240\uD242\uD243\uD244\uD245\uD246\uD247\uD249\uD24A\uD24B\uD24C\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD24D\uD24E\uD24F\uD250\uD251\uD252\uD253\uD254\uD255\uD256\uD257\uD258\uD259\uD25A\uD25B\uD25D\uD25E\uD25F\uD260\uD261\uD262\uD263\uD265\uD266\uD267\uD268\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD269\uD26A\uD26B\uD26C\uD26D\uD26E\uD26F\uD270\uD271\uD272\uD273\uD274\uD275\uD276\uD277\uD278\uD279\uD27A\uD27B\uD27C\uD27D\uD27E\uD27F\uD282\uD283\uD285\uD286\uD287\uD289\uD28A\uD28B\uD28C\uBB00\uBB04\uBB0D\uBB0F\uBB11\uBB18\uBB1C\uBB20\uBB29\uBB2B\uBB34\uBB35\uBB36\uBB38\uBB3B\uBB3C\uBB3D\uBB3E\uBB44\uBB45\uBB47\uBB49\uBB4D\uBB4F\uBB50\uBB54\uBB58\uBB61\uBB63\uBB6C\uBB88\uBB8C\uBB90\uBBA4\uBBA8\uBBAC\uBBB4\uBBB7\uBBC0\uBBC4\uBBC8\uBBD0\uBBD3\uBBF8\uBBF9\uBBFC\uBBFF\uBC00\uBC02\uBC08\uBC09\uBC0B\uBC0C\uBC0D\uBC0F\uBC11\uBC14\uBC15\uBC16\uBC17\uBC18\uBC1B\uBC1C\uBC1D\uBC1E\uBC1F\uBC24\uBC25\uBC27\uBC29\uBC2D\uBC30\uBC31\uBC34\uBC38\uBC40\uBC41\uBC43\uBC44\uBC45\uBC49\uBC4C\uBC4D\uBC50\uBC5D\uBC84\uBC85\uBC88\uBC8B\uBC8C\uBC8E\uBC94\uBC95\uBC97\uFFFD".split("");
      for (j = 0; j != D[185].length; ++j)
        if (D[185][j].charCodeAt(0) !== 65533) {
          e[D[185][j]] = 47360 + j;
          d[47360 + j] = D[185][j];
        }
      D[186] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD28D\uD28E\uD28F\uD292\uD293\uD294\uD296\uD297\uD298\uD299\uD29A\uD29B\uD29D\uD29E\uD29F\uD2A1\uD2A2\uD2A3\uD2A5\uD2A6\uD2A7\uD2A8\uD2A9\uD2AA\uD2AB\uD2AD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD2AE\uD2AF\uD2B0\uD2B2\uD2B3\uD2B4\uD2B5\uD2B6\uD2B7\uD2BA\uD2BB\uD2BD\uD2BE\uD2C1\uD2C3\uD2C4\uD2C5\uD2C6\uD2C7\uD2CA\uD2CC\uD2CD\uD2CE\uD2CF\uD2D0\uD2D1\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD2D2\uD2D3\uD2D5\uD2D6\uD2D7\uD2D9\uD2DA\uD2DB\uD2DD\uD2DE\uD2DF\uD2E0\uD2E1\uD2E2\uD2E3\uD2E6\uD2E7\uD2E8\uD2E9\uD2EA\uD2EB\uD2EC\uD2ED\uD2EE\uD2EF\uD2F2\uD2F3\uD2F5\uD2F6\uD2F7\uD2F9\uD2FA\uBC99\uBC9A\uBCA0\uBCA1\uBCA4\uBCA7\uBCA8\uBCB0\uBCB1\uBCB3\uBCB4\uBCB5\uBCBC\uBCBD\uBCC0\uBCC4\uBCCD\uBCCF\uBCD0\uBCD1\uBCD5\uBCD8\uBCDC\uBCF4\uBCF5\uBCF6\uBCF8\uBCFC\uBD04\uBD05\uBD07\uBD09\uBD10\uBD14\uBD24\uBD2C\uBD40\uBD48\uBD49\uBD4C\uBD50\uBD58\uBD59\uBD64\uBD68\uBD80\uBD81\uBD84\uBD87\uBD88\uBD89\uBD8A\uBD90\uBD91\uBD93\uBD95\uBD99\uBD9A\uBD9C\uBDA4\uBDB0\uBDB8\uBDD4\uBDD5\uBDD8\uBDDC\uBDE9\uBDF0\uBDF4\uBDF8\uBE00\uBE03\uBE05\uBE0C\uBE0D\uBE10\uBE14\uBE1C\uBE1D\uBE1F\uBE44\uBE45\uBE48\uBE4C\uBE4E\uBE54\uBE55\uBE57\uBE59\uBE5A\uBE5B\uBE60\uBE61\uBE64\uFFFD".split("");
      for (j = 0; j != D[186].length; ++j)
        if (D[186][j].charCodeAt(0) !== 65533) {
          e[D[186][j]] = 47616 + j;
          d[47616 + j] = D[186][j];
        }
      D[187] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD2FB\uD2FC\uD2FD\uD2FE\uD2FF\uD302\uD304\uD306\uD307\uD308\uD309\uD30A\uD30B\uD30F\uD311\uD312\uD313\uD315\uD317\uD318\uD319\uD31A\uD31B\uD31E\uD322\uD323\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD324\uD326\uD327\uD32A\uD32B\uD32D\uD32E\uD32F\uD331\uD332\uD333\uD334\uD335\uD336\uD337\uD33A\uD33E\uD33F\uD340\uD341\uD342\uD343\uD346\uD347\uD348\uD349\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD34A\uD34B\uD34C\uD34D\uD34E\uD34F\uD350\uD351\uD352\uD353\uD354\uD355\uD356\uD357\uD358\uD359\uD35A\uD35B\uD35C\uD35D\uD35E\uD35F\uD360\uD361\uD362\uD363\uD364\uD365\uD366\uD367\uD368\uD369\uBE68\uBE6A\uBE70\uBE71\uBE73\uBE74\uBE75\uBE7B\uBE7C\uBE7D\uBE80\uBE84\uBE8C\uBE8D\uBE8F\uBE90\uBE91\uBE98\uBE99\uBEA8\uBED0\uBED1\uBED4\uBED7\uBED8\uBEE0\uBEE3\uBEE4\uBEE5\uBEEC\uBF01\uBF08\uBF09\uBF18\uBF19\uBF1B\uBF1C\uBF1D\uBF40\uBF41\uBF44\uBF48\uBF50\uBF51\uBF55\uBF94\uBFB0\uBFC5\uBFCC\uBFCD\uBFD0\uBFD4\uBFDC\uBFDF\uBFE1\uC03C\uC051\uC058\uC05C\uC060\uC068\uC069\uC090\uC091\uC094\uC098\uC0A0\uC0A1\uC0A3\uC0A5\uC0AC\uC0AD\uC0AF\uC0B0\uC0B3\uC0B4\uC0B5\uC0B6\uC0BC\uC0BD\uC0BF\uC0C0\uC0C1\uC0C5\uC0C8\uC0C9\uC0CC\uC0D0\uC0D8\uC0D9\uC0DB\uC0DC\uC0DD\uC0E4\uFFFD".split("");
      for (j = 0; j != D[187].length; ++j)
        if (D[187][j].charCodeAt(0) !== 65533) {
          e[D[187][j]] = 47872 + j;
          d[47872 + j] = D[187][j];
        }
      D[188] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD36A\uD36B\uD36C\uD36D\uD36E\uD36F\uD370\uD371\uD372\uD373\uD374\uD375\uD376\uD377\uD378\uD379\uD37A\uD37B\uD37E\uD37F\uD381\uD382\uD383\uD385\uD386\uD387\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD388\uD389\uD38A\uD38B\uD38E\uD392\uD393\uD394\uD395\uD396\uD397\uD39A\uD39B\uD39D\uD39E\uD39F\uD3A1\uD3A2\uD3A3\uD3A4\uD3A5\uD3A6\uD3A7\uD3AA\uD3AC\uD3AE\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD3AF\uD3B0\uD3B1\uD3B2\uD3B3\uD3B5\uD3B6\uD3B7\uD3B9\uD3BA\uD3BB\uD3BD\uD3BE\uD3BF\uD3C0\uD3C1\uD3C2\uD3C3\uD3C6\uD3C7\uD3CA\uD3CB\uD3CC\uD3CD\uD3CE\uD3CF\uD3D1\uD3D2\uD3D3\uD3D4\uD3D5\uD3D6\uC0E5\uC0E8\uC0EC\uC0F4\uC0F5\uC0F7\uC0F9\uC100\uC104\uC108\uC110\uC115\uC11C\uC11D\uC11E\uC11F\uC120\uC123\uC124\uC126\uC127\uC12C\uC12D\uC12F\uC130\uC131\uC136\uC138\uC139\uC13C\uC140\uC148\uC149\uC14B\uC14C\uC14D\uC154\uC155\uC158\uC15C\uC164\uC165\uC167\uC168\uC169\uC170\uC174\uC178\uC185\uC18C\uC18D\uC18E\uC190\uC194\uC196\uC19C\uC19D\uC19F\uC1A1\uC1A5\uC1A8\uC1A9\uC1AC\uC1B0\uC1BD\uC1C4\uC1C8\uC1CC\uC1D4\uC1D7\uC1D8\uC1E0\uC1E4\uC1E8\uC1F0\uC1F1\uC1F3\uC1FC\uC1FD\uC200\uC204\uC20C\uC20D\uC20F\uC211\uC218\uC219\uC21C\uC21F\uC220\uC228\uC229\uC22B\uC22D\uFFFD".split("");
      for (j = 0; j != D[188].length; ++j)
        if (D[188][j].charCodeAt(0) !== 65533) {
          e[D[188][j]] = 48128 + j;
          d[48128 + j] = D[188][j];
        }
      D[189] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD3D7\uD3D9\uD3DA\uD3DB\uD3DC\uD3DD\uD3DE\uD3DF\uD3E0\uD3E2\uD3E4\uD3E5\uD3E6\uD3E7\uD3E8\uD3E9\uD3EA\uD3EB\uD3EE\uD3EF\uD3F1\uD3F2\uD3F3\uD3F5\uD3F6\uD3F7\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD3F8\uD3F9\uD3FA\uD3FB\uD3FE\uD400\uD402\uD403\uD404\uD405\uD406\uD407\uD409\uD40A\uD40B\uD40C\uD40D\uD40E\uD40F\uD410\uD411\uD412\uD413\uD414\uD415\uD416\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD417\uD418\uD419\uD41A\uD41B\uD41C\uD41E\uD41F\uD420\uD421\uD422\uD423\uD424\uD425\uD426\uD427\uD428\uD429\uD42A\uD42B\uD42C\uD42D\uD42E\uD42F\uD430\uD431\uD432\uD433\uD434\uD435\uD436\uD437\uC22F\uC231\uC232\uC234\uC248\uC250\uC251\uC254\uC258\uC260\uC265\uC26C\uC26D\uC270\uC274\uC27C\uC27D\uC27F\uC281\uC288\uC289\uC290\uC298\uC29B\uC29D\uC2A4\uC2A5\uC2A8\uC2AC\uC2AD\uC2B4\uC2B5\uC2B7\uC2B9\uC2DC\uC2DD\uC2E0\uC2E3\uC2E4\uC2EB\uC2EC\uC2ED\uC2EF\uC2F1\uC2F6\uC2F8\uC2F9\uC2FB\uC2FC\uC300\uC308\uC309\uC30C\uC30D\uC313\uC314\uC315\uC318\uC31C\uC324\uC325\uC328\uC329\uC345\uC368\uC369\uC36C\uC370\uC372\uC378\uC379\uC37C\uC37D\uC384\uC388\uC38C\uC3C0\uC3D8\uC3D9\uC3DC\uC3DF\uC3E0\uC3E2\uC3E8\uC3E9\uC3ED\uC3F4\uC3F5\uC3F8\uC408\uC410\uC424\uC42C\uC430\uFFFD".split("");
      for (j = 0; j != D[189].length; ++j)
        if (D[189][j].charCodeAt(0) !== 65533) {
          e[D[189][j]] = 48384 + j;
          d[48384 + j] = D[189][j];
        }
      D[190] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD438\uD439\uD43A\uD43B\uD43C\uD43D\uD43E\uD43F\uD441\uD442\uD443\uD445\uD446\uD447\uD448\uD449\uD44A\uD44B\uD44C\uD44D\uD44E\uD44F\uD450\uD451\uD452\uD453\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD454\uD455\uD456\uD457\uD458\uD459\uD45A\uD45B\uD45D\uD45E\uD45F\uD461\uD462\uD463\uD465\uD466\uD467\uD468\uD469\uD46A\uD46B\uD46C\uD46E\uD470\uD471\uD472\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD473\uD474\uD475\uD476\uD477\uD47A\uD47B\uD47D\uD47E\uD481\uD483\uD484\uD485\uD486\uD487\uD48A\uD48C\uD48E\uD48F\uD490\uD491\uD492\uD493\uD495\uD496\uD497\uD498\uD499\uD49A\uD49B\uD49C\uD49D\uC434\uC43C\uC43D\uC448\uC464\uC465\uC468\uC46C\uC474\uC475\uC479\uC480\uC494\uC49C\uC4B8\uC4BC\uC4E9\uC4F0\uC4F1\uC4F4\uC4F8\uC4FA\uC4FF\uC500\uC501\uC50C\uC510\uC514\uC51C\uC528\uC529\uC52C\uC530\uC538\uC539\uC53B\uC53D\uC544\uC545\uC548\uC549\uC54A\uC54C\uC54D\uC54E\uC553\uC554\uC555\uC557\uC558\uC559\uC55D\uC55E\uC560\uC561\uC564\uC568\uC570\uC571\uC573\uC574\uC575\uC57C\uC57D\uC580\uC584\uC587\uC58C\uC58D\uC58F\uC591\uC595\uC597\uC598\uC59C\uC5A0\uC5A9\uC5B4\uC5B5\uC5B8\uC5B9\uC5BB\uC5BC\uC5BD\uC5BE\uC5C4\uC5C5\uC5C6\uC5C7\uC5C8\uC5C9\uC5CA\uC5CC\uC5CE\uFFFD".split("");
      for (j = 0; j != D[190].length; ++j)
        if (D[190][j].charCodeAt(0) !== 65533) {
          e[D[190][j]] = 48640 + j;
          d[48640 + j] = D[190][j];
        }
      D[191] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD49E\uD49F\uD4A0\uD4A1\uD4A2\uD4A3\uD4A4\uD4A5\uD4A6\uD4A7\uD4A8\uD4AA\uD4AB\uD4AC\uD4AD\uD4AE\uD4AF\uD4B0\uD4B1\uD4B2\uD4B3\uD4B4\uD4B5\uD4B6\uD4B7\uD4B8\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD4B9\uD4BA\uD4BB\uD4BC\uD4BD\uD4BE\uD4BF\uD4C0\uD4C1\uD4C2\uD4C3\uD4C4\uD4C5\uD4C6\uD4C7\uD4C8\uD4C9\uD4CA\uD4CB\uD4CD\uD4CE\uD4CF\uD4D1\uD4D2\uD4D3\uD4D5\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD4D6\uD4D7\uD4D8\uD4D9\uD4DA\uD4DB\uD4DD\uD4DE\uD4E0\uD4E1\uD4E2\uD4E3\uD4E4\uD4E5\uD4E6\uD4E7\uD4E9\uD4EA\uD4EB\uD4ED\uD4EE\uD4EF\uD4F1\uD4F2\uD4F3\uD4F4\uD4F5\uD4F6\uD4F7\uD4F9\uD4FA\uD4FC\uC5D0\uC5D1\uC5D4\uC5D8\uC5E0\uC5E1\uC5E3\uC5E5\uC5EC\uC5ED\uC5EE\uC5F0\uC5F4\uC5F6\uC5F7\uC5FC\uC5FD\uC5FE\uC5FF\uC600\uC601\uC605\uC606\uC607\uC608\uC60C\uC610\uC618\uC619\uC61B\uC61C\uC624\uC625\uC628\uC62C\uC62D\uC62E\uC630\uC633\uC634\uC635\uC637\uC639\uC63B\uC640\uC641\uC644\uC648\uC650\uC651\uC653\uC654\uC655\uC65C\uC65D\uC660\uC66C\uC66F\uC671\uC678\uC679\uC67C\uC680\uC688\uC689\uC68B\uC68D\uC694\uC695\uC698\uC69C\uC6A4\uC6A5\uC6A7\uC6A9\uC6B0\uC6B1\uC6B4\uC6B8\uC6B9\uC6BA\uC6C0\uC6C1\uC6C3\uC6C5\uC6CC\uC6CD\uC6D0\uC6D4\uC6DC\uC6DD\uC6E0\uC6E1\uC6E8\uFFFD".split("");
      for (j = 0; j != D[191].length; ++j)
        if (D[191][j].charCodeAt(0) !== 65533) {
          e[D[191][j]] = 48896 + j;
          d[48896 + j] = D[191][j];
        }
      D[192] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD4FE\uD4FF\uD500\uD501\uD502\uD503\uD505\uD506\uD507\uD509\uD50A\uD50B\uD50D\uD50E\uD50F\uD510\uD511\uD512\uD513\uD516\uD518\uD519\uD51A\uD51B\uD51C\uD51D\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD51E\uD51F\uD520\uD521\uD522\uD523\uD524\uD525\uD526\uD527\uD528\uD529\uD52A\uD52B\uD52C\uD52D\uD52E\uD52F\uD530\uD531\uD532\uD533\uD534\uD535\uD536\uD537\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD538\uD539\uD53A\uD53B\uD53E\uD53F\uD541\uD542\uD543\uD545\uD546\uD547\uD548\uD549\uD54A\uD54B\uD54E\uD550\uD552\uD553\uD554\uD555\uD556\uD557\uD55A\uD55B\uD55D\uD55E\uD55F\uD561\uD562\uD563\uC6E9\uC6EC\uC6F0\uC6F8\uC6F9\uC6FD\uC704\uC705\uC708\uC70C\uC714\uC715\uC717\uC719\uC720\uC721\uC724\uC728\uC730\uC731\uC733\uC735\uC737\uC73C\uC73D\uC740\uC744\uC74A\uC74C\uC74D\uC74F\uC751\uC752\uC753\uC754\uC755\uC756\uC757\uC758\uC75C\uC760\uC768\uC76B\uC774\uC775\uC778\uC77C\uC77D\uC77E\uC783\uC784\uC785\uC787\uC788\uC789\uC78A\uC78E\uC790\uC791\uC794\uC796\uC797\uC798\uC79A\uC7A0\uC7A1\uC7A3\uC7A4\uC7A5\uC7A6\uC7AC\uC7AD\uC7B0\uC7B4\uC7BC\uC7BD\uC7BF\uC7C0\uC7C1\uC7C8\uC7C9\uC7CC\uC7CE\uC7D0\uC7D8\uC7DD\uC7E4\uC7E8\uC7EC\uC800\uC801\uC804\uC808\uC80A\uFFFD".split("");
      for (j = 0; j != D[192].length; ++j)
        if (D[192][j].charCodeAt(0) !== 65533) {
          e[D[192][j]] = 49152 + j;
          d[49152 + j] = D[192][j];
        }
      D[193] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD564\uD566\uD567\uD56A\uD56C\uD56E\uD56F\uD570\uD571\uD572\uD573\uD576\uD577\uD579\uD57A\uD57B\uD57D\uD57E\uD57F\uD580\uD581\uD582\uD583\uD586\uD58A\uD58B\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD58C\uD58D\uD58E\uD58F\uD591\uD592\uD593\uD594\uD595\uD596\uD597\uD598\uD599\uD59A\uD59B\uD59C\uD59D\uD59E\uD59F\uD5A0\uD5A1\uD5A2\uD5A3\uD5A4\uD5A6\uD5A7\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD5A8\uD5A9\uD5AA\uD5AB\uD5AC\uD5AD\uD5AE\uD5AF\uD5B0\uD5B1\uD5B2\uD5B3\uD5B4\uD5B5\uD5B6\uD5B7\uD5B8\uD5B9\uD5BA\uD5BB\uD5BC\uD5BD\uD5BE\uD5BF\uD5C0\uD5C1\uD5C2\uD5C3\uD5C4\uD5C5\uD5C6\uD5C7\uC810\uC811\uC813\uC815\uC816\uC81C\uC81D\uC820\uC824\uC82C\uC82D\uC82F\uC831\uC838\uC83C\uC840\uC848\uC849\uC84C\uC84D\uC854\uC870\uC871\uC874\uC878\uC87A\uC880\uC881\uC883\uC885\uC886\uC887\uC88B\uC88C\uC88D\uC894\uC89D\uC89F\uC8A1\uC8A8\uC8BC\uC8BD\uC8C4\uC8C8\uC8CC\uC8D4\uC8D5\uC8D7\uC8D9\uC8E0\uC8E1\uC8E4\uC8F5\uC8FC\uC8FD\uC900\uC904\uC905\uC906\uC90C\uC90D\uC90F\uC911\uC918\uC92C\uC934\uC950\uC951\uC954\uC958\uC960\uC961\uC963\uC96C\uC970\uC974\uC97C\uC988\uC989\uC98C\uC990\uC998\uC999\uC99B\uC99D\uC9C0\uC9C1\uC9C4\uC9C7\uC9C8\uC9CA\uC9D0\uC9D1\uC9D3\uFFFD".split("");
      for (j = 0; j != D[193].length; ++j)
        if (D[193][j].charCodeAt(0) !== 65533) {
          e[D[193][j]] = 49408 + j;
          d[49408 + j] = D[193][j];
        }
      D[194] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD5CA\uD5CB\uD5CD\uD5CE\uD5CF\uD5D1\uD5D3\uD5D4\uD5D5\uD5D6\uD5D7\uD5DA\uD5DC\uD5DE\uD5DF\uD5E0\uD5E1\uD5E2\uD5E3\uD5E6\uD5E7\uD5E9\uD5EA\uD5EB\uD5ED\uD5EE\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD5EF\uD5F0\uD5F1\uD5F2\uD5F3\uD5F6\uD5F8\uD5FA\uD5FB\uD5FC\uD5FD\uD5FE\uD5FF\uD602\uD603\uD605\uD606\uD607\uD609\uD60A\uD60B\uD60C\uD60D\uD60E\uD60F\uD612\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD616\uD617\uD618\uD619\uD61A\uD61B\uD61D\uD61E\uD61F\uD621\uD622\uD623\uD625\uD626\uD627\uD628\uD629\uD62A\uD62B\uD62C\uD62E\uD62F\uD630\uD631\uD632\uD633\uD634\uD635\uD636\uD637\uD63A\uD63B\uC9D5\uC9D6\uC9D9\uC9DA\uC9DC\uC9DD\uC9E0\uC9E2\uC9E4\uC9E7\uC9EC\uC9ED\uC9EF\uC9F0\uC9F1\uC9F8\uC9F9\uC9FC\uCA00\uCA08\uCA09\uCA0B\uCA0C\uCA0D\uCA14\uCA18\uCA29\uCA4C\uCA4D\uCA50\uCA54\uCA5C\uCA5D\uCA5F\uCA60\uCA61\uCA68\uCA7D\uCA84\uCA98\uCABC\uCABD\uCAC0\uCAC4\uCACC\uCACD\uCACF\uCAD1\uCAD3\uCAD8\uCAD9\uCAE0\uCAEC\uCAF4\uCB08\uCB10\uCB14\uCB18\uCB20\uCB21\uCB41\uCB48\uCB49\uCB4C\uCB50\uCB58\uCB59\uCB5D\uCB64\uCB78\uCB79\uCB9C\uCBB8\uCBD4\uCBE4\uCBE7\uCBE9\uCC0C\uCC0D\uCC10\uCC14\uCC1C\uCC1D\uCC21\uCC22\uCC27\uCC28\uCC29\uCC2C\uCC2E\uCC30\uCC38\uCC39\uCC3B\uFFFD".split("");
      for (j = 0; j != D[194].length; ++j)
        if (D[194][j].charCodeAt(0) !== 65533) {
          e[D[194][j]] = 49664 + j;
          d[49664 + j] = D[194][j];
        }
      D[195] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD63D\uD63E\uD63F\uD641\uD642\uD643\uD644\uD646\uD647\uD64A\uD64C\uD64E\uD64F\uD650\uD652\uD653\uD656\uD657\uD659\uD65A\uD65B\uD65D\uD65E\uD65F\uD660\uD661\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD662\uD663\uD664\uD665\uD666\uD668\uD66A\uD66B\uD66C\uD66D\uD66E\uD66F\uD672\uD673\uD675\uD676\uD677\uD678\uD679\uD67A\uD67B\uD67C\uD67D\uD67E\uD67F\uD680\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD681\uD682\uD684\uD686\uD687\uD688\uD689\uD68A\uD68B\uD68E\uD68F\uD691\uD692\uD693\uD695\uD696\uD697\uD698\uD699\uD69A\uD69B\uD69C\uD69E\uD6A0\uD6A2\uD6A3\uD6A4\uD6A5\uD6A6\uD6A7\uD6A9\uD6AA\uCC3C\uCC3D\uCC3E\uCC44\uCC45\uCC48\uCC4C\uCC54\uCC55\uCC57\uCC58\uCC59\uCC60\uCC64\uCC66\uCC68\uCC70\uCC75\uCC98\uCC99\uCC9C\uCCA0\uCCA8\uCCA9\uCCAB\uCCAC\uCCAD\uCCB4\uCCB5\uCCB8\uCCBC\uCCC4\uCCC5\uCCC7\uCCC9\uCCD0\uCCD4\uCCE4\uCCEC\uCCF0\uCD01\uCD08\uCD09\uCD0C\uCD10\uCD18\uCD19\uCD1B\uCD1D\uCD24\uCD28\uCD2C\uCD39\uCD5C\uCD60\uCD64\uCD6C\uCD6D\uCD6F\uCD71\uCD78\uCD88\uCD94\uCD95\uCD98\uCD9C\uCDA4\uCDA5\uCDA7\uCDA9\uCDB0\uCDC4\uCDCC\uCDD0\uCDE8\uCDEC\uCDF0\uCDF8\uCDF9\uCDFB\uCDFD\uCE04\uCE08\uCE0C\uCE14\uCE19\uCE20\uCE21\uCE24\uCE28\uCE30\uCE31\uCE33\uCE35\uFFFD".split("");
      for (j = 0; j != D[195].length; ++j)
        if (D[195][j].charCodeAt(0) !== 65533) {
          e[D[195][j]] = 49920 + j;
          d[49920 + j] = D[195][j];
        }
      D[196] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD6AB\uD6AD\uD6AE\uD6AF\uD6B1\uD6B2\uD6B3\uD6B4\uD6B5\uD6B6\uD6B7\uD6B8\uD6BA\uD6BC\uD6BD\uD6BE\uD6BF\uD6C0\uD6C1\uD6C2\uD6C3\uD6C6\uD6C7\uD6C9\uD6CA\uD6CB\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD6CD\uD6CE\uD6CF\uD6D0\uD6D2\uD6D3\uD6D5\uD6D6\uD6D8\uD6DA\uD6DB\uD6DC\uD6DD\uD6DE\uD6DF\uD6E1\uD6E2\uD6E3\uD6E5\uD6E6\uD6E7\uD6E9\uD6EA\uD6EB\uD6EC\uD6ED\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD6EE\uD6EF\uD6F1\uD6F2\uD6F3\uD6F4\uD6F6\uD6F7\uD6F8\uD6F9\uD6FA\uD6FB\uD6FE\uD6FF\uD701\uD702\uD703\uD705\uD706\uD707\uD708\uD709\uD70A\uD70B\uD70C\uD70D\uD70E\uD70F\uD710\uD712\uD713\uD714\uCE58\uCE59\uCE5C\uCE5F\uCE60\uCE61\uCE68\uCE69\uCE6B\uCE6D\uCE74\uCE75\uCE78\uCE7C\uCE84\uCE85\uCE87\uCE89\uCE90\uCE91\uCE94\uCE98\uCEA0\uCEA1\uCEA3\uCEA4\uCEA5\uCEAC\uCEAD\uCEC1\uCEE4\uCEE5\uCEE8\uCEEB\uCEEC\uCEF4\uCEF5\uCEF7\uCEF8\uCEF9\uCF00\uCF01\uCF04\uCF08\uCF10\uCF11\uCF13\uCF15\uCF1C\uCF20\uCF24\uCF2C\uCF2D\uCF2F\uCF30\uCF31\uCF38\uCF54\uCF55\uCF58\uCF5C\uCF64\uCF65\uCF67\uCF69\uCF70\uCF71\uCF74\uCF78\uCF80\uCF85\uCF8C\uCFA1\uCFA8\uCFB0\uCFC4\uCFE0\uCFE1\uCFE4\uCFE8\uCFF0\uCFF1\uCFF3\uCFF5\uCFFC\uD000\uD004\uD011\uD018\uD02D\uD034\uD035\uD038\uD03C\uFFFD".split("");
      for (j = 0; j != D[196].length; ++j)
        if (D[196][j].charCodeAt(0) !== 65533) {
          e[D[196][j]] = 50176 + j;
          d[50176 + j] = D[196][j];
        }
      D[197] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD715\uD716\uD717\uD71A\uD71B\uD71D\uD71E\uD71F\uD721\uD722\uD723\uD724\uD725\uD726\uD727\uD72A\uD72C\uD72E\uD72F\uD730\uD731\uD732\uD733\uD736\uD737\uD739\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD73A\uD73B\uD73D\uD73E\uD73F\uD740\uD741\uD742\uD743\uD745\uD746\uD748\uD74A\uD74B\uD74C\uD74D\uD74E\uD74F\uD752\uD753\uD755\uD75A\uD75B\uD75C\uD75D\uD75E\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD75F\uD762\uD764\uD766\uD767\uD768\uD76A\uD76B\uD76D\uD76E\uD76F\uD771\uD772\uD773\uD775\uD776\uD777\uD778\uD779\uD77A\uD77B\uD77E\uD77F\uD780\uD782\uD783\uD784\uD785\uD786\uD787\uD78A\uD78B\uD044\uD045\uD047\uD049\uD050\uD054\uD058\uD060\uD06C\uD06D\uD070\uD074\uD07C\uD07D\uD081\uD0A4\uD0A5\uD0A8\uD0AC\uD0B4\uD0B5\uD0B7\uD0B9\uD0C0\uD0C1\uD0C4\uD0C8\uD0C9\uD0D0\uD0D1\uD0D3\uD0D4\uD0D5\uD0DC\uD0DD\uD0E0\uD0E4\uD0EC\uD0ED\uD0EF\uD0F0\uD0F1\uD0F8\uD10D\uD130\uD131\uD134\uD138\uD13A\uD140\uD141\uD143\uD144\uD145\uD14C\uD14D\uD150\uD154\uD15C\uD15D\uD15F\uD161\uD168\uD16C\uD17C\uD184\uD188\uD1A0\uD1A1\uD1A4\uD1A8\uD1B0\uD1B1\uD1B3\uD1B5\uD1BA\uD1BC\uD1C0\uD1D8\uD1F4\uD1F8\uD207\uD209\uD210\uD22C\uD22D\uD230\uD234\uD23C\uD23D\uD23F\uD241\uD248\uD25C\uFFFD".split("");
      for (j = 0; j != D[197].length; ++j)
        if (D[197][j].charCodeAt(0) !== 65533) {
          e[D[197][j]] = 50432 + j;
          d[50432 + j] = D[197][j];
        }
      D[198] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD78D\uD78E\uD78F\uD791\uD792\uD793\uD794\uD795\uD796\uD797\uD79A\uD79C\uD79E\uD79F\uD7A0\uD7A1\uD7A2\uD7A3\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD264\uD280\uD281\uD284\uD288\uD290\uD291\uD295\uD29C\uD2A0\uD2A4\uD2AC\uD2B1\uD2B8\uD2B9\uD2BC\uD2BF\uD2C0\uD2C2\uD2C8\uD2C9\uD2CB\uD2D4\uD2D8\uD2DC\uD2E4\uD2E5\uD2F0\uD2F1\uD2F4\uD2F8\uD300\uD301\uD303\uD305\uD30C\uD30D\uD30E\uD310\uD314\uD316\uD31C\uD31D\uD31F\uD320\uD321\uD325\uD328\uD329\uD32C\uD330\uD338\uD339\uD33B\uD33C\uD33D\uD344\uD345\uD37C\uD37D\uD380\uD384\uD38C\uD38D\uD38F\uD390\uD391\uD398\uD399\uD39C\uD3A0\uD3A8\uD3A9\uD3AB\uD3AD\uD3B4\uD3B8\uD3BC\uD3C4\uD3C5\uD3C8\uD3C9\uD3D0\uD3D8\uD3E1\uD3E3\uD3EC\uD3ED\uD3F0\uD3F4\uD3FC\uD3FD\uD3FF\uD401\uFFFD".split("");
      for (j = 0; j != D[198].length; ++j)
        if (D[198][j].charCodeAt(0) !== 65533) {
          e[D[198][j]] = 50688 + j;
          d[50688 + j] = D[198][j];
        }
      D[199] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD408\uD41D\uD440\uD444\uD45C\uD460\uD464\uD46D\uD46F\uD478\uD479\uD47C\uD47F\uD480\uD482\uD488\uD489\uD48B\uD48D\uD494\uD4A9\uD4CC\uD4D0\uD4D4\uD4DC\uD4DF\uD4E8\uD4EC\uD4F0\uD4F8\uD4FB\uD4FD\uD504\uD508\uD50C\uD514\uD515\uD517\uD53C\uD53D\uD540\uD544\uD54C\uD54D\uD54F\uD551\uD558\uD559\uD55C\uD560\uD565\uD568\uD569\uD56B\uD56D\uD574\uD575\uD578\uD57C\uD584\uD585\uD587\uD588\uD589\uD590\uD5A5\uD5C8\uD5C9\uD5CC\uD5D0\uD5D2\uD5D8\uD5D9\uD5DB\uD5DD\uD5E4\uD5E5\uD5E8\uD5EC\uD5F4\uD5F5\uD5F7\uD5F9\uD600\uD601\uD604\uD608\uD610\uD611\uD613\uD614\uD615\uD61C\uD620\uFFFD".split("");
      for (j = 0; j != D[199].length; ++j)
        if (D[199][j].charCodeAt(0) !== 65533) {
          e[D[199][j]] = 50944 + j;
          d[50944 + j] = D[199][j];
        }
      D[200] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD624\uD62D\uD638\uD639\uD63C\uD640\uD645\uD648\uD649\uD64B\uD64D\uD651\uD654\uD655\uD658\uD65C\uD667\uD669\uD670\uD671\uD674\uD683\uD685\uD68C\uD68D\uD690\uD694\uD69D\uD69F\uD6A1\uD6A8\uD6AC\uD6B0\uD6B9\uD6BB\uD6C4\uD6C5\uD6C8\uD6CC\uD6D1\uD6D4\uD6D7\uD6D9\uD6E0\uD6E4\uD6E8\uD6F0\uD6F5\uD6FC\uD6FD\uD700\uD704\uD711\uD718\uD719\uD71C\uD720\uD728\uD729\uD72B\uD72D\uD734\uD735\uD738\uD73C\uD744\uD747\uD749\uD750\uD751\uD754\uD756\uD757\uD758\uD759\uD760\uD761\uD763\uD765\uD769\uD76C\uD770\uD774\uD77C\uD77D\uD781\uD788\uD789\uD78C\uD790\uD798\uD799\uD79B\uD79D\uFFFD".split("");
      for (j = 0; j != D[200].length; ++j)
        if (D[200][j].charCodeAt(0) !== 65533) {
          e[D[200][j]] = 51200 + j;
          d[51200 + j] = D[200][j];
        }
      D[202] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u4F3D\u4F73\u5047\u50F9\u52A0\u53EF\u5475\u54E5\u5609\u5AC1\u5BB6\u6687\u67B6\u67B7\u67EF\u6B4C\u73C2\u75C2\u7A3C\u82DB\u8304\u8857\u8888\u8A36\u8CC8\u8DCF\u8EFB\u8FE6\u99D5\u523B\u5374\u5404\u606A\u6164\u6BBC\u73CF\u811A\u89BA\u89D2\u95A3\u4F83\u520A\u58BE\u5978\u59E6\u5E72\u5E79\u61C7\u63C0\u6746\u67EC\u687F\u6F97\u764E\u770B\u78F5\u7A08\u7AFF\u7C21\u809D\u826E\u8271\u8AEB\u9593\u4E6B\u559D\u66F7\u6E34\u78A3\u7AED\u845B\u8910\u874E\u97A8\u52D8\u574E\u582A\u5D4C\u611F\u61BE\u6221\u6562\u67D1\u6A44\u6E1B\u7518\u75B3\u76E3\u77B0\u7D3A\u90AF\u9451\u9452\u9F95\uFFFD".split("");
      for (j = 0; j != D[202].length; ++j)
        if (D[202][j].charCodeAt(0) !== 65533) {
          e[D[202][j]] = 51712 + j;
          d[51712 + j] = D[202][j];
        }
      D[203] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5323\u5CAC\u7532\u80DB\u9240\u9598\u525B\u5808\u59DC\u5CA1\u5D17\u5EB7\u5F3A\u5F4A\u6177\u6C5F\u757A\u7586\u7CE0\u7D73\u7DB1\u7F8C\u8154\u8221\u8591\u8941\u8B1B\u92FC\u964D\u9C47\u4ECB\u4EF7\u500B\u51F1\u584F\u6137\u613E\u6168\u6539\u69EA\u6F11\u75A5\u7686\u76D6\u7B87\u82A5\u84CB\uF900\u93A7\u958B\u5580\u5BA2\u5751\uF901\u7CB3\u7FB9\u91B5\u5028\u53BB\u5C45\u5DE8\u62D2\u636E\u64DA\u64E7\u6E20\u70AC\u795B\u8DDD\u8E1E\uF902\u907D\u9245\u92F8\u4E7E\u4EF6\u5065\u5DFE\u5EFA\u6106\u6957\u8171\u8654\u8E47\u9375\u9A2B\u4E5E\u5091\u6770\u6840\u5109\u528D\u5292\u6AA2\uFFFD".split("");
      for (j = 0; j != D[203].length; ++j)
        if (D[203][j].charCodeAt(0) !== 65533) {
          e[D[203][j]] = 51968 + j;
          d[51968 + j] = D[203][j];
        }
      D[204] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u77BC\u9210\u9ED4\u52AB\u602F\u8FF2\u5048\u61A9\u63ED\u64CA\u683C\u6A84\u6FC0\u8188\u89A1\u9694\u5805\u727D\u72AC\u7504\u7D79\u7E6D\u80A9\u898B\u8B74\u9063\u9D51\u6289\u6C7A\u6F54\u7D50\u7F3A\u8A23\u517C\u614A\u7B9D\u8B19\u9257\u938C\u4EAC\u4FD3\u501E\u50BE\u5106\u52C1\u52CD\u537F\u5770\u5883\u5E9A\u5F91\u6176\u61AC\u64CE\u656C\u666F\u66BB\u66F4\u6897\u6D87\u7085\u70F1\u749F\u74A5\u74CA\u75D9\u786C\u78EC\u7ADF\u7AF6\u7D45\u7D93\u8015\u803F\u811B\u8396\u8B66\u8F15\u9015\u93E1\u9803\u9838\u9A5A\u9BE8\u4FC2\u5553\u583A\u5951\u5B63\u5C46\u60B8\u6212\u6842\u68B0\uFFFD".split("");
      for (j = 0; j != D[204].length; ++j)
        if (D[204][j].charCodeAt(0) !== 65533) {
          e[D[204][j]] = 52224 + j;
          d[52224 + j] = D[204][j];
        }
      D[205] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u68E8\u6EAA\u754C\u7678\u78CE\u7A3D\u7CFB\u7E6B\u7E7C\u8A08\u8AA1\u8C3F\u968E\u9DC4\u53E4\u53E9\u544A\u5471\u56FA\u59D1\u5B64\u5C3B\u5EAB\u62F7\u6537\u6545\u6572\u66A0\u67AF\u69C1\u6CBD\u75FC\u7690\u777E\u7A3F\u7F94\u8003\u80A1\u818F\u82E6\u82FD\u83F0\u85C1\u8831\u88B4\u8AA5\uF903\u8F9C\u932E\u96C7\u9867\u9AD8\u9F13\u54ED\u659B\u66F2\u688F\u7A40\u8C37\u9D60\u56F0\u5764\u5D11\u6606\u68B1\u68CD\u6EFE\u7428\u889E\u9BE4\u6C68\uF904\u9AA8\u4F9B\u516C\u5171\u529F\u5B54\u5DE5\u6050\u606D\u62F1\u63A7\u653B\u73D9\u7A7A\u86A3\u8CA2\u978F\u4E32\u5BE1\u6208\u679C\u74DC\uFFFD".split("");
      for (j = 0; j != D[205].length; ++j)
        if (D[205][j].charCodeAt(0) !== 65533) {
          e[D[205][j]] = 52480 + j;
          d[52480 + j] = D[205][j];
        }
      D[206] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u79D1\u83D3\u8A87\u8AB2\u8DE8\u904E\u934B\u9846\u5ED3\u69E8\u85FF\u90ED\uF905\u51A0\u5B98\u5BEC\u6163\u68FA\u6B3E\u704C\u742F\u74D8\u7BA1\u7F50\u83C5\u89C0\u8CAB\u95DC\u9928\u522E\u605D\u62EC\u9002\u4F8A\u5149\u5321\u58D9\u5EE3\u66E0\u6D38\u709A\u72C2\u73D6\u7B50\u80F1\u945B\u5366\u639B\u7F6B\u4E56\u5080\u584A\u58DE\u602A\u6127\u62D0\u69D0\u9B41\u5B8F\u7D18\u80B1\u8F5F\u4EA4\u50D1\u54AC\u55AC\u5B0C\u5DA0\u5DE7\u652A\u654E\u6821\u6A4B\u72E1\u768E\u77EF\u7D5E\u7FF9\u81A0\u854E\u86DF\u8F03\u8F4E\u90CA\u9903\u9A55\u9BAB\u4E18\u4E45\u4E5D\u4EC7\u4FF1\u5177\u52FE\uFFFD".split("");
      for (j = 0; j != D[206].length; ++j)
        if (D[206][j].charCodeAt(0) !== 65533) {
          e[D[206][j]] = 52736 + j;
          d[52736 + j] = D[206][j];
        }
      D[207] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5340\u53E3\u53E5\u548E\u5614\u5775\u57A2\u5BC7\u5D87\u5ED0\u61FC\u62D8\u6551\u67B8\u67E9\u69CB\u6B50\u6BC6\u6BEC\u6C42\u6E9D\u7078\u72D7\u7396\u7403\u77BF\u77E9\u7A76\u7D7F\u8009\u81FC\u8205\u820A\u82DF\u8862\u8B33\u8CFC\u8EC0\u9011\u90B1\u9264\u92B6\u99D2\u9A45\u9CE9\u9DD7\u9F9C\u570B\u5C40\u83CA\u97A0\u97AB\u9EB4\u541B\u7A98\u7FA4\u88D9\u8ECD\u90E1\u5800\u5C48\u6398\u7A9F\u5BAE\u5F13\u7A79\u7AAE\u828E\u8EAC\u5026\u5238\u52F8\u5377\u5708\u62F3\u6372\u6B0A\u6DC3\u7737\u53A5\u7357\u8568\u8E76\u95D5\u673A\u6AC3\u6F70\u8A6D\u8ECC\u994B\uF906\u6677\u6B78\u8CB4\uFFFD".split("");
      for (j = 0; j != D[207].length; ++j)
        if (D[207][j].charCodeAt(0) !== 65533) {
          e[D[207][j]] = 52992 + j;
          d[52992 + j] = D[207][j];
        }
      D[208] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9B3C\uF907\u53EB\u572D\u594E\u63C6\u69FB\u73EA\u7845\u7ABA\u7AC5\u7CFE\u8475\u898F\u8D73\u9035\u95A8\u52FB\u5747\u7547\u7B60\u83CC\u921E\uF908\u6A58\u514B\u524B\u5287\u621F\u68D8\u6975\u9699\u50C5\u52A4\u52E4\u61C3\u65A4\u6839\u69FF\u747E\u7B4B\u82B9\u83EB\u89B2\u8B39\u8FD1\u9949\uF909\u4ECA\u5997\u64D2\u6611\u6A8E\u7434\u7981\u79BD\u82A9\u887E\u887F\u895F\uF90A\u9326\u4F0B\u53CA\u6025\u6271\u6C72\u7D1A\u7D66\u4E98\u5162\u77DC\u80AF\u4F01\u4F0E\u5176\u5180\u55DC\u5668\u573B\u57FA\u57FC\u5914\u5947\u5993\u5BC4\u5C90\u5D0E\u5DF1\u5E7E\u5FCC\u6280\u65D7\u65E3\uFFFD".split("");
      for (j = 0; j != D[208].length; ++j)
        if (D[208][j].charCodeAt(0) !== 65533) {
          e[D[208][j]] = 53248 + j;
          d[53248 + j] = D[208][j];
        }
      D[209] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u671E\u671F\u675E\u68CB\u68C4\u6A5F\u6B3A\u6C23\u6C7D\u6C82\u6DC7\u7398\u7426\u742A\u7482\u74A3\u7578\u757F\u7881\u78EF\u7941\u7947\u7948\u797A\u7B95\u7D00\u7DBA\u7F88\u8006\u802D\u808C\u8A18\u8B4F\u8C48\u8D77\u9321\u9324\u98E2\u9951\u9A0E\u9A0F\u9A65\u9E92\u7DCA\u4F76\u5409\u62EE\u6854\u91D1\u55AB\u513A\uF90B\uF90C\u5A1C\u61E6\uF90D\u62CF\u62FF\uF90E\uF90F\uF910\uF911\uF912\uF913\u90A3\uF914\uF915\uF916\uF917\uF918\u8AFE\uF919\uF91A\uF91B\uF91C\u6696\uF91D\u7156\uF91E\uF91F\u96E3\uF920\u634F\u637A\u5357\uF921\u678F\u6960\u6E73\uF922\u7537\uF923\uF924\uF925\uFFFD".split("");
      for (j = 0; j != D[209].length; ++j)
        if (D[209][j].charCodeAt(0) !== 65533) {
          e[D[209][j]] = 53504 + j;
          d[53504 + j] = D[209][j];
        }
      D[210] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7D0D\uF926\uF927\u8872\u56CA\u5A18\uF928\uF929\uF92A\uF92B\uF92C\u4E43\uF92D\u5167\u5948\u67F0\u8010\uF92E\u5973\u5E74\u649A\u79CA\u5FF5\u606C\u62C8\u637B\u5BE7\u5BD7\u52AA\uF92F\u5974\u5F29\u6012\uF930\uF931\uF932\u7459\uF933\uF934\uF935\uF936\uF937\uF938\u99D1\uF939\uF93A\uF93B\uF93C\uF93D\uF93E\uF93F\uF940\uF941\uF942\uF943\u6FC3\uF944\uF945\u81BF\u8FB2\u60F1\uF946\uF947\u8166\uF948\uF949\u5C3F\uF94A\uF94B\uF94C\uF94D\uF94E\uF94F\uF950\uF951\u5AE9\u8A25\u677B\u7D10\uF952\uF953\uF954\uF955\uF956\uF957\u80FD\uF958\uF959\u5C3C\u6CE5\u533F\u6EBA\u591A\u8336\uFFFD".split("");
      for (j = 0; j != D[210].length; ++j)
        if (D[210][j].charCodeAt(0) !== 65533) {
          e[D[210][j]] = 53760 + j;
          d[53760 + j] = D[210][j];
        }
      D[211] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u4E39\u4EB6\u4F46\u55AE\u5718\u58C7\u5F56\u65B7\u65E6\u6A80\u6BB5\u6E4D\u77ED\u7AEF\u7C1E\u7DDE\u86CB\u8892\u9132\u935B\u64BB\u6FBE\u737A\u75B8\u9054\u5556\u574D\u61BA\u64D4\u66C7\u6DE1\u6E5B\u6F6D\u6FB9\u75F0\u8043\u81BD\u8541\u8983\u8AC7\u8B5A\u931F\u6C93\u7553\u7B54\u8E0F\u905D\u5510\u5802\u5858\u5E62\u6207\u649E\u68E0\u7576\u7CD6\u87B3\u9EE8\u4EE3\u5788\u576E\u5927\u5C0D\u5CB1\u5E36\u5F85\u6234\u64E1\u73B3\u81FA\u888B\u8CB8\u968A\u9EDB\u5B85\u5FB7\u60B3\u5012\u5200\u5230\u5716\u5835\u5857\u5C0E\u5C60\u5CF6\u5D8B\u5EA6\u5F92\u60BC\u6311\u6389\u6417\u6843\uFFFD".split("");
      for (j = 0; j != D[211].length; ++j)
        if (D[211][j].charCodeAt(0) !== 65533) {
          e[D[211][j]] = 54016 + j;
          d[54016 + j] = D[211][j];
        }
      D[212] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u68F9\u6AC2\u6DD8\u6E21\u6ED4\u6FE4\u71FE\u76DC\u7779\u79B1\u7A3B\u8404\u89A9\u8CED\u8DF3\u8E48\u9003\u9014\u9053\u90FD\u934D\u9676\u97DC\u6BD2\u7006\u7258\u72A2\u7368\u7763\u79BF\u7BE4\u7E9B\u8B80\u58A9\u60C7\u6566\u65FD\u66BE\u6C8C\u711E\u71C9\u8C5A\u9813\u4E6D\u7A81\u4EDD\u51AC\u51CD\u52D5\u540C\u61A7\u6771\u6850\u68DF\u6D1E\u6F7C\u75BC\u77B3\u7AE5\u80F4\u8463\u9285\u515C\u6597\u675C\u6793\u75D8\u7AC7\u8373\uF95A\u8C46\u9017\u982D\u5C6F\u81C0\u829A\u9041\u906F\u920D\u5F97\u5D9D\u6A59\u71C8\u767B\u7B49\u85E4\u8B04\u9127\u9A30\u5587\u61F6\uF95B\u7669\u7F85\uFFFD".split("");
      for (j = 0; j != D[212].length; ++j)
        if (D[212][j].charCodeAt(0) !== 65533) {
          e[D[212][j]] = 54272 + j;
          d[54272 + j] = D[212][j];
        }
      D[213] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u863F\u87BA\u88F8\u908F\uF95C\u6D1B\u70D9\u73DE\u7D61\u843D\uF95D\u916A\u99F1\uF95E\u4E82\u5375\u6B04\u6B12\u703E\u721B\u862D\u9E1E\u524C\u8FA3\u5D50\u64E5\u652C\u6B16\u6FEB\u7C43\u7E9C\u85CD\u8964\u89BD\u62C9\u81D8\u881F\u5ECA\u6717\u6D6A\u72FC\u7405\u746F\u8782\u90DE\u4F86\u5D0D\u5FA0\u840A\u51B7\u63A0\u7565\u4EAE\u5006\u5169\u51C9\u6881\u6A11\u7CAE\u7CB1\u7CE7\u826F\u8AD2\u8F1B\u91CF\u4FB6\u5137\u52F5\u5442\u5EEC\u616E\u623E\u65C5\u6ADA\u6FFE\u792A\u85DC\u8823\u95AD\u9A62\u9A6A\u9E97\u9ECE\u529B\u66C6\u6B77\u701D\u792B\u8F62\u9742\u6190\u6200\u6523\u6F23\uFFFD".split("");
      for (j = 0; j != D[213].length; ++j)
        if (D[213][j].charCodeAt(0) !== 65533) {
          e[D[213][j]] = 54528 + j;
          d[54528 + j] = D[213][j];
        }
      D[214] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7149\u7489\u7DF4\u806F\u84EE\u8F26\u9023\u934A\u51BD\u5217\u52A3\u6D0C\u70C8\u88C2\u5EC9\u6582\u6BAE\u6FC2\u7C3E\u7375\u4EE4\u4F36\u56F9\uF95F\u5CBA\u5DBA\u601C\u73B2\u7B2D\u7F9A\u7FCE\u8046\u901E\u9234\u96F6\u9748\u9818\u9F61\u4F8B\u6FA7\u79AE\u91B4\u96B7\u52DE\uF960\u6488\u64C4\u6AD3\u6F5E\u7018\u7210\u76E7\u8001\u8606\u865C\u8DEF\u8F05\u9732\u9B6F\u9DFA\u9E75\u788C\u797F\u7DA0\u83C9\u9304\u9E7F\u9E93\u8AD6\u58DF\u5F04\u6727\u7027\u74CF\u7C60\u807E\u5121\u7028\u7262\u78CA\u8CC2\u8CDA\u8CF4\u96F7\u4E86\u50DA\u5BEE\u5ED6\u6599\u71CE\u7642\u77AD\u804A\u84FC\uFFFD".split("");
      for (j = 0; j != D[214].length; ++j)
        if (D[214][j].charCodeAt(0) !== 65533) {
          e[D[214][j]] = 54784 + j;
          d[54784 + j] = D[214][j];
        }
      D[215] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u907C\u9B27\u9F8D\u58D8\u5A41\u5C62\u6A13\u6DDA\u6F0F\u763B\u7D2F\u7E37\u851E\u8938\u93E4\u964B\u5289\u65D2\u67F3\u69B4\u6D41\u6E9C\u700F\u7409\u7460\u7559\u7624\u786B\u8B2C\u985E\u516D\u622E\u9678\u4F96\u502B\u5D19\u6DEA\u7DB8\u8F2A\u5F8B\u6144\u6817\uF961\u9686\u52D2\u808B\u51DC\u51CC\u695E\u7A1C\u7DBE\u83F1\u9675\u4FDA\u5229\u5398\u540F\u550E\u5C65\u60A7\u674E\u68A8\u6D6C\u7281\u72F8\u7406\u7483\uF962\u75E2\u7C6C\u7F79\u7FB8\u8389\u88CF\u88E1\u91CC\u91D0\u96E2\u9BC9\u541D\u6F7E\u71D0\u7498\u85FA\u8EAA\u96A3\u9C57\u9E9F\u6797\u6DCB\u7433\u81E8\u9716\u782C\uFFFD".split("");
      for (j = 0; j != D[215].length; ++j)
        if (D[215][j].charCodeAt(0) !== 65533) {
          e[D[215][j]] = 55040 + j;
          d[55040 + j] = D[215][j];
        }
      D[216] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7ACB\u7B20\u7C92\u6469\u746A\u75F2\u78BC\u78E8\u99AC\u9B54\u9EBB\u5BDE\u5E55\u6F20\u819C\u83AB\u9088\u4E07\u534D\u5A29\u5DD2\u5F4E\u6162\u633D\u6669\u66FC\u6EFF\u6F2B\u7063\u779E\u842C\u8513\u883B\u8F13\u9945\u9C3B\u551C\u62B9\u672B\u6CAB\u8309\u896A\u977A\u4EA1\u5984\u5FD8\u5FD9\u671B\u7DB2\u7F54\u8292\u832B\u83BD\u8F1E\u9099\u57CB\u59B9\u5A92\u5BD0\u6627\u679A\u6885\u6BCF\u7164\u7F75\u8CB7\u8CE3\u9081\u9B45\u8108\u8C8A\u964C\u9A40\u9EA5\u5B5F\u6C13\u731B\u76F2\u76DF\u840C\u51AA\u8993\u514D\u5195\u52C9\u68C9\u6C94\u7704\u7720\u7DBF\u7DEC\u9762\u9EB5\u6EC5\uFFFD".split("");
      for (j = 0; j != D[216].length; ++j)
        if (D[216][j].charCodeAt(0) !== 65533) {
          e[D[216][j]] = 55296 + j;
          d[55296 + j] = D[216][j];
        }
      D[217] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8511\u51A5\u540D\u547D\u660E\u669D\u6927\u6E9F\u76BF\u7791\u8317\u84C2\u879F\u9169\u9298\u9CF4\u8882\u4FAE\u5192\u52DF\u59C6\u5E3D\u6155\u6478\u6479\u66AE\u67D0\u6A21\u6BCD\u6BDB\u725F\u7261\u7441\u7738\u77DB\u8017\u82BC\u8305\u8B00\u8B28\u8C8C\u6728\u6C90\u7267\u76EE\u7766\u7A46\u9DA9\u6B7F\u6C92\u5922\u6726\u8499\u536F\u5893\u5999\u5EDF\u63CF\u6634\u6773\u6E3A\u732B\u7AD7\u82D7\u9328\u52D9\u5DEB\u61AE\u61CB\u620A\u62C7\u64AB\u65E0\u6959\u6B66\u6BCB\u7121\u73F7\u755D\u7E46\u821E\u8302\u856A\u8AA3\u8CBF\u9727\u9D61\u58A8\u9ED8\u5011\u520E\u543B\u554F\u6587\uFFFD".split("");
      for (j = 0; j != D[217].length; ++j)
        if (D[217][j].charCodeAt(0) !== 65533) {
          e[D[217][j]] = 55552 + j;
          d[55552 + j] = D[217][j];
        }
      D[218] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6C76\u7D0A\u7D0B\u805E\u868A\u9580\u96EF\u52FF\u6C95\u7269\u5473\u5A9A\u5C3E\u5D4B\u5F4C\u5FAE\u672A\u68B6\u6963\u6E3C\u6E44\u7709\u7C73\u7F8E\u8587\u8B0E\u8FF7\u9761\u9EF4\u5CB7\u60B6\u610D\u61AB\u654F\u65FB\u65FC\u6C11\u6CEF\u739F\u73C9\u7DE1\u9594\u5BC6\u871C\u8B10\u525D\u535A\u62CD\u640F\u64B2\u6734\u6A38\u6CCA\u73C0\u749E\u7B94\u7C95\u7E1B\u818A\u8236\u8584\u8FEB\u96F9\u99C1\u4F34\u534A\u53CD\u53DB\u62CC\u642C\u6500\u6591\u69C3\u6CEE\u6F58\u73ED\u7554\u7622\u76E4\u76FC\u78D0\u78FB\u792C\u7D46\u822C\u87E0\u8FD4\u9812\u98EF\u52C3\u62D4\u64A5\u6E24\u6F51\uFFFD".split("");
      for (j = 0; j != D[218].length; ++j)
        if (D[218][j].charCodeAt(0) !== 65533) {
          e[D[218][j]] = 55808 + j;
          d[55808 + j] = D[218][j];
        }
      D[219] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u767C\u8DCB\u91B1\u9262\u9AEE\u9B43\u5023\u508D\u574A\u59A8\u5C28\u5E47\u5F77\u623F\u653E\u65B9\u65C1\u6609\u678B\u699C\u6EC2\u78C5\u7D21\u80AA\u8180\u822B\u82B3\u84A1\u868C\u8A2A\u8B17\u90A6\u9632\u9F90\u500D\u4FF3\uF963\u57F9\u5F98\u62DC\u6392\u676F\u6E43\u7119\u76C3\u80CC\u80DA\u88F4\u88F5\u8919\u8CE0\u8F29\u914D\u966A\u4F2F\u4F70\u5E1B\u67CF\u6822\u767D\u767E\u9B44\u5E61\u6A0A\u7169\u71D4\u756A\uF964\u7E41\u8543\u85E9\u98DC\u4F10\u7B4F\u7F70\u95A5\u51E1\u5E06\u68B5\u6C3E\u6C4E\u6CDB\u72AF\u7BC4\u8303\u6CD5\u743A\u50FB\u5288\u58C1\u64D8\u6A97\u74A7\u7656\uFFFD".split("");
      for (j = 0; j != D[219].length; ++j)
        if (D[219][j].charCodeAt(0) !== 65533) {
          e[D[219][j]] = 56064 + j;
          d[56064 + j] = D[219][j];
        }
      D[220] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u78A7\u8617\u95E2\u9739\uF965\u535E\u5F01\u8B8A\u8FA8\u8FAF\u908A\u5225\u77A5\u9C49\u9F08\u4E19\u5002\u5175\u5C5B\u5E77\u661E\u663A\u67C4\u68C5\u70B3\u7501\u75C5\u79C9\u7ADD\u8F27\u9920\u9A08\u4FDD\u5821\u5831\u5BF6\u666E\u6B65\u6D11\u6E7A\u6F7D\u73E4\u752B\u83E9\u88DC\u8913\u8B5C\u8F14\u4F0F\u50D5\u5310\u535C\u5B93\u5FA9\u670D\u798F\u8179\u832F\u8514\u8907\u8986\u8F39\u8F3B\u99A5\u9C12\u672C\u4E76\u4FF8\u5949\u5C01\u5CEF\u5CF0\u6367\u68D2\u70FD\u71A2\u742B\u7E2B\u84EC\u8702\u9022\u92D2\u9CF3\u4E0D\u4ED8\u4FEF\u5085\u5256\u526F\u5426\u5490\u57E0\u592B\u5A66\uFFFD".split("");
      for (j = 0; j != D[220].length; ++j)
        if (D[220][j].charCodeAt(0) !== 65533) {
          e[D[220][j]] = 56320 + j;
          d[56320 + j] = D[220][j];
        }
      D[221] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5B5A\u5B75\u5BCC\u5E9C\uF966\u6276\u6577\u65A7\u6D6E\u6EA5\u7236\u7B26\u7C3F\u7F36\u8150\u8151\u819A\u8240\u8299\u83A9\u8A03\u8CA0\u8CE6\u8CFB\u8D74\u8DBA\u90E8\u91DC\u961C\u9644\u99D9\u9CE7\u5317\u5206\u5429\u5674\u58B3\u5954\u596E\u5FFF\u61A4\u626E\u6610\u6C7E\u711A\u76C6\u7C89\u7CDE\u7D1B\u82AC\u8CC1\u96F0\uF967\u4F5B\u5F17\u5F7F\u62C2\u5D29\u670B\u68DA\u787C\u7E43\u9D6C\u4E15\u5099\u5315\u532A\u5351\u5983\u5A62\u5E87\u60B2\u618A\u6249\u6279\u6590\u6787\u69A7\u6BD4\u6BD6\u6BD7\u6BD8\u6CB8\uF968\u7435\u75FA\u7812\u7891\u79D5\u79D8\u7C83\u7DCB\u7FE1\u80A5\uFFFD".split("");
      for (j = 0; j != D[221].length; ++j)
        if (D[221][j].charCodeAt(0) !== 65533) {
          e[D[221][j]] = 56576 + j;
          d[56576 + j] = D[221][j];
        }
      D[222] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u813E\u81C2\u83F2\u871A\u88E8\u8AB9\u8B6C\u8CBB\u9119\u975E\u98DB\u9F3B\u56AC\u5B2A\u5F6C\u658C\u6AB3\u6BAF\u6D5C\u6FF1\u7015\u725D\u73AD\u8CA7\u8CD3\u983B\u6191\u6C37\u8058\u9A01\u4E4D\u4E8B\u4E9B\u4ED5\u4F3A\u4F3C\u4F7F\u4FDF\u50FF\u53F2\u53F8\u5506\u55E3\u56DB\u58EB\u5962\u5A11\u5BEB\u5BFA\u5C04\u5DF3\u5E2B\u5F99\u601D\u6368\u659C\u65AF\u67F6\u67FB\u68AD\u6B7B\u6C99\u6CD7\u6E23\u7009\u7345\u7802\u793E\u7940\u7960\u79C1\u7BE9\u7D17\u7D72\u8086\u820D\u838E\u84D1\u86C7\u88DF\u8A50\u8A5E\u8B1D\u8CDC\u8D66\u8FAD\u90AA\u98FC\u99DF\u9E9D\u524A\uF969\u6714\uF96A\uFFFD".split("");
      for (j = 0; j != D[222].length; ++j)
        if (D[222][j].charCodeAt(0) !== 65533) {
          e[D[222][j]] = 56832 + j;
          d[56832 + j] = D[222][j];
        }
      D[223] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5098\u522A\u5C71\u6563\u6C55\u73CA\u7523\u759D\u7B97\u849C\u9178\u9730\u4E77\u6492\u6BBA\u715E\u85A9\u4E09\uF96B\u6749\u68EE\u6E17\u829F\u8518\u886B\u63F7\u6F81\u9212\u98AF\u4E0A\u50B7\u50CF\u511F\u5546\u55AA\u5617\u5B40\u5C19\u5CE0\u5E38\u5E8A\u5EA0\u5EC2\u60F3\u6851\u6A61\u6E58\u723D\u7240\u72C0\u76F8\u7965\u7BB1\u7FD4\u88F3\u89F4\u8A73\u8C61\u8CDE\u971C\u585E\u74BD\u8CFD\u55C7\uF96C\u7A61\u7D22\u8272\u7272\u751F\u7525\uF96D\u7B19\u5885\u58FB\u5DBC\u5E8F\u5EB6\u5F90\u6055\u6292\u637F\u654D\u6691\u66D9\u66F8\u6816\u68F2\u7280\u745E\u7B6E\u7D6E\u7DD6\u7F72\uFFFD".split("");
      for (j = 0; j != D[223].length; ++j)
        if (D[223][j].charCodeAt(0) !== 65533) {
          e[D[223][j]] = 57088 + j;
          d[57088 + j] = D[223][j];
        }
      D[224] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u80E5\u8212\u85AF\u897F\u8A93\u901D\u92E4\u9ECD\u9F20\u5915\u596D\u5E2D\u60DC\u6614\u6673\u6790\u6C50\u6DC5\u6F5F\u77F3\u78A9\u84C6\u91CB\u932B\u4ED9\u50CA\u5148\u5584\u5B0B\u5BA3\u6247\u657E\u65CB\u6E32\u717D\u7401\u7444\u7487\u74BF\u766C\u79AA\u7DDA\u7E55\u7FA8\u817A\u81B3\u8239\u861A\u87EC\u8A75\u8DE3\u9078\u9291\u9425\u994D\u9BAE\u5368\u5C51\u6954\u6CC4\u6D29\u6E2B\u820C\u859B\u893B\u8A2D\u8AAA\u96EA\u9F67\u5261\u66B9\u6BB2\u7E96\u87FE\u8D0D\u9583\u965D\u651D\u6D89\u71EE\uF96E\u57CE\u59D3\u5BAC\u6027\u60FA\u6210\u661F\u665F\u7329\u73F9\u76DB\u7701\u7B6C\uFFFD".split("");
      for (j = 0; j != D[224].length; ++j)
        if (D[224][j].charCodeAt(0) !== 65533) {
          e[D[224][j]] = 57344 + j;
          d[57344 + j] = D[224][j];
        }
      D[225] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8056\u8072\u8165\u8AA0\u9192\u4E16\u52E2\u6B72\u6D17\u7A05\u7B39\u7D30\uF96F\u8CB0\u53EC\u562F\u5851\u5BB5\u5C0F\u5C11\u5DE2\u6240\u6383\u6414\u662D\u68B3\u6CBC\u6D88\u6EAF\u701F\u70A4\u71D2\u7526\u758F\u758E\u7619\u7B11\u7BE0\u7C2B\u7D20\u7D39\u852C\u856D\u8607\u8A34\u900D\u9061\u90B5\u92B7\u97F6\u9A37\u4FD7\u5C6C\u675F\u6D91\u7C9F\u7E8C\u8B16\u8D16\u901F\u5B6B\u5DFD\u640D\u84C0\u905C\u98E1\u7387\u5B8B\u609A\u677E\u6DDE\u8A1F\u8AA6\u9001\u980C\u5237\uF970\u7051\u788E\u9396\u8870\u91D7\u4FEE\u53D7\u55FD\u56DA\u5782\u58FD\u5AC2\u5B88\u5CAB\u5CC0\u5E25\u6101\uFFFD".split("");
      for (j = 0; j != D[225].length; ++j)
        if (D[225][j].charCodeAt(0) !== 65533) {
          e[D[225][j]] = 57600 + j;
          d[57600 + j] = D[225][j];
        }
      D[226] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u620D\u624B\u6388\u641C\u6536\u6578\u6A39\u6B8A\u6C34\u6D19\u6F31\u71E7\u72E9\u7378\u7407\u74B2\u7626\u7761\u79C0\u7A57\u7AEA\u7CB9\u7D8F\u7DAC\u7E61\u7F9E\u8129\u8331\u8490\u84DA\u85EA\u8896\u8AB0\u8B90\u8F38\u9042\u9083\u916C\u9296\u92B9\u968B\u96A7\u96A8\u96D6\u9700\u9808\u9996\u9AD3\u9B1A\u53D4\u587E\u5919\u5B70\u5BBF\u6DD1\u6F5A\u719F\u7421\u74B9\u8085\u83FD\u5DE1\u5F87\u5FAA\u6042\u65EC\u6812\u696F\u6A53\u6B89\u6D35\u6DF3\u73E3\u76FE\u77AC\u7B4D\u7D14\u8123\u821C\u8340\u84F4\u8563\u8A62\u8AC4\u9187\u931E\u9806\u99B4\u620C\u8853\u8FF0\u9265\u5D07\u5D27\uFFFD".split("");
      for (j = 0; j != D[226].length; ++j)
        if (D[226][j].charCodeAt(0) !== 65533) {
          e[D[226][j]] = 57856 + j;
          d[57856 + j] = D[226][j];
        }
      D[227] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5D69\u745F\u819D\u8768\u6FD5\u62FE\u7FD2\u8936\u8972\u4E1E\u4E58\u50E7\u52DD\u5347\u627F\u6607\u7E69\u8805\u965E\u4F8D\u5319\u5636\u59CB\u5AA4\u5C38\u5C4E\u5C4D\u5E02\u5F11\u6043\u65BD\u662F\u6642\u67BE\u67F4\u731C\u77E2\u793A\u7FC5\u8494\u84CD\u8996\u8A66\u8A69\u8AE1\u8C55\u8C7A\u57F4\u5BD4\u5F0F\u606F\u62ED\u690D\u6B96\u6E5C\u7184\u7BD2\u8755\u8B58\u8EFE\u98DF\u98FE\u4F38\u4F81\u4FE1\u547B\u5A20\u5BB8\u613C\u65B0\u6668\u71FC\u7533\u795E\u7D33\u814E\u81E3\u8398\u85AA\u85CE\u8703\u8A0A\u8EAB\u8F9B\uF971\u8FC5\u5931\u5BA4\u5BE6\u6089\u5BE9\u5C0B\u5FC3\u6C81\uFFFD".split("");
      for (j = 0; j != D[227].length; ++j)
        if (D[227][j].charCodeAt(0) !== 65533) {
          e[D[227][j]] = 58112 + j;
          d[58112 + j] = D[227][j];
        }
      D[228] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uF972\u6DF1\u700B\u751A\u82AF\u8AF6\u4EC0\u5341\uF973\u96D9\u6C0F\u4E9E\u4FC4\u5152\u555E\u5A25\u5CE8\u6211\u7259\u82BD\u83AA\u86FE\u8859\u8A1D\u963F\u96C5\u9913\u9D09\u9D5D\u580A\u5CB3\u5DBD\u5E44\u60E1\u6115\u63E1\u6A02\u6E25\u9102\u9354\u984E\u9C10\u9F77\u5B89\u5CB8\u6309\u664F\u6848\u773C\u96C1\u978D\u9854\u9B9F\u65A1\u8B01\u8ECB\u95BC\u5535\u5CA9\u5DD6\u5EB5\u6697\u764C\u83F4\u95C7\u58D3\u62BC\u72CE\u9D28\u4EF0\u592E\u600F\u663B\u6B83\u79E7\u9D26\u5393\u54C0\u57C3\u5D16\u611B\u66D6\u6DAF\u788D\u827E\u9698\u9744\u5384\u627C\u6396\u6DB2\u7E0A\u814B\u984D\uFFFD".split("");
      for (j = 0; j != D[228].length; ++j)
        if (D[228][j].charCodeAt(0) !== 65533) {
          e[D[228][j]] = 58368 + j;
          d[58368 + j] = D[228][j];
        }
      D[229] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6AFB\u7F4C\u9DAF\u9E1A\u4E5F\u503B\u51B6\u591C\u60F9\u63F6\u6930\u723A\u8036\uF974\u91CE\u5F31\uF975\uF976\u7D04\u82E5\u846F\u84BB\u85E5\u8E8D\uF977\u4F6F\uF978\uF979\u58E4\u5B43\u6059\u63DA\u6518\u656D\u6698\uF97A\u694A\u6A23\u6D0B\u7001\u716C\u75D2\u760D\u79B3\u7A70\uF97B\u7F8A\uF97C\u8944\uF97D\u8B93\u91C0\u967D\uF97E\u990A\u5704\u5FA1\u65BC\u6F01\u7600\u79A6\u8A9E\u99AD\u9B5A\u9F6C\u5104\u61B6\u6291\u6A8D\u81C6\u5043\u5830\u5F66\u7109\u8A00\u8AFA\u5B7C\u8616\u4FFA\u513C\u56B4\u5944\u63A9\u6DF9\u5DAA\u696D\u5186\u4E88\u4F59\uF97F\uF980\uF981\u5982\uF982\uFFFD".split("");
      for (j = 0; j != D[229].length; ++j)
        if (D[229][j].charCodeAt(0) !== 65533) {
          e[D[229][j]] = 58624 + j;
          d[58624 + j] = D[229][j];
        }
      D[230] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uF983\u6B5F\u6C5D\uF984\u74B5\u7916\uF985\u8207\u8245\u8339\u8F3F\u8F5D\uF986\u9918\uF987\uF988\uF989\u4EA6\uF98A\u57DF\u5F79\u6613\uF98B\uF98C\u75AB\u7E79\u8B6F\uF98D\u9006\u9A5B\u56A5\u5827\u59F8\u5A1F\u5BB4\uF98E\u5EF6\uF98F\uF990\u6350\u633B\uF991\u693D\u6C87\u6CBF\u6D8E\u6D93\u6DF5\u6F14\uF992\u70DF\u7136\u7159\uF993\u71C3\u71D5\uF994\u784F\u786F\uF995\u7B75\u7DE3\uF996\u7E2F\uF997\u884D\u8EDF\uF998\uF999\uF99A\u925B\uF99B\u9CF6\uF99C\uF99D\uF99E\u6085\u6D85\uF99F\u71B1\uF9A0\uF9A1\u95B1\u53AD\uF9A2\uF9A3\uF9A4\u67D3\uF9A5\u708E\u7130\u7430\u8276\u82D2\uFFFD".split("");
      for (j = 0; j != D[230].length; ++j)
        if (D[230][j].charCodeAt(0) !== 65533) {
          e[D[230][j]] = 58880 + j;
          d[58880 + j] = D[230][j];
        }
      D[231] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uF9A6\u95BB\u9AE5\u9E7D\u66C4\uF9A7\u71C1\u8449\uF9A8\uF9A9\u584B\uF9AA\uF9AB\u5DB8\u5F71\uF9AC\u6620\u668E\u6979\u69AE\u6C38\u6CF3\u6E36\u6F41\u6FDA\u701B\u702F\u7150\u71DF\u7370\uF9AD\u745B\uF9AE\u74D4\u76C8\u7A4E\u7E93\uF9AF\uF9B0\u82F1\u8A60\u8FCE\uF9B1\u9348\uF9B2\u9719\uF9B3\uF9B4\u4E42\u502A\uF9B5\u5208\u53E1\u66F3\u6C6D\u6FCA\u730A\u777F\u7A62\u82AE\u85DD\u8602\uF9B6\u88D4\u8A63\u8B7D\u8C6B\uF9B7\u92B3\uF9B8\u9713\u9810\u4E94\u4F0D\u4FC9\u50B2\u5348\u543E\u5433\u55DA\u5862\u58BA\u5967\u5A1B\u5BE4\u609F\uF9B9\u61CA\u6556\u65FF\u6664\u68A7\u6C5A\u6FB3\uFFFD".split("");
      for (j = 0; j != D[231].length; ++j)
        if (D[231][j].charCodeAt(0) !== 65533) {
          e[D[231][j]] = 59136 + j;
          d[59136 + j] = D[231][j];
        }
      D[232] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u70CF\u71AC\u7352\u7B7D\u8708\u8AA4\u9C32\u9F07\u5C4B\u6C83\u7344\u7389\u923A\u6EAB\u7465\u761F\u7A69\u7E15\u860A\u5140\u58C5\u64C1\u74EE\u7515\u7670\u7FC1\u9095\u96CD\u9954\u6E26\u74E6\u7AA9\u7AAA\u81E5\u86D9\u8778\u8A1B\u5A49\u5B8C\u5B9B\u68A1\u6900\u6D63\u73A9\u7413\u742C\u7897\u7DE9\u7FEB\u8118\u8155\u839E\u8C4C\u962E\u9811\u66F0\u5F80\u65FA\u6789\u6C6A\u738B\u502D\u5A03\u6B6A\u77EE\u5916\u5D6C\u5DCD\u7325\u754F\uF9BA\uF9BB\u50E5\u51F9\u582F\u592D\u5996\u59DA\u5BE5\uF9BC\uF9BD\u5DA2\u62D7\u6416\u6493\u64FE\uF9BE\u66DC\uF9BF\u6A48\uF9C0\u71FF\u7464\uF9C1\uFFFD".split("");
      for (j = 0; j != D[232].length; ++j)
        if (D[232][j].charCodeAt(0) !== 65533) {
          e[D[232][j]] = 59392 + j;
          d[59392 + j] = D[232][j];
        }
      D[233] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7A88\u7AAF\u7E47\u7E5E\u8000\u8170\uF9C2\u87EF\u8981\u8B20\u9059\uF9C3\u9080\u9952\u617E\u6B32\u6D74\u7E1F\u8925\u8FB1\u4FD1\u50AD\u5197\u52C7\u57C7\u5889\u5BB9\u5EB8\u6142\u6995\u6D8C\u6E67\u6EB6\u7194\u7462\u7528\u752C\u8073\u8338\u84C9\u8E0A\u9394\u93DE\uF9C4\u4E8E\u4F51\u5076\u512A\u53C8\u53CB\u53F3\u5B87\u5BD3\u5C24\u611A\u6182\u65F4\u725B\u7397\u7440\u76C2\u7950\u7991\u79B9\u7D06\u7FBD\u828B\u85D5\u865E\u8FC2\u9047\u90F5\u91EA\u9685\u96E8\u96E9\u52D6\u5F67\u65ED\u6631\u682F\u715C\u7A36\u90C1\u980A\u4E91\uF9C5\u6A52\u6B9E\u6F90\u7189\u8018\u82B8\u8553\uFFFD".split("");
      for (j = 0; j != D[233].length; ++j)
        if (D[233][j].charCodeAt(0) !== 65533) {
          e[D[233][j]] = 59648 + j;
          d[59648 + j] = D[233][j];
        }
      D[234] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u904B\u9695\u96F2\u97FB\u851A\u9B31\u4E90\u718A\u96C4\u5143\u539F\u54E1\u5713\u5712\u57A3\u5A9B\u5AC4\u5BC3\u6028\u613F\u63F4\u6C85\u6D39\u6E72\u6E90\u7230\u733F\u7457\u82D1\u8881\u8F45\u9060\uF9C6\u9662\u9858\u9D1B\u6708\u8D8A\u925E\u4F4D\u5049\u50DE\u5371\u570D\u59D4\u5A01\u5C09\u6170\u6690\u6E2D\u7232\u744B\u7DEF\u80C3\u840E\u8466\u853F\u875F\u885B\u8918\u8B02\u9055\u97CB\u9B4F\u4E73\u4F91\u5112\u516A\uF9C7\u552F\u55A9\u5B7A\u5BA5\u5E7C\u5E7D\u5EBE\u60A0\u60DF\u6108\u6109\u63C4\u6538\u6709\uF9C8\u67D4\u67DA\uF9C9\u6961\u6962\u6CB9\u6D27\uF9CA\u6E38\uF9CB\uFFFD".split("");
      for (j = 0; j != D[234].length; ++j)
        if (D[234][j].charCodeAt(0) !== 65533) {
          e[D[234][j]] = 59904 + j;
          d[59904 + j] = D[234][j];
        }
      D[235] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6FE1\u7336\u7337\uF9CC\u745C\u7531\uF9CD\u7652\uF9CE\uF9CF\u7DAD\u81FE\u8438\u88D5\u8A98\u8ADB\u8AED\u8E30\u8E42\u904A\u903E\u907A\u9149\u91C9\u936E\uF9D0\uF9D1\u5809\uF9D2\u6BD3\u8089\u80B2\uF9D3\uF9D4\u5141\u596B\u5C39\uF9D5\uF9D6\u6F64\u73A7\u80E4\u8D07\uF9D7\u9217\u958F\uF9D8\uF9D9\uF9DA\uF9DB\u807F\u620E\u701C\u7D68\u878D\uF9DC\u57A0\u6069\u6147\u6BB7\u8ABE\u9280\u96B1\u4E59\u541F\u6DEB\u852D\u9670\u97F3\u98EE\u63D6\u6CE3\u9091\u51DD\u61C9\u81BA\u9DF9\u4F9D\u501A\u5100\u5B9C\u610F\u61FF\u64EC\u6905\u6BC5\u7591\u77E3\u7FA9\u8264\u858F\u87FB\u8863\u8ABC\uFFFD".split("");
      for (j = 0; j != D[235].length; ++j)
        if (D[235][j].charCodeAt(0) !== 65533) {
          e[D[235][j]] = 60160 + j;
          d[60160 + j] = D[235][j];
        }
      D[236] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8B70\u91AB\u4E8C\u4EE5\u4F0A\uF9DD\uF9DE\u5937\u59E8\uF9DF\u5DF2\u5F1B\u5F5B\u6021\uF9E0\uF9E1\uF9E2\uF9E3\u723E\u73E5\uF9E4\u7570\u75CD\uF9E5\u79FB\uF9E6\u800C\u8033\u8084\u82E1\u8351\uF9E7\uF9E8\u8CBD\u8CB3\u9087\uF9E9\uF9EA\u98F4\u990C\uF9EB\uF9EC\u7037\u76CA\u7FCA\u7FCC\u7FFC\u8B1A\u4EBA\u4EC1\u5203\u5370\uF9ED\u54BD\u56E0\u59FB\u5BC5\u5F15\u5FCD\u6E6E\uF9EE\uF9EF\u7D6A\u8335\uF9F0\u8693\u8A8D\uF9F1\u976D\u9777\uF9F2\uF9F3\u4E00\u4F5A\u4F7E\u58F9\u65E5\u6EA2\u9038\u93B0\u99B9\u4EFB\u58EC\u598A\u59D9\u6041\uF9F4\uF9F5\u7A14\uF9F6\u834F\u8CC3\u5165\u5344\uFFFD".split("");
      for (j = 0; j != D[236].length; ++j)
        if (D[236][j].charCodeAt(0) !== 65533) {
          e[D[236][j]] = 60416 + j;
          d[60416 + j] = D[236][j];
        }
      D[237] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uF9F7\uF9F8\uF9F9\u4ECD\u5269\u5B55\u82BF\u4ED4\u523A\u54A8\u59C9\u59FF\u5B50\u5B57\u5B5C\u6063\u6148\u6ECB\u7099\u716E\u7386\u74F7\u75B5\u78C1\u7D2B\u8005\u81EA\u8328\u8517\u85C9\u8AEE\u8CC7\u96CC\u4F5C\u52FA\u56BC\u65AB\u6628\u707C\u70B8\u7235\u7DBD\u828D\u914C\u96C0\u9D72\u5B71\u68E7\u6B98\u6F7A\u76DE\u5C91\u66AB\u6F5B\u7BB4\u7C2A\u8836\u96DC\u4E08\u4ED7\u5320\u5834\u58BB\u58EF\u596C\u5C07\u5E33\u5E84\u5F35\u638C\u66B2\u6756\u6A1F\u6AA3\u6B0C\u6F3F\u7246\uF9FA\u7350\u748B\u7AE0\u7CA7\u8178\u81DF\u81E7\u838A\u846C\u8523\u8594\u85CF\u88DD\u8D13\u91AC\u9577\uFFFD".split("");
      for (j = 0; j != D[237].length; ++j)
        if (D[237][j].charCodeAt(0) !== 65533) {
          e[D[237][j]] = 60672 + j;
          d[60672 + j] = D[237][j];
        }
      D[238] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u969C\u518D\u54C9\u5728\u5BB0\u624D\u6750\u683D\u6893\u6E3D\u6ED3\u707D\u7E21\u88C1\u8CA1\u8F09\u9F4B\u9F4E\u722D\u7B8F\u8ACD\u931A\u4F47\u4F4E\u5132\u5480\u59D0\u5E95\u62B5\u6775\u696E\u6A17\u6CAE\u6E1A\u72D9\u732A\u75BD\u7BB8\u7D35\u82E7\u83F9\u8457\u85F7\u8A5B\u8CAF\u8E87\u9019\u90B8\u96CE\u9F5F\u52E3\u540A\u5AE1\u5BC2\u6458\u6575\u6EF4\u72C4\uF9FB\u7684\u7A4D\u7B1B\u7C4D\u7E3E\u7FDF\u837B\u8B2B\u8CCA\u8D64\u8DE1\u8E5F\u8FEA\u8FF9\u9069\u93D1\u4F43\u4F7A\u50B3\u5168\u5178\u524D\u526A\u5861\u587C\u5960\u5C08\u5C55\u5EDB\u609B\u6230\u6813\u6BBF\u6C08\u6FB1\uFFFD".split("");
      for (j = 0; j != D[238].length; ++j)
        if (D[238][j].charCodeAt(0) !== 65533) {
          e[D[238][j]] = 60928 + j;
          d[60928 + j] = D[238][j];
        }
      D[239] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u714E\u7420\u7530\u7538\u7551\u7672\u7B4C\u7B8B\u7BAD\u7BC6\u7E8F\u8A6E\u8F3E\u8F49\u923F\u9293\u9322\u942B\u96FB\u985A\u986B\u991E\u5207\u622A\u6298\u6D59\u7664\u7ACA\u7BC0\u7D76\u5360\u5CBE\u5E97\u6F38\u70B9\u7C98\u9711\u9B8E\u9EDE\u63A5\u647A\u8776\u4E01\u4E95\u4EAD\u505C\u5075\u5448\u59C3\u5B9A\u5E40\u5EAD\u5EF7\u5F81\u60C5\u633A\u653F\u6574\u65CC\u6676\u6678\u67FE\u6968\u6A89\u6B63\u6C40\u6DC0\u6DE8\u6E1F\u6E5E\u701E\u70A1\u738E\u73FD\u753A\u775B\u7887\u798E\u7A0B\u7A7D\u7CBE\u7D8E\u8247\u8A02\u8AEA\u8C9E\u912D\u914A\u91D8\u9266\u92CC\u9320\u9706\u9756\uFFFD".split("");
      for (j = 0; j != D[239].length; ++j)
        if (D[239][j].charCodeAt(0) !== 65533) {
          e[D[239][j]] = 61184 + j;
          d[61184 + j] = D[239][j];
        }
      D[240] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u975C\u9802\u9F0E\u5236\u5291\u557C\u5824\u5E1D\u5F1F\u608C\u63D0\u68AF\u6FDF\u796D\u7B2C\u81CD\u85BA\u88FD\u8AF8\u8E44\u918D\u9664\u969B\u973D\u984C\u9F4A\u4FCE\u5146\u51CB\u52A9\u5632\u5F14\u5F6B\u63AA\u64CD\u65E9\u6641\u66FA\u66F9\u671D\u689D\u68D7\u69FD\u6F15\u6F6E\u7167\u71E5\u722A\u74AA\u773A\u7956\u795A\u79DF\u7A20\u7A95\u7C97\u7CDF\u7D44\u7E70\u8087\u85FB\u86A4\u8A54\u8ABF\u8D99\u8E81\u9020\u906D\u91E3\u963B\u96D5\u9CE5\u65CF\u7C07\u8DB3\u93C3\u5B58\u5C0A\u5352\u62D9\u731D\u5027\u5B97\u5F9E\u60B0\u616B\u68D5\u6DD9\u742E\u7A2E\u7D42\u7D9C\u7E31\u816B\uFFFD".split("");
      for (j = 0; j != D[240].length; ++j)
        if (D[240][j].charCodeAt(0) !== 65533) {
          e[D[240][j]] = 61440 + j;
          d[61440 + j] = D[240][j];
        }
      D[241] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8E2A\u8E35\u937E\u9418\u4F50\u5750\u5DE6\u5EA7\u632B\u7F6A\u4E3B\u4F4F\u4F8F\u505A\u59DD\u80C4\u546A\u5468\u55FE\u594F\u5B99\u5DDE\u5EDA\u665D\u6731\u67F1\u682A\u6CE8\u6D32\u6E4A\u6F8D\u70B7\u73E0\u7587\u7C4C\u7D02\u7D2C\u7DA2\u821F\u86DB\u8A3B\u8A85\u8D70\u8E8A\u8F33\u9031\u914E\u9152\u9444\u99D0\u7AF9\u7CA5\u4FCA\u5101\u51C6\u57C8\u5BEF\u5CFB\u6659\u6A3D\u6D5A\u6E96\u6FEC\u710C\u756F\u7AE3\u8822\u9021\u9075\u96CB\u99FF\u8301\u4E2D\u4EF2\u8846\u91CD\u537D\u6ADB\u696B\u6C41\u847A\u589E\u618E\u66FE\u62EF\u70DD\u7511\u75C7\u7E52\u84B8\u8B49\u8D08\u4E4B\u53EA\uFFFD".split("");
      for (j = 0; j != D[241].length; ++j)
        if (D[241][j].charCodeAt(0) !== 65533) {
          e[D[241][j]] = 61696 + j;
          d[61696 + j] = D[241][j];
        }
      D[242] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u54AB\u5730\u5740\u5FD7\u6301\u6307\u646F\u652F\u65E8\u667A\u679D\u67B3\u6B62\u6C60\u6C9A\u6F2C\u77E5\u7825\u7949\u7957\u7D19\u80A2\u8102\u81F3\u829D\u82B7\u8718\u8A8C\uF9FC\u8D04\u8DBE\u9072\u76F4\u7A19\u7A37\u7E54\u8077\u5507\u55D4\u5875\u632F\u6422\u6649\u664B\u686D\u699B\u6B84\u6D25\u6EB1\u73CD\u7468\u74A1\u755B\u75B9\u76E1\u771E\u778B\u79E6\u7E09\u7E1D\u81FB\u852F\u8897\u8A3A\u8CD1\u8EEB\u8FB0\u9032\u93AD\u9663\u9673\u9707\u4F84\u53F1\u59EA\u5AC9\u5E19\u684E\u74C6\u75BE\u79E9\u7A92\u81A3\u86ED\u8CEA\u8DCC\u8FED\u659F\u6715\uF9FD\u57F7\u6F57\u7DDD\u8F2F\uFFFD".split("");
      for (j = 0; j != D[242].length; ++j)
        if (D[242][j].charCodeAt(0) !== 65533) {
          e[D[242][j]] = 61952 + j;
          d[61952 + j] = D[242][j];
        }
      D[243] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u93F6\u96C6\u5FB5\u61F2\u6F84\u4E14\u4F98\u501F\u53C9\u55DF\u5D6F\u5DEE\u6B21\u6B64\u78CB\u7B9A\uF9FE\u8E49\u8ECA\u906E\u6349\u643E\u7740\u7A84\u932F\u947F\u9F6A\u64B0\u6FAF\u71E6\u74A8\u74DA\u7AC4\u7C12\u7E82\u7CB2\u7E98\u8B9A\u8D0A\u947D\u9910\u994C\u5239\u5BDF\u64E6\u672D\u7D2E\u50ED\u53C3\u5879\u6158\u6159\u61FA\u65AC\u7AD9\u8B92\u8B96\u5009\u5021\u5275\u5531\u5A3C\u5EE0\u5F70\u6134\u655E\u660C\u6636\u66A2\u69CD\u6EC4\u6F32\u7316\u7621\u7A93\u8139\u8259\u83D6\u84BC\u50B5\u57F0\u5BC0\u5BE8\u5F69\u63A1\u7826\u7DB5\u83DC\u8521\u91C7\u91F5\u518A\u67F5\u7B56\uFFFD".split("");
      for (j = 0; j != D[243].length; ++j)
        if (D[243][j].charCodeAt(0) !== 65533) {
          e[D[243][j]] = 62208 + j;
          d[62208 + j] = D[243][j];
        }
      D[244] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8CAC\u51C4\u59BB\u60BD\u8655\u501C\uF9FF\u5254\u5C3A\u617D\u621A\u62D3\u64F2\u65A5\u6ECC\u7620\u810A\u8E60\u965F\u96BB\u4EDF\u5343\u5598\u5929\u5DDD\u64C5\u6CC9\u6DFA\u7394\u7A7F\u821B\u85A6\u8CE4\u8E10\u9077\u91E7\u95E1\u9621\u97C6\u51F8\u54F2\u5586\u5FB9\u64A4\u6F88\u7DB4\u8F1F\u8F4D\u9435\u50C9\u5C16\u6CBE\u6DFB\u751B\u77BB\u7C3D\u7C64\u8A79\u8AC2\u581E\u59BE\u5E16\u6377\u7252\u758A\u776B\u8ADC\u8CBC\u8F12\u5EF3\u6674\u6DF8\u807D\u83C1\u8ACB\u9751\u9BD6\uFA00\u5243\u66FF\u6D95\u6EEF\u7DE0\u8AE6\u902E\u905E\u9AD4\u521D\u527F\u54E8\u6194\u6284\u62DB\u68A2\uFFFD".split("");
      for (j = 0; j != D[244].length; ++j)
        if (D[244][j].charCodeAt(0) !== 65533) {
          e[D[244][j]] = 62464 + j;
          d[62464 + j] = D[244][j];
        }
      D[245] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6912\u695A\u6A35\u7092\u7126\u785D\u7901\u790E\u79D2\u7A0D\u8096\u8278\u82D5\u8349\u8549\u8C82\u8D85\u9162\u918B\u91AE\u4FC3\u56D1\u71ED\u77D7\u8700\u89F8\u5BF8\u5FD6\u6751\u90A8\u53E2\u585A\u5BF5\u60A4\u6181\u6460\u7E3D\u8070\u8525\u9283\u64AE\u50AC\u5D14\u6700\u589C\u62BD\u63A8\u690E\u6978\u6A1E\u6E6B\u76BA\u79CB\u82BB\u8429\u8ACF\u8DA8\u8FFD\u9112\u914B\u919C\u9310\u9318\u939A\u96DB\u9A36\u9C0D\u4E11\u755C\u795D\u7AFA\u7B51\u7BC9\u7E2E\u84C4\u8E59\u8E74\u8EF8\u9010\u6625\u693F\u7443\u51FA\u672E\u9EDC\u5145\u5FE0\u6C96\u87F2\u885D\u8877\u60B4\u81B5\u8403\uFFFD".split("");
      for (j = 0; j != D[245].length; ++j)
        if (D[245][j].charCodeAt(0) !== 65533) {
          e[D[245][j]] = 62720 + j;
          d[62720 + j] = D[245][j];
        }
      D[246] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8D05\u53D6\u5439\u5634\u5A36\u5C31\u708A\u7FE0\u805A\u8106\u81ED\u8DA3\u9189\u9A5F\u9DF2\u5074\u4EC4\u53A0\u60FB\u6E2C\u5C64\u4F88\u5024\u55E4\u5CD9\u5E5F\u6065\u6894\u6CBB\u6DC4\u71BE\u75D4\u75F4\u7661\u7A1A\u7A49\u7DC7\u7DFB\u7F6E\u81F4\u86A9\u8F1C\u96C9\u99B3\u9F52\u5247\u52C5\u98ED\u89AA\u4E03\u67D2\u6F06\u4FB5\u5BE2\u6795\u6C88\u6D78\u741B\u7827\u91DD\u937C\u87C4\u79E4\u7A31\u5FEB\u4ED6\u54A4\u553E\u58AE\u59A5\u60F0\u6253\u62D6\u6736\u6955\u8235\u9640\u99B1\u99DD\u502C\u5353\u5544\u577C\uFA01\u6258\uFA02\u64E2\u666B\u67DD\u6FC1\u6FEF\u7422\u7438\u8A17\uFFFD".split("");
      for (j = 0; j != D[246].length; ++j)
        if (D[246][j].charCodeAt(0) !== 65533) {
          e[D[246][j]] = 62976 + j;
          d[62976 + j] = D[246][j];
        }
      D[247] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9438\u5451\u5606\u5766\u5F48\u619A\u6B4E\u7058\u70AD\u7DBB\u8A95\u596A\u812B\u63A2\u7708\u803D\u8CAA\u5854\u642D\u69BB\u5B95\u5E11\u6E6F\uFA03\u8569\u514C\u53F0\u592A\u6020\u614B\u6B86\u6C70\u6CF0\u7B1E\u80CE\u82D4\u8DC6\u90B0\u98B1\uFA04\u64C7\u6FA4\u6491\u6504\u514E\u5410\u571F\u8A0E\u615F\u6876\uFA05\u75DB\u7B52\u7D71\u901A\u5806\u69CC\u817F\u892A\u9000\u9839\u5078\u5957\u59AC\u6295\u900F\u9B2A\u615D\u7279\u95D6\u5761\u5A46\u5DF4\u628A\u64AD\u64FA\u6777\u6CE2\u6D3E\u722C\u7436\u7834\u7F77\u82AD\u8DDB\u9817\u5224\u5742\u677F\u7248\u74E3\u8CA9\u8FA6\u9211\uFFFD".split("");
      for (j = 0; j != D[247].length; ++j)
        if (D[247][j].charCodeAt(0) !== 65533) {
          e[D[247][j]] = 63232 + j;
          d[63232 + j] = D[247][j];
        }
      D[248] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u962A\u516B\u53ED\u634C\u4F69\u5504\u6096\u6557\u6C9B\u6D7F\u724C\u72FD\u7A17\u8987\u8C9D\u5F6D\u6F8E\u70F9\u81A8\u610E\u4FBF\u504F\u6241\u7247\u7BC7\u7DE8\u7FE9\u904D\u97AD\u9A19\u8CB6\u576A\u5E73\u67B0\u840D\u8A55\u5420\u5B16\u5E63\u5EE2\u5F0A\u6583\u80BA\u853D\u9589\u965B\u4F48\u5305\u530D\u530F\u5486\u54FA\u5703\u5E03\u6016\u629B\u62B1\u6355\uFA06\u6CE1\u6D66\u75B1\u7832\u80DE\u812F\u82DE\u8461\u84B2\u888D\u8912\u900B\u92EA\u98FD\u9B91\u5E45\u66B4\u66DD\u7011\u7206\uFA07\u4FF5\u527D\u5F6A\u6153\u6753\u6A19\u6F02\u74E2\u7968\u8868\u8C79\u98C7\u98C4\u9A43\uFFFD".split("");
      for (j = 0; j != D[248].length; ++j)
        if (D[248][j].charCodeAt(0) !== 65533) {
          e[D[248][j]] = 63488 + j;
          d[63488 + j] = D[248][j];
        }
      D[249] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u54C1\u7A1F\u6953\u8AF7\u8C4A\u98A8\u99AE\u5F7C\u62AB\u75B2\u76AE\u88AB\u907F\u9642\u5339\u5F3C\u5FC5\u6CCC\u73CC\u7562\u758B\u7B46\u82FE\u999D\u4E4F\u903C\u4E0B\u4F55\u53A6\u590F\u5EC8\u6630\u6CB3\u7455\u8377\u8766\u8CC0\u9050\u971E\u9C15\u58D1\u5B78\u8650\u8B14\u9DB4\u5BD2\u6068\u608D\u65F1\u6C57\u6F22\u6FA3\u701A\u7F55\u7FF0\u9591\u9592\u9650\u97D3\u5272\u8F44\u51FD\u542B\u54B8\u5563\u558A\u6ABB\u6DB5\u7DD8\u8266\u929C\u9677\u9E79\u5408\u54C8\u76D2\u86E4\u95A4\u95D4\u965C\u4EA2\u4F09\u59EE\u5AE6\u5DF7\u6052\u6297\u676D\u6841\u6C86\u6E2F\u7F38\u809B\u822A\uFFFD".split("");
      for (j = 0; j != D[249].length; ++j)
        if (D[249][j].charCodeAt(0) !== 65533) {
          e[D[249][j]] = 63744 + j;
          d[63744 + j] = D[249][j];
        }
      D[250] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFA08\uFA09\u9805\u4EA5\u5055\u54B3\u5793\u595A\u5B69\u5BB3\u61C8\u6977\u6D77\u7023\u87F9\u89E3\u8A72\u8AE7\u9082\u99ED\u9AB8\u52BE\u6838\u5016\u5E78\u674F\u8347\u884C\u4EAB\u5411\u56AE\u73E6\u9115\u97FF\u9909\u9957\u9999\u5653\u589F\u865B\u8A31\u61B2\u6AF6\u737B\u8ED2\u6B47\u96AA\u9A57\u5955\u7200\u8D6B\u9769\u4FD4\u5CF4\u5F26\u61F8\u665B\u6CEB\u70AB\u7384\u73B9\u73FE\u7729\u774D\u7D43\u7D62\u7E23\u8237\u8852\uFA0A\u8CE2\u9249\u986F\u5B51\u7A74\u8840\u9801\u5ACC\u4FE0\u5354\u593E\u5CFD\u633E\u6D79\u72F9\u8105\u8107\u83A2\u92CF\u9830\u4EA8\u5144\u5211\u578B\uFFFD".split("");
      for (j = 0; j != D[250].length; ++j)
        if (D[250][j].charCodeAt(0) !== 65533) {
          e[D[250][j]] = 64e3 + j;
          d[64e3 + j] = D[250][j];
        }
      D[251] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5F62\u6CC2\u6ECE\u7005\u7050\u70AF\u7192\u73E9\u7469\u834A\u87A2\u8861\u9008\u90A2\u93A3\u99A8\u516E\u5F57\u60E0\u6167\u66B3\u8559\u8E4A\u91AF\u978B\u4E4E\u4E92\u547C\u58D5\u58FA\u597D\u5CB5\u5F27\u6236\u6248\u660A\u6667\u6BEB\u6D69\u6DCF\u6E56\u6EF8\u6F94\u6FE0\u6FE9\u705D\u72D0\u7425\u745A\u74E0\u7693\u795C\u7CCA\u7E1E\u80E1\u82A6\u846B\u84BF\u864E\u865F\u8774\u8B77\u8C6A\u93AC\u9800\u9865\u60D1\u6216\u9177\u5A5A\u660F\u6DF7\u6E3E\u743F\u9B42\u5FFD\u60DA\u7B0F\u54C4\u5F18\u6C5E\u6CD3\u6D2A\u70D8\u7D05\u8679\u8A0C\u9D3B\u5316\u548C\u5B05\u6A3A\u706B\u7575\uFFFD".split("");
      for (j = 0; j != D[251].length; ++j)
        if (D[251][j].charCodeAt(0) !== 65533) {
          e[D[251][j]] = 64256 + j;
          d[64256 + j] = D[251][j];
        }
      D[252] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u798D\u79BE\u82B1\u83EF\u8A71\u8B41\u8CA8\u9774\uFA0B\u64F4\u652B\u78BA\u78BB\u7A6B\u4E38\u559A\u5950\u5BA6\u5E7B\u60A3\u63DB\u6B61\u6665\u6853\u6E19\u7165\u74B0\u7D08\u9084\u9A69\u9C25\u6D3B\u6ED1\u733E\u8C41\u95CA\u51F0\u5E4C\u5FA8\u604D\u60F6\u6130\u614C\u6643\u6644\u69A5\u6CC1\u6E5F\u6EC9\u6F62\u714C\u749C\u7687\u7BC1\u7C27\u8352\u8757\u9051\u968D\u9EC3\u532F\u56DE\u5EFB\u5F8A\u6062\u6094\u61F7\u6666\u6703\u6A9C\u6DEE\u6FAE\u7070\u736A\u7E6A\u81BE\u8334\u86D4\u8AA8\u8CC4\u5283\u7372\u5B96\u6A6B\u9404\u54EE\u5686\u5B5D\u6548\u6585\u66C9\u689F\u6D8D\u6DC6\uFFFD".split("");
      for (j = 0; j != D[252].length; ++j)
        if (D[252][j].charCodeAt(0) !== 65533) {
          e[D[252][j]] = 64512 + j;
          d[64512 + j] = D[252][j];
        }
      D[253] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u723B\u80B4\u9175\u9A4D\u4FAF\u5019\u539A\u540E\u543C\u5589\u55C5\u5E3F\u5F8C\u673D\u7166\u73DD\u9005\u52DB\u52F3\u5864\u58CE\u7104\u718F\u71FB\u85B0\u8A13\u6688\u85A8\u55A7\u6684\u714A\u8431\u5349\u5599\u6BC1\u5F59\u5FBD\u63EE\u6689\u7147\u8AF1\u8F1D\u9EBE\u4F11\u643A\u70CB\u7566\u8667\u6064\u8B4E\u9DF8\u5147\u51F6\u5308\u6D36\u80F8\u9ED1\u6615\u6B23\u7098\u75D5\u5403\u5C79\u7D07\u8A16\u6B20\u6B3D\u6B46\u5438\u6070\u6D3D\u7FD5\u8208\u50D6\u51DE\u559C\u566B\u56CD\u59EC\u5B09\u5E0C\u6199\u6198\u6231\u665E\u66E6\u7199\u71B9\u71BA\u72A7\u79A7\u7A00\u7FB2\u8A70\uFFFD".split("");
      for (j = 0; j != D[253].length; ++j)
        if (D[253][j].charCodeAt(0) !== 65533) {
          e[D[253][j]] = 64768 + j;
          d[64768 + j] = D[253][j];
        }
      return { "enc": e, "dec": d };
    }();
    cptable2[950] = function() {
      var d = [], e = {}, D = [], j;
      D[0] = "\0\x07\b	\n\v\f\r !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[0].length; ++j)
        if (D[0][j].charCodeAt(0) !== 65533) {
          e[D[0][j]] = 0 + j;
          d[0 + j] = D[0][j];
        }
      D[161] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u3000\uFF0C\u3001\u3002\uFF0E\u2027\uFF1B\uFF1A\uFF1F\uFF01\uFE30\u2026\u2025\uFE50\uFE51\uFE52\xB7\uFE54\uFE55\uFE56\uFE57\uFF5C\u2013\uFE31\u2014\uFE33\u2574\uFE34\uFE4F\uFF08\uFF09\uFE35\uFE36\uFF5B\uFF5D\uFE37\uFE38\u3014\u3015\uFE39\uFE3A\u3010\u3011\uFE3B\uFE3C\u300A\u300B\uFE3D\uFE3E\u3008\u3009\uFE3F\uFE40\u300C\u300D\uFE41\uFE42\u300E\u300F\uFE43\uFE44\uFE59\uFE5A\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFE5B\uFE5C\uFE5D\uFE5E\u2018\u2019\u201C\u201D\u301D\u301E\u2035\u2032\uFF03\uFF06\uFF0A\u203B\xA7\u3003\u25CB\u25CF\u25B3\u25B2\u25CE\u2606\u2605\u25C7\u25C6\u25A1\u25A0\u25BD\u25BC\u32A3\u2105\xAF\uFFE3\uFF3F\u02CD\uFE49\uFE4A\uFE4D\uFE4E\uFE4B\uFE4C\uFE5F\uFE60\uFE61\uFF0B\uFF0D\xD7\xF7\xB1\u221A\uFF1C\uFF1E\uFF1D\u2266\u2267\u2260\u221E\u2252\u2261\uFE62\uFE63\uFE64\uFE65\uFE66\uFF5E\u2229\u222A\u22A5\u2220\u221F\u22BF\u33D2\u33D1\u222B\u222E\u2235\u2234\u2640\u2642\u2295\u2299\u2191\u2193\u2190\u2192\u2196\u2197\u2199\u2198\u2225\u2223\uFF0F\uFFFD".split("");
      for (j = 0; j != D[161].length; ++j)
        if (D[161][j].charCodeAt(0) !== 65533) {
          e[D[161][j]] = 41216 + j;
          d[41216 + j] = D[161][j];
        }
      D[162] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFF3C\u2215\uFE68\uFF04\uFFE5\u3012\uFFE0\uFFE1\uFF05\uFF20\u2103\u2109\uFE69\uFE6A\uFE6B\u33D5\u339C\u339D\u339E\u33CE\u33A1\u338E\u338F\u33C4\xB0\u5159\u515B\u515E\u515D\u5161\u5163\u55E7\u74E9\u7CCE\u2581\u2582\u2583\u2584\u2585\u2586\u2587\u2588\u258F\u258E\u258D\u258C\u258B\u258A\u2589\u253C\u2534\u252C\u2524\u251C\u2594\u2500\u2502\u2595\u250C\u2510\u2514\u2518\u256D\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u256E\u2570\u256F\u2550\u255E\u256A\u2561\u25E2\u25E3\u25E5\u25E4\u2571\u2572\u2573\uFF10\uFF11\uFF12\uFF13\uFF14\uFF15\uFF16\uFF17\uFF18\uFF19\u2160\u2161\u2162\u2163\u2164\u2165\u2166\u2167\u2168\u2169\u3021\u3022\u3023\u3024\u3025\u3026\u3027\u3028\u3029\u5341\u5344\u5345\uFF21\uFF22\uFF23\uFF24\uFF25\uFF26\uFF27\uFF28\uFF29\uFF2A\uFF2B\uFF2C\uFF2D\uFF2E\uFF2F\uFF30\uFF31\uFF32\uFF33\uFF34\uFF35\uFF36\uFF37\uFF38\uFF39\uFF3A\uFF41\uFF42\uFF43\uFF44\uFF45\uFF46\uFF47\uFF48\uFF49\uFF4A\uFF4B\uFF4C\uFF4D\uFF4E\uFF4F\uFF50\uFF51\uFF52\uFF53\uFF54\uFF55\uFF56\uFFFD".split("");
      for (j = 0; j != D[162].length; ++j)
        if (D[162][j].charCodeAt(0) !== 65533) {
          e[D[162][j]] = 41472 + j;
          d[41472 + j] = D[162][j];
        }
      D[163] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFF57\uFF58\uFF59\uFF5A\u0391\u0392\u0393\u0394\u0395\u0396\u0397\u0398\u0399\u039A\u039B\u039C\u039D\u039E\u039F\u03A0\u03A1\u03A3\u03A4\u03A5\u03A6\u03A7\u03A8\u03A9\u03B1\u03B2\u03B3\u03B4\u03B5\u03B6\u03B7\u03B8\u03B9\u03BA\u03BB\u03BC\u03BD\u03BE\u03BF\u03C0\u03C1\u03C3\u03C4\u03C5\u03C6\u03C7\u03C8\u03C9\u3105\u3106\u3107\u3108\u3109\u310A\u310B\u310C\u310D\u310E\u310F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u3110\u3111\u3112\u3113\u3114\u3115\u3116\u3117\u3118\u3119\u311A\u311B\u311C\u311D\u311E\u311F\u3120\u3121\u3122\u3123\u3124\u3125\u3126\u3127\u3128\u3129\u02D9\u02C9\u02CA\u02C7\u02CB\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u20AC\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[163].length; ++j)
        if (D[163][j].charCodeAt(0) !== 65533) {
          e[D[163][j]] = 41728 + j;
          d[41728 + j] = D[163][j];
        }
      D[164] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u4E00\u4E59\u4E01\u4E03\u4E43\u4E5D\u4E86\u4E8C\u4EBA\u513F\u5165\u516B\u51E0\u5200\u5201\u529B\u5315\u5341\u535C\u53C8\u4E09\u4E0B\u4E08\u4E0A\u4E2B\u4E38\u51E1\u4E45\u4E48\u4E5F\u4E5E\u4E8E\u4EA1\u5140\u5203\u52FA\u5343\u53C9\u53E3\u571F\u58EB\u5915\u5927\u5973\u5B50\u5B51\u5B53\u5BF8\u5C0F\u5C22\u5C38\u5C71\u5DDD\u5DE5\u5DF1\u5DF2\u5DF3\u5DFE\u5E72\u5EFE\u5F0B\u5F13\u624D\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u4E11\u4E10\u4E0D\u4E2D\u4E30\u4E39\u4E4B\u5C39\u4E88\u4E91\u4E95\u4E92\u4E94\u4EA2\u4EC1\u4EC0\u4EC3\u4EC6\u4EC7\u4ECD\u4ECA\u4ECB\u4EC4\u5143\u5141\u5167\u516D\u516E\u516C\u5197\u51F6\u5206\u5207\u5208\u52FB\u52FE\u52FF\u5316\u5339\u5348\u5347\u5345\u535E\u5384\u53CB\u53CA\u53CD\u58EC\u5929\u592B\u592A\u592D\u5B54\u5C11\u5C24\u5C3A\u5C6F\u5DF4\u5E7B\u5EFF\u5F14\u5F15\u5FC3\u6208\u6236\u624B\u624E\u652F\u6587\u6597\u65A4\u65B9\u65E5\u66F0\u6708\u6728\u6B20\u6B62\u6B79\u6BCB\u6BD4\u6BDB\u6C0F\u6C34\u706B\u722A\u7236\u723B\u7247\u7259\u725B\u72AC\u738B\u4E19\uFFFD".split("");
      for (j = 0; j != D[164].length; ++j)
        if (D[164][j].charCodeAt(0) !== 65533) {
          e[D[164][j]] = 41984 + j;
          d[41984 + j] = D[164][j];
        }
      D[165] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u4E16\u4E15\u4E14\u4E18\u4E3B\u4E4D\u4E4F\u4E4E\u4EE5\u4ED8\u4ED4\u4ED5\u4ED6\u4ED7\u4EE3\u4EE4\u4ED9\u4EDE\u5145\u5144\u5189\u518A\u51AC\u51F9\u51FA\u51F8\u520A\u52A0\u529F\u5305\u5306\u5317\u531D\u4EDF\u534A\u5349\u5361\u5360\u536F\u536E\u53BB\u53EF\u53E4\u53F3\u53EC\u53EE\u53E9\u53E8\u53FC\u53F8\u53F5\u53EB\u53E6\u53EA\u53F2\u53F1\u53F0\u53E5\u53ED\u53FB\u56DB\u56DA\u5916\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u592E\u5931\u5974\u5976\u5B55\u5B83\u5C3C\u5DE8\u5DE7\u5DE6\u5E02\u5E03\u5E73\u5E7C\u5F01\u5F18\u5F17\u5FC5\u620A\u6253\u6254\u6252\u6251\u65A5\u65E6\u672E\u672C\u672A\u672B\u672D\u6B63\u6BCD\u6C11\u6C10\u6C38\u6C41\u6C40\u6C3E\u72AF\u7384\u7389\u74DC\u74E6\u7518\u751F\u7528\u7529\u7530\u7531\u7532\u7533\u758B\u767D\u76AE\u76BF\u76EE\u77DB\u77E2\u77F3\u793A\u79BE\u7A74\u7ACB\u4E1E\u4E1F\u4E52\u4E53\u4E69\u4E99\u4EA4\u4EA6\u4EA5\u4EFF\u4F09\u4F19\u4F0A\u4F15\u4F0D\u4F10\u4F11\u4F0F\u4EF2\u4EF6\u4EFB\u4EF0\u4EF3\u4EFD\u4F01\u4F0B\u5149\u5147\u5146\u5148\u5168\uFFFD".split("");
      for (j = 0; j != D[165].length; ++j)
        if (D[165][j].charCodeAt(0) !== 65533) {
          e[D[165][j]] = 42240 + j;
          d[42240 + j] = D[165][j];
        }
      D[166] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5171\u518D\u51B0\u5217\u5211\u5212\u520E\u5216\u52A3\u5308\u5321\u5320\u5370\u5371\u5409\u540F\u540C\u540A\u5410\u5401\u540B\u5404\u5411\u540D\u5408\u5403\u540E\u5406\u5412\u56E0\u56DE\u56DD\u5733\u5730\u5728\u572D\u572C\u572F\u5729\u5919\u591A\u5937\u5938\u5984\u5978\u5983\u597D\u5979\u5982\u5981\u5B57\u5B58\u5B87\u5B88\u5B85\u5B89\u5BFA\u5C16\u5C79\u5DDE\u5E06\u5E76\u5E74\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5F0F\u5F1B\u5FD9\u5FD6\u620E\u620C\u620D\u6210\u6263\u625B\u6258\u6536\u65E9\u65E8\u65EC\u65ED\u66F2\u66F3\u6709\u673D\u6734\u6731\u6735\u6B21\u6B64\u6B7B\u6C16\u6C5D\u6C57\u6C59\u6C5F\u6C60\u6C50\u6C55\u6C61\u6C5B\u6C4D\u6C4E\u7070\u725F\u725D\u767E\u7AF9\u7C73\u7CF8\u7F36\u7F8A\u7FBD\u8001\u8003\u800C\u8012\u8033\u807F\u8089\u808B\u808C\u81E3\u81EA\u81F3\u81FC\u820C\u821B\u821F\u826E\u8272\u827E\u866B\u8840\u884C\u8863\u897F\u9621\u4E32\u4EA8\u4F4D\u4F4F\u4F47\u4F57\u4F5E\u4F34\u4F5B\u4F55\u4F30\u4F50\u4F51\u4F3D\u4F3A\u4F38\u4F43\u4F54\u4F3C\u4F46\u4F63\uFFFD".split("");
      for (j = 0; j != D[166].length; ++j)
        if (D[166][j].charCodeAt(0) !== 65533) {
          e[D[166][j]] = 42496 + j;
          d[42496 + j] = D[166][j];
        }
      D[167] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u4F5C\u4F60\u4F2F\u4F4E\u4F36\u4F59\u4F5D\u4F48\u4F5A\u514C\u514B\u514D\u5175\u51B6\u51B7\u5225\u5224\u5229\u522A\u5228\u52AB\u52A9\u52AA\u52AC\u5323\u5373\u5375\u541D\u542D\u541E\u543E\u5426\u544E\u5427\u5446\u5443\u5433\u5448\u5442\u541B\u5429\u544A\u5439\u543B\u5438\u542E\u5435\u5436\u5420\u543C\u5440\u5431\u542B\u541F\u542C\u56EA\u56F0\u56E4\u56EB\u574A\u5751\u5740\u574D\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5747\u574E\u573E\u5750\u574F\u573B\u58EF\u593E\u599D\u5992\u59A8\u599E\u59A3\u5999\u5996\u598D\u59A4\u5993\u598A\u59A5\u5B5D\u5B5C\u5B5A\u5B5B\u5B8C\u5B8B\u5B8F\u5C2C\u5C40\u5C41\u5C3F\u5C3E\u5C90\u5C91\u5C94\u5C8C\u5DEB\u5E0C\u5E8F\u5E87\u5E8A\u5EF7\u5F04\u5F1F\u5F64\u5F62\u5F77\u5F79\u5FD8\u5FCC\u5FD7\u5FCD\u5FF1\u5FEB\u5FF8\u5FEA\u6212\u6211\u6284\u6297\u6296\u6280\u6276\u6289\u626D\u628A\u627C\u627E\u6279\u6273\u6292\u626F\u6298\u626E\u6295\u6293\u6291\u6286\u6539\u653B\u6538\u65F1\u66F4\u675F\u674E\u674F\u6750\u6751\u675C\u6756\u675E\u6749\u6746\u6760\uFFFD".split("");
      for (j = 0; j != D[167].length; ++j)
        if (D[167][j].charCodeAt(0) !== 65533) {
          e[D[167][j]] = 42752 + j;
          d[42752 + j] = D[167][j];
        }
      D[168] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6753\u6757\u6B65\u6BCF\u6C42\u6C5E\u6C99\u6C81\u6C88\u6C89\u6C85\u6C9B\u6C6A\u6C7A\u6C90\u6C70\u6C8C\u6C68\u6C96\u6C92\u6C7D\u6C83\u6C72\u6C7E\u6C74\u6C86\u6C76\u6C8D\u6C94\u6C98\u6C82\u7076\u707C\u707D\u7078\u7262\u7261\u7260\u72C4\u72C2\u7396\u752C\u752B\u7537\u7538\u7682\u76EF\u77E3\u79C1\u79C0\u79BF\u7A76\u7CFB\u7F55\u8096\u8093\u809D\u8098\u809B\u809A\u80B2\u826F\u8292\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u828B\u828D\u898B\u89D2\u8A00\u8C37\u8C46\u8C55\u8C9D\u8D64\u8D70\u8DB3\u8EAB\u8ECA\u8F9B\u8FB0\u8FC2\u8FC6\u8FC5\u8FC4\u5DE1\u9091\u90A2\u90AA\u90A6\u90A3\u9149\u91C6\u91CC\u9632\u962E\u9631\u962A\u962C\u4E26\u4E56\u4E73\u4E8B\u4E9B\u4E9E\u4EAB\u4EAC\u4F6F\u4F9D\u4F8D\u4F73\u4F7F\u4F6C\u4F9B\u4F8B\u4F86\u4F83\u4F70\u4F75\u4F88\u4F69\u4F7B\u4F96\u4F7E\u4F8F\u4F91\u4F7A\u5154\u5152\u5155\u5169\u5177\u5176\u5178\u51BD\u51FD\u523B\u5238\u5237\u523A\u5230\u522E\u5236\u5241\u52BE\u52BB\u5352\u5354\u5353\u5351\u5366\u5377\u5378\u5379\u53D6\u53D4\u53D7\u5473\u5475\uFFFD".split("");
      for (j = 0; j != D[168].length; ++j)
        if (D[168][j].charCodeAt(0) !== 65533) {
          e[D[168][j]] = 43008 + j;
          d[43008 + j] = D[168][j];
        }
      D[169] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5496\u5478\u5495\u5480\u547B\u5477\u5484\u5492\u5486\u547C\u5490\u5471\u5476\u548C\u549A\u5462\u5468\u548B\u547D\u548E\u56FA\u5783\u5777\u576A\u5769\u5761\u5766\u5764\u577C\u591C\u5949\u5947\u5948\u5944\u5954\u59BE\u59BB\u59D4\u59B9\u59AE\u59D1\u59C6\u59D0\u59CD\u59CB\u59D3\u59CA\u59AF\u59B3\u59D2\u59C5\u5B5F\u5B64\u5B63\u5B97\u5B9A\u5B98\u5B9C\u5B99\u5B9B\u5C1A\u5C48\u5C45\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5C46\u5CB7\u5CA1\u5CB8\u5CA9\u5CAB\u5CB1\u5CB3\u5E18\u5E1A\u5E16\u5E15\u5E1B\u5E11\u5E78\u5E9A\u5E97\u5E9C\u5E95\u5E96\u5EF6\u5F26\u5F27\u5F29\u5F80\u5F81\u5F7F\u5F7C\u5FDD\u5FE0\u5FFD\u5FF5\u5FFF\u600F\u6014\u602F\u6035\u6016\u602A\u6015\u6021\u6027\u6029\u602B\u601B\u6216\u6215\u623F\u623E\u6240\u627F\u62C9\u62CC\u62C4\u62BF\u62C2\u62B9\u62D2\u62DB\u62AB\u62D3\u62D4\u62CB\u62C8\u62A8\u62BD\u62BC\u62D0\u62D9\u62C7\u62CD\u62B5\u62DA\u62B1\u62D8\u62D6\u62D7\u62C6\u62AC\u62CE\u653E\u65A7\u65BC\u65FA\u6614\u6613\u660C\u6606\u6602\u660E\u6600\u660F\u6615\u660A\uFFFD".split("");
      for (j = 0; j != D[169].length; ++j)
        if (D[169][j].charCodeAt(0) !== 65533) {
          e[D[169][j]] = 43264 + j;
          d[43264 + j] = D[169][j];
        }
      D[170] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6607\u670D\u670B\u676D\u678B\u6795\u6771\u679C\u6773\u6777\u6787\u679D\u6797\u676F\u6770\u677F\u6789\u677E\u6790\u6775\u679A\u6793\u677C\u676A\u6772\u6B23\u6B66\u6B67\u6B7F\u6C13\u6C1B\u6CE3\u6CE8\u6CF3\u6CB1\u6CCC\u6CE5\u6CB3\u6CBD\u6CBE\u6CBC\u6CE2\u6CAB\u6CD5\u6CD3\u6CB8\u6CC4\u6CB9\u6CC1\u6CAE\u6CD7\u6CC5\u6CF1\u6CBF\u6CBB\u6CE1\u6CDB\u6CCA\u6CAC\u6CEF\u6CDC\u6CD6\u6CE0\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7095\u708E\u7092\u708A\u7099\u722C\u722D\u7238\u7248\u7267\u7269\u72C0\u72CE\u72D9\u72D7\u72D0\u73A9\u73A8\u739F\u73AB\u73A5\u753D\u759D\u7599\u759A\u7684\u76C2\u76F2\u76F4\u77E5\u77FD\u793E\u7940\u7941\u79C9\u79C8\u7A7A\u7A79\u7AFA\u7CFE\u7F54\u7F8C\u7F8B\u8005\u80BA\u80A5\u80A2\u80B1\u80A1\u80AB\u80A9\u80B4\u80AA\u80AF\u81E5\u81FE\u820D\u82B3\u829D\u8299\u82AD\u82BD\u829F\u82B9\u82B1\u82AC\u82A5\u82AF\u82B8\u82A3\u82B0\u82BE\u82B7\u864E\u8671\u521D\u8868\u8ECB\u8FCE\u8FD4\u8FD1\u90B5\u90B8\u90B1\u90B6\u91C7\u91D1\u9577\u9580\u961C\u9640\u963F\u963B\u9644\uFFFD".split("");
      for (j = 0; j != D[170].length; ++j)
        if (D[170][j].charCodeAt(0) !== 65533) {
          e[D[170][j]] = 43520 + j;
          d[43520 + j] = D[170][j];
        }
      D[171] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9642\u96B9\u96E8\u9752\u975E\u4E9F\u4EAD\u4EAE\u4FE1\u4FB5\u4FAF\u4FBF\u4FE0\u4FD1\u4FCF\u4FDD\u4FC3\u4FB6\u4FD8\u4FDF\u4FCA\u4FD7\u4FAE\u4FD0\u4FC4\u4FC2\u4FDA\u4FCE\u4FDE\u4FB7\u5157\u5192\u5191\u51A0\u524E\u5243\u524A\u524D\u524C\u524B\u5247\u52C7\u52C9\u52C3\u52C1\u530D\u5357\u537B\u539A\u53DB\u54AC\u54C0\u54A8\u54CE\u54C9\u54B8\u54A6\u54B3\u54C7\u54C2\u54BD\u54AA\u54C1\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u54C4\u54C8\u54AF\u54AB\u54B1\u54BB\u54A9\u54A7\u54BF\u56FF\u5782\u578B\u57A0\u57A3\u57A2\u57CE\u57AE\u5793\u5955\u5951\u594F\u594E\u5950\u59DC\u59D8\u59FF\u59E3\u59E8\u5A03\u59E5\u59EA\u59DA\u59E6\u5A01\u59FB\u5B69\u5BA3\u5BA6\u5BA4\u5BA2\u5BA5\u5C01\u5C4E\u5C4F\u5C4D\u5C4B\u5CD9\u5CD2\u5DF7\u5E1D\u5E25\u5E1F\u5E7D\u5EA0\u5EA6\u5EFA\u5F08\u5F2D\u5F65\u5F88\u5F85\u5F8A\u5F8B\u5F87\u5F8C\u5F89\u6012\u601D\u6020\u6025\u600E\u6028\u604D\u6070\u6068\u6062\u6046\u6043\u606C\u606B\u606A\u6064\u6241\u62DC\u6316\u6309\u62FC\u62ED\u6301\u62EE\u62FD\u6307\u62F1\u62F7\uFFFD".split("");
      for (j = 0; j != D[171].length; ++j)
        if (D[171][j].charCodeAt(0) !== 65533) {
          e[D[171][j]] = 43776 + j;
          d[43776 + j] = D[171][j];
        }
      D[172] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u62EF\u62EC\u62FE\u62F4\u6311\u6302\u653F\u6545\u65AB\u65BD\u65E2\u6625\u662D\u6620\u6627\u662F\u661F\u6628\u6631\u6624\u66F7\u67FF\u67D3\u67F1\u67D4\u67D0\u67EC\u67B6\u67AF\u67F5\u67E9\u67EF\u67C4\u67D1\u67B4\u67DA\u67E5\u67B8\u67CF\u67DE\u67F3\u67B0\u67D9\u67E2\u67DD\u67D2\u6B6A\u6B83\u6B86\u6BB5\u6BD2\u6BD7\u6C1F\u6CC9\u6D0B\u6D32\u6D2A\u6D41\u6D25\u6D0C\u6D31\u6D1E\u6D17\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6D3B\u6D3D\u6D3E\u6D36\u6D1B\u6CF5\u6D39\u6D27\u6D38\u6D29\u6D2E\u6D35\u6D0E\u6D2B\u70AB\u70BA\u70B3\u70AC\u70AF\u70AD\u70B8\u70AE\u70A4\u7230\u7272\u726F\u7274\u72E9\u72E0\u72E1\u73B7\u73CA\u73BB\u73B2\u73CD\u73C0\u73B3\u751A\u752D\u754F\u754C\u754E\u754B\u75AB\u75A4\u75A5\u75A2\u75A3\u7678\u7686\u7687\u7688\u76C8\u76C6\u76C3\u76C5\u7701\u76F9\u76F8\u7709\u770B\u76FE\u76FC\u7707\u77DC\u7802\u7814\u780C\u780D\u7946\u7949\u7948\u7947\u79B9\u79BA\u79D1\u79D2\u79CB\u7A7F\u7A81\u7AFF\u7AFD\u7C7D\u7D02\u7D05\u7D00\u7D09\u7D07\u7D04\u7D06\u7F38\u7F8E\u7FBF\u8004\uFFFD".split("");
      for (j = 0; j != D[172].length; ++j)
        if (D[172][j].charCodeAt(0) !== 65533) {
          e[D[172][j]] = 44032 + j;
          d[44032 + j] = D[172][j];
        }
      D[173] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8010\u800D\u8011\u8036\u80D6\u80E5\u80DA\u80C3\u80C4\u80CC\u80E1\u80DB\u80CE\u80DE\u80E4\u80DD\u81F4\u8222\u82E7\u8303\u8305\u82E3\u82DB\u82E6\u8304\u82E5\u8302\u8309\u82D2\u82D7\u82F1\u8301\u82DC\u82D4\u82D1\u82DE\u82D3\u82DF\u82EF\u8306\u8650\u8679\u867B\u867A\u884D\u886B\u8981\u89D4\u8A08\u8A02\u8A03\u8C9E\u8CA0\u8D74\u8D73\u8DB4\u8ECD\u8ECC\u8FF0\u8FE6\u8FE2\u8FEA\u8FE5\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8FED\u8FEB\u8FE4\u8FE8\u90CA\u90CE\u90C1\u90C3\u914B\u914A\u91CD\u9582\u9650\u964B\u964C\u964D\u9762\u9769\u97CB\u97ED\u97F3\u9801\u98A8\u98DB\u98DF\u9996\u9999\u4E58\u4EB3\u500C\u500D\u5023\u4FEF\u5026\u5025\u4FF8\u5029\u5016\u5006\u503C\u501F\u501A\u5012\u5011\u4FFA\u5000\u5014\u5028\u4FF1\u5021\u500B\u5019\u5018\u4FF3\u4FEE\u502D\u502A\u4FFE\u502B\u5009\u517C\u51A4\u51A5\u51A2\u51CD\u51CC\u51C6\u51CB\u5256\u525C\u5254\u525B\u525D\u532A\u537F\u539F\u539D\u53DF\u54E8\u5510\u5501\u5537\u54FC\u54E5\u54F2\u5506\u54FA\u5514\u54E9\u54ED\u54E1\u5509\u54EE\u54EA\uFFFD".split("");
      for (j = 0; j != D[173].length; ++j)
        if (D[173][j].charCodeAt(0) !== 65533) {
          e[D[173][j]] = 44288 + j;
          d[44288 + j] = D[173][j];
        }
      D[174] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u54E6\u5527\u5507\u54FD\u550F\u5703\u5704\u57C2\u57D4\u57CB\u57C3\u5809\u590F\u5957\u5958\u595A\u5A11\u5A18\u5A1C\u5A1F\u5A1B\u5A13\u59EC\u5A20\u5A23\u5A29\u5A25\u5A0C\u5A09\u5B6B\u5C58\u5BB0\u5BB3\u5BB6\u5BB4\u5BAE\u5BB5\u5BB9\u5BB8\u5C04\u5C51\u5C55\u5C50\u5CED\u5CFD\u5CFB\u5CEA\u5CE8\u5CF0\u5CF6\u5D01\u5CF4\u5DEE\u5E2D\u5E2B\u5EAB\u5EAD\u5EA7\u5F31\u5F92\u5F91\u5F90\u6059\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6063\u6065\u6050\u6055\u606D\u6069\u606F\u6084\u609F\u609A\u608D\u6094\u608C\u6085\u6096\u6247\u62F3\u6308\u62FF\u634E\u633E\u632F\u6355\u6342\u6346\u634F\u6349\u633A\u6350\u633D\u632A\u632B\u6328\u634D\u634C\u6548\u6549\u6599\u65C1\u65C5\u6642\u6649\u664F\u6643\u6652\u664C\u6645\u6641\u66F8\u6714\u6715\u6717\u6821\u6838\u6848\u6846\u6853\u6839\u6842\u6854\u6829\u68B3\u6817\u684C\u6851\u683D\u67F4\u6850\u6840\u683C\u6843\u682A\u6845\u6813\u6818\u6841\u6B8A\u6B89\u6BB7\u6C23\u6C27\u6C28\u6C26\u6C24\u6CF0\u6D6A\u6D95\u6D88\u6D87\u6D66\u6D78\u6D77\u6D59\u6D93\uFFFD".split("");
      for (j = 0; j != D[174].length; ++j)
        if (D[174][j].charCodeAt(0) !== 65533) {
          e[D[174][j]] = 44544 + j;
          d[44544 + j] = D[174][j];
        }
      D[175] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6D6C\u6D89\u6D6E\u6D5A\u6D74\u6D69\u6D8C\u6D8A\u6D79\u6D85\u6D65\u6D94\u70CA\u70D8\u70E4\u70D9\u70C8\u70CF\u7239\u7279\u72FC\u72F9\u72FD\u72F8\u72F7\u7386\u73ED\u7409\u73EE\u73E0\u73EA\u73DE\u7554\u755D\u755C\u755A\u7559\u75BE\u75C5\u75C7\u75B2\u75B3\u75BD\u75BC\u75B9\u75C2\u75B8\u768B\u76B0\u76CA\u76CD\u76CE\u7729\u771F\u7720\u7728\u77E9\u7830\u7827\u7838\u781D\u7834\u7837\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7825\u782D\u7820\u781F\u7832\u7955\u7950\u7960\u795F\u7956\u795E\u795D\u7957\u795A\u79E4\u79E3\u79E7\u79DF\u79E6\u79E9\u79D8\u7A84\u7A88\u7AD9\u7B06\u7B11\u7C89\u7D21\u7D17\u7D0B\u7D0A\u7D20\u7D22\u7D14\u7D10\u7D15\u7D1A\u7D1C\u7D0D\u7D19\u7D1B\u7F3A\u7F5F\u7F94\u7FC5\u7FC1\u8006\u8018\u8015\u8019\u8017\u803D\u803F\u80F1\u8102\u80F0\u8105\u80ED\u80F4\u8106\u80F8\u80F3\u8108\u80FD\u810A\u80FC\u80EF\u81ED\u81EC\u8200\u8210\u822A\u822B\u8228\u822C\u82BB\u832B\u8352\u8354\u834A\u8338\u8350\u8349\u8335\u8334\u834F\u8332\u8339\u8336\u8317\u8340\u8331\u8328\u8343\uFFFD".split("");
      for (j = 0; j != D[175].length; ++j)
        if (D[175][j].charCodeAt(0) !== 65533) {
          e[D[175][j]] = 44800 + j;
          d[44800 + j] = D[175][j];
        }
      D[176] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8654\u868A\u86AA\u8693\u86A4\u86A9\u868C\u86A3\u869C\u8870\u8877\u8881\u8882\u887D\u8879\u8A18\u8A10\u8A0E\u8A0C\u8A15\u8A0A\u8A17\u8A13\u8A16\u8A0F\u8A11\u8C48\u8C7A\u8C79\u8CA1\u8CA2\u8D77\u8EAC\u8ED2\u8ED4\u8ECF\u8FB1\u9001\u9006\u8FF7\u9000\u8FFA\u8FF4\u9003\u8FFD\u9005\u8FF8\u9095\u90E1\u90DD\u90E2\u9152\u914D\u914C\u91D8\u91DD\u91D7\u91DC\u91D9\u9583\u9662\u9663\u9661\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u965B\u965D\u9664\u9658\u965E\u96BB\u98E2\u99AC\u9AA8\u9AD8\u9B25\u9B32\u9B3C\u4E7E\u507A\u507D\u505C\u5047\u5043\u504C\u505A\u5049\u5065\u5076\u504E\u5055\u5075\u5074\u5077\u504F\u500F\u506F\u506D\u515C\u5195\u51F0\u526A\u526F\u52D2\u52D9\u52D8\u52D5\u5310\u530F\u5319\u533F\u5340\u533E\u53C3\u66FC\u5546\u556A\u5566\u5544\u555E\u5561\u5543\u554A\u5531\u5556\u554F\u5555\u552F\u5564\u5538\u552E\u555C\u552C\u5563\u5533\u5541\u5557\u5708\u570B\u5709\u57DF\u5805\u580A\u5806\u57E0\u57E4\u57FA\u5802\u5835\u57F7\u57F9\u5920\u5962\u5A36\u5A41\u5A49\u5A66\u5A6A\u5A40\uFFFD".split("");
      for (j = 0; j != D[176].length; ++j)
        if (D[176][j].charCodeAt(0) !== 65533) {
          e[D[176][j]] = 45056 + j;
          d[45056 + j] = D[176][j];
        }
      D[177] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5A3C\u5A62\u5A5A\u5A46\u5A4A\u5B70\u5BC7\u5BC5\u5BC4\u5BC2\u5BBF\u5BC6\u5C09\u5C08\u5C07\u5C60\u5C5C\u5C5D\u5D07\u5D06\u5D0E\u5D1B\u5D16\u5D22\u5D11\u5D29\u5D14\u5D19\u5D24\u5D27\u5D17\u5DE2\u5E38\u5E36\u5E33\u5E37\u5EB7\u5EB8\u5EB6\u5EB5\u5EBE\u5F35\u5F37\u5F57\u5F6C\u5F69\u5F6B\u5F97\u5F99\u5F9E\u5F98\u5FA1\u5FA0\u5F9C\u607F\u60A3\u6089\u60A0\u60A8\u60CB\u60B4\u60E6\u60BD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u60C5\u60BB\u60B5\u60DC\u60BC\u60D8\u60D5\u60C6\u60DF\u60B8\u60DA\u60C7\u621A\u621B\u6248\u63A0\u63A7\u6372\u6396\u63A2\u63A5\u6377\u6367\u6398\u63AA\u6371\u63A9\u6389\u6383\u639B\u636B\u63A8\u6384\u6388\u6399\u63A1\u63AC\u6392\u638F\u6380\u637B\u6369\u6368\u637A\u655D\u6556\u6551\u6559\u6557\u555F\u654F\u6558\u6555\u6554\u659C\u659B\u65AC\u65CF\u65CB\u65CC\u65CE\u665D\u665A\u6664\u6668\u6666\u665E\u66F9\u52D7\u671B\u6881\u68AF\u68A2\u6893\u68B5\u687F\u6876\u68B1\u68A7\u6897\u68B0\u6883\u68C4\u68AD\u6886\u6885\u6894\u689D\u68A8\u689F\u68A1\u6882\u6B32\u6BBA\uFFFD".split("");
      for (j = 0; j != D[177].length; ++j)
        if (D[177][j].charCodeAt(0) !== 65533) {
          e[D[177][j]] = 45312 + j;
          d[45312 + j] = D[177][j];
        }
      D[178] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6BEB\u6BEC\u6C2B\u6D8E\u6DBC\u6DF3\u6DD9\u6DB2\u6DE1\u6DCC\u6DE4\u6DFB\u6DFA\u6E05\u6DC7\u6DCB\u6DAF\u6DD1\u6DAE\u6DDE\u6DF9\u6DB8\u6DF7\u6DF5\u6DC5\u6DD2\u6E1A\u6DB5\u6DDA\u6DEB\u6DD8\u6DEA\u6DF1\u6DEE\u6DE8\u6DC6\u6DC4\u6DAA\u6DEC\u6DBF\u6DE6\u70F9\u7109\u710A\u70FD\u70EF\u723D\u727D\u7281\u731C\u731B\u7316\u7313\u7319\u7387\u7405\u740A\u7403\u7406\u73FE\u740D\u74E0\u74F6\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u74F7\u751C\u7522\u7565\u7566\u7562\u7570\u758F\u75D4\u75D5\u75B5\u75CA\u75CD\u768E\u76D4\u76D2\u76DB\u7737\u773E\u773C\u7736\u7738\u773A\u786B\u7843\u784E\u7965\u7968\u796D\u79FB\u7A92\u7A95\u7B20\u7B28\u7B1B\u7B2C\u7B26\u7B19\u7B1E\u7B2E\u7C92\u7C97\u7C95\u7D46\u7D43\u7D71\u7D2E\u7D39\u7D3C\u7D40\u7D30\u7D33\u7D44\u7D2F\u7D42\u7D32\u7D31\u7F3D\u7F9E\u7F9A\u7FCC\u7FCE\u7FD2\u801C\u804A\u8046\u812F\u8116\u8123\u812B\u8129\u8130\u8124\u8202\u8235\u8237\u8236\u8239\u838E\u839E\u8398\u8378\u83A2\u8396\u83BD\u83AB\u8392\u838A\u8393\u8389\u83A0\u8377\u837B\u837C\uFFFD".split("");
      for (j = 0; j != D[178].length; ++j)
        if (D[178][j].charCodeAt(0) !== 65533) {
          e[D[178][j]] = 45568 + j;
          d[45568 + j] = D[178][j];
        }
      D[179] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8386\u83A7\u8655\u5F6A\u86C7\u86C0\u86B6\u86C4\u86B5\u86C6\u86CB\u86B1\u86AF\u86C9\u8853\u889E\u8888\u88AB\u8892\u8896\u888D\u888B\u8993\u898F\u8A2A\u8A1D\u8A23\u8A25\u8A31\u8A2D\u8A1F\u8A1B\u8A22\u8C49\u8C5A\u8CA9\u8CAC\u8CAB\u8CA8\u8CAA\u8CA7\u8D67\u8D66\u8DBE\u8DBA\u8EDB\u8EDF\u9019\u900D\u901A\u9017\u9023\u901F\u901D\u9010\u9015\u901E\u9020\u900F\u9022\u9016\u901B\u9014\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u90E8\u90ED\u90FD\u9157\u91CE\u91F5\u91E6\u91E3\u91E7\u91ED\u91E9\u9589\u966A\u9675\u9673\u9678\u9670\u9674\u9676\u9677\u966C\u96C0\u96EA\u96E9\u7AE0\u7ADF\u9802\u9803\u9B5A\u9CE5\u9E75\u9E7F\u9EA5\u9EBB\u50A2\u508D\u5085\u5099\u5091\u5080\u5096\u5098\u509A\u6700\u51F1\u5272\u5274\u5275\u5269\u52DE\u52DD\u52DB\u535A\u53A5\u557B\u5580\u55A7\u557C\u558A\u559D\u5598\u5582\u559C\u55AA\u5594\u5587\u558B\u5583\u55B3\u55AE\u559F\u553E\u55B2\u559A\u55BB\u55AC\u55B1\u557E\u5589\u55AB\u5599\u570D\u582F\u582A\u5834\u5824\u5830\u5831\u5821\u581D\u5820\u58F9\u58FA\u5960\uFFFD".split("");
      for (j = 0; j != D[179].length; ++j)
        if (D[179][j].charCodeAt(0) !== 65533) {
          e[D[179][j]] = 45824 + j;
          d[45824 + j] = D[179][j];
        }
      D[180] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5A77\u5A9A\u5A7F\u5A92\u5A9B\u5AA7\u5B73\u5B71\u5BD2\u5BCC\u5BD3\u5BD0\u5C0A\u5C0B\u5C31\u5D4C\u5D50\u5D34\u5D47\u5DFD\u5E45\u5E3D\u5E40\u5E43\u5E7E\u5ECA\u5EC1\u5EC2\u5EC4\u5F3C\u5F6D\u5FA9\u5FAA\u5FA8\u60D1\u60E1\u60B2\u60B6\u60E0\u611C\u6123\u60FA\u6115\u60F0\u60FB\u60F4\u6168\u60F1\u610E\u60F6\u6109\u6100\u6112\u621F\u6249\u63A3\u638C\u63CF\u63C0\u63E9\u63C9\u63C6\u63CD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u63D2\u63E3\u63D0\u63E1\u63D6\u63ED\u63EE\u6376\u63F4\u63EA\u63DB\u6452\u63DA\u63F9\u655E\u6566\u6562\u6563\u6591\u6590\u65AF\u666E\u6670\u6674\u6676\u666F\u6691\u667A\u667E\u6677\u66FE\u66FF\u671F\u671D\u68FA\u68D5\u68E0\u68D8\u68D7\u6905\u68DF\u68F5\u68EE\u68E7\u68F9\u68D2\u68F2\u68E3\u68CB\u68CD\u690D\u6912\u690E\u68C9\u68DA\u696E\u68FB\u6B3E\u6B3A\u6B3D\u6B98\u6B96\u6BBC\u6BEF\u6C2E\u6C2F\u6C2C\u6E2F\u6E38\u6E54\u6E21\u6E32\u6E67\u6E4A\u6E20\u6E25\u6E23\u6E1B\u6E5B\u6E58\u6E24\u6E56\u6E6E\u6E2D\u6E26\u6E6F\u6E34\u6E4D\u6E3A\u6E2C\u6E43\u6E1D\u6E3E\u6ECB\uFFFD".split("");
      for (j = 0; j != D[180].length; ++j)
        if (D[180][j].charCodeAt(0) !== 65533) {
          e[D[180][j]] = 46080 + j;
          d[46080 + j] = D[180][j];
        }
      D[181] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6E89\u6E19\u6E4E\u6E63\u6E44\u6E72\u6E69\u6E5F\u7119\u711A\u7126\u7130\u7121\u7136\u716E\u711C\u724C\u7284\u7280\u7336\u7325\u7334\u7329\u743A\u742A\u7433\u7422\u7425\u7435\u7436\u7434\u742F\u741B\u7426\u7428\u7525\u7526\u756B\u756A\u75E2\u75DB\u75E3\u75D9\u75D8\u75DE\u75E0\u767B\u767C\u7696\u7693\u76B4\u76DC\u774F\u77ED\u785D\u786C\u786F\u7A0D\u7A08\u7A0B\u7A05\u7A00\u7A98\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7A97\u7A96\u7AE5\u7AE3\u7B49\u7B56\u7B46\u7B50\u7B52\u7B54\u7B4D\u7B4B\u7B4F\u7B51\u7C9F\u7CA5\u7D5E\u7D50\u7D68\u7D55\u7D2B\u7D6E\u7D72\u7D61\u7D66\u7D62\u7D70\u7D73\u5584\u7FD4\u7FD5\u800B\u8052\u8085\u8155\u8154\u814B\u8151\u814E\u8139\u8146\u813E\u814C\u8153\u8174\u8212\u821C\u83E9\u8403\u83F8\u840D\u83E0\u83C5\u840B\u83C1\u83EF\u83F1\u83F4\u8457\u840A\u83F0\u840C\u83CC\u83FD\u83F2\u83CA\u8438\u840E\u8404\u83DC\u8407\u83D4\u83DF\u865B\u86DF\u86D9\u86ED\u86D4\u86DB\u86E4\u86D0\u86DE\u8857\u88C1\u88C2\u88B1\u8983\u8996\u8A3B\u8A60\u8A55\u8A5E\u8A3C\u8A41\uFFFD".split("");
      for (j = 0; j != D[181].length; ++j)
        if (D[181][j].charCodeAt(0) !== 65533) {
          e[D[181][j]] = 46336 + j;
          d[46336 + j] = D[181][j];
        }
      D[182] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8A54\u8A5B\u8A50\u8A46\u8A34\u8A3A\u8A36\u8A56\u8C61\u8C82\u8CAF\u8CBC\u8CB3\u8CBD\u8CC1\u8CBB\u8CC0\u8CB4\u8CB7\u8CB6\u8CBF\u8CB8\u8D8A\u8D85\u8D81\u8DCE\u8DDD\u8DCB\u8DDA\u8DD1\u8DCC\u8DDB\u8DC6\u8EFB\u8EF8\u8EFC\u8F9C\u902E\u9035\u9031\u9038\u9032\u9036\u9102\u90F5\u9109\u90FE\u9163\u9165\u91CF\u9214\u9215\u9223\u9209\u921E\u920D\u9210\u9207\u9211\u9594\u958F\u958B\u9591\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9593\u9592\u958E\u968A\u968E\u968B\u967D\u9685\u9686\u968D\u9672\u9684\u96C1\u96C5\u96C4\u96C6\u96C7\u96EF\u96F2\u97CC\u9805\u9806\u9808\u98E7\u98EA\u98EF\u98E9\u98F2\u98ED\u99AE\u99AD\u9EC3\u9ECD\u9ED1\u4E82\u50AD\u50B5\u50B2\u50B3\u50C5\u50BE\u50AC\u50B7\u50BB\u50AF\u50C7\u527F\u5277\u527D\u52DF\u52E6\u52E4\u52E2\u52E3\u532F\u55DF\u55E8\u55D3\u55E6\u55CE\u55DC\u55C7\u55D1\u55E3\u55E4\u55EF\u55DA\u55E1\u55C5\u55C6\u55E5\u55C9\u5712\u5713\u585E\u5851\u5858\u5857\u585A\u5854\u586B\u584C\u586D\u584A\u5862\u5852\u584B\u5967\u5AC1\u5AC9\u5ACC\u5ABE\u5ABD\u5ABC\uFFFD".split("");
      for (j = 0; j != D[182].length; ++j)
        if (D[182][j].charCodeAt(0) !== 65533) {
          e[D[182][j]] = 46592 + j;
          d[46592 + j] = D[182][j];
        }
      D[183] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5AB3\u5AC2\u5AB2\u5D69\u5D6F\u5E4C\u5E79\u5EC9\u5EC8\u5F12\u5F59\u5FAC\u5FAE\u611A\u610F\u6148\u611F\u60F3\u611B\u60F9\u6101\u6108\u614E\u614C\u6144\u614D\u613E\u6134\u6127\u610D\u6106\u6137\u6221\u6222\u6413\u643E\u641E\u642A\u642D\u643D\u642C\u640F\u641C\u6414\u640D\u6436\u6416\u6417\u6406\u656C\u659F\u65B0\u6697\u6689\u6687\u6688\u6696\u6684\u6698\u668D\u6703\u6994\u696D\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u695A\u6977\u6960\u6954\u6975\u6930\u6982\u694A\u6968\u696B\u695E\u6953\u6979\u6986\u695D\u6963\u695B\u6B47\u6B72\u6BC0\u6BBF\u6BD3\u6BFD\u6EA2\u6EAF\u6ED3\u6EB6\u6EC2\u6E90\u6E9D\u6EC7\u6EC5\u6EA5\u6E98\u6EBC\u6EBA\u6EAB\u6ED1\u6E96\u6E9C\u6EC4\u6ED4\u6EAA\u6EA7\u6EB4\u714E\u7159\u7169\u7164\u7149\u7167\u715C\u716C\u7166\u714C\u7165\u715E\u7146\u7168\u7156\u723A\u7252\u7337\u7345\u733F\u733E\u746F\u745A\u7455\u745F\u745E\u7441\u743F\u7459\u745B\u745C\u7576\u7578\u7600\u75F0\u7601\u75F2\u75F1\u75FA\u75FF\u75F4\u75F3\u76DE\u76DF\u775B\u776B\u7766\u775E\u7763\uFFFD".split("");
      for (j = 0; j != D[183].length; ++j)
        if (D[183][j].charCodeAt(0) !== 65533) {
          e[D[183][j]] = 46848 + j;
          d[46848 + j] = D[183][j];
        }
      D[184] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7779\u776A\u776C\u775C\u7765\u7768\u7762\u77EE\u788E\u78B0\u7897\u7898\u788C\u7889\u787C\u7891\u7893\u787F\u797A\u797F\u7981\u842C\u79BD\u7A1C\u7A1A\u7A20\u7A14\u7A1F\u7A1E\u7A9F\u7AA0\u7B77\u7BC0\u7B60\u7B6E\u7B67\u7CB1\u7CB3\u7CB5\u7D93\u7D79\u7D91\u7D81\u7D8F\u7D5B\u7F6E\u7F69\u7F6A\u7F72\u7FA9\u7FA8\u7FA4\u8056\u8058\u8086\u8084\u8171\u8170\u8178\u8165\u816E\u8173\u816B\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8179\u817A\u8166\u8205\u8247\u8482\u8477\u843D\u8431\u8475\u8466\u846B\u8449\u846C\u845B\u843C\u8435\u8461\u8463\u8469\u846D\u8446\u865E\u865C\u865F\u86F9\u8713\u8708\u8707\u8700\u86FE\u86FB\u8702\u8703\u8706\u870A\u8859\u88DF\u88D4\u88D9\u88DC\u88D8\u88DD\u88E1\u88CA\u88D5\u88D2\u899C\u89E3\u8A6B\u8A72\u8A73\u8A66\u8A69\u8A70\u8A87\u8A7C\u8A63\u8AA0\u8A71\u8A85\u8A6D\u8A62\u8A6E\u8A6C\u8A79\u8A7B\u8A3E\u8A68\u8C62\u8C8A\u8C89\u8CCA\u8CC7\u8CC8\u8CC4\u8CB2\u8CC3\u8CC2\u8CC5\u8DE1\u8DDF\u8DE8\u8DEF\u8DF3\u8DFA\u8DEA\u8DE4\u8DE6\u8EB2\u8F03\u8F09\u8EFE\u8F0A\uFFFD".split("");
      for (j = 0; j != D[184].length; ++j)
        if (D[184][j].charCodeAt(0) !== 65533) {
          e[D[184][j]] = 47104 + j;
          d[47104 + j] = D[184][j];
        }
      D[185] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8F9F\u8FB2\u904B\u904A\u9053\u9042\u9054\u903C\u9055\u9050\u9047\u904F\u904E\u904D\u9051\u903E\u9041\u9112\u9117\u916C\u916A\u9169\u91C9\u9237\u9257\u9238\u923D\u9240\u923E\u925B\u924B\u9264\u9251\u9234\u9249\u924D\u9245\u9239\u923F\u925A\u9598\u9698\u9694\u9695\u96CD\u96CB\u96C9\u96CA\u96F7\u96FB\u96F9\u96F6\u9756\u9774\u9776\u9810\u9811\u9813\u980A\u9812\u980C\u98FC\u98F4\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u98FD\u98FE\u99B3\u99B1\u99B4\u9AE1\u9CE9\u9E82\u9F0E\u9F13\u9F20\u50E7\u50EE\u50E5\u50D6\u50ED\u50DA\u50D5\u50CF\u50D1\u50F1\u50CE\u50E9\u5162\u51F3\u5283\u5282\u5331\u53AD\u55FE\u5600\u561B\u5617\u55FD\u5614\u5606\u5609\u560D\u560E\u55F7\u5616\u561F\u5608\u5610\u55F6\u5718\u5716\u5875\u587E\u5883\u5893\u588A\u5879\u5885\u587D\u58FD\u5925\u5922\u5924\u596A\u5969\u5AE1\u5AE6\u5AE9\u5AD7\u5AD6\u5AD8\u5AE3\u5B75\u5BDE\u5BE7\u5BE1\u5BE5\u5BE6\u5BE8\u5BE2\u5BE4\u5BDF\u5C0D\u5C62\u5D84\u5D87\u5E5B\u5E63\u5E55\u5E57\u5E54\u5ED3\u5ED6\u5F0A\u5F46\u5F70\u5FB9\u6147\uFFFD".split("");
      for (j = 0; j != D[185].length; ++j)
        if (D[185][j].charCodeAt(0) !== 65533) {
          e[D[185][j]] = 47360 + j;
          d[47360 + j] = D[185][j];
        }
      D[186] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u613F\u614B\u6177\u6162\u6163\u615F\u615A\u6158\u6175\u622A\u6487\u6458\u6454\u64A4\u6478\u645F\u647A\u6451\u6467\u6434\u646D\u647B\u6572\u65A1\u65D7\u65D6\u66A2\u66A8\u669D\u699C\u69A8\u6995\u69C1\u69AE\u69D3\u69CB\u699B\u69B7\u69BB\u69AB\u69B4\u69D0\u69CD\u69AD\u69CC\u69A6\u69C3\u69A3\u6B49\u6B4C\u6C33\u6F33\u6F14\u6EFE\u6F13\u6EF4\u6F29\u6F3E\u6F20\u6F2C\u6F0F\u6F02\u6F22\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6EFF\u6EEF\u6F06\u6F31\u6F38\u6F32\u6F23\u6F15\u6F2B\u6F2F\u6F88\u6F2A\u6EEC\u6F01\u6EF2\u6ECC\u6EF7\u7194\u7199\u717D\u718A\u7184\u7192\u723E\u7292\u7296\u7344\u7350\u7464\u7463\u746A\u7470\u746D\u7504\u7591\u7627\u760D\u760B\u7609\u7613\u76E1\u76E3\u7784\u777D\u777F\u7761\u78C1\u789F\u78A7\u78B3\u78A9\u78A3\u798E\u798F\u798D\u7A2E\u7A31\u7AAA\u7AA9\u7AED\u7AEF\u7BA1\u7B95\u7B8B\u7B75\u7B97\u7B9D\u7B94\u7B8F\u7BB8\u7B87\u7B84\u7CB9\u7CBD\u7CBE\u7DBB\u7DB0\u7D9C\u7DBD\u7DBE\u7DA0\u7DCA\u7DB4\u7DB2\u7DB1\u7DBA\u7DA2\u7DBF\u7DB5\u7DB8\u7DAD\u7DD2\u7DC7\u7DAC\uFFFD".split("");
      for (j = 0; j != D[186].length; ++j)
        if (D[186][j].charCodeAt(0) !== 65533) {
          e[D[186][j]] = 47616 + j;
          d[47616 + j] = D[186][j];
        }
      D[187] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7F70\u7FE0\u7FE1\u7FDF\u805E\u805A\u8087\u8150\u8180\u818F\u8188\u818A\u817F\u8182\u81E7\u81FA\u8207\u8214\u821E\u824B\u84C9\u84BF\u84C6\u84C4\u8499\u849E\u84B2\u849C\u84CB\u84B8\u84C0\u84D3\u8490\u84BC\u84D1\u84CA\u873F\u871C\u873B\u8722\u8725\u8734\u8718\u8755\u8737\u8729\u88F3\u8902\u88F4\u88F9\u88F8\u88FD\u88E8\u891A\u88EF\u8AA6\u8A8C\u8A9E\u8AA3\u8A8D\u8AA1\u8A93\u8AA4\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8AAA\u8AA5\u8AA8\u8A98\u8A91\u8A9A\u8AA7\u8C6A\u8C8D\u8C8C\u8CD3\u8CD1\u8CD2\u8D6B\u8D99\u8D95\u8DFC\u8F14\u8F12\u8F15\u8F13\u8FA3\u9060\u9058\u905C\u9063\u9059\u905E\u9062\u905D\u905B\u9119\u9118\u911E\u9175\u9178\u9177\u9174\u9278\u9280\u9285\u9298\u9296\u927B\u9293\u929C\u92A8\u927C\u9291\u95A1\u95A8\u95A9\u95A3\u95A5\u95A4\u9699\u969C\u969B\u96CC\u96D2\u9700\u977C\u9785\u97F6\u9817\u9818\u98AF\u98B1\u9903\u9905\u990C\u9909\u99C1\u9AAF\u9AB0\u9AE6\u9B41\u9B42\u9CF4\u9CF6\u9CF3\u9EBC\u9F3B\u9F4A\u5104\u5100\u50FB\u50F5\u50F9\u5102\u5108\u5109\u5105\u51DC\uFFFD".split("");
      for (j = 0; j != D[187].length; ++j)
        if (D[187][j].charCodeAt(0) !== 65533) {
          e[D[187][j]] = 47872 + j;
          d[47872 + j] = D[187][j];
        }
      D[188] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5287\u5288\u5289\u528D\u528A\u52F0\u53B2\u562E\u563B\u5639\u5632\u563F\u5634\u5629\u5653\u564E\u5657\u5674\u5636\u562F\u5630\u5880\u589F\u589E\u58B3\u589C\u58AE\u58A9\u58A6\u596D\u5B09\u5AFB\u5B0B\u5AF5\u5B0C\u5B08\u5BEE\u5BEC\u5BE9\u5BEB\u5C64\u5C65\u5D9D\u5D94\u5E62\u5E5F\u5E61\u5EE2\u5EDA\u5EDF\u5EDD\u5EE3\u5EE0\u5F48\u5F71\u5FB7\u5FB5\u6176\u6167\u616E\u615D\u6155\u6182\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u617C\u6170\u616B\u617E\u61A7\u6190\u61AB\u618E\u61AC\u619A\u61A4\u6194\u61AE\u622E\u6469\u646F\u6479\u649E\u64B2\u6488\u6490\u64B0\u64A5\u6493\u6495\u64A9\u6492\u64AE\u64AD\u64AB\u649A\u64AC\u6499\u64A2\u64B3\u6575\u6577\u6578\u66AE\u66AB\u66B4\u66B1\u6A23\u6A1F\u69E8\u6A01\u6A1E\u6A19\u69FD\u6A21\u6A13\u6A0A\u69F3\u6A02\u6A05\u69ED\u6A11\u6B50\u6B4E\u6BA4\u6BC5\u6BC6\u6F3F\u6F7C\u6F84\u6F51\u6F66\u6F54\u6F86\u6F6D\u6F5B\u6F78\u6F6E\u6F8E\u6F7A\u6F70\u6F64\u6F97\u6F58\u6ED5\u6F6F\u6F60\u6F5F\u719F\u71AC\u71B1\u71A8\u7256\u729B\u734E\u7357\u7469\u748B\u7483\uFFFD".split("");
      for (j = 0; j != D[188].length; ++j)
        if (D[188][j].charCodeAt(0) !== 65533) {
          e[D[188][j]] = 48128 + j;
          d[48128 + j] = D[188][j];
        }
      D[189] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u747E\u7480\u757F\u7620\u7629\u761F\u7624\u7626\u7621\u7622\u769A\u76BA\u76E4\u778E\u7787\u778C\u7791\u778B\u78CB\u78C5\u78BA\u78CA\u78BE\u78D5\u78BC\u78D0\u7A3F\u7A3C\u7A40\u7A3D\u7A37\u7A3B\u7AAF\u7AAE\u7BAD\u7BB1\u7BC4\u7BB4\u7BC6\u7BC7\u7BC1\u7BA0\u7BCC\u7CCA\u7DE0\u7DF4\u7DEF\u7DFB\u7DD8\u7DEC\u7DDD\u7DE8\u7DE3\u7DDA\u7DDE\u7DE9\u7D9E\u7DD9\u7DF2\u7DF9\u7F75\u7F77\u7FAF\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7FE9\u8026\u819B\u819C\u819D\u81A0\u819A\u8198\u8517\u853D\u851A\u84EE\u852C\u852D\u8513\u8511\u8523\u8521\u8514\u84EC\u8525\u84FF\u8506\u8782\u8774\u8776\u8760\u8766\u8778\u8768\u8759\u8757\u874C\u8753\u885B\u885D\u8910\u8907\u8912\u8913\u8915\u890A\u8ABC\u8AD2\u8AC7\u8AC4\u8A95\u8ACB\u8AF8\u8AB2\u8AC9\u8AC2\u8ABF\u8AB0\u8AD6\u8ACD\u8AB6\u8AB9\u8ADB\u8C4C\u8C4E\u8C6C\u8CE0\u8CDE\u8CE6\u8CE4\u8CEC\u8CED\u8CE2\u8CE3\u8CDC\u8CEA\u8CE1\u8D6D\u8D9F\u8DA3\u8E2B\u8E10\u8E1D\u8E22\u8E0F\u8E29\u8E1F\u8E21\u8E1E\u8EBA\u8F1D\u8F1B\u8F1F\u8F29\u8F26\u8F2A\u8F1C\u8F1E\uFFFD".split("");
      for (j = 0; j != D[189].length; ++j)
        if (D[189][j].charCodeAt(0) !== 65533) {
          e[D[189][j]] = 48384 + j;
          d[48384 + j] = D[189][j];
        }
      D[190] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8F25\u9069\u906E\u9068\u906D\u9077\u9130\u912D\u9127\u9131\u9187\u9189\u918B\u9183\u92C5\u92BB\u92B7\u92EA\u92AC\u92E4\u92C1\u92B3\u92BC\u92D2\u92C7\u92F0\u92B2\u95AD\u95B1\u9704\u9706\u9707\u9709\u9760\u978D\u978B\u978F\u9821\u982B\u981C\u98B3\u990A\u9913\u9912\u9918\u99DD\u99D0\u99DF\u99DB\u99D1\u99D5\u99D2\u99D9\u9AB7\u9AEE\u9AEF\u9B27\u9B45\u9B44\u9B77\u9B6F\u9D06\u9D09\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9D03\u9EA9\u9EBE\u9ECE\u58A8\u9F52\u5112\u5118\u5114\u5110\u5115\u5180\u51AA\u51DD\u5291\u5293\u52F3\u5659\u566B\u5679\u5669\u5664\u5678\u566A\u5668\u5665\u5671\u566F\u566C\u5662\u5676\u58C1\u58BE\u58C7\u58C5\u596E\u5B1D\u5B34\u5B78\u5BF0\u5C0E\u5F4A\u61B2\u6191\u61A9\u618A\u61CD\u61B6\u61BE\u61CA\u61C8\u6230\u64C5\u64C1\u64CB\u64BB\u64BC\u64DA\u64C4\u64C7\u64C2\u64CD\u64BF\u64D2\u64D4\u64BE\u6574\u66C6\u66C9\u66B9\u66C4\u66C7\u66B8\u6A3D\u6A38\u6A3A\u6A59\u6A6B\u6A58\u6A39\u6A44\u6A62\u6A61\u6A4B\u6A47\u6A35\u6A5F\u6A48\u6B59\u6B77\u6C05\u6FC2\u6FB1\u6FA1\uFFFD".split("");
      for (j = 0; j != D[190].length; ++j)
        if (D[190][j].charCodeAt(0) !== 65533) {
          e[D[190][j]] = 48640 + j;
          d[48640 + j] = D[190][j];
        }
      D[191] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6FC3\u6FA4\u6FC1\u6FA7\u6FB3\u6FC0\u6FB9\u6FB6\u6FA6\u6FA0\u6FB4\u71BE\u71C9\u71D0\u71D2\u71C8\u71D5\u71B9\u71CE\u71D9\u71DC\u71C3\u71C4\u7368\u749C\u74A3\u7498\u749F\u749E\u74E2\u750C\u750D\u7634\u7638\u763A\u76E7\u76E5\u77A0\u779E\u779F\u77A5\u78E8\u78DA\u78EC\u78E7\u79A6\u7A4D\u7A4E\u7A46\u7A4C\u7A4B\u7ABA\u7BD9\u7C11\u7BC9\u7BE4\u7BDB\u7BE1\u7BE9\u7BE6\u7CD5\u7CD6\u7E0A\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7E11\u7E08\u7E1B\u7E23\u7E1E\u7E1D\u7E09\u7E10\u7F79\u7FB2\u7FF0\u7FF1\u7FEE\u8028\u81B3\u81A9\u81A8\u81FB\u8208\u8258\u8259\u854A\u8559\u8548\u8568\u8569\u8543\u8549\u856D\u856A\u855E\u8783\u879F\u879E\u87A2\u878D\u8861\u892A\u8932\u8925\u892B\u8921\u89AA\u89A6\u8AE6\u8AFA\u8AEB\u8AF1\u8B00\u8ADC\u8AE7\u8AEE\u8AFE\u8B01\u8B02\u8AF7\u8AED\u8AF3\u8AF6\u8AFC\u8C6B\u8C6D\u8C93\u8CF4\u8E44\u8E31\u8E34\u8E42\u8E39\u8E35\u8F3B\u8F2F\u8F38\u8F33\u8FA8\u8FA6\u9075\u9074\u9078\u9072\u907C\u907A\u9134\u9192\u9320\u9336\u92F8\u9333\u932F\u9322\u92FC\u932B\u9304\u931A\uFFFD".split("");
      for (j = 0; j != D[191].length; ++j)
        if (D[191][j].charCodeAt(0) !== 65533) {
          e[D[191][j]] = 48896 + j;
          d[48896 + j] = D[191][j];
        }
      D[192] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9310\u9326\u9321\u9315\u932E\u9319\u95BB\u96A7\u96A8\u96AA\u96D5\u970E\u9711\u9716\u970D\u9713\u970F\u975B\u975C\u9766\u9798\u9830\u9838\u983B\u9837\u982D\u9839\u9824\u9910\u9928\u991E\u991B\u9921\u991A\u99ED\u99E2\u99F1\u9AB8\u9ABC\u9AFB\u9AED\u9B28\u9B91\u9D15\u9D23\u9D26\u9D28\u9D12\u9D1B\u9ED8\u9ED4\u9F8D\u9F9C\u512A\u511F\u5121\u5132\u52F5\u568E\u5680\u5690\u5685\u5687\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u568F\u58D5\u58D3\u58D1\u58CE\u5B30\u5B2A\u5B24\u5B7A\u5C37\u5C68\u5DBC\u5DBA\u5DBD\u5DB8\u5E6B\u5F4C\u5FBD\u61C9\u61C2\u61C7\u61E6\u61CB\u6232\u6234\u64CE\u64CA\u64D8\u64E0\u64F0\u64E6\u64EC\u64F1\u64E2\u64ED\u6582\u6583\u66D9\u66D6\u6A80\u6A94\u6A84\u6AA2\u6A9C\u6ADB\u6AA3\u6A7E\u6A97\u6A90\u6AA0\u6B5C\u6BAE\u6BDA\u6C08\u6FD8\u6FF1\u6FDF\u6FE0\u6FDB\u6FE4\u6FEB\u6FEF\u6F80\u6FEC\u6FE1\u6FE9\u6FD5\u6FEE\u6FF0\u71E7\u71DF\u71EE\u71E6\u71E5\u71ED\u71EC\u71F4\u71E0\u7235\u7246\u7370\u7372\u74A9\u74B0\u74A6\u74A8\u7646\u7642\u764C\u76EA\u77B3\u77AA\u77B0\u77AC\uFFFD".split("");
      for (j = 0; j != D[192].length; ++j)
        if (D[192][j].charCodeAt(0) !== 65533) {
          e[D[192][j]] = 49152 + j;
          d[49152 + j] = D[192][j];
        }
      D[193] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u77A7\u77AD\u77EF\u78F7\u78FA\u78F4\u78EF\u7901\u79A7\u79AA\u7A57\u7ABF\u7C07\u7C0D\u7BFE\u7BF7\u7C0C\u7BE0\u7CE0\u7CDC\u7CDE\u7CE2\u7CDF\u7CD9\u7CDD\u7E2E\u7E3E\u7E46\u7E37\u7E32\u7E43\u7E2B\u7E3D\u7E31\u7E45\u7E41\u7E34\u7E39\u7E48\u7E35\u7E3F\u7E2F\u7F44\u7FF3\u7FFC\u8071\u8072\u8070\u806F\u8073\u81C6\u81C3\u81BA\u81C2\u81C0\u81BF\u81BD\u81C9\u81BE\u81E8\u8209\u8271\u85AA\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8584\u857E\u859C\u8591\u8594\u85AF\u859B\u8587\u85A8\u858A\u8667\u87C0\u87D1\u87B3\u87D2\u87C6\u87AB\u87BB\u87BA\u87C8\u87CB\u893B\u8936\u8944\u8938\u893D\u89AC\u8B0E\u8B17\u8B19\u8B1B\u8B0A\u8B20\u8B1D\u8B04\u8B10\u8C41\u8C3F\u8C73\u8CFA\u8CFD\u8CFC\u8CF8\u8CFB\u8DA8\u8E49\u8E4B\u8E48\u8E4A\u8F44\u8F3E\u8F42\u8F45\u8F3F\u907F\u907D\u9084\u9081\u9082\u9080\u9139\u91A3\u919E\u919C\u934D\u9382\u9328\u9375\u934A\u9365\u934B\u9318\u937E\u936C\u935B\u9370\u935A\u9354\u95CA\u95CB\u95CC\u95C8\u95C6\u96B1\u96B8\u96D6\u971C\u971E\u97A0\u97D3\u9846\u98B6\u9935\u9A01\uFFFD".split("");
      for (j = 0; j != D[193].length; ++j)
        if (D[193][j].charCodeAt(0) !== 65533) {
          e[D[193][j]] = 49408 + j;
          d[49408 + j] = D[193][j];
        }
      D[194] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u99FF\u9BAE\u9BAB\u9BAA\u9BAD\u9D3B\u9D3F\u9E8B\u9ECF\u9EDE\u9EDC\u9EDD\u9EDB\u9F3E\u9F4B\u53E2\u5695\u56AE\u58D9\u58D8\u5B38\u5F5D\u61E3\u6233\u64F4\u64F2\u64FE\u6506\u64FA\u64FB\u64F7\u65B7\u66DC\u6726\u6AB3\u6AAC\u6AC3\u6ABB\u6AB8\u6AC2\u6AAE\u6AAF\u6B5F\u6B78\u6BAF\u7009\u700B\u6FFE\u7006\u6FFA\u7011\u700F\u71FB\u71FC\u71FE\u71F8\u7377\u7375\u74A7\u74BF\u7515\u7656\u7658\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7652\u77BD\u77BF\u77BB\u77BC\u790E\u79AE\u7A61\u7A62\u7A60\u7AC4\u7AC5\u7C2B\u7C27\u7C2A\u7C1E\u7C23\u7C21\u7CE7\u7E54\u7E55\u7E5E\u7E5A\u7E61\u7E52\u7E59\u7F48\u7FF9\u7FFB\u8077\u8076\u81CD\u81CF\u820A\u85CF\u85A9\u85CD\u85D0\u85C9\u85B0\u85BA\u85B9\u85A6\u87EF\u87EC\u87F2\u87E0\u8986\u89B2\u89F4\u8B28\u8B39\u8B2C\u8B2B\u8C50\u8D05\u8E59\u8E63\u8E66\u8E64\u8E5F\u8E55\u8EC0\u8F49\u8F4D\u9087\u9083\u9088\u91AB\u91AC\u91D0\u9394\u938A\u9396\u93A2\u93B3\u93AE\u93AC\u93B0\u9398\u939A\u9397\u95D4\u95D6\u95D0\u95D5\u96E2\u96DC\u96D9\u96DB\u96DE\u9724\u97A3\u97A6\uFFFD".split("");
      for (j = 0; j != D[194].length; ++j)
        if (D[194][j].charCodeAt(0) !== 65533) {
          e[D[194][j]] = 49664 + j;
          d[49664 + j] = D[194][j];
        }
      D[195] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u97AD\u97F9\u984D\u984F\u984C\u984E\u9853\u98BA\u993E\u993F\u993D\u992E\u99A5\u9A0E\u9AC1\u9B03\u9B06\u9B4F\u9B4E\u9B4D\u9BCA\u9BC9\u9BFD\u9BC8\u9BC0\u9D51\u9D5D\u9D60\u9EE0\u9F15\u9F2C\u5133\u56A5\u58DE\u58DF\u58E2\u5BF5\u9F90\u5EEC\u61F2\u61F7\u61F6\u61F5\u6500\u650F\u66E0\u66DD\u6AE5\u6ADD\u6ADA\u6AD3\u701B\u701F\u7028\u701A\u701D\u7015\u7018\u7206\u720D\u7258\u72A2\u7378\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u737A\u74BD\u74CA\u74E3\u7587\u7586\u765F\u7661\u77C7\u7919\u79B1\u7A6B\u7A69\u7C3E\u7C3F\u7C38\u7C3D\u7C37\u7C40\u7E6B\u7E6D\u7E79\u7E69\u7E6A\u7F85\u7E73\u7FB6\u7FB9\u7FB8\u81D8\u85E9\u85DD\u85EA\u85D5\u85E4\u85E5\u85F7\u87FB\u8805\u880D\u87F9\u87FE\u8960\u895F\u8956\u895E\u8B41\u8B5C\u8B58\u8B49\u8B5A\u8B4E\u8B4F\u8B46\u8B59\u8D08\u8D0A\u8E7C\u8E72\u8E87\u8E76\u8E6C\u8E7A\u8E74\u8F54\u8F4E\u8FAD\u908A\u908B\u91B1\u91AE\u93E1\u93D1\u93DF\u93C3\u93C8\u93DC\u93DD\u93D6\u93E2\u93CD\u93D8\u93E4\u93D7\u93E8\u95DC\u96B4\u96E3\u972A\u9727\u9761\u97DC\u97FB\u985E\uFFFD".split("");
      for (j = 0; j != D[195].length; ++j)
        if (D[195][j].charCodeAt(0) !== 65533) {
          e[D[195][j]] = 49920 + j;
          d[49920 + j] = D[195][j];
        }
      D[196] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9858\u985B\u98BC\u9945\u9949\u9A16\u9A19\u9B0D\u9BE8\u9BE7\u9BD6\u9BDB\u9D89\u9D61\u9D72\u9D6A\u9D6C\u9E92\u9E97\u9E93\u9EB4\u52F8\u56A8\u56B7\u56B6\u56B4\u56BC\u58E4\u5B40\u5B43\u5B7D\u5BF6\u5DC9\u61F8\u61FA\u6518\u6514\u6519\u66E6\u6727\u6AEC\u703E\u7030\u7032\u7210\u737B\u74CF\u7662\u7665\u7926\u792A\u792C\u792B\u7AC7\u7AF6\u7C4C\u7C43\u7C4D\u7CEF\u7CF0\u8FAE\u7E7D\u7E7C\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7E82\u7F4C\u8000\u81DA\u8266\u85FB\u85F9\u8611\u85FA\u8606\u860B\u8607\u860A\u8814\u8815\u8964\u89BA\u89F8\u8B70\u8B6C\u8B66\u8B6F\u8B5F\u8B6B\u8D0F\u8D0D\u8E89\u8E81\u8E85\u8E82\u91B4\u91CB\u9418\u9403\u93FD\u95E1\u9730\u98C4\u9952\u9951\u99A8\u9A2B\u9A30\u9A37\u9A35\u9C13\u9C0D\u9E79\u9EB5\u9EE8\u9F2F\u9F5F\u9F63\u9F61\u5137\u5138\u56C1\u56C0\u56C2\u5914\u5C6C\u5DCD\u61FC\u61FE\u651D\u651C\u6595\u66E9\u6AFB\u6B04\u6AFA\u6BB2\u704C\u721B\u72A7\u74D6\u74D4\u7669\u77D3\u7C50\u7E8F\u7E8C\u7FBC\u8617\u862D\u861A\u8823\u8822\u8821\u881F\u896A\u896C\u89BD\u8B74\uFFFD".split("");
      for (j = 0; j != D[196].length; ++j)
        if (D[196][j].charCodeAt(0) !== 65533) {
          e[D[196][j]] = 50176 + j;
          d[50176 + j] = D[196][j];
        }
      D[197] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8B77\u8B7D\u8D13\u8E8A\u8E8D\u8E8B\u8F5F\u8FAF\u91BA\u942E\u9433\u9435\u943A\u9438\u9432\u942B\u95E2\u9738\u9739\u9732\u97FF\u9867\u9865\u9957\u9A45\u9A43\u9A40\u9A3E\u9ACF\u9B54\u9B51\u9C2D\u9C25\u9DAF\u9DB4\u9DC2\u9DB8\u9E9D\u9EEF\u9F19\u9F5C\u9F66\u9F67\u513C\u513B\u56C8\u56CA\u56C9\u5B7F\u5DD4\u5DD2\u5F4E\u61FF\u6524\u6B0A\u6B61\u7051\u7058\u7380\u74E4\u758A\u766E\u766C\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u79B3\u7C60\u7C5F\u807E\u807D\u81DF\u8972\u896F\u89FC\u8B80\u8D16\u8D17\u8E91\u8E93\u8F61\u9148\u9444\u9451\u9452\u973D\u973E\u97C3\u97C1\u986B\u9955\u9A55\u9A4D\u9AD2\u9B1A\u9C49\u9C31\u9C3E\u9C3B\u9DD3\u9DD7\u9F34\u9F6C\u9F6A\u9F94\u56CC\u5DD6\u6200\u6523\u652B\u652A\u66EC\u6B10\u74DA\u7ACA\u7C64\u7C63\u7C65\u7E93\u7E96\u7E94\u81E2\u8638\u863F\u8831\u8B8A\u9090\u908F\u9463\u9460\u9464\u9768\u986F\u995C\u9A5A\u9A5B\u9A57\u9AD3\u9AD4\u9AD1\u9C54\u9C57\u9C56\u9DE5\u9E9F\u9EF4\u56D1\u58E9\u652C\u705E\u7671\u7672\u77D7\u7F50\u7F88\u8836\u8839\u8862\u8B93\u8B92\uFFFD".split("");
      for (j = 0; j != D[197].length; ++j)
        if (D[197][j].charCodeAt(0) !== 65533) {
          e[D[197][j]] = 50432 + j;
          d[50432 + j] = D[197][j];
        }
      D[198] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8B96\u8277\u8D1B\u91C0\u946A\u9742\u9748\u9744\u97C6\u9870\u9A5F\u9B22\u9B58\u9C5F\u9DF9\u9DFA\u9E7C\u9E7D\u9F07\u9F77\u9F72\u5EF3\u6B16\u7063\u7C6C\u7C6E\u883B\u89C0\u8EA1\u91C1\u9472\u9470\u9871\u995E\u9AD6\u9B23\u9ECC\u7064\u77DA\u8B9A\u9477\u97C9\u9A62\u9A65\u7E9C\u8B9C\u8EAA\u91C5\u947D\u947E\u947C\u9C77\u9C78\u9EF7\u8C54\u947F\u9E1A\u7228\u9A6A\u9B31\u9E1B\u9E1E\u7C72\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[198].length; ++j)
        if (D[198][j].charCodeAt(0) !== 65533) {
          e[D[198][j]] = 50688 + j;
          d[50688 + j] = D[198][j];
        }
      D[201] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u4E42\u4E5C\u51F5\u531A\u5382\u4E07\u4E0C\u4E47\u4E8D\u56D7\uFA0C\u5C6E\u5F73\u4E0F\u5187\u4E0E\u4E2E\u4E93\u4EC2\u4EC9\u4EC8\u5198\u52FC\u536C\u53B9\u5720\u5903\u592C\u5C10\u5DFF\u65E1\u6BB3\u6BCC\u6C14\u723F\u4E31\u4E3C\u4EE8\u4EDC\u4EE9\u4EE1\u4EDD\u4EDA\u520C\u531C\u534C\u5722\u5723\u5917\u592F\u5B81\u5B84\u5C12\u5C3B\u5C74\u5C73\u5E04\u5E80\u5E82\u5FC9\u6209\u6250\u6C15\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6C36\u6C43\u6C3F\u6C3B\u72AE\u72B0\u738A\u79B8\u808A\u961E\u4F0E\u4F18\u4F2C\u4EF5\u4F14\u4EF1\u4F00\u4EF7\u4F08\u4F1D\u4F02\u4F05\u4F22\u4F13\u4F04\u4EF4\u4F12\u51B1\u5213\u5209\u5210\u52A6\u5322\u531F\u534D\u538A\u5407\u56E1\u56DF\u572E\u572A\u5734\u593C\u5980\u597C\u5985\u597B\u597E\u5977\u597F\u5B56\u5C15\u5C25\u5C7C\u5C7A\u5C7B\u5C7E\u5DDF\u5E75\u5E84\u5F02\u5F1A\u5F74\u5FD5\u5FD4\u5FCF\u625C\u625E\u6264\u6261\u6266\u6262\u6259\u6260\u625A\u6265\u65EF\u65EE\u673E\u6739\u6738\u673B\u673A\u673F\u673C\u6733\u6C18\u6C46\u6C52\u6C5C\u6C4F\u6C4A\u6C54\u6C4B\uFFFD".split("");
      for (j = 0; j != D[201].length; ++j)
        if (D[201][j].charCodeAt(0) !== 65533) {
          e[D[201][j]] = 51456 + j;
          d[51456 + j] = D[201][j];
        }
      D[202] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6C4C\u7071\u725E\u72B4\u72B5\u738E\u752A\u767F\u7A75\u7F51\u8278\u827C\u8280\u827D\u827F\u864D\u897E\u9099\u9097\u9098\u909B\u9094\u9622\u9624\u9620\u9623\u4F56\u4F3B\u4F62\u4F49\u4F53\u4F64\u4F3E\u4F67\u4F52\u4F5F\u4F41\u4F58\u4F2D\u4F33\u4F3F\u4F61\u518F\u51B9\u521C\u521E\u5221\u52AD\u52AE\u5309\u5363\u5372\u538E\u538F\u5430\u5437\u542A\u5454\u5445\u5419\u541C\u5425\u5418\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u543D\u544F\u5441\u5428\u5424\u5447\u56EE\u56E7\u56E5\u5741\u5745\u574C\u5749\u574B\u5752\u5906\u5940\u59A6\u5998\u59A0\u5997\u598E\u59A2\u5990\u598F\u59A7\u59A1\u5B8E\u5B92\u5C28\u5C2A\u5C8D\u5C8F\u5C88\u5C8B\u5C89\u5C92\u5C8A\u5C86\u5C93\u5C95\u5DE0\u5E0A\u5E0E\u5E8B\u5E89\u5E8C\u5E88\u5E8D\u5F05\u5F1D\u5F78\u5F76\u5FD2\u5FD1\u5FD0\u5FED\u5FE8\u5FEE\u5FF3\u5FE1\u5FE4\u5FE3\u5FFA\u5FEF\u5FF7\u5FFB\u6000\u5FF4\u623A\u6283\u628C\u628E\u628F\u6294\u6287\u6271\u627B\u627A\u6270\u6281\u6288\u6277\u627D\u6272\u6274\u6537\u65F0\u65F4\u65F3\u65F2\u65F5\u6745\u6747\uFFFD".split("");
      for (j = 0; j != D[202].length; ++j)
        if (D[202][j].charCodeAt(0) !== 65533) {
          e[D[202][j]] = 51712 + j;
          d[51712 + j] = D[202][j];
        }
      D[203] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6759\u6755\u674C\u6748\u675D\u674D\u675A\u674B\u6BD0\u6C19\u6C1A\u6C78\u6C67\u6C6B\u6C84\u6C8B\u6C8F\u6C71\u6C6F\u6C69\u6C9A\u6C6D\u6C87\u6C95\u6C9C\u6C66\u6C73\u6C65\u6C7B\u6C8E\u7074\u707A\u7263\u72BF\u72BD\u72C3\u72C6\u72C1\u72BA\u72C5\u7395\u7397\u7393\u7394\u7392\u753A\u7539\u7594\u7595\u7681\u793D\u8034\u8095\u8099\u8090\u8092\u809C\u8290\u828F\u8285\u828E\u8291\u8293\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u828A\u8283\u8284\u8C78\u8FC9\u8FBF\u909F\u90A1\u90A5\u909E\u90A7\u90A0\u9630\u9628\u962F\u962D\u4E33\u4F98\u4F7C\u4F85\u4F7D\u4F80\u4F87\u4F76\u4F74\u4F89\u4F84\u4F77\u4F4C\u4F97\u4F6A\u4F9A\u4F79\u4F81\u4F78\u4F90\u4F9C\u4F94\u4F9E\u4F92\u4F82\u4F95\u4F6B\u4F6E\u519E\u51BC\u51BE\u5235\u5232\u5233\u5246\u5231\u52BC\u530A\u530B\u533C\u5392\u5394\u5487\u547F\u5481\u5491\u5482\u5488\u546B\u547A\u547E\u5465\u546C\u5474\u5466\u548D\u546F\u5461\u5460\u5498\u5463\u5467\u5464\u56F7\u56F9\u576F\u5772\u576D\u576B\u5771\u5770\u5776\u5780\u5775\u577B\u5773\u5774\u5762\uFFFD".split("");
      for (j = 0; j != D[203].length; ++j)
        if (D[203][j].charCodeAt(0) !== 65533) {
          e[D[203][j]] = 51968 + j;
          d[51968 + j] = D[203][j];
        }
      D[204] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5768\u577D\u590C\u5945\u59B5\u59BA\u59CF\u59CE\u59B2\u59CC\u59C1\u59B6\u59BC\u59C3\u59D6\u59B1\u59BD\u59C0\u59C8\u59B4\u59C7\u5B62\u5B65\u5B93\u5B95\u5C44\u5C47\u5CAE\u5CA4\u5CA0\u5CB5\u5CAF\u5CA8\u5CAC\u5C9F\u5CA3\u5CAD\u5CA2\u5CAA\u5CA7\u5C9D\u5CA5\u5CB6\u5CB0\u5CA6\u5E17\u5E14\u5E19\u5F28\u5F22\u5F23\u5F24\u5F54\u5F82\u5F7E\u5F7D\u5FDE\u5FE5\u602D\u6026\u6019\u6032\u600B\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6034\u600A\u6017\u6033\u601A\u601E\u602C\u6022\u600D\u6010\u602E\u6013\u6011\u600C\u6009\u601C\u6214\u623D\u62AD\u62B4\u62D1\u62BE\u62AA\u62B6\u62CA\u62AE\u62B3\u62AF\u62BB\u62A9\u62B0\u62B8\u653D\u65A8\u65BB\u6609\u65FC\u6604\u6612\u6608\u65FB\u6603\u660B\u660D\u6605\u65FD\u6611\u6610\u66F6\u670A\u6785\u676C\u678E\u6792\u6776\u677B\u6798\u6786\u6784\u6774\u678D\u678C\u677A\u679F\u6791\u6799\u6783\u677D\u6781\u6778\u6779\u6794\u6B25\u6B80\u6B7E\u6BDE\u6C1D\u6C93\u6CEC\u6CEB\u6CEE\u6CD9\u6CB6\u6CD4\u6CAD\u6CE7\u6CB7\u6CD0\u6CC2\u6CBA\u6CC3\u6CC6\u6CED\u6CF2\uFFFD".split("");
      for (j = 0; j != D[204].length; ++j)
        if (D[204][j].charCodeAt(0) !== 65533) {
          e[D[204][j]] = 52224 + j;
          d[52224 + j] = D[204][j];
        }
      D[205] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6CD2\u6CDD\u6CB4\u6C8A\u6C9D\u6C80\u6CDE\u6CC0\u6D30\u6CCD\u6CC7\u6CB0\u6CF9\u6CCF\u6CE9\u6CD1\u7094\u7098\u7085\u7093\u7086\u7084\u7091\u7096\u7082\u709A\u7083\u726A\u72D6\u72CB\u72D8\u72C9\u72DC\u72D2\u72D4\u72DA\u72CC\u72D1\u73A4\u73A1\u73AD\u73A6\u73A2\u73A0\u73AC\u739D\u74DD\u74E8\u753F\u7540\u753E\u758C\u7598\u76AF\u76F3\u76F1\u76F0\u76F5\u77F8\u77FC\u77F9\u77FB\u77FA\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u77F7\u7942\u793F\u79C5\u7A78\u7A7B\u7AFB\u7C75\u7CFD\u8035\u808F\u80AE\u80A3\u80B8\u80B5\u80AD\u8220\u82A0\u82C0\u82AB\u829A\u8298\u829B\u82B5\u82A7\u82AE\u82BC\u829E\u82BA\u82B4\u82A8\u82A1\u82A9\u82C2\u82A4\u82C3\u82B6\u82A2\u8670\u866F\u866D\u866E\u8C56\u8FD2\u8FCB\u8FD3\u8FCD\u8FD6\u8FD5\u8FD7\u90B2\u90B4\u90AF\u90B3\u90B0\u9639\u963D\u963C\u963A\u9643\u4FCD\u4FC5\u4FD3\u4FB2\u4FC9\u4FCB\u4FC1\u4FD4\u4FDC\u4FD9\u4FBB\u4FB3\u4FDB\u4FC7\u4FD6\u4FBA\u4FC0\u4FB9\u4FEC\u5244\u5249\u52C0\u52C2\u533D\u537C\u5397\u5396\u5399\u5398\u54BA\u54A1\u54AD\u54A5\u54CF\uFFFD".split("");
      for (j = 0; j != D[205].length; ++j)
        if (D[205][j].charCodeAt(0) !== 65533) {
          e[D[205][j]] = 52480 + j;
          d[52480 + j] = D[205][j];
        }
      D[206] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u54C3\u830D\u54B7\u54AE\u54D6\u54B6\u54C5\u54C6\u54A0\u5470\u54BC\u54A2\u54BE\u5472\u54DE\u54B0\u57B5\u579E\u579F\u57A4\u578C\u5797\u579D\u579B\u5794\u5798\u578F\u5799\u57A5\u579A\u5795\u58F4\u590D\u5953\u59E1\u59DE\u59EE\u5A00\u59F1\u59DD\u59FA\u59FD\u59FC\u59F6\u59E4\u59F2\u59F7\u59DB\u59E9\u59F3\u59F5\u59E0\u59FE\u59F4\u59ED\u5BA8\u5C4C\u5CD0\u5CD8\u5CCC\u5CD7\u5CCB\u5CDB\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5CDE\u5CDA\u5CC9\u5CC7\u5CCA\u5CD6\u5CD3\u5CD4\u5CCF\u5CC8\u5CC6\u5CCE\u5CDF\u5CF8\u5DF9\u5E21\u5E22\u5E23\u5E20\u5E24\u5EB0\u5EA4\u5EA2\u5E9B\u5EA3\u5EA5\u5F07\u5F2E\u5F56\u5F86\u6037\u6039\u6054\u6072\u605E\u6045\u6053\u6047\u6049\u605B\u604C\u6040\u6042\u605F\u6024\u6044\u6058\u6066\u606E\u6242\u6243\u62CF\u630D\u630B\u62F5\u630E\u6303\u62EB\u62F9\u630F\u630C\u62F8\u62F6\u6300\u6313\u6314\u62FA\u6315\u62FB\u62F0\u6541\u6543\u65AA\u65BF\u6636\u6621\u6632\u6635\u661C\u6626\u6622\u6633\u662B\u663A\u661D\u6634\u6639\u662E\u670F\u6710\u67C1\u67F2\u67C8\u67BA\uFFFD".split("");
      for (j = 0; j != D[206].length; ++j)
        if (D[206][j].charCodeAt(0) !== 65533) {
          e[D[206][j]] = 52736 + j;
          d[52736 + j] = D[206][j];
        }
      D[207] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u67DC\u67BB\u67F8\u67D8\u67C0\u67B7\u67C5\u67EB\u67E4\u67DF\u67B5\u67CD\u67B3\u67F7\u67F6\u67EE\u67E3\u67C2\u67B9\u67CE\u67E7\u67F0\u67B2\u67FC\u67C6\u67ED\u67CC\u67AE\u67E6\u67DB\u67FA\u67C9\u67CA\u67C3\u67EA\u67CB\u6B28\u6B82\u6B84\u6BB6\u6BD6\u6BD8\u6BE0\u6C20\u6C21\u6D28\u6D34\u6D2D\u6D1F\u6D3C\u6D3F\u6D12\u6D0A\u6CDA\u6D33\u6D04\u6D19\u6D3A\u6D1A\u6D11\u6D00\u6D1D\u6D42\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6D01\u6D18\u6D37\u6D03\u6D0F\u6D40\u6D07\u6D20\u6D2C\u6D08\u6D22\u6D09\u6D10\u70B7\u709F\u70BE\u70B1\u70B0\u70A1\u70B4\u70B5\u70A9\u7241\u7249\u724A\u726C\u7270\u7273\u726E\u72CA\u72E4\u72E8\u72EB\u72DF\u72EA\u72E6\u72E3\u7385\u73CC\u73C2\u73C8\u73C5\u73B9\u73B6\u73B5\u73B4\u73EB\u73BF\u73C7\u73BE\u73C3\u73C6\u73B8\u73CB\u74EC\u74EE\u752E\u7547\u7548\u75A7\u75AA\u7679\u76C4\u7708\u7703\u7704\u7705\u770A\u76F7\u76FB\u76FA\u77E7\u77E8\u7806\u7811\u7812\u7805\u7810\u780F\u780E\u7809\u7803\u7813\u794A\u794C\u794B\u7945\u7944\u79D5\u79CD\u79CF\u79D6\u79CE\u7A80\uFFFD".split("");
      for (j = 0; j != D[207].length; ++j)
        if (D[207][j].charCodeAt(0) !== 65533) {
          e[D[207][j]] = 52992 + j;
          d[52992 + j] = D[207][j];
        }
      D[208] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7A7E\u7AD1\u7B00\u7B01\u7C7A\u7C78\u7C79\u7C7F\u7C80\u7C81\u7D03\u7D08\u7D01\u7F58\u7F91\u7F8D\u7FBE\u8007\u800E\u800F\u8014\u8037\u80D8\u80C7\u80E0\u80D1\u80C8\u80C2\u80D0\u80C5\u80E3\u80D9\u80DC\u80CA\u80D5\u80C9\u80CF\u80D7\u80E6\u80CD\u81FF\u8221\u8294\u82D9\u82FE\u82F9\u8307\u82E8\u8300\u82D5\u833A\u82EB\u82D6\u82F4\u82EC\u82E1\u82F2\u82F5\u830C\u82FB\u82F6\u82F0\u82EA\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u82E4\u82E0\u82FA\u82F3\u82ED\u8677\u8674\u867C\u8673\u8841\u884E\u8867\u886A\u8869\u89D3\u8A04\u8A07\u8D72\u8FE3\u8FE1\u8FEE\u8FE0\u90F1\u90BD\u90BF\u90D5\u90C5\u90BE\u90C7\u90CB\u90C8\u91D4\u91D3\u9654\u964F\u9651\u9653\u964A\u964E\u501E\u5005\u5007\u5013\u5022\u5030\u501B\u4FF5\u4FF4\u5033\u5037\u502C\u4FF6\u4FF7\u5017\u501C\u5020\u5027\u5035\u502F\u5031\u500E\u515A\u5194\u5193\u51CA\u51C4\u51C5\u51C8\u51CE\u5261\u525A\u5252\u525E\u525F\u5255\u5262\u52CD\u530E\u539E\u5526\u54E2\u5517\u5512\u54E7\u54F3\u54E4\u551A\u54FF\u5504\u5508\u54EB\u5511\u5505\u54F1\uFFFD".split("");
      for (j = 0; j != D[208].length; ++j)
        if (D[208][j].charCodeAt(0) !== 65533) {
          e[D[208][j]] = 53248 + j;
          d[53248 + j] = D[208][j];
        }
      D[209] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u550A\u54FB\u54F7\u54F8\u54E0\u550E\u5503\u550B\u5701\u5702\u57CC\u5832\u57D5\u57D2\u57BA\u57C6\u57BD\u57BC\u57B8\u57B6\u57BF\u57C7\u57D0\u57B9\u57C1\u590E\u594A\u5A19\u5A16\u5A2D\u5A2E\u5A15\u5A0F\u5A17\u5A0A\u5A1E\u5A33\u5B6C\u5BA7\u5BAD\u5BAC\u5C03\u5C56\u5C54\u5CEC\u5CFF\u5CEE\u5CF1\u5CF7\u5D00\u5CF9\u5E29\u5E28\u5EA8\u5EAE\u5EAA\u5EAC\u5F33\u5F30\u5F67\u605D\u605A\u6067\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6041\u60A2\u6088\u6080\u6092\u6081\u609D\u6083\u6095\u609B\u6097\u6087\u609C\u608E\u6219\u6246\u62F2\u6310\u6356\u632C\u6344\u6345\u6336\u6343\u63E4\u6339\u634B\u634A\u633C\u6329\u6341\u6334\u6358\u6354\u6359\u632D\u6347\u6333\u635A\u6351\u6338\u6357\u6340\u6348\u654A\u6546\u65C6\u65C3\u65C4\u65C2\u664A\u665F\u6647\u6651\u6712\u6713\u681F\u681A\u6849\u6832\u6833\u683B\u684B\u684F\u6816\u6831\u681C\u6835\u682B\u682D\u682F\u684E\u6844\u6834\u681D\u6812\u6814\u6826\u6828\u682E\u684D\u683A\u6825\u6820\u6B2C\u6B2F\u6B2D\u6B31\u6B34\u6B6D\u8082\u6B88\u6BE6\u6BE4\uFFFD".split("");
      for (j = 0; j != D[209].length; ++j)
        if (D[209][j].charCodeAt(0) !== 65533) {
          e[D[209][j]] = 53504 + j;
          d[53504 + j] = D[209][j];
        }
      D[210] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6BE8\u6BE3\u6BE2\u6BE7\u6C25\u6D7A\u6D63\u6D64\u6D76\u6D0D\u6D61\u6D92\u6D58\u6D62\u6D6D\u6D6F\u6D91\u6D8D\u6DEF\u6D7F\u6D86\u6D5E\u6D67\u6D60\u6D97\u6D70\u6D7C\u6D5F\u6D82\u6D98\u6D2F\u6D68\u6D8B\u6D7E\u6D80\u6D84\u6D16\u6D83\u6D7B\u6D7D\u6D75\u6D90\u70DC\u70D3\u70D1\u70DD\u70CB\u7F39\u70E2\u70D7\u70D2\u70DE\u70E0\u70D4\u70CD\u70C5\u70C6\u70C7\u70DA\u70CE\u70E1\u7242\u7278\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7277\u7276\u7300\u72FA\u72F4\u72FE\u72F6\u72F3\u72FB\u7301\u73D3\u73D9\u73E5\u73D6\u73BC\u73E7\u73E3\u73E9\u73DC\u73D2\u73DB\u73D4\u73DD\u73DA\u73D7\u73D8\u73E8\u74DE\u74DF\u74F4\u74F5\u7521\u755B\u755F\u75B0\u75C1\u75BB\u75C4\u75C0\u75BF\u75B6\u75BA\u768A\u76C9\u771D\u771B\u7710\u7713\u7712\u7723\u7711\u7715\u7719\u771A\u7722\u7727\u7823\u782C\u7822\u7835\u782F\u7828\u782E\u782B\u7821\u7829\u7833\u782A\u7831\u7954\u795B\u794F\u795C\u7953\u7952\u7951\u79EB\u79EC\u79E0\u79EE\u79ED\u79EA\u79DC\u79DE\u79DD\u7A86\u7A89\u7A85\u7A8B\u7A8C\u7A8A\u7A87\u7AD8\u7B10\uFFFD".split("");
      for (j = 0; j != D[210].length; ++j)
        if (D[210][j].charCodeAt(0) !== 65533) {
          e[D[210][j]] = 53760 + j;
          d[53760 + j] = D[210][j];
        }
      D[211] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7B04\u7B13\u7B05\u7B0F\u7B08\u7B0A\u7B0E\u7B09\u7B12\u7C84\u7C91\u7C8A\u7C8C\u7C88\u7C8D\u7C85\u7D1E\u7D1D\u7D11\u7D0E\u7D18\u7D16\u7D13\u7D1F\u7D12\u7D0F\u7D0C\u7F5C\u7F61\u7F5E\u7F60\u7F5D\u7F5B\u7F96\u7F92\u7FC3\u7FC2\u7FC0\u8016\u803E\u8039\u80FA\u80F2\u80F9\u80F5\u8101\u80FB\u8100\u8201\u822F\u8225\u8333\u832D\u8344\u8319\u8351\u8325\u8356\u833F\u8341\u8326\u831C\u8322\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8342\u834E\u831B\u832A\u8308\u833C\u834D\u8316\u8324\u8320\u8337\u832F\u8329\u8347\u8345\u834C\u8353\u831E\u832C\u834B\u8327\u8348\u8653\u8652\u86A2\u86A8\u8696\u868D\u8691\u869E\u8687\u8697\u8686\u868B\u869A\u8685\u86A5\u8699\u86A1\u86A7\u8695\u8698\u868E\u869D\u8690\u8694\u8843\u8844\u886D\u8875\u8876\u8872\u8880\u8871\u887F\u886F\u8883\u887E\u8874\u887C\u8A12\u8C47\u8C57\u8C7B\u8CA4\u8CA3\u8D76\u8D78\u8DB5\u8DB7\u8DB6\u8ED1\u8ED3\u8FFE\u8FF5\u9002\u8FFF\u8FFB\u9004\u8FFC\u8FF6\u90D6\u90E0\u90D9\u90DA\u90E3\u90DF\u90E5\u90D8\u90DB\u90D7\u90DC\u90E4\u9150\uFFFD".split("");
      for (j = 0; j != D[211].length; ++j)
        if (D[211][j].charCodeAt(0) !== 65533) {
          e[D[211][j]] = 54016 + j;
          d[54016 + j] = D[211][j];
        }
      D[212] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u914E\u914F\u91D5\u91E2\u91DA\u965C\u965F\u96BC\u98E3\u9ADF\u9B2F\u4E7F\u5070\u506A\u5061\u505E\u5060\u5053\u504B\u505D\u5072\u5048\u504D\u5041\u505B\u504A\u5062\u5015\u5045\u505F\u5069\u506B\u5063\u5064\u5046\u5040\u506E\u5073\u5057\u5051\u51D0\u526B\u526D\u526C\u526E\u52D6\u52D3\u532D\u539C\u5575\u5576\u553C\u554D\u5550\u5534\u552A\u5551\u5562\u5536\u5535\u5530\u5552\u5545\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u550C\u5532\u5565\u554E\u5539\u5548\u552D\u553B\u5540\u554B\u570A\u5707\u57FB\u5814\u57E2\u57F6\u57DC\u57F4\u5800\u57ED\u57FD\u5808\u57F8\u580B\u57F3\u57CF\u5807\u57EE\u57E3\u57F2\u57E5\u57EC\u57E1\u580E\u57FC\u5810\u57E7\u5801\u580C\u57F1\u57E9\u57F0\u580D\u5804\u595C\u5A60\u5A58\u5A55\u5A67\u5A5E\u5A38\u5A35\u5A6D\u5A50\u5A5F\u5A65\u5A6C\u5A53\u5A64\u5A57\u5A43\u5A5D\u5A52\u5A44\u5A5B\u5A48\u5A8E\u5A3E\u5A4D\u5A39\u5A4C\u5A70\u5A69\u5A47\u5A51\u5A56\u5A42\u5A5C\u5B72\u5B6E\u5BC1\u5BC0\u5C59\u5D1E\u5D0B\u5D1D\u5D1A\u5D20\u5D0C\u5D28\u5D0D\u5D26\u5D25\u5D0F\uFFFD".split("");
      for (j = 0; j != D[212].length; ++j)
        if (D[212][j].charCodeAt(0) !== 65533) {
          e[D[212][j]] = 54272 + j;
          d[54272 + j] = D[212][j];
        }
      D[213] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5D30\u5D12\u5D23\u5D1F\u5D2E\u5E3E\u5E34\u5EB1\u5EB4\u5EB9\u5EB2\u5EB3\u5F36\u5F38\u5F9B\u5F96\u5F9F\u608A\u6090\u6086\u60BE\u60B0\u60BA\u60D3\u60D4\u60CF\u60E4\u60D9\u60DD\u60C8\u60B1\u60DB\u60B7\u60CA\u60BF\u60C3\u60CD\u60C0\u6332\u6365\u638A\u6382\u637D\u63BD\u639E\u63AD\u639D\u6397\u63AB\u638E\u636F\u6387\u6390\u636E\u63AF\u6375\u639C\u636D\u63AE\u637C\u63A4\u633B\u639F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6378\u6385\u6381\u6391\u638D\u6370\u6553\u65CD\u6665\u6661\u665B\u6659\u665C\u6662\u6718\u6879\u6887\u6890\u689C\u686D\u686E\u68AE\u68AB\u6956\u686F\u68A3\u68AC\u68A9\u6875\u6874\u68B2\u688F\u6877\u6892\u687C\u686B\u6872\u68AA\u6880\u6871\u687E\u689B\u6896\u688B\u68A0\u6889\u68A4\u6878\u687B\u6891\u688C\u688A\u687D\u6B36\u6B33\u6B37\u6B38\u6B91\u6B8F\u6B8D\u6B8E\u6B8C\u6C2A\u6DC0\u6DAB\u6DB4\u6DB3\u6E74\u6DAC\u6DE9\u6DE2\u6DB7\u6DF6\u6DD4\u6E00\u6DC8\u6DE0\u6DDF\u6DD6\u6DBE\u6DE5\u6DDC\u6DDD\u6DDB\u6DF4\u6DCA\u6DBD\u6DED\u6DF0\u6DBA\u6DD5\u6DC2\u6DCF\u6DC9\uFFFD".split("");
      for (j = 0; j != D[213].length; ++j)
        if (D[213][j].charCodeAt(0) !== 65533) {
          e[D[213][j]] = 54528 + j;
          d[54528 + j] = D[213][j];
        }
      D[214] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6DD0\u6DF2\u6DD3\u6DFD\u6DD7\u6DCD\u6DE3\u6DBB\u70FA\u710D\u70F7\u7117\u70F4\u710C\u70F0\u7104\u70F3\u7110\u70FC\u70FF\u7106\u7113\u7100\u70F8\u70F6\u710B\u7102\u710E\u727E\u727B\u727C\u727F\u731D\u7317\u7307\u7311\u7318\u730A\u7308\u72FF\u730F\u731E\u7388\u73F6\u73F8\u73F5\u7404\u7401\u73FD\u7407\u7400\u73FA\u73FC\u73FF\u740C\u740B\u73F4\u7408\u7564\u7563\u75CE\u75D2\u75CF\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u75CB\u75CC\u75D1\u75D0\u768F\u7689\u76D3\u7739\u772F\u772D\u7731\u7732\u7734\u7733\u773D\u7725\u773B\u7735\u7848\u7852\u7849\u784D\u784A\u784C\u7826\u7845\u7850\u7964\u7967\u7969\u796A\u7963\u796B\u7961\u79BB\u79FA\u79F8\u79F6\u79F7\u7A8F\u7A94\u7A90\u7B35\u7B47\u7B34\u7B25\u7B30\u7B22\u7B24\u7B33\u7B18\u7B2A\u7B1D\u7B31\u7B2B\u7B2D\u7B2F\u7B32\u7B38\u7B1A\u7B23\u7C94\u7C98\u7C96\u7CA3\u7D35\u7D3D\u7D38\u7D36\u7D3A\u7D45\u7D2C\u7D29\u7D41\u7D47\u7D3E\u7D3F\u7D4A\u7D3B\u7D28\u7F63\u7F95\u7F9C\u7F9D\u7F9B\u7FCA\u7FCB\u7FCD\u7FD0\u7FD1\u7FC7\u7FCF\u7FC9\u801F\uFFFD".split("");
      for (j = 0; j != D[214].length; ++j)
        if (D[214][j].charCodeAt(0) !== 65533) {
          e[D[214][j]] = 54784 + j;
          d[54784 + j] = D[214][j];
        }
      D[215] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u801E\u801B\u8047\u8043\u8048\u8118\u8125\u8119\u811B\u812D\u811F\u812C\u811E\u8121\u8115\u8127\u811D\u8122\u8211\u8238\u8233\u823A\u8234\u8232\u8274\u8390\u83A3\u83A8\u838D\u837A\u8373\u83A4\u8374\u838F\u8381\u8395\u8399\u8375\u8394\u83A9\u837D\u8383\u838C\u839D\u839B\u83AA\u838B\u837E\u83A5\u83AF\u8388\u8397\u83B0\u837F\u83A6\u8387\u83AE\u8376\u839A\u8659\u8656\u86BF\u86B7\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u86C2\u86C1\u86C5\u86BA\u86B0\u86C8\u86B9\u86B3\u86B8\u86CC\u86B4\u86BB\u86BC\u86C3\u86BD\u86BE\u8852\u8889\u8895\u88A8\u88A2\u88AA\u889A\u8891\u88A1\u889F\u8898\u88A7\u8899\u889B\u8897\u88A4\u88AC\u888C\u8893\u888E\u8982\u89D6\u89D9\u89D5\u8A30\u8A27\u8A2C\u8A1E\u8C39\u8C3B\u8C5C\u8C5D\u8C7D\u8CA5\u8D7D\u8D7B\u8D79\u8DBC\u8DC2\u8DB9\u8DBF\u8DC1\u8ED8\u8EDE\u8EDD\u8EDC\u8ED7\u8EE0\u8EE1\u9024\u900B\u9011\u901C\u900C\u9021\u90EF\u90EA\u90F0\u90F4\u90F2\u90F3\u90D4\u90EB\u90EC\u90E9\u9156\u9158\u915A\u9153\u9155\u91EC\u91F4\u91F1\u91F3\u91F8\u91E4\u91F9\u91EA\uFFFD".split("");
      for (j = 0; j != D[215].length; ++j)
        if (D[215][j].charCodeAt(0) !== 65533) {
          e[D[215][j]] = 55040 + j;
          d[55040 + j] = D[215][j];
        }
      D[216] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u91EB\u91F7\u91E8\u91EE\u957A\u9586\u9588\u967C\u966D\u966B\u9671\u966F\u96BF\u976A\u9804\u98E5\u9997\u509B\u5095\u5094\u509E\u508B\u50A3\u5083\u508C\u508E\u509D\u5068\u509C\u5092\u5082\u5087\u515F\u51D4\u5312\u5311\u53A4\u53A7\u5591\u55A8\u55A5\u55AD\u5577\u5645\u55A2\u5593\u5588\u558F\u55B5\u5581\u55A3\u5592\u55A4\u557D\u558C\u55A6\u557F\u5595\u55A1\u558E\u570C\u5829\u5837\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5819\u581E\u5827\u5823\u5828\u57F5\u5848\u5825\u581C\u581B\u5833\u583F\u5836\u582E\u5839\u5838\u582D\u582C\u583B\u5961\u5AAF\u5A94\u5A9F\u5A7A\u5AA2\u5A9E\u5A78\u5AA6\u5A7C\u5AA5\u5AAC\u5A95\u5AAE\u5A37\u5A84\u5A8A\u5A97\u5A83\u5A8B\u5AA9\u5A7B\u5A7D\u5A8C\u5A9C\u5A8F\u5A93\u5A9D\u5BEA\u5BCD\u5BCB\u5BD4\u5BD1\u5BCA\u5BCE\u5C0C\u5C30\u5D37\u5D43\u5D6B\u5D41\u5D4B\u5D3F\u5D35\u5D51\u5D4E\u5D55\u5D33\u5D3A\u5D52\u5D3D\u5D31\u5D59\u5D42\u5D39\u5D49\u5D38\u5D3C\u5D32\u5D36\u5D40\u5D45\u5E44\u5E41\u5F58\u5FA6\u5FA5\u5FAB\u60C9\u60B9\u60CC\u60E2\u60CE\u60C4\u6114\uFFFD".split("");
      for (j = 0; j != D[216].length; ++j)
        if (D[216][j].charCodeAt(0) !== 65533) {
          e[D[216][j]] = 55296 + j;
          d[55296 + j] = D[216][j];
        }
      D[217] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u60F2\u610A\u6116\u6105\u60F5\u6113\u60F8\u60FC\u60FE\u60C1\u6103\u6118\u611D\u6110\u60FF\u6104\u610B\u624A\u6394\u63B1\u63B0\u63CE\u63E5\u63E8\u63EF\u63C3\u649D\u63F3\u63CA\u63E0\u63F6\u63D5\u63F2\u63F5\u6461\u63DF\u63BE\u63DD\u63DC\u63C4\u63D8\u63D3\u63C2\u63C7\u63CC\u63CB\u63C8\u63F0\u63D7\u63D9\u6532\u6567\u656A\u6564\u655C\u6568\u6565\u658C\u659D\u659E\u65AE\u65D0\u65D2\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u667C\u666C\u667B\u6680\u6671\u6679\u666A\u6672\u6701\u690C\u68D3\u6904\u68DC\u692A\u68EC\u68EA\u68F1\u690F\u68D6\u68F7\u68EB\u68E4\u68F6\u6913\u6910\u68F3\u68E1\u6907\u68CC\u6908\u6970\u68B4\u6911\u68EF\u68C6\u6914\u68F8\u68D0\u68FD\u68FC\u68E8\u690B\u690A\u6917\u68CE\u68C8\u68DD\u68DE\u68E6\u68F4\u68D1\u6906\u68D4\u68E9\u6915\u6925\u68C7\u6B39\u6B3B\u6B3F\u6B3C\u6B94\u6B97\u6B99\u6B95\u6BBD\u6BF0\u6BF2\u6BF3\u6C30\u6DFC\u6E46\u6E47\u6E1F\u6E49\u6E88\u6E3C\u6E3D\u6E45\u6E62\u6E2B\u6E3F\u6E41\u6E5D\u6E73\u6E1C\u6E33\u6E4B\u6E40\u6E51\u6E3B\u6E03\u6E2E\u6E5E\uFFFD".split("");
      for (j = 0; j != D[217].length; ++j)
        if (D[217][j].charCodeAt(0) !== 65533) {
          e[D[217][j]] = 55552 + j;
          d[55552 + j] = D[217][j];
        }
      D[218] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6E68\u6E5C\u6E61\u6E31\u6E28\u6E60\u6E71\u6E6B\u6E39\u6E22\u6E30\u6E53\u6E65\u6E27\u6E78\u6E64\u6E77\u6E55\u6E79\u6E52\u6E66\u6E35\u6E36\u6E5A\u7120\u711E\u712F\u70FB\u712E\u7131\u7123\u7125\u7122\u7132\u711F\u7128\u713A\u711B\u724B\u725A\u7288\u7289\u7286\u7285\u728B\u7312\u730B\u7330\u7322\u7331\u7333\u7327\u7332\u732D\u7326\u7323\u7335\u730C\u742E\u742C\u7430\u742B\u7416\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u741A\u7421\u742D\u7431\u7424\u7423\u741D\u7429\u7420\u7432\u74FB\u752F\u756F\u756C\u75E7\u75DA\u75E1\u75E6\u75DD\u75DF\u75E4\u75D7\u7695\u7692\u76DA\u7746\u7747\u7744\u774D\u7745\u774A\u774E\u774B\u774C\u77DE\u77EC\u7860\u7864\u7865\u785C\u786D\u7871\u786A\u786E\u7870\u7869\u7868\u785E\u7862\u7974\u7973\u7972\u7970\u7A02\u7A0A\u7A03\u7A0C\u7A04\u7A99\u7AE6\u7AE4\u7B4A\u7B3B\u7B44\u7B48\u7B4C\u7B4E\u7B40\u7B58\u7B45\u7CA2\u7C9E\u7CA8\u7CA1\u7D58\u7D6F\u7D63\u7D53\u7D56\u7D67\u7D6A\u7D4F\u7D6D\u7D5C\u7D6B\u7D52\u7D54\u7D69\u7D51\u7D5F\u7D4E\u7F3E\u7F3F\u7F65\uFFFD".split("");
      for (j = 0; j != D[218].length; ++j)
        if (D[218][j].charCodeAt(0) !== 65533) {
          e[D[218][j]] = 55808 + j;
          d[55808 + j] = D[218][j];
        }
      D[219] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7F66\u7FA2\u7FA0\u7FA1\u7FD7\u8051\u804F\u8050\u80FE\u80D4\u8143\u814A\u8152\u814F\u8147\u813D\u814D\u813A\u81E6\u81EE\u81F7\u81F8\u81F9\u8204\u823C\u823D\u823F\u8275\u833B\u83CF\u83F9\u8423\u83C0\u83E8\u8412\u83E7\u83E4\u83FC\u83F6\u8410\u83C6\u83C8\u83EB\u83E3\u83BF\u8401\u83DD\u83E5\u83D8\u83FF\u83E1\u83CB\u83CE\u83D6\u83F5\u83C9\u8409\u840F\u83DE\u8411\u8406\u83C2\u83F3\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u83D5\u83FA\u83C7\u83D1\u83EA\u8413\u83C3\u83EC\u83EE\u83C4\u83FB\u83D7\u83E2\u841B\u83DB\u83FE\u86D8\u86E2\u86E6\u86D3\u86E3\u86DA\u86EA\u86DD\u86EB\u86DC\u86EC\u86E9\u86D7\u86E8\u86D1\u8848\u8856\u8855\u88BA\u88D7\u88B9\u88B8\u88C0\u88BE\u88B6\u88BC\u88B7\u88BD\u88B2\u8901\u88C9\u8995\u8998\u8997\u89DD\u89DA\u89DB\u8A4E\u8A4D\u8A39\u8A59\u8A40\u8A57\u8A58\u8A44\u8A45\u8A52\u8A48\u8A51\u8A4A\u8A4C\u8A4F\u8C5F\u8C81\u8C80\u8CBA\u8CBE\u8CB0\u8CB9\u8CB5\u8D84\u8D80\u8D89\u8DD8\u8DD3\u8DCD\u8DC7\u8DD6\u8DDC\u8DCF\u8DD5\u8DD9\u8DC8\u8DD7\u8DC5\u8EEF\u8EF7\u8EFA\uFFFD".split("");
      for (j = 0; j != D[219].length; ++j)
        if (D[219][j].charCodeAt(0) !== 65533) {
          e[D[219][j]] = 56064 + j;
          d[56064 + j] = D[219][j];
        }
      D[220] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8EF9\u8EE6\u8EEE\u8EE5\u8EF5\u8EE7\u8EE8\u8EF6\u8EEB\u8EF1\u8EEC\u8EF4\u8EE9\u902D\u9034\u902F\u9106\u912C\u9104\u90FF\u90FC\u9108\u90F9\u90FB\u9101\u9100\u9107\u9105\u9103\u9161\u9164\u915F\u9162\u9160\u9201\u920A\u9225\u9203\u921A\u9226\u920F\u920C\u9200\u9212\u91FF\u91FD\u9206\u9204\u9227\u9202\u921C\u9224\u9219\u9217\u9205\u9216\u957B\u958D\u958C\u9590\u9687\u967E\u9688\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9689\u9683\u9680\u96C2\u96C8\u96C3\u96F1\u96F0\u976C\u9770\u976E\u9807\u98A9\u98EB\u9CE6\u9EF9\u4E83\u4E84\u4EB6\u50BD\u50BF\u50C6\u50AE\u50C4\u50CA\u50B4\u50C8\u50C2\u50B0\u50C1\u50BA\u50B1\u50CB\u50C9\u50B6\u50B8\u51D7\u527A\u5278\u527B\u527C\u55C3\u55DB\u55CC\u55D0\u55CB\u55CA\u55DD\u55C0\u55D4\u55C4\u55E9\u55BF\u55D2\u558D\u55CF\u55D5\u55E2\u55D6\u55C8\u55F2\u55CD\u55D9\u55C2\u5714\u5853\u5868\u5864\u584F\u584D\u5849\u586F\u5855\u584E\u585D\u5859\u5865\u585B\u583D\u5863\u5871\u58FC\u5AC7\u5AC4\u5ACB\u5ABA\u5AB8\u5AB1\u5AB5\u5AB0\u5ABF\u5AC8\u5ABB\u5AC6\uFFFD".split("");
      for (j = 0; j != D[220].length; ++j)
        if (D[220][j].charCodeAt(0) !== 65533) {
          e[D[220][j]] = 56320 + j;
          d[56320 + j] = D[220][j];
        }
      D[221] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5AB7\u5AC0\u5ACA\u5AB4\u5AB6\u5ACD\u5AB9\u5A90\u5BD6\u5BD8\u5BD9\u5C1F\u5C33\u5D71\u5D63\u5D4A\u5D65\u5D72\u5D6C\u5D5E\u5D68\u5D67\u5D62\u5DF0\u5E4F\u5E4E\u5E4A\u5E4D\u5E4B\u5EC5\u5ECC\u5EC6\u5ECB\u5EC7\u5F40\u5FAF\u5FAD\u60F7\u6149\u614A\u612B\u6145\u6136\u6132\u612E\u6146\u612F\u614F\u6129\u6140\u6220\u9168\u6223\u6225\u6224\u63C5\u63F1\u63EB\u6410\u6412\u6409\u6420\u6424\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6433\u6443\u641F\u6415\u6418\u6439\u6437\u6422\u6423\u640C\u6426\u6430\u6428\u6441\u6435\u642F\u640A\u641A\u6440\u6425\u6427\u640B\u63E7\u641B\u642E\u6421\u640E\u656F\u6592\u65D3\u6686\u668C\u6695\u6690\u668B\u668A\u6699\u6694\u6678\u6720\u6966\u695F\u6938\u694E\u6962\u6971\u693F\u6945\u696A\u6939\u6942\u6957\u6959\u697A\u6948\u6949\u6935\u696C\u6933\u693D\u6965\u68F0\u6978\u6934\u6969\u6940\u696F\u6944\u6976\u6958\u6941\u6974\u694C\u693B\u694B\u6937\u695C\u694F\u6951\u6932\u6952\u692F\u697B\u693C\u6B46\u6B45\u6B43\u6B42\u6B48\u6B41\u6B9B\uFA0D\u6BFB\u6BFC\uFFFD".split("");
      for (j = 0; j != D[221].length; ++j)
        if (D[221][j].charCodeAt(0) !== 65533) {
          e[D[221][j]] = 56576 + j;
          d[56576 + j] = D[221][j];
        }
      D[222] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6BF9\u6BF7\u6BF8\u6E9B\u6ED6\u6EC8\u6E8F\u6EC0\u6E9F\u6E93\u6E94\u6EA0\u6EB1\u6EB9\u6EC6\u6ED2\u6EBD\u6EC1\u6E9E\u6EC9\u6EB7\u6EB0\u6ECD\u6EA6\u6ECF\u6EB2\u6EBE\u6EC3\u6EDC\u6ED8\u6E99\u6E92\u6E8E\u6E8D\u6EA4\u6EA1\u6EBF\u6EB3\u6ED0\u6ECA\u6E97\u6EAE\u6EA3\u7147\u7154\u7152\u7163\u7160\u7141\u715D\u7162\u7172\u7178\u716A\u7161\u7142\u7158\u7143\u714B\u7170\u715F\u7150\u7153\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7144\u714D\u715A\u724F\u728D\u728C\u7291\u7290\u728E\u733C\u7342\u733B\u733A\u7340\u734A\u7349\u7444\u744A\u744B\u7452\u7451\u7457\u7440\u744F\u7450\u744E\u7442\u7446\u744D\u7454\u74E1\u74FF\u74FE\u74FD\u751D\u7579\u7577\u6983\u75EF\u760F\u7603\u75F7\u75FE\u75FC\u75F9\u75F8\u7610\u75FB\u75F6\u75ED\u75F5\u75FD\u7699\u76B5\u76DD\u7755\u775F\u7760\u7752\u7756\u775A\u7769\u7767\u7754\u7759\u776D\u77E0\u7887\u789A\u7894\u788F\u7884\u7895\u7885\u7886\u78A1\u7883\u7879\u7899\u7880\u7896\u787B\u797C\u7982\u797D\u7979\u7A11\u7A18\u7A19\u7A12\u7A17\u7A15\u7A22\u7A13\uFFFD".split("");
      for (j = 0; j != D[222].length; ++j)
        if (D[222][j].charCodeAt(0) !== 65533) {
          e[D[222][j]] = 56832 + j;
          d[56832 + j] = D[222][j];
        }
      D[223] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7A1B\u7A10\u7AA3\u7AA2\u7A9E\u7AEB\u7B66\u7B64\u7B6D\u7B74\u7B69\u7B72\u7B65\u7B73\u7B71\u7B70\u7B61\u7B78\u7B76\u7B63\u7CB2\u7CB4\u7CAF\u7D88\u7D86\u7D80\u7D8D\u7D7F\u7D85\u7D7A\u7D8E\u7D7B\u7D83\u7D7C\u7D8C\u7D94\u7D84\u7D7D\u7D92\u7F6D\u7F6B\u7F67\u7F68\u7F6C\u7FA6\u7FA5\u7FA7\u7FDB\u7FDC\u8021\u8164\u8160\u8177\u815C\u8169\u815B\u8162\u8172\u6721\u815E\u8176\u8167\u816F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8144\u8161\u821D\u8249\u8244\u8240\u8242\u8245\u84F1\u843F\u8456\u8476\u8479\u848F\u848D\u8465\u8451\u8440\u8486\u8467\u8430\u844D\u847D\u845A\u8459\u8474\u8473\u845D\u8507\u845E\u8437\u843A\u8434\u847A\u8443\u8478\u8432\u8445\u8429\u83D9\u844B\u842F\u8442\u842D\u845F\u8470\u8439\u844E\u844C\u8452\u846F\u84C5\u848E\u843B\u8447\u8436\u8433\u8468\u847E\u8444\u842B\u8460\u8454\u846E\u8450\u870B\u8704\u86F7\u870C\u86FA\u86D6\u86F5\u874D\u86F8\u870E\u8709\u8701\u86F6\u870D\u8705\u88D6\u88CB\u88CD\u88CE\u88DE\u88DB\u88DA\u88CC\u88D0\u8985\u899B\u89DF\u89E5\u89E4\uFFFD".split("");
      for (j = 0; j != D[223].length; ++j)
        if (D[223][j].charCodeAt(0) !== 65533) {
          e[D[223][j]] = 57088 + j;
          d[57088 + j] = D[223][j];
        }
      D[224] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u89E1\u89E0\u89E2\u89DC\u89E6\u8A76\u8A86\u8A7F\u8A61\u8A3F\u8A77\u8A82\u8A84\u8A75\u8A83\u8A81\u8A74\u8A7A\u8C3C\u8C4B\u8C4A\u8C65\u8C64\u8C66\u8C86\u8C84\u8C85\u8CCC\u8D68\u8D69\u8D91\u8D8C\u8D8E\u8D8F\u8D8D\u8D93\u8D94\u8D90\u8D92\u8DF0\u8DE0\u8DEC\u8DF1\u8DEE\u8DD0\u8DE9\u8DE3\u8DE2\u8DE7\u8DF2\u8DEB\u8DF4\u8F06\u8EFF\u8F01\u8F00\u8F05\u8F07\u8F08\u8F02\u8F0B\u9052\u903F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9044\u9049\u903D\u9110\u910D\u910F\u9111\u9116\u9114\u910B\u910E\u916E\u916F\u9248\u9252\u9230\u923A\u9266\u9233\u9265\u925E\u9283\u922E\u924A\u9246\u926D\u926C\u924F\u9260\u9267\u926F\u9236\u9261\u9270\u9231\u9254\u9263\u9250\u9272\u924E\u9253\u924C\u9256\u9232\u959F\u959C\u959E\u959B\u9692\u9693\u9691\u9697\u96CE\u96FA\u96FD\u96F8\u96F5\u9773\u9777\u9778\u9772\u980F\u980D\u980E\u98AC\u98F6\u98F9\u99AF\u99B2\u99B0\u99B5\u9AAD\u9AAB\u9B5B\u9CEA\u9CED\u9CE7\u9E80\u9EFD\u50E6\u50D4\u50D7\u50E8\u50F3\u50DB\u50EA\u50DD\u50E4\u50D3\u50EC\u50F0\u50EF\u50E3\u50E0\uFFFD".split("");
      for (j = 0; j != D[224].length; ++j)
        if (D[224][j].charCodeAt(0) !== 65533) {
          e[D[224][j]] = 57344 + j;
          d[57344 + j] = D[224][j];
        }
      D[225] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u51D8\u5280\u5281\u52E9\u52EB\u5330\u53AC\u5627\u5615\u560C\u5612\u55FC\u560F\u561C\u5601\u5613\u5602\u55FA\u561D\u5604\u55FF\u55F9\u5889\u587C\u5890\u5898\u5886\u5881\u587F\u5874\u588B\u587A\u5887\u5891\u588E\u5876\u5882\u5888\u587B\u5894\u588F\u58FE\u596B\u5ADC\u5AEE\u5AE5\u5AD5\u5AEA\u5ADA\u5AED\u5AEB\u5AF3\u5AE2\u5AE0\u5ADB\u5AEC\u5ADE\u5ADD\u5AD9\u5AE8\u5ADF\u5B77\u5BE0\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5BE3\u5C63\u5D82\u5D80\u5D7D\u5D86\u5D7A\u5D81\u5D77\u5D8A\u5D89\u5D88\u5D7E\u5D7C\u5D8D\u5D79\u5D7F\u5E58\u5E59\u5E53\u5ED8\u5ED1\u5ED7\u5ECE\u5EDC\u5ED5\u5ED9\u5ED2\u5ED4\u5F44\u5F43\u5F6F\u5FB6\u612C\u6128\u6141\u615E\u6171\u6173\u6152\u6153\u6172\u616C\u6180\u6174\u6154\u617A\u615B\u6165\u613B\u616A\u6161\u6156\u6229\u6227\u622B\u642B\u644D\u645B\u645D\u6474\u6476\u6472\u6473\u647D\u6475\u6466\u64A6\u644E\u6482\u645E\u645C\u644B\u6453\u6460\u6450\u647F\u643F\u646C\u646B\u6459\u6465\u6477\u6573\u65A0\u66A1\u66A0\u669F\u6705\u6704\u6722\u69B1\u69B6\u69C9\uFFFD".split("");
      for (j = 0; j != D[225].length; ++j)
        if (D[225][j].charCodeAt(0) !== 65533) {
          e[D[225][j]] = 57600 + j;
          d[57600 + j] = D[225][j];
        }
      D[226] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u69A0\u69CE\u6996\u69B0\u69AC\u69BC\u6991\u6999\u698E\u69A7\u698D\u69A9\u69BE\u69AF\u69BF\u69C4\u69BD\u69A4\u69D4\u69B9\u69CA\u699A\u69CF\u69B3\u6993\u69AA\u69A1\u699E\u69D9\u6997\u6990\u69C2\u69B5\u69A5\u69C6\u6B4A\u6B4D\u6B4B\u6B9E\u6B9F\u6BA0\u6BC3\u6BC4\u6BFE\u6ECE\u6EF5\u6EF1\u6F03\u6F25\u6EF8\u6F37\u6EFB\u6F2E\u6F09\u6F4E\u6F19\u6F1A\u6F27\u6F18\u6F3B\u6F12\u6EED\u6F0A\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6F36\u6F73\u6EF9\u6EEE\u6F2D\u6F40\u6F30\u6F3C\u6F35\u6EEB\u6F07\u6F0E\u6F43\u6F05\u6EFD\u6EF6\u6F39\u6F1C\u6EFC\u6F3A\u6F1F\u6F0D\u6F1E\u6F08\u6F21\u7187\u7190\u7189\u7180\u7185\u7182\u718F\u717B\u7186\u7181\u7197\u7244\u7253\u7297\u7295\u7293\u7343\u734D\u7351\u734C\u7462\u7473\u7471\u7475\u7472\u7467\u746E\u7500\u7502\u7503\u757D\u7590\u7616\u7608\u760C\u7615\u7611\u760A\u7614\u76B8\u7781\u777C\u7785\u7782\u776E\u7780\u776F\u777E\u7783\u78B2\u78AA\u78B4\u78AD\u78A8\u787E\u78AB\u789E\u78A5\u78A0\u78AC\u78A2\u78A4\u7998\u798A\u798B\u7996\u7995\u7994\u7993\uFFFD".split("");
      for (j = 0; j != D[226].length; ++j)
        if (D[226][j].charCodeAt(0) !== 65533) {
          e[D[226][j]] = 57856 + j;
          d[57856 + j] = D[226][j];
        }
      D[227] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7997\u7988\u7992\u7990\u7A2B\u7A4A\u7A30\u7A2F\u7A28\u7A26\u7AA8\u7AAB\u7AAC\u7AEE\u7B88\u7B9C\u7B8A\u7B91\u7B90\u7B96\u7B8D\u7B8C\u7B9B\u7B8E\u7B85\u7B98\u5284\u7B99\u7BA4\u7B82\u7CBB\u7CBF\u7CBC\u7CBA\u7DA7\u7DB7\u7DC2\u7DA3\u7DAA\u7DC1\u7DC0\u7DC5\u7D9D\u7DCE\u7DC4\u7DC6\u7DCB\u7DCC\u7DAF\u7DB9\u7D96\u7DBC\u7D9F\u7DA6\u7DAE\u7DA9\u7DA1\u7DC9\u7F73\u7FE2\u7FE3\u7FE5\u7FDE\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8024\u805D\u805C\u8189\u8186\u8183\u8187\u818D\u818C\u818B\u8215\u8497\u84A4\u84A1\u849F\u84BA\u84CE\u84C2\u84AC\u84AE\u84AB\u84B9\u84B4\u84C1\u84CD\u84AA\u849A\u84B1\u84D0\u849D\u84A7\u84BB\u84A2\u8494\u84C7\u84CC\u849B\u84A9\u84AF\u84A8\u84D6\u8498\u84B6\u84CF\u84A0\u84D7\u84D4\u84D2\u84DB\u84B0\u8491\u8661\u8733\u8723\u8728\u876B\u8740\u872E\u871E\u8721\u8719\u871B\u8743\u872C\u8741\u873E\u8746\u8720\u8732\u872A\u872D\u873C\u8712\u873A\u8731\u8735\u8742\u8726\u8727\u8738\u8724\u871A\u8730\u8711\u88F7\u88E7\u88F1\u88F2\u88FA\u88FE\u88EE\u88FC\u88F6\u88FB\uFFFD".split("");
      for (j = 0; j != D[227].length; ++j)
        if (D[227][j].charCodeAt(0) !== 65533) {
          e[D[227][j]] = 58112 + j;
          d[58112 + j] = D[227][j];
        }
      D[228] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u88F0\u88EC\u88EB\u899D\u89A1\u899F\u899E\u89E9\u89EB\u89E8\u8AAB\u8A99\u8A8B\u8A92\u8A8F\u8A96\u8C3D\u8C68\u8C69\u8CD5\u8CCF\u8CD7\u8D96\u8E09\u8E02\u8DFF\u8E0D\u8DFD\u8E0A\u8E03\u8E07\u8E06\u8E05\u8DFE\u8E00\u8E04\u8F10\u8F11\u8F0E\u8F0D\u9123\u911C\u9120\u9122\u911F\u911D\u911A\u9124\u9121\u911B\u917A\u9172\u9179\u9173\u92A5\u92A4\u9276\u929B\u927A\u92A0\u9294\u92AA\u928D\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u92A6\u929A\u92AB\u9279\u9297\u927F\u92A3\u92EE\u928E\u9282\u9295\u92A2\u927D\u9288\u92A1\u928A\u9286\u928C\u9299\u92A7\u927E\u9287\u92A9\u929D\u928B\u922D\u969E\u96A1\u96FF\u9758\u977D\u977A\u977E\u9783\u9780\u9782\u977B\u9784\u9781\u977F\u97CE\u97CD\u9816\u98AD\u98AE\u9902\u9900\u9907\u999D\u999C\u99C3\u99B9\u99BB\u99BA\u99C2\u99BD\u99C7\u9AB1\u9AE3\u9AE7\u9B3E\u9B3F\u9B60\u9B61\u9B5F\u9CF1\u9CF2\u9CF5\u9EA7\u50FF\u5103\u5130\u50F8\u5106\u5107\u50F6\u50FE\u510B\u510C\u50FD\u510A\u528B\u528C\u52F1\u52EF\u5648\u5642\u564C\u5635\u5641\u564A\u5649\u5646\u5658\uFFFD".split("");
      for (j = 0; j != D[228].length; ++j)
        if (D[228][j].charCodeAt(0) !== 65533) {
          e[D[228][j]] = 58368 + j;
          d[58368 + j] = D[228][j];
        }
      D[229] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u565A\u5640\u5633\u563D\u562C\u563E\u5638\u562A\u563A\u571A\u58AB\u589D\u58B1\u58A0\u58A3\u58AF\u58AC\u58A5\u58A1\u58FF\u5AFF\u5AF4\u5AFD\u5AF7\u5AF6\u5B03\u5AF8\u5B02\u5AF9\u5B01\u5B07\u5B05\u5B0F\u5C67\u5D99\u5D97\u5D9F\u5D92\u5DA2\u5D93\u5D95\u5DA0\u5D9C\u5DA1\u5D9A\u5D9E\u5E69\u5E5D\u5E60\u5E5C\u7DF3\u5EDB\u5EDE\u5EE1\u5F49\u5FB2\u618B\u6183\u6179\u61B1\u61B0\u61A2\u6189\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u619B\u6193\u61AF\u61AD\u619F\u6192\u61AA\u61A1\u618D\u6166\u61B3\u622D\u646E\u6470\u6496\u64A0\u6485\u6497\u649C\u648F\u648B\u648A\u648C\u64A3\u649F\u6468\u64B1\u6498\u6576\u657A\u6579\u657B\u65B2\u65B3\u66B5\u66B0\u66A9\u66B2\u66B7\u66AA\u66AF\u6A00\u6A06\u6A17\u69E5\u69F8\u6A15\u69F1\u69E4\u6A20\u69FF\u69EC\u69E2\u6A1B\u6A1D\u69FE\u6A27\u69F2\u69EE\u6A14\u69F7\u69E7\u6A40\u6A08\u69E6\u69FB\u6A0D\u69FC\u69EB\u6A09\u6A04\u6A18\u6A25\u6A0F\u69F6\u6A26\u6A07\u69F4\u6A16\u6B51\u6BA5\u6BA3\u6BA2\u6BA6\u6C01\u6C00\u6BFF\u6C02\u6F41\u6F26\u6F7E\u6F87\u6FC6\u6F92\uFFFD".split("");
      for (j = 0; j != D[229].length; ++j)
        if (D[229][j].charCodeAt(0) !== 65533) {
          e[D[229][j]] = 58624 + j;
          d[58624 + j] = D[229][j];
        }
      D[230] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6F8D\u6F89\u6F8C\u6F62\u6F4F\u6F85\u6F5A\u6F96\u6F76\u6F6C\u6F82\u6F55\u6F72\u6F52\u6F50\u6F57\u6F94\u6F93\u6F5D\u6F00\u6F61\u6F6B\u6F7D\u6F67\u6F90\u6F53\u6F8B\u6F69\u6F7F\u6F95\u6F63\u6F77\u6F6A\u6F7B\u71B2\u71AF\u719B\u71B0\u71A0\u719A\u71A9\u71B5\u719D\u71A5\u719E\u71A4\u71A1\u71AA\u719C\u71A7\u71B3\u7298\u729A\u7358\u7352\u735E\u735F\u7360\u735D\u735B\u7361\u735A\u7359\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7362\u7487\u7489\u748A\u7486\u7481\u747D\u7485\u7488\u747C\u7479\u7508\u7507\u757E\u7625\u761E\u7619\u761D\u761C\u7623\u761A\u7628\u761B\u769C\u769D\u769E\u769B\u778D\u778F\u7789\u7788\u78CD\u78BB\u78CF\u78CC\u78D1\u78CE\u78D4\u78C8\u78C3\u78C4\u78C9\u799A\u79A1\u79A0\u799C\u79A2\u799B\u6B76\u7A39\u7AB2\u7AB4\u7AB3\u7BB7\u7BCB\u7BBE\u7BAC\u7BCE\u7BAF\u7BB9\u7BCA\u7BB5\u7CC5\u7CC8\u7CCC\u7CCB\u7DF7\u7DDB\u7DEA\u7DE7\u7DD7\u7DE1\u7E03\u7DFA\u7DE6\u7DF6\u7DF1\u7DF0\u7DEE\u7DDF\u7F76\u7FAC\u7FB0\u7FAD\u7FED\u7FEB\u7FEA\u7FEC\u7FE6\u7FE8\u8064\u8067\u81A3\u819F\uFFFD".split("");
      for (j = 0; j != D[230].length; ++j)
        if (D[230][j].charCodeAt(0) !== 65533) {
          e[D[230][j]] = 58880 + j;
          d[58880 + j] = D[230][j];
        }
      D[231] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u819E\u8195\u81A2\u8199\u8197\u8216\u824F\u8253\u8252\u8250\u824E\u8251\u8524\u853B\u850F\u8500\u8529\u850E\u8509\u850D\u851F\u850A\u8527\u851C\u84FB\u852B\u84FA\u8508\u850C\u84F4\u852A\u84F2\u8515\u84F7\u84EB\u84F3\u84FC\u8512\u84EA\u84E9\u8516\u84FE\u8528\u851D\u852E\u8502\u84FD\u851E\u84F6\u8531\u8526\u84E7\u84E8\u84F0\u84EF\u84F9\u8518\u8520\u8530\u850B\u8519\u852F\u8662\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8756\u8763\u8764\u8777\u87E1\u8773\u8758\u8754\u875B\u8752\u8761\u875A\u8751\u875E\u876D\u876A\u8750\u874E\u875F\u875D\u876F\u876C\u877A\u876E\u875C\u8765\u874F\u877B\u8775\u8762\u8767\u8769\u885A\u8905\u890C\u8914\u890B\u8917\u8918\u8919\u8906\u8916\u8911\u890E\u8909\u89A2\u89A4\u89A3\u89ED\u89F0\u89EC\u8ACF\u8AC6\u8AB8\u8AD3\u8AD1\u8AD4\u8AD5\u8ABB\u8AD7\u8ABE\u8AC0\u8AC5\u8AD8\u8AC3\u8ABA\u8ABD\u8AD9\u8C3E\u8C4D\u8C8F\u8CE5\u8CDF\u8CD9\u8CE8\u8CDA\u8CDD\u8CE7\u8DA0\u8D9C\u8DA1\u8D9B\u8E20\u8E23\u8E25\u8E24\u8E2E\u8E15\u8E1B\u8E16\u8E11\u8E19\u8E26\u8E27\uFFFD".split("");
      for (j = 0; j != D[231].length; ++j)
        if (D[231][j].charCodeAt(0) !== 65533) {
          e[D[231][j]] = 59136 + j;
          d[59136 + j] = D[231][j];
        }
      D[232] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8E14\u8E12\u8E18\u8E13\u8E1C\u8E17\u8E1A\u8F2C\u8F24\u8F18\u8F1A\u8F20\u8F23\u8F16\u8F17\u9073\u9070\u906F\u9067\u906B\u912F\u912B\u9129\u912A\u9132\u9126\u912E\u9185\u9186\u918A\u9181\u9182\u9184\u9180\u92D0\u92C3\u92C4\u92C0\u92D9\u92B6\u92CF\u92F1\u92DF\u92D8\u92E9\u92D7\u92DD\u92CC\u92EF\u92C2\u92E8\u92CA\u92C8\u92CE\u92E6\u92CD\u92D5\u92C9\u92E0\u92DE\u92E7\u92D1\u92D3\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u92B5\u92E1\u92C6\u92B4\u957C\u95AC\u95AB\u95AE\u95B0\u96A4\u96A2\u96D3\u9705\u9708\u9702\u975A\u978A\u978E\u9788\u97D0\u97CF\u981E\u981D\u9826\u9829\u9828\u9820\u981B\u9827\u98B2\u9908\u98FA\u9911\u9914\u9916\u9917\u9915\u99DC\u99CD\u99CF\u99D3\u99D4\u99CE\u99C9\u99D6\u99D8\u99CB\u99D7\u99CC\u9AB3\u9AEC\u9AEB\u9AF3\u9AF2\u9AF1\u9B46\u9B43\u9B67\u9B74\u9B71\u9B66\u9B76\u9B75\u9B70\u9B68\u9B64\u9B6C\u9CFC\u9CFA\u9CFD\u9CFF\u9CF7\u9D07\u9D00\u9CF9\u9CFB\u9D08\u9D05\u9D04\u9E83\u9ED3\u9F0F\u9F10\u511C\u5113\u5117\u511A\u5111\u51DE\u5334\u53E1\u5670\u5660\u566E\uFFFD".split("");
      for (j = 0; j != D[232].length; ++j)
        if (D[232][j].charCodeAt(0) !== 65533) {
          e[D[232][j]] = 59392 + j;
          d[59392 + j] = D[232][j];
        }
      D[233] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5673\u5666\u5663\u566D\u5672\u565E\u5677\u571C\u571B\u58C8\u58BD\u58C9\u58BF\u58BA\u58C2\u58BC\u58C6\u5B17\u5B19\u5B1B\u5B21\u5B14\u5B13\u5B10\u5B16\u5B28\u5B1A\u5B20\u5B1E\u5BEF\u5DAC\u5DB1\u5DA9\u5DA7\u5DB5\u5DB0\u5DAE\u5DAA\u5DA8\u5DB2\u5DAD\u5DAF\u5DB4\u5E67\u5E68\u5E66\u5E6F\u5EE9\u5EE7\u5EE6\u5EE8\u5EE5\u5F4B\u5FBC\u619D\u61A8\u6196\u61C5\u61B4\u61C6\u61C1\u61CC\u61BA\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u61BF\u61B8\u618C\u64D7\u64D6\u64D0\u64CF\u64C9\u64BD\u6489\u64C3\u64DB\u64F3\u64D9\u6533\u657F\u657C\u65A2\u66C8\u66BE\u66C0\u66CA\u66CB\u66CF\u66BD\u66BB\u66BA\u66CC\u6723\u6A34\u6A66\u6A49\u6A67\u6A32\u6A68\u6A3E\u6A5D\u6A6D\u6A76\u6A5B\u6A51\u6A28\u6A5A\u6A3B\u6A3F\u6A41\u6A6A\u6A64\u6A50\u6A4F\u6A54\u6A6F\u6A69\u6A60\u6A3C\u6A5E\u6A56\u6A55\u6A4D\u6A4E\u6A46\u6B55\u6B54\u6B56\u6BA7\u6BAA\u6BAB\u6BC8\u6BC7\u6C04\u6C03\u6C06\u6FAD\u6FCB\u6FA3\u6FC7\u6FBC\u6FCE\u6FC8\u6F5E\u6FC4\u6FBD\u6F9E\u6FCA\u6FA8\u7004\u6FA5\u6FAE\u6FBA\u6FAC\u6FAA\u6FCF\u6FBF\u6FB8\uFFFD".split("");
      for (j = 0; j != D[233].length; ++j)
        if (D[233][j].charCodeAt(0) !== 65533) {
          e[D[233][j]] = 59648 + j;
          d[59648 + j] = D[233][j];
        }
      D[234] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6FA2\u6FC9\u6FAB\u6FCD\u6FAF\u6FB2\u6FB0\u71C5\u71C2\u71BF\u71B8\u71D6\u71C0\u71C1\u71CB\u71D4\u71CA\u71C7\u71CF\u71BD\u71D8\u71BC\u71C6\u71DA\u71DB\u729D\u729E\u7369\u7366\u7367\u736C\u7365\u736B\u736A\u747F\u749A\u74A0\u7494\u7492\u7495\u74A1\u750B\u7580\u762F\u762D\u7631\u763D\u7633\u763C\u7635\u7632\u7630\u76BB\u76E6\u779A\u779D\u77A1\u779C\u779B\u77A2\u77A3\u7795\u7799\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7797\u78DD\u78E9\u78E5\u78EA\u78DE\u78E3\u78DB\u78E1\u78E2\u78ED\u78DF\u78E0\u79A4\u7A44\u7A48\u7A47\u7AB6\u7AB8\u7AB5\u7AB1\u7AB7\u7BDE\u7BE3\u7BE7\u7BDD\u7BD5\u7BE5\u7BDA\u7BE8\u7BF9\u7BD4\u7BEA\u7BE2\u7BDC\u7BEB\u7BD8\u7BDF\u7CD2\u7CD4\u7CD7\u7CD0\u7CD1\u7E12\u7E21\u7E17\u7E0C\u7E1F\u7E20\u7E13\u7E0E\u7E1C\u7E15\u7E1A\u7E22\u7E0B\u7E0F\u7E16\u7E0D\u7E14\u7E25\u7E24\u7F43\u7F7B\u7F7C\u7F7A\u7FB1\u7FEF\u802A\u8029\u806C\u81B1\u81A6\u81AE\u81B9\u81B5\u81AB\u81B0\u81AC\u81B4\u81B2\u81B7\u81A7\u81F2\u8255\u8256\u8257\u8556\u8545\u856B\u854D\u8553\u8561\u8558\uFFFD".split("");
      for (j = 0; j != D[234].length; ++j)
        if (D[234][j].charCodeAt(0) !== 65533) {
          e[D[234][j]] = 59904 + j;
          d[59904 + j] = D[234][j];
        }
      D[235] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8540\u8546\u8564\u8541\u8562\u8544\u8551\u8547\u8563\u853E\u855B\u8571\u854E\u856E\u8575\u8555\u8567\u8560\u858C\u8566\u855D\u8554\u8565\u856C\u8663\u8665\u8664\u879B\u878F\u8797\u8793\u8792\u8788\u8781\u8796\u8798\u8779\u8787\u87A3\u8785\u8790\u8791\u879D\u8784\u8794\u879C\u879A\u8789\u891E\u8926\u8930\u892D\u892E\u8927\u8931\u8922\u8929\u8923\u892F\u892C\u891F\u89F1\u8AE0\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8AE2\u8AF2\u8AF4\u8AF5\u8ADD\u8B14\u8AE4\u8ADF\u8AF0\u8AC8\u8ADE\u8AE1\u8AE8\u8AFF\u8AEF\u8AFB\u8C91\u8C92\u8C90\u8CF5\u8CEE\u8CF1\u8CF0\u8CF3\u8D6C\u8D6E\u8DA5\u8DA7\u8E33\u8E3E\u8E38\u8E40\u8E45\u8E36\u8E3C\u8E3D\u8E41\u8E30\u8E3F\u8EBD\u8F36\u8F2E\u8F35\u8F32\u8F39\u8F37\u8F34\u9076\u9079\u907B\u9086\u90FA\u9133\u9135\u9136\u9193\u9190\u9191\u918D\u918F\u9327\u931E\u9308\u931F\u9306\u930F\u937A\u9338\u933C\u931B\u9323\u9312\u9301\u9346\u932D\u930E\u930D\u92CB\u931D\u92FA\u9325\u9313\u92F9\u92F7\u9334\u9302\u9324\u92FF\u9329\u9339\u9335\u932A\u9314\u930C\uFFFD".split("");
      for (j = 0; j != D[235].length; ++j)
        if (D[235][j].charCodeAt(0) !== 65533) {
          e[D[235][j]] = 60160 + j;
          d[60160 + j] = D[235][j];
        }
      D[236] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u930B\u92FE\u9309\u9300\u92FB\u9316\u95BC\u95CD\u95BE\u95B9\u95BA\u95B6\u95BF\u95B5\u95BD\u96A9\u96D4\u970B\u9712\u9710\u9799\u9797\u9794\u97F0\u97F8\u9835\u982F\u9832\u9924\u991F\u9927\u9929\u999E\u99EE\u99EC\u99E5\u99E4\u99F0\u99E3\u99EA\u99E9\u99E7\u9AB9\u9ABF\u9AB4\u9ABB\u9AF6\u9AFA\u9AF9\u9AF7\u9B33\u9B80\u9B85\u9B87\u9B7C\u9B7E\u9B7B\u9B82\u9B93\u9B92\u9B90\u9B7A\u9B95\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9B7D\u9B88\u9D25\u9D17\u9D20\u9D1E\u9D14\u9D29\u9D1D\u9D18\u9D22\u9D10\u9D19\u9D1F\u9E88\u9E86\u9E87\u9EAE\u9EAD\u9ED5\u9ED6\u9EFA\u9F12\u9F3D\u5126\u5125\u5122\u5124\u5120\u5129\u52F4\u5693\u568C\u568D\u5686\u5684\u5683\u567E\u5682\u567F\u5681\u58D6\u58D4\u58CF\u58D2\u5B2D\u5B25\u5B32\u5B23\u5B2C\u5B27\u5B26\u5B2F\u5B2E\u5B7B\u5BF1\u5BF2\u5DB7\u5E6C\u5E6A\u5FBE\u5FBB\u61C3\u61B5\u61BC\u61E7\u61E0\u61E5\u61E4\u61E8\u61DE\u64EF\u64E9\u64E3\u64EB\u64E4\u64E8\u6581\u6580\u65B6\u65DA\u66D2\u6A8D\u6A96\u6A81\u6AA5\u6A89\u6A9F\u6A9B\u6AA1\u6A9E\u6A87\u6A93\u6A8E\uFFFD".split("");
      for (j = 0; j != D[236].length; ++j)
        if (D[236][j].charCodeAt(0) !== 65533) {
          e[D[236][j]] = 60416 + j;
          d[60416 + j] = D[236][j];
        }
      D[237] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6A95\u6A83\u6AA8\u6AA4\u6A91\u6A7F\u6AA6\u6A9A\u6A85\u6A8C\u6A92\u6B5B\u6BAD\u6C09\u6FCC\u6FA9\u6FF4\u6FD4\u6FE3\u6FDC\u6FED\u6FE7\u6FE6\u6FDE\u6FF2\u6FDD\u6FE2\u6FE8\u71E1\u71F1\u71E8\u71F2\u71E4\u71F0\u71E2\u7373\u736E\u736F\u7497\u74B2\u74AB\u7490\u74AA\u74AD\u74B1\u74A5\u74AF\u7510\u7511\u7512\u750F\u7584\u7643\u7648\u7649\u7647\u76A4\u76E9\u77B5\u77AB\u77B2\u77B7\u77B6\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u77B4\u77B1\u77A8\u77F0\u78F3\u78FD\u7902\u78FB\u78FC\u78F2\u7905\u78F9\u78FE\u7904\u79AB\u79A8\u7A5C\u7A5B\u7A56\u7A58\u7A54\u7A5A\u7ABE\u7AC0\u7AC1\u7C05\u7C0F\u7BF2\u7C00\u7BFF\u7BFB\u7C0E\u7BF4\u7C0B\u7BF3\u7C02\u7C09\u7C03\u7C01\u7BF8\u7BFD\u7C06\u7BF0\u7BF1\u7C10\u7C0A\u7CE8\u7E2D\u7E3C\u7E42\u7E33\u9848\u7E38\u7E2A\u7E49\u7E40\u7E47\u7E29\u7E4C\u7E30\u7E3B\u7E36\u7E44\u7E3A\u7F45\u7F7F\u7F7E\u7F7D\u7FF4\u7FF2\u802C\u81BB\u81C4\u81CC\u81CA\u81C5\u81C7\u81BC\u81E9\u825B\u825A\u825C\u8583\u8580\u858F\u85A7\u8595\u85A0\u858B\u85A3\u857B\u85A4\u859A\u859E\uFFFD".split("");
      for (j = 0; j != D[237].length; ++j)
        if (D[237][j].charCodeAt(0) !== 65533) {
          e[D[237][j]] = 60672 + j;
          d[60672 + j] = D[237][j];
        }
      D[238] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8577\u857C\u8589\u85A1\u857A\u8578\u8557\u858E\u8596\u8586\u858D\u8599\u859D\u8581\u85A2\u8582\u8588\u8585\u8579\u8576\u8598\u8590\u859F\u8668\u87BE\u87AA\u87AD\u87C5\u87B0\u87AC\u87B9\u87B5\u87BC\u87AE\u87C9\u87C3\u87C2\u87CC\u87B7\u87AF\u87C4\u87CA\u87B4\u87B6\u87BF\u87B8\u87BD\u87DE\u87B2\u8935\u8933\u893C\u893E\u8941\u8952\u8937\u8942\u89AD\u89AF\u89AE\u89F2\u89F3\u8B1E\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8B18\u8B16\u8B11\u8B05\u8B0B\u8B22\u8B0F\u8B12\u8B15\u8B07\u8B0D\u8B08\u8B06\u8B1C\u8B13\u8B1A\u8C4F\u8C70\u8C72\u8C71\u8C6F\u8C95\u8C94\u8CF9\u8D6F\u8E4E\u8E4D\u8E53\u8E50\u8E4C\u8E47\u8F43\u8F40\u9085\u907E\u9138\u919A\u91A2\u919B\u9199\u919F\u91A1\u919D\u91A0\u93A1\u9383\u93AF\u9364\u9356\u9347\u937C\u9358\u935C\u9376\u9349\u9350\u9351\u9360\u936D\u938F\u934C\u936A\u9379\u9357\u9355\u9352\u934F\u9371\u9377\u937B\u9361\u935E\u9363\u9367\u9380\u934E\u9359\u95C7\u95C0\u95C9\u95C3\u95C5\u95B7\u96AE\u96B0\u96AC\u9720\u971F\u9718\u971D\u9719\u979A\u97A1\u979C\uFFFD".split("");
      for (j = 0; j != D[238].length; ++j)
        if (D[238][j].charCodeAt(0) !== 65533) {
          e[D[238][j]] = 60928 + j;
          d[60928 + j] = D[238][j];
        }
      D[239] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u979E\u979D\u97D5\u97D4\u97F1\u9841\u9844\u984A\u9849\u9845\u9843\u9925\u992B\u992C\u992A\u9933\u9932\u992F\u992D\u9931\u9930\u9998\u99A3\u99A1\u9A02\u99FA\u99F4\u99F7\u99F9\u99F8\u99F6\u99FB\u99FD\u99FE\u99FC\u9A03\u9ABE\u9AFE\u9AFD\u9B01\u9AFC\u9B48\u9B9A\u9BA8\u9B9E\u9B9B\u9BA6\u9BA1\u9BA5\u9BA4\u9B86\u9BA2\u9BA0\u9BAF\u9D33\u9D41\u9D67\u9D36\u9D2E\u9D2F\u9D31\u9D38\u9D30\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9D45\u9D42\u9D43\u9D3E\u9D37\u9D40\u9D3D\u7FF5\u9D2D\u9E8A\u9E89\u9E8D\u9EB0\u9EC8\u9EDA\u9EFB\u9EFF\u9F24\u9F23\u9F22\u9F54\u9FA0\u5131\u512D\u512E\u5698\u569C\u5697\u569A\u569D\u5699\u5970\u5B3C\u5C69\u5C6A\u5DC0\u5E6D\u5E6E\u61D8\u61DF\u61ED\u61EE\u61F1\u61EA\u61F0\u61EB\u61D6\u61E9\u64FF\u6504\u64FD\u64F8\u6501\u6503\u64FC\u6594\u65DB\u66DA\u66DB\u66D8\u6AC5\u6AB9\u6ABD\u6AE1\u6AC6\u6ABA\u6AB6\u6AB7\u6AC7\u6AB4\u6AAD\u6B5E\u6BC9\u6C0B\u7007\u700C\u700D\u7001\u7005\u7014\u700E\u6FFF\u7000\u6FFB\u7026\u6FFC\u6FF7\u700A\u7201\u71FF\u71F9\u7203\u71FD\u7376\uFFFD".split("");
      for (j = 0; j != D[239].length; ++j)
        if (D[239][j].charCodeAt(0) !== 65533) {
          e[D[239][j]] = 61184 + j;
          d[61184 + j] = D[239][j];
        }
      D[240] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u74B8\u74C0\u74B5\u74C1\u74BE\u74B6\u74BB\u74C2\u7514\u7513\u765C\u7664\u7659\u7650\u7653\u7657\u765A\u76A6\u76BD\u76EC\u77C2\u77BA\u78FF\u790C\u7913\u7914\u7909\u7910\u7912\u7911\u79AD\u79AC\u7A5F\u7C1C\u7C29\u7C19\u7C20\u7C1F\u7C2D\u7C1D\u7C26\u7C28\u7C22\u7C25\u7C30\u7E5C\u7E50\u7E56\u7E63\u7E58\u7E62\u7E5F\u7E51\u7E60\u7E57\u7E53\u7FB5\u7FB3\u7FF7\u7FF8\u8075\u81D1\u81D2\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u81D0\u825F\u825E\u85B4\u85C6\u85C0\u85C3\u85C2\u85B3\u85B5\u85BD\u85C7\u85C4\u85BF\u85CB\u85CE\u85C8\u85C5\u85B1\u85B6\u85D2\u8624\u85B8\u85B7\u85BE\u8669\u87E7\u87E6\u87E2\u87DB\u87EB\u87EA\u87E5\u87DF\u87F3\u87E4\u87D4\u87DC\u87D3\u87ED\u87D8\u87E3\u87A4\u87D7\u87D9\u8801\u87F4\u87E8\u87DD\u8953\u894B\u894F\u894C\u8946\u8950\u8951\u8949\u8B2A\u8B27\u8B23\u8B33\u8B30\u8B35\u8B47\u8B2F\u8B3C\u8B3E\u8B31\u8B25\u8B37\u8B26\u8B36\u8B2E\u8B24\u8B3B\u8B3D\u8B3A\u8C42\u8C75\u8C99\u8C98\u8C97\u8CFE\u8D04\u8D02\u8D00\u8E5C\u8E62\u8E60\u8E57\u8E56\u8E5E\u8E65\u8E67\uFFFD".split("");
      for (j = 0; j != D[240].length; ++j)
        if (D[240][j].charCodeAt(0) !== 65533) {
          e[D[240][j]] = 61440 + j;
          d[61440 + j] = D[240][j];
        }
      D[241] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8E5B\u8E5A\u8E61\u8E5D\u8E69\u8E54\u8F46\u8F47\u8F48\u8F4B\u9128\u913A\u913B\u913E\u91A8\u91A5\u91A7\u91AF\u91AA\u93B5\u938C\u9392\u93B7\u939B\u939D\u9389\u93A7\u938E\u93AA\u939E\u93A6\u9395\u9388\u9399\u939F\u938D\u93B1\u9391\u93B2\u93A4\u93A8\u93B4\u93A3\u93A5\u95D2\u95D3\u95D1\u96B3\u96D7\u96DA\u5DC2\u96DF\u96D8\u96DD\u9723\u9722\u9725\u97AC\u97AE\u97A8\u97AB\u97A4\u97AA\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u97A2\u97A5\u97D7\u97D9\u97D6\u97D8\u97FA\u9850\u9851\u9852\u98B8\u9941\u993C\u993A\u9A0F\u9A0B\u9A09\u9A0D\u9A04\u9A11\u9A0A\u9A05\u9A07\u9A06\u9AC0\u9ADC\u9B08\u9B04\u9B05\u9B29\u9B35\u9B4A\u9B4C\u9B4B\u9BC7\u9BC6\u9BC3\u9BBF\u9BC1\u9BB5\u9BB8\u9BD3\u9BB6\u9BC4\u9BB9\u9BBD\u9D5C\u9D53\u9D4F\u9D4A\u9D5B\u9D4B\u9D59\u9D56\u9D4C\u9D57\u9D52\u9D54\u9D5F\u9D58\u9D5A\u9E8E\u9E8C\u9EDF\u9F01\u9F00\u9F16\u9F25\u9F2B\u9F2A\u9F29\u9F28\u9F4C\u9F55\u5134\u5135\u5296\u52F7\u53B4\u56AB\u56AD\u56A6\u56A7\u56AA\u56AC\u58DA\u58DD\u58DB\u5912\u5B3D\u5B3E\u5B3F\u5DC3\u5E70\uFFFD".split("");
      for (j = 0; j != D[241].length; ++j)
        if (D[241][j].charCodeAt(0) !== 65533) {
          e[D[241][j]] = 61696 + j;
          d[61696 + j] = D[241][j];
        }
      D[242] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5FBF\u61FB\u6507\u6510\u650D\u6509\u650C\u650E\u6584\u65DE\u65DD\u66DE\u6AE7\u6AE0\u6ACC\u6AD1\u6AD9\u6ACB\u6ADF\u6ADC\u6AD0\u6AEB\u6ACF\u6ACD\u6ADE\u6B60\u6BB0\u6C0C\u7019\u7027\u7020\u7016\u702B\u7021\u7022\u7023\u7029\u7017\u7024\u701C\u702A\u720C\u720A\u7207\u7202\u7205\u72A5\u72A6\u72A4\u72A3\u72A1\u74CB\u74C5\u74B7\u74C3\u7516\u7660\u77C9\u77CA\u77C4\u77F1\u791D\u791B\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7921\u791C\u7917\u791E\u79B0\u7A67\u7A68\u7C33\u7C3C\u7C39\u7C2C\u7C3B\u7CEC\u7CEA\u7E76\u7E75\u7E78\u7E70\u7E77\u7E6F\u7E7A\u7E72\u7E74\u7E68\u7F4B\u7F4A\u7F83\u7F86\u7FB7\u7FFD\u7FFE\u8078\u81D7\u81D5\u8264\u8261\u8263\u85EB\u85F1\u85ED\u85D9\u85E1\u85E8\u85DA\u85D7\u85EC\u85F2\u85F8\u85D8\u85DF\u85E3\u85DC\u85D1\u85F0\u85E6\u85EF\u85DE\u85E2\u8800\u87FA\u8803\u87F6\u87F7\u8809\u880C\u880B\u8806\u87FC\u8808\u87FF\u880A\u8802\u8962\u895A\u895B\u8957\u8961\u895C\u8958\u895D\u8959\u8988\u89B7\u89B6\u89F6\u8B50\u8B48\u8B4A\u8B40\u8B53\u8B56\u8B54\u8B4B\u8B55\uFFFD".split("");
      for (j = 0; j != D[242].length; ++j)
        if (D[242][j].charCodeAt(0) !== 65533) {
          e[D[242][j]] = 61952 + j;
          d[61952 + j] = D[242][j];
        }
      D[243] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8B51\u8B42\u8B52\u8B57\u8C43\u8C77\u8C76\u8C9A\u8D06\u8D07\u8D09\u8DAC\u8DAA\u8DAD\u8DAB\u8E6D\u8E78\u8E73\u8E6A\u8E6F\u8E7B\u8EC2\u8F52\u8F51\u8F4F\u8F50\u8F53\u8FB4\u9140\u913F\u91B0\u91AD\u93DE\u93C7\u93CF\u93C2\u93DA\u93D0\u93F9\u93EC\u93CC\u93D9\u93A9\u93E6\u93CA\u93D4\u93EE\u93E3\u93D5\u93C4\u93CE\u93C0\u93D2\u93E7\u957D\u95DA\u95DB\u96E1\u9729\u972B\u972C\u9728\u9726\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u97B3\u97B7\u97B6\u97DD\u97DE\u97DF\u985C\u9859\u985D\u9857\u98BF\u98BD\u98BB\u98BE\u9948\u9947\u9943\u99A6\u99A7\u9A1A\u9A15\u9A25\u9A1D\u9A24\u9A1B\u9A22\u9A20\u9A27\u9A23\u9A1E\u9A1C\u9A14\u9AC2\u9B0B\u9B0A\u9B0E\u9B0C\u9B37\u9BEA\u9BEB\u9BE0\u9BDE\u9BE4\u9BE6\u9BE2\u9BF0\u9BD4\u9BD7\u9BEC\u9BDC\u9BD9\u9BE5\u9BD5\u9BE1\u9BDA\u9D77\u9D81\u9D8A\u9D84\u9D88\u9D71\u9D80\u9D78\u9D86\u9D8B\u9D8C\u9D7D\u9D6B\u9D74\u9D75\u9D70\u9D69\u9D85\u9D73\u9D7B\u9D82\u9D6F\u9D79\u9D7F\u9D87\u9D68\u9E94\u9E91\u9EC0\u9EFC\u9F2D\u9F40\u9F41\u9F4D\u9F56\u9F57\u9F58\u5337\u56B2\uFFFD".split("");
      for (j = 0; j != D[243].length; ++j)
        if (D[243][j].charCodeAt(0) !== 65533) {
          e[D[243][j]] = 62208 + j;
          d[62208 + j] = D[243][j];
        }
      D[244] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u56B5\u56B3\u58E3\u5B45\u5DC6\u5DC7\u5EEE\u5EEF\u5FC0\u5FC1\u61F9\u6517\u6516\u6515\u6513\u65DF\u66E8\u66E3\u66E4\u6AF3\u6AF0\u6AEA\u6AE8\u6AF9\u6AF1\u6AEE\u6AEF\u703C\u7035\u702F\u7037\u7034\u7031\u7042\u7038\u703F\u703A\u7039\u7040\u703B\u7033\u7041\u7213\u7214\u72A8\u737D\u737C\u74BA\u76AB\u76AA\u76BE\u76ED\u77CC\u77CE\u77CF\u77CD\u77F2\u7925\u7923\u7927\u7928\u7924\u7929\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u79B2\u7A6E\u7A6C\u7A6D\u7AF7\u7C49\u7C48\u7C4A\u7C47\u7C45\u7CEE\u7E7B\u7E7E\u7E81\u7E80\u7FBA\u7FFF\u8079\u81DB\u81D9\u820B\u8268\u8269\u8622\u85FF\u8601\u85FE\u861B\u8600\u85F6\u8604\u8609\u8605\u860C\u85FD\u8819\u8810\u8811\u8817\u8813\u8816\u8963\u8966\u89B9\u89F7\u8B60\u8B6A\u8B5D\u8B68\u8B63\u8B65\u8B67\u8B6D\u8DAE\u8E86\u8E88\u8E84\u8F59\u8F56\u8F57\u8F55\u8F58\u8F5A\u908D\u9143\u9141\u91B7\u91B5\u91B2\u91B3\u940B\u9413\u93FB\u9420\u940F\u9414\u93FE\u9415\u9410\u9428\u9419\u940D\u93F5\u9400\u93F7\u9407\u940E\u9416\u9412\u93FA\u9409\u93F8\u940A\u93FF\uFFFD".split("");
      for (j = 0; j != D[244].length; ++j)
        if (D[244][j].charCodeAt(0) !== 65533) {
          e[D[244][j]] = 62464 + j;
          d[62464 + j] = D[244][j];
        }
      D[245] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u93FC\u940C\u93F6\u9411\u9406\u95DE\u95E0\u95DF\u972E\u972F\u97B9\u97BB\u97FD\u97FE\u9860\u9862\u9863\u985F\u98C1\u98C2\u9950\u994E\u9959\u994C\u994B\u9953\u9A32\u9A34\u9A31\u9A2C\u9A2A\u9A36\u9A29\u9A2E\u9A38\u9A2D\u9AC7\u9ACA\u9AC6\u9B10\u9B12\u9B11\u9C0B\u9C08\u9BF7\u9C05\u9C12\u9BF8\u9C40\u9C07\u9C0E\u9C06\u9C17\u9C14\u9C09\u9D9F\u9D99\u9DA4\u9D9D\u9D92\u9D98\u9D90\u9D9B\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9DA0\u9D94\u9D9C\u9DAA\u9D97\u9DA1\u9D9A\u9DA2\u9DA8\u9D9E\u9DA3\u9DBF\u9DA9\u9D96\u9DA6\u9DA7\u9E99\u9E9B\u9E9A\u9EE5\u9EE4\u9EE7\u9EE6\u9F30\u9F2E\u9F5B\u9F60\u9F5E\u9F5D\u9F59\u9F91\u513A\u5139\u5298\u5297\u56C3\u56BD\u56BE\u5B48\u5B47\u5DCB\u5DCF\u5EF1\u61FD\u651B\u6B02\u6AFC\u6B03\u6AF8\u6B00\u7043\u7044\u704A\u7048\u7049\u7045\u7046\u721D\u721A\u7219\u737E\u7517\u766A\u77D0\u792D\u7931\u792F\u7C54\u7C53\u7CF2\u7E8A\u7E87\u7E88\u7E8B\u7E86\u7E8D\u7F4D\u7FBB\u8030\u81DD\u8618\u862A\u8626\u861F\u8623\u861C\u8619\u8627\u862E\u8621\u8620\u8629\u861E\u8625\uFFFD".split("");
      for (j = 0; j != D[245].length; ++j)
        if (D[245][j].charCodeAt(0) !== 65533) {
          e[D[245][j]] = 62720 + j;
          d[62720 + j] = D[245][j];
        }
      D[246] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8829\u881D\u881B\u8820\u8824\u881C\u882B\u884A\u896D\u8969\u896E\u896B\u89FA\u8B79\u8B78\u8B45\u8B7A\u8B7B\u8D10\u8D14\u8DAF\u8E8E\u8E8C\u8F5E\u8F5B\u8F5D\u9146\u9144\u9145\u91B9\u943F\u943B\u9436\u9429\u943D\u943C\u9430\u9439\u942A\u9437\u942C\u9440\u9431\u95E5\u95E4\u95E3\u9735\u973A\u97BF\u97E1\u9864\u98C9\u98C6\u98C0\u9958\u9956\u9A39\u9A3D\u9A46\u9A44\u9A42\u9A41\u9A3A\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9A3F\u9ACD\u9B15\u9B17\u9B18\u9B16\u9B3A\u9B52\u9C2B\u9C1D\u9C1C\u9C2C\u9C23\u9C28\u9C29\u9C24\u9C21\u9DB7\u9DB6\u9DBC\u9DC1\u9DC7\u9DCA\u9DCF\u9DBE\u9DC5\u9DC3\u9DBB\u9DB5\u9DCE\u9DB9\u9DBA\u9DAC\u9DC8\u9DB1\u9DAD\u9DCC\u9DB3\u9DCD\u9DB2\u9E7A\u9E9C\u9EEB\u9EEE\u9EED\u9F1B\u9F18\u9F1A\u9F31\u9F4E\u9F65\u9F64\u9F92\u4EB9\u56C6\u56C5\u56CB\u5971\u5B4B\u5B4C\u5DD5\u5DD1\u5EF2\u6521\u6520\u6526\u6522\u6B0B\u6B08\u6B09\u6C0D\u7055\u7056\u7057\u7052\u721E\u721F\u72A9\u737F\u74D8\u74D5\u74D9\u74D7\u766D\u76AD\u7935\u79B4\u7A70\u7A71\u7C57\u7C5C\u7C59\u7C5B\u7C5A\uFFFD".split("");
      for (j = 0; j != D[246].length; ++j)
        if (D[246][j].charCodeAt(0) !== 65533) {
          e[D[246][j]] = 62976 + j;
          d[62976 + j] = D[246][j];
        }
      D[247] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7CF4\u7CF1\u7E91\u7F4F\u7F87\u81DE\u826B\u8634\u8635\u8633\u862C\u8632\u8636\u882C\u8828\u8826\u882A\u8825\u8971\u89BF\u89BE\u89FB\u8B7E\u8B84\u8B82\u8B86\u8B85\u8B7F\u8D15\u8E95\u8E94\u8E9A\u8E92\u8E90\u8E96\u8E97\u8F60\u8F62\u9147\u944C\u9450\u944A\u944B\u944F\u9447\u9445\u9448\u9449\u9446\u973F\u97E3\u986A\u9869\u98CB\u9954\u995B\u9A4E\u9A53\u9A54\u9A4C\u9A4F\u9A48\u9A4A\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9A49\u9A52\u9A50\u9AD0\u9B19\u9B2B\u9B3B\u9B56\u9B55\u9C46\u9C48\u9C3F\u9C44\u9C39\u9C33\u9C41\u9C3C\u9C37\u9C34\u9C32\u9C3D\u9C36\u9DDB\u9DD2\u9DDE\u9DDA\u9DCB\u9DD0\u9DDC\u9DD1\u9DDF\u9DE9\u9DD9\u9DD8\u9DD6\u9DF5\u9DD5\u9DDD\u9EB6\u9EF0\u9F35\u9F33\u9F32\u9F42\u9F6B\u9F95\u9FA2\u513D\u5299\u58E8\u58E7\u5972\u5B4D\u5DD8\u882F\u5F4F\u6201\u6203\u6204\u6529\u6525\u6596\u66EB\u6B11\u6B12\u6B0F\u6BCA\u705B\u705A\u7222\u7382\u7381\u7383\u7670\u77D4\u7C67\u7C66\u7E95\u826C\u863A\u8640\u8639\u863C\u8631\u863B\u863E\u8830\u8832\u882E\u8833\u8976\u8974\u8973\u89FE\uFFFD".split("");
      for (j = 0; j != D[247].length; ++j)
        if (D[247][j].charCodeAt(0) !== 65533) {
          e[D[247][j]] = 63232 + j;
          d[63232 + j] = D[247][j];
        }
      D[248] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8B8C\u8B8E\u8B8B\u8B88\u8C45\u8D19\u8E98\u8F64\u8F63\u91BC\u9462\u9455\u945D\u9457\u945E\u97C4\u97C5\u9800\u9A56\u9A59\u9B1E\u9B1F\u9B20\u9C52\u9C58\u9C50\u9C4A\u9C4D\u9C4B\u9C55\u9C59\u9C4C\u9C4E\u9DFB\u9DF7\u9DEF\u9DE3\u9DEB\u9DF8\u9DE4\u9DF6\u9DE1\u9DEE\u9DE6\u9DF2\u9DF0\u9DE2\u9DEC\u9DF4\u9DF3\u9DE8\u9DED\u9EC2\u9ED0\u9EF2\u9EF3\u9F06\u9F1C\u9F38\u9F37\u9F36\u9F43\u9F4F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9F71\u9F70\u9F6E\u9F6F\u56D3\u56CD\u5B4E\u5C6D\u652D\u66ED\u66EE\u6B13\u705F\u7061\u705D\u7060\u7223\u74DB\u74E5\u77D5\u7938\u79B7\u79B6\u7C6A\u7E97\u7F89\u826D\u8643\u8838\u8837\u8835\u884B\u8B94\u8B95\u8E9E\u8E9F\u8EA0\u8E9D\u91BE\u91BD\u91C2\u946B\u9468\u9469\u96E5\u9746\u9743\u9747\u97C7\u97E5\u9A5E\u9AD5\u9B59\u9C63\u9C67\u9C66\u9C62\u9C5E\u9C60\u9E02\u9DFE\u9E07\u9E03\u9E06\u9E05\u9E00\u9E01\u9E09\u9DFF\u9DFD\u9E04\u9EA0\u9F1E\u9F46\u9F74\u9F75\u9F76\u56D4\u652E\u65B8\u6B18\u6B19\u6B17\u6B1A\u7062\u7226\u72AA\u77D8\u77D9\u7939\u7C69\u7C6B\u7CF6\u7E9A\uFFFD".split("");
      for (j = 0; j != D[248].length; ++j)
        if (D[248][j].charCodeAt(0) !== 65533) {
          e[D[248][j]] = 63488 + j;
          d[63488 + j] = D[248][j];
        }
      D[249] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7E98\u7E9B\u7E99\u81E0\u81E1\u8646\u8647\u8648\u8979\u897A\u897C\u897B\u89FF\u8B98\u8B99\u8EA5\u8EA4\u8EA3\u946E\u946D\u946F\u9471\u9473\u9749\u9872\u995F\u9C68\u9C6E\u9C6D\u9E0B\u9E0D\u9E10\u9E0F\u9E12\u9E11\u9EA1\u9EF5\u9F09\u9F47\u9F78\u9F7B\u9F7A\u9F79\u571E\u7066\u7C6F\u883C\u8DB2\u8EA6\u91C3\u9474\u9478\u9476\u9475\u9A60\u9C74\u9C73\u9C71\u9C75\u9E14\u9E13\u9EF6\u9F0A\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9FA4\u7068\u7065\u7CF7\u866A\u883E\u883D\u883F\u8B9E\u8C9C\u8EA9\u8EC9\u974B\u9873\u9874\u98CC\u9961\u99AB\u9A64\u9A66\u9A67\u9B24\u9E15\u9E17\u9F48\u6207\u6B1E\u7227\u864C\u8EA8\u9482\u9480\u9481\u9A69\u9A68\u9B2E\u9E19\u7229\u864B\u8B9F\u9483\u9C79\u9EB7\u7675\u9A6B\u9C7A\u9E1D\u7069\u706A\u9EA4\u9F7E\u9F49\u9F98\u7881\u92B9\u88CF\u58BB\u6052\u7CA7\u5AFA\u2554\u2566\u2557\u2560\u256C\u2563\u255A\u2569\u255D\u2552\u2564\u2555\u255E\u256A\u2561\u2558\u2567\u255B\u2553\u2565\u2556\u255F\u256B\u2562\u2559\u2568\u255C\u2551\u2550\u256D\u256E\u2570\u256F\u2593\uFFFD".split("");
      for (j = 0; j != D[249].length; ++j)
        if (D[249][j].charCodeAt(0) !== 65533) {
          e[D[249][j]] = 63744 + j;
          d[63744 + j] = D[249][j];
        }
      return { "enc": e, "dec": d };
    }();
    cptable2[1250] = function() {
      var d = "\0\x07\b	\n\v\f\r !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\u20AC\uFFFD\u201A\uFFFD\u201E\u2026\u2020\u2021\uFFFD\u2030\u0160\u2039\u015A\u0164\u017D\u0179\uFFFD\u2018\u2019\u201C\u201D\u2022\u2013\u2014\uFFFD\u2122\u0161\u203A\u015B\u0165\u017E\u017A\xA0\u02C7\u02D8\u0141\xA4\u0104\xA6\xA7\xA8\xA9\u015E\xAB\xAC\xAD\xAE\u017B\xB0\xB1\u02DB\u0142\xB4\xB5\xB6\xB7\xB8\u0105\u015F\xBB\u013D\u02DD\u013E\u017C\u0154\xC1\xC2\u0102\xC4\u0139\u0106\xC7\u010C\xC9\u0118\xCB\u011A\xCD\xCE\u010E\u0110\u0143\u0147\xD3\xD4\u0150\xD6\xD7\u0158\u016E\xDA\u0170\xDC\xDD\u0162\xDF\u0155\xE1\xE2\u0103\xE4\u013A\u0107\xE7\u010D\xE9\u0119\xEB\u011B\xED\xEE\u010F\u0111\u0144\u0148\xF3\xF4\u0151\xF6\xF7\u0159\u016F\xFA\u0171\xFC\xFD\u0163\u02D9", D = [], e = {};
      for (var i = 0; i != d.length; ++i) {
        if (d.charCodeAt(i) !== 65533)
          e[d.charAt(i)] = i;
        D[i] = d.charAt(i);
      }
      return { "enc": e, "dec": D };
    }();
    cptable2[1251] = function() {
      var d = "\0\x07\b	\n\v\f\r !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\u0402\u0403\u201A\u0453\u201E\u2026\u2020\u2021\u20AC\u2030\u0409\u2039\u040A\u040C\u040B\u040F\u0452\u2018\u2019\u201C\u201D\u2022\u2013\u2014\uFFFD\u2122\u0459\u203A\u045A\u045C\u045B\u045F\xA0\u040E\u045E\u0408\xA4\u0490\xA6\xA7\u0401\xA9\u0404\xAB\xAC\xAD\xAE\u0407\xB0\xB1\u0406\u0456\u0491\xB5\xB6\xB7\u0451\u2116\u0454\xBB\u0458\u0405\u0455\u0457\u0410\u0411\u0412\u0413\u0414\u0415\u0416\u0417\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u0420\u0421\u0422\u0423\u0424\u0425\u0426\u0427\u0428\u0429\u042A\u042B\u042C\u042D\u042E\u042F\u0430\u0431\u0432\u0433\u0434\u0435\u0436\u0437\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044A\u044B\u044C\u044D\u044E\u044F", D = [], e = {};
      for (var i = 0; i != d.length; ++i) {
        if (d.charCodeAt(i) !== 65533)
          e[d.charAt(i)] = i;
        D[i] = d.charAt(i);
      }
      return { "enc": e, "dec": D };
    }();
    cptable2[1252] = function() {
      var d = "\0\x07\b	\n\v\f\r !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\u20AC\uFFFD\u201A\u0192\u201E\u2026\u2020\u2021\u02C6\u2030\u0160\u2039\u0152\uFFFD\u017D\uFFFD\uFFFD\u2018\u2019\u201C\u201D\u2022\u2013\u2014\u02DC\u2122\u0161\u203A\u0153\uFFFD\u017E\u0178\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\xD0\xD1\xD2\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xDB\xDC\xDD\xDE\xDF\xE0\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\xF0\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\xFD\xFE\xFF", D = [], e = {};
      for (var i = 0; i != d.length; ++i) {
        if (d.charCodeAt(i) !== 65533)
          e[d.charAt(i)] = i;
        D[i] = d.charAt(i);
      }
      return { "enc": e, "dec": D };
    }();
    cptable2[1253] = function() {
      var d = "\0\x07\b	\n\v\f\r !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\u20AC\uFFFD\u201A\u0192\u201E\u2026\u2020\u2021\uFFFD\u2030\uFFFD\u2039\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u2018\u2019\u201C\u201D\u2022\u2013\u2014\uFFFD\u2122\uFFFD\u203A\uFFFD\uFFFD\uFFFD\uFFFD\xA0\u0385\u0386\xA3\xA4\xA5\xA6\xA7\xA8\xA9\uFFFD\xAB\xAC\xAD\xAE\u2015\xB0\xB1\xB2\xB3\u0384\xB5\xB6\xB7\u0388\u0389\u038A\xBB\u038C\xBD\u038E\u038F\u0390\u0391\u0392\u0393\u0394\u0395\u0396\u0397\u0398\u0399\u039A\u039B\u039C\u039D\u039E\u039F\u03A0\u03A1\uFFFD\u03A3\u03A4\u03A5\u03A6\u03A7\u03A8\u03A9\u03AA\u03AB\u03AC\u03AD\u03AE\u03AF\u03B0\u03B1\u03B2\u03B3\u03B4\u03B5\u03B6\u03B7\u03B8\u03B9\u03BA\u03BB\u03BC\u03BD\u03BE\u03BF\u03C0\u03C1\u03C2\u03C3\u03C4\u03C5\u03C6\u03C7\u03C8\u03C9\u03CA\u03CB\u03CC\u03CD\u03CE\uFFFD", D = [], e = {};
      for (var i = 0; i != d.length; ++i) {
        if (d.charCodeAt(i) !== 65533)
          e[d.charAt(i)] = i;
        D[i] = d.charAt(i);
      }
      return { "enc": e, "dec": D };
    }();
    cptable2[1254] = function() {
      var d = "\0\x07\b	\n\v\f\r !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\u20AC\uFFFD\u201A\u0192\u201E\u2026\u2020\u2021\u02C6\u2030\u0160\u2039\u0152\uFFFD\uFFFD\uFFFD\uFFFD\u2018\u2019\u201C\u201D\u2022\u2013\u2014\u02DC\u2122\u0161\u203A\u0153\uFFFD\uFFFD\u0178\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\u011E\xD1\xD2\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xDB\xDC\u0130\u015E\xDF\xE0\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\u011F\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\u0131\u015F\xFF", D = [], e = {};
      for (var i = 0; i != d.length; ++i) {
        if (d.charCodeAt(i) !== 65533)
          e[d.charAt(i)] = i;
        D[i] = d.charAt(i);
      }
      return { "enc": e, "dec": D };
    }();
    cptable2[1255] = function() {
      var d = "\0\x07\b	\n\v\f\r !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\u20AC\uFFFD\u201A\u0192\u201E\u2026\u2020\u2021\u02C6\u2030\uFFFD\u2039\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u2018\u2019\u201C\u201D\u2022\u2013\u2014\u02DC\u2122\uFFFD\u203A\uFFFD\uFFFD\uFFFD\uFFFD\xA0\xA1\xA2\xA3\u20AA\xA5\xA6\xA7\xA8\xA9\xD7\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xF7\xBB\xBC\xBD\xBE\xBF\u05B0\u05B1\u05B2\u05B3\u05B4\u05B5\u05B6\u05B7\u05B8\u05B9\uFFFD\u05BB\u05BC\u05BD\u05BE\u05BF\u05C0\u05C1\u05C2\u05C3\u05F0\u05F1\u05F2\u05F3\u05F4\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u05D0\u05D1\u05D2\u05D3\u05D4\u05D5\u05D6\u05D7\u05D8\u05D9\u05DA\u05DB\u05DC\u05DD\u05DE\u05DF\u05E0\u05E1\u05E2\u05E3\u05E4\u05E5\u05E6\u05E7\u05E8\u05E9\u05EA\uFFFD\uFFFD\u200E\u200F\uFFFD", D = [], e = {};
      for (var i = 0; i != d.length; ++i) {
        if (d.charCodeAt(i) !== 65533)
          e[d.charAt(i)] = i;
        D[i] = d.charAt(i);
      }
      return { "enc": e, "dec": D };
    }();
    cptable2[1256] = function() {
      var d = "\0\x07\b	\n\v\f\r !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\u20AC\u067E\u201A\u0192\u201E\u2026\u2020\u2021\u02C6\u2030\u0679\u2039\u0152\u0686\u0698\u0688\u06AF\u2018\u2019\u201C\u201D\u2022\u2013\u2014\u06A9\u2122\u0691\u203A\u0153\u200C\u200D\u06BA\xA0\u060C\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\u06BE\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\u061B\xBB\xBC\xBD\xBE\u061F\u06C1\u0621\u0622\u0623\u0624\u0625\u0626\u0627\u0628\u0629\u062A\u062B\u062C\u062D\u062E\u062F\u0630\u0631\u0632\u0633\u0634\u0635\u0636\xD7\u0637\u0638\u0639\u063A\u0640\u0641\u0642\u0643\xE0\u0644\xE2\u0645\u0646\u0647\u0648\xE7\xE8\xE9\xEA\xEB\u0649\u064A\xEE\xEF\u064B\u064C\u064D\u064E\xF4\u064F\u0650\xF7\u0651\xF9\u0652\xFB\xFC\u200E\u200F\u06D2", D = [], e = {};
      for (var i = 0; i != d.length; ++i) {
        if (d.charCodeAt(i) !== 65533)
          e[d.charAt(i)] = i;
        D[i] = d.charAt(i);
      }
      return { "enc": e, "dec": D };
    }();
    cptable2[1257] = function() {
      var d = "\0\x07\b	\n\v\f\r !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\u20AC\uFFFD\u201A\uFFFD\u201E\u2026\u2020\u2021\uFFFD\u2030\uFFFD\u2039\uFFFD\xA8\u02C7\xB8\uFFFD\u2018\u2019\u201C\u201D\u2022\u2013\u2014\uFFFD\u2122\uFFFD\u203A\uFFFD\xAF\u02DB\uFFFD\xA0\uFFFD\xA2\xA3\xA4\uFFFD\xA6\xA7\xD8\xA9\u0156\xAB\xAC\xAD\xAE\xC6\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xF8\xB9\u0157\xBB\xBC\xBD\xBE\xE6\u0104\u012E\u0100\u0106\xC4\xC5\u0118\u0112\u010C\xC9\u0179\u0116\u0122\u0136\u012A\u013B\u0160\u0143\u0145\xD3\u014C\xD5\xD6\xD7\u0172\u0141\u015A\u016A\xDC\u017B\u017D\xDF\u0105\u012F\u0101\u0107\xE4\xE5\u0119\u0113\u010D\xE9\u017A\u0117\u0123\u0137\u012B\u013C\u0161\u0144\u0146\xF3\u014D\xF5\xF6\xF7\u0173\u0142\u015B\u016B\xFC\u017C\u017E\u02D9", D = [], e = {};
      for (var i = 0; i != d.length; ++i) {
        if (d.charCodeAt(i) !== 65533)
          e[d.charAt(i)] = i;
        D[i] = d.charAt(i);
      }
      return { "enc": e, "dec": D };
    }();
    cptable2[1258] = function() {
      var d = "\0\x07\b	\n\v\f\r !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\u20AC\uFFFD\u201A\u0192\u201E\u2026\u2020\u2021\u02C6\u2030\uFFFD\u2039\u0152\uFFFD\uFFFD\uFFFD\uFFFD\u2018\u2019\u201C\u201D\u2022\u2013\u2014\u02DC\u2122\uFFFD\u203A\u0153\uFFFD\uFFFD\u0178\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF\xC0\xC1\xC2\u0102\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\u0300\xCD\xCE\xCF\u0110\xD1\u0309\xD3\xD4\u01A0\xD6\xD7\xD8\xD9\xDA\xDB\xDC\u01AF\u0303\xDF\xE0\xE1\xE2\u0103\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\u0301\xED\xEE\xEF\u0111\xF1\u0323\xF3\xF4\u01A1\xF6\xF7\xF8\xF9\xFA\xFB\xFC\u01B0\u20AB\xFF", D = [], e = {};
      for (var i = 0; i != d.length; ++i) {
        if (d.charCodeAt(i) !== 65533)
          e[d.charAt(i)] = i;
        D[i] = d.charAt(i);
      }
      return { "enc": e, "dec": D };
    }();
    cptable2[1e4] = function() {
      var d = "\0\x07\b	\n\v\f\r !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\xC4\xC5\xC7\xC9\xD1\xD6\xDC\xE1\xE0\xE2\xE4\xE3\xE5\xE7\xE9\xE8\xEA\xEB\xED\xEC\xEE\xEF\xF1\xF3\xF2\xF4\xF6\xF5\xFA\xF9\xFB\xFC\u2020\xB0\xA2\xA3\xA7\u2022\xB6\xDF\xAE\xA9\u2122\xB4\xA8\u2260\xC6\xD8\u221E\xB1\u2264\u2265\xA5\xB5\u2202\u2211\u220F\u03C0\u222B\xAA\xBA\u2126\xE6\xF8\xBF\xA1\xAC\u221A\u0192\u2248\u2206\xAB\xBB\u2026\xA0\xC0\xC3\xD5\u0152\u0153\u2013\u2014\u201C\u201D\u2018\u2019\xF7\u25CA\xFF\u0178\u2044\xA4\u2039\u203A\uFB01\uFB02\u2021\xB7\u201A\u201E\u2030\xC2\xCA\xC1\xCB\xC8\xCD\xCE\xCF\xCC\xD3\xD4\uFFFD\xD2\xDA\xDB\xD9\u0131\u02C6\u02DC\xAF\u02D8\u02D9\u02DA\xB8\u02DD\u02DB\u02C7", D = [], e = {};
      for (var i = 0; i != d.length; ++i) {
        if (d.charCodeAt(i) !== 65533)
          e[d.charAt(i)] = i;
        D[i] = d.charAt(i);
      }
      return { "enc": e, "dec": D };
    }();
    cptable2[10006] = function() {
      var d = "\0\x07\b	\n\v\f\r !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\xC4\xB9\xB2\xC9\xB3\xD6\xDC\u0385\xE0\xE2\xE4\u0384\xA8\xE7\xE9\xE8\xEA\xEB\xA3\u2122\xEE\xEF\u2022\xBD\u2030\xF4\xF6\xA6\xAD\xF9\xFB\xFC\u2020\u0393\u0394\u0398\u039B\u039E\u03A0\xDF\xAE\xA9\u03A3\u03AA\xA7\u2260\xB0\u0387\u0391\xB1\u2264\u2265\xA5\u0392\u0395\u0396\u0397\u0399\u039A\u039C\u03A6\u03AB\u03A8\u03A9\u03AC\u039D\xAC\u039F\u03A1\u2248\u03A4\xAB\xBB\u2026\xA0\u03A5\u03A7\u0386\u0388\u0153\u2013\u2015\u201C\u201D\u2018\u2019\xF7\u0389\u038A\u038C\u038E\u03AD\u03AE\u03AF\u03CC\u038F\u03CD\u03B1\u03B2\u03C8\u03B4\u03B5\u03C6\u03B3\u03B7\u03B9\u03BE\u03BA\u03BB\u03BC\u03BD\u03BF\u03C0\u03CE\u03C1\u03C3\u03C4\u03B8\u03C9\u03C2\u03C7\u03C5\u03B6\u03CA\u03CB\u0390\u03B0\uFFFD", D = [], e = {};
      for (var i = 0; i != d.length; ++i) {
        if (d.charCodeAt(i) !== 65533)
          e[d.charAt(i)] = i;
        D[i] = d.charAt(i);
      }
      return { "enc": e, "dec": D };
    }();
    cptable2[10007] = function() {
      var d = "\0\x07\b	\n\v\f\r !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\u0410\u0411\u0412\u0413\u0414\u0415\u0416\u0417\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u0420\u0421\u0422\u0423\u0424\u0425\u0426\u0427\u0428\u0429\u042A\u042B\u042C\u042D\u042E\u042F\u2020\xB0\xA2\xA3\xA7\u2022\xB6\u0406\xAE\xA9\u2122\u0402\u0452\u2260\u0403\u0453\u221E\xB1\u2264\u2265\u0456\xB5\u2202\u0408\u0404\u0454\u0407\u0457\u0409\u0459\u040A\u045A\u0458\u0405\xAC\u221A\u0192\u2248\u2206\xAB\xBB\u2026\xA0\u040B\u045B\u040C\u045C\u0455\u2013\u2014\u201C\u201D\u2018\u2019\xF7\u201E\u040E\u045E\u040F\u045F\u2116\u0401\u0451\u044F\u0430\u0431\u0432\u0433\u0434\u0435\u0436\u0437\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044A\u044B\u044C\u044D\u044E\xA4", D = [], e = {};
      for (var i = 0; i != d.length; ++i) {
        if (d.charCodeAt(i) !== 65533)
          e[d.charAt(i)] = i;
        D[i] = d.charAt(i);
      }
      return { "enc": e, "dec": D };
    }();
    cptable2[10008] = function() {
      var d = [], e = {}, D = [], j;
      D[0] = "\0\x07\b	\n\v\f\r !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\x80\uF8D8\uF8D9\uF8DA\uF8DB\uF8DC\uF8DD\uF8DE\uF8DF\uF8E0\uF8E1\uF8E2\uF8E3\uF8E4\uF8E5\uF8E6\uF8E7\uF8E8\uF8E9\uF8EA\uF8EB\uF8EC\uF8ED\uF8EE\uF8EF\uF8F0\uF8F1\uF8F2\uF8F3\uF8F4\uF8F5\uF8F6\uF8F7\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uF8F8\uF8F9\uF8FA\uF8FB\uF8FC\uF8FD\uF8FE\uF8FF".split("");
      for (j = 0; j != D[0].length; ++j)
        if (D[0][j].charCodeAt(0) !== 65533) {
          e[D[0][j]] = 0 + j;
          d[0 + j] = D[0][j];
        }
      D[161] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u3000\u3001\u3002\u30FB\u02C9\u02C7\xA8\u3003\u3005\u2015\uFF5E\uFFFD\u2026\u2018\u2019\u201C\u201D\u3014\u3015\u3008\u3009\u300A\u300B\u300C\u300D\u300E\u300F\u3016\u3017\u3010\u3011\xB1\xD7\xF7\u2236\u2227\u2228\u2211\u220F\u222A\u2229\u2208\u2237\u221A\u22A5\u2225\u2220\u2312\u2299\u222B\u222E\u2261\u224C\u2248\u223D\u221D\u2260\u226E\u226F\u2264\u2265\u221E\u2235\u2234\u2642\u2640\xB0\u2032\u2033\u2103\uFF04\xA4\uFFE0\uFFE1\u2030\xA7\u2116\u2606\u2605\u25CB\u25CF\u25CE\u25C7\u25C6\u25A1\u25A0\u25B3\u25B2\u203B\u2192\u2190\u2191\u2193\u3013\uFFFD".split("");
      for (j = 0; j != D[161].length; ++j)
        if (D[161][j].charCodeAt(0) !== 65533) {
          e[D[161][j]] = 41216 + j;
          d[41216 + j] = D[161][j];
        }
      D[162] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u2488\u2489\u248A\u248B\u248C\u248D\u248E\u248F\u2490\u2491\u2492\u2493\u2494\u2495\u2496\u2497\u2498\u2499\u249A\u249B\u2474\u2475\u2476\u2477\u2478\u2479\u247A\u247B\u247C\u247D\u247E\u247F\u2480\u2481\u2482\u2483\u2484\u2485\u2486\u2487\u2460\u2461\u2462\u2463\u2464\u2465\u2466\u2467\u2468\u2469\uFFFD\uFFFD\u3220\u3221\u3222\u3223\u3224\u3225\u3226\u3227\u3228\u3229\uFFFD\uFFFD\u2160\u2161\u2162\u2163\u2164\u2165\u2166\u2167\u2168\u2169\u216A\u216B\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[162].length; ++j)
        if (D[162][j].charCodeAt(0) !== 65533) {
          e[D[162][j]] = 41472 + j;
          d[41472 + j] = D[162][j];
        }
      D[163] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFF01\uFF02\uFF03\uFFE5\uFF05\uFF06\uFF07\uFF08\uFF09\uFF0A\uFF0B\uFF0C\uFF0D\uFF0E\uFF0F\uFF10\uFF11\uFF12\uFF13\uFF14\uFF15\uFF16\uFF17\uFF18\uFF19\uFF1A\uFF1B\uFF1C\uFF1D\uFF1E\uFF1F\uFF20\uFF21\uFF22\uFF23\uFF24\uFF25\uFF26\uFF27\uFF28\uFF29\uFF2A\uFF2B\uFF2C\uFF2D\uFF2E\uFF2F\uFF30\uFF31\uFF32\uFF33\uFF34\uFF35\uFF36\uFF37\uFF38\uFF39\uFF3A\uFF3B\uFF3C\uFF3D\uFF3E\uFF3F\uFF40\uFF41\uFF42\uFF43\uFF44\uFF45\uFF46\uFF47\uFF48\uFF49\uFF4A\uFF4B\uFF4C\uFF4D\uFF4E\uFF4F\uFF50\uFF51\uFF52\uFF53\uFF54\uFF55\uFF56\uFF57\uFF58\uFF59\uFF5A\uFF5B\uFF5C\uFF5D\uFFE3\uFFFD".split("");
      for (j = 0; j != D[163].length; ++j)
        if (D[163][j].charCodeAt(0) !== 65533) {
          e[D[163][j]] = 41728 + j;
          d[41728 + j] = D[163][j];
        }
      D[164] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u3041\u3042\u3043\u3044\u3045\u3046\u3047\u3048\u3049\u304A\u304B\u304C\u304D\u304E\u304F\u3050\u3051\u3052\u3053\u3054\u3055\u3056\u3057\u3058\u3059\u305A\u305B\u305C\u305D\u305E\u305F\u3060\u3061\u3062\u3063\u3064\u3065\u3066\u3067\u3068\u3069\u306A\u306B\u306C\u306D\u306E\u306F\u3070\u3071\u3072\u3073\u3074\u3075\u3076\u3077\u3078\u3079\u307A\u307B\u307C\u307D\u307E\u307F\u3080\u3081\u3082\u3083\u3084\u3085\u3086\u3087\u3088\u3089\u308A\u308B\u308C\u308D\u308E\u308F\u3090\u3091\u3092\u3093\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[164].length; ++j)
        if (D[164][j].charCodeAt(0) !== 65533) {
          e[D[164][j]] = 41984 + j;
          d[41984 + j] = D[164][j];
        }
      D[165] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u30A1\u30A2\u30A3\u30A4\u30A5\u30A6\u30A7\u30A8\u30A9\u30AA\u30AB\u30AC\u30AD\u30AE\u30AF\u30B0\u30B1\u30B2\u30B3\u30B4\u30B5\u30B6\u30B7\u30B8\u30B9\u30BA\u30BB\u30BC\u30BD\u30BE\u30BF\u30C0\u30C1\u30C2\u30C3\u30C4\u30C5\u30C6\u30C7\u30C8\u30C9\u30CA\u30CB\u30CC\u30CD\u30CE\u30CF\u30D0\u30D1\u30D2\u30D3\u30D4\u30D5\u30D6\u30D7\u30D8\u30D9\u30DA\u30DB\u30DC\u30DD\u30DE\u30DF\u30E0\u30E1\u30E2\u30E3\u30E4\u30E5\u30E6\u30E7\u30E8\u30E9\u30EA\u30EB\u30EC\u30ED\u30EE\u30EF\u30F0\u30F1\u30F2\u30F3\u30F4\u30F5\u30F6\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[165].length; ++j)
        if (D[165][j].charCodeAt(0) !== 65533) {
          e[D[165][j]] = 42240 + j;
          d[42240 + j] = D[165][j];
        }
      D[166] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0391\u0392\u0393\u0394\u0395\u0396\u0397\u0398\u0399\u039A\u039B\u039C\u039D\u039E\u039F\u03A0\u03A1\u03A3\u03A4\u03A5\u03A6\u03A7\u03A8\u03A9\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u03B1\u03B2\u03B3\u03B4\u03B5\u03B6\u03B7\u03B8\u03B9\u03BA\u03BB\u03BC\u03BD\u03BE\u03BF\u03C0\u03C1\u03C3\u03C4\u03C5\u03C6\u03C7\u03C8\u03C9\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[166].length; ++j)
        if (D[166][j].charCodeAt(0) !== 65533) {
          e[D[166][j]] = 42496 + j;
          d[42496 + j] = D[166][j];
        }
      D[167] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0410\u0411\u0412\u0413\u0414\u0415\u0401\u0416\u0417\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u0420\u0421\u0422\u0423\u0424\u0425\u0426\u0427\u0428\u0429\u042A\u042B\u042C\u042D\u042E\u042F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0430\u0431\u0432\u0433\u0434\u0435\u0451\u0436\u0437\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044A\u044B\u044C\u044D\u044E\u044F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[167].length; ++j)
        if (D[167][j].charCodeAt(0) !== 65533) {
          e[D[167][j]] = 42752 + j;
          d[42752 + j] = D[167][j];
        }
      D[168] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0101\xE1\u01CE\xE0\u0113\xE9\u011B\xE8\u012B\xED\u01D0\xEC\u014D\xF3\u01D2\xF2\u016B\xFA\u01D4\xF9\u01D6\u01D8\u01DA\u01DC\xFC\xEA\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u3105\u3106\u3107\u3108\u3109\u310A\u310B\u310C\u310D\u310E\u310F\u3110\u3111\u3112\u3113\u3114\u3115\u3116\u3117\u3118\u3119\u311A\u311B\u311C\u311D\u311E\u311F\u3120\u3121\u3122\u3123\u3124\u3125\u3126\u3127\u3128\u3129\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[168].length; ++j)
        if (D[168][j].charCodeAt(0) !== 65533) {
          e[D[168][j]] = 43008 + j;
          d[43008 + j] = D[168][j];
        }
      D[169] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u2500\u2501\u2502\u2503\u2504\u2505\u2506\u2507\u2508\u2509\u250A\u250B\u250C\u250D\u250E\u250F\u2510\u2511\u2512\u2513\u2514\u2515\u2516\u2517\u2518\u2519\u251A\u251B\u251C\u251D\u251E\u251F\u2520\u2521\u2522\u2523\u2524\u2525\u2526\u2527\u2528\u2529\u252A\u252B\u252C\u252D\u252E\u252F\u2530\u2531\u2532\u2533\u2534\u2535\u2536\u2537\u2538\u2539\u253A\u253B\u253C\u253D\u253E\u253F\u2540\u2541\u2542\u2543\u2544\u2545\u2546\u2547\u2548\u2549\u254A\u254B\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[169].length; ++j)
        if (D[169][j].charCodeAt(0) !== 65533) {
          e[D[169][j]] = 43264 + j;
          d[43264 + j] = D[169][j];
        }
      D[176] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u554A\u963F\u57C3\u6328\u54CE\u5509\u54C0\u7691\u764C\u853C\u77EE\u827E\u788D\u7231\u9698\u978D\u6C28\u5B89\u4FFA\u6309\u6697\u5CB8\u80FA\u6848\u80AE\u6602\u76CE\u51F9\u6556\u71AC\u7FF1\u8884\u50B2\u5965\u61CA\u6FB3\u82AD\u634C\u6252\u53ED\u5427\u7B06\u516B\u75A4\u5DF4\u62D4\u8DCB\u9776\u628A\u8019\u575D\u9738\u7F62\u7238\u767D\u67CF\u767E\u6446\u4F70\u8D25\u62DC\u7A17\u6591\u73ED\u642C\u6273\u822C\u9881\u677F\u7248\u626E\u62CC\u4F34\u74E3\u534A\u529E\u7ECA\u90A6\u5E2E\u6886\u699C\u8180\u7ED1\u68D2\u78C5\u868C\u9551\u508D\u8C24\u82DE\u80DE\u5305\u8912\u5265\uFFFD".split("");
      for (j = 0; j != D[176].length; ++j)
        if (D[176][j].charCodeAt(0) !== 65533) {
          e[D[176][j]] = 45056 + j;
          d[45056 + j] = D[176][j];
        }
      D[177] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8584\u96F9\u4FDD\u5821\u9971\u5B9D\u62B1\u62A5\u66B4\u8C79\u9C8D\u7206\u676F\u7891\u60B2\u5351\u5317\u8F88\u80CC\u8D1D\u94A1\u500D\u72C8\u5907\u60EB\u7119\u88AB\u5954\u82EF\u672C\u7B28\u5D29\u7EF7\u752D\u6CF5\u8E66\u8FF8\u903C\u9F3B\u6BD4\u9119\u7B14\u5F7C\u78A7\u84D6\u853D\u6BD5\u6BD9\u6BD6\u5E01\u5E87\u75F9\u95ED\u655D\u5F0A\u5FC5\u8F9F\u58C1\u81C2\u907F\u965B\u97AD\u8FB9\u7F16\u8D2C\u6241\u4FBF\u53D8\u535E\u8FA8\u8FA9\u8FAB\u904D\u6807\u5F6A\u8198\u8868\u9CD6\u618B\u522B\u762A\u5F6C\u658C\u6FD2\u6EE8\u5BBE\u6448\u5175\u51B0\u67C4\u4E19\u79C9\u997C\u70B3\uFFFD".split("");
      for (j = 0; j != D[177].length; ++j)
        if (D[177][j].charCodeAt(0) !== 65533) {
          e[D[177][j]] = 45312 + j;
          d[45312 + j] = D[177][j];
        }
      D[178] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u75C5\u5E76\u73BB\u83E0\u64AD\u62E8\u94B5\u6CE2\u535A\u52C3\u640F\u94C2\u7B94\u4F2F\u5E1B\u8236\u8116\u818A\u6E24\u6CCA\u9A73\u6355\u535C\u54FA\u8865\u57E0\u4E0D\u5E03\u6B65\u7C3F\u90E8\u6016\u64E6\u731C\u88C1\u6750\u624D\u8D22\u776C\u8E29\u91C7\u5F69\u83DC\u8521\u9910\u53C2\u8695\u6B8B\u60ED\u60E8\u707F\u82CD\u8231\u4ED3\u6CA7\u85CF\u64CD\u7CD9\u69FD\u66F9\u8349\u5395\u7B56\u4FA7\u518C\u6D4B\u5C42\u8E6D\u63D2\u53C9\u832C\u8336\u67E5\u78B4\u643D\u5BDF\u5C94\u5DEE\u8BE7\u62C6\u67F4\u8C7A\u6400\u63BA\u8749\u998B\u8C17\u7F20\u94F2\u4EA7\u9610\u98A4\u660C\u7316\uFFFD".split("");
      for (j = 0; j != D[178].length; ++j)
        if (D[178][j].charCodeAt(0) !== 65533) {
          e[D[178][j]] = 45568 + j;
          d[45568 + j] = D[178][j];
        }
      D[179] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u573A\u5C1D\u5E38\u957F\u507F\u80A0\u5382\u655E\u7545\u5531\u5021\u8D85\u6284\u949E\u671D\u5632\u6F6E\u5DE2\u5435\u7092\u8F66\u626F\u64A4\u63A3\u5F7B\u6F88\u90F4\u81E3\u8FB0\u5C18\u6668\u5FF1\u6C89\u9648\u8D81\u886C\u6491\u79F0\u57CE\u6A59\u6210\u5448\u4E58\u7A0B\u60E9\u6F84\u8BDA\u627F\u901E\u9A8B\u79E4\u5403\u75F4\u6301\u5319\u6C60\u8FDF\u5F1B\u9A70\u803B\u9F7F\u4F88\u5C3A\u8D64\u7FC5\u65A5\u70BD\u5145\u51B2\u866B\u5D07\u5BA0\u62BD\u916C\u7574\u8E0C\u7A20\u6101\u7B79\u4EC7\u7EF8\u7785\u4E11\u81ED\u521D\u51FA\u6A71\u53A8\u8E87\u9504\u96CF\u6EC1\u9664\u695A\uFFFD".split("");
      for (j = 0; j != D[179].length; ++j)
        if (D[179][j].charCodeAt(0) !== 65533) {
          e[D[179][j]] = 45824 + j;
          d[45824 + j] = D[179][j];
        }
      D[180] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7840\u50A8\u77D7\u6410\u89E6\u5904\u63E3\u5DDD\u7A7F\u693D\u4F20\u8239\u5598\u4E32\u75AE\u7A97\u5E62\u5E8A\u95EF\u521B\u5439\u708A\u6376\u9524\u5782\u6625\u693F\u9187\u5507\u6DF3\u7EAF\u8822\u6233\u7EF0\u75B5\u8328\u78C1\u96CC\u8F9E\u6148\u74F7\u8BCD\u6B64\u523A\u8D50\u6B21\u806A\u8471\u56F1\u5306\u4ECE\u4E1B\u51D1\u7C97\u918B\u7C07\u4FC3\u8E7F\u7BE1\u7A9C\u6467\u5D14\u50AC\u8106\u7601\u7CB9\u6DEC\u7FE0\u6751\u5B58\u5BF8\u78CB\u64AE\u6413\u63AA\u632B\u9519\u642D\u8FBE\u7B54\u7629\u6253\u5927\u5446\u6B79\u50A3\u6234\u5E26\u6B86\u4EE3\u8D37\u888B\u5F85\u902E\uFFFD".split("");
      for (j = 0; j != D[180].length; ++j)
        if (D[180][j].charCodeAt(0) !== 65533) {
          e[D[180][j]] = 46080 + j;
          d[46080 + j] = D[180][j];
        }
      D[181] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6020\u803D\u62C5\u4E39\u5355\u90F8\u63B8\u80C6\u65E6\u6C2E\u4F46\u60EE\u6DE1\u8BDE\u5F39\u86CB\u5F53\u6321\u515A\u8361\u6863\u5200\u6363\u8E48\u5012\u5C9B\u7977\u5BFC\u5230\u7A3B\u60BC\u9053\u76D7\u5FB7\u5F97\u7684\u8E6C\u706F\u767B\u7B49\u77AA\u51F3\u9093\u5824\u4F4E\u6EF4\u8FEA\u654C\u7B1B\u72C4\u6DA4\u7FDF\u5AE1\u62B5\u5E95\u5730\u8482\u7B2C\u5E1D\u5F1F\u9012\u7F14\u98A0\u6382\u6EC7\u7898\u70B9\u5178\u975B\u57AB\u7535\u4F43\u7538\u5E97\u60E6\u5960\u6DC0\u6BBF\u7889\u53FC\u96D5\u51CB\u5201\u6389\u540A\u9493\u8C03\u8DCC\u7239\u789F\u8776\u8FED\u8C0D\u53E0\uFFFD".split("");
      for (j = 0; j != D[181].length; ++j)
        if (D[181][j].charCodeAt(0) !== 65533) {
          e[D[181][j]] = 46336 + j;
          d[46336 + j] = D[181][j];
        }
      D[182] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u4E01\u76EF\u53EE\u9489\u9876\u9F0E\u952D\u5B9A\u8BA2\u4E22\u4E1C\u51AC\u8463\u61C2\u52A8\u680B\u4F97\u606B\u51BB\u6D1E\u515C\u6296\u6597\u9661\u8C46\u9017\u75D8\u90FD\u7763\u6BD2\u728A\u72EC\u8BFB\u5835\u7779\u8D4C\u675C\u9540\u809A\u5EA6\u6E21\u5992\u7AEF\u77ED\u953B\u6BB5\u65AD\u7F0E\u5806\u5151\u961F\u5BF9\u58A9\u5428\u8E72\u6566\u987F\u56E4\u949D\u76FE\u9041\u6387\u54C6\u591A\u593A\u579B\u8EB2\u6735\u8DFA\u8235\u5241\u60F0\u5815\u86FE\u5CE8\u9E45\u4FC4\u989D\u8BB9\u5A25\u6076\u5384\u627C\u904F\u9102\u997F\u6069\u800C\u513F\u8033\u5C14\u9975\u6D31\u4E8C\uFFFD".split("");
      for (j = 0; j != D[182].length; ++j)
        if (D[182][j].charCodeAt(0) !== 65533) {
          e[D[182][j]] = 46592 + j;
          d[46592 + j] = D[182][j];
        }
      D[183] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8D30\u53D1\u7F5A\u7B4F\u4F10\u4E4F\u9600\u6CD5\u73D0\u85E9\u5E06\u756A\u7FFB\u6A0A\u77FE\u9492\u7E41\u51E1\u70E6\u53CD\u8FD4\u8303\u8D29\u72AF\u996D\u6CDB\u574A\u82B3\u65B9\u80AA\u623F\u9632\u59A8\u4EFF\u8BBF\u7EBA\u653E\u83F2\u975E\u5561\u98DE\u80A5\u532A\u8BFD\u5420\u80BA\u5E9F\u6CB8\u8D39\u82AC\u915A\u5429\u6C1B\u5206\u7EB7\u575F\u711A\u6C7E\u7C89\u594B\u4EFD\u5FFF\u6124\u7CAA\u4E30\u5C01\u67AB\u8702\u5CF0\u950B\u98CE\u75AF\u70FD\u9022\u51AF\u7F1D\u8BBD\u5949\u51E4\u4F5B\u5426\u592B\u6577\u80A4\u5B75\u6276\u62C2\u8F90\u5E45\u6C1F\u7B26\u4F0F\u4FD8\u670D\uFFFD".split("");
      for (j = 0; j != D[183].length; ++j)
        if (D[183][j].charCodeAt(0) !== 65533) {
          e[D[183][j]] = 46848 + j;
          d[46848 + j] = D[183][j];
        }
      D[184] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6D6E\u6DAA\u798F\u88B1\u5F17\u752B\u629A\u8F85\u4FEF\u91DC\u65A7\u812F\u8151\u5E9C\u8150\u8D74\u526F\u8986\u8D4B\u590D\u5085\u4ED8\u961C\u7236\u8179\u8D1F\u5BCC\u8BA3\u9644\u5987\u7F1A\u5490\u5676\u560E\u8BE5\u6539\u6982\u9499\u76D6\u6E89\u5E72\u7518\u6746\u67D1\u7AFF\u809D\u8D76\u611F\u79C6\u6562\u8D63\u5188\u521A\u94A2\u7F38\u809B\u7EB2\u5C97\u6E2F\u6760\u7BD9\u768B\u9AD8\u818F\u7F94\u7CD5\u641E\u9550\u7A3F\u544A\u54E5\u6B4C\u6401\u6208\u9E3D\u80F3\u7599\u5272\u9769\u845B\u683C\u86E4\u9601\u9694\u94EC\u4E2A\u5404\u7ED9\u6839\u8DDF\u8015\u66F4\u5E9A\u7FB9\uFFFD".split("");
      for (j = 0; j != D[184].length; ++j)
        if (D[184][j].charCodeAt(0) !== 65533) {
          e[D[184][j]] = 47104 + j;
          d[47104 + j] = D[184][j];
        }
      D[185] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u57C2\u803F\u6897\u5DE5\u653B\u529F\u606D\u9F9A\u4F9B\u8EAC\u516C\u5BAB\u5F13\u5DE9\u6C5E\u62F1\u8D21\u5171\u94A9\u52FE\u6C9F\u82DF\u72D7\u57A2\u6784\u8D2D\u591F\u8F9C\u83C7\u5495\u7B8D\u4F30\u6CBD\u5B64\u59D1\u9F13\u53E4\u86CA\u9AA8\u8C37\u80A1\u6545\u987E\u56FA\u96C7\u522E\u74DC\u5250\u5BE1\u6302\u8902\u4E56\u62D0\u602A\u68FA\u5173\u5B98\u51A0\u89C2\u7BA1\u9986\u7F50\u60EF\u704C\u8D2F\u5149\u5E7F\u901B\u7470\u89C4\u572D\u7845\u5F52\u9F9F\u95FA\u8F68\u9B3C\u8BE1\u7678\u6842\u67DC\u8DEA\u8D35\u523D\u8F8A\u6EDA\u68CD\u9505\u90ED\u56FD\u679C\u88F9\u8FC7\u54C8\uFFFD".split("");
      for (j = 0; j != D[185].length; ++j)
        if (D[185][j].charCodeAt(0) !== 65533) {
          e[D[185][j]] = 47360 + j;
          d[47360 + j] = D[185][j];
        }
      D[186] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9AB8\u5B69\u6D77\u6C26\u4EA5\u5BB3\u9A87\u9163\u61A8\u90AF\u97E9\u542B\u6DB5\u5BD2\u51FD\u558A\u7F55\u7FF0\u64BC\u634D\u65F1\u61BE\u608D\u710A\u6C57\u6C49\u592F\u676D\u822A\u58D5\u568E\u8C6A\u6BEB\u90DD\u597D\u8017\u53F7\u6D69\u5475\u559D\u8377\u83CF\u6838\u79BE\u548C\u4F55\u5408\u76D2\u8C89\u9602\u6CB3\u6DB8\u8D6B\u8910\u9E64\u8D3A\u563F\u9ED1\u75D5\u5F88\u72E0\u6068\u54FC\u4EA8\u6A2A\u8861\u6052\u8F70\u54C4\u70D8\u8679\u9E3F\u6D2A\u5B8F\u5F18\u7EA2\u5589\u4FAF\u7334\u543C\u539A\u5019\u540E\u547C\u4E4E\u5FFD\u745A\u58F6\u846B\u80E1\u8774\u72D0\u7CCA\u6E56\uFFFD".split("");
      for (j = 0; j != D[186].length; ++j)
        if (D[186][j].charCodeAt(0) !== 65533) {
          e[D[186][j]] = 47616 + j;
          d[47616 + j] = D[186][j];
        }
      D[187] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5F27\u864E\u552C\u62A4\u4E92\u6CAA\u6237\u82B1\u54D7\u534E\u733E\u6ED1\u753B\u5212\u5316\u8BDD\u69D0\u5F8A\u6000\u6DEE\u574F\u6B22\u73AF\u6853\u8FD8\u7F13\u6362\u60A3\u5524\u75EA\u8C62\u7115\u6DA3\u5BA6\u5E7B\u8352\u614C\u9EC4\u78FA\u8757\u7C27\u7687\u51F0\u60F6\u714C\u6643\u5E4C\u604D\u8C0E\u7070\u6325\u8F89\u5FBD\u6062\u86D4\u56DE\u6BC1\u6094\u6167\u5349\u60E0\u6666\u8D3F\u79FD\u4F1A\u70E9\u6C47\u8BB3\u8BF2\u7ED8\u8364\u660F\u5A5A\u9B42\u6D51\u6DF7\u8C41\u6D3B\u4F19\u706B\u83B7\u6216\u60D1\u970D\u8D27\u7978\u51FB\u573E\u57FA\u673A\u7578\u7A3D\u79EF\u7B95\uFFFD".split("");
      for (j = 0; j != D[187].length; ++j)
        if (D[187][j].charCodeAt(0) !== 65533) {
          e[D[187][j]] = 47872 + j;
          d[47872 + j] = D[187][j];
        }
      D[188] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u808C\u9965\u8FF9\u6FC0\u8BA5\u9E21\u59EC\u7EE9\u7F09\u5409\u6781\u68D8\u8F91\u7C4D\u96C6\u53CA\u6025\u75BE\u6C72\u5373\u5AC9\u7EA7\u6324\u51E0\u810A\u5DF1\u84DF\u6280\u5180\u5B63\u4F0E\u796D\u5242\u60B8\u6D4E\u5BC4\u5BC2\u8BA1\u8BB0\u65E2\u5FCC\u9645\u5993\u7EE7\u7EAA\u5609\u67B7\u5939\u4F73\u5BB6\u52A0\u835A\u988A\u8D3E\u7532\u94BE\u5047\u7A3C\u4EF7\u67B6\u9A7E\u5AC1\u6B7C\u76D1\u575A\u5C16\u7B3A\u95F4\u714E\u517C\u80A9\u8270\u5978\u7F04\u8327\u68C0\u67EC\u78B1\u7877\u62E3\u6361\u7B80\u4FED\u526A\u51CF\u8350\u69DB\u9274\u8DF5\u8D31\u89C1\u952E\u7BAD\u4EF6\uFFFD".split("");
      for (j = 0; j != D[188].length; ++j)
        if (D[188][j].charCodeAt(0) !== 65533) {
          e[D[188][j]] = 48128 + j;
          d[48128 + j] = D[188][j];
        }
      D[189] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5065\u8230\u5251\u996F\u6E10\u6E85\u6DA7\u5EFA\u50F5\u59DC\u5C06\u6D46\u6C5F\u7586\u848B\u6868\u5956\u8BB2\u5320\u9171\u964D\u8549\u6912\u7901\u7126\u80F6\u4EA4\u90CA\u6D47\u9A84\u5A07\u56BC\u6405\u94F0\u77EB\u4FA5\u811A\u72E1\u89D2\u997A\u7F34\u7EDE\u527F\u6559\u9175\u8F7F\u8F83\u53EB\u7A96\u63ED\u63A5\u7686\u79F8\u8857\u9636\u622A\u52AB\u8282\u6854\u6770\u6377\u776B\u7AED\u6D01\u7ED3\u89E3\u59D0\u6212\u85C9\u82A5\u754C\u501F\u4ECB\u75A5\u8BEB\u5C4A\u5DFE\u7B4B\u65A4\u91D1\u4ECA\u6D25\u895F\u7D27\u9526\u4EC5\u8C28\u8FDB\u9773\u664B\u7981\u8FD1\u70EC\u6D78\uFFFD".split("");
      for (j = 0; j != D[189].length; ++j)
        if (D[189][j].charCodeAt(0) !== 65533) {
          e[D[189][j]] = 48384 + j;
          d[48384 + j] = D[189][j];
        }
      D[190] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5C3D\u52B2\u8346\u5162\u830E\u775B\u6676\u9CB8\u4EAC\u60CA\u7CBE\u7CB3\u7ECF\u4E95\u8B66\u666F\u9888\u9759\u5883\u656C\u955C\u5F84\u75C9\u9756\u7ADF\u7ADE\u51C0\u70AF\u7A98\u63EA\u7A76\u7EA0\u7396\u97ED\u4E45\u7078\u4E5D\u9152\u53A9\u6551\u65E7\u81FC\u8205\u548E\u5C31\u759A\u97A0\u62D8\u72D9\u75BD\u5C45\u9A79\u83CA\u5C40\u5480\u77E9\u4E3E\u6CAE\u805A\u62D2\u636E\u5DE8\u5177\u8DDD\u8E1E\u952F\u4FF1\u53E5\u60E7\u70AC\u5267\u6350\u9E43\u5A1F\u5026\u7737\u5377\u7EE2\u6485\u652B\u6289\u6398\u5014\u7235\u89C9\u51B3\u8BC0\u7EDD\u5747\u83CC\u94A7\u519B\u541B\u5CFB\uFFFD".split("");
      for (j = 0; j != D[190].length; ++j)
        if (D[190][j].charCodeAt(0) !== 65533) {
          e[D[190][j]] = 48640 + j;
          d[48640 + j] = D[190][j];
        }
      D[191] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u4FCA\u7AE3\u6D5A\u90E1\u9A8F\u5580\u5496\u5361\u54AF\u5F00\u63E9\u6977\u51EF\u6168\u520A\u582A\u52D8\u574E\u780D\u770B\u5EB7\u6177\u7CE0\u625B\u6297\u4EA2\u7095\u8003\u62F7\u70E4\u9760\u5777\u82DB\u67EF\u68F5\u78D5\u9897\u79D1\u58F3\u54B3\u53EF\u6E34\u514B\u523B\u5BA2\u8BFE\u80AF\u5543\u57A6\u6073\u5751\u542D\u7A7A\u6050\u5B54\u63A7\u62A0\u53E3\u6263\u5BC7\u67AF\u54ED\u7A9F\u82E6\u9177\u5E93\u88E4\u5938\u57AE\u630E\u8DE8\u80EF\u5757\u7B77\u4FA9\u5FEB\u5BBD\u6B3E\u5321\u7B50\u72C2\u6846\u77FF\u7736\u65F7\u51B5\u4E8F\u76D4\u5CBF\u7AA5\u8475\u594E\u9B41\u5080\uFFFD".split("");
      for (j = 0; j != D[191].length; ++j)
        if (D[191][j].charCodeAt(0) !== 65533) {
          e[D[191][j]] = 48896 + j;
          d[48896 + j] = D[191][j];
        }
      D[192] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9988\u6127\u6E83\u5764\u6606\u6346\u56F0\u62EC\u6269\u5ED3\u9614\u5783\u62C9\u5587\u8721\u814A\u8FA3\u5566\u83B1\u6765\u8D56\u84DD\u5A6A\u680F\u62E6\u7BEE\u9611\u5170\u6F9C\u8C30\u63FD\u89C8\u61D2\u7F06\u70C2\u6EE5\u7405\u6994\u72FC\u5ECA\u90CE\u6717\u6D6A\u635E\u52B3\u7262\u8001\u4F6C\u59E5\u916A\u70D9\u6D9D\u52D2\u4E50\u96F7\u956D\u857E\u78CA\u7D2F\u5121\u5792\u64C2\u808B\u7C7B\u6CEA\u68F1\u695E\u51B7\u5398\u68A8\u7281\u9ECE\u7BF1\u72F8\u79BB\u6F13\u7406\u674E\u91CC\u9CA4\u793C\u8389\u8354\u540F\u6817\u4E3D\u5389\u52B1\u783E\u5386\u5229\u5088\u4F8B\u4FD0\uFFFD".split("");
      for (j = 0; j != D[192].length; ++j)
        if (D[192][j].charCodeAt(0) !== 65533) {
          e[D[192][j]] = 49152 + j;
          d[49152 + j] = D[192][j];
        }
      D[193] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u75E2\u7ACB\u7C92\u6CA5\u96B6\u529B\u7483\u54E9\u4FE9\u8054\u83B2\u8FDE\u9570\u5EC9\u601C\u6D9F\u5E18\u655B\u8138\u94FE\u604B\u70BC\u7EC3\u7CAE\u51C9\u6881\u7CB1\u826F\u4E24\u8F86\u91CF\u667E\u4EAE\u8C05\u64A9\u804A\u50DA\u7597\u71CE\u5BE5\u8FBD\u6F66\u4E86\u6482\u9563\u5ED6\u6599\u5217\u88C2\u70C8\u52A3\u730E\u7433\u6797\u78F7\u9716\u4E34\u90BB\u9CDE\u6DCB\u51DB\u8D41\u541D\u62CE\u73B2\u83F1\u96F6\u9F84\u94C3\u4F36\u7F9A\u51CC\u7075\u9675\u5CAD\u9886\u53E6\u4EE4\u6E9C\u7409\u69B4\u786B\u998F\u7559\u5218\u7624\u6D41\u67F3\u516D\u9F99\u804B\u5499\u7B3C\u7ABF\uFFFD".split("");
      for (j = 0; j != D[193].length; ++j)
        if (D[193][j].charCodeAt(0) !== 65533) {
          e[D[193][j]] = 49408 + j;
          d[49408 + j] = D[193][j];
        }
      D[194] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9686\u5784\u62E2\u9647\u697C\u5A04\u6402\u7BD3\u6F0F\u964B\u82A6\u5362\u9885\u5E90\u7089\u63B3\u5364\u864F\u9C81\u9E93\u788C\u9732\u8DEF\u8D42\u9E7F\u6F5E\u7984\u5F55\u9646\u622E\u9A74\u5415\u94DD\u4FA3\u65C5\u5C65\u5C61\u7F15\u8651\u6C2F\u5F8B\u7387\u6EE4\u7EFF\u5CE6\u631B\u5B6A\u6EE6\u5375\u4E71\u63A0\u7565\u62A1\u8F6E\u4F26\u4ED1\u6CA6\u7EB6\u8BBA\u841D\u87BA\u7F57\u903B\u9523\u7BA9\u9AA1\u88F8\u843D\u6D1B\u9A86\u7EDC\u5988\u9EBB\u739B\u7801\u8682\u9A6C\u9A82\u561B\u5417\u57CB\u4E70\u9EA6\u5356\u8FC8\u8109\u7792\u9992\u86EE\u6EE1\u8513\u66FC\u6162\u6F2B\uFFFD".split("");
      for (j = 0; j != D[194].length; ++j)
        if (D[194][j].charCodeAt(0) !== 65533) {
          e[D[194][j]] = 49664 + j;
          d[49664 + j] = D[194][j];
        }
      D[195] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8C29\u8292\u832B\u76F2\u6C13\u5FD9\u83BD\u732B\u8305\u951A\u6BDB\u77DB\u94C6\u536F\u8302\u5192\u5E3D\u8C8C\u8D38\u4E48\u73AB\u679A\u6885\u9176\u9709\u7164\u6CA1\u7709\u5A92\u9541\u6BCF\u7F8E\u6627\u5BD0\u59B9\u5A9A\u95E8\u95F7\u4EEC\u840C\u8499\u6AAC\u76DF\u9530\u731B\u68A6\u5B5F\u772F\u919A\u9761\u7CDC\u8FF7\u8C1C\u5F25\u7C73\u79D8\u89C5\u6CCC\u871C\u5BC6\u5E42\u68C9\u7720\u7EF5\u5195\u514D\u52C9\u5A29\u7F05\u9762\u82D7\u63CF\u7784\u85D0\u79D2\u6E3A\u5E99\u5999\u8511\u706D\u6C11\u62BF\u76BF\u654F\u60AF\u95FD\u660E\u879F\u9E23\u94ED\u540D\u547D\u8C2C\u6478\uFFFD".split("");
      for (j = 0; j != D[195].length; ++j)
        if (D[195][j].charCodeAt(0) !== 65533) {
          e[D[195][j]] = 49920 + j;
          d[49920 + j] = D[195][j];
        }
      D[196] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6479\u8611\u6A21\u819C\u78E8\u6469\u9B54\u62B9\u672B\u83AB\u58A8\u9ED8\u6CAB\u6F20\u5BDE\u964C\u8C0B\u725F\u67D0\u62C7\u7261\u4EA9\u59C6\u6BCD\u5893\u66AE\u5E55\u52DF\u6155\u6728\u76EE\u7766\u7267\u7A46\u62FF\u54EA\u5450\u94A0\u90A3\u5A1C\u7EB3\u6C16\u4E43\u5976\u8010\u5948\u5357\u7537\u96BE\u56CA\u6320\u8111\u607C\u95F9\u6DD6\u5462\u9981\u5185\u5AE9\u80FD\u59AE\u9713\u502A\u6CE5\u5C3C\u62DF\u4F60\u533F\u817B\u9006\u6EBA\u852B\u62C8\u5E74\u78BE\u64B5\u637B\u5FF5\u5A18\u917F\u9E1F\u5C3F\u634F\u8042\u5B7D\u556E\u954A\u954D\u6D85\u60A8\u67E0\u72DE\u51DD\u5B81\uFFFD".split("");
      for (j = 0; j != D[196].length; ++j)
        if (D[196][j].charCodeAt(0) !== 65533) {
          e[D[196][j]] = 50176 + j;
          d[50176 + j] = D[196][j];
        }
      D[197] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u62E7\u6CDE\u725B\u626D\u94AE\u7EBD\u8113\u6D53\u519C\u5F04\u5974\u52AA\u6012\u5973\u6696\u8650\u759F\u632A\u61E6\u7CEF\u8BFA\u54E6\u6B27\u9E25\u6BB4\u85D5\u5455\u5076\u6CA4\u556A\u8DB4\u722C\u5E15\u6015\u7436\u62CD\u6392\u724C\u5F98\u6E43\u6D3E\u6500\u6F58\u76D8\u78D0\u76FC\u7554\u5224\u53DB\u4E53\u5E9E\u65C1\u802A\u80D6\u629B\u5486\u5228\u70AE\u888D\u8DD1\u6CE1\u5478\u80DA\u57F9\u88F4\u8D54\u966A\u914D\u4F69\u6C9B\u55B7\u76C6\u7830\u62A8\u70F9\u6F8E\u5F6D\u84EC\u68DA\u787C\u7BF7\u81A8\u670B\u9E4F\u6367\u78B0\u576F\u7812\u9739\u6279\u62AB\u5288\u7435\u6BD7\uFFFD".split("");
      for (j = 0; j != D[197].length; ++j)
        if (D[197][j].charCodeAt(0) !== 65533) {
          e[D[197][j]] = 50432 + j;
          d[50432 + j] = D[197][j];
        }
      D[198] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5564\u813E\u75B2\u76AE\u5339\u75DE\u50FB\u5C41\u8B6C\u7BC7\u504F\u7247\u9A97\u98D8\u6F02\u74E2\u7968\u6487\u77A5\u62FC\u9891\u8D2B\u54C1\u8058\u4E52\u576A\u82F9\u840D\u5E73\u51ED\u74F6\u8BC4\u5C4F\u5761\u6CFC\u9887\u5A46\u7834\u9B44\u8FEB\u7C95\u5256\u6251\u94FA\u4EC6\u8386\u8461\u83E9\u84B2\u57D4\u6734\u5703\u666E\u6D66\u8C31\u66DD\u7011\u671F\u6B3A\u6816\u621A\u59BB\u4E03\u51C4\u6F06\u67D2\u6C8F\u5176\u68CB\u5947\u6B67\u7566\u5D0E\u8110\u9F50\u65D7\u7948\u7941\u9A91\u8D77\u5C82\u4E5E\u4F01\u542F\u5951\u780C\u5668\u6C14\u8FC4\u5F03\u6C7D\u6CE3\u8BAB\u6390\uFFFD".split("");
      for (j = 0; j != D[198].length; ++j)
        if (D[198][j].charCodeAt(0) !== 65533) {
          e[D[198][j]] = 50688 + j;
          d[50688 + j] = D[198][j];
        }
      D[199] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6070\u6D3D\u7275\u6266\u948E\u94C5\u5343\u8FC1\u7B7E\u4EDF\u8C26\u4E7E\u9ED4\u94B1\u94B3\u524D\u6F5C\u9063\u6D45\u8C34\u5811\u5D4C\u6B20\u6B49\u67AA\u545B\u8154\u7F8C\u5899\u8537\u5F3A\u62A2\u6A47\u9539\u6572\u6084\u6865\u77A7\u4E54\u4FA8\u5DE7\u9798\u64AC\u7FD8\u5CED\u4FCF\u7A8D\u5207\u8304\u4E14\u602F\u7A83\u94A6\u4FB5\u4EB2\u79E6\u7434\u52E4\u82B9\u64D2\u79BD\u5BDD\u6C81\u9752\u8F7B\u6C22\u503E\u537F\u6E05\u64CE\u6674\u6C30\u60C5\u9877\u8BF7\u5E86\u743C\u7A77\u79CB\u4E18\u90B1\u7403\u6C42\u56DA\u914B\u6CC5\u8D8B\u533A\u86C6\u66F2\u8EAF\u5C48\u9A71\u6E20\uFFFD".split("");
      for (j = 0; j != D[199].length; ++j)
        if (D[199][j].charCodeAt(0) !== 65533) {
          e[D[199][j]] = 50944 + j;
          d[50944 + j] = D[199][j];
        }
      D[200] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u53D6\u5A36\u9F8B\u8DA3\u53BB\u5708\u98A7\u6743\u919B\u6CC9\u5168\u75CA\u62F3\u72AC\u5238\u529D\u7F3A\u7094\u7638\u5374\u9E4A\u69B7\u786E\u96C0\u88D9\u7FA4\u7136\u71C3\u5189\u67D3\u74E4\u58E4\u6518\u56B7\u8BA9\u9976\u6270\u7ED5\u60F9\u70ED\u58EC\u4EC1\u4EBA\u5FCD\u97E7\u4EFB\u8BA4\u5203\u598A\u7EAB\u6254\u4ECD\u65E5\u620E\u8338\u84C9\u8363\u878D\u7194\u6EB6\u5BB9\u7ED2\u5197\u63C9\u67D4\u8089\u8339\u8815\u5112\u5B7A\u5982\u8FB1\u4E73\u6C5D\u5165\u8925\u8F6F\u962E\u854A\u745E\u9510\u95F0\u6DA6\u82E5\u5F31\u6492\u6D12\u8428\u816E\u9CC3\u585E\u8D5B\u4E09\u53C1\uFFFD".split("");
      for (j = 0; j != D[200].length; ++j)
        if (D[200][j].charCodeAt(0) !== 65533) {
          e[D[200][j]] = 51200 + j;
          d[51200 + j] = D[200][j];
        }
      D[201] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u4F1E\u6563\u6851\u55D3\u4E27\u6414\u9A9A\u626B\u5AC2\u745F\u8272\u6DA9\u68EE\u50E7\u838E\u7802\u6740\u5239\u6C99\u7EB1\u50BB\u5565\u715E\u7B5B\u6652\u73CA\u82EB\u6749\u5C71\u5220\u717D\u886B\u95EA\u9655\u64C5\u8D61\u81B3\u5584\u6C55\u6247\u7F2E\u5892\u4F24\u5546\u8D4F\u664C\u4E0A\u5C1A\u88F3\u68A2\u634E\u7A0D\u70E7\u828D\u52FA\u97F6\u5C11\u54E8\u90B5\u7ECD\u5962\u8D4A\u86C7\u820C\u820D\u8D66\u6444\u5C04\u6151\u6D89\u793E\u8BBE\u7837\u7533\u547B\u4F38\u8EAB\u6DF1\u5A20\u7EC5\u795E\u6C88\u5BA1\u5A76\u751A\u80BE\u614E\u6E17\u58F0\u751F\u7525\u7272\u5347\u7EF3\uFFFD".split("");
      for (j = 0; j != D[201].length; ++j)
        if (D[201][j].charCodeAt(0) !== 65533) {
          e[D[201][j]] = 51456 + j;
          d[51456 + j] = D[201][j];
        }
      D[202] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7701\u76DB\u5269\u80DC\u5723\u5E08\u5931\u72EE\u65BD\u6E7F\u8BD7\u5C38\u8671\u5341\u77F3\u62FE\u65F6\u4EC0\u98DF\u8680\u5B9E\u8BC6\u53F2\u77E2\u4F7F\u5C4E\u9A76\u59CB\u5F0F\u793A\u58EB\u4E16\u67FF\u4E8B\u62ED\u8A93\u901D\u52BF\u662F\u55DC\u566C\u9002\u4ED5\u4F8D\u91CA\u9970\u6C0F\u5E02\u6043\u5BA4\u89C6\u8BD5\u6536\u624B\u9996\u5B88\u5BFF\u6388\u552E\u53D7\u7626\u517D\u852C\u67A2\u68B3\u6B8A\u6292\u8F93\u53D4\u8212\u6DD1\u758F\u4E66\u8D4E\u5B70\u719F\u85AF\u6691\u66D9\u7F72\u8700\u9ECD\u9F20\u5C5E\u672F\u8FF0\u6811\u675F\u620D\u7AD6\u5885\u5EB6\u6570\u6F31\uFFFD".split("");
      for (j = 0; j != D[202].length; ++j)
        if (D[202][j].charCodeAt(0) !== 65533) {
          e[D[202][j]] = 51712 + j;
          d[51712 + j] = D[202][j];
        }
      D[203] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6055\u5237\u800D\u6454\u8870\u7529\u5E05\u6813\u62F4\u971C\u53CC\u723D\u8C01\u6C34\u7761\u7A0E\u542E\u77AC\u987A\u821C\u8BF4\u7855\u6714\u70C1\u65AF\u6495\u5636\u601D\u79C1\u53F8\u4E1D\u6B7B\u8086\u5BFA\u55E3\u56DB\u4F3A\u4F3C\u9972\u5DF3\u677E\u8038\u6002\u9882\u9001\u5B8B\u8BBC\u8BF5\u641C\u8258\u64DE\u55FD\u82CF\u9165\u4FD7\u7D20\u901F\u7C9F\u50F3\u5851\u6EAF\u5BBF\u8BC9\u8083\u9178\u849C\u7B97\u867D\u968B\u968F\u7EE5\u9AD3\u788E\u5C81\u7A57\u9042\u96A7\u795F\u5B59\u635F\u7B0B\u84D1\u68AD\u5506\u7F29\u7410\u7D22\u9501\u6240\u584C\u4ED6\u5B83\u5979\u5854\uFFFD".split("");
      for (j = 0; j != D[203].length; ++j)
        if (D[203][j].charCodeAt(0) !== 65533) {
          e[D[203][j]] = 51968 + j;
          d[51968 + j] = D[203][j];
        }
      D[204] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u736D\u631E\u8E4B\u8E0F\u80CE\u82D4\u62AC\u53F0\u6CF0\u915E\u592A\u6001\u6C70\u574D\u644A\u8D2A\u762B\u6EE9\u575B\u6A80\u75F0\u6F6D\u8C2D\u8C08\u5766\u6BEF\u8892\u78B3\u63A2\u53F9\u70AD\u6C64\u5858\u642A\u5802\u68E0\u819B\u5510\u7CD6\u5018\u8EBA\u6DCC\u8D9F\u70EB\u638F\u6D9B\u6ED4\u7EE6\u8404\u6843\u9003\u6DD8\u9676\u8BA8\u5957\u7279\u85E4\u817E\u75BC\u8A8A\u68AF\u5254\u8E22\u9511\u63D0\u9898\u8E44\u557C\u4F53\u66FF\u568F\u60D5\u6D95\u5243\u5C49\u5929\u6DFB\u586B\u7530\u751C\u606C\u8214\u8146\u6311\u6761\u8FE2\u773A\u8DF3\u8D34\u94C1\u5E16\u5385\u542C\u70C3\uFFFD".split("");
      for (j = 0; j != D[204].length; ++j)
        if (D[204][j].charCodeAt(0) !== 65533) {
          e[D[204][j]] = 52224 + j;
          d[52224 + j] = D[204][j];
        }
      D[205] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6C40\u5EF7\u505C\u4EAD\u5EAD\u633A\u8247\u901A\u6850\u916E\u77B3\u540C\u94DC\u5F64\u7AE5\u6876\u6345\u7B52\u7EDF\u75DB\u5077\u6295\u5934\u900F\u51F8\u79C3\u7A81\u56FE\u5F92\u9014\u6D82\u5C60\u571F\u5410\u5154\u6E4D\u56E2\u63A8\u9893\u817F\u8715\u892A\u9000\u541E\u5C6F\u81C0\u62D6\u6258\u8131\u9E35\u9640\u9A6E\u9A7C\u692D\u59A5\u62D3\u553E\u6316\u54C7\u86D9\u6D3C\u5A03\u74E6\u889C\u6B6A\u5916\u8C4C\u5F2F\u6E7E\u73A9\u987D\u4E38\u70F7\u5B8C\u7897\u633D\u665A\u7696\u60CB\u5B9B\u5A49\u4E07\u8155\u6C6A\u738B\u4EA1\u6789\u7F51\u5F80\u65FA\u671B\u5FD8\u5984\u5A01\uFFFD".split("");
      for (j = 0; j != D[205].length; ++j)
        if (D[205][j].charCodeAt(0) !== 65533) {
          e[D[205][j]] = 52480 + j;
          d[52480 + j] = D[205][j];
        }
      D[206] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5DCD\u5FAE\u5371\u97E6\u8FDD\u6845\u56F4\u552F\u60DF\u4E3A\u6F4D\u7EF4\u82C7\u840E\u59D4\u4F1F\u4F2A\u5C3E\u7EAC\u672A\u851A\u5473\u754F\u80C3\u5582\u9B4F\u4F4D\u6E2D\u8C13\u5C09\u6170\u536B\u761F\u6E29\u868A\u6587\u95FB\u7EB9\u543B\u7A33\u7D0A\u95EE\u55E1\u7FC1\u74EE\u631D\u8717\u6DA1\u7A9D\u6211\u65A1\u5367\u63E1\u6C83\u5DEB\u545C\u94A8\u4E4C\u6C61\u8BEC\u5C4B\u65E0\u829C\u68A7\u543E\u5434\u6BCB\u6B66\u4E94\u6342\u5348\u821E\u4F0D\u4FAE\u575E\u620A\u96FE\u6664\u7269\u52FF\u52A1\u609F\u8BEF\u6614\u7199\u6790\u897F\u7852\u77FD\u6670\u563B\u5438\u9521\u727A\uFFFD".split("");
      for (j = 0; j != D[206].length; ++j)
        if (D[206][j].charCodeAt(0) !== 65533) {
          e[D[206][j]] = 52736 + j;
          d[52736 + j] = D[206][j];
        }
      D[207] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7A00\u606F\u5E0C\u6089\u819D\u5915\u60DC\u7184\u70EF\u6EAA\u6C50\u7280\u6A84\u88AD\u5E2D\u4E60\u5AB3\u559C\u94E3\u6D17\u7CFB\u9699\u620F\u7EC6\u778E\u867E\u5323\u971E\u8F96\u6687\u5CE1\u4FA0\u72ED\u4E0B\u53A6\u590F\u5413\u6380\u9528\u5148\u4ED9\u9C9C\u7EA4\u54B8\u8D24\u8854\u8237\u95F2\u6D8E\u5F26\u5ACC\u663E\u9669\u73B0\u732E\u53BF\u817A\u9985\u7FA1\u5BAA\u9677\u9650\u7EBF\u76F8\u53A2\u9576\u9999\u7BB1\u8944\u6E58\u4E61\u7FD4\u7965\u8BE6\u60F3\u54CD\u4EAB\u9879\u5DF7\u6A61\u50CF\u5411\u8C61\u8427\u785D\u9704\u524A\u54EE\u56A3\u9500\u6D88\u5BB5\u6DC6\u6653\uFFFD".split("");
      for (j = 0; j != D[207].length; ++j)
        if (D[207][j].charCodeAt(0) !== 65533) {
          e[D[207][j]] = 52992 + j;
          d[52992 + j] = D[207][j];
        }
      D[208] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5C0F\u5B5D\u6821\u8096\u5578\u7B11\u6548\u6954\u4E9B\u6B47\u874E\u978B\u534F\u631F\u643A\u90AA\u659C\u80C1\u8C10\u5199\u68B0\u5378\u87F9\u61C8\u6CC4\u6CFB\u8C22\u5C51\u85AA\u82AF\u950C\u6B23\u8F9B\u65B0\u5FFB\u5FC3\u4FE1\u8845\u661F\u8165\u7329\u60FA\u5174\u5211\u578B\u5F62\u90A2\u884C\u9192\u5E78\u674F\u6027\u59D3\u5144\u51F6\u80F8\u5308\u6C79\u96C4\u718A\u4F11\u4FEE\u7F9E\u673D\u55C5\u9508\u79C0\u8896\u7EE3\u589F\u620C\u9700\u865A\u5618\u987B\u5F90\u8BB8\u84C4\u9157\u53D9\u65ED\u5E8F\u755C\u6064\u7D6E\u5A7F\u7EEA\u7EED\u8F69\u55A7\u5BA3\u60AC\u65CB\u7384\uFFFD".split("");
      for (j = 0; j != D[208].length; ++j)
        if (D[208][j].charCodeAt(0) !== 65533) {
          e[D[208][j]] = 53248 + j;
          d[53248 + j] = D[208][j];
        }
      D[209] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9009\u7663\u7729\u7EDA\u9774\u859B\u5B66\u7A74\u96EA\u8840\u52CB\u718F\u5FAA\u65EC\u8BE2\u5BFB\u9A6F\u5DE1\u6B89\u6C5B\u8BAD\u8BAF\u900A\u8FC5\u538B\u62BC\u9E26\u9E2D\u5440\u4E2B\u82BD\u7259\u869C\u5D16\u8859\u6DAF\u96C5\u54D1\u4E9A\u8BB6\u7109\u54BD\u9609\u70DF\u6DF9\u76D0\u4E25\u7814\u8712\u5CA9\u5EF6\u8A00\u989C\u960E\u708E\u6CBF\u5944\u63A9\u773C\u884D\u6F14\u8273\u5830\u71D5\u538C\u781A\u96C1\u5501\u5F66\u7130\u5BB4\u8C1A\u9A8C\u6B83\u592E\u9E2F\u79E7\u6768\u626C\u4F6F\u75A1\u7F8A\u6D0B\u9633\u6C27\u4EF0\u75D2\u517B\u6837\u6F3E\u9080\u8170\u5996\u7476\uFFFD".split("");
      for (j = 0; j != D[209].length; ++j)
        if (D[209][j].charCodeAt(0) !== 65533) {
          e[D[209][j]] = 53504 + j;
          d[53504 + j] = D[209][j];
        }
      D[210] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6447\u5C27\u9065\u7A91\u8C23\u59DA\u54AC\u8200\u836F\u8981\u8000\u6930\u564E\u8036\u7237\u91CE\u51B6\u4E5F\u9875\u6396\u4E1A\u53F6\u66F3\u814B\u591C\u6DB2\u4E00\u58F9\u533B\u63D6\u94F1\u4F9D\u4F0A\u8863\u9890\u5937\u9057\u79FB\u4EEA\u80F0\u7591\u6C82\u5B9C\u59E8\u5F5D\u6905\u8681\u501A\u5DF2\u4E59\u77E3\u4EE5\u827A\u6291\u6613\u9091\u5C79\u4EBF\u5F79\u81C6\u9038\u8084\u75AB\u4EA6\u88D4\u610F\u6BC5\u5FC6\u4E49\u76CA\u6EA2\u8BE3\u8BAE\u8C0A\u8BD1\u5F02\u7FFC\u7FCC\u7ECE\u8335\u836B\u56E0\u6BB7\u97F3\u9634\u59FB\u541F\u94F6\u6DEB\u5BC5\u996E\u5C39\u5F15\u9690\uFFFD".split("");
      for (j = 0; j != D[210].length; ++j)
        if (D[210][j].charCodeAt(0) !== 65533) {
          e[D[210][j]] = 53760 + j;
          d[53760 + j] = D[210][j];
        }
      D[211] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5370\u82F1\u6A31\u5A74\u9E70\u5E94\u7F28\u83B9\u8424\u8425\u8367\u8747\u8FCE\u8D62\u76C8\u5F71\u9896\u786C\u6620\u54DF\u62E5\u4F63\u81C3\u75C8\u5EB8\u96CD\u8E0A\u86F9\u548F\u6CF3\u6D8C\u6C38\u607F\u52C7\u7528\u5E7D\u4F18\u60A0\u5FE7\u5C24\u7531\u90AE\u94C0\u72B9\u6CB9\u6E38\u9149\u6709\u53CB\u53F3\u4F51\u91C9\u8BF1\u53C8\u5E7C\u8FC2\u6DE4\u4E8E\u76C2\u6986\u865E\u611A\u8206\u4F59\u4FDE\u903E\u9C7C\u6109\u6E1D\u6E14\u9685\u4E88\u5A31\u96E8\u4E0E\u5C7F\u79B9\u5B87\u8BED\u7FBD\u7389\u57DF\u828B\u90C1\u5401\u9047\u55BB\u5CEA\u5FA1\u6108\u6B32\u72F1\u80B2\u8A89\uFFFD".split("");
      for (j = 0; j != D[211].length; ++j)
        if (D[211][j].charCodeAt(0) !== 65533) {
          e[D[211][j]] = 54016 + j;
          d[54016 + j] = D[211][j];
        }
      D[212] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6D74\u5BD3\u88D5\u9884\u8C6B\u9A6D\u9E33\u6E0A\u51A4\u5143\u57A3\u8881\u539F\u63F4\u8F95\u56ED\u5458\u5706\u733F\u6E90\u7F18\u8FDC\u82D1\u613F\u6028\u9662\u66F0\u7EA6\u8D8A\u8DC3\u94A5\u5CB3\u7CA4\u6708\u60A6\u9605\u8018\u4E91\u90E7\u5300\u9668\u5141\u8FD0\u8574\u915D\u6655\u97F5\u5B55\u531D\u7838\u6742\u683D\u54C9\u707E\u5BB0\u8F7D\u518D\u5728\u54B1\u6512\u6682\u8D5E\u8D43\u810F\u846C\u906D\u7CDF\u51FF\u85FB\u67A3\u65E9\u6FA1\u86A4\u8E81\u566A\u9020\u7682\u7076\u71E5\u8D23\u62E9\u5219\u6CFD\u8D3C\u600E\u589E\u618E\u66FE\u8D60\u624E\u55B3\u6E23\u672D\u8F67\uFFFD".split("");
      for (j = 0; j != D[212].length; ++j)
        if (D[212][j].charCodeAt(0) !== 65533) {
          e[D[212][j]] = 54272 + j;
          d[54272 + j] = D[212][j];
        }
      D[213] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u94E1\u95F8\u7728\u6805\u69A8\u548B\u4E4D\u70B8\u8BC8\u6458\u658B\u5B85\u7A84\u503A\u5BE8\u77BB\u6BE1\u8A79\u7C98\u6CBE\u76CF\u65A9\u8F97\u5D2D\u5C55\u8638\u6808\u5360\u6218\u7AD9\u6E5B\u7EFD\u6A1F\u7AE0\u5F70\u6F33\u5F20\u638C\u6DA8\u6756\u4E08\u5E10\u8D26\u4ED7\u80C0\u7634\u969C\u62DB\u662D\u627E\u6CBC\u8D75\u7167\u7F69\u5146\u8087\u53EC\u906E\u6298\u54F2\u86F0\u8F99\u8005\u9517\u8517\u8FD9\u6D59\u73CD\u659F\u771F\u7504\u7827\u81FB\u8D1E\u9488\u4FA6\u6795\u75B9\u8BCA\u9707\u632F\u9547\u9635\u84B8\u6323\u7741\u5F81\u72F0\u4E89\u6014\u6574\u62EF\u6B63\u653F\uFFFD".split("");
      for (j = 0; j != D[213].length; ++j)
        if (D[213][j].charCodeAt(0) !== 65533) {
          e[D[213][j]] = 54528 + j;
          d[54528 + j] = D[213][j];
        }
      D[214] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5E27\u75C7\u90D1\u8BC1\u829D\u679D\u652F\u5431\u8718\u77E5\u80A2\u8102\u6C41\u4E4B\u7EC7\u804C\u76F4\u690D\u6B96\u6267\u503C\u4F84\u5740\u6307\u6B62\u8DBE\u53EA\u65E8\u7EB8\u5FD7\u631A\u63B7\u81F3\u81F4\u7F6E\u5E1C\u5CD9\u5236\u667A\u79E9\u7A1A\u8D28\u7099\u75D4\u6EDE\u6CBB\u7A92\u4E2D\u76C5\u5FE0\u949F\u8877\u7EC8\u79CD\u80BF\u91CD\u4EF2\u4F17\u821F\u5468\u5DDE\u6D32\u8BCC\u7CA5\u8F74\u8098\u5E1A\u5492\u76B1\u5B99\u663C\u9AA4\u73E0\u682A\u86DB\u6731\u732A\u8BF8\u8BDB\u9010\u7AF9\u70DB\u716E\u62C4\u77A9\u5631\u4E3B\u8457\u67F1\u52A9\u86C0\u8D2E\u94F8\u7B51\uFFFD".split("");
      for (j = 0; j != D[214].length; ++j)
        if (D[214][j].charCodeAt(0) !== 65533) {
          e[D[214][j]] = 54784 + j;
          d[54784 + j] = D[214][j];
        }
      D[215] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u4F4F\u6CE8\u795D\u9A7B\u6293\u722A\u62FD\u4E13\u7816\u8F6C\u64B0\u8D5A\u7BC6\u6869\u5E84\u88C5\u5986\u649E\u58EE\u72B6\u690E\u9525\u8FFD\u8D58\u5760\u7F00\u8C06\u51C6\u6349\u62D9\u5353\u684C\u7422\u8301\u914C\u5544\u7740\u707C\u6D4A\u5179\u54A8\u8D44\u59FF\u6ECB\u6DC4\u5B5C\u7D2B\u4ED4\u7C7D\u6ED3\u5B50\u81EA\u6E0D\u5B57\u9B03\u68D5\u8E2A\u5B97\u7EFC\u603B\u7EB5\u90B9\u8D70\u594F\u63CD\u79DF\u8DB3\u5352\u65CF\u7956\u8BC5\u963B\u7EC4\u94BB\u7E82\u5634\u9189\u6700\u7F6A\u5C0A\u9075\u6628\u5DE6\u4F50\u67DE\u505A\u4F5C\u5750\u5EA7\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[215].length; ++j)
        if (D[215][j].charCodeAt(0) !== 65533) {
          e[D[215][j]] = 55040 + j;
          d[55040 + j] = D[215][j];
        }
      D[216] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u4E8D\u4E0C\u5140\u4E10\u5EFF\u5345\u4E15\u4E98\u4E1E\u9B32\u5B6C\u5669\u4E28\u79BA\u4E3F\u5315\u4E47\u592D\u723B\u536E\u6C10\u56DF\u80E4\u9997\u6BD3\u777E\u9F17\u4E36\u4E9F\u9F10\u4E5C\u4E69\u4E93\u8288\u5B5B\u556C\u560F\u4EC4\u538D\u539D\u53A3\u53A5\u53AE\u9765\u8D5D\u531A\u53F5\u5326\u532E\u533E\u8D5C\u5366\u5363\u5202\u5208\u520E\u522D\u5233\u523F\u5240\u524C\u525E\u5261\u525C\u84AF\u527D\u5282\u5281\u5290\u5293\u5182\u7F54\u4EBB\u4EC3\u4EC9\u4EC2\u4EE8\u4EE1\u4EEB\u4EDE\u4F1B\u4EF3\u4F22\u4F64\u4EF5\u4F25\u4F27\u4F09\u4F2B\u4F5E\u4F67\u6538\u4F5A\u4F5D\uFFFD".split("");
      for (j = 0; j != D[216].length; ++j)
        if (D[216][j].charCodeAt(0) !== 65533) {
          e[D[216][j]] = 55296 + j;
          d[55296 + j] = D[216][j];
        }
      D[217] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u4F5F\u4F57\u4F32\u4F3D\u4F76\u4F74\u4F91\u4F89\u4F83\u4F8F\u4F7E\u4F7B\u4FAA\u4F7C\u4FAC\u4F94\u4FE6\u4FE8\u4FEA\u4FC5\u4FDA\u4FE3\u4FDC\u4FD1\u4FDF\u4FF8\u5029\u504C\u4FF3\u502C\u500F\u502E\u502D\u4FFE\u501C\u500C\u5025\u5028\u507E\u5043\u5055\u5048\u504E\u506C\u507B\u50A5\u50A7\u50A9\u50BA\u50D6\u5106\u50ED\u50EC\u50E6\u50EE\u5107\u510B\u4EDD\u6C3D\u4F58\u4F65\u4FCE\u9FA0\u6C46\u7C74\u516E\u5DFD\u9EC9\u9998\u5181\u5914\u52F9\u530D\u8A07\u5310\u51EB\u5919\u5155\u4EA0\u5156\u4EB3\u886E\u88A4\u4EB5\u8114\u88D2\u7980\u5B34\u8803\u7FB8\u51AB\u51B1\u51BD\u51BC\uFFFD".split("");
      for (j = 0; j != D[217].length; ++j)
        if (D[217][j].charCodeAt(0) !== 65533) {
          e[D[217][j]] = 55552 + j;
          d[55552 + j] = D[217][j];
        }
      D[218] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u51C7\u5196\u51A2\u51A5\u8BA0\u8BA6\u8BA7\u8BAA\u8BB4\u8BB5\u8BB7\u8BC2\u8BC3\u8BCB\u8BCF\u8BCE\u8BD2\u8BD3\u8BD4\u8BD6\u8BD8\u8BD9\u8BDC\u8BDF\u8BE0\u8BE4\u8BE8\u8BE9\u8BEE\u8BF0\u8BF3\u8BF6\u8BF9\u8BFC\u8BFF\u8C00\u8C02\u8C04\u8C07\u8C0C\u8C0F\u8C11\u8C12\u8C14\u8C15\u8C16\u8C19\u8C1B\u8C18\u8C1D\u8C1F\u8C20\u8C21\u8C25\u8C27\u8C2A\u8C2B\u8C2E\u8C2F\u8C32\u8C33\u8C35\u8C36\u5369\u537A\u961D\u9622\u9621\u9631\u962A\u963D\u963C\u9642\u9649\u9654\u965F\u9667\u966C\u9672\u9674\u9688\u968D\u9697\u96B0\u9097\u909B\u909D\u9099\u90AC\u90A1\u90B4\u90B3\u90B6\u90BA\uFFFD".split("");
      for (j = 0; j != D[218].length; ++j)
        if (D[218][j].charCodeAt(0) !== 65533) {
          e[D[218][j]] = 55808 + j;
          d[55808 + j] = D[218][j];
        }
      D[219] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u90B8\u90B0\u90CF\u90C5\u90BE\u90D0\u90C4\u90C7\u90D3\u90E6\u90E2\u90DC\u90D7\u90DB\u90EB\u90EF\u90FE\u9104\u9122\u911E\u9123\u9131\u912F\u9139\u9143\u9146\u520D\u5942\u52A2\u52AC\u52AD\u52BE\u54FF\u52D0\u52D6\u52F0\u53DF\u71EE\u77CD\u5EF4\u51F5\u51FC\u9B2F\u53B6\u5F01\u755A\u5DEF\u574C\u57A9\u57A1\u587E\u58BC\u58C5\u58D1\u5729\u572C\u572A\u5733\u5739\u572E\u572F\u575C\u573B\u5742\u5769\u5785\u576B\u5786\u577C\u577B\u5768\u576D\u5776\u5773\u57AD\u57A4\u578C\u57B2\u57CF\u57A7\u57B4\u5793\u57A0\u57D5\u57D8\u57DA\u57D9\u57D2\u57B8\u57F4\u57EF\u57F8\u57E4\u57DD\uFFFD".split("");
      for (j = 0; j != D[219].length; ++j)
        if (D[219][j].charCodeAt(0) !== 65533) {
          e[D[219][j]] = 56064 + j;
          d[56064 + j] = D[219][j];
        }
      D[220] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u580B\u580D\u57FD\u57ED\u5800\u581E\u5819\u5844\u5820\u5865\u586C\u5881\u5889\u589A\u5880\u99A8\u9F19\u61FF\u8279\u827D\u827F\u828F\u828A\u82A8\u8284\u828E\u8291\u8297\u8299\u82AB\u82B8\u82BE\u82B0\u82C8\u82CA\u82E3\u8298\u82B7\u82AE\u82CB\u82CC\u82C1\u82A9\u82B4\u82A1\u82AA\u829F\u82C4\u82CE\u82A4\u82E1\u8309\u82F7\u82E4\u830F\u8307\u82DC\u82F4\u82D2\u82D8\u830C\u82FB\u82D3\u8311\u831A\u8306\u8314\u8315\u82E0\u82D5\u831C\u8351\u835B\u835C\u8308\u8392\u833C\u8334\u8331\u839B\u835E\u832F\u834F\u8347\u8343\u835F\u8340\u8317\u8360\u832D\u833A\u8333\u8366\u8365\uFFFD".split("");
      for (j = 0; j != D[220].length; ++j)
        if (D[220][j].charCodeAt(0) !== 65533) {
          e[D[220][j]] = 56320 + j;
          d[56320 + j] = D[220][j];
        }
      D[221] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8368\u831B\u8369\u836C\u836A\u836D\u836E\u83B0\u8378\u83B3\u83B4\u83A0\u83AA\u8393\u839C\u8385\u837C\u83B6\u83A9\u837D\u83B8\u837B\u8398\u839E\u83A8\u83BA\u83BC\u83C1\u8401\u83E5\u83D8\u5807\u8418\u840B\u83DD\u83FD\u83D6\u841C\u8438\u8411\u8406\u83D4\u83DF\u840F\u8403\u83F8\u83F9\u83EA\u83C5\u83C0\u8426\u83F0\u83E1\u845C\u8451\u845A\u8459\u8473\u8487\u8488\u847A\u8489\u8478\u843C\u8446\u8469\u8476\u848C\u848E\u8431\u846D\u84C1\u84CD\u84D0\u84E6\u84BD\u84D3\u84CA\u84BF\u84BA\u84E0\u84A1\u84B9\u84B4\u8497\u84E5\u84E3\u850C\u750D\u8538\u84F0\u8539\u851F\u853A\uFFFD".split("");
      for (j = 0; j != D[221].length; ++j)
        if (D[221][j].charCodeAt(0) !== 65533) {
          e[D[221][j]] = 56576 + j;
          d[56576 + j] = D[221][j];
        }
      D[222] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8556\u853B\u84FF\u84FC\u8559\u8548\u8568\u8564\u855E\u857A\u77A2\u8543\u8572\u857B\u85A4\u85A8\u8587\u858F\u8579\u85AE\u859C\u8585\u85B9\u85B7\u85B0\u85D3\u85C1\u85DC\u85FF\u8627\u8605\u8629\u8616\u863C\u5EFE\u5F08\u593C\u5941\u8037\u5955\u595A\u5958\u530F\u5C22\u5C25\u5C2C\u5C34\u624C\u626A\u629F\u62BB\u62CA\u62DA\u62D7\u62EE\u6322\u62F6\u6339\u634B\u6343\u63AD\u63F6\u6371\u637A\u638E\u63B4\u636D\u63AC\u638A\u6369\u63AE\u63BC\u63F2\u63F8\u63E0\u63FF\u63C4\u63DE\u63CE\u6452\u63C6\u63BE\u6445\u6441\u640B\u641B\u6420\u640C\u6426\u6421\u645E\u6484\u646D\u6496\uFFFD".split("");
      for (j = 0; j != D[222].length; ++j)
        if (D[222][j].charCodeAt(0) !== 65533) {
          e[D[222][j]] = 56832 + j;
          d[56832 + j] = D[222][j];
        }
      D[223] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u647A\u64B7\u64B8\u6499\u64BA\u64C0\u64D0\u64D7\u64E4\u64E2\u6509\u6525\u652E\u5F0B\u5FD2\u7519\u5F11\u535F\u53F1\u53FD\u53E9\u53E8\u53FB\u5412\u5416\u5406\u544B\u5452\u5453\u5454\u5456\u5443\u5421\u5457\u5459\u5423\u5432\u5482\u5494\u5477\u5471\u5464\u549A\u549B\u5484\u5476\u5466\u549D\u54D0\u54AD\u54C2\u54B4\u54D2\u54A7\u54A6\u54D3\u54D4\u5472\u54A3\u54D5\u54BB\u54BF\u54CC\u54D9\u54DA\u54DC\u54A9\u54AA\u54A4\u54DD\u54CF\u54DE\u551B\u54E7\u5520\u54FD\u5514\u54F3\u5522\u5523\u550F\u5511\u5527\u552A\u5567\u558F\u55B5\u5549\u556D\u5541\u5555\u553F\u5550\u553C\uFFFD".split("");
      for (j = 0; j != D[223].length; ++j)
        if (D[223][j].charCodeAt(0) !== 65533) {
          e[D[223][j]] = 57088 + j;
          d[57088 + j] = D[223][j];
        }
      D[224] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5537\u5556\u5575\u5576\u5577\u5533\u5530\u555C\u558B\u55D2\u5583\u55B1\u55B9\u5588\u5581\u559F\u557E\u55D6\u5591\u557B\u55DF\u55BD\u55BE\u5594\u5599\u55EA\u55F7\u55C9\u561F\u55D1\u55EB\u55EC\u55D4\u55E6\u55DD\u55C4\u55EF\u55E5\u55F2\u55F3\u55CC\u55CD\u55E8\u55F5\u55E4\u8F94\u561E\u5608\u560C\u5601\u5624\u5623\u55FE\u5600\u5627\u562D\u5658\u5639\u5657\u562C\u564D\u5662\u5659\u565C\u564C\u5654\u5686\u5664\u5671\u566B\u567B\u567C\u5685\u5693\u56AF\u56D4\u56D7\u56DD\u56E1\u56F5\u56EB\u56F9\u56FF\u5704\u570A\u5709\u571C\u5E0F\u5E19\u5E14\u5E11\u5E31\u5E3B\u5E3C\uFFFD".split("");
      for (j = 0; j != D[224].length; ++j)
        if (D[224][j].charCodeAt(0) !== 65533) {
          e[D[224][j]] = 57344 + j;
          d[57344 + j] = D[224][j];
        }
      D[225] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5E37\u5E44\u5E54\u5E5B\u5E5E\u5E61\u5C8C\u5C7A\u5C8D\u5C90\u5C96\u5C88\u5C98\u5C99\u5C91\u5C9A\u5C9C\u5CB5\u5CA2\u5CBD\u5CAC\u5CAB\u5CB1\u5CA3\u5CC1\u5CB7\u5CC4\u5CD2\u5CE4\u5CCB\u5CE5\u5D02\u5D03\u5D27\u5D26\u5D2E\u5D24\u5D1E\u5D06\u5D1B\u5D58\u5D3E\u5D34\u5D3D\u5D6C\u5D5B\u5D6F\u5D5D\u5D6B\u5D4B\u5D4A\u5D69\u5D74\u5D82\u5D99\u5D9D\u8C73\u5DB7\u5DC5\u5F73\u5F77\u5F82\u5F87\u5F89\u5F8C\u5F95\u5F99\u5F9C\u5FA8\u5FAD\u5FB5\u5FBC\u8862\u5F61\u72AD\u72B0\u72B4\u72B7\u72B8\u72C3\u72C1\u72CE\u72CD\u72D2\u72E8\u72EF\u72E9\u72F2\u72F4\u72F7\u7301\u72F3\u7303\u72FA\uFFFD".split("");
      for (j = 0; j != D[225].length; ++j)
        if (D[225][j].charCodeAt(0) !== 65533) {
          e[D[225][j]] = 57600 + j;
          d[57600 + j] = D[225][j];
        }
      D[226] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u72FB\u7317\u7313\u7321\u730A\u731E\u731D\u7315\u7322\u7339\u7325\u732C\u7338\u7331\u7350\u734D\u7357\u7360\u736C\u736F\u737E\u821B\u5925\u98E7\u5924\u5902\u9963\u9967\u9968\u9969\u996A\u996B\u996C\u9974\u9977\u997D\u9980\u9984\u9987\u998A\u998D\u9990\u9991\u9993\u9994\u9995\u5E80\u5E91\u5E8B\u5E96\u5EA5\u5EA0\u5EB9\u5EB5\u5EBE\u5EB3\u8D53\u5ED2\u5ED1\u5EDB\u5EE8\u5EEA\u81BA\u5FC4\u5FC9\u5FD6\u5FCF\u6003\u5FEE\u6004\u5FE1\u5FE4\u5FFE\u6005\u6006\u5FEA\u5FED\u5FF8\u6019\u6035\u6026\u601B\u600F\u600D\u6029\u602B\u600A\u603F\u6021\u6078\u6079\u607B\u607A\u6042\uFFFD".split("");
      for (j = 0; j != D[226].length; ++j)
        if (D[226][j].charCodeAt(0) !== 65533) {
          e[D[226][j]] = 57856 + j;
          d[57856 + j] = D[226][j];
        }
      D[227] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u606A\u607D\u6096\u609A\u60AD\u609D\u6083\u6092\u608C\u609B\u60EC\u60BB\u60B1\u60DD\u60D8\u60C6\u60DA\u60B4\u6120\u6126\u6115\u6123\u60F4\u6100\u610E\u612B\u614A\u6175\u61AC\u6194\u61A7\u61B7\u61D4\u61F5\u5FDD\u96B3\u95E9\u95EB\u95F1\u95F3\u95F5\u95F6\u95FC\u95FE\u9603\u9604\u9606\u9608\u960A\u960B\u960C\u960D\u960F\u9612\u9615\u9616\u9617\u9619\u961A\u4E2C\u723F\u6215\u6C35\u6C54\u6C5C\u6C4A\u6CA3\u6C85\u6C90\u6C94\u6C8C\u6C68\u6C69\u6C74\u6C76\u6C86\u6CA9\u6CD0\u6CD4\u6CAD\u6CF7\u6CF8\u6CF1\u6CD7\u6CB2\u6CE0\u6CD6\u6CFA\u6CEB\u6CEE\u6CB1\u6CD3\u6CEF\u6CFE\uFFFD".split("");
      for (j = 0; j != D[227].length; ++j)
        if (D[227][j].charCodeAt(0) !== 65533) {
          e[D[227][j]] = 58112 + j;
          d[58112 + j] = D[227][j];
        }
      D[228] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6D39\u6D27\u6D0C\u6D43\u6D48\u6D07\u6D04\u6D19\u6D0E\u6D2B\u6D4D\u6D2E\u6D35\u6D1A\u6D4F\u6D52\u6D54\u6D33\u6D91\u6D6F\u6D9E\u6DA0\u6D5E\u6D93\u6D94\u6D5C\u6D60\u6D7C\u6D63\u6E1A\u6DC7\u6DC5\u6DDE\u6E0E\u6DBF\u6DE0\u6E11\u6DE6\u6DDD\u6DD9\u6E16\u6DAB\u6E0C\u6DAE\u6E2B\u6E6E\u6E4E\u6E6B\u6EB2\u6E5F\u6E86\u6E53\u6E54\u6E32\u6E25\u6E44\u6EDF\u6EB1\u6E98\u6EE0\u6F2D\u6EE2\u6EA5\u6EA7\u6EBD\u6EBB\u6EB7\u6ED7\u6EB4\u6ECF\u6E8F\u6EC2\u6E9F\u6F62\u6F46\u6F47\u6F24\u6F15\u6EF9\u6F2F\u6F36\u6F4B\u6F74\u6F2A\u6F09\u6F29\u6F89\u6F8D\u6F8C\u6F78\u6F72\u6F7C\u6F7A\u6FD1\uFFFD".split("");
      for (j = 0; j != D[228].length; ++j)
        if (D[228][j].charCodeAt(0) !== 65533) {
          e[D[228][j]] = 58368 + j;
          d[58368 + j] = D[228][j];
        }
      D[229] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6FC9\u6FA7\u6FB9\u6FB6\u6FC2\u6FE1\u6FEE\u6FDE\u6FE0\u6FEF\u701A\u7023\u701B\u7039\u7035\u704F\u705E\u5B80\u5B84\u5B95\u5B93\u5BA5\u5BB8\u752F\u9A9E\u6434\u5BE4\u5BEE\u8930\u5BF0\u8E47\u8B07\u8FB6\u8FD3\u8FD5\u8FE5\u8FEE\u8FE4\u8FE9\u8FE6\u8FF3\u8FE8\u9005\u9004\u900B\u9026\u9011\u900D\u9016\u9021\u9035\u9036\u902D\u902F\u9044\u9051\u9052\u9050\u9068\u9058\u9062\u905B\u66B9\u9074\u907D\u9082\u9088\u9083\u908B\u5F50\u5F57\u5F56\u5F58\u5C3B\u54AB\u5C50\u5C59\u5B71\u5C63\u5C66\u7FBC\u5F2A\u5F29\u5F2D\u8274\u5F3C\u9B3B\u5C6E\u5981\u5983\u598D\u59A9\u59AA\u59A3\uFFFD".split("");
      for (j = 0; j != D[229].length; ++j)
        if (D[229][j].charCodeAt(0) !== 65533) {
          e[D[229][j]] = 58624 + j;
          d[58624 + j] = D[229][j];
        }
      D[230] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5997\u59CA\u59AB\u599E\u59A4\u59D2\u59B2\u59AF\u59D7\u59BE\u5A05\u5A06\u59DD\u5A08\u59E3\u59D8\u59F9\u5A0C\u5A09\u5A32\u5A34\u5A11\u5A23\u5A13\u5A40\u5A67\u5A4A\u5A55\u5A3C\u5A62\u5A75\u80EC\u5AAA\u5A9B\u5A77\u5A7A\u5ABE\u5AEB\u5AB2\u5AD2\u5AD4\u5AB8\u5AE0\u5AE3\u5AF1\u5AD6\u5AE6\u5AD8\u5ADC\u5B09\u5B17\u5B16\u5B32\u5B37\u5B40\u5C15\u5C1C\u5B5A\u5B65\u5B73\u5B51\u5B53\u5B62\u9A75\u9A77\u9A78\u9A7A\u9A7F\u9A7D\u9A80\u9A81\u9A85\u9A88\u9A8A\u9A90\u9A92\u9A93\u9A96\u9A98\u9A9B\u9A9C\u9A9D\u9A9F\u9AA0\u9AA2\u9AA3\u9AA5\u9AA7\u7E9F\u7EA1\u7EA3\u7EA5\u7EA8\u7EA9\uFFFD".split("");
      for (j = 0; j != D[230].length; ++j)
        if (D[230][j].charCodeAt(0) !== 65533) {
          e[D[230][j]] = 58880 + j;
          d[58880 + j] = D[230][j];
        }
      D[231] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7EAD\u7EB0\u7EBE\u7EC0\u7EC1\u7EC2\u7EC9\u7ECB\u7ECC\u7ED0\u7ED4\u7ED7\u7EDB\u7EE0\u7EE1\u7EE8\u7EEB\u7EEE\u7EEF\u7EF1\u7EF2\u7F0D\u7EF6\u7EFA\u7EFB\u7EFE\u7F01\u7F02\u7F03\u7F07\u7F08\u7F0B\u7F0C\u7F0F\u7F11\u7F12\u7F17\u7F19\u7F1C\u7F1B\u7F1F\u7F21\u7F22\u7F23\u7F24\u7F25\u7F26\u7F27\u7F2A\u7F2B\u7F2C\u7F2D\u7F2F\u7F30\u7F31\u7F32\u7F33\u7F35\u5E7A\u757F\u5DDB\u753E\u9095\u738E\u7391\u73AE\u73A2\u739F\u73CF\u73C2\u73D1\u73B7\u73B3\u73C0\u73C9\u73C8\u73E5\u73D9\u987C\u740A\u73E9\u73E7\u73DE\u73BA\u73F2\u740F\u742A\u745B\u7426\u7425\u7428\u7430\u742E\u742C\uFFFD".split("");
      for (j = 0; j != D[231].length; ++j)
        if (D[231][j].charCodeAt(0) !== 65533) {
          e[D[231][j]] = 59136 + j;
          d[59136 + j] = D[231][j];
        }
      D[232] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u741B\u741A\u7441\u745C\u7457\u7455\u7459\u7477\u746D\u747E\u749C\u748E\u7480\u7481\u7487\u748B\u749E\u74A8\u74A9\u7490\u74A7\u74D2\u74BA\u97EA\u97EB\u97EC\u674C\u6753\u675E\u6748\u6769\u67A5\u6787\u676A\u6773\u6798\u67A7\u6775\u67A8\u679E\u67AD\u678B\u6777\u677C\u67F0\u6809\u67D8\u680A\u67E9\u67B0\u680C\u67D9\u67B5\u67DA\u67B3\u67DD\u6800\u67C3\u67B8\u67E2\u680E\u67C1\u67FD\u6832\u6833\u6860\u6861\u684E\u6862\u6844\u6864\u6883\u681D\u6855\u6866\u6841\u6867\u6840\u683E\u684A\u6849\u6829\u68B5\u688F\u6874\u6877\u6893\u686B\u68C2\u696E\u68FC\u691F\u6920\u68F9\uFFFD".split("");
      for (j = 0; j != D[232].length; ++j)
        if (D[232][j].charCodeAt(0) !== 65533) {
          e[D[232][j]] = 59392 + j;
          d[59392 + j] = D[232][j];
        }
      D[233] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6924\u68F0\u690B\u6901\u6957\u68E3\u6910\u6971\u6939\u6960\u6942\u695D\u6984\u696B\u6980\u6998\u6978\u6934\u69CC\u6987\u6988\u69CE\u6989\u6966\u6963\u6979\u699B\u69A7\u69BB\u69AB\u69AD\u69D4\u69B1\u69C1\u69CA\u69DF\u6995\u69E0\u698D\u69FF\u6A2F\u69ED\u6A17\u6A18\u6A65\u69F2\u6A44\u6A3E\u6AA0\u6A50\u6A5B\u6A35\u6A8E\u6A79\u6A3D\u6A28\u6A58\u6A7C\u6A91\u6A90\u6AA9\u6A97\u6AAB\u7337\u7352\u6B81\u6B82\u6B87\u6B84\u6B92\u6B93\u6B8D\u6B9A\u6B9B\u6BA1\u6BAA\u8F6B\u8F6D\u8F71\u8F72\u8F73\u8F75\u8F76\u8F78\u8F77\u8F79\u8F7A\u8F7C\u8F7E\u8F81\u8F82\u8F84\u8F87\u8F8B\uFFFD".split("");
      for (j = 0; j != D[233].length; ++j)
        if (D[233][j].charCodeAt(0) !== 65533) {
          e[D[233][j]] = 59648 + j;
          d[59648 + j] = D[233][j];
        }
      D[234] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8F8D\u8F8E\u8F8F\u8F98\u8F9A\u8ECE\u620B\u6217\u621B\u621F\u6222\u6221\u6225\u6224\u622C\u81E7\u74EF\u74F4\u74FF\u750F\u7511\u7513\u6534\u65EE\u65EF\u65F0\u660A\u6619\u6772\u6603\u6615\u6600\u7085\u66F7\u661D\u6634\u6631\u6636\u6635\u8006\u665F\u6654\u6641\u664F\u6656\u6661\u6657\u6677\u6684\u668C\u66A7\u669D\u66BE\u66DB\u66DC\u66E6\u66E9\u8D32\u8D33\u8D36\u8D3B\u8D3D\u8D40\u8D45\u8D46\u8D48\u8D49\u8D47\u8D4D\u8D55\u8D59\u89C7\u89CA\u89CB\u89CC\u89CE\u89CF\u89D0\u89D1\u726E\u729F\u725D\u7266\u726F\u727E\u727F\u7284\u728B\u728D\u728F\u7292\u6308\u6332\u63B0\uFFFD".split("");
      for (j = 0; j != D[234].length; ++j)
        if (D[234][j].charCodeAt(0) !== 65533) {
          e[D[234][j]] = 59904 + j;
          d[59904 + j] = D[234][j];
        }
      D[235] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u643F\u64D8\u8004\u6BEA\u6BF3\u6BFD\u6BF5\u6BF9\u6C05\u6C07\u6C06\u6C0D\u6C15\u6C18\u6C19\u6C1A\u6C21\u6C29\u6C24\u6C2A\u6C32\u6535\u6555\u656B\u724D\u7252\u7256\u7230\u8662\u5216\u809F\u809C\u8093\u80BC\u670A\u80BD\u80B1\u80AB\u80AD\u80B4\u80B7\u80E7\u80E8\u80E9\u80EA\u80DB\u80C2\u80C4\u80D9\u80CD\u80D7\u6710\u80DD\u80EB\u80F1\u80F4\u80ED\u810D\u810E\u80F2\u80FC\u6715\u8112\u8C5A\u8136\u811E\u812C\u8118\u8132\u8148\u814C\u8153\u8174\u8159\u815A\u8171\u8160\u8169\u817C\u817D\u816D\u8167\u584D\u5AB5\u8188\u8182\u8191\u6ED5\u81A3\u81AA\u81CC\u6726\u81CA\u81BB\uFFFD".split("");
      for (j = 0; j != D[235].length; ++j)
        if (D[235][j].charCodeAt(0) !== 65533) {
          e[D[235][j]] = 60160 + j;
          d[60160 + j] = D[235][j];
        }
      D[236] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u81C1\u81A6\u6B24\u6B37\u6B39\u6B43\u6B46\u6B59\u98D1\u98D2\u98D3\u98D5\u98D9\u98DA\u6BB3\u5F40\u6BC2\u89F3\u6590\u9F51\u6593\u65BC\u65C6\u65C4\u65C3\u65CC\u65CE\u65D2\u65D6\u7080\u709C\u7096\u709D\u70BB\u70C0\u70B7\u70AB\u70B1\u70E8\u70CA\u7110\u7113\u7116\u712F\u7131\u7173\u715C\u7168\u7145\u7172\u714A\u7178\u717A\u7198\u71B3\u71B5\u71A8\u71A0\u71E0\u71D4\u71E7\u71F9\u721D\u7228\u706C\u7118\u7166\u71B9\u623E\u623D\u6243\u6248\u6249\u793B\u7940\u7946\u7949\u795B\u795C\u7953\u795A\u7962\u7957\u7960\u796F\u7967\u797A\u7985\u798A\u799A\u79A7\u79B3\u5FD1\u5FD0\uFFFD".split("");
      for (j = 0; j != D[236].length; ++j)
        if (D[236][j].charCodeAt(0) !== 65533) {
          e[D[236][j]] = 60416 + j;
          d[60416 + j] = D[236][j];
        }
      D[237] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u603C\u605D\u605A\u6067\u6041\u6059\u6063\u60AB\u6106\u610D\u615D\u61A9\u619D\u61CB\u61D1\u6206\u8080\u807F\u6C93\u6CF6\u6DFC\u77F6\u77F8\u7800\u7809\u7817\u7818\u7811\u65AB\u782D\u781C\u781D\u7839\u783A\u783B\u781F\u783C\u7825\u782C\u7823\u7829\u784E\u786D\u7856\u7857\u7826\u7850\u7847\u784C\u786A\u789B\u7893\u789A\u7887\u789C\u78A1\u78A3\u78B2\u78B9\u78A5\u78D4\u78D9\u78C9\u78EC\u78F2\u7905\u78F4\u7913\u7924\u791E\u7934\u9F9B\u9EF9\u9EFB\u9EFC\u76F1\u7704\u770D\u76F9\u7707\u7708\u771A\u7722\u7719\u772D\u7726\u7735\u7738\u7750\u7751\u7747\u7743\u775A\u7768\uFFFD".split("");
      for (j = 0; j != D[237].length; ++j)
        if (D[237][j].charCodeAt(0) !== 65533) {
          e[D[237][j]] = 60672 + j;
          d[60672 + j] = D[237][j];
        }
      D[238] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7762\u7765\u777F\u778D\u777D\u7780\u778C\u7791\u779F\u77A0\u77B0\u77B5\u77BD\u753A\u7540\u754E\u754B\u7548\u755B\u7572\u7579\u7583\u7F58\u7F61\u7F5F\u8A48\u7F68\u7F74\u7F71\u7F79\u7F81\u7F7E\u76CD\u76E5\u8832\u9485\u9486\u9487\u948B\u948A\u948C\u948D\u948F\u9490\u9494\u9497\u9495\u949A\u949B\u949C\u94A3\u94A4\u94AB\u94AA\u94AD\u94AC\u94AF\u94B0\u94B2\u94B4\u94B6\u94B7\u94B8\u94B9\u94BA\u94BC\u94BD\u94BF\u94C4\u94C8\u94C9\u94CA\u94CB\u94CC\u94CD\u94CE\u94D0\u94D1\u94D2\u94D5\u94D6\u94D7\u94D9\u94D8\u94DB\u94DE\u94DF\u94E0\u94E2\u94E4\u94E5\u94E7\u94E8\u94EA\uFFFD".split("");
      for (j = 0; j != D[238].length; ++j)
        if (D[238][j].charCodeAt(0) !== 65533) {
          e[D[238][j]] = 60928 + j;
          d[60928 + j] = D[238][j];
        }
      D[239] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u94E9\u94EB\u94EE\u94EF\u94F3\u94F4\u94F5\u94F7\u94F9\u94FC\u94FD\u94FF\u9503\u9502\u9506\u9507\u9509\u950A\u950D\u950E\u950F\u9512\u9513\u9514\u9515\u9516\u9518\u951B\u951D\u951E\u951F\u9522\u952A\u952B\u9529\u952C\u9531\u9532\u9534\u9536\u9537\u9538\u953C\u953E\u953F\u9542\u9535\u9544\u9545\u9546\u9549\u954C\u954E\u954F\u9552\u9553\u9554\u9556\u9557\u9558\u9559\u955B\u955E\u955F\u955D\u9561\u9562\u9564\u9565\u9566\u9567\u9568\u9569\u956A\u956B\u956C\u956F\u9571\u9572\u9573\u953A\u77E7\u77EC\u96C9\u79D5\u79ED\u79E3\u79EB\u7A06\u5D47\u7A03\u7A02\u7A1E\u7A14\uFFFD".split("");
      for (j = 0; j != D[239].length; ++j)
        if (D[239][j].charCodeAt(0) !== 65533) {
          e[D[239][j]] = 61184 + j;
          d[61184 + j] = D[239][j];
        }
      D[240] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7A39\u7A37\u7A51\u9ECF\u99A5\u7A70\u7688\u768E\u7693\u7699\u76A4\u74DE\u74E0\u752C\u9E20\u9E22\u9E28\u9E29\u9E2A\u9E2B\u9E2C\u9E32\u9E31\u9E36\u9E38\u9E37\u9E39\u9E3A\u9E3E\u9E41\u9E42\u9E44\u9E46\u9E47\u9E48\u9E49\u9E4B\u9E4C\u9E4E\u9E51\u9E55\u9E57\u9E5A\u9E5B\u9E5C\u9E5E\u9E63\u9E66\u9E67\u9E68\u9E69\u9E6A\u9E6B\u9E6C\u9E71\u9E6D\u9E73\u7592\u7594\u7596\u75A0\u759D\u75AC\u75A3\u75B3\u75B4\u75B8\u75C4\u75B1\u75B0\u75C3\u75C2\u75D6\u75CD\u75E3\u75E8\u75E6\u75E4\u75EB\u75E7\u7603\u75F1\u75FC\u75FF\u7610\u7600\u7605\u760C\u7617\u760A\u7625\u7618\u7615\u7619\uFFFD".split("");
      for (j = 0; j != D[240].length; ++j)
        if (D[240][j].charCodeAt(0) !== 65533) {
          e[D[240][j]] = 61440 + j;
          d[61440 + j] = D[240][j];
        }
      D[241] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u761B\u763C\u7622\u7620\u7640\u762D\u7630\u763F\u7635\u7643\u763E\u7633\u764D\u765E\u7654\u765C\u7656\u766B\u766F\u7FCA\u7AE6\u7A78\u7A79\u7A80\u7A86\u7A88\u7A95\u7AA6\u7AA0\u7AAC\u7AA8\u7AAD\u7AB3\u8864\u8869\u8872\u887D\u887F\u8882\u88A2\u88C6\u88B7\u88BC\u88C9\u88E2\u88CE\u88E3\u88E5\u88F1\u891A\u88FC\u88E8\u88FE\u88F0\u8921\u8919\u8913\u891B\u890A\u8934\u892B\u8936\u8941\u8966\u897B\u758B\u80E5\u76B2\u76B4\u77DC\u8012\u8014\u8016\u801C\u8020\u8022\u8025\u8026\u8027\u8029\u8028\u8031\u800B\u8035\u8043\u8046\u804D\u8052\u8069\u8071\u8983\u9878\u9880\u9883\uFFFD".split("");
      for (j = 0; j != D[241].length; ++j)
        if (D[241][j].charCodeAt(0) !== 65533) {
          e[D[241][j]] = 61696 + j;
          d[61696 + j] = D[241][j];
        }
      D[242] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9889\u988C\u988D\u988F\u9894\u989A\u989B\u989E\u989F\u98A1\u98A2\u98A5\u98A6\u864D\u8654\u866C\u866E\u867F\u867A\u867C\u867B\u86A8\u868D\u868B\u86AC\u869D\u86A7\u86A3\u86AA\u8693\u86A9\u86B6\u86C4\u86B5\u86CE\u86B0\u86BA\u86B1\u86AF\u86C9\u86CF\u86B4\u86E9\u86F1\u86F2\u86ED\u86F3\u86D0\u8713\u86DE\u86F4\u86DF\u86D8\u86D1\u8703\u8707\u86F8\u8708\u870A\u870D\u8709\u8723\u873B\u871E\u8725\u872E\u871A\u873E\u8748\u8734\u8731\u8729\u8737\u873F\u8782\u8722\u877D\u877E\u877B\u8760\u8770\u874C\u876E\u878B\u8753\u8763\u877C\u8764\u8759\u8765\u8793\u87AF\u87A8\u87D2\uFFFD".split("");
      for (j = 0; j != D[242].length; ++j)
        if (D[242][j].charCodeAt(0) !== 65533) {
          e[D[242][j]] = 61952 + j;
          d[61952 + j] = D[242][j];
        }
      D[243] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u87C6\u8788\u8785\u87AD\u8797\u8783\u87AB\u87E5\u87AC\u87B5\u87B3\u87CB\u87D3\u87BD\u87D1\u87C0\u87CA\u87DB\u87EA\u87E0\u87EE\u8816\u8813\u87FE\u880A\u881B\u8821\u8839\u883C\u7F36\u7F42\u7F44\u7F45\u8210\u7AFA\u7AFD\u7B08\u7B03\u7B04\u7B15\u7B0A\u7B2B\u7B0F\u7B47\u7B38\u7B2A\u7B19\u7B2E\u7B31\u7B20\u7B25\u7B24\u7B33\u7B3E\u7B1E\u7B58\u7B5A\u7B45\u7B75\u7B4C\u7B5D\u7B60\u7B6E\u7B7B\u7B62\u7B72\u7B71\u7B90\u7BA6\u7BA7\u7BB8\u7BAC\u7B9D\u7BA8\u7B85\u7BAA\u7B9C\u7BA2\u7BAB\u7BB4\u7BD1\u7BC1\u7BCC\u7BDD\u7BDA\u7BE5\u7BE6\u7BEA\u7C0C\u7BFE\u7BFC\u7C0F\u7C16\u7C0B\uFFFD".split("");
      for (j = 0; j != D[243].length; ++j)
        if (D[243][j].charCodeAt(0) !== 65533) {
          e[D[243][j]] = 62208 + j;
          d[62208 + j] = D[243][j];
        }
      D[244] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7C1F\u7C2A\u7C26\u7C38\u7C41\u7C40\u81FE\u8201\u8202\u8204\u81EC\u8844\u8221\u8222\u8223\u822D\u822F\u8228\u822B\u8238\u823B\u8233\u8234\u823E\u8244\u8249\u824B\u824F\u825A\u825F\u8268\u887E\u8885\u8888\u88D8\u88DF\u895E\u7F9D\u7F9F\u7FA7\u7FAF\u7FB0\u7FB2\u7C7C\u6549\u7C91\u7C9D\u7C9C\u7C9E\u7CA2\u7CB2\u7CBC\u7CBD\u7CC1\u7CC7\u7CCC\u7CCD\u7CC8\u7CC5\u7CD7\u7CE8\u826E\u66A8\u7FBF\u7FCE\u7FD5\u7FE5\u7FE1\u7FE6\u7FE9\u7FEE\u7FF3\u7CF8\u7D77\u7DA6\u7DAE\u7E47\u7E9B\u9EB8\u9EB4\u8D73\u8D84\u8D94\u8D91\u8DB1\u8D67\u8D6D\u8C47\u8C49\u914A\u9150\u914E\u914F\u9164\uFFFD".split("");
      for (j = 0; j != D[244].length; ++j)
        if (D[244][j].charCodeAt(0) !== 65533) {
          e[D[244][j]] = 62464 + j;
          d[62464 + j] = D[244][j];
        }
      D[245] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9162\u9161\u9170\u9169\u916F\u917D\u917E\u9172\u9174\u9179\u918C\u9185\u9190\u918D\u9191\u91A2\u91A3\u91AA\u91AD\u91AE\u91AF\u91B5\u91B4\u91BA\u8C55\u9E7E\u8DB8\u8DEB\u8E05\u8E59\u8E69\u8DB5\u8DBF\u8DBC\u8DBA\u8DC4\u8DD6\u8DD7\u8DDA\u8DDE\u8DCE\u8DCF\u8DDB\u8DC6\u8DEC\u8DF7\u8DF8\u8DE3\u8DF9\u8DFB\u8DE4\u8E09\u8DFD\u8E14\u8E1D\u8E1F\u8E2C\u8E2E\u8E23\u8E2F\u8E3A\u8E40\u8E39\u8E35\u8E3D\u8E31\u8E49\u8E41\u8E42\u8E51\u8E52\u8E4A\u8E70\u8E76\u8E7C\u8E6F\u8E74\u8E85\u8E8F\u8E94\u8E90\u8E9C\u8E9E\u8C78\u8C82\u8C8A\u8C85\u8C98\u8C94\u659B\u89D6\u89DE\u89DA\u89DC\uFFFD".split("");
      for (j = 0; j != D[245].length; ++j)
        if (D[245][j].charCodeAt(0) !== 65533) {
          e[D[245][j]] = 62720 + j;
          d[62720 + j] = D[245][j];
        }
      D[246] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u89E5\u89EB\u89EF\u8A3E\u8B26\u9753\u96E9\u96F3\u96EF\u9706\u9701\u9708\u970F\u970E\u972A\u972D\u9730\u973E\u9F80\u9F83\u9F85\u9F86\u9F87\u9F88\u9F89\u9F8A\u9F8C\u9EFE\u9F0B\u9F0D\u96B9\u96BC\u96BD\u96CE\u96D2\u77BF\u96E0\u928E\u92AE\u92C8\u933E\u936A\u93CA\u938F\u943E\u946B\u9C7F\u9C82\u9C85\u9C86\u9C87\u9C88\u7A23\u9C8B\u9C8E\u9C90\u9C91\u9C92\u9C94\u9C95\u9C9A\u9C9B\u9C9E\u9C9F\u9CA0\u9CA1\u9CA2\u9CA3\u9CA5\u9CA6\u9CA7\u9CA8\u9CA9\u9CAB\u9CAD\u9CAE\u9CB0\u9CB1\u9CB2\u9CB3\u9CB4\u9CB5\u9CB6\u9CB7\u9CBA\u9CBB\u9CBC\u9CBD\u9CC4\u9CC5\u9CC6\u9CC7\u9CCA\u9CCB\uFFFD".split("");
      for (j = 0; j != D[246].length; ++j)
        if (D[246][j].charCodeAt(0) !== 65533) {
          e[D[246][j]] = 62976 + j;
          d[62976 + j] = D[246][j];
        }
      D[247] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9CCC\u9CCD\u9CCE\u9CCF\u9CD0\u9CD3\u9CD4\u9CD5\u9CD7\u9CD8\u9CD9\u9CDC\u9CDD\u9CDF\u9CE2\u977C\u9785\u9791\u9792\u9794\u97AF\u97AB\u97A3\u97B2\u97B4\u9AB1\u9AB0\u9AB7\u9E58\u9AB6\u9ABA\u9ABC\u9AC1\u9AC0\u9AC5\u9AC2\u9ACB\u9ACC\u9AD1\u9B45\u9B43\u9B47\u9B49\u9B48\u9B4D\u9B51\u98E8\u990D\u992E\u9955\u9954\u9ADF\u9AE1\u9AE6\u9AEF\u9AEB\u9AFB\u9AED\u9AF9\u9B08\u9B0F\u9B13\u9B1F\u9B23\u9EBD\u9EBE\u7E3B\u9E82\u9E87\u9E88\u9E8B\u9E92\u93D6\u9E9D\u9E9F\u9EDB\u9EDC\u9EDD\u9EE0\u9EDF\u9EE2\u9EE9\u9EE7\u9EE5\u9EEA\u9EEF\u9F22\u9F2C\u9F2F\u9F39\u9F37\u9F3D\u9F3E\u9F44\uFFFD".split("");
      for (j = 0; j != D[247].length; ++j)
        if (D[247][j].charCodeAt(0) !== 65533) {
          e[D[247][j]] = 63232 + j;
          d[63232 + j] = D[247][j];
        }
      return { "enc": e, "dec": d };
    }();
    cptable2[10029] = function() {
      var d = "\0\x07\b	\n\v\f\r !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\xC4\u0100\u0101\xC9\u0104\xD6\xDC\xE1\u0105\u010C\xE4\u010D\u0106\u0107\xE9\u0179\u017A\u010E\xED\u010F\u0112\u0113\u0116\xF3\u0117\xF4\xF6\xF5\xFA\u011A\u011B\xFC\u2020\xB0\u0118\xA3\xA7\u2022\xB6\xDF\xAE\xA9\u2122\u0119\xA8\u2260\u0123\u012E\u012F\u012A\u2264\u2265\u012B\u0136\u2202\u2211\u0142\u013B\u013C\u013D\u013E\u0139\u013A\u0145\u0146\u0143\xAC\u221A\u0144\u0147\u2206\xAB\xBB\u2026\xA0\u0148\u0150\xD5\u0151\u014C\u2013\u2014\u201C\u201D\u2018\u2019\xF7\u25CA\u014D\u0154\u0155\u0158\u2039\u203A\u0159\u0156\u0157\u0160\u201A\u201E\u0161\u015A\u015B\xC1\u0164\u0165\xCD\u017D\u017E\u016A\xD3\xD4\u016B\u016E\xDA\u016F\u0170\u0171\u0172\u0173\xDD\xFD\u0137\u017B\u0141\u017C\u0122\u02C7", D = [], e = {};
      for (var i = 0; i != d.length; ++i) {
        if (d.charCodeAt(i) !== 65533)
          e[d.charAt(i)] = i;
        D[i] = d.charAt(i);
      }
      return { "enc": e, "dec": D };
    }();
    cptable2[10079] = function() {
      var d = "\0\x07\b	\n\v\f\r !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\xC4\xC5\xC7\xC9\xD1\xD6\xDC\xE1\xE0\xE2\xE4\xE3\xE5\xE7\xE9\xE8\xEA\xEB\xED\xEC\xEE\xEF\xF1\xF3\xF2\xF4\xF6\xF5\xFA\xF9\xFB\xFC\xDD\xB0\xA2\xA3\xA7\u2022\xB6\xDF\xAE\xA9\u2122\xB4\xA8\u2260\xC6\xD8\u221E\xB1\u2264\u2265\xA5\xB5\u2202\u2211\u220F\u03C0\u222B\xAA\xBA\u2126\xE6\xF8\xBF\xA1\xAC\u221A\u0192\u2248\u2206\xAB\xBB\u2026\xA0\xC0\xC3\xD5\u0152\u0153\u2013\u2014\u201C\u201D\u2018\u2019\xF7\u25CA\xFF\u0178\u2044\xA4\xD0\xF0\xDE\xFE\xFD\xB7\u201A\u201E\u2030\xC2\xCA\xC1\xCB\xC8\xCD\xCE\xCF\xCC\xD3\xD4\uFFFD\xD2\xDA\xDB\xD9\u0131\u02C6\u02DC\xAF\u02D8\u02D9\u02DA\xB8\u02DD\u02DB\u02C7", D = [], e = {};
      for (var i = 0; i != d.length; ++i) {
        if (d.charCodeAt(i) !== 65533)
          e[d.charAt(i)] = i;
        D[i] = d.charAt(i);
      }
      return { "enc": e, "dec": D };
    }();
    cptable2[10081] = function() {
      var d = "\0\x07\b	\n\v\f\r !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\xC4\xC5\xC7\xC9\xD1\xD6\xDC\xE1\xE0\xE2\xE4\xE3\xE5\xE7\xE9\xE8\xEA\xEB\xED\xEC\xEE\xEF\xF1\xF3\xF2\xF4\xF6\xF5\xFA\xF9\xFB\xFC\u2020\xB0\xA2\xA3\xA7\u2022\xB6\xDF\xAE\xA9\u2122\xB4\xA8\u2260\xC6\xD8\u221E\xB1\u2264\u2265\xA5\xB5\u2202\u2211\u220F\u03C0\u222B\xAA\xBA\u2126\xE6\xF8\xBF\xA1\xAC\u221A\u0192\u2248\u2206\xAB\xBB\u2026\xA0\xC0\xC3\xD5\u0152\u0153\u2013\u2014\u201C\u201D\u2018\u2019\xF7\u25CA\xFF\u0178\u011E\u011F\u0130\u0131\u015E\u015F\u2021\xB7\u201A\u201E\u2030\xC2\xCA\xC1\xCB\xC8\xCD\xCE\xCF\xCC\xD3\xD4\uFFFD\xD2\xDA\xDB\xD9\uFFFD\u02C6\u02DC\xAF\u02D8\u02D9\u02DA\xB8\u02DD\u02DB\u02C7", D = [], e = {};
      for (var i = 0; i != d.length; ++i) {
        if (d.charCodeAt(i) !== 65533)
          e[d.charAt(i)] = i;
        D[i] = d.charAt(i);
      }
      return { "enc": e, "dec": D };
    }();
    cptable2[28591] = function() {
      var d = "\0\x07\b	\n\v\f\r !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\xD0\xD1\xD2\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xDB\xDC\xDD\xDE\xDF\xE0\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\xF0\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\xFD\xFE\xFF", D = [], e = {};
      for (var i = 0; i != d.length; ++i) {
        if (d.charCodeAt(i) !== 65533)
          e[d.charAt(i)] = i;
        D[i] = d.charAt(i);
      }
      return { "enc": e, "dec": D };
    }();
    if (typeof module2 !== "undefined" && module2.exports && typeof DO_NOT_EXPORT_CODEPAGE === "undefined")
      module2.exports = cptable2;
    (function(root, factory) {
      "use strict";
      if (typeof cptable2 === "undefined") {
        if (typeof require !== "undefined") {
          var cpt = cptable2;
          if (typeof module2 !== "undefined" && module2.exports && typeof DO_NOT_EXPORT_CODEPAGE === "undefined")
            module2.exports = factory(cpt);
          else
            root.cptable = factory(cpt);
        } else
          throw new Error("cptable not found");
      } else
        cptable2 = factory(cptable2);
    })(exports, function(cpt) {
      "use strict";
      var magic = {
        "1200": "utf16le",
        "1201": "utf16be",
        "12000": "utf32le",
        "12001": "utf32be",
        "16969": "utf64le",
        "20127": "ascii",
        "65000": "utf7",
        "65001": "utf8"
      };
      var sbcs_cache = [874, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1e4];
      var dbcs_cache = [932, 936, 949, 950];
      var magic_cache = [65001];
      var magic_decode = {};
      var magic_encode = {};
      var cpdcache = {};
      var cpecache = {};
      var sfcc = function sfcc2(x) {
        return String.fromCharCode(x);
      };
      var cca = function cca2(x) {
        return x.charCodeAt(0);
      };
      var has_buf = typeof Buffer !== "undefined";
      var Buffer_from = function() {
      };
      if (has_buf) {
        var nbfs = !Buffer.from;
        if (!nbfs)
          try {
            Buffer.from("foo", "utf8");
          } catch (e) {
            nbfs = true;
          }
        Buffer_from = nbfs ? function(buf, enc) {
          return enc ? new Buffer(buf, enc) : new Buffer(buf);
        } : Buffer.from.bind(Buffer);
        if (!Buffer.allocUnsafe)
          Buffer.allocUnsafe = function(n) {
            return new Buffer(n);
          };
        var mdl = 1024, mdb = Buffer.allocUnsafe(mdl);
        var make_EE = function make_EE2(E) {
          var EE = Buffer.allocUnsafe(65536);
          for (var i = 0; i < 65536; ++i)
            EE[i] = 0;
          var keys = Object.keys(E), len = keys.length;
          for (var ee = 0, e = keys[ee]; ee < len; ++ee) {
            if (!(e = keys[ee]))
              continue;
            EE[e.charCodeAt(0)] = E[e];
          }
          return EE;
        };
        var sbcs_encode = function make_sbcs_encode(cp) {
          var EE = make_EE(cpt[cp].enc);
          return function sbcs_e(data, ofmt) {
            var len = data.length;
            var out, i = 0, j = 0, D = 0, w = 0;
            if (typeof data === "string") {
              out = Buffer.allocUnsafe(len);
              for (i = 0; i < len; ++i)
                out[i] = EE[data.charCodeAt(i)];
            } else if (Buffer.isBuffer(data)) {
              out = Buffer.allocUnsafe(2 * len);
              j = 0;
              for (i = 0; i < len; ++i) {
                D = data[i];
                if (D < 128)
                  out[j++] = EE[D];
                else if (D < 224) {
                  out[j++] = EE[((D & 31) << 6) + (data[i + 1] & 63)];
                  ++i;
                } else if (D < 240) {
                  out[j++] = EE[((D & 15) << 12) + ((data[i + 1] & 63) << 6) + (data[i + 2] & 63)];
                  i += 2;
                } else {
                  w = ((D & 7) << 18) + ((data[i + 1] & 63) << 12) + ((data[i + 2] & 63) << 6) + (data[i + 3] & 63);
                  i += 3;
                  if (w < 65536)
                    out[j++] = EE[w];
                  else {
                    w -= 65536;
                    out[j++] = EE[55296 + (w >> 10 & 1023)];
                    out[j++] = EE[56320 + (w & 1023)];
                  }
                }
              }
              out = out.slice(0, j);
            } else {
              out = Buffer.allocUnsafe(len);
              for (i = 0; i < len; ++i)
                out[i] = EE[data[i].charCodeAt(0)];
            }
            if (!ofmt || ofmt === "buf")
              return out;
            if (ofmt !== "arr")
              return out.toString("binary");
            return [].slice.call(out);
          };
        };
        var sbcs_decode = function make_sbcs_decode(cp) {
          var D = cpt[cp].dec;
          var DD = Buffer.allocUnsafe(131072), d = 0, c = "";
          for (d = 0; d < D.length; ++d) {
            if (!(c = D[d]))
              continue;
            var w = c.charCodeAt(0);
            DD[2 * d] = w & 255;
            DD[2 * d + 1] = w >> 8;
          }
          return function sbcs_d(data) {
            var len = data.length, i = 0, j = 0;
            if (2 * len > mdl) {
              mdl = 2 * len;
              mdb = Buffer.allocUnsafe(mdl);
            }
            if (Buffer.isBuffer(data)) {
              for (i = 0; i < len; i++) {
                j = 2 * data[i];
                mdb[2 * i] = DD[j];
                mdb[2 * i + 1] = DD[j + 1];
              }
            } else if (typeof data === "string") {
              for (i = 0; i < len; i++) {
                j = 2 * data.charCodeAt(i);
                mdb[2 * i] = DD[j];
                mdb[2 * i + 1] = DD[j + 1];
              }
            } else {
              for (i = 0; i < len; i++) {
                j = 2 * data[i];
                mdb[2 * i] = DD[j];
                mdb[2 * i + 1] = DD[j + 1];
              }
            }
            return mdb.slice(0, 2 * len).toString("ucs2");
          };
        };
        var dbcs_encode = function make_dbcs_encode(cp) {
          var E = cpt[cp].enc;
          var EE = Buffer.allocUnsafe(131072);
          for (var i = 0; i < 131072; ++i)
            EE[i] = 0;
          var keys = Object.keys(E);
          for (var ee = 0, e = keys[ee]; ee < keys.length; ++ee) {
            if (!(e = keys[ee]))
              continue;
            var f = e.charCodeAt(0);
            EE[2 * f] = E[e] & 255;
            EE[2 * f + 1] = E[e] >> 8;
          }
          return function dbcs_e(data, ofmt) {
            var len = data.length, out = Buffer.allocUnsafe(2 * len), i2 = 0, j = 0, jj = 0, k = 0, D = 0;
            if (typeof data === "string") {
              for (i2 = k = 0; i2 < len; ++i2) {
                j = data.charCodeAt(i2) * 2;
                out[k++] = EE[j + 1] || EE[j];
                if (EE[j + 1] > 0)
                  out[k++] = EE[j];
              }
              out = out.slice(0, k);
            } else if (Buffer.isBuffer(data)) {
              for (i2 = k = 0; i2 < len; ++i2) {
                D = data[i2];
                if (D < 128)
                  j = D;
                else if (D < 224) {
                  j = ((D & 31) << 6) + (data[i2 + 1] & 63);
                  ++i2;
                } else if (D < 240) {
                  j = ((D & 15) << 12) + ((data[i2 + 1] & 63) << 6) + (data[i2 + 2] & 63);
                  i2 += 2;
                } else {
                  j = ((D & 7) << 18) + ((data[i2 + 1] & 63) << 12) + ((data[i2 + 2] & 63) << 6) + (data[i2 + 3] & 63);
                  i2 += 3;
                }
                if (j < 65536) {
                  j *= 2;
                  out[k++] = EE[j + 1] || EE[j];
                  if (EE[j + 1] > 0)
                    out[k++] = EE[j];
                } else {
                  jj = j - 65536;
                  j = 2 * (55296 + (jj >> 10 & 1023));
                  out[k++] = EE[j + 1] || EE[j];
                  if (EE[j + 1] > 0)
                    out[k++] = EE[j];
                  j = 2 * (56320 + (jj & 1023));
                  out[k++] = EE[j + 1] || EE[j];
                  if (EE[j + 1] > 0)
                    out[k++] = EE[j];
                }
              }
              out = out.slice(0, k);
            } else {
              for (i2 = k = 0; i2 < len; i2++) {
                j = data[i2].charCodeAt(0) * 2;
                out[k++] = EE[j + 1] || EE[j];
                if (EE[j + 1] > 0)
                  out[k++] = EE[j];
              }
            }
            if (!ofmt || ofmt === "buf")
              return out;
            if (ofmt !== "arr")
              return out.toString("binary");
            return [].slice.call(out);
          };
        };
        var dbcs_decode = function make_dbcs_decode(cp) {
          var D = cpt[cp].dec;
          var DD = Buffer.allocUnsafe(131072), d = 0, c, w = 0, j = 0, i = 0;
          for (i = 0; i < 65536; ++i) {
            DD[2 * i] = 255;
            DD[2 * i + 1] = 253;
          }
          for (d = 0; d < D.length; ++d) {
            if (!(c = D[d]))
              continue;
            w = c.charCodeAt(0);
            j = 2 * d;
            DD[j] = w & 255;
            DD[j + 1] = w >> 8;
          }
          return function dbcs_d(data) {
            var len = data.length, out = Buffer.allocUnsafe(2 * len), i2 = 0, j2 = 0, k = 0;
            if (Buffer.isBuffer(data)) {
              for (i2 = 0; i2 < len; i2++) {
                j2 = 2 * data[i2];
                if (DD[j2] === 255 && DD[j2 + 1] === 253) {
                  j2 = 2 * ((data[i2] << 8) + data[i2 + 1]);
                  ++i2;
                }
                out[k++] = DD[j2];
                out[k++] = DD[j2 + 1];
              }
            } else if (typeof data === "string") {
              for (i2 = 0; i2 < len; i2++) {
                j2 = 2 * data.charCodeAt(i2);
                if (DD[j2] === 255 && DD[j2 + 1] === 253) {
                  j2 = 2 * ((data.charCodeAt(i2) << 8) + data.charCodeAt(i2 + 1));
                  ++i2;
                }
                out[k++] = DD[j2];
                out[k++] = DD[j2 + 1];
              }
            } else {
              for (i2 = 0; i2 < len; i2++) {
                j2 = 2 * data[i2];
                if (DD[j2] === 255 && DD[j2 + 1] === 253) {
                  j2 = 2 * ((data[i2] << 8) + data[i2 + 1]);
                  ++i2;
                }
                out[k++] = DD[j2];
                out[k++] = DD[j2 + 1];
              }
            }
            return out.slice(0, k).toString("ucs2");
          };
        };
        magic_decode[65001] = function utf8_d(data) {
          if (typeof data === "string")
            return utf8_d(data.split("").map(cca));
          var len = data.length, w = 0, ww = 0;
          if (4 * len > mdl) {
            mdl = 4 * len;
            mdb = Buffer.allocUnsafe(mdl);
          }
          var i = 0;
          if (len >= 3 && data[0] == 239) {
            if (data[1] == 187 && data[2] == 191)
              i = 3;
          }
          for (var j = 1, k = 0, D = 0; i < len; i += j) {
            j = 1;
            D = data[i];
            if (D < 128)
              w = D;
            else if (D < 224) {
              w = (D & 31) * 64 + (data[i + 1] & 63);
              j = 2;
            } else if (D < 240) {
              w = ((D & 15) << 12) + (data[i + 1] & 63) * 64 + (data[i + 2] & 63);
              j = 3;
            } else {
              w = (D & 7) * 262144 + ((data[i + 1] & 63) << 12) + (data[i + 2] & 63) * 64 + (data[i + 3] & 63);
              j = 4;
            }
            if (w < 65536) {
              mdb[k++] = w & 255;
              mdb[k++] = w >> 8;
            } else {
              w -= 65536;
              ww = 55296 + (w >> 10 & 1023);
              w = 56320 + (w & 1023);
              mdb[k++] = ww & 255;
              mdb[k++] = ww >>> 8;
              mdb[k++] = w & 255;
              mdb[k++] = w >>> 8 & 255;
            }
          }
          return mdb.slice(0, k).toString("ucs2");
        };
        magic_encode[65001] = function utf8_e(data, ofmt) {
          if (has_buf && Buffer.isBuffer(data)) {
            if (!ofmt || ofmt === "buf")
              return data;
            if (ofmt !== "arr")
              return data.toString("binary");
            return [].slice.call(data);
          }
          var len = data.length, w = 0, ww = 0, j = 0;
          var direct = typeof data === "string";
          if (4 * len > mdl) {
            mdl = 4 * len;
            mdb = Buffer.allocUnsafe(mdl);
          }
          for (var i = 0; i < len; ++i) {
            w = direct ? data.charCodeAt(i) : data[i].charCodeAt(0);
            if (w <= 127)
              mdb[j++] = w;
            else if (w <= 2047) {
              mdb[j++] = 192 + (w >> 6);
              mdb[j++] = 128 + (w & 63);
            } else if (w >= 55296 && w <= 57343) {
              w -= 55296;
              ++i;
              ww = (direct ? data.charCodeAt(i) : data[i].charCodeAt(0)) - 56320 + (w << 10);
              mdb[j++] = 240 + (ww >>> 18 & 7);
              mdb[j++] = 144 + (ww >>> 12 & 63);
              mdb[j++] = 128 + (ww >>> 6 & 63);
              mdb[j++] = 128 + (ww & 63);
            } else {
              mdb[j++] = 224 + (w >> 12);
              mdb[j++] = 128 + (w >> 6 & 63);
              mdb[j++] = 128 + (w & 63);
            }
          }
          if (!ofmt || ofmt === "buf")
            return mdb.slice(0, j);
          if (ofmt !== "arr")
            return mdb.slice(0, j).toString("binary");
          return [].slice.call(mdb, 0, j);
        };
      }
      var encache = function encache2() {
        if (has_buf) {
          if (cpdcache[sbcs_cache[0]])
            return;
          var i = 0, s = 0;
          for (i = 0; i < sbcs_cache.length; ++i) {
            s = sbcs_cache[i];
            if (cpt[s]) {
              cpdcache[s] = sbcs_decode(s);
              cpecache[s] = sbcs_encode(s);
            }
          }
          for (i = 0; i < dbcs_cache.length; ++i) {
            s = dbcs_cache[i];
            if (cpt[s]) {
              cpdcache[s] = dbcs_decode(s);
              cpecache[s] = dbcs_encode(s);
            }
          }
          for (i = 0; i < magic_cache.length; ++i) {
            s = magic_cache[i];
            if (magic_decode[s])
              cpdcache[s] = magic_decode[s];
            if (magic_encode[s])
              cpecache[s] = magic_encode[s];
          }
        }
      };
      var null_enc = function(data, ofmt) {
        void 0;
        return "";
      };
      var cp_decache = function cp_decache2(cp) {
        delete cpdcache[cp];
        delete cpecache[cp];
      };
      var decache = function decache2() {
        if (has_buf) {
          if (!cpdcache[sbcs_cache[0]])
            return;
          sbcs_cache.forEach(cp_decache);
          dbcs_cache.forEach(cp_decache);
          magic_cache.forEach(cp_decache);
        }
        last_enc = null_enc;
        last_cp = 0;
      };
      var cache = {
        encache,
        decache,
        sbcs: sbcs_cache,
        dbcs: dbcs_cache
      };
      encache();
      var BM = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
      var SetD = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'(),-./:?";
      var last_enc = null_enc, last_cp = 0;
      var encode = function encode2(cp, data, ofmt) {
        if (cp === last_cp && last_enc) {
          return last_enc(data, ofmt);
        }
        if (cpecache[cp]) {
          last_enc = cpecache[last_cp = cp];
          return last_enc(data, ofmt);
        }
        if (has_buf && Buffer.isBuffer(data))
          data = data.toString("utf8");
        var len = data.length;
        var out = has_buf ? Buffer.allocUnsafe(4 * len) : [], w = 0, i = 0, j = 0, ww = 0;
        var C = cpt[cp], E, M = "";
        var isstr = typeof data === "string";
        if (C && (E = C.enc))
          for (i = 0; i < len; ++i, ++j) {
            w = E[isstr ? data.charAt(i) : data[i]];
            if (w > 255) {
              out[j] = w >> 8;
              out[++j] = w & 255;
            } else
              out[j] = w & 255;
          }
        else if (M = magic[cp])
          switch (M) {
            case "utf8":
              if (has_buf && isstr) {
                out = Buffer_from(data, M);
                j = out.length;
                break;
              }
              for (i = 0; i < len; ++i, ++j) {
                w = isstr ? data.charCodeAt(i) : data[i].charCodeAt(0);
                if (w <= 127)
                  out[j] = w;
                else if (w <= 2047) {
                  out[j] = 192 + (w >> 6);
                  out[++j] = 128 + (w & 63);
                } else if (w >= 55296 && w <= 57343) {
                  w -= 55296;
                  ww = (isstr ? data.charCodeAt(++i) : data[++i].charCodeAt(0)) - 56320 + (w << 10);
                  out[j] = 240 + (ww >>> 18 & 7);
                  out[++j] = 144 + (ww >>> 12 & 63);
                  out[++j] = 128 + (ww >>> 6 & 63);
                  out[++j] = 128 + (ww & 63);
                } else {
                  out[j] = 224 + (w >> 12);
                  out[++j] = 128 + (w >> 6 & 63);
                  out[++j] = 128 + (w & 63);
                }
              }
              break;
            case "ascii":
              if (has_buf && typeof data === "string") {
                out = Buffer_from(data, M);
                j = out.length;
                break;
              }
              for (i = 0; i < len; ++i, ++j) {
                w = isstr ? data.charCodeAt(i) : data[i].charCodeAt(0);
                if (w <= 127)
                  out[j] = w;
                else
                  throw new Error("bad ascii " + w);
              }
              break;
            case "utf16le":
              if (has_buf && typeof data === "string") {
                out = Buffer_from(data, M);
                j = out.length;
                break;
              }
              for (i = 0; i < len; ++i) {
                w = isstr ? data.charCodeAt(i) : data[i].charCodeAt(0);
                out[j++] = w & 255;
                out[j++] = w >> 8;
              }
              break;
            case "utf16be":
              for (i = 0; i < len; ++i) {
                w = isstr ? data.charCodeAt(i) : data[i].charCodeAt(0);
                out[j++] = w >> 8;
                out[j++] = w & 255;
              }
              break;
            case "utf32le":
              for (i = 0; i < len; ++i) {
                w = isstr ? data.charCodeAt(i) : data[i].charCodeAt(0);
                if (w >= 55296 && w <= 57343)
                  w = 65536 + (w - 55296 << 10) + (data[++i].charCodeAt(0) - 56320);
                out[j++] = w & 255;
                w >>= 8;
                out[j++] = w & 255;
                w >>= 8;
                out[j++] = w & 255;
                w >>= 8;
                out[j++] = w & 255;
              }
              break;
            case "utf32be":
              for (i = 0; i < len; ++i) {
                w = isstr ? data.charCodeAt(i) : data[i].charCodeAt(0);
                if (w >= 55296 && w <= 57343)
                  w = 65536 + (w - 55296 << 10) + (data[++i].charCodeAt(0) - 56320);
                out[j + 3] = w & 255;
                w >>= 8;
                out[j + 2] = w & 255;
                w >>= 8;
                out[j + 1] = w & 255;
                w >>= 8;
                out[j] = w & 255;
                j += 4;
              }
              break;
            case "utf7":
              for (i = 0; i < len; i++) {
                var c = isstr ? data.charAt(i) : data[i].charAt(0);
                if (c === "+") {
                  out[j++] = 43;
                  out[j++] = 45;
                  continue;
                }
                if (SetD.indexOf(c) > -1) {
                  out[j++] = c.charCodeAt(0);
                  continue;
                }
                var tt = encode2(1201, c);
                out[j++] = 43;
                out[j++] = BM.charCodeAt(tt[0] >> 2);
                out[j++] = BM.charCodeAt(((tt[0] & 3) << 4) + ((tt[1] || 0) >> 4));
                out[j++] = BM.charCodeAt(((tt[1] & 15) << 2) + ((tt[2] || 0) >> 6));
                out[j++] = 45;
              }
              break;
            default:
              throw new Error("Unsupported magic: " + cp + " " + magic[cp]);
          }
        else
          throw new Error("Unrecognized CP: " + cp);
        out = out.slice(0, j);
        if (!has_buf)
          return ofmt == "str" ? out.map(sfcc).join("") : out;
        if (!ofmt || ofmt === "buf")
          return out;
        if (ofmt !== "arr")
          return out.toString("binary");
        return [].slice.call(out);
      };
      var decode = function decode2(cp, data) {
        var F;
        if (F = cpdcache[cp])
          return F(data);
        if (typeof data === "string")
          return decode2(cp, data.split("").map(cca));
        var len = data.length, out = new Array(len), s = "", w = 0, i = 0, j = 1, k = 0, ww = 0;
        var C = cpt[cp], D, M = "";
        if (C && (D = C.dec)) {
          for (i = 0; i < len; i += j) {
            j = 2;
            s = D[(data[i] << 8) + data[i + 1]];
            if (!s) {
              j = 1;
              s = D[data[i]];
            }
            if (!s)
              throw new Error("Unrecognized code: " + data[i] + " " + data[i + j - 1] + " " + i + " " + j + " " + D[data[i]]);
            out[k++] = s;
          }
        } else if (M = magic[cp])
          switch (M) {
            case "utf8":
              if (len >= 3 && data[0] == 239) {
                if (data[1] == 187 && data[2] == 191)
                  i = 3;
              }
              for (; i < len; i += j) {
                j = 1;
                if (data[i] < 128)
                  w = data[i];
                else if (data[i] < 224) {
                  w = (data[i] & 31) * 64 + (data[i + 1] & 63);
                  j = 2;
                } else if (data[i] < 240) {
                  w = ((data[i] & 15) << 12) + (data[i + 1] & 63) * 64 + (data[i + 2] & 63);
                  j = 3;
                } else {
                  w = (data[i] & 7) * 262144 + ((data[i + 1] & 63) << 12) + (data[i + 2] & 63) * 64 + (data[i + 3] & 63);
                  j = 4;
                }
                if (w < 65536) {
                  out[k++] = String.fromCharCode(w);
                } else {
                  w -= 65536;
                  ww = 55296 + (w >> 10 & 1023);
                  w = 56320 + (w & 1023);
                  out[k++] = String.fromCharCode(ww);
                  out[k++] = String.fromCharCode(w);
                }
              }
              break;
            case "ascii":
              if (has_buf && Buffer.isBuffer(data))
                return data.toString(M);
              for (i = 0; i < len; i++)
                out[i] = String.fromCharCode(data[i]);
              k = len;
              break;
            case "utf16le":
              if (len >= 2 && data[0] == 255) {
                if (data[1] == 254)
                  i = 2;
              }
              if (has_buf && Buffer.isBuffer(data))
                return data.toString(M);
              j = 2;
              for (; i + 1 < len; i += j) {
                out[k++] = String.fromCharCode((data[i + 1] << 8) + data[i]);
              }
              break;
            case "utf16be":
              if (len >= 2 && data[0] == 254) {
                if (data[1] == 255)
                  i = 2;
              }
              j = 2;
              for (; i + 1 < len; i += j) {
                out[k++] = String.fromCharCode((data[i] << 8) + data[i + 1]);
              }
              break;
            case "utf32le":
              if (len >= 4 && data[0] == 255) {
                if (data[1] == 254 && data[2] === 0 && data[3] === 0)
                  i = 4;
              }
              j = 4;
              for (; i < len; i += j) {
                w = (data[i + 3] << 24) + (data[i + 2] << 16) + (data[i + 1] << 8) + data[i];
                if (w > 65535) {
                  w -= 65536;
                  out[k++] = String.fromCharCode(55296 + (w >> 10 & 1023));
                  out[k++] = String.fromCharCode(56320 + (w & 1023));
                } else
                  out[k++] = String.fromCharCode(w);
              }
              break;
            case "utf32be":
              if (len >= 4 && data[3] == 255) {
                if (data[2] == 254 && data[1] === 0 && data[0] === 0)
                  i = 4;
              }
              j = 4;
              for (; i < len; i += j) {
                w = (data[i] << 24) + (data[i + 1] << 16) + (data[i + 2] << 8) + data[i + 3];
                if (w > 65535) {
                  w -= 65536;
                  out[k++] = String.fromCharCode(55296 + (w >> 10 & 1023));
                  out[k++] = String.fromCharCode(56320 + (w & 1023));
                } else
                  out[k++] = String.fromCharCode(w);
              }
              break;
            case "utf7":
              if (len >= 4 && data[0] == 43 && data[1] == 47 && data[2] == 118) {
                if (len >= 5 && data[3] == 56 && data[4] == 45)
                  i = 5;
                else if (data[3] == 56 || data[3] == 57 || data[3] == 43 || data[3] == 47)
                  i = 4;
              }
              for (; i < len; i += j) {
                if (data[i] !== 43) {
                  j = 1;
                  out[k++] = String.fromCharCode(data[i]);
                  continue;
                }
                j = 1;
                if (data[i + 1] === 45) {
                  j = 2;
                  out[k++] = "+";
                  continue;
                }
                while (String.fromCharCode(data[i + j]).match(/[A-Za-z0-9+\/]/))
                  j++;
                var dash = 0;
                if (data[i + j] === 45) {
                  ++j;
                  dash = 1;
                }
                var tt = [];
                var o64 = "";
                var c1 = 0, c2 = 0, c3 = 0;
                var e1 = 0, e2 = 0, e3 = 0, e4 = 0;
                for (var l = 1; l < j - dash; ) {
                  e1 = BM.indexOf(String.fromCharCode(data[i + l++]));
                  e2 = BM.indexOf(String.fromCharCode(data[i + l++]));
                  c1 = e1 << 2 | e2 >> 4;
                  tt.push(c1);
                  e3 = BM.indexOf(String.fromCharCode(data[i + l++]));
                  if (e3 === -1)
                    break;
                  c2 = (e2 & 15) << 4 | e3 >> 2;
                  tt.push(c2);
                  e4 = BM.indexOf(String.fromCharCode(data[i + l++]));
                  if (e4 === -1)
                    break;
                  c3 = (e3 & 3) << 6 | e4;
                  if (e4 < 64)
                    tt.push(c3);
                }
                o64 = decode2(1201, tt);
                for (l = 0; l < o64.length; ++l)
                  out[k++] = o64.charAt(l);
              }
              break;
            default:
              throw new Error("Unsupported magic: " + cp + " " + magic[cp]);
          }
        else
          throw new Error("Unrecognized CP: " + cp);
        return out.slice(0, k).join("");
      };
      var hascp = function hascp2(cp) {
        return !!(cpt[cp] || magic[cp]);
      };
      cpt.utils = { decode, encode, hascp, magic, cache };
      return cpt;
    });
  }
});

// node_modules/xlsx/jszip.js
var require_jszip = __commonJS({
  "node_modules/xlsx/jszip.js"(exports, module2) {
    (function(e) {
      if (typeof exports == "object" && typeof module2 != "undefined" && typeof DO_NOT_EXPORT_JSZIP == "undefined")
        module2.exports = e();
      else if (typeof define == "function" && define.amd && typeof DO_NOT_EXPORT_JSZIP == "undefined") {
        JSZipSync = e();
        define("j", [], e);
      } else {
        var f;
        typeof globalThis != "undefined" ? f = globalThis : typeof window != "undefined" ? f = window : typeof global != "undefined" ? f = global : typeof $ != "undefined" && $.global ? f = $.global : typeof self != "undefined" && (f = self), f.JSZipSync = e();
      }
    })(function() {
      var define2, module3, exports2;
      return function e(t, n, r) {
        function s(o2, u) {
          if (!n[o2]) {
            if (!t[o2]) {
              var a = typeof require == "function" && require;
              if (!u && a)
                return a(o2, true);
              if (i)
                return i(o2, true);
              throw new Error("Cannot find module '" + o2 + "'");
            }
            var f = n[o2] = { exports: {} };
            t[o2][0].call(f.exports, function(e2) {
              var n2 = t[o2][1][e2];
              return s(n2 ? n2 : e2);
            }, f, f.exports, e, t, n, r);
          }
          return n[o2].exports;
        }
        var i = typeof require == "function" && require;
        for (var o = 0; o < r.length; o++)
          s(r[o]);
        return s;
      }({ 1: [function(_dereq_, module4, exports3) {
        "use strict";
        var _keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
        exports3.encode = function(input, utf8) {
          var output = "";
          var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
          var i = 0;
          while (i < input.length) {
            chr1 = input.charCodeAt(i++);
            chr2 = input.charCodeAt(i++);
            chr3 = input.charCodeAt(i++);
            enc1 = chr1 >> 2;
            enc2 = (chr1 & 3) << 4 | chr2 >> 4;
            enc3 = (chr2 & 15) << 2 | chr3 >> 6;
            enc4 = chr3 & 63;
            if (isNaN(chr2)) {
              enc3 = enc4 = 64;
            } else if (isNaN(chr3)) {
              enc4 = 64;
            }
            output = output + _keyStr.charAt(enc1) + _keyStr.charAt(enc2) + _keyStr.charAt(enc3) + _keyStr.charAt(enc4);
          }
          return output;
        };
        exports3.decode = function(input, utf8) {
          var output = "";
          var chr1, chr2, chr3;
          var enc1, enc2, enc3, enc4;
          var i = 0;
          input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
          while (i < input.length) {
            enc1 = _keyStr.indexOf(input.charAt(i++));
            enc2 = _keyStr.indexOf(input.charAt(i++));
            enc3 = _keyStr.indexOf(input.charAt(i++));
            enc4 = _keyStr.indexOf(input.charAt(i++));
            chr1 = enc1 << 2 | enc2 >> 4;
            chr2 = (enc2 & 15) << 4 | enc3 >> 2;
            chr3 = (enc3 & 3) << 6 | enc4;
            output = output + String.fromCharCode(chr1);
            if (enc3 != 64) {
              output = output + String.fromCharCode(chr2);
            }
            if (enc4 != 64) {
              output = output + String.fromCharCode(chr3);
            }
          }
          return output;
        };
      }, {}], 2: [function(_dereq_, module4, exports3) {
        "use strict";
        function CompressedObject() {
          this.compressedSize = 0;
          this.uncompressedSize = 0;
          this.crc32 = 0;
          this.compressionMethod = null;
          this.compressedContent = null;
        }
        CompressedObject.prototype = {
          getContent: function() {
            return null;
          },
          getCompressedContent: function() {
            return null;
          }
        };
        module4.exports = CompressedObject;
      }, {}], 3: [function(_dereq_, module4, exports3) {
        "use strict";
        exports3.STORE = {
          magic: "\0\0",
          compress: function(content) {
            return content;
          },
          uncompress: function(content) {
            return content;
          },
          compressInputType: null,
          uncompressInputType: null
        };
        exports3.DEFLATE = _dereq_("./flate");
      }, { "./flate": 8 }], 4: [function(_dereq_, module4, exports3) {
        "use strict";
        var utils = _dereq_("./utils");
        var table = [
          0,
          1996959894,
          3993919788,
          2567524794,
          124634137,
          1886057615,
          3915621685,
          2657392035,
          249268274,
          2044508324,
          3772115230,
          2547177864,
          162941995,
          2125561021,
          3887607047,
          2428444049,
          498536548,
          1789927666,
          4089016648,
          2227061214,
          450548861,
          1843258603,
          4107580753,
          2211677639,
          325883990,
          1684777152,
          4251122042,
          2321926636,
          335633487,
          1661365465,
          4195302755,
          2366115317,
          997073096,
          1281953886,
          3579855332,
          2724688242,
          1006888145,
          1258607687,
          3524101629,
          2768942443,
          901097722,
          1119000684,
          3686517206,
          2898065728,
          853044451,
          1172266101,
          3705015759,
          2882616665,
          651767980,
          1373503546,
          3369554304,
          3218104598,
          565507253,
          1454621731,
          3485111705,
          3099436303,
          671266974,
          1594198024,
          3322730930,
          2970347812,
          795835527,
          1483230225,
          3244367275,
          3060149565,
          1994146192,
          31158534,
          2563907772,
          4023717930,
          1907459465,
          112637215,
          2680153253,
          3904427059,
          2013776290,
          251722036,
          2517215374,
          3775830040,
          2137656763,
          141376813,
          2439277719,
          3865271297,
          1802195444,
          476864866,
          2238001368,
          4066508878,
          1812370925,
          453092731,
          2181625025,
          4111451223,
          1706088902,
          314042704,
          2344532202,
          4240017532,
          1658658271,
          366619977,
          2362670323,
          4224994405,
          1303535960,
          984961486,
          2747007092,
          3569037538,
          1256170817,
          1037604311,
          2765210733,
          3554079995,
          1131014506,
          879679996,
          2909243462,
          3663771856,
          1141124467,
          855842277,
          2852801631,
          3708648649,
          1342533948,
          654459306,
          3188396048,
          3373015174,
          1466479909,
          544179635,
          3110523913,
          3462522015,
          1591671054,
          702138776,
          2966460450,
          3352799412,
          1504918807,
          783551873,
          3082640443,
          3233442989,
          3988292384,
          2596254646,
          62317068,
          1957810842,
          3939845945,
          2647816111,
          81470997,
          1943803523,
          3814918930,
          2489596804,
          225274430,
          2053790376,
          3826175755,
          2466906013,
          167816743,
          2097651377,
          4027552580,
          2265490386,
          503444072,
          1762050814,
          4150417245,
          2154129355,
          426522225,
          1852507879,
          4275313526,
          2312317920,
          282753626,
          1742555852,
          4189708143,
          2394877945,
          397917763,
          1622183637,
          3604390888,
          2714866558,
          953729732,
          1340076626,
          3518719985,
          2797360999,
          1068828381,
          1219638859,
          3624741850,
          2936675148,
          906185462,
          1090812512,
          3747672003,
          2825379669,
          829329135,
          1181335161,
          3412177804,
          3160834842,
          628085408,
          1382605366,
          3423369109,
          3138078467,
          570562233,
          1426400815,
          3317316542,
          2998733608,
          733239954,
          1555261956,
          3268935591,
          3050360625,
          752459403,
          1541320221,
          2607071920,
          3965973030,
          1969922972,
          40735498,
          2617837225,
          3943577151,
          1913087877,
          83908371,
          2512341634,
          3803740692,
          2075208622,
          213261112,
          2463272603,
          3855990285,
          2094854071,
          198958881,
          2262029012,
          4057260610,
          1759359992,
          534414190,
          2176718541,
          4139329115,
          1873836001,
          414664567,
          2282248934,
          4279200368,
          1711684554,
          285281116,
          2405801727,
          4167216745,
          1634467795,
          376229701,
          2685067896,
          3608007406,
          1308918612,
          956543938,
          2808555105,
          3495958263,
          1231636301,
          1047427035,
          2932959818,
          3654703836,
          1088359270,
          936918e3,
          2847714899,
          3736837829,
          1202900863,
          817233897,
          3183342108,
          3401237130,
          1404277552,
          615818150,
          3134207493,
          3453421203,
          1423857449,
          601450431,
          3009837614,
          3294710456,
          1567103746,
          711928724,
          3020668471,
          3272380065,
          1510334235,
          755167117
        ];
        module4.exports = function crc32(input, crc) {
          if (typeof input === "undefined" || !input.length) {
            return 0;
          }
          var isArray = utils.getTypeOf(input) !== "string";
          if (typeof crc == "undefined") {
            crc = 0;
          }
          var x = 0;
          var y = 0;
          var b = 0;
          crc = crc ^ -1;
          for (var i = 0, iTop = input.length; i < iTop; i++) {
            b = isArray ? input[i] : input.charCodeAt(i);
            y = (crc ^ b) & 255;
            x = table[y];
            crc = crc >>> 8 ^ x;
          }
          return crc ^ -1;
        };
      }, { "./utils": 21 }], 5: [function(_dereq_, module4, exports3) {
        "use strict";
        var utils = _dereq_("./utils");
        function DataReader(data) {
          this.data = null;
          this.length = 0;
          this.index = 0;
        }
        DataReader.prototype = {
          checkOffset: function(offset) {
            this.checkIndex(this.index + offset);
          },
          checkIndex: function(newIndex) {
            if (this.length < newIndex || newIndex < 0) {
              throw new Error("End of data reached (data length = " + this.length + ", asked index = " + newIndex + "). Corrupted zip ?");
            }
          },
          setIndex: function(newIndex) {
            this.checkIndex(newIndex);
            this.index = newIndex;
          },
          skip: function(n) {
            this.setIndex(this.index + n);
          },
          byteAt: function(i) {
          },
          readInt: function(size) {
            var result = 0, i;
            this.checkOffset(size);
            for (i = this.index + size - 1; i >= this.index; i--) {
              result = (result << 8) + this.byteAt(i);
            }
            this.index += size;
            return result;
          },
          readString: function(size) {
            return utils.transformTo("string", this.readData(size));
          },
          readData: function(size) {
          },
          lastIndexOfSignature: function(sig) {
          },
          readDate: function() {
            var dostime = this.readInt(4);
            return new Date((dostime >> 25 & 127) + 1980, (dostime >> 21 & 15) - 1, dostime >> 16 & 31, dostime >> 11 & 31, dostime >> 5 & 63, (dostime & 31) << 1);
          }
        };
        module4.exports = DataReader;
      }, { "./utils": 21 }], 6: [function(_dereq_, module4, exports3) {
        "use strict";
        exports3.base64 = false;
        exports3.binary = false;
        exports3.dir = false;
        exports3.createFolders = false;
        exports3.date = null;
        exports3.compression = null;
        exports3.comment = null;
      }, {}], 7: [function(_dereq_, module4, exports3) {
        "use strict";
        var utils = _dereq_("./utils");
        exports3.string2binary = function(str) {
          return utils.string2binary(str);
        };
        exports3.string2Uint8Array = function(str) {
          return utils.transformTo("uint8array", str);
        };
        exports3.uint8Array2String = function(array) {
          return utils.transformTo("string", array);
        };
        exports3.string2Blob = function(str) {
          var buffer = utils.transformTo("arraybuffer", str);
          return utils.arrayBuffer2Blob(buffer);
        };
        exports3.arrayBuffer2Blob = function(buffer) {
          return utils.arrayBuffer2Blob(buffer);
        };
        exports3.transformTo = function(outputType, input) {
          return utils.transformTo(outputType, input);
        };
        exports3.getTypeOf = function(input) {
          return utils.getTypeOf(input);
        };
        exports3.checkSupport = function(type) {
          return utils.checkSupport(type);
        };
        exports3.MAX_VALUE_16BITS = utils.MAX_VALUE_16BITS;
        exports3.MAX_VALUE_32BITS = utils.MAX_VALUE_32BITS;
        exports3.pretty = function(str) {
          return utils.pretty(str);
        };
        exports3.findCompression = function(compressionMethod) {
          return utils.findCompression(compressionMethod);
        };
        exports3.isRegExp = function(object) {
          return utils.isRegExp(object);
        };
      }, { "./utils": 21 }], 8: [function(_dereq_, module4, exports3) {
        "use strict";
        var USE_TYPEDARRAY = typeof Uint8Array !== "undefined" && typeof Uint16Array !== "undefined" && typeof Uint32Array !== "undefined";
        var pako = _dereq_("pako");
        exports3.uncompressInputType = USE_TYPEDARRAY ? "uint8array" : "array";
        exports3.compressInputType = USE_TYPEDARRAY ? "uint8array" : "array";
        exports3.magic = "\b\0";
        exports3.compress = function(input) {
          return pako.deflateRaw(input);
        };
        exports3.uncompress = function(input) {
          return pako.inflateRaw(input);
        };
      }, { "pako": 24 }], 9: [function(_dereq_, module4, exports3) {
        "use strict";
        var base64 = _dereq_("./base64");
        function JSZipSync2(data, options) {
          if (!(this instanceof JSZipSync2))
            return new JSZipSync2(data, options);
          this.files = {};
          this.comment = null;
          this.root = "";
          if (data) {
            this.load(data, options);
          }
          this.clone = function() {
            var newObj = new JSZipSync2();
            for (var i in this) {
              if (typeof this[i] !== "function") {
                newObj[i] = this[i];
              }
            }
            return newObj;
          };
        }
        JSZipSync2.prototype = _dereq_("./object");
        JSZipSync2.prototype.load = _dereq_("./load");
        JSZipSync2.support = _dereq_("./support");
        JSZipSync2.defaults = _dereq_("./defaults");
        JSZipSync2.utils = _dereq_("./deprecatedPublicUtils");
        JSZipSync2.base64 = {
          encode: function(input) {
            return base64.encode(input);
          },
          decode: function(input) {
            return base64.decode(input);
          }
        };
        JSZipSync2.compressions = _dereq_("./compressions");
        module4.exports = JSZipSync2;
      }, { "./base64": 1, "./compressions": 3, "./defaults": 6, "./deprecatedPublicUtils": 7, "./load": 10, "./object": 13, "./support": 17 }], 10: [function(_dereq_, module4, exports3) {
        "use strict";
        var base64 = _dereq_("./base64");
        var ZipEntries = _dereq_("./zipEntries");
        module4.exports = function(data, options) {
          var files, zipEntries, i, input;
          options = options || {};
          if (options.base64) {
            data = base64.decode(data);
          }
          zipEntries = new ZipEntries(data, options);
          files = zipEntries.files;
          for (i = 0; i < files.length; i++) {
            input = files[i];
            this.file(input.fileName, input.decompressed, {
              binary: true,
              optimizedBinaryString: true,
              date: input.date,
              dir: input.dir,
              comment: input.fileComment.length ? input.fileComment : null,
              createFolders: options.createFolders
            });
          }
          if (zipEntries.zipComment.length) {
            this.comment = zipEntries.zipComment;
          }
          return this;
        };
      }, { "./base64": 1, "./zipEntries": 22 }], 11: [function(_dereq_, module4, exports3) {
        (function(Buffer2) {
          "use strict";
          var Buffer_from = function() {
          };
          if (typeof Buffer2 !== "undefined") {
            var nbfs = !Buffer2.from;
            if (!nbfs)
              try {
                Buffer2.from("foo", "utf8");
              } catch (e) {
                nbfs = true;
              }
            Buffer_from = nbfs ? function(buf, enc) {
              return enc ? new Buffer2(buf, enc) : new Buffer2(buf);
            } : Buffer2.from.bind(Buffer2);
            if (!Buffer2.alloc)
              Buffer2.alloc = function(n) {
                return new Buffer2(n);
              };
          }
          module4.exports = function(data, encoding) {
            return typeof data == "number" ? Buffer2.alloc(data) : Buffer_from(data, encoding);
          };
          module4.exports.test = function(b) {
            return Buffer2.isBuffer(b);
          };
        }).call(this, typeof Buffer !== "undefined" ? Buffer : void 0);
      }, {}], 12: [function(_dereq_, module4, exports3) {
        "use strict";
        var Uint8ArrayReader = _dereq_("./uint8ArrayReader");
        function NodeBufferReader(data) {
          this.data = data;
          this.length = this.data.length;
          this.index = 0;
        }
        NodeBufferReader.prototype = new Uint8ArrayReader();
        NodeBufferReader.prototype.readData = function(size) {
          this.checkOffset(size);
          var result = this.data.slice(this.index, this.index + size);
          this.index += size;
          return result;
        };
        module4.exports = NodeBufferReader;
      }, { "./uint8ArrayReader": 18 }], 13: [function(_dereq_, module4, exports3) {
        "use strict";
        var support = _dereq_("./support");
        var utils = _dereq_("./utils");
        var crc32 = _dereq_("./crc32");
        var signature = _dereq_("./signature");
        var defaults = _dereq_("./defaults");
        var base64 = _dereq_("./base64");
        var compressions = _dereq_("./compressions");
        var CompressedObject = _dereq_("./compressedObject");
        var nodeBuffer = _dereq_("./nodeBuffer");
        var utf8 = _dereq_("./utf8");
        var StringWriter = _dereq_("./stringWriter");
        var Uint8ArrayWriter = _dereq_("./uint8ArrayWriter");
        var getRawData = function(file) {
          if (file._data instanceof CompressedObject) {
            file._data = file._data.getContent();
            file.options.binary = true;
            file.options.base64 = false;
            if (utils.getTypeOf(file._data) === "uint8array") {
              var copy = file._data;
              file._data = new Uint8Array(copy.length);
              if (copy.length !== 0) {
                file._data.set(copy, 0);
              }
            }
          }
          return file._data;
        };
        var getBinaryData = function(file) {
          var result = getRawData(file), type = utils.getTypeOf(result);
          if (type === "string") {
            if (!file.options.binary) {
              if (support.nodebuffer) {
                return nodeBuffer(result, "utf-8");
              }
            }
            return file.asBinary();
          }
          return result;
        };
        var dataToString = function(asUTF8) {
          var result = getRawData(this);
          if (result === null || typeof result === "undefined") {
            return "";
          }
          if (this.options.base64) {
            result = base64.decode(result);
          }
          if (asUTF8 && this.options.binary) {
            result = out.utf8decode(result);
          } else {
            result = utils.transformTo("string", result);
          }
          if (!asUTF8 && !this.options.binary) {
            result = utils.transformTo("string", out.utf8encode(result));
          }
          return result;
        };
        var ZipObject = function(name2, data, options) {
          this.name = name2;
          this.dir = options.dir;
          this.date = options.date;
          this.comment = options.comment;
          this._data = data;
          this.options = options;
          this._initialMetadata = {
            dir: options.dir,
            date: options.date
          };
        };
        ZipObject.prototype = {
          asText: function() {
            return dataToString.call(this, true);
          },
          asBinary: function() {
            return dataToString.call(this, false);
          },
          asNodeBuffer: function() {
            var result = getBinaryData(this);
            return utils.transformTo("nodebuffer", result);
          },
          asUint8Array: function() {
            var result = getBinaryData(this);
            return utils.transformTo("uint8array", result);
          },
          asArrayBuffer: function() {
            return this.asUint8Array().buffer;
          }
        };
        var decToHex = function(dec, bytes) {
          var hex = "", i;
          for (i = 0; i < bytes; i++) {
            hex += String.fromCharCode(dec & 255);
            dec = dec >>> 8;
          }
          return hex;
        };
        var extend = function() {
          var result = {}, i, attr;
          for (i = 0; i < arguments.length; i++) {
            for (attr in arguments[i]) {
              if (arguments[i].hasOwnProperty(attr) && typeof result[attr] === "undefined") {
                result[attr] = arguments[i][attr];
              }
            }
          }
          return result;
        };
        var prepareFileAttrs = function(o) {
          o = o || {};
          if (o.base64 === true && (o.binary === null || o.binary === void 0)) {
            o.binary = true;
          }
          o = extend(o, defaults);
          o.date = o.date || new Date();
          if (o.compression !== null)
            o.compression = o.compression.toUpperCase();
          return o;
        };
        var fileAdd = function(name2, data, o) {
          var dataType = utils.getTypeOf(data), parent;
          o = prepareFileAttrs(o);
          if (o.createFolders && (parent = parentFolder(name2))) {
            folderAdd.call(this, parent, true);
          }
          if (o.dir || data === null || typeof data === "undefined") {
            o.base64 = false;
            o.binary = false;
            data = null;
          } else if (dataType === "string") {
            if (o.binary && !o.base64) {
              if (o.optimizedBinaryString !== true) {
                data = utils.string2binary(data);
              }
            }
          } else {
            o.base64 = false;
            o.binary = true;
            if (!dataType && !(data instanceof CompressedObject)) {
              throw new Error("The data of '" + name2 + "' is in an unsupported format !");
            }
            if (dataType === "arraybuffer") {
              data = utils.transformTo("uint8array", data);
            }
          }
          var object = new ZipObject(name2, data, o);
          this.files[name2] = object;
          return object;
        };
        var parentFolder = function(path) {
          if (path.slice(-1) == "/") {
            path = path.substring(0, path.length - 1);
          }
          var lastSlash = path.lastIndexOf("/");
          return lastSlash > 0 ? path.substring(0, lastSlash) : "";
        };
        var folderAdd = function(name2, createFolders) {
          if (name2.slice(-1) != "/") {
            name2 += "/";
          }
          createFolders = typeof createFolders !== "undefined" ? createFolders : false;
          if (!this.files[name2]) {
            fileAdd.call(this, name2, null, {
              dir: true,
              createFolders
            });
          }
          return this.files[name2];
        };
        var generateCompressedObjectFrom = function(file, compression) {
          var result = new CompressedObject(), content;
          if (file._data instanceof CompressedObject) {
            result.uncompressedSize = file._data.uncompressedSize;
            result.crc32 = file._data.crc32;
            if (result.uncompressedSize === 0 || file.dir) {
              compression = compressions["STORE"];
              result.compressedContent = "";
              result.crc32 = 0;
            } else if (file._data.compressionMethod === compression.magic) {
              result.compressedContent = file._data.getCompressedContent();
            } else {
              content = file._data.getContent();
              result.compressedContent = compression.compress(utils.transformTo(compression.compressInputType, content));
            }
          } else {
            content = getBinaryData(file);
            if (!content || content.length === 0 || file.dir) {
              compression = compressions["STORE"];
              content = "";
            }
            result.uncompressedSize = content.length;
            result.crc32 = crc32(content);
            result.compressedContent = compression.compress(utils.transformTo(compression.compressInputType, content));
          }
          result.compressedSize = result.compressedContent.length;
          result.compressionMethod = compression.magic;
          return result;
        };
        var generateZipParts = function(name2, file, compressedObject, offset) {
          var data = compressedObject.compressedContent, utfEncodedFileName = utils.transformTo("string", utf8.utf8encode(file.name)), comment = file.comment || "", utfEncodedComment = utils.transformTo("string", utf8.utf8encode(comment)), useUTF8ForFileName = utfEncodedFileName.length !== file.name.length, useUTF8ForComment = utfEncodedComment.length !== comment.length, o = file.options, dosTime, dosDate, extraFields = "", unicodePathExtraField = "", unicodeCommentExtraField = "", dir, date;
          if (file._initialMetadata.dir !== file.dir) {
            dir = file.dir;
          } else {
            dir = o.dir;
          }
          if (file._initialMetadata.date !== file.date) {
            date = file.date;
          } else {
            date = o.date;
          }
          dosTime = date.getHours();
          dosTime = dosTime << 6;
          dosTime = dosTime | date.getMinutes();
          dosTime = dosTime << 5;
          dosTime = dosTime | date.getSeconds() / 2;
          dosDate = date.getFullYear() - 1980;
          dosDate = dosDate << 4;
          dosDate = dosDate | date.getMonth() + 1;
          dosDate = dosDate << 5;
          dosDate = dosDate | date.getDate();
          if (useUTF8ForFileName) {
            unicodePathExtraField = decToHex(1, 1) + decToHex(crc32(utfEncodedFileName), 4) + utfEncodedFileName;
            extraFields += "up" + decToHex(unicodePathExtraField.length, 2) + unicodePathExtraField;
          }
          if (useUTF8ForComment) {
            unicodeCommentExtraField = decToHex(1, 1) + decToHex(this.crc32(utfEncodedComment), 4) + utfEncodedComment;
            extraFields += "uc" + decToHex(unicodeCommentExtraField.length, 2) + unicodeCommentExtraField;
          }
          var header = "";
          header += "\n\0";
          header += useUTF8ForFileName || useUTF8ForComment ? "\0\b" : "\0\0";
          header += compressedObject.compressionMethod;
          header += decToHex(dosTime, 2);
          header += decToHex(dosDate, 2);
          header += decToHex(compressedObject.crc32, 4);
          header += decToHex(compressedObject.compressedSize, 4);
          header += decToHex(compressedObject.uncompressedSize, 4);
          header += decToHex(utfEncodedFileName.length, 2);
          header += decToHex(extraFields.length, 2);
          var fileRecord = signature.LOCAL_FILE_HEADER + header + utfEncodedFileName + extraFields;
          var dirRecord = signature.CENTRAL_FILE_HEADER + "\0" + header + decToHex(utfEncodedComment.length, 2) + "\0\0\0\0" + (dir === true ? "\0\0\0" : "\0\0\0\0") + decToHex(offset, 4) + utfEncodedFileName + extraFields + utfEncodedComment;
          return {
            fileRecord,
            dirRecord,
            compressedObject
          };
        };
        var out = {
          load: function(stream, options) {
            throw new Error("Load method is not defined. Is the file jszip-load.js included ?");
          },
          filter: function(search) {
            var result = [], filename, relativePath, file, fileClone;
            for (filename in this.files) {
              if (!this.files.hasOwnProperty(filename)) {
                continue;
              }
              file = this.files[filename];
              fileClone = new ZipObject(file.name, file._data, extend(file.options));
              relativePath = filename.slice(this.root.length, filename.length);
              if (filename.slice(0, this.root.length) === this.root && search(relativePath, fileClone)) {
                result.push(fileClone);
              }
            }
            return result;
          },
          file: function(name2, data, o) {
            if (arguments.length === 1) {
              if (utils.isRegExp(name2)) {
                var regexp = name2;
                return this.filter(function(relativePath, file) {
                  return !file.dir && regexp.test(relativePath);
                });
              } else {
                return this.filter(function(relativePath, file) {
                  return !file.dir && relativePath === name2;
                })[0] || null;
              }
            } else {
              name2 = this.root + name2;
              fileAdd.call(this, name2, data, o);
            }
            return this;
          },
          folder: function(arg) {
            if (!arg) {
              return this;
            }
            if (utils.isRegExp(arg)) {
              return this.filter(function(relativePath, file) {
                return file.dir && arg.test(relativePath);
              });
            }
            var name2 = this.root + arg;
            var newFolder = folderAdd.call(this, name2);
            var ret = this.clone();
            ret.root = newFolder.name;
            return ret;
          },
          remove: function(name2) {
            name2 = this.root + name2;
            var file = this.files[name2];
            if (!file) {
              if (name2.slice(-1) != "/") {
                name2 += "/";
              }
              file = this.files[name2];
            }
            if (file && !file.dir) {
              delete this.files[name2];
            } else {
              var kids = this.filter(function(relativePath, file2) {
                return file2.name.slice(0, name2.length) === name2;
              });
              for (var i = 0; i < kids.length; i++) {
                delete this.files[kids[i].name];
              }
            }
            return this;
          },
          generate: function(options) {
            options = extend(options || {}, {
              base64: true,
              compression: "STORE",
              type: "base64",
              comment: null
            });
            utils.checkSupport(options.type);
            var zipData = [], localDirLength = 0, centralDirLength = 0, writer, i, utfEncodedComment = utils.transformTo("string", this.utf8encode(options.comment || this.comment || ""));
            for (var name2 in this.files) {
              if (!this.files.hasOwnProperty(name2)) {
                continue;
              }
              var file = this.files[name2];
              var compressionName = file.options.compression || options.compression.toUpperCase();
              var compression = compressions[compressionName];
              if (!compression) {
                throw new Error(compressionName + " is not a valid compression method !");
              }
              var compressedObject = generateCompressedObjectFrom.call(this, file, compression);
              var zipPart = generateZipParts.call(this, name2, file, compressedObject, localDirLength);
              localDirLength += zipPart.fileRecord.length + compressedObject.compressedSize;
              centralDirLength += zipPart.dirRecord.length;
              zipData.push(zipPart);
            }
            var dirEnd = "";
            dirEnd = signature.CENTRAL_DIRECTORY_END + "\0\0\0\0" + decToHex(zipData.length, 2) + decToHex(zipData.length, 2) + decToHex(centralDirLength, 4) + decToHex(localDirLength, 4) + decToHex(utfEncodedComment.length, 2) + utfEncodedComment;
            var typeName = options.type.toLowerCase();
            if (typeName === "uint8array" || typeName === "arraybuffer" || typeName === "blob" || typeName === "nodebuffer") {
              writer = new Uint8ArrayWriter(localDirLength + centralDirLength + dirEnd.length);
            } else {
              writer = new StringWriter(localDirLength + centralDirLength + dirEnd.length);
            }
            for (i = 0; i < zipData.length; i++) {
              writer.append(zipData[i].fileRecord);
              writer.append(zipData[i].compressedObject.compressedContent);
            }
            for (i = 0; i < zipData.length; i++) {
              writer.append(zipData[i].dirRecord);
            }
            writer.append(dirEnd);
            var zip = writer.finalize();
            switch (options.type.toLowerCase()) {
              case "uint8array":
              case "arraybuffer":
              case "nodebuffer":
                return utils.transformTo(options.type.toLowerCase(), zip);
              case "blob":
                return utils.arrayBuffer2Blob(utils.transformTo("arraybuffer", zip));
              case "base64":
                return options.base64 ? base64.encode(zip) : zip;
              default:
                return zip;
            }
          },
          crc32: function(input, crc) {
            return crc32(input, crc);
          },
          utf8encode: function(string) {
            return utils.transformTo("string", utf8.utf8encode(string));
          },
          utf8decode: function(input) {
            return utf8.utf8decode(input);
          }
        };
        module4.exports = out;
      }, { "./base64": 1, "./compressedObject": 2, "./compressions": 3, "./crc32": 4, "./defaults": 6, "./nodeBuffer": 11, "./signature": 14, "./stringWriter": 16, "./support": 17, "./uint8ArrayWriter": 19, "./utf8": 20, "./utils": 21 }], 14: [function(_dereq_, module4, exports3) {
        "use strict";
        exports3.LOCAL_FILE_HEADER = "PK";
        exports3.CENTRAL_FILE_HEADER = "PK";
        exports3.CENTRAL_DIRECTORY_END = "PK";
        exports3.ZIP64_CENTRAL_DIRECTORY_LOCATOR = "PK\x07";
        exports3.ZIP64_CENTRAL_DIRECTORY_END = "PK";
        exports3.DATA_DESCRIPTOR = "PK\x07\b";
      }, {}], 15: [function(_dereq_, module4, exports3) {
        "use strict";
        var DataReader = _dereq_("./dataReader");
        var utils = _dereq_("./utils");
        function StringReader(data, optimizedBinaryString) {
          this.data = data;
          if (!optimizedBinaryString) {
            this.data = utils.string2binary(this.data);
          }
          this.length = this.data.length;
          this.index = 0;
        }
        StringReader.prototype = new DataReader();
        StringReader.prototype.byteAt = function(i) {
          return this.data.charCodeAt(i);
        };
        StringReader.prototype.lastIndexOfSignature = function(sig) {
          return this.data.lastIndexOf(sig);
        };
        StringReader.prototype.readData = function(size) {
          this.checkOffset(size);
          var result = this.data.slice(this.index, this.index + size);
          this.index += size;
          return result;
        };
        module4.exports = StringReader;
      }, { "./dataReader": 5, "./utils": 21 }], 16: [function(_dereq_, module4, exports3) {
        "use strict";
        var utils = _dereq_("./utils");
        var StringWriter = function() {
          this.data = [];
        };
        StringWriter.prototype = {
          append: function(input) {
            input = utils.transformTo("string", input);
            this.data.push(input);
          },
          finalize: function() {
            return this.data.join("");
          }
        };
        module4.exports = StringWriter;
      }, { "./utils": 21 }], 17: [function(_dereq_, module4, exports3) {
        (function(Buffer2) {
          "use strict";
          exports3.base64 = true;
          exports3.array = true;
          exports3.string = true;
          exports3.arraybuffer = typeof ArrayBuffer !== "undefined" && typeof Uint8Array !== "undefined";
          exports3.nodebuffer = typeof Buffer2 !== "undefined";
          exports3.uint8array = typeof Uint8Array !== "undefined";
          if (typeof ArrayBuffer === "undefined") {
            exports3.blob = false;
          } else {
            var buffer = new ArrayBuffer(0);
            try {
              exports3.blob = new Blob([buffer], {
                type: "application/zip"
              }).size === 0;
            } catch (e) {
              try {
                var Builder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder;
                var builder = new Builder();
                builder.append(buffer);
                exports3.blob = builder.getBlob("application/zip").size === 0;
              } catch (e2) {
                exports3.blob = false;
              }
            }
          }
        }).call(this, typeof Buffer !== "undefined" ? Buffer : void 0);
      }, {}], 18: [function(_dereq_, module4, exports3) {
        "use strict";
        var DataReader = _dereq_("./dataReader");
        function Uint8ArrayReader(data) {
          if (data) {
            this.data = data;
            this.length = this.data.length;
            this.index = 0;
          }
        }
        Uint8ArrayReader.prototype = new DataReader();
        Uint8ArrayReader.prototype.byteAt = function(i) {
          return this.data[i];
        };
        Uint8ArrayReader.prototype.lastIndexOfSignature = function(sig) {
          var sig0 = sig.charCodeAt(0), sig1 = sig.charCodeAt(1), sig2 = sig.charCodeAt(2), sig3 = sig.charCodeAt(3);
          for (var i = this.length - 4; i >= 0; --i) {
            if (this.data[i] === sig0 && this.data[i + 1] === sig1 && this.data[i + 2] === sig2 && this.data[i + 3] === sig3) {
              return i;
            }
          }
          return -1;
        };
        Uint8ArrayReader.prototype.readData = function(size) {
          this.checkOffset(size);
          if (size === 0) {
            return new Uint8Array(0);
          }
          var result = this.data.subarray(this.index, this.index + size);
          this.index += size;
          return result;
        };
        module4.exports = Uint8ArrayReader;
      }, { "./dataReader": 5 }], 19: [function(_dereq_, module4, exports3) {
        "use strict";
        var utils = _dereq_("./utils");
        var Uint8ArrayWriter = function(length) {
          this.data = new Uint8Array(length);
          this.index = 0;
        };
        Uint8ArrayWriter.prototype = {
          append: function(input) {
            if (input.length !== 0) {
              input = utils.transformTo("uint8array", input);
              this.data.set(input, this.index);
              this.index += input.length;
            }
          },
          finalize: function() {
            return this.data;
          }
        };
        module4.exports = Uint8ArrayWriter;
      }, { "./utils": 21 }], 20: [function(_dereq_, module4, exports3) {
        "use strict";
        var utils = _dereq_("./utils");
        var support = _dereq_("./support");
        var nodeBuffer = _dereq_("./nodeBuffer");
        var _utf8len = new Array(256);
        for (var i = 0; i < 256; i++) {
          _utf8len[i] = i >= 252 ? 6 : i >= 248 ? 5 : i >= 240 ? 4 : i >= 224 ? 3 : i >= 192 ? 2 : 1;
        }
        _utf8len[254] = _utf8len[254] = 1;
        var string2buf = function(str) {
          var buf, c, c2, m_pos, i2, str_len = str.length, buf_len = 0;
          for (m_pos = 0; m_pos < str_len; m_pos++) {
            c = str.charCodeAt(m_pos);
            if ((c & 64512) === 55296 && m_pos + 1 < str_len) {
              c2 = str.charCodeAt(m_pos + 1);
              if ((c2 & 64512) === 56320) {
                c = 65536 + (c - 55296 << 10) + (c2 - 56320);
                m_pos++;
              }
            }
            buf_len += c < 128 ? 1 : c < 2048 ? 2 : c < 65536 ? 3 : 4;
          }
          if (support.uint8array) {
            buf = new Uint8Array(buf_len);
          } else {
            buf = new Array(buf_len);
          }
          for (i2 = 0, m_pos = 0; i2 < buf_len; m_pos++) {
            c = str.charCodeAt(m_pos);
            if ((c & 64512) === 55296 && m_pos + 1 < str_len) {
              c2 = str.charCodeAt(m_pos + 1);
              if ((c2 & 64512) === 56320) {
                c = 65536 + (c - 55296 << 10) + (c2 - 56320);
                m_pos++;
              }
            }
            if (c < 128) {
              buf[i2++] = c;
            } else if (c < 2048) {
              buf[i2++] = 192 | c >>> 6;
              buf[i2++] = 128 | c & 63;
            } else if (c < 65536) {
              buf[i2++] = 224 | c >>> 12;
              buf[i2++] = 128 | c >>> 6 & 63;
              buf[i2++] = 128 | c & 63;
            } else {
              buf[i2++] = 240 | c >>> 18;
              buf[i2++] = 128 | c >>> 12 & 63;
              buf[i2++] = 128 | c >>> 6 & 63;
              buf[i2++] = 128 | c & 63;
            }
          }
          return buf;
        };
        var utf8border = function(buf, max) {
          var pos;
          max = max || buf.length;
          if (max > buf.length) {
            max = buf.length;
          }
          pos = max - 1;
          while (pos >= 0 && (buf[pos] & 192) === 128) {
            pos--;
          }
          if (pos < 0) {
            return max;
          }
          if (pos === 0) {
            return max;
          }
          return pos + _utf8len[buf[pos]] > max ? pos : max;
        };
        var buf2string = function(buf) {
          var str, i2, out, c, c_len;
          var len = buf.length;
          var utf16buf = new Array(len * 2);
          for (out = 0, i2 = 0; i2 < len; ) {
            c = buf[i2++];
            if (c < 128) {
              utf16buf[out++] = c;
              continue;
            }
            c_len = _utf8len[c];
            if (c_len > 4) {
              utf16buf[out++] = 65533;
              i2 += c_len - 1;
              continue;
            }
            c &= c_len === 2 ? 31 : c_len === 3 ? 15 : 7;
            while (c_len > 1 && i2 < len) {
              c = c << 6 | buf[i2++] & 63;
              c_len--;
            }
            if (c_len > 1) {
              utf16buf[out++] = 65533;
              continue;
            }
            if (c < 65536) {
              utf16buf[out++] = c;
            } else {
              c -= 65536;
              utf16buf[out++] = 55296 | c >> 10 & 1023;
              utf16buf[out++] = 56320 | c & 1023;
            }
          }
          if (utf16buf.length !== out) {
            if (utf16buf.subarray) {
              utf16buf = utf16buf.subarray(0, out);
            } else {
              utf16buf.length = out;
            }
          }
          return utils.applyFromCharCode(utf16buf);
        };
        exports3.utf8encode = function utf8encode(str) {
          if (support.nodebuffer) {
            return nodeBuffer(str, "utf-8");
          }
          return string2buf(str);
        };
        exports3.utf8decode = function utf8decode(buf) {
          if (support.nodebuffer) {
            return utils.transformTo("nodebuffer", buf).toString("utf-8");
          }
          buf = utils.transformTo(support.uint8array ? "uint8array" : "array", buf);
          var result = [], k = 0, len = buf.length, chunk = 65536;
          while (k < len) {
            var nextBoundary = utf8border(buf, Math.min(k + chunk, len));
            if (support.uint8array) {
              result.push(buf2string(buf.subarray(k, nextBoundary)));
            } else {
              result.push(buf2string(buf.slice(k, nextBoundary)));
            }
            k = nextBoundary;
          }
          return result.join("");
        };
      }, { "./nodeBuffer": 11, "./support": 17, "./utils": 21 }], 21: [function(_dereq_, module4, exports3) {
        "use strict";
        var support = _dereq_("./support");
        var compressions = _dereq_("./compressions");
        var nodeBuffer = _dereq_("./nodeBuffer");
        exports3.string2binary = function(str) {
          var result = "";
          for (var i = 0; i < str.length; i++) {
            result += String.fromCharCode(str.charCodeAt(i) & 255);
          }
          return result;
        };
        exports3.arrayBuffer2Blob = function(buffer) {
          exports3.checkSupport("blob");
          try {
            return new Blob([buffer], {
              type: "application/zip"
            });
          } catch (e) {
            try {
              var Builder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder;
              var builder = new Builder();
              builder.append(buffer);
              return builder.getBlob("application/zip");
            } catch (e2) {
              throw new Error("Bug : can't construct the Blob.");
            }
          }
        };
        function identity(input) {
          return input;
        }
        function stringToArrayLike(str, array) {
          for (var i = 0; i < str.length; ++i) {
            array[i] = str.charCodeAt(i) & 255;
          }
          return array;
        }
        function arrayLikeToString(array) {
          var chunk = 65536;
          var result = [], len = array.length, type = exports3.getTypeOf(array), k = 0, canUseApply = true;
          try {
            switch (type) {
              case "uint8array":
                String.fromCharCode.apply(null, new Uint8Array(0));
                break;
              case "nodebuffer":
                String.fromCharCode.apply(null, nodeBuffer(0));
                break;
            }
          } catch (e) {
            canUseApply = false;
          }
          if (!canUseApply) {
            var resultStr = "";
            for (var i = 0; i < array.length; i++) {
              resultStr += String.fromCharCode(array[i]);
            }
            return resultStr;
          }
          while (k < len && chunk > 1) {
            try {
              if (type === "array" || type === "nodebuffer") {
                result.push(String.fromCharCode.apply(null, array.slice(k, Math.min(k + chunk, len))));
              } else {
                result.push(String.fromCharCode.apply(null, array.subarray(k, Math.min(k + chunk, len))));
              }
              k += chunk;
            } catch (e) {
              chunk = Math.floor(chunk / 2);
            }
          }
          return result.join("");
        }
        exports3.applyFromCharCode = arrayLikeToString;
        function arrayLikeToArrayLike(arrayFrom, arrayTo) {
          for (var i = 0; i < arrayFrom.length; i++) {
            arrayTo[i] = arrayFrom[i];
          }
          return arrayTo;
        }
        var transform = {};
        transform["string"] = {
          "string": identity,
          "array": function(input) {
            return stringToArrayLike(input, new Array(input.length));
          },
          "arraybuffer": function(input) {
            return transform["string"]["uint8array"](input).buffer;
          },
          "uint8array": function(input) {
            return stringToArrayLike(input, new Uint8Array(input.length));
          },
          "nodebuffer": function(input) {
            return stringToArrayLike(input, nodeBuffer(input.length));
          }
        };
        transform["array"] = {
          "string": arrayLikeToString,
          "array": identity,
          "arraybuffer": function(input) {
            return new Uint8Array(input).buffer;
          },
          "uint8array": function(input) {
            return new Uint8Array(input);
          },
          "nodebuffer": function(input) {
            return nodeBuffer(input);
          }
        };
        transform["arraybuffer"] = {
          "string": function(input) {
            return arrayLikeToString(new Uint8Array(input));
          },
          "array": function(input) {
            return arrayLikeToArrayLike(new Uint8Array(input), new Array(input.byteLength));
          },
          "arraybuffer": identity,
          "uint8array": function(input) {
            return new Uint8Array(input);
          },
          "nodebuffer": function(input) {
            return nodeBuffer(new Uint8Array(input));
          }
        };
        transform["uint8array"] = {
          "string": arrayLikeToString,
          "array": function(input) {
            return arrayLikeToArrayLike(input, new Array(input.length));
          },
          "arraybuffer": function(input) {
            return input.buffer;
          },
          "uint8array": identity,
          "nodebuffer": function(input) {
            return nodeBuffer(input);
          }
        };
        transform["nodebuffer"] = {
          "string": arrayLikeToString,
          "array": function(input) {
            return arrayLikeToArrayLike(input, new Array(input.length));
          },
          "arraybuffer": function(input) {
            return transform["nodebuffer"]["uint8array"](input).buffer;
          },
          "uint8array": function(input) {
            return arrayLikeToArrayLike(input, new Uint8Array(input.length));
          },
          "nodebuffer": identity
        };
        exports3.transformTo = function(outputType, input) {
          if (!input) {
            input = "";
          }
          if (!outputType) {
            return input;
          }
          exports3.checkSupport(outputType);
          var inputType = exports3.getTypeOf(input);
          var result = transform[inputType][outputType](input);
          return result;
        };
        exports3.getTypeOf = function(input) {
          if (typeof input === "string") {
            return "string";
          }
          if (Object.prototype.toString.call(input) === "[object Array]") {
            return "array";
          }
          if (support.nodebuffer && nodeBuffer.test(input)) {
            return "nodebuffer";
          }
          if (support.uint8array && input instanceof Uint8Array) {
            return "uint8array";
          }
          if (support.arraybuffer && input instanceof ArrayBuffer) {
            return "arraybuffer";
          }
        };
        exports3.checkSupport = function(type) {
          var supported = support[type.toLowerCase()];
          if (!supported) {
            throw new Error(type + " is not supported by this browser");
          }
        };
        exports3.MAX_VALUE_16BITS = 65535;
        exports3.MAX_VALUE_32BITS = -1;
        exports3.pretty = function(str) {
          var res = "", code, i;
          for (i = 0; i < (str || "").length; i++) {
            code = str.charCodeAt(i);
            res += "\\x" + (code < 16 ? "0" : "") + code.toString(16).toUpperCase();
          }
          return res;
        };
        exports3.findCompression = function(compressionMethod) {
          for (var method in compressions) {
            if (!compressions.hasOwnProperty(method)) {
              continue;
            }
            if (compressions[method].magic === compressionMethod) {
              return compressions[method];
            }
          }
          return null;
        };
        exports3.isRegExp = function(object) {
          return Object.prototype.toString.call(object) === "[object RegExp]";
        };
      }, { "./compressions": 3, "./nodeBuffer": 11, "./support": 17 }], 22: [function(_dereq_, module4, exports3) {
        "use strict";
        var StringReader = _dereq_("./stringReader");
        var NodeBufferReader = _dereq_("./nodeBufferReader");
        var Uint8ArrayReader = _dereq_("./uint8ArrayReader");
        var utils = _dereq_("./utils");
        var sig = _dereq_("./signature");
        var ZipEntry = _dereq_("./zipEntry");
        var support = _dereq_("./support");
        var jszipProto = _dereq_("./object");
        function ZipEntries(data, loadOptions) {
          this.files = [];
          this.loadOptions = loadOptions;
          if (data) {
            this.load(data);
          }
        }
        ZipEntries.prototype = {
          checkSignature: function(expectedSignature) {
            var signature = this.reader.readString(4);
            if (signature !== expectedSignature) {
              throw new Error("Corrupted zip or bug : unexpected signature (" + utils.pretty(signature) + ", expected " + utils.pretty(expectedSignature) + ")");
            }
          },
          readBlockEndOfCentral: function() {
            this.diskNumber = this.reader.readInt(2);
            this.diskWithCentralDirStart = this.reader.readInt(2);
            this.centralDirRecordsOnThisDisk = this.reader.readInt(2);
            this.centralDirRecords = this.reader.readInt(2);
            this.centralDirSize = this.reader.readInt(4);
            this.centralDirOffset = this.reader.readInt(4);
            this.zipCommentLength = this.reader.readInt(2);
            this.zipComment = this.reader.readString(this.zipCommentLength);
            this.zipComment = jszipProto.utf8decode(this.zipComment);
          },
          readBlockZip64EndOfCentral: function() {
            this.zip64EndOfCentralSize = this.reader.readInt(8);
            this.versionMadeBy = this.reader.readString(2);
            this.versionNeeded = this.reader.readInt(2);
            this.diskNumber = this.reader.readInt(4);
            this.diskWithCentralDirStart = this.reader.readInt(4);
            this.centralDirRecordsOnThisDisk = this.reader.readInt(8);
            this.centralDirRecords = this.reader.readInt(8);
            this.centralDirSize = this.reader.readInt(8);
            this.centralDirOffset = this.reader.readInt(8);
            this.zip64ExtensibleData = {};
            var extraDataSize = this.zip64EndOfCentralSize - 44, index = 0, extraFieldId, extraFieldLength, extraFieldValue;
            while (index < extraDataSize) {
              extraFieldId = this.reader.readInt(2);
              extraFieldLength = this.reader.readInt(4);
              extraFieldValue = this.reader.readString(extraFieldLength);
              this.zip64ExtensibleData[extraFieldId] = {
                id: extraFieldId,
                length: extraFieldLength,
                value: extraFieldValue
              };
            }
          },
          readBlockZip64EndOfCentralLocator: function() {
            this.diskWithZip64CentralDirStart = this.reader.readInt(4);
            this.relativeOffsetEndOfZip64CentralDir = this.reader.readInt(8);
            this.disksCount = this.reader.readInt(4);
            if (this.disksCount > 1) {
              throw new Error("Multi-volumes zip are not supported");
            }
          },
          readLocalFiles: function() {
            var i, file;
            for (i = 0; i < this.files.length; i++) {
              file = this.files[i];
              this.reader.setIndex(file.localHeaderOffset);
              this.checkSignature(sig.LOCAL_FILE_HEADER);
              file.readLocalPart(this.reader);
              file.handleUTF8();
            }
          },
          readCentralDir: function() {
            var file;
            this.reader.setIndex(this.centralDirOffset);
            while (this.reader.readString(4) === sig.CENTRAL_FILE_HEADER) {
              file = new ZipEntry({
                zip64: this.zip64
              }, this.loadOptions);
              file.readCentralPart(this.reader);
              this.files.push(file);
            }
          },
          readEndOfCentral: function() {
            var offset = this.reader.lastIndexOfSignature(sig.CENTRAL_DIRECTORY_END);
            if (offset === -1) {
              throw new Error("Corrupted zip : can't find end of central directory");
            }
            this.reader.setIndex(offset);
            this.checkSignature(sig.CENTRAL_DIRECTORY_END);
            this.readBlockEndOfCentral();
            if (this.diskNumber === utils.MAX_VALUE_16BITS || this.diskWithCentralDirStart === utils.MAX_VALUE_16BITS || this.centralDirRecordsOnThisDisk === utils.MAX_VALUE_16BITS || this.centralDirRecords === utils.MAX_VALUE_16BITS || this.centralDirSize === utils.MAX_VALUE_32BITS || this.centralDirOffset === utils.MAX_VALUE_32BITS) {
              this.zip64 = true;
              offset = this.reader.lastIndexOfSignature(sig.ZIP64_CENTRAL_DIRECTORY_LOCATOR);
              if (offset === -1) {
                throw new Error("Corrupted zip : can't find the ZIP64 end of central directory locator");
              }
              this.reader.setIndex(offset);
              this.checkSignature(sig.ZIP64_CENTRAL_DIRECTORY_LOCATOR);
              this.readBlockZip64EndOfCentralLocator();
              this.reader.setIndex(this.relativeOffsetEndOfZip64CentralDir);
              this.checkSignature(sig.ZIP64_CENTRAL_DIRECTORY_END);
              this.readBlockZip64EndOfCentral();
            }
          },
          prepareReader: function(data) {
            var type = utils.getTypeOf(data);
            if (type === "string" && !support.uint8array) {
              this.reader = new StringReader(data, this.loadOptions.optimizedBinaryString);
            } else if (type === "nodebuffer") {
              this.reader = new NodeBufferReader(data);
            } else {
              this.reader = new Uint8ArrayReader(utils.transformTo("uint8array", data));
            }
          },
          load: function(data) {
            this.prepareReader(data);
            this.readEndOfCentral();
            this.readCentralDir();
            this.readLocalFiles();
          }
        };
        module4.exports = ZipEntries;
      }, { "./nodeBufferReader": 12, "./object": 13, "./signature": 14, "./stringReader": 15, "./support": 17, "./uint8ArrayReader": 18, "./utils": 21, "./zipEntry": 23 }], 23: [function(_dereq_, module4, exports3) {
        "use strict";
        var StringReader = _dereq_("./stringReader");
        var utils = _dereq_("./utils");
        var CompressedObject = _dereq_("./compressedObject");
        var jszipProto = _dereq_("./object");
        function ZipEntry(options, loadOptions) {
          this.options = options;
          this.loadOptions = loadOptions;
        }
        ZipEntry.prototype = {
          isEncrypted: function() {
            return (this.bitFlag & 1) === 1;
          },
          useUTF8: function() {
            return (this.bitFlag & 2048) === 2048;
          },
          prepareCompressedContent: function(reader, from, length) {
            return function() {
              var previousIndex = reader.index;
              reader.setIndex(from);
              var compressedFileData = reader.readData(length);
              reader.setIndex(previousIndex);
              return compressedFileData;
            };
          },
          prepareContent: function(reader, from, length, compression, uncompressedSize) {
            return function() {
              var compressedFileData = utils.transformTo(compression.uncompressInputType, this.getCompressedContent());
              var uncompressedFileData = compression.uncompress(compressedFileData);
              if (uncompressedFileData.length !== uncompressedSize) {
                throw new Error("Bug : uncompressed data size mismatch");
              }
              return uncompressedFileData;
            };
          },
          readLocalPart: function(reader) {
            var compression, localExtraFieldsLength;
            reader.skip(22);
            this.fileNameLength = reader.readInt(2);
            localExtraFieldsLength = reader.readInt(2);
            this.fileName = reader.readString(this.fileNameLength);
            reader.skip(localExtraFieldsLength);
            if (this.compressedSize == -1 || this.uncompressedSize == -1) {
              throw new Error("Bug or corrupted zip : didn't get enough informations from the central directory (compressedSize == -1 || uncompressedSize == -1)");
            }
            compression = utils.findCompression(this.compressionMethod);
            if (compression === null) {
              throw new Error("Corrupted zip : compression " + utils.pretty(this.compressionMethod) + " unknown (inner file : " + this.fileName + ")");
            }
            this.decompressed = new CompressedObject();
            this.decompressed.compressedSize = this.compressedSize;
            this.decompressed.uncompressedSize = this.uncompressedSize;
            this.decompressed.crc32 = this.crc32;
            this.decompressed.compressionMethod = this.compressionMethod;
            this.decompressed.getCompressedContent = this.prepareCompressedContent(reader, reader.index, this.compressedSize, compression);
            this.decompressed.getContent = this.prepareContent(reader, reader.index, this.compressedSize, compression, this.uncompressedSize);
            if (this.loadOptions.checkCRC32) {
              this.decompressed = utils.transformTo("string", this.decompressed.getContent());
              if (jszipProto.crc32(this.decompressed) !== this.crc32) {
                throw new Error("Corrupted zip : CRC32 mismatch");
              }
            }
          },
          readCentralPart: function(reader) {
            this.versionMadeBy = reader.readString(2);
            this.versionNeeded = reader.readInt(2);
            this.bitFlag = reader.readInt(2);
            this.compressionMethod = reader.readString(2);
            this.date = reader.readDate();
            this.crc32 = reader.readInt(4);
            this.compressedSize = reader.readInt(4);
            this.uncompressedSize = reader.readInt(4);
            this.fileNameLength = reader.readInt(2);
            this.extraFieldsLength = reader.readInt(2);
            this.fileCommentLength = reader.readInt(2);
            this.diskNumberStart = reader.readInt(2);
            this.internalFileAttributes = reader.readInt(2);
            this.externalFileAttributes = reader.readInt(4);
            this.localHeaderOffset = reader.readInt(4);
            if (this.isEncrypted()) {
              throw new Error("Encrypted zip are not supported");
            }
            this.fileName = reader.readString(this.fileNameLength);
            this.readExtraFields(reader);
            this.parseZIP64ExtraField(reader);
            this.fileComment = reader.readString(this.fileCommentLength);
            this.dir = this.externalFileAttributes & 16 ? true : false;
          },
          parseZIP64ExtraField: function(reader) {
            if (!this.extraFields[1]) {
              return;
            }
            var extraReader = new StringReader(this.extraFields[1].value);
            if (this.uncompressedSize === utils.MAX_VALUE_32BITS) {
              this.uncompressedSize = extraReader.readInt(8);
            }
            if (this.compressedSize === utils.MAX_VALUE_32BITS) {
              this.compressedSize = extraReader.readInt(8);
            }
            if (this.localHeaderOffset === utils.MAX_VALUE_32BITS) {
              this.localHeaderOffset = extraReader.readInt(8);
            }
            if (this.diskNumberStart === utils.MAX_VALUE_32BITS) {
              this.diskNumberStart = extraReader.readInt(4);
            }
          },
          readExtraFields: function(reader) {
            var start = reader.index, extraFieldId, extraFieldLength, extraFieldValue;
            this.extraFields = this.extraFields || {};
            while (reader.index < start + this.extraFieldsLength) {
              extraFieldId = reader.readInt(2);
              extraFieldLength = reader.readInt(2);
              extraFieldValue = reader.readString(extraFieldLength);
              this.extraFields[extraFieldId] = {
                id: extraFieldId,
                length: extraFieldLength,
                value: extraFieldValue
              };
            }
          },
          handleUTF8: function() {
            if (this.useUTF8()) {
              this.fileName = jszipProto.utf8decode(this.fileName);
              this.fileComment = jszipProto.utf8decode(this.fileComment);
            } else {
              var upath = this.findExtraFieldUnicodePath();
              if (upath !== null) {
                this.fileName = upath;
              }
              var ucomment = this.findExtraFieldUnicodeComment();
              if (ucomment !== null) {
                this.fileComment = ucomment;
              }
            }
          },
          findExtraFieldUnicodePath: function() {
            var upathField = this.extraFields[28789];
            if (upathField) {
              var extraReader = new StringReader(upathField.value);
              if (extraReader.readInt(1) !== 1) {
                return null;
              }
              if (jszipProto.crc32(this.fileName) !== extraReader.readInt(4)) {
                return null;
              }
              return jszipProto.utf8decode(extraReader.readString(upathField.length - 5));
            }
            return null;
          },
          findExtraFieldUnicodeComment: function() {
            var ucommentField = this.extraFields[25461];
            if (ucommentField) {
              var extraReader = new StringReader(ucommentField.value);
              if (extraReader.readInt(1) !== 1) {
                return null;
              }
              if (jszipProto.crc32(this.fileComment) !== extraReader.readInt(4)) {
                return null;
              }
              return jszipProto.utf8decode(extraReader.readString(ucommentField.length - 5));
            }
            return null;
          }
        };
        module4.exports = ZipEntry;
      }, { "./compressedObject": 2, "./object": 13, "./stringReader": 15, "./utils": 21 }], 24: [function(_dereq_, module4, exports3) {
        "use strict";
        var assign2 = _dereq_("./lib/utils/common").assign;
        var deflate = _dereq_("./lib/deflate");
        var inflate = _dereq_("./lib/inflate");
        var constants = _dereq_("./lib/zlib/constants");
        var pako = {};
        assign2(pako, deflate, inflate, constants);
        module4.exports = pako;
      }, { "./lib/deflate": 25, "./lib/inflate": 26, "./lib/utils/common": 27, "./lib/zlib/constants": 30 }], 25: [function(_dereq_, module4, exports3) {
        "use strict";
        var zlib_deflate = _dereq_("./zlib/deflate.js");
        var utils = _dereq_("./utils/common");
        var strings = _dereq_("./utils/strings");
        var msg = _dereq_("./zlib/messages");
        var zstream = _dereq_("./zlib/zstream");
        var Z_NO_FLUSH = 0;
        var Z_FINISH = 4;
        var Z_OK = 0;
        var Z_STREAM_END = 1;
        var Z_DEFAULT_COMPRESSION = -1;
        var Z_DEFAULT_STRATEGY = 0;
        var Z_DEFLATED = 8;
        var Deflate = function(options) {
          this.options = utils.assign({
            level: Z_DEFAULT_COMPRESSION,
            method: Z_DEFLATED,
            chunkSize: 16384,
            windowBits: 15,
            memLevel: 8,
            strategy: Z_DEFAULT_STRATEGY,
            to: ""
          }, options || {});
          var opt = this.options;
          if (opt.raw && opt.windowBits > 0) {
            opt.windowBits = -opt.windowBits;
          } else if (opt.gzip && opt.windowBits > 0 && opt.windowBits < 16) {
            opt.windowBits += 16;
          }
          this.err = 0;
          this.msg = "";
          this.ended = false;
          this.chunks = [];
          this.strm = new zstream();
          this.strm.avail_out = 0;
          var status = zlib_deflate.deflateInit2(this.strm, opt.level, opt.method, opt.windowBits, opt.memLevel, opt.strategy);
          if (status !== Z_OK) {
            throw new Error(msg[status]);
          }
          if (opt.header) {
            zlib_deflate.deflateSetHeader(this.strm, opt.header);
          }
        };
        Deflate.prototype.push = function(data, mode) {
          var strm = this.strm;
          var chunkSize = this.options.chunkSize;
          var status, _mode;
          if (this.ended) {
            return false;
          }
          _mode = mode === ~~mode ? mode : mode === true ? Z_FINISH : Z_NO_FLUSH;
          if (typeof data === "string") {
            strm.input = strings.string2buf(data);
          } else {
            strm.input = data;
          }
          strm.next_in = 0;
          strm.avail_in = strm.input.length;
          do {
            if (strm.avail_out === 0) {
              strm.output = new utils.Buf8(chunkSize);
              strm.next_out = 0;
              strm.avail_out = chunkSize;
            }
            status = zlib_deflate.deflate(strm, _mode);
            if (status !== Z_STREAM_END && status !== Z_OK) {
              this.onEnd(status);
              this.ended = true;
              return false;
            }
            if (strm.avail_out === 0 || strm.avail_in === 0 && _mode === Z_FINISH) {
              if (this.options.to === "string") {
                this.onData(strings.buf2binstring(utils.shrinkBuf(strm.output, strm.next_out)));
              } else {
                this.onData(utils.shrinkBuf(strm.output, strm.next_out));
              }
            }
          } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== Z_STREAM_END);
          if (_mode === Z_FINISH) {
            status = zlib_deflate.deflateEnd(this.strm);
            this.onEnd(status);
            this.ended = true;
            return status === Z_OK;
          }
          return true;
        };
        Deflate.prototype.onData = function(chunk) {
          this.chunks.push(chunk);
        };
        Deflate.prototype.onEnd = function(status) {
          if (status === Z_OK) {
            if (this.options.to === "string") {
              this.result = this.chunks.join("");
            } else {
              this.result = utils.flattenChunks(this.chunks);
            }
          }
          this.chunks = [];
          this.err = status;
          this.msg = this.strm.msg;
        };
        function deflate(input, options) {
          var deflator = new Deflate(options);
          deflator.push(input, true);
          if (deflator.err) {
            throw deflator.msg;
          }
          return deflator.result;
        }
        function deflateRaw(input, options) {
          options = options || {};
          options.raw = true;
          return deflate(input, options);
        }
        function gzip(input, options) {
          options = options || {};
          options.gzip = true;
          return deflate(input, options);
        }
        exports3.Deflate = Deflate;
        exports3.deflate = deflate;
        exports3.deflateRaw = deflateRaw;
        exports3.gzip = gzip;
      }, { "./utils/common": 27, "./utils/strings": 28, "./zlib/deflate.js": 32, "./zlib/messages": 37, "./zlib/zstream": 39 }], 26: [function(_dereq_, module4, exports3) {
        "use strict";
        var zlib_inflate = _dereq_("./zlib/inflate.js");
        var utils = _dereq_("./utils/common");
        var strings = _dereq_("./utils/strings");
        var c = _dereq_("./zlib/constants");
        var msg = _dereq_("./zlib/messages");
        var zstream = _dereq_("./zlib/zstream");
        var gzheader = _dereq_("./zlib/gzheader");
        var Inflate = function(options) {
          this.options = utils.assign({
            chunkSize: 16384,
            windowBits: 0,
            to: ""
          }, options || {});
          var opt = this.options;
          if (opt.raw && opt.windowBits >= 0 && opt.windowBits < 16) {
            opt.windowBits = -opt.windowBits;
            if (opt.windowBits === 0) {
              opt.windowBits = -15;
            }
          }
          if (opt.windowBits >= 0 && opt.windowBits < 16 && !(options && options.windowBits)) {
            opt.windowBits += 32;
          }
          if (opt.windowBits > 15 && opt.windowBits < 48) {
            if ((opt.windowBits & 15) === 0) {
              opt.windowBits |= 15;
            }
          }
          this.err = 0;
          this.msg = "";
          this.ended = false;
          this.chunks = [];
          this.strm = new zstream();
          this.strm.avail_out = 0;
          var status = zlib_inflate.inflateInit2(this.strm, opt.windowBits);
          if (status !== c.Z_OK) {
            throw new Error(msg[status]);
          }
          this.header = new gzheader();
          zlib_inflate.inflateGetHeader(this.strm, this.header);
        };
        Inflate.prototype.push = function(data, mode) {
          var strm = this.strm;
          var chunkSize = this.options.chunkSize;
          var status, _mode;
          var next_out_utf8, tail, utf8str;
          if (this.ended) {
            return false;
          }
          _mode = mode === ~~mode ? mode : mode === true ? c.Z_FINISH : c.Z_NO_FLUSH;
          if (typeof data === "string") {
            strm.input = strings.binstring2buf(data);
          } else {
            strm.input = data;
          }
          strm.next_in = 0;
          strm.avail_in = strm.input.length;
          do {
            if (strm.avail_out === 0) {
              strm.output = new utils.Buf8(chunkSize);
              strm.next_out = 0;
              strm.avail_out = chunkSize;
            }
            status = zlib_inflate.inflate(strm, c.Z_NO_FLUSH);
            if (status !== c.Z_STREAM_END && status !== c.Z_OK) {
              this.onEnd(status);
              this.ended = true;
              return false;
            }
            if (strm.next_out) {
              if (strm.avail_out === 0 || status === c.Z_STREAM_END || strm.avail_in === 0 && _mode === c.Z_FINISH) {
                if (this.options.to === "string") {
                  next_out_utf8 = strings.utf8border(strm.output, strm.next_out);
                  tail = strm.next_out - next_out_utf8;
                  utf8str = strings.buf2string(strm.output, next_out_utf8);
                  strm.next_out = tail;
                  strm.avail_out = chunkSize - tail;
                  if (tail) {
                    utils.arraySet(strm.output, strm.output, next_out_utf8, tail, 0);
                  }
                  this.onData(utf8str);
                } else {
                  this.onData(utils.shrinkBuf(strm.output, strm.next_out));
                }
              }
            }
          } while (strm.avail_in > 0 && status !== c.Z_STREAM_END);
          if (status === c.Z_STREAM_END) {
            _mode = c.Z_FINISH;
          }
          if (_mode === c.Z_FINISH) {
            status = zlib_inflate.inflateEnd(this.strm);
            this.onEnd(status);
            this.ended = true;
            return status === c.Z_OK;
          }
          return true;
        };
        Inflate.prototype.onData = function(chunk) {
          this.chunks.push(chunk);
        };
        Inflate.prototype.onEnd = function(status) {
          if (status === c.Z_OK) {
            if (this.options.to === "string") {
              this.result = this.chunks.join("");
            } else {
              this.result = utils.flattenChunks(this.chunks);
            }
          }
          this.chunks = [];
          this.err = status;
          this.msg = this.strm.msg;
        };
        function inflate(input, options) {
          var inflator = new Inflate(options);
          inflator.push(input, true);
          if (inflator.err) {
            throw inflator.msg;
          }
          return inflator.result;
        }
        function inflateRaw(input, options) {
          options = options || {};
          options.raw = true;
          return inflate(input, options);
        }
        exports3.Inflate = Inflate;
        exports3.inflate = inflate;
        exports3.inflateRaw = inflateRaw;
        exports3.ungzip = inflate;
      }, { "./utils/common": 27, "./utils/strings": 28, "./zlib/constants": 30, "./zlib/gzheader": 33, "./zlib/inflate.js": 35, "./zlib/messages": 37, "./zlib/zstream": 39 }], 27: [function(_dereq_, module4, exports3) {
        "use strict";
        var TYPED_OK = typeof Uint8Array !== "undefined" && typeof Uint16Array !== "undefined" && typeof Int32Array !== "undefined";
        exports3.assign = function(obj) {
          var sources = Array.prototype.slice.call(arguments, 1);
          while (sources.length) {
            var source = sources.shift();
            if (!source) {
              continue;
            }
            if (typeof source !== "object") {
              throw new TypeError(source + "must be non-object");
            }
            for (var p in source) {
              if (source.hasOwnProperty(p)) {
                obj[p] = source[p];
              }
            }
          }
          return obj;
        };
        exports3.shrinkBuf = function(buf, size) {
          if (buf.length === size) {
            return buf;
          }
          if (buf.subarray) {
            return buf.subarray(0, size);
          }
          buf.length = size;
          return buf;
        };
        var fnTyped = {
          arraySet: function(dest, src, src_offs, len, dest_offs) {
            if (src.subarray && dest.subarray) {
              dest.set(src.subarray(src_offs, src_offs + len), dest_offs);
              return;
            }
            for (var i = 0; i < len; i++) {
              dest[dest_offs + i] = src[src_offs + i];
            }
          },
          flattenChunks: function(chunks) {
            var i, l, len, pos, chunk, result;
            len = 0;
            for (i = 0, l = chunks.length; i < l; i++) {
              len += chunks[i].length;
            }
            result = new Uint8Array(len);
            pos = 0;
            for (i = 0, l = chunks.length; i < l; i++) {
              chunk = chunks[i];
              result.set(chunk, pos);
              pos += chunk.length;
            }
            return result;
          }
        };
        var fnUntyped = {
          arraySet: function(dest, src, src_offs, len, dest_offs) {
            for (var i = 0; i < len; i++) {
              dest[dest_offs + i] = src[src_offs + i];
            }
          },
          flattenChunks: function(chunks) {
            return [].concat.apply([], chunks);
          }
        };
        exports3.setTyped = function(on) {
          if (on) {
            exports3.Buf8 = Uint8Array;
            exports3.Buf16 = Uint16Array;
            exports3.Buf32 = Int32Array;
            exports3.assign(exports3, fnTyped);
          } else {
            exports3.Buf8 = Array;
            exports3.Buf16 = Array;
            exports3.Buf32 = Array;
            exports3.assign(exports3, fnUntyped);
          }
        };
        exports3.setTyped(TYPED_OK);
      }, {}], 28: [function(_dereq_, module4, exports3) {
        "use strict";
        var utils = _dereq_("./common");
        var STR_APPLY_OK = true;
        var STR_APPLY_UIA_OK = true;
        try {
          String.fromCharCode.apply(null, [0]);
        } catch (__) {
          STR_APPLY_OK = false;
        }
        try {
          String.fromCharCode.apply(null, new Uint8Array(1));
        } catch (__) {
          STR_APPLY_UIA_OK = false;
        }
        var _utf8len = new utils.Buf8(256);
        for (var i = 0; i < 256; i++) {
          _utf8len[i] = i >= 252 ? 6 : i >= 248 ? 5 : i >= 240 ? 4 : i >= 224 ? 3 : i >= 192 ? 2 : 1;
        }
        _utf8len[254] = _utf8len[254] = 1;
        exports3.string2buf = function(str) {
          var buf, c, c2, m_pos, i2, str_len = str.length, buf_len = 0;
          for (m_pos = 0; m_pos < str_len; m_pos++) {
            c = str.charCodeAt(m_pos);
            if ((c & 64512) === 55296 && m_pos + 1 < str_len) {
              c2 = str.charCodeAt(m_pos + 1);
              if ((c2 & 64512) === 56320) {
                c = 65536 + (c - 55296 << 10) + (c2 - 56320);
                m_pos++;
              }
            }
            buf_len += c < 128 ? 1 : c < 2048 ? 2 : c < 65536 ? 3 : 4;
          }
          buf = new utils.Buf8(buf_len);
          for (i2 = 0, m_pos = 0; i2 < buf_len; m_pos++) {
            c = str.charCodeAt(m_pos);
            if ((c & 64512) === 55296 && m_pos + 1 < str_len) {
              c2 = str.charCodeAt(m_pos + 1);
              if ((c2 & 64512) === 56320) {
                c = 65536 + (c - 55296 << 10) + (c2 - 56320);
                m_pos++;
              }
            }
            if (c < 128) {
              buf[i2++] = c;
            } else if (c < 2048) {
              buf[i2++] = 192 | c >>> 6;
              buf[i2++] = 128 | c & 63;
            } else if (c < 65536) {
              buf[i2++] = 224 | c >>> 12;
              buf[i2++] = 128 | c >>> 6 & 63;
              buf[i2++] = 128 | c & 63;
            } else {
              buf[i2++] = 240 | c >>> 18;
              buf[i2++] = 128 | c >>> 12 & 63;
              buf[i2++] = 128 | c >>> 6 & 63;
              buf[i2++] = 128 | c & 63;
            }
          }
          return buf;
        };
        function buf2binstring(buf, len) {
          if (len < 65537) {
            if (buf.subarray && STR_APPLY_UIA_OK || !buf.subarray && STR_APPLY_OK) {
              return String.fromCharCode.apply(null, utils.shrinkBuf(buf, len));
            }
          }
          var result = "";
          for (var i2 = 0; i2 < len; i2++) {
            result += String.fromCharCode(buf[i2]);
          }
          return result;
        }
        exports3.buf2binstring = function(buf) {
          return buf2binstring(buf, buf.length);
        };
        exports3.binstring2buf = function(str) {
          var buf = new utils.Buf8(str.length);
          for (var i2 = 0, len = buf.length; i2 < len; i2++) {
            buf[i2] = str.charCodeAt(i2);
          }
          return buf;
        };
        exports3.buf2string = function(buf, max) {
          var i2, out, c, c_len;
          var len = max || buf.length;
          var utf16buf = new Array(len * 2);
          for (out = 0, i2 = 0; i2 < len; ) {
            c = buf[i2++];
            if (c < 128) {
              utf16buf[out++] = c;
              continue;
            }
            c_len = _utf8len[c];
            if (c_len > 4) {
              utf16buf[out++] = 65533;
              i2 += c_len - 1;
              continue;
            }
            c &= c_len === 2 ? 31 : c_len === 3 ? 15 : 7;
            while (c_len > 1 && i2 < len) {
              c = c << 6 | buf[i2++] & 63;
              c_len--;
            }
            if (c_len > 1) {
              utf16buf[out++] = 65533;
              continue;
            }
            if (c < 65536) {
              utf16buf[out++] = c;
            } else {
              c -= 65536;
              utf16buf[out++] = 55296 | c >> 10 & 1023;
              utf16buf[out++] = 56320 | c & 1023;
            }
          }
          return buf2binstring(utf16buf, out);
        };
        exports3.utf8border = function(buf, max) {
          var pos;
          max = max || buf.length;
          if (max > buf.length) {
            max = buf.length;
          }
          pos = max - 1;
          while (pos >= 0 && (buf[pos] & 192) === 128) {
            pos--;
          }
          if (pos < 0) {
            return max;
          }
          if (pos === 0) {
            return max;
          }
          return pos + _utf8len[buf[pos]] > max ? pos : max;
        };
      }, { "./common": 27 }], 29: [function(_dereq_, module4, exports3) {
        "use strict";
        function adler32(adler, buf, len, pos) {
          var s1 = adler & 65535 | 0, s2 = adler >>> 16 & 65535 | 0, n = 0;
          while (len !== 0) {
            n = len > 2e3 ? 2e3 : len;
            len -= n;
            do {
              s1 = s1 + buf[pos++] | 0;
              s2 = s2 + s1 | 0;
            } while (--n);
            s1 %= 65521;
            s2 %= 65521;
          }
          return s1 | s2 << 16 | 0;
        }
        module4.exports = adler32;
      }, {}], 30: [function(_dereq_, module4, exports3) {
        module4.exports = {
          Z_NO_FLUSH: 0,
          Z_PARTIAL_FLUSH: 1,
          Z_SYNC_FLUSH: 2,
          Z_FULL_FLUSH: 3,
          Z_FINISH: 4,
          Z_BLOCK: 5,
          Z_TREES: 6,
          Z_OK: 0,
          Z_STREAM_END: 1,
          Z_NEED_DICT: 2,
          Z_ERRNO: -1,
          Z_STREAM_ERROR: -2,
          Z_DATA_ERROR: -3,
          Z_BUF_ERROR: -5,
          Z_NO_COMPRESSION: 0,
          Z_BEST_SPEED: 1,
          Z_BEST_COMPRESSION: 9,
          Z_DEFAULT_COMPRESSION: -1,
          Z_FILTERED: 1,
          Z_HUFFMAN_ONLY: 2,
          Z_RLE: 3,
          Z_FIXED: 4,
          Z_DEFAULT_STRATEGY: 0,
          Z_BINARY: 0,
          Z_TEXT: 1,
          Z_UNKNOWN: 2,
          Z_DEFLATED: 8
        };
      }, {}], 31: [function(_dereq_, module4, exports3) {
        "use strict";
        function makeTable() {
          var c, table = [];
          for (var n = 0; n < 256; n++) {
            c = n;
            for (var k = 0; k < 8; k++) {
              c = c & 1 ? 3988292384 ^ c >>> 1 : c >>> 1;
            }
            table[n] = c;
          }
          return table;
        }
        var crcTable = makeTable();
        function crc32(crc, buf, len, pos) {
          var t = crcTable, end = pos + len;
          crc = crc ^ -1;
          for (var i = pos; i < end; i++) {
            crc = crc >>> 8 ^ t[(crc ^ buf[i]) & 255];
          }
          return crc ^ -1;
        }
        module4.exports = crc32;
      }, {}], 32: [function(_dereq_, module4, exports3) {
        "use strict";
        var utils = _dereq_("../utils/common");
        var trees = _dereq_("./trees");
        var adler32 = _dereq_("./adler32");
        var crc32 = _dereq_("./crc32");
        var msg = _dereq_("./messages");
        var Z_NO_FLUSH = 0;
        var Z_PARTIAL_FLUSH = 1;
        var Z_FULL_FLUSH = 3;
        var Z_FINISH = 4;
        var Z_BLOCK = 5;
        var Z_OK = 0;
        var Z_STREAM_END = 1;
        var Z_STREAM_ERROR = -2;
        var Z_DATA_ERROR = -3;
        var Z_BUF_ERROR = -5;
        var Z_DEFAULT_COMPRESSION = -1;
        var Z_FILTERED = 1;
        var Z_HUFFMAN_ONLY = 2;
        var Z_RLE = 3;
        var Z_FIXED = 4;
        var Z_DEFAULT_STRATEGY = 0;
        var Z_UNKNOWN = 2;
        var Z_DEFLATED = 8;
        var MAX_MEM_LEVEL = 9;
        var MAX_WBITS = 15;
        var DEF_MEM_LEVEL = 8;
        var LENGTH_CODES = 29;
        var LITERALS = 256;
        var L_CODES = LITERALS + 1 + LENGTH_CODES;
        var D_CODES = 30;
        var BL_CODES = 19;
        var HEAP_SIZE = 2 * L_CODES + 1;
        var MAX_BITS = 15;
        var MIN_MATCH = 3;
        var MAX_MATCH = 258;
        var MIN_LOOKAHEAD = MAX_MATCH + MIN_MATCH + 1;
        var PRESET_DICT = 32;
        var INIT_STATE = 42;
        var EXTRA_STATE = 69;
        var NAME_STATE = 73;
        var COMMENT_STATE = 91;
        var HCRC_STATE = 103;
        var BUSY_STATE = 113;
        var FINISH_STATE = 666;
        var BS_NEED_MORE = 1;
        var BS_BLOCK_DONE = 2;
        var BS_FINISH_STARTED = 3;
        var BS_FINISH_DONE = 4;
        var OS_CODE = 3;
        function err(strm, errorCode) {
          strm.msg = msg[errorCode];
          return errorCode;
        }
        function rank(f) {
          return (f << 1) - (f > 4 ? 9 : 0);
        }
        function zero(buf) {
          var len = buf.length;
          while (--len >= 0) {
            buf[len] = 0;
          }
        }
        function flush_pending(strm) {
          var s = strm.state;
          var len = s.pending;
          if (len > strm.avail_out) {
            len = strm.avail_out;
          }
          if (len === 0) {
            return;
          }
          utils.arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);
          strm.next_out += len;
          s.pending_out += len;
          strm.total_out += len;
          strm.avail_out -= len;
          s.pending -= len;
          if (s.pending === 0) {
            s.pending_out = 0;
          }
        }
        function flush_block_only(s, last) {
          trees._tr_flush_block(s, s.block_start >= 0 ? s.block_start : -1, s.strstart - s.block_start, last);
          s.block_start = s.strstart;
          flush_pending(s.strm);
        }
        function put_byte(s, b) {
          s.pending_buf[s.pending++] = b;
        }
        function putShortMSB(s, b) {
          s.pending_buf[s.pending++] = b >>> 8 & 255;
          s.pending_buf[s.pending++] = b & 255;
        }
        function read_buf(strm, buf, start, size) {
          var len = strm.avail_in;
          if (len > size) {
            len = size;
          }
          if (len === 0) {
            return 0;
          }
          strm.avail_in -= len;
          utils.arraySet(buf, strm.input, strm.next_in, len, start);
          if (strm.state.wrap === 1) {
            strm.adler = adler32(strm.adler, buf, len, start);
          } else if (strm.state.wrap === 2) {
            strm.adler = crc32(strm.adler, buf, len, start);
          }
          strm.next_in += len;
          strm.total_in += len;
          return len;
        }
        function longest_match(s, cur_match) {
          var chain_length = s.max_chain_length;
          var scan = s.strstart;
          var match;
          var len;
          var best_len = s.prev_length;
          var nice_match = s.nice_match;
          var limit = s.strstart > s.w_size - MIN_LOOKAHEAD ? s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0;
          var _win = s.window;
          var wmask = s.w_mask;
          var prev = s.prev;
          var strend = s.strstart + MAX_MATCH;
          var scan_end1 = _win[scan + best_len - 1];
          var scan_end = _win[scan + best_len];
          if (s.prev_length >= s.good_match) {
            chain_length >>= 2;
          }
          if (nice_match > s.lookahead) {
            nice_match = s.lookahead;
          }
          do {
            match = cur_match;
            if (_win[match + best_len] !== scan_end || _win[match + best_len - 1] !== scan_end1 || _win[match] !== _win[scan] || _win[++match] !== _win[scan + 1]) {
              continue;
            }
            scan += 2;
            match++;
            do {
            } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && scan < strend);
            len = MAX_MATCH - (strend - scan);
            scan = strend - MAX_MATCH;
            if (len > best_len) {
              s.match_start = cur_match;
              best_len = len;
              if (len >= nice_match) {
                break;
              }
              scan_end1 = _win[scan + best_len - 1];
              scan_end = _win[scan + best_len];
            }
          } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);
          if (best_len <= s.lookahead) {
            return best_len;
          }
          return s.lookahead;
        }
        function fill_window(s) {
          var _w_size = s.w_size;
          var p, n, m, more, str;
          do {
            more = s.window_size - s.lookahead - s.strstart;
            if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {
              utils.arraySet(s.window, s.window, _w_size, _w_size, 0);
              s.match_start -= _w_size;
              s.strstart -= _w_size;
              s.block_start -= _w_size;
              n = s.hash_size;
              p = n;
              do {
                m = s.head[--p];
                s.head[p] = m >= _w_size ? m - _w_size : 0;
              } while (--n);
              n = _w_size;
              p = n;
              do {
                m = s.prev[--p];
                s.prev[p] = m >= _w_size ? m - _w_size : 0;
              } while (--n);
              more += _w_size;
            }
            if (s.strm.avail_in === 0) {
              break;
            }
            n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);
            s.lookahead += n;
            if (s.lookahead + s.insert >= MIN_MATCH) {
              str = s.strstart - s.insert;
              s.ins_h = s.window[str];
              s.ins_h = (s.ins_h << s.hash_shift ^ s.window[str + 1]) & s.hash_mask;
              while (s.insert) {
                s.ins_h = (s.ins_h << s.hash_shift ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;
                s.prev[str & s.w_mask] = s.head[s.ins_h];
                s.head[s.ins_h] = str;
                str++;
                s.insert--;
                if (s.lookahead + s.insert < MIN_MATCH) {
                  break;
                }
              }
            }
          } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);
        }
        function deflate_stored(s, flush) {
          var max_block_size = 65535;
          if (max_block_size > s.pending_buf_size - 5) {
            max_block_size = s.pending_buf_size - 5;
          }
          for (; ; ) {
            if (s.lookahead <= 1) {
              fill_window(s);
              if (s.lookahead === 0 && flush === Z_NO_FLUSH) {
                return BS_NEED_MORE;
              }
              if (s.lookahead === 0) {
                break;
              }
            }
            s.strstart += s.lookahead;
            s.lookahead = 0;
            var max_start = s.block_start + max_block_size;
            if (s.strstart === 0 || s.strstart >= max_start) {
              s.lookahead = s.strstart - max_start;
              s.strstart = max_start;
              flush_block_only(s, false);
              if (s.strm.avail_out === 0) {
                return BS_NEED_MORE;
              }
            }
            if (s.strstart - s.block_start >= s.w_size - MIN_LOOKAHEAD) {
              flush_block_only(s, false);
              if (s.strm.avail_out === 0) {
                return BS_NEED_MORE;
              }
            }
          }
          s.insert = 0;
          if (flush === Z_FINISH) {
            flush_block_only(s, true);
            if (s.strm.avail_out === 0) {
              return BS_FINISH_STARTED;
            }
            return BS_FINISH_DONE;
          }
          if (s.strstart > s.block_start) {
            flush_block_only(s, false);
            if (s.strm.avail_out === 0) {
              return BS_NEED_MORE;
            }
          }
          return BS_NEED_MORE;
        }
        function deflate_fast(s, flush) {
          var hash_head;
          var bflush;
          for (; ; ) {
            if (s.lookahead < MIN_LOOKAHEAD) {
              fill_window(s);
              if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
                return BS_NEED_MORE;
              }
              if (s.lookahead === 0) {
                break;
              }
            }
            hash_head = 0;
            if (s.lookahead >= MIN_MATCH) {
              s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
              hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
              s.head[s.ins_h] = s.strstart;
            }
            if (hash_head !== 0 && s.strstart - hash_head <= s.w_size - MIN_LOOKAHEAD) {
              s.match_length = longest_match(s, hash_head);
            }
            if (s.match_length >= MIN_MATCH) {
              bflush = trees._tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);
              s.lookahead -= s.match_length;
              if (s.match_length <= s.max_lazy_match && s.lookahead >= MIN_MATCH) {
                s.match_length--;
                do {
                  s.strstart++;
                  s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
                  hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
                  s.head[s.ins_h] = s.strstart;
                } while (--s.match_length !== 0);
                s.strstart++;
              } else {
                s.strstart += s.match_length;
                s.match_length = 0;
                s.ins_h = s.window[s.strstart];
                s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + 1]) & s.hash_mask;
              }
            } else {
              bflush = trees._tr_tally(s, 0, s.window[s.strstart]);
              s.lookahead--;
              s.strstart++;
            }
            if (bflush) {
              flush_block_only(s, false);
              if (s.strm.avail_out === 0) {
                return BS_NEED_MORE;
              }
            }
          }
          s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;
          if (flush === Z_FINISH) {
            flush_block_only(s, true);
            if (s.strm.avail_out === 0) {
              return BS_FINISH_STARTED;
            }
            return BS_FINISH_DONE;
          }
          if (s.last_lit) {
            flush_block_only(s, false);
            if (s.strm.avail_out === 0) {
              return BS_NEED_MORE;
            }
          }
          return BS_BLOCK_DONE;
        }
        function deflate_slow(s, flush) {
          var hash_head;
          var bflush;
          var max_insert;
          for (; ; ) {
            if (s.lookahead < MIN_LOOKAHEAD) {
              fill_window(s);
              if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
                return BS_NEED_MORE;
              }
              if (s.lookahead === 0) {
                break;
              }
            }
            hash_head = 0;
            if (s.lookahead >= MIN_MATCH) {
              s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
              hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
              s.head[s.ins_h] = s.strstart;
            }
            s.prev_length = s.match_length;
            s.prev_match = s.match_start;
            s.match_length = MIN_MATCH - 1;
            if (hash_head !== 0 && s.prev_length < s.max_lazy_match && s.strstart - hash_head <= s.w_size - MIN_LOOKAHEAD) {
              s.match_length = longest_match(s, hash_head);
              if (s.match_length <= 5 && (s.strategy === Z_FILTERED || s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096)) {
                s.match_length = MIN_MATCH - 1;
              }
            }
            if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {
              max_insert = s.strstart + s.lookahead - MIN_MATCH;
              bflush = trees._tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);
              s.lookahead -= s.prev_length - 1;
              s.prev_length -= 2;
              do {
                if (++s.strstart <= max_insert) {
                  s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
                  hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
                  s.head[s.ins_h] = s.strstart;
                }
              } while (--s.prev_length !== 0);
              s.match_available = 0;
              s.match_length = MIN_MATCH - 1;
              s.strstart++;
              if (bflush) {
                flush_block_only(s, false);
                if (s.strm.avail_out === 0) {
                  return BS_NEED_MORE;
                }
              }
            } else if (s.match_available) {
              bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);
              if (bflush) {
                flush_block_only(s, false);
              }
              s.strstart++;
              s.lookahead--;
              if (s.strm.avail_out === 0) {
                return BS_NEED_MORE;
              }
            } else {
              s.match_available = 1;
              s.strstart++;
              s.lookahead--;
            }
          }
          if (s.match_available) {
            bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);
            s.match_available = 0;
          }
          s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;
          if (flush === Z_FINISH) {
            flush_block_only(s, true);
            if (s.strm.avail_out === 0) {
              return BS_FINISH_STARTED;
            }
            return BS_FINISH_DONE;
          }
          if (s.last_lit) {
            flush_block_only(s, false);
            if (s.strm.avail_out === 0) {
              return BS_NEED_MORE;
            }
          }
          return BS_BLOCK_DONE;
        }
        function deflate_rle(s, flush) {
          var bflush;
          var prev;
          var scan, strend;
          var _win = s.window;
          for (; ; ) {
            if (s.lookahead <= MAX_MATCH) {
              fill_window(s);
              if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {
                return BS_NEED_MORE;
              }
              if (s.lookahead === 0) {
                break;
              }
            }
            s.match_length = 0;
            if (s.lookahead >= MIN_MATCH && s.strstart > 0) {
              scan = s.strstart - 1;
              prev = _win[scan];
              if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {
                strend = s.strstart + MAX_MATCH;
                do {
                } while (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && scan < strend);
                s.match_length = MAX_MATCH - (strend - scan);
                if (s.match_length > s.lookahead) {
                  s.match_length = s.lookahead;
                }
              }
            }
            if (s.match_length >= MIN_MATCH) {
              bflush = trees._tr_tally(s, 1, s.match_length - MIN_MATCH);
              s.lookahead -= s.match_length;
              s.strstart += s.match_length;
              s.match_length = 0;
            } else {
              bflush = trees._tr_tally(s, 0, s.window[s.strstart]);
              s.lookahead--;
              s.strstart++;
            }
            if (bflush) {
              flush_block_only(s, false);
              if (s.strm.avail_out === 0) {
                return BS_NEED_MORE;
              }
            }
          }
          s.insert = 0;
          if (flush === Z_FINISH) {
            flush_block_only(s, true);
            if (s.strm.avail_out === 0) {
              return BS_FINISH_STARTED;
            }
            return BS_FINISH_DONE;
          }
          if (s.last_lit) {
            flush_block_only(s, false);
            if (s.strm.avail_out === 0) {
              return BS_NEED_MORE;
            }
          }
          return BS_BLOCK_DONE;
        }
        function deflate_huff(s, flush) {
          var bflush;
          for (; ; ) {
            if (s.lookahead === 0) {
              fill_window(s);
              if (s.lookahead === 0) {
                if (flush === Z_NO_FLUSH) {
                  return BS_NEED_MORE;
                }
                break;
              }
            }
            s.match_length = 0;
            bflush = trees._tr_tally(s, 0, s.window[s.strstart]);
            s.lookahead--;
            s.strstart++;
            if (bflush) {
              flush_block_only(s, false);
              if (s.strm.avail_out === 0) {
                return BS_NEED_MORE;
              }
            }
          }
          s.insert = 0;
          if (flush === Z_FINISH) {
            flush_block_only(s, true);
            if (s.strm.avail_out === 0) {
              return BS_FINISH_STARTED;
            }
            return BS_FINISH_DONE;
          }
          if (s.last_lit) {
            flush_block_only(s, false);
            if (s.strm.avail_out === 0) {
              return BS_NEED_MORE;
            }
          }
          return BS_BLOCK_DONE;
        }
        var Config = function(good_length, max_lazy, nice_length, max_chain, func) {
          this.good_length = good_length;
          this.max_lazy = max_lazy;
          this.nice_length = nice_length;
          this.max_chain = max_chain;
          this.func = func;
        };
        var configuration_table;
        configuration_table = [
          new Config(0, 0, 0, 0, deflate_stored),
          new Config(4, 4, 8, 4, deflate_fast),
          new Config(4, 5, 16, 8, deflate_fast),
          new Config(4, 6, 32, 32, deflate_fast),
          new Config(4, 4, 16, 16, deflate_slow),
          new Config(8, 16, 32, 32, deflate_slow),
          new Config(8, 16, 128, 128, deflate_slow),
          new Config(8, 32, 128, 256, deflate_slow),
          new Config(32, 128, 258, 1024, deflate_slow),
          new Config(32, 258, 258, 4096, deflate_slow)
        ];
        function lm_init(s) {
          s.window_size = 2 * s.w_size;
          zero(s.head);
          s.max_lazy_match = configuration_table[s.level].max_lazy;
          s.good_match = configuration_table[s.level].good_length;
          s.nice_match = configuration_table[s.level].nice_length;
          s.max_chain_length = configuration_table[s.level].max_chain;
          s.strstart = 0;
          s.block_start = 0;
          s.lookahead = 0;
          s.insert = 0;
          s.match_length = s.prev_length = MIN_MATCH - 1;
          s.match_available = 0;
          s.ins_h = 0;
        }
        function DeflateState() {
          this.strm = null;
          this.status = 0;
          this.pending_buf = null;
          this.pending_buf_size = 0;
          this.pending_out = 0;
          this.pending = 0;
          this.wrap = 0;
          this.gzhead = null;
          this.gzindex = 0;
          this.method = Z_DEFLATED;
          this.last_flush = -1;
          this.w_size = 0;
          this.w_bits = 0;
          this.w_mask = 0;
          this.window = null;
          this.window_size = 0;
          this.prev = null;
          this.head = null;
          this.ins_h = 0;
          this.hash_size = 0;
          this.hash_bits = 0;
          this.hash_mask = 0;
          this.hash_shift = 0;
          this.block_start = 0;
          this.match_length = 0;
          this.prev_match = 0;
          this.match_available = 0;
          this.strstart = 0;
          this.match_start = 0;
          this.lookahead = 0;
          this.prev_length = 0;
          this.max_chain_length = 0;
          this.max_lazy_match = 0;
          this.level = 0;
          this.strategy = 0;
          this.good_match = 0;
          this.nice_match = 0;
          this.dyn_ltree = new utils.Buf16(HEAP_SIZE * 2);
          this.dyn_dtree = new utils.Buf16((2 * D_CODES + 1) * 2);
          this.bl_tree = new utils.Buf16((2 * BL_CODES + 1) * 2);
          zero(this.dyn_ltree);
          zero(this.dyn_dtree);
          zero(this.bl_tree);
          this.l_desc = null;
          this.d_desc = null;
          this.bl_desc = null;
          this.bl_count = new utils.Buf16(MAX_BITS + 1);
          this.heap = new utils.Buf16(2 * L_CODES + 1);
          zero(this.heap);
          this.heap_len = 0;
          this.heap_max = 0;
          this.depth = new utils.Buf16(2 * L_CODES + 1);
          zero(this.depth);
          this.l_buf = 0;
          this.lit_bufsize = 0;
          this.last_lit = 0;
          this.d_buf = 0;
          this.opt_len = 0;
          this.static_len = 0;
          this.matches = 0;
          this.insert = 0;
          this.bi_buf = 0;
          this.bi_valid = 0;
        }
        function deflateResetKeep(strm) {
          var s;
          if (!strm || !strm.state) {
            return err(strm, Z_STREAM_ERROR);
          }
          strm.total_in = strm.total_out = 0;
          strm.data_type = Z_UNKNOWN;
          s = strm.state;
          s.pending = 0;
          s.pending_out = 0;
          if (s.wrap < 0) {
            s.wrap = -s.wrap;
          }
          s.status = s.wrap ? INIT_STATE : BUSY_STATE;
          strm.adler = s.wrap === 2 ? 0 : 1;
          s.last_flush = Z_NO_FLUSH;
          trees._tr_init(s);
          return Z_OK;
        }
        function deflateReset(strm) {
          var ret = deflateResetKeep(strm);
          if (ret === Z_OK) {
            lm_init(strm.state);
          }
          return ret;
        }
        function deflateSetHeader(strm, head) {
          if (!strm || !strm.state) {
            return Z_STREAM_ERROR;
          }
          if (strm.state.wrap !== 2) {
            return Z_STREAM_ERROR;
          }
          strm.state.gzhead = head;
          return Z_OK;
        }
        function deflateInit2(strm, level, method, windowBits, memLevel, strategy) {
          if (!strm) {
            return Z_STREAM_ERROR;
          }
          var wrap = 1;
          if (level === Z_DEFAULT_COMPRESSION) {
            level = 6;
          }
          if (windowBits < 0) {
            wrap = 0;
            windowBits = -windowBits;
          } else if (windowBits > 15) {
            wrap = 2;
            windowBits -= 16;
          }
          if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED || windowBits < 8 || windowBits > 15 || level < 0 || level > 9 || strategy < 0 || strategy > Z_FIXED) {
            return err(strm, Z_STREAM_ERROR);
          }
          if (windowBits === 8) {
            windowBits = 9;
          }
          var s = new DeflateState();
          strm.state = s;
          s.strm = strm;
          s.wrap = wrap;
          s.gzhead = null;
          s.w_bits = windowBits;
          s.w_size = 1 << s.w_bits;
          s.w_mask = s.w_size - 1;
          s.hash_bits = memLevel + 7;
          s.hash_size = 1 << s.hash_bits;
          s.hash_mask = s.hash_size - 1;
          s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);
          s.window = new utils.Buf8(s.w_size * 2);
          s.head = new utils.Buf16(s.hash_size);
          s.prev = new utils.Buf16(s.w_size);
          s.lit_bufsize = 1 << memLevel + 6;
          s.pending_buf_size = s.lit_bufsize * 4;
          s.pending_buf = new utils.Buf8(s.pending_buf_size);
          s.d_buf = s.lit_bufsize >> 1;
          s.l_buf = (1 + 2) * s.lit_bufsize;
          s.level = level;
          s.strategy = strategy;
          s.method = method;
          return deflateReset(strm);
        }
        function deflateInit(strm, level) {
          return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);
        }
        function deflate(strm, flush) {
          var old_flush, s;
          var beg, val;
          if (!strm || !strm.state || flush > Z_BLOCK || flush < 0) {
            return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;
          }
          s = strm.state;
          if (!strm.output || !strm.input && strm.avail_in !== 0 || s.status === FINISH_STATE && flush !== Z_FINISH) {
            return err(strm, strm.avail_out === 0 ? Z_BUF_ERROR : Z_STREAM_ERROR);
          }
          s.strm = strm;
          old_flush = s.last_flush;
          s.last_flush = flush;
          if (s.status === INIT_STATE) {
            if (s.wrap === 2) {
              strm.adler = 0;
              put_byte(s, 31);
              put_byte(s, 139);
              put_byte(s, 8);
              if (!s.gzhead) {
                put_byte(s, 0);
                put_byte(s, 0);
                put_byte(s, 0);
                put_byte(s, 0);
                put_byte(s, 0);
                put_byte(s, s.level === 9 ? 2 : s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ? 4 : 0);
                put_byte(s, OS_CODE);
                s.status = BUSY_STATE;
              } else {
                put_byte(s, (s.gzhead.text ? 1 : 0) + (s.gzhead.hcrc ? 2 : 0) + (!s.gzhead.extra ? 0 : 4) + (!s.gzhead.name ? 0 : 8) + (!s.gzhead.comment ? 0 : 16));
                put_byte(s, s.gzhead.time & 255);
                put_byte(s, s.gzhead.time >> 8 & 255);
                put_byte(s, s.gzhead.time >> 16 & 255);
                put_byte(s, s.gzhead.time >> 24 & 255);
                put_byte(s, s.level === 9 ? 2 : s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ? 4 : 0);
                put_byte(s, s.gzhead.os & 255);
                if (s.gzhead.extra && s.gzhead.extra.length) {
                  put_byte(s, s.gzhead.extra.length & 255);
                  put_byte(s, s.gzhead.extra.length >> 8 & 255);
                }
                if (s.gzhead.hcrc) {
                  strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);
                }
                s.gzindex = 0;
                s.status = EXTRA_STATE;
              }
            } else {
              var header = Z_DEFLATED + (s.w_bits - 8 << 4) << 8;
              var level_flags = -1;
              if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {
                level_flags = 0;
              } else if (s.level < 6) {
                level_flags = 1;
              } else if (s.level === 6) {
                level_flags = 2;
              } else {
                level_flags = 3;
              }
              header |= level_flags << 6;
              if (s.strstart !== 0) {
                header |= PRESET_DICT;
              }
              header += 31 - header % 31;
              s.status = BUSY_STATE;
              putShortMSB(s, header);
              if (s.strstart !== 0) {
                putShortMSB(s, strm.adler >>> 16);
                putShortMSB(s, strm.adler & 65535);
              }
              strm.adler = 1;
            }
          }
          if (s.status === EXTRA_STATE) {
            if (s.gzhead.extra) {
              beg = s.pending;
              while (s.gzindex < (s.gzhead.extra.length & 65535)) {
                if (s.pending === s.pending_buf_size) {
                  if (s.gzhead.hcrc && s.pending > beg) {
                    strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
                  }
                  flush_pending(strm);
                  beg = s.pending;
                  if (s.pending === s.pending_buf_size) {
                    break;
                  }
                }
                put_byte(s, s.gzhead.extra[s.gzindex] & 255);
                s.gzindex++;
              }
              if (s.gzhead.hcrc && s.pending > beg) {
                strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
              }
              if (s.gzindex === s.gzhead.extra.length) {
                s.gzindex = 0;
                s.status = NAME_STATE;
              }
            } else {
              s.status = NAME_STATE;
            }
          }
          if (s.status === NAME_STATE) {
            if (s.gzhead.name) {
              beg = s.pending;
              do {
                if (s.pending === s.pending_buf_size) {
                  if (s.gzhead.hcrc && s.pending > beg) {
                    strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
                  }
                  flush_pending(strm);
                  beg = s.pending;
                  if (s.pending === s.pending_buf_size) {
                    val = 1;
                    break;
                  }
                }
                if (s.gzindex < s.gzhead.name.length) {
                  val = s.gzhead.name.charCodeAt(s.gzindex++) & 255;
                } else {
                  val = 0;
                }
                put_byte(s, val);
              } while (val !== 0);
              if (s.gzhead.hcrc && s.pending > beg) {
                strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
              }
              if (val === 0) {
                s.gzindex = 0;
                s.status = COMMENT_STATE;
              }
            } else {
              s.status = COMMENT_STATE;
            }
          }
          if (s.status === COMMENT_STATE) {
            if (s.gzhead.comment) {
              beg = s.pending;
              do {
                if (s.pending === s.pending_buf_size) {
                  if (s.gzhead.hcrc && s.pending > beg) {
                    strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
                  }
                  flush_pending(strm);
                  beg = s.pending;
                  if (s.pending === s.pending_buf_size) {
                    val = 1;
                    break;
                  }
                }
                if (s.gzindex < s.gzhead.comment.length) {
                  val = s.gzhead.comment.charCodeAt(s.gzindex++) & 255;
                } else {
                  val = 0;
                }
                put_byte(s, val);
              } while (val !== 0);
              if (s.gzhead.hcrc && s.pending > beg) {
                strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
              }
              if (val === 0) {
                s.status = HCRC_STATE;
              }
            } else {
              s.status = HCRC_STATE;
            }
          }
          if (s.status === HCRC_STATE) {
            if (s.gzhead.hcrc) {
              if (s.pending + 2 > s.pending_buf_size) {
                flush_pending(strm);
              }
              if (s.pending + 2 <= s.pending_buf_size) {
                put_byte(s, strm.adler & 255);
                put_byte(s, strm.adler >> 8 & 255);
                strm.adler = 0;
                s.status = BUSY_STATE;
              }
            } else {
              s.status = BUSY_STATE;
            }
          }
          if (s.pending !== 0) {
            flush_pending(strm);
            if (strm.avail_out === 0) {
              s.last_flush = -1;
              return Z_OK;
            }
          } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) && flush !== Z_FINISH) {
            return err(strm, Z_BUF_ERROR);
          }
          if (s.status === FINISH_STATE && strm.avail_in !== 0) {
            return err(strm, Z_BUF_ERROR);
          }
          if (strm.avail_in !== 0 || s.lookahead !== 0 || flush !== Z_NO_FLUSH && s.status !== FINISH_STATE) {
            var bstate = s.strategy === Z_HUFFMAN_ONLY ? deflate_huff(s, flush) : s.strategy === Z_RLE ? deflate_rle(s, flush) : configuration_table[s.level].func(s, flush);
            if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {
              s.status = FINISH_STATE;
            }
            if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {
              if (strm.avail_out === 0) {
                s.last_flush = -1;
              }
              return Z_OK;
            }
            if (bstate === BS_BLOCK_DONE) {
              if (flush === Z_PARTIAL_FLUSH) {
                trees._tr_align(s);
              } else if (flush !== Z_BLOCK) {
                trees._tr_stored_block(s, 0, 0, false);
                if (flush === Z_FULL_FLUSH) {
                  zero(s.head);
                  if (s.lookahead === 0) {
                    s.strstart = 0;
                    s.block_start = 0;
                    s.insert = 0;
                  }
                }
              }
              flush_pending(strm);
              if (strm.avail_out === 0) {
                s.last_flush = -1;
                return Z_OK;
              }
            }
          }
          if (flush !== Z_FINISH) {
            return Z_OK;
          }
          if (s.wrap <= 0) {
            return Z_STREAM_END;
          }
          if (s.wrap === 2) {
            put_byte(s, strm.adler & 255);
            put_byte(s, strm.adler >> 8 & 255);
            put_byte(s, strm.adler >> 16 & 255);
            put_byte(s, strm.adler >> 24 & 255);
            put_byte(s, strm.total_in & 255);
            put_byte(s, strm.total_in >> 8 & 255);
            put_byte(s, strm.total_in >> 16 & 255);
            put_byte(s, strm.total_in >> 24 & 255);
          } else {
            putShortMSB(s, strm.adler >>> 16);
            putShortMSB(s, strm.adler & 65535);
          }
          flush_pending(strm);
          if (s.wrap > 0) {
            s.wrap = -s.wrap;
          }
          return s.pending !== 0 ? Z_OK : Z_STREAM_END;
        }
        function deflateEnd(strm) {
          var status;
          if (!strm || !strm.state) {
            return Z_STREAM_ERROR;
          }
          status = strm.state.status;
          if (status !== INIT_STATE && status !== EXTRA_STATE && status !== NAME_STATE && status !== COMMENT_STATE && status !== HCRC_STATE && status !== BUSY_STATE && status !== FINISH_STATE) {
            return err(strm, Z_STREAM_ERROR);
          }
          strm.state = null;
          return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;
        }
        exports3.deflateInit = deflateInit;
        exports3.deflateInit2 = deflateInit2;
        exports3.deflateReset = deflateReset;
        exports3.deflateResetKeep = deflateResetKeep;
        exports3.deflateSetHeader = deflateSetHeader;
        exports3.deflate = deflate;
        exports3.deflateEnd = deflateEnd;
        exports3.deflateInfo = "pako deflate (from Nodeca project)";
      }, { "../utils/common": 27, "./adler32": 29, "./crc32": 31, "./messages": 37, "./trees": 38 }], 33: [function(_dereq_, module4, exports3) {
        "use strict";
        function GZheader() {
          this.text = 0;
          this.time = 0;
          this.xflags = 0;
          this.os = 0;
          this.extra = null;
          this.extra_len = 0;
          this.name = "";
          this.comment = "";
          this.hcrc = 0;
          this.done = false;
        }
        module4.exports = GZheader;
      }, {}], 34: [function(_dereq_, module4, exports3) {
        "use strict";
        var BAD = 30;
        var TYPE = 12;
        module4.exports = function inflate_fast(strm, start) {
          var state;
          var _in;
          var last;
          var _out;
          var beg;
          var end;
          var dmax;
          var wsize;
          var whave;
          var wnext;
          var window2;
          var hold;
          var bits;
          var lcode;
          var dcode;
          var lmask;
          var dmask;
          var here;
          var op;
          var len;
          var dist;
          var from;
          var from_source;
          var input, output;
          state = strm.state;
          _in = strm.next_in;
          input = strm.input;
          last = _in + (strm.avail_in - 5);
          _out = strm.next_out;
          output = strm.output;
          beg = _out - (start - strm.avail_out);
          end = _out + (strm.avail_out - 257);
          dmax = state.dmax;
          wsize = state.wsize;
          whave = state.whave;
          wnext = state.wnext;
          window2 = state.window;
          hold = state.hold;
          bits = state.bits;
          lcode = state.lencode;
          dcode = state.distcode;
          lmask = (1 << state.lenbits) - 1;
          dmask = (1 << state.distbits) - 1;
          top:
            do {
              if (bits < 15) {
                hold += input[_in++] << bits;
                bits += 8;
                hold += input[_in++] << bits;
                bits += 8;
              }
              here = lcode[hold & lmask];
              dolen:
                for (; ; ) {
                  op = here >>> 24;
                  hold >>>= op;
                  bits -= op;
                  op = here >>> 16 & 255;
                  if (op === 0) {
                    output[_out++] = here & 65535;
                  } else if (op & 16) {
                    len = here & 65535;
                    op &= 15;
                    if (op) {
                      if (bits < op) {
                        hold += input[_in++] << bits;
                        bits += 8;
                      }
                      len += hold & (1 << op) - 1;
                      hold >>>= op;
                      bits -= op;
                    }
                    if (bits < 15) {
                      hold += input[_in++] << bits;
                      bits += 8;
                      hold += input[_in++] << bits;
                      bits += 8;
                    }
                    here = dcode[hold & dmask];
                    dodist:
                      for (; ; ) {
                        op = here >>> 24;
                        hold >>>= op;
                        bits -= op;
                        op = here >>> 16 & 255;
                        if (op & 16) {
                          dist = here & 65535;
                          op &= 15;
                          if (bits < op) {
                            hold += input[_in++] << bits;
                            bits += 8;
                            if (bits < op) {
                              hold += input[_in++] << bits;
                              bits += 8;
                            }
                          }
                          dist += hold & (1 << op) - 1;
                          if (dist > dmax) {
                            strm.msg = "invalid distance too far back";
                            state.mode = BAD;
                            break top;
                          }
                          hold >>>= op;
                          bits -= op;
                          op = _out - beg;
                          if (dist > op) {
                            op = dist - op;
                            if (op > whave) {
                              if (state.sane) {
                                strm.msg = "invalid distance too far back";
                                state.mode = BAD;
                                break top;
                              }
                            }
                            from = 0;
                            from_source = window2;
                            if (wnext === 0) {
                              from += wsize - op;
                              if (op < len) {
                                len -= op;
                                do {
                                  output[_out++] = window2[from++];
                                } while (--op);
                                from = _out - dist;
                                from_source = output;
                              }
                            } else if (wnext < op) {
                              from += wsize + wnext - op;
                              op -= wnext;
                              if (op < len) {
                                len -= op;
                                do {
                                  output[_out++] = window2[from++];
                                } while (--op);
                                from = 0;
                                if (wnext < len) {
                                  op = wnext;
                                  len -= op;
                                  do {
                                    output[_out++] = window2[from++];
                                  } while (--op);
                                  from = _out - dist;
                                  from_source = output;
                                }
                              }
                            } else {
                              from += wnext - op;
                              if (op < len) {
                                len -= op;
                                do {
                                  output[_out++] = window2[from++];
                                } while (--op);
                                from = _out - dist;
                                from_source = output;
                              }
                            }
                            while (len > 2) {
                              output[_out++] = from_source[from++];
                              output[_out++] = from_source[from++];
                              output[_out++] = from_source[from++];
                              len -= 3;
                            }
                            if (len) {
                              output[_out++] = from_source[from++];
                              if (len > 1) {
                                output[_out++] = from_source[from++];
                              }
                            }
                          } else {
                            from = _out - dist;
                            do {
                              output[_out++] = output[from++];
                              output[_out++] = output[from++];
                              output[_out++] = output[from++];
                              len -= 3;
                            } while (len > 2);
                            if (len) {
                              output[_out++] = output[from++];
                              if (len > 1) {
                                output[_out++] = output[from++];
                              }
                            }
                          }
                        } else if ((op & 64) === 0) {
                          here = dcode[(here & 65535) + (hold & (1 << op) - 1)];
                          continue dodist;
                        } else {
                          strm.msg = "invalid distance code";
                          state.mode = BAD;
                          break top;
                        }
                        break;
                      }
                  } else if ((op & 64) === 0) {
                    here = lcode[(here & 65535) + (hold & (1 << op) - 1)];
                    continue dolen;
                  } else if (op & 32) {
                    state.mode = TYPE;
                    break top;
                  } else {
                    strm.msg = "invalid literal/length code";
                    state.mode = BAD;
                    break top;
                  }
                  break;
                }
            } while (_in < last && _out < end);
          len = bits >> 3;
          _in -= len;
          bits -= len << 3;
          hold &= (1 << bits) - 1;
          strm.next_in = _in;
          strm.next_out = _out;
          strm.avail_in = _in < last ? 5 + (last - _in) : 5 - (_in - last);
          strm.avail_out = _out < end ? 257 + (end - _out) : 257 - (_out - end);
          state.hold = hold;
          state.bits = bits;
          return;
        };
      }, {}], 35: [function(_dereq_, module4, exports3) {
        "use strict";
        var utils = _dereq_("../utils/common");
        var adler32 = _dereq_("./adler32");
        var crc32 = _dereq_("./crc32");
        var inflate_fast = _dereq_("./inffast");
        var inflate_table = _dereq_("./inftrees");
        var CODES = 0;
        var LENS = 1;
        var DISTS = 2;
        var Z_FINISH = 4;
        var Z_BLOCK = 5;
        var Z_TREES = 6;
        var Z_OK = 0;
        var Z_STREAM_END = 1;
        var Z_NEED_DICT = 2;
        var Z_STREAM_ERROR = -2;
        var Z_DATA_ERROR = -3;
        var Z_MEM_ERROR = -4;
        var Z_BUF_ERROR = -5;
        var Z_DEFLATED = 8;
        var HEAD = 1;
        var FLAGS = 2;
        var TIME = 3;
        var OS = 4;
        var EXLEN = 5;
        var EXTRA = 6;
        var NAME = 7;
        var COMMENT = 8;
        var HCRC = 9;
        var DICTID = 10;
        var DICT = 11;
        var TYPE = 12;
        var TYPEDO = 13;
        var STORED = 14;
        var COPY_ = 15;
        var COPY = 16;
        var TABLE = 17;
        var LENLENS = 18;
        var CODELENS = 19;
        var LEN_ = 20;
        var LEN = 21;
        var LENEXT = 22;
        var DIST = 23;
        var DISTEXT = 24;
        var MATCH = 25;
        var LIT = 26;
        var CHECK = 27;
        var LENGTH = 28;
        var DONE = 29;
        var BAD = 30;
        var MEM = 31;
        var SYNC = 32;
        var ENOUGH_LENS = 852;
        var ENOUGH_DISTS = 592;
        var MAX_WBITS = 15;
        var DEF_WBITS = MAX_WBITS;
        function ZSWAP32(q) {
          return (q >>> 24 & 255) + (q >>> 8 & 65280) + ((q & 65280) << 8) + ((q & 255) << 24);
        }
        function InflateState() {
          this.mode = 0;
          this.last = false;
          this.wrap = 0;
          this.havedict = false;
          this.flags = 0;
          this.dmax = 0;
          this.check = 0;
          this.total = 0;
          this.head = null;
          this.wbits = 0;
          this.wsize = 0;
          this.whave = 0;
          this.wnext = 0;
          this.window = null;
          this.hold = 0;
          this.bits = 0;
          this.length = 0;
          this.offset = 0;
          this.extra = 0;
          this.lencode = null;
          this.distcode = null;
          this.lenbits = 0;
          this.distbits = 0;
          this.ncode = 0;
          this.nlen = 0;
          this.ndist = 0;
          this.have = 0;
          this.next = null;
          this.lens = new utils.Buf16(320);
          this.work = new utils.Buf16(288);
          this.lendyn = null;
          this.distdyn = null;
          this.sane = 0;
          this.back = 0;
          this.was = 0;
        }
        function inflateResetKeep(strm) {
          var state;
          if (!strm || !strm.state) {
            return Z_STREAM_ERROR;
          }
          state = strm.state;
          strm.total_in = strm.total_out = state.total = 0;
          strm.msg = "";
          if (state.wrap) {
            strm.adler = state.wrap & 1;
          }
          state.mode = HEAD;
          state.last = 0;
          state.havedict = 0;
          state.dmax = 32768;
          state.head = null;
          state.hold = 0;
          state.bits = 0;
          state.lencode = state.lendyn = new utils.Buf32(ENOUGH_LENS);
          state.distcode = state.distdyn = new utils.Buf32(ENOUGH_DISTS);
          state.sane = 1;
          state.back = -1;
          return Z_OK;
        }
        function inflateReset(strm) {
          var state;
          if (!strm || !strm.state) {
            return Z_STREAM_ERROR;
          }
          state = strm.state;
          state.wsize = 0;
          state.whave = 0;
          state.wnext = 0;
          return inflateResetKeep(strm);
        }
        function inflateReset2(strm, windowBits) {
          var wrap;
          var state;
          if (!strm || !strm.state) {
            return Z_STREAM_ERROR;
          }
          state = strm.state;
          if (windowBits < 0) {
            wrap = 0;
            windowBits = -windowBits;
          } else {
            wrap = (windowBits >> 4) + 1;
            if (windowBits < 48) {
              windowBits &= 15;
            }
          }
          if (windowBits && (windowBits < 8 || windowBits > 15)) {
            return Z_STREAM_ERROR;
          }
          if (state.window !== null && state.wbits !== windowBits) {
            state.window = null;
          }
          state.wrap = wrap;
          state.wbits = windowBits;
          return inflateReset(strm);
        }
        function inflateInit2(strm, windowBits) {
          var ret;
          var state;
          if (!strm) {
            return Z_STREAM_ERROR;
          }
          state = new InflateState();
          strm.state = state;
          state.window = null;
          ret = inflateReset2(strm, windowBits);
          if (ret !== Z_OK) {
            strm.state = null;
          }
          return ret;
        }
        function inflateInit(strm) {
          return inflateInit2(strm, DEF_WBITS);
        }
        var virgin = true;
        var lenfix, distfix;
        function fixedtables(state) {
          if (virgin) {
            var sym;
            lenfix = new utils.Buf32(512);
            distfix = new utils.Buf32(32);
            sym = 0;
            while (sym < 144) {
              state.lens[sym++] = 8;
            }
            while (sym < 256) {
              state.lens[sym++] = 9;
            }
            while (sym < 280) {
              state.lens[sym++] = 7;
            }
            while (sym < 288) {
              state.lens[sym++] = 8;
            }
            inflate_table(LENS, state.lens, 0, 288, lenfix, 0, state.work, { bits: 9 });
            sym = 0;
            while (sym < 32) {
              state.lens[sym++] = 5;
            }
            inflate_table(DISTS, state.lens, 0, 32, distfix, 0, state.work, { bits: 5 });
            virgin = false;
          }
          state.lencode = lenfix;
          state.lenbits = 9;
          state.distcode = distfix;
          state.distbits = 5;
        }
        function updatewindow(strm, src, end, copy) {
          var dist;
          var state = strm.state;
          if (state.window === null) {
            state.wsize = 1 << state.wbits;
            state.wnext = 0;
            state.whave = 0;
            state.window = new utils.Buf8(state.wsize);
          }
          if (copy >= state.wsize) {
            utils.arraySet(state.window, src, end - state.wsize, state.wsize, 0);
            state.wnext = 0;
            state.whave = state.wsize;
          } else {
            dist = state.wsize - state.wnext;
            if (dist > copy) {
              dist = copy;
            }
            utils.arraySet(state.window, src, end - copy, dist, state.wnext);
            copy -= dist;
            if (copy) {
              utils.arraySet(state.window, src, end - copy, copy, 0);
              state.wnext = copy;
              state.whave = state.wsize;
            } else {
              state.wnext += dist;
              if (state.wnext === state.wsize) {
                state.wnext = 0;
              }
              if (state.whave < state.wsize) {
                state.whave += dist;
              }
            }
          }
          return 0;
        }
        function inflate(strm, flush) {
          var state;
          var input, output;
          var next;
          var put;
          var have, left;
          var hold;
          var bits;
          var _in, _out;
          var copy;
          var from;
          var from_source;
          var here = 0;
          var here_bits, here_op, here_val;
          var last_bits, last_op, last_val;
          var len;
          var ret;
          var hbuf = new utils.Buf8(4);
          var opts;
          var n;
          var order = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];
          if (!strm || !strm.state || !strm.output || !strm.input && strm.avail_in !== 0) {
            return Z_STREAM_ERROR;
          }
          state = strm.state;
          if (state.mode === TYPE) {
            state.mode = TYPEDO;
          }
          put = strm.next_out;
          output = strm.output;
          left = strm.avail_out;
          next = strm.next_in;
          input = strm.input;
          have = strm.avail_in;
          hold = state.hold;
          bits = state.bits;
          _in = have;
          _out = left;
          ret = Z_OK;
          inf_leave:
            for (; ; ) {
              switch (state.mode) {
                case HEAD:
                  if (state.wrap === 0) {
                    state.mode = TYPEDO;
                    break;
                  }
                  while (bits < 16) {
                    if (have === 0) {
                      break inf_leave;
                    }
                    have--;
                    hold += input[next++] << bits;
                    bits += 8;
                  }
                  if (state.wrap & 2 && hold === 35615) {
                    state.check = 0;
                    hbuf[0] = hold & 255;
                    hbuf[1] = hold >>> 8 & 255;
                    state.check = crc32(state.check, hbuf, 2, 0);
                    hold = 0;
                    bits = 0;
                    state.mode = FLAGS;
                    break;
                  }
                  state.flags = 0;
                  if (state.head) {
                    state.head.done = false;
                  }
                  if (!(state.wrap & 1) || (((hold & 255) << 8) + (hold >> 8)) % 31) {
                    strm.msg = "incorrect header check";
                    state.mode = BAD;
                    break;
                  }
                  if ((hold & 15) !== Z_DEFLATED) {
                    strm.msg = "unknown compression method";
                    state.mode = BAD;
                    break;
                  }
                  hold >>>= 4;
                  bits -= 4;
                  len = (hold & 15) + 8;
                  if (state.wbits === 0) {
                    state.wbits = len;
                  } else if (len > state.wbits) {
                    strm.msg = "invalid window size";
                    state.mode = BAD;
                    break;
                  }
                  state.dmax = 1 << len;
                  strm.adler = state.check = 1;
                  state.mode = hold & 512 ? DICTID : TYPE;
                  hold = 0;
                  bits = 0;
                  break;
                case FLAGS:
                  while (bits < 16) {
                    if (have === 0) {
                      break inf_leave;
                    }
                    have--;
                    hold += input[next++] << bits;
                    bits += 8;
                  }
                  state.flags = hold;
                  if ((state.flags & 255) !== Z_DEFLATED) {
                    strm.msg = "unknown compression method";
                    state.mode = BAD;
                    break;
                  }
                  if (state.flags & 57344) {
                    strm.msg = "unknown header flags set";
                    state.mode = BAD;
                    break;
                  }
                  if (state.head) {
                    state.head.text = hold >> 8 & 1;
                  }
                  if (state.flags & 512) {
                    hbuf[0] = hold & 255;
                    hbuf[1] = hold >>> 8 & 255;
                    state.check = crc32(state.check, hbuf, 2, 0);
                  }
                  hold = 0;
                  bits = 0;
                  state.mode = TIME;
                case TIME:
                  while (bits < 32) {
                    if (have === 0) {
                      break inf_leave;
                    }
                    have--;
                    hold += input[next++] << bits;
                    bits += 8;
                  }
                  if (state.head) {
                    state.head.time = hold;
                  }
                  if (state.flags & 512) {
                    hbuf[0] = hold & 255;
                    hbuf[1] = hold >>> 8 & 255;
                    hbuf[2] = hold >>> 16 & 255;
                    hbuf[3] = hold >>> 24 & 255;
                    state.check = crc32(state.check, hbuf, 4, 0);
                  }
                  hold = 0;
                  bits = 0;
                  state.mode = OS;
                case OS:
                  while (bits < 16) {
                    if (have === 0) {
                      break inf_leave;
                    }
                    have--;
                    hold += input[next++] << bits;
                    bits += 8;
                  }
                  if (state.head) {
                    state.head.xflags = hold & 255;
                    state.head.os = hold >> 8;
                  }
                  if (state.flags & 512) {
                    hbuf[0] = hold & 255;
                    hbuf[1] = hold >>> 8 & 255;
                    state.check = crc32(state.check, hbuf, 2, 0);
                  }
                  hold = 0;
                  bits = 0;
                  state.mode = EXLEN;
                case EXLEN:
                  if (state.flags & 1024) {
                    while (bits < 16) {
                      if (have === 0) {
                        break inf_leave;
                      }
                      have--;
                      hold += input[next++] << bits;
                      bits += 8;
                    }
                    state.length = hold;
                    if (state.head) {
                      state.head.extra_len = hold;
                    }
                    if (state.flags & 512) {
                      hbuf[0] = hold & 255;
                      hbuf[1] = hold >>> 8 & 255;
                      state.check = crc32(state.check, hbuf, 2, 0);
                    }
                    hold = 0;
                    bits = 0;
                  } else if (state.head) {
                    state.head.extra = null;
                  }
                  state.mode = EXTRA;
                case EXTRA:
                  if (state.flags & 1024) {
                    copy = state.length;
                    if (copy > have) {
                      copy = have;
                    }
                    if (copy) {
                      if (state.head) {
                        len = state.head.extra_len - state.length;
                        if (!state.head.extra) {
                          state.head.extra = new Array(state.head.extra_len);
                        }
                        utils.arraySet(state.head.extra, input, next, copy, len);
                      }
                      if (state.flags & 512) {
                        state.check = crc32(state.check, input, copy, next);
                      }
                      have -= copy;
                      next += copy;
                      state.length -= copy;
                    }
                    if (state.length) {
                      break inf_leave;
                    }
                  }
                  state.length = 0;
                  state.mode = NAME;
                case NAME:
                  if (state.flags & 2048) {
                    if (have === 0) {
                      break inf_leave;
                    }
                    copy = 0;
                    do {
                      len = input[next + copy++];
                      if (state.head && len && state.length < 65536) {
                        state.head.name += String.fromCharCode(len);
                      }
                    } while (len && copy < have);
                    if (state.flags & 512) {
                      state.check = crc32(state.check, input, copy, next);
                    }
                    have -= copy;
                    next += copy;
                    if (len) {
                      break inf_leave;
                    }
                  } else if (state.head) {
                    state.head.name = null;
                  }
                  state.length = 0;
                  state.mode = COMMENT;
                case COMMENT:
                  if (state.flags & 4096) {
                    if (have === 0) {
                      break inf_leave;
                    }
                    copy = 0;
                    do {
                      len = input[next + copy++];
                      if (state.head && len && state.length < 65536) {
                        state.head.comment += String.fromCharCode(len);
                      }
                    } while (len && copy < have);
                    if (state.flags & 512) {
                      state.check = crc32(state.check, input, copy, next);
                    }
                    have -= copy;
                    next += copy;
                    if (len) {
                      break inf_leave;
                    }
                  } else if (state.head) {
                    state.head.comment = null;
                  }
                  state.mode = HCRC;
                case HCRC:
                  if (state.flags & 512) {
                    while (bits < 16) {
                      if (have === 0) {
                        break inf_leave;
                      }
                      have--;
                      hold += input[next++] << bits;
                      bits += 8;
                    }
                    if (hold !== (state.check & 65535)) {
                      strm.msg = "header crc mismatch";
                      state.mode = BAD;
                      break;
                    }
                    hold = 0;
                    bits = 0;
                  }
                  if (state.head) {
                    state.head.hcrc = state.flags >> 9 & 1;
                    state.head.done = true;
                  }
                  strm.adler = state.check = 0;
                  state.mode = TYPE;
                  break;
                case DICTID:
                  while (bits < 32) {
                    if (have === 0) {
                      break inf_leave;
                    }
                    have--;
                    hold += input[next++] << bits;
                    bits += 8;
                  }
                  strm.adler = state.check = ZSWAP32(hold);
                  hold = 0;
                  bits = 0;
                  state.mode = DICT;
                case DICT:
                  if (state.havedict === 0) {
                    strm.next_out = put;
                    strm.avail_out = left;
                    strm.next_in = next;
                    strm.avail_in = have;
                    state.hold = hold;
                    state.bits = bits;
                    return Z_NEED_DICT;
                  }
                  strm.adler = state.check = 1;
                  state.mode = TYPE;
                case TYPE:
                  if (flush === Z_BLOCK || flush === Z_TREES) {
                    break inf_leave;
                  }
                case TYPEDO:
                  if (state.last) {
                    hold >>>= bits & 7;
                    bits -= bits & 7;
                    state.mode = CHECK;
                    break;
                  }
                  while (bits < 3) {
                    if (have === 0) {
                      break inf_leave;
                    }
                    have--;
                    hold += input[next++] << bits;
                    bits += 8;
                  }
                  state.last = hold & 1;
                  hold >>>= 1;
                  bits -= 1;
                  switch (hold & 3) {
                    case 0:
                      state.mode = STORED;
                      break;
                    case 1:
                      fixedtables(state);
                      state.mode = LEN_;
                      if (flush === Z_TREES) {
                        hold >>>= 2;
                        bits -= 2;
                        break inf_leave;
                      }
                      break;
                    case 2:
                      state.mode = TABLE;
                      break;
                    case 3:
                      strm.msg = "invalid block type";
                      state.mode = BAD;
                  }
                  hold >>>= 2;
                  bits -= 2;
                  break;
                case STORED:
                  hold >>>= bits & 7;
                  bits -= bits & 7;
                  while (bits < 32) {
                    if (have === 0) {
                      break inf_leave;
                    }
                    have--;
                    hold += input[next++] << bits;
                    bits += 8;
                  }
                  if ((hold & 65535) !== (hold >>> 16 ^ 65535)) {
                    strm.msg = "invalid stored block lengths";
                    state.mode = BAD;
                    break;
                  }
                  state.length = hold & 65535;
                  hold = 0;
                  bits = 0;
                  state.mode = COPY_;
                  if (flush === Z_TREES) {
                    break inf_leave;
                  }
                case COPY_:
                  state.mode = COPY;
                case COPY:
                  copy = state.length;
                  if (copy) {
                    if (copy > have) {
                      copy = have;
                    }
                    if (copy > left) {
                      copy = left;
                    }
                    if (copy === 0) {
                      break inf_leave;
                    }
                    utils.arraySet(output, input, next, copy, put);
                    have -= copy;
                    next += copy;
                    left -= copy;
                    put += copy;
                    state.length -= copy;
                    break;
                  }
                  state.mode = TYPE;
                  break;
                case TABLE:
                  while (bits < 14) {
                    if (have === 0) {
                      break inf_leave;
                    }
                    have--;
                    hold += input[next++] << bits;
                    bits += 8;
                  }
                  state.nlen = (hold & 31) + 257;
                  hold >>>= 5;
                  bits -= 5;
                  state.ndist = (hold & 31) + 1;
                  hold >>>= 5;
                  bits -= 5;
                  state.ncode = (hold & 15) + 4;
                  hold >>>= 4;
                  bits -= 4;
                  if (state.nlen > 286 || state.ndist > 30) {
                    strm.msg = "too many length or distance symbols";
                    state.mode = BAD;
                    break;
                  }
                  state.have = 0;
                  state.mode = LENLENS;
                case LENLENS:
                  while (state.have < state.ncode) {
                    while (bits < 3) {
                      if (have === 0) {
                        break inf_leave;
                      }
                      have--;
                      hold += input[next++] << bits;
                      bits += 8;
                    }
                    state.lens[order[state.have++]] = hold & 7;
                    hold >>>= 3;
                    bits -= 3;
                  }
                  while (state.have < 19) {
                    state.lens[order[state.have++]] = 0;
                  }
                  state.lencode = state.lendyn;
                  state.lenbits = 7;
                  opts = { bits: state.lenbits };
                  ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);
                  state.lenbits = opts.bits;
                  if (ret) {
                    strm.msg = "invalid code lengths set";
                    state.mode = BAD;
                    break;
                  }
                  state.have = 0;
                  state.mode = CODELENS;
                case CODELENS:
                  while (state.have < state.nlen + state.ndist) {
                    for (; ; ) {
                      here = state.lencode[hold & (1 << state.lenbits) - 1];
                      here_bits = here >>> 24;
                      here_op = here >>> 16 & 255;
                      here_val = here & 65535;
                      if (here_bits <= bits) {
                        break;
                      }
                      if (have === 0) {
                        break inf_leave;
                      }
                      have--;
                      hold += input[next++] << bits;
                      bits += 8;
                    }
                    if (here_val < 16) {
                      hold >>>= here_bits;
                      bits -= here_bits;
                      state.lens[state.have++] = here_val;
                    } else {
                      if (here_val === 16) {
                        n = here_bits + 2;
                        while (bits < n) {
                          if (have === 0) {
                            break inf_leave;
                          }
                          have--;
                          hold += input[next++] << bits;
                          bits += 8;
                        }
                        hold >>>= here_bits;
                        bits -= here_bits;
                        if (state.have === 0) {
                          strm.msg = "invalid bit length repeat";
                          state.mode = BAD;
                          break;
                        }
                        len = state.lens[state.have - 1];
                        copy = 3 + (hold & 3);
                        hold >>>= 2;
                        bits -= 2;
                      } else if (here_val === 17) {
                        n = here_bits + 3;
                        while (bits < n) {
                          if (have === 0) {
                            break inf_leave;
                          }
                          have--;
                          hold += input[next++] << bits;
                          bits += 8;
                        }
                        hold >>>= here_bits;
                        bits -= here_bits;
                        len = 0;
                        copy = 3 + (hold & 7);
                        hold >>>= 3;
                        bits -= 3;
                      } else {
                        n = here_bits + 7;
                        while (bits < n) {
                          if (have === 0) {
                            break inf_leave;
                          }
                          have--;
                          hold += input[next++] << bits;
                          bits += 8;
                        }
                        hold >>>= here_bits;
                        bits -= here_bits;
                        len = 0;
                        copy = 11 + (hold & 127);
                        hold >>>= 7;
                        bits -= 7;
                      }
                      if (state.have + copy > state.nlen + state.ndist) {
                        strm.msg = "invalid bit length repeat";
                        state.mode = BAD;
                        break;
                      }
                      while (copy--) {
                        state.lens[state.have++] = len;
                      }
                    }
                  }
                  if (state.mode === BAD) {
                    break;
                  }
                  if (state.lens[256] === 0) {
                    strm.msg = "invalid code -- missing end-of-block";
                    state.mode = BAD;
                    break;
                  }
                  state.lenbits = 9;
                  opts = { bits: state.lenbits };
                  ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);
                  state.lenbits = opts.bits;
                  if (ret) {
                    strm.msg = "invalid literal/lengths set";
                    state.mode = BAD;
                    break;
                  }
                  state.distbits = 6;
                  state.distcode = state.distdyn;
                  opts = { bits: state.distbits };
                  ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);
                  state.distbits = opts.bits;
                  if (ret) {
                    strm.msg = "invalid distances set";
                    state.mode = BAD;
                    break;
                  }
                  state.mode = LEN_;
                  if (flush === Z_TREES) {
                    break inf_leave;
                  }
                case LEN_:
                  state.mode = LEN;
                case LEN:
                  if (have >= 6 && left >= 258) {
                    strm.next_out = put;
                    strm.avail_out = left;
                    strm.next_in = next;
                    strm.avail_in = have;
                    state.hold = hold;
                    state.bits = bits;
                    inflate_fast(strm, _out);
                    put = strm.next_out;
                    output = strm.output;
                    left = strm.avail_out;
                    next = strm.next_in;
                    input = strm.input;
                    have = strm.avail_in;
                    hold = state.hold;
                    bits = state.bits;
                    if (state.mode === TYPE) {
                      state.back = -1;
                    }
                    break;
                  }
                  state.back = 0;
                  for (; ; ) {
                    here = state.lencode[hold & (1 << state.lenbits) - 1];
                    here_bits = here >>> 24;
                    here_op = here >>> 16 & 255;
                    here_val = here & 65535;
                    if (here_bits <= bits) {
                      break;
                    }
                    if (have === 0) {
                      break inf_leave;
                    }
                    have--;
                    hold += input[next++] << bits;
                    bits += 8;
                  }
                  if (here_op && (here_op & 240) === 0) {
                    last_bits = here_bits;
                    last_op = here_op;
                    last_val = here_val;
                    for (; ; ) {
                      here = state.lencode[last_val + ((hold & (1 << last_bits + last_op) - 1) >> last_bits)];
                      here_bits = here >>> 24;
                      here_op = here >>> 16 & 255;
                      here_val = here & 65535;
                      if (last_bits + here_bits <= bits) {
                        break;
                      }
                      if (have === 0) {
                        break inf_leave;
                      }
                      have--;
                      hold += input[next++] << bits;
                      bits += 8;
                    }
                    hold >>>= last_bits;
                    bits -= last_bits;
                    state.back += last_bits;
                  }
                  hold >>>= here_bits;
                  bits -= here_bits;
                  state.back += here_bits;
                  state.length = here_val;
                  if (here_op === 0) {
                    state.mode = LIT;
                    break;
                  }
                  if (here_op & 32) {
                    state.back = -1;
                    state.mode = TYPE;
                    break;
                  }
                  if (here_op & 64) {
                    strm.msg = "invalid literal/length code";
                    state.mode = BAD;
                    break;
                  }
                  state.extra = here_op & 15;
                  state.mode = LENEXT;
                case LENEXT:
                  if (state.extra) {
                    n = state.extra;
                    while (bits < n) {
                      if (have === 0) {
                        break inf_leave;
                      }
                      have--;
                      hold += input[next++] << bits;
                      bits += 8;
                    }
                    state.length += hold & (1 << state.extra) - 1;
                    hold >>>= state.extra;
                    bits -= state.extra;
                    state.back += state.extra;
                  }
                  state.was = state.length;
                  state.mode = DIST;
                case DIST:
                  for (; ; ) {
                    here = state.distcode[hold & (1 << state.distbits) - 1];
                    here_bits = here >>> 24;
                    here_op = here >>> 16 & 255;
                    here_val = here & 65535;
                    if (here_bits <= bits) {
                      break;
                    }
                    if (have === 0) {
                      break inf_leave;
                    }
                    have--;
                    hold += input[next++] << bits;
                    bits += 8;
                  }
                  if ((here_op & 240) === 0) {
                    last_bits = here_bits;
                    last_op = here_op;
                    last_val = here_val;
                    for (; ; ) {
                      here = state.distcode[last_val + ((hold & (1 << last_bits + last_op) - 1) >> last_bits)];
                      here_bits = here >>> 24;
                      here_op = here >>> 16 & 255;
                      here_val = here & 65535;
                      if (last_bits + here_bits <= bits) {
                        break;
                      }
                      if (have === 0) {
                        break inf_leave;
                      }
                      have--;
                      hold += input[next++] << bits;
                      bits += 8;
                    }
                    hold >>>= last_bits;
                    bits -= last_bits;
                    state.back += last_bits;
                  }
                  hold >>>= here_bits;
                  bits -= here_bits;
                  state.back += here_bits;
                  if (here_op & 64) {
                    strm.msg = "invalid distance code";
                    state.mode = BAD;
                    break;
                  }
                  state.offset = here_val;
                  state.extra = here_op & 15;
                  state.mode = DISTEXT;
                case DISTEXT:
                  if (state.extra) {
                    n = state.extra;
                    while (bits < n) {
                      if (have === 0) {
                        break inf_leave;
                      }
                      have--;
                      hold += input[next++] << bits;
                      bits += 8;
                    }
                    state.offset += hold & (1 << state.extra) - 1;
                    hold >>>= state.extra;
                    bits -= state.extra;
                    state.back += state.extra;
                  }
                  if (state.offset > state.dmax) {
                    strm.msg = "invalid distance too far back";
                    state.mode = BAD;
                    break;
                  }
                  state.mode = MATCH;
                case MATCH:
                  if (left === 0) {
                    break inf_leave;
                  }
                  copy = _out - left;
                  if (state.offset > copy) {
                    copy = state.offset - copy;
                    if (copy > state.whave) {
                      if (state.sane) {
                        strm.msg = "invalid distance too far back";
                        state.mode = BAD;
                        break;
                      }
                    }
                    if (copy > state.wnext) {
                      copy -= state.wnext;
                      from = state.wsize - copy;
                    } else {
                      from = state.wnext - copy;
                    }
                    if (copy > state.length) {
                      copy = state.length;
                    }
                    from_source = state.window;
                  } else {
                    from_source = output;
                    from = put - state.offset;
                    copy = state.length;
                  }
                  if (copy > left) {
                    copy = left;
                  }
                  left -= copy;
                  state.length -= copy;
                  do {
                    output[put++] = from_source[from++];
                  } while (--copy);
                  if (state.length === 0) {
                    state.mode = LEN;
                  }
                  break;
                case LIT:
                  if (left === 0) {
                    break inf_leave;
                  }
                  output[put++] = state.length;
                  left--;
                  state.mode = LEN;
                  break;
                case CHECK:
                  if (state.wrap) {
                    while (bits < 32) {
                      if (have === 0) {
                        break inf_leave;
                      }
                      have--;
                      hold |= input[next++] << bits;
                      bits += 8;
                    }
                    _out -= left;
                    strm.total_out += _out;
                    state.total += _out;
                    if (_out) {
                      strm.adler = state.check = state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out);
                    }
                    _out = left;
                    if ((state.flags ? hold : ZSWAP32(hold)) !== state.check) {
                      strm.msg = "incorrect data check";
                      state.mode = BAD;
                      break;
                    }
                    hold = 0;
                    bits = 0;
                  }
                  state.mode = LENGTH;
                case LENGTH:
                  if (state.wrap && state.flags) {
                    while (bits < 32) {
                      if (have === 0) {
                        break inf_leave;
                      }
                      have--;
                      hold += input[next++] << bits;
                      bits += 8;
                    }
                    if (hold !== (state.total & 4294967295)) {
                      strm.msg = "incorrect length check";
                      state.mode = BAD;
                      break;
                    }
                    hold = 0;
                    bits = 0;
                  }
                  state.mode = DONE;
                case DONE:
                  ret = Z_STREAM_END;
                  break inf_leave;
                case BAD:
                  ret = Z_DATA_ERROR;
                  break inf_leave;
                case MEM:
                  return Z_MEM_ERROR;
                case SYNC:
                default:
                  return Z_STREAM_ERROR;
              }
            }
          strm.next_out = put;
          strm.avail_out = left;
          strm.next_in = next;
          strm.avail_in = have;
          state.hold = hold;
          state.bits = bits;
          if (state.wsize || _out !== strm.avail_out && state.mode < BAD && (state.mode < CHECK || flush !== Z_FINISH)) {
            if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {
              state.mode = MEM;
              return Z_MEM_ERROR;
            }
          }
          _in -= strm.avail_in;
          _out -= strm.avail_out;
          strm.total_in += _in;
          strm.total_out += _out;
          state.total += _out;
          if (state.wrap && _out) {
            strm.adler = state.check = state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out);
          }
          strm.data_type = state.bits + (state.last ? 64 : 0) + (state.mode === TYPE ? 128 : 0) + (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);
          if ((_in === 0 && _out === 0 || flush === Z_FINISH) && ret === Z_OK) {
            ret = Z_BUF_ERROR;
          }
          return ret;
        }
        function inflateEnd(strm) {
          if (!strm || !strm.state) {
            return Z_STREAM_ERROR;
          }
          var state = strm.state;
          if (state.window) {
            state.window = null;
          }
          strm.state = null;
          return Z_OK;
        }
        function inflateGetHeader(strm, head) {
          var state;
          if (!strm || !strm.state) {
            return Z_STREAM_ERROR;
          }
          state = strm.state;
          if ((state.wrap & 2) === 0) {
            return Z_STREAM_ERROR;
          }
          state.head = head;
          head.done = false;
          return Z_OK;
        }
        exports3.inflateReset = inflateReset;
        exports3.inflateReset2 = inflateReset2;
        exports3.inflateResetKeep = inflateResetKeep;
        exports3.inflateInit = inflateInit;
        exports3.inflateInit2 = inflateInit2;
        exports3.inflate = inflate;
        exports3.inflateEnd = inflateEnd;
        exports3.inflateGetHeader = inflateGetHeader;
        exports3.inflateInfo = "pako inflate (from Nodeca project)";
      }, { "../utils/common": 27, "./adler32": 29, "./crc32": 31, "./inffast": 34, "./inftrees": 36 }], 36: [function(_dereq_, module4, exports3) {
        "use strict";
        var utils = _dereq_("../utils/common");
        var MAXBITS = 15;
        var ENOUGH_LENS = 852;
        var ENOUGH_DISTS = 592;
        var CODES = 0;
        var LENS = 1;
        var DISTS = 2;
        var lbase = [
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          13,
          15,
          17,
          19,
          23,
          27,
          31,
          35,
          43,
          51,
          59,
          67,
          83,
          99,
          115,
          131,
          163,
          195,
          227,
          258,
          0,
          0
        ];
        var lext = [
          16,
          16,
          16,
          16,
          16,
          16,
          16,
          16,
          17,
          17,
          17,
          17,
          18,
          18,
          18,
          18,
          19,
          19,
          19,
          19,
          20,
          20,
          20,
          20,
          21,
          21,
          21,
          21,
          16,
          72,
          78
        ];
        var dbase = [
          1,
          2,
          3,
          4,
          5,
          7,
          9,
          13,
          17,
          25,
          33,
          49,
          65,
          97,
          129,
          193,
          257,
          385,
          513,
          769,
          1025,
          1537,
          2049,
          3073,
          4097,
          6145,
          8193,
          12289,
          16385,
          24577,
          0,
          0
        ];
        var dext = [
          16,
          16,
          16,
          16,
          17,
          17,
          18,
          18,
          19,
          19,
          20,
          20,
          21,
          21,
          22,
          22,
          23,
          23,
          24,
          24,
          25,
          25,
          26,
          26,
          27,
          27,
          28,
          28,
          29,
          29,
          64,
          64
        ];
        module4.exports = function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts) {
          var bits = opts.bits;
          var len = 0;
          var sym = 0;
          var min = 0, max = 0;
          var root = 0;
          var curr = 0;
          var drop = 0;
          var left = 0;
          var used = 0;
          var huff = 0;
          var incr;
          var fill;
          var low;
          var mask;
          var next;
          var base = null;
          var base_index = 0;
          var end;
          var count = new utils.Buf16(MAXBITS + 1);
          var offs = new utils.Buf16(MAXBITS + 1);
          var extra = null;
          var extra_index = 0;
          var here_bits, here_op, here_val;
          for (len = 0; len <= MAXBITS; len++) {
            count[len] = 0;
          }
          for (sym = 0; sym < codes; sym++) {
            count[lens[lens_index + sym]]++;
          }
          root = bits;
          for (max = MAXBITS; max >= 1; max--) {
            if (count[max] !== 0) {
              break;
            }
          }
          if (root > max) {
            root = max;
          }
          if (max === 0) {
            table[table_index++] = 1 << 24 | 64 << 16 | 0;
            table[table_index++] = 1 << 24 | 64 << 16 | 0;
            opts.bits = 1;
            return 0;
          }
          for (min = 1; min < max; min++) {
            if (count[min] !== 0) {
              break;
            }
          }
          if (root < min) {
            root = min;
          }
          left = 1;
          for (len = 1; len <= MAXBITS; len++) {
            left <<= 1;
            left -= count[len];
            if (left < 0) {
              return -1;
            }
          }
          if (left > 0 && (type === CODES || max !== 1)) {
            return -1;
          }
          offs[1] = 0;
          for (len = 1; len < MAXBITS; len++) {
            offs[len + 1] = offs[len] + count[len];
          }
          for (sym = 0; sym < codes; sym++) {
            if (lens[lens_index + sym] !== 0) {
              work[offs[lens[lens_index + sym]]++] = sym;
            }
          }
          if (type === CODES) {
            base = extra = work;
            end = 19;
          } else if (type === LENS) {
            base = lbase;
            base_index -= 257;
            extra = lext;
            extra_index -= 257;
            end = 256;
          } else {
            base = dbase;
            extra = dext;
            end = -1;
          }
          huff = 0;
          sym = 0;
          len = min;
          next = table_index;
          curr = root;
          drop = 0;
          low = -1;
          used = 1 << root;
          mask = used - 1;
          if (type === LENS && used > ENOUGH_LENS || type === DISTS && used > ENOUGH_DISTS) {
            return 1;
          }
          var i = 0;
          for (; ; ) {
            i++;
            here_bits = len - drop;
            if (work[sym] < end) {
              here_op = 0;
              here_val = work[sym];
            } else if (work[sym] > end) {
              here_op = extra[extra_index + work[sym]];
              here_val = base[base_index + work[sym]];
            } else {
              here_op = 32 + 64;
              here_val = 0;
            }
            incr = 1 << len - drop;
            fill = 1 << curr;
            min = fill;
            do {
              fill -= incr;
              table[next + (huff >> drop) + fill] = here_bits << 24 | here_op << 16 | here_val | 0;
            } while (fill !== 0);
            incr = 1 << len - 1;
            while (huff & incr) {
              incr >>= 1;
            }
            if (incr !== 0) {
              huff &= incr - 1;
              huff += incr;
            } else {
              huff = 0;
            }
            sym++;
            if (--count[len] === 0) {
              if (len === max) {
                break;
              }
              len = lens[lens_index + work[sym]];
            }
            if (len > root && (huff & mask) !== low) {
              if (drop === 0) {
                drop = root;
              }
              next += min;
              curr = len - drop;
              left = 1 << curr;
              while (curr + drop < max) {
                left -= count[curr + drop];
                if (left <= 0) {
                  break;
                }
                curr++;
                left <<= 1;
              }
              used += 1 << curr;
              if (type === LENS && used > ENOUGH_LENS || type === DISTS && used > ENOUGH_DISTS) {
                return 1;
              }
              low = huff & mask;
              table[low] = root << 24 | curr << 16 | next - table_index | 0;
            }
          }
          if (huff !== 0) {
            table[next + huff] = len - drop << 24 | 64 << 16 | 0;
          }
          opts.bits = root;
          return 0;
        };
      }, { "../utils/common": 27 }], 37: [function(_dereq_, module4, exports3) {
        "use strict";
        module4.exports = {
          "2": "need dictionary",
          "1": "stream end",
          "0": "",
          "-1": "file error",
          "-2": "stream error",
          "-3": "data error",
          "-4": "insufficient memory",
          "-5": "buffer error",
          "-6": "incompatible version"
        };
      }, {}], 38: [function(_dereq_, module4, exports3) {
        "use strict";
        var utils = _dereq_("../utils/common");
        var Z_FIXED = 4;
        var Z_BINARY = 0;
        var Z_TEXT = 1;
        var Z_UNKNOWN = 2;
        function zero(buf) {
          var len = buf.length;
          while (--len >= 0) {
            buf[len] = 0;
          }
        }
        var STORED_BLOCK = 0;
        var STATIC_TREES = 1;
        var DYN_TREES = 2;
        var MIN_MATCH = 3;
        var MAX_MATCH = 258;
        var LENGTH_CODES = 29;
        var LITERALS = 256;
        var L_CODES = LITERALS + 1 + LENGTH_CODES;
        var D_CODES = 30;
        var BL_CODES = 19;
        var HEAP_SIZE = 2 * L_CODES + 1;
        var MAX_BITS = 15;
        var Buf_size = 16;
        var MAX_BL_BITS = 7;
        var END_BLOCK = 256;
        var REP_3_6 = 16;
        var REPZ_3_10 = 17;
        var REPZ_11_138 = 18;
        var extra_lbits = [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0];
        var extra_dbits = [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13];
        var extra_blbits = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7];
        var bl_order = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];
        var DIST_CODE_LEN = 512;
        var static_ltree = new Array((L_CODES + 2) * 2);
        zero(static_ltree);
        var static_dtree = new Array(D_CODES * 2);
        zero(static_dtree);
        var _dist_code = new Array(DIST_CODE_LEN);
        zero(_dist_code);
        var _length_code = new Array(MAX_MATCH - MIN_MATCH + 1);
        zero(_length_code);
        var base_length = new Array(LENGTH_CODES);
        zero(base_length);
        var base_dist = new Array(D_CODES);
        zero(base_dist);
        var StaticTreeDesc = function(static_tree, extra_bits, extra_base, elems, max_length) {
          this.static_tree = static_tree;
          this.extra_bits = extra_bits;
          this.extra_base = extra_base;
          this.elems = elems;
          this.max_length = max_length;
          this.has_stree = static_tree && static_tree.length;
        };
        var static_l_desc;
        var static_d_desc;
        var static_bl_desc;
        var TreeDesc = function(dyn_tree, stat_desc) {
          this.dyn_tree = dyn_tree;
          this.max_code = 0;
          this.stat_desc = stat_desc;
        };
        function d_code(dist) {
          return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];
        }
        function put_short(s, w) {
          s.pending_buf[s.pending++] = w & 255;
          s.pending_buf[s.pending++] = w >>> 8 & 255;
        }
        function send_bits(s, value, length) {
          if (s.bi_valid > Buf_size - length) {
            s.bi_buf |= value << s.bi_valid & 65535;
            put_short(s, s.bi_buf);
            s.bi_buf = value >> Buf_size - s.bi_valid;
            s.bi_valid += length - Buf_size;
          } else {
            s.bi_buf |= value << s.bi_valid & 65535;
            s.bi_valid += length;
          }
        }
        function send_code(s, c, tree) {
          send_bits(s, tree[c * 2], tree[c * 2 + 1]);
        }
        function bi_reverse(code, len) {
          var res = 0;
          do {
            res |= code & 1;
            code >>>= 1;
            res <<= 1;
          } while (--len > 0);
          return res >>> 1;
        }
        function bi_flush(s) {
          if (s.bi_valid === 16) {
            put_short(s, s.bi_buf);
            s.bi_buf = 0;
            s.bi_valid = 0;
          } else if (s.bi_valid >= 8) {
            s.pending_buf[s.pending++] = s.bi_buf & 255;
            s.bi_buf >>= 8;
            s.bi_valid -= 8;
          }
        }
        function gen_bitlen(s, desc) {
          var tree = desc.dyn_tree;
          var max_code = desc.max_code;
          var stree = desc.stat_desc.static_tree;
          var has_stree = desc.stat_desc.has_stree;
          var extra = desc.stat_desc.extra_bits;
          var base = desc.stat_desc.extra_base;
          var max_length = desc.stat_desc.max_length;
          var h;
          var n, m;
          var bits;
          var xbits;
          var f;
          var overflow = 0;
          for (bits = 0; bits <= MAX_BITS; bits++) {
            s.bl_count[bits] = 0;
          }
          tree[s.heap[s.heap_max] * 2 + 1] = 0;
          for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {
            n = s.heap[h];
            bits = tree[tree[n * 2 + 1] * 2 + 1] + 1;
            if (bits > max_length) {
              bits = max_length;
              overflow++;
            }
            tree[n * 2 + 1] = bits;
            if (n > max_code) {
              continue;
            }
            s.bl_count[bits]++;
            xbits = 0;
            if (n >= base) {
              xbits = extra[n - base];
            }
            f = tree[n * 2];
            s.opt_len += f * (bits + xbits);
            if (has_stree) {
              s.static_len += f * (stree[n * 2 + 1] + xbits);
            }
          }
          if (overflow === 0) {
            return;
          }
          do {
            bits = max_length - 1;
            while (s.bl_count[bits] === 0) {
              bits--;
            }
            s.bl_count[bits]--;
            s.bl_count[bits + 1] += 2;
            s.bl_count[max_length]--;
            overflow -= 2;
          } while (overflow > 0);
          for (bits = max_length; bits !== 0; bits--) {
            n = s.bl_count[bits];
            while (n !== 0) {
              m = s.heap[--h];
              if (m > max_code) {
                continue;
              }
              if (tree[m * 2 + 1] !== bits) {
                s.opt_len += (bits - tree[m * 2 + 1]) * tree[m * 2];
                tree[m * 2 + 1] = bits;
              }
              n--;
            }
          }
        }
        function gen_codes(tree, max_code, bl_count) {
          var next_code = new Array(MAX_BITS + 1);
          var code = 0;
          var bits;
          var n;
          for (bits = 1; bits <= MAX_BITS; bits++) {
            next_code[bits] = code = code + bl_count[bits - 1] << 1;
          }
          for (n = 0; n <= max_code; n++) {
            var len = tree[n * 2 + 1];
            if (len === 0) {
              continue;
            }
            tree[n * 2] = bi_reverse(next_code[len]++, len);
          }
        }
        function tr_static_init() {
          var n;
          var bits;
          var length;
          var code;
          var dist;
          var bl_count = new Array(MAX_BITS + 1);
          length = 0;
          for (code = 0; code < LENGTH_CODES - 1; code++) {
            base_length[code] = length;
            for (n = 0; n < 1 << extra_lbits[code]; n++) {
              _length_code[length++] = code;
            }
          }
          _length_code[length - 1] = code;
          dist = 0;
          for (code = 0; code < 16; code++) {
            base_dist[code] = dist;
            for (n = 0; n < 1 << extra_dbits[code]; n++) {
              _dist_code[dist++] = code;
            }
          }
          dist >>= 7;
          for (; code < D_CODES; code++) {
            base_dist[code] = dist << 7;
            for (n = 0; n < 1 << extra_dbits[code] - 7; n++) {
              _dist_code[256 + dist++] = code;
            }
          }
          for (bits = 0; bits <= MAX_BITS; bits++) {
            bl_count[bits] = 0;
          }
          n = 0;
          while (n <= 143) {
            static_ltree[n * 2 + 1] = 8;
            n++;
            bl_count[8]++;
          }
          while (n <= 255) {
            static_ltree[n * 2 + 1] = 9;
            n++;
            bl_count[9]++;
          }
          while (n <= 279) {
            static_ltree[n * 2 + 1] = 7;
            n++;
            bl_count[7]++;
          }
          while (n <= 287) {
            static_ltree[n * 2 + 1] = 8;
            n++;
            bl_count[8]++;
          }
          gen_codes(static_ltree, L_CODES + 1, bl_count);
          for (n = 0; n < D_CODES; n++) {
            static_dtree[n * 2 + 1] = 5;
            static_dtree[n * 2] = bi_reverse(n, 5);
          }
          static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);
          static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0, D_CODES, MAX_BITS);
          static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0, BL_CODES, MAX_BL_BITS);
        }
        function init_block(s) {
          var n;
          for (n = 0; n < L_CODES; n++) {
            s.dyn_ltree[n * 2] = 0;
          }
          for (n = 0; n < D_CODES; n++) {
            s.dyn_dtree[n * 2] = 0;
          }
          for (n = 0; n < BL_CODES; n++) {
            s.bl_tree[n * 2] = 0;
          }
          s.dyn_ltree[END_BLOCK * 2] = 1;
          s.opt_len = s.static_len = 0;
          s.last_lit = s.matches = 0;
        }
        function bi_windup(s) {
          if (s.bi_valid > 8) {
            put_short(s, s.bi_buf);
          } else if (s.bi_valid > 0) {
            s.pending_buf[s.pending++] = s.bi_buf;
          }
          s.bi_buf = 0;
          s.bi_valid = 0;
        }
        function copy_block(s, buf, len, header) {
          bi_windup(s);
          if (header) {
            put_short(s, len);
            put_short(s, ~len);
          }
          utils.arraySet(s.pending_buf, s.window, buf, len, s.pending);
          s.pending += len;
        }
        function smaller(tree, n, m, depth) {
          var _n2 = n * 2;
          var _m2 = m * 2;
          return tree[_n2] < tree[_m2] || tree[_n2] === tree[_m2] && depth[n] <= depth[m];
        }
        function pqdownheap(s, tree, k) {
          var v = s.heap[k];
          var j = k << 1;
          while (j <= s.heap_len) {
            if (j < s.heap_len && smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {
              j++;
            }
            if (smaller(tree, v, s.heap[j], s.depth)) {
              break;
            }
            s.heap[k] = s.heap[j];
            k = j;
            j <<= 1;
          }
          s.heap[k] = v;
        }
        function compress_block(s, ltree, dtree) {
          var dist;
          var lc;
          var lx = 0;
          var code;
          var extra;
          if (s.last_lit !== 0) {
            do {
              dist = s.pending_buf[s.d_buf + lx * 2] << 8 | s.pending_buf[s.d_buf + lx * 2 + 1];
              lc = s.pending_buf[s.l_buf + lx];
              lx++;
              if (dist === 0) {
                send_code(s, lc, ltree);
              } else {
                code = _length_code[lc];
                send_code(s, code + LITERALS + 1, ltree);
                extra = extra_lbits[code];
                if (extra !== 0) {
                  lc -= base_length[code];
                  send_bits(s, lc, extra);
                }
                dist--;
                code = d_code(dist);
                send_code(s, code, dtree);
                extra = extra_dbits[code];
                if (extra !== 0) {
                  dist -= base_dist[code];
                  send_bits(s, dist, extra);
                }
              }
            } while (lx < s.last_lit);
          }
          send_code(s, END_BLOCK, ltree);
        }
        function build_tree(s, desc) {
          var tree = desc.dyn_tree;
          var stree = desc.stat_desc.static_tree;
          var has_stree = desc.stat_desc.has_stree;
          var elems = desc.stat_desc.elems;
          var n, m;
          var max_code = -1;
          var node;
          s.heap_len = 0;
          s.heap_max = HEAP_SIZE;
          for (n = 0; n < elems; n++) {
            if (tree[n * 2] !== 0) {
              s.heap[++s.heap_len] = max_code = n;
              s.depth[n] = 0;
            } else {
              tree[n * 2 + 1] = 0;
            }
          }
          while (s.heap_len < 2) {
            node = s.heap[++s.heap_len] = max_code < 2 ? ++max_code : 0;
            tree[node * 2] = 1;
            s.depth[node] = 0;
            s.opt_len--;
            if (has_stree) {
              s.static_len -= stree[node * 2 + 1];
            }
          }
          desc.max_code = max_code;
          for (n = s.heap_len >> 1; n >= 1; n--) {
            pqdownheap(s, tree, n);
          }
          node = elems;
          do {
            n = s.heap[1];
            s.heap[1] = s.heap[s.heap_len--];
            pqdownheap(s, tree, 1);
            m = s.heap[1];
            s.heap[--s.heap_max] = n;
            s.heap[--s.heap_max] = m;
            tree[node * 2] = tree[n * 2] + tree[m * 2];
            s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;
            tree[n * 2 + 1] = tree[m * 2 + 1] = node;
            s.heap[1] = node++;
            pqdownheap(s, tree, 1);
          } while (s.heap_len >= 2);
          s.heap[--s.heap_max] = s.heap[1];
          gen_bitlen(s, desc);
          gen_codes(tree, max_code, s.bl_count);
        }
        function scan_tree(s, tree, max_code) {
          var n;
          var prevlen = -1;
          var curlen;
          var nextlen = tree[0 * 2 + 1];
          var count = 0;
          var max_count = 7;
          var min_count = 4;
          if (nextlen === 0) {
            max_count = 138;
            min_count = 3;
          }
          tree[(max_code + 1) * 2 + 1] = 65535;
          for (n = 0; n <= max_code; n++) {
            curlen = nextlen;
            nextlen = tree[(n + 1) * 2 + 1];
            if (++count < max_count && curlen === nextlen) {
              continue;
            } else if (count < min_count) {
              s.bl_tree[curlen * 2] += count;
            } else if (curlen !== 0) {
              if (curlen !== prevlen) {
                s.bl_tree[curlen * 2]++;
              }
              s.bl_tree[REP_3_6 * 2]++;
            } else if (count <= 10) {
              s.bl_tree[REPZ_3_10 * 2]++;
            } else {
              s.bl_tree[REPZ_11_138 * 2]++;
            }
            count = 0;
            prevlen = curlen;
            if (nextlen === 0) {
              max_count = 138;
              min_count = 3;
            } else if (curlen === nextlen) {
              max_count = 6;
              min_count = 3;
            } else {
              max_count = 7;
              min_count = 4;
            }
          }
        }
        function send_tree(s, tree, max_code) {
          var n;
          var prevlen = -1;
          var curlen;
          var nextlen = tree[0 * 2 + 1];
          var count = 0;
          var max_count = 7;
          var min_count = 4;
          if (nextlen === 0) {
            max_count = 138;
            min_count = 3;
          }
          for (n = 0; n <= max_code; n++) {
            curlen = nextlen;
            nextlen = tree[(n + 1) * 2 + 1];
            if (++count < max_count && curlen === nextlen) {
              continue;
            } else if (count < min_count) {
              do {
                send_code(s, curlen, s.bl_tree);
              } while (--count !== 0);
            } else if (curlen !== 0) {
              if (curlen !== prevlen) {
                send_code(s, curlen, s.bl_tree);
                count--;
              }
              send_code(s, REP_3_6, s.bl_tree);
              send_bits(s, count - 3, 2);
            } else if (count <= 10) {
              send_code(s, REPZ_3_10, s.bl_tree);
              send_bits(s, count - 3, 3);
            } else {
              send_code(s, REPZ_11_138, s.bl_tree);
              send_bits(s, count - 11, 7);
            }
            count = 0;
            prevlen = curlen;
            if (nextlen === 0) {
              max_count = 138;
              min_count = 3;
            } else if (curlen === nextlen) {
              max_count = 6;
              min_count = 3;
            } else {
              max_count = 7;
              min_count = 4;
            }
          }
        }
        function build_bl_tree(s) {
          var max_blindex;
          scan_tree(s, s.dyn_ltree, s.l_desc.max_code);
          scan_tree(s, s.dyn_dtree, s.d_desc.max_code);
          build_tree(s, s.bl_desc);
          for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {
            if (s.bl_tree[bl_order[max_blindex] * 2 + 1] !== 0) {
              break;
            }
          }
          s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;
          return max_blindex;
        }
        function send_all_trees(s, lcodes, dcodes, blcodes) {
          var rank;
          send_bits(s, lcodes - 257, 5);
          send_bits(s, dcodes - 1, 5);
          send_bits(s, blcodes - 4, 4);
          for (rank = 0; rank < blcodes; rank++) {
            send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1], 3);
          }
          send_tree(s, s.dyn_ltree, lcodes - 1);
          send_tree(s, s.dyn_dtree, dcodes - 1);
        }
        function detect_data_type(s) {
          var black_mask = 4093624447;
          var n;
          for (n = 0; n <= 31; n++, black_mask >>>= 1) {
            if (black_mask & 1 && s.dyn_ltree[n * 2] !== 0) {
              return Z_BINARY;
            }
          }
          if (s.dyn_ltree[9 * 2] !== 0 || s.dyn_ltree[10 * 2] !== 0 || s.dyn_ltree[13 * 2] !== 0) {
            return Z_TEXT;
          }
          for (n = 32; n < LITERALS; n++) {
            if (s.dyn_ltree[n * 2] !== 0) {
              return Z_TEXT;
            }
          }
          return Z_BINARY;
        }
        var static_init_done = false;
        function _tr_init(s) {
          if (!static_init_done) {
            tr_static_init();
            static_init_done = true;
          }
          s.l_desc = new TreeDesc(s.dyn_ltree, static_l_desc);
          s.d_desc = new TreeDesc(s.dyn_dtree, static_d_desc);
          s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);
          s.bi_buf = 0;
          s.bi_valid = 0;
          init_block(s);
        }
        function _tr_stored_block(s, buf, stored_len, last) {
          send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);
          copy_block(s, buf, stored_len, true);
        }
        function _tr_align(s) {
          send_bits(s, STATIC_TREES << 1, 3);
          send_code(s, END_BLOCK, static_ltree);
          bi_flush(s);
        }
        function _tr_flush_block(s, buf, stored_len, last) {
          var opt_lenb, static_lenb;
          var max_blindex = 0;
          if (s.level > 0) {
            if (s.strm.data_type === Z_UNKNOWN) {
              s.strm.data_type = detect_data_type(s);
            }
            build_tree(s, s.l_desc);
            build_tree(s, s.d_desc);
            max_blindex = build_bl_tree(s);
            opt_lenb = s.opt_len + 3 + 7 >>> 3;
            static_lenb = s.static_len + 3 + 7 >>> 3;
            if (static_lenb <= opt_lenb) {
              opt_lenb = static_lenb;
            }
          } else {
            opt_lenb = static_lenb = stored_len + 5;
          }
          if (stored_len + 4 <= opt_lenb && buf !== -1) {
            _tr_stored_block(s, buf, stored_len, last);
          } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {
            send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);
            compress_block(s, static_ltree, static_dtree);
          } else {
            send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);
            send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);
            compress_block(s, s.dyn_ltree, s.dyn_dtree);
          }
          init_block(s);
          if (last) {
            bi_windup(s);
          }
        }
        function _tr_tally(s, dist, lc) {
          s.pending_buf[s.d_buf + s.last_lit * 2] = dist >>> 8 & 255;
          s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 255;
          s.pending_buf[s.l_buf + s.last_lit] = lc & 255;
          s.last_lit++;
          if (dist === 0) {
            s.dyn_ltree[lc * 2]++;
          } else {
            s.matches++;
            dist--;
            s.dyn_ltree[(_length_code[lc] + LITERALS + 1) * 2]++;
            s.dyn_dtree[d_code(dist) * 2]++;
          }
          return s.last_lit === s.lit_bufsize - 1;
        }
        exports3._tr_init = _tr_init;
        exports3._tr_stored_block = _tr_stored_block;
        exports3._tr_flush_block = _tr_flush_block;
        exports3._tr_tally = _tr_tally;
        exports3._tr_align = _tr_align;
      }, { "../utils/common": 27 }], 39: [function(_dereq_, module4, exports3) {
        "use strict";
        function ZStream() {
          this.input = null;
          this.next_in = 0;
          this.avail_in = 0;
          this.total_in = 0;
          this.output = null;
          this.next_out = 0;
          this.avail_out = 0;
          this.total_out = 0;
          this.msg = "";
          this.state = null;
          this.data_type = 2;
          this.adler = 0;
        }
        module4.exports = ZStream;
      }, {}] }, {}, [9])(9);
    });
  }
});

// node_modules/xlsx/xlsx.js
var require_xlsx = __commonJS({
  "node_modules/xlsx/xlsx.js"(exports, module2) {
    var XLSX = {};
    function make_xlsx_lib(XLSX2) {
      XLSX2.version = "0.17.3";
      var current_codepage = 1200, current_ansi = 1252;
      if (typeof module2 !== "undefined" && typeof require !== "undefined") {
        if (typeof cptable === "undefined") {
          if (typeof global !== "undefined")
            global.cptable = require_cpexcel();
          else if (typeof window !== "undefined")
            window.cptable = require_cpexcel();
        }
      }
      var VALID_ANSI = [874, 932, 936, 949, 950];
      for (var i = 0; i <= 8; ++i)
        VALID_ANSI.push(1250 + i);
      var CS2CP = {
        0: 1252,
        1: 65001,
        2: 65001,
        77: 1e4,
        128: 932,
        129: 949,
        130: 1361,
        134: 936,
        136: 950,
        161: 1253,
        162: 1254,
        163: 1258,
        177: 1255,
        178: 1256,
        186: 1257,
        204: 1251,
        222: 874,
        238: 1250,
        255: 1252,
        69: 6969
      };
      var set_ansi = function(cp) {
        if (VALID_ANSI.indexOf(cp) == -1)
          return;
        current_ansi = CS2CP[0] = cp;
      };
      function reset_ansi() {
        set_ansi(1252);
      }
      var set_cp = function(cp) {
        current_codepage = cp;
        set_ansi(cp);
      };
      function reset_cp() {
        set_cp(1200);
        reset_ansi();
      }
      function char_codes(data) {
        var o = [];
        for (var i2 = 0, len = data.length; i2 < len; ++i2)
          o[i2] = data.charCodeAt(i2);
        return o;
      }
      function utf16leread(data) {
        var o = [];
        for (var i2 = 0; i2 < data.length >> 1; ++i2)
          o[i2] = String.fromCharCode(data.charCodeAt(2 * i2) + (data.charCodeAt(2 * i2 + 1) << 8));
        return o.join("");
      }
      function utf16beread(data) {
        var o = [];
        for (var i2 = 0; i2 < data.length >> 1; ++i2)
          o[i2] = String.fromCharCode(data.charCodeAt(2 * i2 + 1) + (data.charCodeAt(2 * i2) << 8));
        return o.join("");
      }
      var debom = function(data) {
        var c1 = data.charCodeAt(0), c2 = data.charCodeAt(1);
        if (c1 == 255 && c2 == 254)
          return utf16leread(data.slice(2));
        if (c1 == 254 && c2 == 255)
          return utf16beread(data.slice(2));
        if (c1 == 65279)
          return data.slice(1);
        return data;
      };
      var _getchar = function _gc1(x) {
        return String.fromCharCode(x);
      };
      var _getansi = function _ga1(x) {
        return String.fromCharCode(x);
      };
      if (typeof cptable !== "undefined") {
        set_cp = function(cp) {
          current_codepage = cp;
          set_ansi(cp);
        };
        debom = function(data) {
          if (data.charCodeAt(0) === 255 && data.charCodeAt(1) === 254) {
            return cptable.utils.decode(1200, char_codes(data.slice(2)));
          }
          return data;
        };
        _getchar = function _gc2(x) {
          if (current_codepage === 1200)
            return String.fromCharCode(x);
          return cptable.utils.decode(current_codepage, [x & 255, x >> 8])[0];
        };
        _getansi = function _ga2(x) {
          return cptable.utils.decode(current_ansi, [x])[0];
        };
      }
      var DENSE = null;
      var DIF_XL = true;
      var Base64 = function make_b64() {
        var map = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
        return {
          encode: function(input) {
            var o = "";
            var c1 = 0, c2 = 0, c3 = 0, e1 = 0, e2 = 0, e3 = 0, e4 = 0;
            for (var i2 = 0; i2 < input.length; ) {
              c1 = input.charCodeAt(i2++);
              e1 = c1 >> 2;
              c2 = input.charCodeAt(i2++);
              e2 = (c1 & 3) << 4 | c2 >> 4;
              c3 = input.charCodeAt(i2++);
              e3 = (c2 & 15) << 2 | c3 >> 6;
              e4 = c3 & 63;
              if (isNaN(c2)) {
                e3 = e4 = 64;
              } else if (isNaN(c3)) {
                e4 = 64;
              }
              o += map.charAt(e1) + map.charAt(e2) + map.charAt(e3) + map.charAt(e4);
            }
            return o;
          },
          decode: function b64_decode(input) {
            var o = "";
            var c1 = 0, c2 = 0, c3 = 0, e1 = 0, e2 = 0, e3 = 0, e4 = 0;
            input = input.replace(/[^\w\+\/\=]/g, "");
            for (var i2 = 0; i2 < input.length; ) {
              e1 = map.indexOf(input.charAt(i2++));
              e2 = map.indexOf(input.charAt(i2++));
              c1 = e1 << 2 | e2 >> 4;
              o += String.fromCharCode(c1);
              e3 = map.indexOf(input.charAt(i2++));
              c2 = (e2 & 15) << 4 | e3 >> 2;
              if (e3 !== 64) {
                o += String.fromCharCode(c2);
              }
              e4 = map.indexOf(input.charAt(i2++));
              c3 = (e3 & 3) << 6 | e4;
              if (e4 !== 64) {
                o += String.fromCharCode(c3);
              }
            }
            return o;
          }
        };
      }();
      var has_buf = typeof Buffer !== "undefined" && typeof process !== "undefined" && typeof process.versions !== "undefined" && !!process.versions.node;
      var Buffer_from = function() {
      };
      if (typeof Buffer !== "undefined") {
        var nbfs = !Buffer.from;
        if (!nbfs)
          try {
            Buffer.from("foo", "utf8");
          } catch (e) {
            nbfs = true;
          }
        Buffer_from = nbfs ? function(buf, enc) {
          return enc ? new Buffer(buf, enc) : new Buffer(buf);
        } : Buffer.from.bind(Buffer);
        if (!Buffer.alloc)
          Buffer.alloc = function(n) {
            return new Buffer(n);
          };
        if (!Buffer.allocUnsafe)
          Buffer.allocUnsafe = function(n) {
            return new Buffer(n);
          };
      }
      function new_raw_buf(len) {
        return has_buf ? Buffer.alloc(len) : new Array(len);
      }
      function new_unsafe_buf(len) {
        return has_buf ? Buffer.allocUnsafe(len) : new Array(len);
      }
      var s2a = function s2a2(s) {
        if (has_buf)
          return Buffer_from(s, "binary");
        return s.split("").map(function(x) {
          return x.charCodeAt(0) & 255;
        });
      };
      function s2ab(s) {
        if (typeof ArrayBuffer === "undefined")
          return s2a(s);
        var buf = new ArrayBuffer(s.length), view = new Uint8Array(buf);
        for (var i2 = 0; i2 != s.length; ++i2)
          view[i2] = s.charCodeAt(i2) & 255;
        return buf;
      }
      function a2s(data) {
        if (Array.isArray(data))
          return data.map(function(c) {
            return String.fromCharCode(c);
          }).join("");
        var o = [];
        for (var i2 = 0; i2 < data.length; ++i2)
          o[i2] = String.fromCharCode(data[i2]);
        return o.join("");
      }
      function a2u(data) {
        if (typeof Uint8Array === "undefined")
          throw new Error("Unsupported");
        return new Uint8Array(data);
      }
      function ab2a(data) {
        if (typeof ArrayBuffer == "undefined")
          throw new Error("Unsupported");
        if (data instanceof ArrayBuffer)
          return ab2a(new Uint8Array(data));
        var o = new Array(data.length);
        for (var i2 = 0; i2 < data.length; ++i2)
          o[i2] = data[i2];
        return o;
      }
      var bconcat = function(bufs) {
        return [].concat.apply([], bufs);
      };
      var chr0 = /\u0000/g, chr1 = /[\u0001-\u0006]/g;
      var SSF = {};
      var make_ssf = function make_ssf2(SSF2) {
        SSF2.version = "0.11.2";
        function _strrev(x) {
          var o = "", i2 = x.length - 1;
          while (i2 >= 0)
            o += x.charAt(i2--);
          return o;
        }
        function fill2(c, l) {
          var o = "";
          while (o.length < l)
            o += c;
          return o;
        }
        function pad0(v, d) {
          var t = "" + v;
          return t.length >= d ? t : fill2("0", d - t.length) + t;
        }
        function pad_(v, d) {
          var t = "" + v;
          return t.length >= d ? t : fill2(" ", d - t.length) + t;
        }
        function rpad_(v, d) {
          var t = "" + v;
          return t.length >= d ? t : t + fill2(" ", d - t.length);
        }
        function pad0r1(v, d) {
          var t = "" + Math.round(v);
          return t.length >= d ? t : fill2("0", d - t.length) + t;
        }
        function pad0r2(v, d) {
          var t = "" + v;
          return t.length >= d ? t : fill2("0", d - t.length) + t;
        }
        var p2_32 = Math.pow(2, 32);
        function pad0r(v, d) {
          if (v > p2_32 || v < -p2_32)
            return pad0r1(v, d);
          var i2 = Math.round(v);
          return pad0r2(i2, d);
        }
        function isgeneral(s, i2) {
          i2 = i2 || 0;
          return s.length >= 7 + i2 && (s.charCodeAt(i2) | 32) === 103 && (s.charCodeAt(i2 + 1) | 32) === 101 && (s.charCodeAt(i2 + 2) | 32) === 110 && (s.charCodeAt(i2 + 3) | 32) === 101 && (s.charCodeAt(i2 + 4) | 32) === 114 && (s.charCodeAt(i2 + 5) | 32) === 97 && (s.charCodeAt(i2 + 6) | 32) === 108;
        }
        var days = [
          ["Sun", "Sunday"],
          ["Mon", "Monday"],
          ["Tue", "Tuesday"],
          ["Wed", "Wednesday"],
          ["Thu", "Thursday"],
          ["Fri", "Friday"],
          ["Sat", "Saturday"]
        ];
        var months = [
          ["J", "Jan", "January"],
          ["F", "Feb", "February"],
          ["M", "Mar", "March"],
          ["A", "Apr", "April"],
          ["M", "May", "May"],
          ["J", "Jun", "June"],
          ["J", "Jul", "July"],
          ["A", "Aug", "August"],
          ["S", "Sep", "September"],
          ["O", "Oct", "October"],
          ["N", "Nov", "November"],
          ["D", "Dec", "December"]
        ];
        function init_table(t) {
          t[0] = "General";
          t[1] = "0";
          t[2] = "0.00";
          t[3] = "#,##0";
          t[4] = "#,##0.00";
          t[9] = "0%";
          t[10] = "0.00%";
          t[11] = "0.00E+00";
          t[12] = "# ?/?";
          t[13] = "# ??/??";
          t[14] = "m/d/yy";
          t[15] = "d-mmm-yy";
          t[16] = "d-mmm";
          t[17] = "mmm-yy";
          t[18] = "h:mm AM/PM";
          t[19] = "h:mm:ss AM/PM";
          t[20] = "h:mm";
          t[21] = "h:mm:ss";
          t[22] = "m/d/yy h:mm";
          t[37] = "#,##0 ;(#,##0)";
          t[38] = "#,##0 ;[Red](#,##0)";
          t[39] = "#,##0.00;(#,##0.00)";
          t[40] = "#,##0.00;[Red](#,##0.00)";
          t[45] = "mm:ss";
          t[46] = "[h]:mm:ss";
          t[47] = "mmss.0";
          t[48] = "##0.0E+0";
          t[49] = "@";
          t[56] = '"\u4E0A\u5348/\u4E0B\u5348 "hh"\u6642"mm"\u5206"ss"\u79D2 "';
        }
        var table_fmt = {};
        init_table(table_fmt);
        var default_map = [];
        var defi = 0;
        for (defi = 5; defi <= 8; ++defi)
          default_map[defi] = 32 + defi;
        for (defi = 23; defi <= 26; ++defi)
          default_map[defi] = 0;
        for (defi = 27; defi <= 31; ++defi)
          default_map[defi] = 14;
        for (defi = 50; defi <= 58; ++defi)
          default_map[defi] = 14;
        for (defi = 59; defi <= 62; ++defi)
          default_map[defi] = defi - 58;
        for (defi = 67; defi <= 68; ++defi)
          default_map[defi] = defi - 58;
        for (defi = 72; defi <= 75; ++defi)
          default_map[defi] = defi - 58;
        for (defi = 67; defi <= 68; ++defi)
          default_map[defi] = defi - 57;
        for (defi = 76; defi <= 78; ++defi)
          default_map[defi] = defi - 56;
        for (defi = 79; defi <= 81; ++defi)
          default_map[defi] = defi - 34;
        var default_str = [];
        default_str[5] = default_str[63] = '"$"#,##0_);\\("$"#,##0\\)';
        default_str[6] = default_str[64] = '"$"#,##0_);[Red]\\("$"#,##0\\)';
        default_str[7] = default_str[65] = '"$"#,##0.00_);\\("$"#,##0.00\\)';
        default_str[8] = default_str[66] = '"$"#,##0.00_);[Red]\\("$"#,##0.00\\)';
        default_str[41] = '_(* #,##0_);_(* \\(#,##0\\);_(* "-"_);_(@_)';
        default_str[42] = '_("$"* #,##0_);_("$"* \\(#,##0\\);_("$"* "-"_);_(@_)';
        default_str[43] = '_(* #,##0.00_);_(* \\(#,##0.00\\);_(* "-"??_);_(@_)';
        default_str[44] = '_("$"* #,##0.00_);_("$"* \\(#,##0.00\\);_("$"* "-"??_);_(@_)';
        function frac(x, D, mixed) {
          var sgn = x < 0 ? -1 : 1;
          var B = x * sgn;
          var P_2 = 0, P_1 = 1, P = 0;
          var Q_2 = 1, Q_1 = 0, Q = 0;
          var A = Math.floor(B);
          while (Q_1 < D) {
            A = Math.floor(B);
            P = A * P_1 + P_2;
            Q = A * Q_1 + Q_2;
            if (B - A < 5e-8)
              break;
            B = 1 / (B - A);
            P_2 = P_1;
            P_1 = P;
            Q_2 = Q_1;
            Q_1 = Q;
          }
          if (Q > D) {
            if (Q_1 > D) {
              Q = Q_2;
              P = P_2;
            } else {
              Q = Q_1;
              P = P_1;
            }
          }
          if (!mixed)
            return [0, sgn * P, Q];
          var q = Math.floor(sgn * P / Q);
          return [q, sgn * P - q * Q, Q];
        }
        function parse_date_code(v, opts, b2) {
          if (v > 2958465 || v < 0)
            return null;
          var date = v | 0, time = Math.floor(86400 * (v - date)), dow = 0;
          var dout = [];
          var out = { D: date, T: time, u: 86400 * (v - date) - time, y: 0, m: 0, d: 0, H: 0, M: 0, S: 0, q: 0 };
          if (Math.abs(out.u) < 1e-6)
            out.u = 0;
          if (opts && opts.date1904)
            date += 1462;
          if (out.u > 0.9999) {
            out.u = 0;
            if (++time == 86400) {
              out.T = time = 0;
              ++date;
              ++out.D;
            }
          }
          if (date === 60) {
            dout = b2 ? [1317, 10, 29] : [1900, 2, 29];
            dow = 3;
          } else if (date === 0) {
            dout = b2 ? [1317, 8, 29] : [1900, 1, 0];
            dow = 6;
          } else {
            if (date > 60)
              --date;
            var d = new Date(1900, 0, 1);
            d.setDate(d.getDate() + date - 1);
            dout = [d.getFullYear(), d.getMonth() + 1, d.getDate()];
            dow = d.getDay();
            if (date < 60)
              dow = (dow + 6) % 7;
            if (b2)
              dow = fix_hijri(d, dout);
          }
          out.y = dout[0];
          out.m = dout[1];
          out.d = dout[2];
          out.S = time % 60;
          time = Math.floor(time / 60);
          out.M = time % 60;
          time = Math.floor(time / 60);
          out.H = time;
          out.q = dow;
          return out;
        }
        SSF2.parse_date_code = parse_date_code;
        var basedate2 = new Date(1899, 11, 31, 0, 0, 0);
        var dnthresh2 = basedate2.getTime();
        var base1904 = new Date(1900, 2, 1, 0, 0, 0);
        function datenum_local(v, date1904) {
          var epoch = v.getTime();
          if (date1904)
            epoch -= 1461 * 24 * 60 * 60 * 1e3;
          else if (v >= base1904)
            epoch += 24 * 60 * 60 * 1e3;
          return (epoch - (dnthresh2 + (v.getTimezoneOffset() - basedate2.getTimezoneOffset()) * 6e4)) / (24 * 60 * 60 * 1e3);
        }
        function general_fmt_int(v) {
          return v.toString(10);
        }
        SSF2._general_int = general_fmt_int;
        var general_fmt_num = function make_general_fmt_num() {
          var trailing_zeroes_and_decimal = /(?:\.0*|(\.\d*[1-9])0+)$/;
          function strip_decimal(o) {
            return o.indexOf(".") == -1 ? o : o.replace(trailing_zeroes_and_decimal, "$1");
          }
          var mantissa_zeroes_and_decimal = /(?:\.0*|(\.\d*[1-9])0+)[Ee]/;
          var exp_with_single_digit = /(E[+-])(\d)$/;
          function normalize_exp(o) {
            if (o.indexOf("E") == -1)
              return o;
            return o.replace(mantissa_zeroes_and_decimal, "$1E").replace(exp_with_single_digit, "$10$2");
          }
          function small_exp(v) {
            var w = v < 0 ? 12 : 11;
            var o = strip_decimal(v.toFixed(12));
            if (o.length <= w)
              return o;
            o = v.toPrecision(10);
            if (o.length <= w)
              return o;
            return v.toExponential(5);
          }
          function large_exp(v) {
            var o = strip_decimal(v.toFixed(11));
            return o.length > (v < 0 ? 12 : 11) || o === "0" || o === "-0" ? v.toPrecision(6) : o;
          }
          function general_fmt_num_base(v) {
            var V = Math.floor(Math.log(Math.abs(v)) * Math.LOG10E), o;
            if (V >= -4 && V <= -1)
              o = v.toPrecision(10 + V);
            else if (Math.abs(V) <= 9)
              o = small_exp(v);
            else if (V === 10)
              o = v.toFixed(10).substr(0, 12);
            else
              o = large_exp(v);
            return strip_decimal(normalize_exp(o.toUpperCase()));
          }
          return general_fmt_num_base;
        }();
        SSF2._general_num = general_fmt_num;
        function general_fmt(v, opts) {
          switch (typeof v) {
            case "string":
              return v;
            case "boolean":
              return v ? "TRUE" : "FALSE";
            case "number":
              return (v | 0) === v ? v.toString(10) : general_fmt_num(v);
            case "undefined":
              return "";
            case "object":
              if (v == null)
                return "";
              if (v instanceof Date)
                return format(14, datenum_local(v, opts && opts.date1904), opts);
          }
          throw new Error("unsupported value in General format: " + v);
        }
        SSF2._general = general_fmt;
        function fix_hijri(date, o) {
          o[0] -= 581;
          var dow = date.getDay();
          if (date < 60)
            dow = (dow + 6) % 7;
          return dow;
        }
        function write_date(type, fmt, val, ss0) {
          var o = "", ss = 0, tt = 0, y = val.y, out, outl = 0;
          switch (type) {
            case 98:
              y = val.y + 543;
            case 121:
              switch (fmt.length) {
                case 1:
                case 2:
                  out = y % 100;
                  outl = 2;
                  break;
                default:
                  out = y % 1e4;
                  outl = 4;
                  break;
              }
              break;
            case 109:
              switch (fmt.length) {
                case 1:
                case 2:
                  out = val.m;
                  outl = fmt.length;
                  break;
                case 3:
                  return months[val.m - 1][1];
                case 5:
                  return months[val.m - 1][0];
                default:
                  return months[val.m - 1][2];
              }
              break;
            case 100:
              switch (fmt.length) {
                case 1:
                case 2:
                  out = val.d;
                  outl = fmt.length;
                  break;
                case 3:
                  return days[val.q][0];
                default:
                  return days[val.q][1];
              }
              break;
            case 104:
              switch (fmt.length) {
                case 1:
                case 2:
                  out = 1 + (val.H + 11) % 12;
                  outl = fmt.length;
                  break;
                default:
                  throw "bad hour format: " + fmt;
              }
              break;
            case 72:
              switch (fmt.length) {
                case 1:
                case 2:
                  out = val.H;
                  outl = fmt.length;
                  break;
                default:
                  throw "bad hour format: " + fmt;
              }
              break;
            case 77:
              switch (fmt.length) {
                case 1:
                case 2:
                  out = val.M;
                  outl = fmt.length;
                  break;
                default:
                  throw "bad minute format: " + fmt;
              }
              break;
            case 115:
              if (fmt != "s" && fmt != "ss" && fmt != ".0" && fmt != ".00" && fmt != ".000")
                throw "bad second format: " + fmt;
              if (val.u === 0 && (fmt == "s" || fmt == "ss"))
                return pad0(val.S, fmt.length);
              if (ss0 >= 2)
                tt = ss0 === 3 ? 1e3 : 100;
              else
                tt = ss0 === 1 ? 10 : 1;
              ss = Math.round(tt * (val.S + val.u));
              if (ss >= 60 * tt)
                ss = 0;
              if (fmt === "s")
                return ss === 0 ? "0" : "" + ss / tt;
              o = pad0(ss, 2 + ss0);
              if (fmt === "ss")
                return o.substr(0, 2);
              return "." + o.substr(2, fmt.length - 1);
            case 90:
              switch (fmt) {
                case "[h]":
                case "[hh]":
                  out = val.D * 24 + val.H;
                  break;
                case "[m]":
                case "[mm]":
                  out = (val.D * 24 + val.H) * 60 + val.M;
                  break;
                case "[s]":
                case "[ss]":
                  out = ((val.D * 24 + val.H) * 60 + val.M) * 60 + Math.round(val.S + val.u);
                  break;
                default:
                  throw "bad abstime format: " + fmt;
              }
              outl = fmt.length === 3 ? 1 : 2;
              break;
            case 101:
              out = y;
              outl = 1;
              break;
          }
          var outstr = outl > 0 ? pad0(out, outl) : "";
          return outstr;
        }
        function commaify(s) {
          var w = 3;
          if (s.length <= w)
            return s;
          var j = s.length % w, o = s.substr(0, j);
          for (; j != s.length; j += w)
            o += (o.length > 0 ? "," : "") + s.substr(j, w);
          return o;
        }
        var write_num = function make_write_num() {
          var pct1 = /%/g;
          function write_num_pct(type, fmt, val) {
            var sfmt = fmt.replace(pct1, ""), mul = fmt.length - sfmt.length;
            return write_num(type, sfmt, val * Math.pow(10, 2 * mul)) + fill2("%", mul);
          }
          function write_num_cm(type, fmt, val) {
            var idx = fmt.length - 1;
            while (fmt.charCodeAt(idx - 1) === 44)
              --idx;
            return write_num(type, fmt.substr(0, idx), val / Math.pow(10, 3 * (fmt.length - idx)));
          }
          function write_num_exp(fmt, val) {
            var o;
            var idx = fmt.indexOf("E") - fmt.indexOf(".") - 1;
            if (fmt.match(/^#+0.0E\+0$/)) {
              if (val == 0)
                return "0.0E+0";
              else if (val < 0)
                return "-" + write_num_exp(fmt, -val);
              var period = fmt.indexOf(".");
              if (period === -1)
                period = fmt.indexOf("E");
              var ee = Math.floor(Math.log(val) * Math.LOG10E) % period;
              if (ee < 0)
                ee += period;
              o = (val / Math.pow(10, ee)).toPrecision(idx + 1 + (period + ee) % period);
              if (o.indexOf("e") === -1) {
                var fakee = Math.floor(Math.log(val) * Math.LOG10E);
                if (o.indexOf(".") === -1)
                  o = o.charAt(0) + "." + o.substr(1) + "E+" + (fakee - o.length + ee);
                else
                  o += "E+" + (fakee - ee);
                while (o.substr(0, 2) === "0.") {
                  o = o.charAt(0) + o.substr(2, period) + "." + o.substr(2 + period);
                  o = o.replace(/^0+([1-9])/, "$1").replace(/^0+\./, "0.");
                }
                o = o.replace(/\+-/, "-");
              }
              o = o.replace(/^([+-]?)(\d*)\.(\d*)[Ee]/, function($$, $1, $2, $3) {
                return $1 + $2 + $3.substr(0, (period + ee) % period) + "." + $3.substr(ee) + "E";
              });
            } else
              o = val.toExponential(idx);
            if (fmt.match(/E\+00$/) && o.match(/e[+-]\d$/))
              o = o.substr(0, o.length - 1) + "0" + o.charAt(o.length - 1);
            if (fmt.match(/E\-/) && o.match(/e\+/))
              o = o.replace(/e\+/, "e");
            return o.replace("e", "E");
          }
          var frac1 = /# (\?+)( ?)\/( ?)(\d+)/;
          function write_num_f1(r, aval, sign) {
            var den = parseInt(r[4], 10), rr = Math.round(aval * den), base = Math.floor(rr / den);
            var myn = rr - base * den, myd = den;
            return sign + (base === 0 ? "" : "" + base) + " " + (myn === 0 ? fill2(" ", r[1].length + 1 + r[4].length) : pad_(myn, r[1].length) + r[2] + "/" + r[3] + pad0(myd, r[4].length));
          }
          function write_num_f2(r, aval, sign) {
            return sign + (aval === 0 ? "" : "" + aval) + fill2(" ", r[1].length + 2 + r[4].length);
          }
          var dec1 = /^#*0*\.([0#]+)/;
          var closeparen = /\).*[0#]/;
          var phone2 = /\(###\) ###\\?-####/;
          function hashq(str) {
            var o = "", cc;
            for (var i2 = 0; i2 != str.length; ++i2)
              switch (cc = str.charCodeAt(i2)) {
                case 35:
                  break;
                case 63:
                  o += " ";
                  break;
                case 48:
                  o += "0";
                  break;
                default:
                  o += String.fromCharCode(cc);
              }
            return o;
          }
          function rnd(val, d) {
            var dd = Math.pow(10, d);
            return "" + Math.round(val * dd) / dd;
          }
          function dec(val, d) {
            var _frac = val - Math.floor(val), dd = Math.pow(10, d);
            if (d < ("" + Math.round(_frac * dd)).length)
              return 0;
            return Math.round(_frac * dd);
          }
          function carry(val, d) {
            if (d < ("" + Math.round((val - Math.floor(val)) * Math.pow(10, d))).length) {
              return 1;
            }
            return 0;
          }
          function flr(val) {
            if (val < 2147483647 && val > -2147483648)
              return "" + (val >= 0 ? val | 0 : val - 1 | 0);
            return "" + Math.floor(val);
          }
          function write_num_flt(type, fmt, val) {
            if (type.charCodeAt(0) === 40 && !fmt.match(closeparen)) {
              var ffmt = fmt.replace(/\( */, "").replace(/ \)/, "").replace(/\)/, "");
              if (val >= 0)
                return write_num_flt("n", ffmt, val);
              return "(" + write_num_flt("n", ffmt, -val) + ")";
            }
            if (fmt.charCodeAt(fmt.length - 1) === 44)
              return write_num_cm(type, fmt, val);
            if (fmt.indexOf("%") !== -1)
              return write_num_pct(type, fmt, val);
            if (fmt.indexOf("E") !== -1)
              return write_num_exp(fmt, val);
            if (fmt.charCodeAt(0) === 36)
              return "$" + write_num_flt(type, fmt.substr(fmt.charAt(1) == " " ? 2 : 1), val);
            var o;
            var r, ri, ff, aval = Math.abs(val), sign = val < 0 ? "-" : "";
            if (fmt.match(/^00+$/))
              return sign + pad0r(aval, fmt.length);
            if (fmt.match(/^[#?]+$/)) {
              o = pad0r(val, 0);
              if (o === "0")
                o = "";
              return o.length > fmt.length ? o : hashq(fmt.substr(0, fmt.length - o.length)) + o;
            }
            if (r = fmt.match(frac1))
              return write_num_f1(r, aval, sign);
            if (fmt.match(/^#+0+$/))
              return sign + pad0r(aval, fmt.length - fmt.indexOf("0"));
            if (r = fmt.match(dec1)) {
              o = rnd(val, r[1].length).replace(/^([^\.]+)$/, "$1." + hashq(r[1])).replace(/\.$/, "." + hashq(r[1])).replace(/\.(\d*)$/, function($$, $1) {
                return "." + $1 + fill2("0", hashq(r[1]).length - $1.length);
              });
              return fmt.indexOf("0.") !== -1 ? o : o.replace(/^0\./, ".");
            }
            fmt = fmt.replace(/^#+([0.])/, "$1");
            if (r = fmt.match(/^(0*)\.(#*)$/)) {
              return sign + rnd(aval, r[2].length).replace(/\.(\d*[1-9])0*$/, ".$1").replace(/^(-?\d*)$/, "$1.").replace(/^0\./, r[1].length ? "0." : ".");
            }
            if (r = fmt.match(/^#{1,3},##0(\.?)$/))
              return sign + commaify(pad0r(aval, 0));
            if (r = fmt.match(/^#,##0\.([#0]*0)$/)) {
              return val < 0 ? "-" + write_num_flt(type, fmt, -val) : commaify("" + (Math.floor(val) + carry(val, r[1].length))) + "." + pad0(dec(val, r[1].length), r[1].length);
            }
            if (r = fmt.match(/^#,#*,#0/))
              return write_num_flt(type, fmt.replace(/^#,#*,/, ""), val);
            if (r = fmt.match(/^([0#]+)(\\?-([0#]+))+$/)) {
              o = _strrev(write_num_flt(type, fmt.replace(/[\\-]/g, ""), val));
              ri = 0;
              return _strrev(_strrev(fmt.replace(/\\/g, "")).replace(/[0#]/g, function(x2) {
                return ri < o.length ? o.charAt(ri++) : x2 === "0" ? "0" : "";
              }));
            }
            if (fmt.match(phone2)) {
              o = write_num_flt(type, "##########", val);
              return "(" + o.substr(0, 3) + ") " + o.substr(3, 3) + "-" + o.substr(6);
            }
            var oa = "";
            if (r = fmt.match(/^([#0?]+)( ?)\/( ?)([#0?]+)/)) {
              ri = Math.min(r[4].length, 7);
              ff = frac(aval, Math.pow(10, ri) - 1, false);
              o = "" + sign;
              oa = write_num("n", r[1], ff[1]);
              if (oa.charAt(oa.length - 1) == " ")
                oa = oa.substr(0, oa.length - 1) + "0";
              o += oa + r[2] + "/" + r[3];
              oa = rpad_(ff[2], ri);
              if (oa.length < r[4].length)
                oa = hashq(r[4].substr(r[4].length - oa.length)) + oa;
              o += oa;
              return o;
            }
            if (r = fmt.match(/^# ([#0?]+)( ?)\/( ?)([#0?]+)/)) {
              ri = Math.min(Math.max(r[1].length, r[4].length), 7);
              ff = frac(aval, Math.pow(10, ri) - 1, true);
              return sign + (ff[0] || (ff[1] ? "" : "0")) + " " + (ff[1] ? pad_(ff[1], ri) + r[2] + "/" + r[3] + rpad_(ff[2], ri) : fill2(" ", 2 * ri + 1 + r[2].length + r[3].length));
            }
            if (r = fmt.match(/^[#0?]+$/)) {
              o = pad0r(val, 0);
              if (fmt.length <= o.length)
                return o;
              return hashq(fmt.substr(0, fmt.length - o.length)) + o;
            }
            if (r = fmt.match(/^([#0?]+)\.([#0]+)$/)) {
              o = "" + val.toFixed(Math.min(r[2].length, 10)).replace(/([^0])0+$/, "$1");
              ri = o.indexOf(".");
              var lres = fmt.indexOf(".") - ri, rres = fmt.length - o.length - lres;
              return hashq(fmt.substr(0, lres) + o + fmt.substr(fmt.length - rres));
            }
            if (r = fmt.match(/^00,000\.([#0]*0)$/)) {
              ri = dec(val, r[1].length);
              return val < 0 ? "-" + write_num_flt(type, fmt, -val) : commaify(flr(val)).replace(/^\d,\d{3}$/, "0$&").replace(/^\d*$/, function($$) {
                return "00," + ($$.length < 3 ? pad0(0, 3 - $$.length) : "") + $$;
              }) + "." + pad0(ri, r[1].length);
            }
            switch (fmt) {
              case "###,##0.00":
                return write_num_flt(type, "#,##0.00", val);
              case "###,###":
              case "##,###":
              case "#,###":
                var x = commaify(pad0r(aval, 0));
                return x !== "0" ? sign + x : "";
              case "###,###.00":
                return write_num_flt(type, "###,##0.00", val).replace(/^0\./, ".");
              case "#,###.00":
                return write_num_flt(type, "#,##0.00", val).replace(/^0\./, ".");
              default:
            }
            throw new Error("unsupported format |" + fmt + "|");
          }
          function write_num_cm2(type, fmt, val) {
            var idx = fmt.length - 1;
            while (fmt.charCodeAt(idx - 1) === 44)
              --idx;
            return write_num(type, fmt.substr(0, idx), val / Math.pow(10, 3 * (fmt.length - idx)));
          }
          function write_num_pct2(type, fmt, val) {
            var sfmt = fmt.replace(pct1, ""), mul = fmt.length - sfmt.length;
            return write_num(type, sfmt, val * Math.pow(10, 2 * mul)) + fill2("%", mul);
          }
          function write_num_exp2(fmt, val) {
            var o;
            var idx = fmt.indexOf("E") - fmt.indexOf(".") - 1;
            if (fmt.match(/^#+0.0E\+0$/)) {
              if (val == 0)
                return "0.0E+0";
              else if (val < 0)
                return "-" + write_num_exp2(fmt, -val);
              var period = fmt.indexOf(".");
              if (period === -1)
                period = fmt.indexOf("E");
              var ee = Math.floor(Math.log(val) * Math.LOG10E) % period;
              if (ee < 0)
                ee += period;
              o = (val / Math.pow(10, ee)).toPrecision(idx + 1 + (period + ee) % period);
              if (!o.match(/[Ee]/)) {
                var fakee = Math.floor(Math.log(val) * Math.LOG10E);
                if (o.indexOf(".") === -1)
                  o = o.charAt(0) + "." + o.substr(1) + "E+" + (fakee - o.length + ee);
                else
                  o += "E+" + (fakee - ee);
                o = o.replace(/\+-/, "-");
              }
              o = o.replace(/^([+-]?)(\d*)\.(\d*)[Ee]/, function($$, $1, $2, $3) {
                return $1 + $2 + $3.substr(0, (period + ee) % period) + "." + $3.substr(ee) + "E";
              });
            } else
              o = val.toExponential(idx);
            if (fmt.match(/E\+00$/) && o.match(/e[+-]\d$/))
              o = o.substr(0, o.length - 1) + "0" + o.charAt(o.length - 1);
            if (fmt.match(/E\-/) && o.match(/e\+/))
              o = o.replace(/e\+/, "e");
            return o.replace("e", "E");
          }
          function write_num_int(type, fmt, val) {
            if (type.charCodeAt(0) === 40 && !fmt.match(closeparen)) {
              var ffmt = fmt.replace(/\( */, "").replace(/ \)/, "").replace(/\)/, "");
              if (val >= 0)
                return write_num_int("n", ffmt, val);
              return "(" + write_num_int("n", ffmt, -val) + ")";
            }
            if (fmt.charCodeAt(fmt.length - 1) === 44)
              return write_num_cm2(type, fmt, val);
            if (fmt.indexOf("%") !== -1)
              return write_num_pct2(type, fmt, val);
            if (fmt.indexOf("E") !== -1)
              return write_num_exp2(fmt, val);
            if (fmt.charCodeAt(0) === 36)
              return "$" + write_num_int(type, fmt.substr(fmt.charAt(1) == " " ? 2 : 1), val);
            var o;
            var r, ri, ff, aval = Math.abs(val), sign = val < 0 ? "-" : "";
            if (fmt.match(/^00+$/))
              return sign + pad0(aval, fmt.length);
            if (fmt.match(/^[#?]+$/)) {
              o = "" + val;
              if (val === 0)
                o = "";
              return o.length > fmt.length ? o : hashq(fmt.substr(0, fmt.length - o.length)) + o;
            }
            if (r = fmt.match(frac1))
              return write_num_f2(r, aval, sign);
            if (fmt.match(/^#+0+$/))
              return sign + pad0(aval, fmt.length - fmt.indexOf("0"));
            if (r = fmt.match(dec1)) {
              o = ("" + val).replace(/^([^\.]+)$/, "$1." + hashq(r[1])).replace(/\.$/, "." + hashq(r[1]));
              o = o.replace(/\.(\d*)$/, function($$, $1) {
                return "." + $1 + fill2("0", hashq(r[1]).length - $1.length);
              });
              return fmt.indexOf("0.") !== -1 ? o : o.replace(/^0\./, ".");
            }
            fmt = fmt.replace(/^#+([0.])/, "$1");
            if (r = fmt.match(/^(0*)\.(#*)$/)) {
              return sign + ("" + aval).replace(/\.(\d*[1-9])0*$/, ".$1").replace(/^(-?\d*)$/, "$1.").replace(/^0\./, r[1].length ? "0." : ".");
            }
            if (r = fmt.match(/^#{1,3},##0(\.?)$/))
              return sign + commaify("" + aval);
            if (r = fmt.match(/^#,##0\.([#0]*0)$/)) {
              return val < 0 ? "-" + write_num_int(type, fmt, -val) : commaify("" + val) + "." + fill2("0", r[1].length);
            }
            if (r = fmt.match(/^#,#*,#0/))
              return write_num_int(type, fmt.replace(/^#,#*,/, ""), val);
            if (r = fmt.match(/^([0#]+)(\\?-([0#]+))+$/)) {
              o = _strrev(write_num_int(type, fmt.replace(/[\\-]/g, ""), val));
              ri = 0;
              return _strrev(_strrev(fmt.replace(/\\/g, "")).replace(/[0#]/g, function(x2) {
                return ri < o.length ? o.charAt(ri++) : x2 === "0" ? "0" : "";
              }));
            }
            if (fmt.match(phone2)) {
              o = write_num_int(type, "##########", val);
              return "(" + o.substr(0, 3) + ") " + o.substr(3, 3) + "-" + o.substr(6);
            }
            var oa = "";
            if (r = fmt.match(/^([#0?]+)( ?)\/( ?)([#0?]+)/)) {
              ri = Math.min(r[4].length, 7);
              ff = frac(aval, Math.pow(10, ri) - 1, false);
              o = "" + sign;
              oa = write_num("n", r[1], ff[1]);
              if (oa.charAt(oa.length - 1) == " ")
                oa = oa.substr(0, oa.length - 1) + "0";
              o += oa + r[2] + "/" + r[3];
              oa = rpad_(ff[2], ri);
              if (oa.length < r[4].length)
                oa = hashq(r[4].substr(r[4].length - oa.length)) + oa;
              o += oa;
              return o;
            }
            if (r = fmt.match(/^# ([#0?]+)( ?)\/( ?)([#0?]+)/)) {
              ri = Math.min(Math.max(r[1].length, r[4].length), 7);
              ff = frac(aval, Math.pow(10, ri) - 1, true);
              return sign + (ff[0] || (ff[1] ? "" : "0")) + " " + (ff[1] ? pad_(ff[1], ri) + r[2] + "/" + r[3] + rpad_(ff[2], ri) : fill2(" ", 2 * ri + 1 + r[2].length + r[3].length));
            }
            if (r = fmt.match(/^[#0?]+$/)) {
              o = "" + val;
              if (fmt.length <= o.length)
                return o;
              return hashq(fmt.substr(0, fmt.length - o.length)) + o;
            }
            if (r = fmt.match(/^([#0]+)\.([#0]+)$/)) {
              o = "" + val.toFixed(Math.min(r[2].length, 10)).replace(/([^0])0+$/, "$1");
              ri = o.indexOf(".");
              var lres = fmt.indexOf(".") - ri, rres = fmt.length - o.length - lres;
              return hashq(fmt.substr(0, lres) + o + fmt.substr(fmt.length - rres));
            }
            if (r = fmt.match(/^00,000\.([#0]*0)$/)) {
              return val < 0 ? "-" + write_num_int(type, fmt, -val) : commaify("" + val).replace(/^\d,\d{3}$/, "0$&").replace(/^\d*$/, function($$) {
                return "00," + ($$.length < 3 ? pad0(0, 3 - $$.length) : "") + $$;
              }) + "." + pad0(0, r[1].length);
            }
            switch (fmt) {
              case "###,###":
              case "##,###":
              case "#,###":
                var x = commaify("" + aval);
                return x !== "0" ? sign + x : "";
              default:
                if (fmt.match(/\.[0#?]*$/))
                  return write_num_int(type, fmt.slice(0, fmt.lastIndexOf(".")), val) + hashq(fmt.slice(fmt.lastIndexOf(".")));
            }
            throw new Error("unsupported format |" + fmt + "|");
          }
          return function write_num2(type, fmt, val) {
            return (val | 0) === val ? write_num_int(type, fmt, val) : write_num_flt(type, fmt, val);
          };
        }();
        function split_fmt(fmt) {
          var out = [];
          var in_str = false;
          for (var i2 = 0, j = 0; i2 < fmt.length; ++i2)
            switch (fmt.charCodeAt(i2)) {
              case 34:
                in_str = !in_str;
                break;
              case 95:
              case 42:
              case 92:
                ++i2;
                break;
              case 59:
                out[out.length] = fmt.substr(j, i2 - j);
                j = i2 + 1;
            }
          out[out.length] = fmt.substr(j);
          if (in_str === true)
            throw new Error("Format |" + fmt + "| unterminated string ");
          return out;
        }
        SSF2._split = split_fmt;
        var abstime = /\[[HhMmSs\u0E0A\u0E19\u0E17]*\]/;
        function fmt_is_date(fmt) {
          var i2 = 0, c = "", o = "";
          while (i2 < fmt.length) {
            switch (c = fmt.charAt(i2)) {
              case "G":
                if (isgeneral(fmt, i2))
                  i2 += 6;
                i2++;
                break;
              case '"':
                for (; fmt.charCodeAt(++i2) !== 34 && i2 < fmt.length; ) {
                }
                ++i2;
                break;
              case "\\":
                i2 += 2;
                break;
              case "_":
                i2 += 2;
                break;
              case "@":
                ++i2;
                break;
              case "B":
              case "b":
                if (fmt.charAt(i2 + 1) === "1" || fmt.charAt(i2 + 1) === "2")
                  return true;
              case "M":
              case "D":
              case "Y":
              case "H":
              case "S":
              case "E":
              case "m":
              case "d":
              case "y":
              case "h":
              case "s":
              case "e":
              case "g":
                return true;
              case "A":
              case "a":
              case "\u4E0A":
                if (fmt.substr(i2, 3).toUpperCase() === "A/P")
                  return true;
                if (fmt.substr(i2, 5).toUpperCase() === "AM/PM")
                  return true;
                if (fmt.substr(i2, 5).toUpperCase() === "\u4E0A\u5348/\u4E0B\u5348")
                  return true;
                ++i2;
                break;
              case "[":
                o = c;
                while (fmt.charAt(i2++) !== "]" && i2 < fmt.length)
                  o += fmt.charAt(i2);
                if (o.match(abstime))
                  return true;
                break;
              case ".":
              case "0":
              case "#":
                while (i2 < fmt.length && ("0#?.,E+-%".indexOf(c = fmt.charAt(++i2)) > -1 || c == "\\" && fmt.charAt(i2 + 1) == "-" && "0#".indexOf(fmt.charAt(i2 + 2)) > -1)) {
                }
                break;
              case "?":
                while (fmt.charAt(++i2) === c) {
                }
                break;
              case "*":
                ++i2;
                if (fmt.charAt(i2) == " " || fmt.charAt(i2) == "*")
                  ++i2;
                break;
              case "(":
              case ")":
                ++i2;
                break;
              case "1":
              case "2":
              case "3":
              case "4":
              case "5":
              case "6":
              case "7":
              case "8":
              case "9":
                while (i2 < fmt.length && "0123456789".indexOf(fmt.charAt(++i2)) > -1) {
                }
                break;
              case " ":
                ++i2;
                break;
              default:
                ++i2;
                break;
            }
          }
          return false;
        }
        SSF2.is_date = fmt_is_date;
        function eval_fmt(fmt, v, opts, flen) {
          var out = [], o = "", i2 = 0, c = "", lst = "t", dt, j, cc;
          var hr = "H";
          while (i2 < fmt.length) {
            switch (c = fmt.charAt(i2)) {
              case "G":
                if (!isgeneral(fmt, i2))
                  throw new Error("unrecognized character " + c + " in " + fmt);
                out[out.length] = { t: "G", v: "General" };
                i2 += 7;
                break;
              case '"':
                for (o = ""; (cc = fmt.charCodeAt(++i2)) !== 34 && i2 < fmt.length; )
                  o += String.fromCharCode(cc);
                out[out.length] = { t: "t", v: o };
                ++i2;
                break;
              case "\\":
                var w = fmt.charAt(++i2), t = w === "(" || w === ")" ? w : "t";
                out[out.length] = { t, v: w };
                ++i2;
                break;
              case "_":
                out[out.length] = { t: "t", v: " " };
                i2 += 2;
                break;
              case "@":
                out[out.length] = { t: "T", v };
                ++i2;
                break;
              case "B":
              case "b":
                if (fmt.charAt(i2 + 1) === "1" || fmt.charAt(i2 + 1) === "2") {
                  if (dt == null) {
                    dt = parse_date_code(v, opts, fmt.charAt(i2 + 1) === "2");
                    if (dt == null)
                      return "";
                  }
                  out[out.length] = { t: "X", v: fmt.substr(i2, 2) };
                  lst = c;
                  i2 += 2;
                  break;
                }
              case "M":
              case "D":
              case "Y":
              case "H":
              case "S":
              case "E":
                c = c.toLowerCase();
              case "m":
              case "d":
              case "y":
              case "h":
              case "s":
              case "e":
              case "g":
                if (v < 0)
                  return "";
                if (dt == null) {
                  dt = parse_date_code(v, opts);
                  if (dt == null)
                    return "";
                }
                o = c;
                while (++i2 < fmt.length && fmt.charAt(i2).toLowerCase() === c)
                  o += c;
                if (c === "m" && lst.toLowerCase() === "h")
                  c = "M";
                if (c === "h")
                  c = hr;
                out[out.length] = { t: c, v: o };
                lst = c;
                break;
              case "A":
              case "a":
              case "\u4E0A":
                var q = { t: c, v: c };
                if (dt == null)
                  dt = parse_date_code(v, opts);
                if (fmt.substr(i2, 3).toUpperCase() === "A/P") {
                  if (dt != null)
                    q.v = dt.H >= 12 ? "P" : "A";
                  q.t = "T";
                  hr = "h";
                  i2 += 3;
                } else if (fmt.substr(i2, 5).toUpperCase() === "AM/PM") {
                  if (dt != null)
                    q.v = dt.H >= 12 ? "PM" : "AM";
                  q.t = "T";
                  i2 += 5;
                  hr = "h";
                } else if (fmt.substr(i2, 5).toUpperCase() === "\u4E0A\u5348/\u4E0B\u5348") {
                  if (dt != null)
                    q.v = dt.H >= 12 ? "\u4E0B\u5348" : "\u4E0A\u5348";
                  q.t = "T";
                  i2 += 5;
                  hr = "h";
                } else {
                  q.t = "t";
                  ++i2;
                }
                if (dt == null && q.t === "T")
                  return "";
                out[out.length] = q;
                lst = c;
                break;
              case "[":
                o = c;
                while (fmt.charAt(i2++) !== "]" && i2 < fmt.length)
                  o += fmt.charAt(i2);
                if (o.slice(-1) !== "]")
                  throw 'unterminated "[" block: |' + o + "|";
                if (o.match(abstime)) {
                  if (dt == null) {
                    dt = parse_date_code(v, opts);
                    if (dt == null)
                      return "";
                  }
                  out[out.length] = { t: "Z", v: o.toLowerCase() };
                  lst = o.charAt(1);
                } else if (o.indexOf("$") > -1) {
                  o = (o.match(/\$([^-\[\]]*)/) || [])[1] || "$";
                  if (!fmt_is_date(fmt))
                    out[out.length] = { t: "t", v: o };
                }
                break;
              case ".":
                if (dt != null) {
                  o = c;
                  while (++i2 < fmt.length && (c = fmt.charAt(i2)) === "0")
                    o += c;
                  out[out.length] = { t: "s", v: o };
                  break;
                }
              case "0":
              case "#":
                o = c;
                while (++i2 < fmt.length && "0#?.,E+-%".indexOf(c = fmt.charAt(i2)) > -1)
                  o += c;
                out[out.length] = { t: "n", v: o };
                break;
              case "?":
                o = c;
                while (fmt.charAt(++i2) === c)
                  o += c;
                out[out.length] = { t: c, v: o };
                lst = c;
                break;
              case "*":
                ++i2;
                if (fmt.charAt(i2) == " " || fmt.charAt(i2) == "*")
                  ++i2;
                break;
              case "(":
              case ")":
                out[out.length] = { t: flen === 1 ? "t" : c, v: c };
                ++i2;
                break;
              case "1":
              case "2":
              case "3":
              case "4":
              case "5":
              case "6":
              case "7":
              case "8":
              case "9":
                o = c;
                while (i2 < fmt.length && "0123456789".indexOf(fmt.charAt(++i2)) > -1)
                  o += fmt.charAt(i2);
                out[out.length] = { t: "D", v: o };
                break;
              case " ":
                out[out.length] = { t: c, v: c };
                ++i2;
                break;
              case "$":
                out[out.length] = { t: "t", v: "$" };
                ++i2;
                break;
              default:
                if (",$-+/():!^&'~{}<>=\u20ACacfijklopqrtuvwxzP".indexOf(c) === -1)
                  throw new Error("unrecognized character " + c + " in " + fmt);
                out[out.length] = { t: "t", v: c };
                ++i2;
                break;
            }
          }
          var bt = 0, ss0 = 0, ssm;
          for (i2 = out.length - 1, lst = "t"; i2 >= 0; --i2) {
            switch (out[i2].t) {
              case "h":
              case "H":
                out[i2].t = hr;
                lst = "h";
                if (bt < 1)
                  bt = 1;
                break;
              case "s":
                if (ssm = out[i2].v.match(/\.0+$/))
                  ss0 = Math.max(ss0, ssm[0].length - 1);
                if (bt < 3)
                  bt = 3;
              case "d":
              case "y":
              case "M":
              case "e":
                lst = out[i2].t;
                break;
              case "m":
                if (lst === "s") {
                  out[i2].t = "M";
                  if (bt < 2)
                    bt = 2;
                }
                break;
              case "X":
                break;
              case "Z":
                if (bt < 1 && out[i2].v.match(/[Hh]/))
                  bt = 1;
                if (bt < 2 && out[i2].v.match(/[Mm]/))
                  bt = 2;
                if (bt < 3 && out[i2].v.match(/[Ss]/))
                  bt = 3;
            }
          }
          switch (bt) {
            case 0:
              break;
            case 1:
              if (dt.u >= 0.5) {
                dt.u = 0;
                ++dt.S;
              }
              if (dt.S >= 60) {
                dt.S = 0;
                ++dt.M;
              }
              if (dt.M >= 60) {
                dt.M = 0;
                ++dt.H;
              }
              break;
            case 2:
              if (dt.u >= 0.5) {
                dt.u = 0;
                ++dt.S;
              }
              if (dt.S >= 60) {
                dt.S = 0;
                ++dt.M;
              }
              break;
          }
          var nstr = "", jj;
          for (i2 = 0; i2 < out.length; ++i2) {
            switch (out[i2].t) {
              case "t":
              case "T":
              case " ":
              case "D":
                break;
              case "X":
                out[i2].v = "";
                out[i2].t = ";";
                break;
              case "d":
              case "m":
              case "y":
              case "h":
              case "H":
              case "M":
              case "s":
              case "e":
              case "b":
              case "Z":
                out[i2].v = write_date(out[i2].t.charCodeAt(0), out[i2].v, dt, ss0);
                out[i2].t = "t";
                break;
              case "n":
              case "?":
                jj = i2 + 1;
                while (out[jj] != null && ((c = out[jj].t) === "?" || c === "D" || (c === " " || c === "t") && out[jj + 1] != null && (out[jj + 1].t === "?" || out[jj + 1].t === "t" && out[jj + 1].v === "/") || out[i2].t === "(" && (c === " " || c === "n" || c === ")") || c === "t" && (out[jj].v === "/" || out[jj].v === " " && out[jj + 1] != null && out[jj + 1].t == "?"))) {
                  out[i2].v += out[jj].v;
                  out[jj] = { v: "", t: ";" };
                  ++jj;
                }
                nstr += out[i2].v;
                i2 = jj - 1;
                break;
              case "G":
                out[i2].t = "t";
                out[i2].v = general_fmt(v, opts);
                break;
            }
          }
          var vv = "", myv, ostr;
          if (nstr.length > 0) {
            if (nstr.charCodeAt(0) == 40) {
              myv = v < 0 && nstr.charCodeAt(0) === 45 ? -v : v;
              ostr = write_num("n", nstr, myv);
            } else {
              myv = v < 0 && flen > 1 ? -v : v;
              ostr = write_num("n", nstr, myv);
              if (myv < 0 && out[0] && out[0].t == "t") {
                ostr = ostr.substr(1);
                out[0].v = "-" + out[0].v;
              }
            }
            jj = ostr.length - 1;
            var decpt = out.length;
            for (i2 = 0; i2 < out.length; ++i2)
              if (out[i2] != null && out[i2].t != "t" && out[i2].v.indexOf(".") > -1) {
                decpt = i2;
                break;
              }
            var lasti = out.length;
            if (decpt === out.length && ostr.indexOf("E") === -1) {
              for (i2 = out.length - 1; i2 >= 0; --i2) {
                if (out[i2] == null || "n?".indexOf(out[i2].t) === -1)
                  continue;
                if (jj >= out[i2].v.length - 1) {
                  jj -= out[i2].v.length;
                  out[i2].v = ostr.substr(jj + 1, out[i2].v.length);
                } else if (jj < 0)
                  out[i2].v = "";
                else {
                  out[i2].v = ostr.substr(0, jj + 1);
                  jj = -1;
                }
                out[i2].t = "t";
                lasti = i2;
              }
              if (jj >= 0 && lasti < out.length)
                out[lasti].v = ostr.substr(0, jj + 1) + out[lasti].v;
            } else if (decpt !== out.length && ostr.indexOf("E") === -1) {
              jj = ostr.indexOf(".") - 1;
              for (i2 = decpt; i2 >= 0; --i2) {
                if (out[i2] == null || "n?".indexOf(out[i2].t) === -1)
                  continue;
                j = out[i2].v.indexOf(".") > -1 && i2 === decpt ? out[i2].v.indexOf(".") - 1 : out[i2].v.length - 1;
                vv = out[i2].v.substr(j + 1);
                for (; j >= 0; --j) {
                  if (jj >= 0 && (out[i2].v.charAt(j) === "0" || out[i2].v.charAt(j) === "#"))
                    vv = ostr.charAt(jj--) + vv;
                }
                out[i2].v = vv;
                out[i2].t = "t";
                lasti = i2;
              }
              if (jj >= 0 && lasti < out.length)
                out[lasti].v = ostr.substr(0, jj + 1) + out[lasti].v;
              jj = ostr.indexOf(".") + 1;
              for (i2 = decpt; i2 < out.length; ++i2) {
                if (out[i2] == null || "n?(".indexOf(out[i2].t) === -1 && i2 !== decpt)
                  continue;
                j = out[i2].v.indexOf(".") > -1 && i2 === decpt ? out[i2].v.indexOf(".") + 1 : 0;
                vv = out[i2].v.substr(0, j);
                for (; j < out[i2].v.length; ++j) {
                  if (jj < ostr.length)
                    vv += ostr.charAt(jj++);
                }
                out[i2].v = vv;
                out[i2].t = "t";
                lasti = i2;
              }
            }
          }
          for (i2 = 0; i2 < out.length; ++i2)
            if (out[i2] != null && "n?".indexOf(out[i2].t) > -1) {
              myv = flen > 1 && v < 0 && i2 > 0 && out[i2 - 1].v === "-" ? -v : v;
              out[i2].v = write_num(out[i2].t, out[i2].v, myv);
              out[i2].t = "t";
            }
          var retval = "";
          for (i2 = 0; i2 !== out.length; ++i2)
            if (out[i2] != null)
              retval += out[i2].v;
          return retval;
        }
        SSF2._eval = eval_fmt;
        var cfregex = /\[[=<>]/;
        var cfregex2 = /\[(=|>[=]?|<[>=]?)(-?\d+(?:\.\d*)?)\]/;
        function chkcond(v, rr) {
          if (rr == null)
            return false;
          var thresh = parseFloat(rr[2]);
          switch (rr[1]) {
            case "=":
              if (v == thresh)
                return true;
              break;
            case ">":
              if (v > thresh)
                return true;
              break;
            case "<":
              if (v < thresh)
                return true;
              break;
            case "<>":
              if (v != thresh)
                return true;
              break;
            case ">=":
              if (v >= thresh)
                return true;
              break;
            case "<=":
              if (v <= thresh)
                return true;
              break;
          }
          return false;
        }
        function choose_fmt(f, v) {
          var fmt = split_fmt(f);
          var l = fmt.length, lat = fmt[l - 1].indexOf("@");
          if (l < 4 && lat > -1)
            --l;
          if (fmt.length > 4)
            throw new Error("cannot find right format for |" + fmt.join("|") + "|");
          if (typeof v !== "number")
            return [4, fmt.length === 4 || lat > -1 ? fmt[fmt.length - 1] : "@"];
          switch (fmt.length) {
            case 1:
              fmt = lat > -1 ? ["General", "General", "General", fmt[0]] : [fmt[0], fmt[0], fmt[0], "@"];
              break;
            case 2:
              fmt = lat > -1 ? [fmt[0], fmt[0], fmt[0], fmt[1]] : [fmt[0], fmt[1], fmt[0], "@"];
              break;
            case 3:
              fmt = lat > -1 ? [fmt[0], fmt[1], fmt[0], fmt[2]] : [fmt[0], fmt[1], fmt[2], "@"];
              break;
            case 4:
              break;
          }
          var ff = v > 0 ? fmt[0] : v < 0 ? fmt[1] : fmt[2];
          if (fmt[0].indexOf("[") === -1 && fmt[1].indexOf("[") === -1)
            return [l, ff];
          if (fmt[0].match(cfregex) != null || fmt[1].match(cfregex) != null) {
            var m1 = fmt[0].match(cfregex2);
            var m2 = fmt[1].match(cfregex2);
            return chkcond(v, m1) ? [l, fmt[0]] : chkcond(v, m2) ? [l, fmt[1]] : [l, fmt[m1 != null && m2 != null ? 2 : 1]];
          }
          return [l, ff];
        }
        function format(fmt, v, o) {
          if (o == null)
            o = {};
          var sfmt = "";
          switch (typeof fmt) {
            case "string":
              if (fmt == "m/d/yy" && o.dateNF)
                sfmt = o.dateNF;
              else
                sfmt = fmt;
              break;
            case "number":
              if (fmt == 14 && o.dateNF)
                sfmt = o.dateNF;
              else
                sfmt = (o.table != null ? o.table : table_fmt)[fmt];
              if (sfmt == null)
                sfmt = o.table && o.table[default_map[fmt]] || table_fmt[default_map[fmt]];
              if (sfmt == null)
                sfmt = default_str[fmt] || "General";
              break;
          }
          if (isgeneral(sfmt, 0))
            return general_fmt(v, o);
          if (v instanceof Date)
            v = datenum_local(v, o.date1904);
          var f = choose_fmt(sfmt, v);
          if (isgeneral(f[1]))
            return general_fmt(v, o);
          if (v === true)
            v = "TRUE";
          else if (v === false)
            v = "FALSE";
          else if (v === "" || v == null)
            return "";
          return eval_fmt(f[1], v, o, f[0]);
        }
        function load_entry(fmt, idx) {
          if (typeof idx != "number") {
            idx = +idx || -1;
            for (var i2 = 0; i2 < 392; ++i2) {
              if (table_fmt[i2] == void 0) {
                if (idx < 0)
                  idx = i2;
                continue;
              }
              if (table_fmt[i2] == fmt) {
                idx = i2;
                break;
              }
            }
            if (idx < 0)
              idx = 391;
          }
          table_fmt[idx] = fmt;
          return idx;
        }
        SSF2.load = load_entry;
        SSF2._table = table_fmt;
        SSF2.get_table = function get_table() {
          return table_fmt;
        };
        SSF2.load_table = function load_table(tbl) {
          for (var i2 = 0; i2 != 392; ++i2)
            if (tbl[i2] !== void 0)
              load_entry(tbl[i2], i2);
        };
        SSF2.init_table = init_table;
        SSF2.format = format;
      };
      make_ssf(SSF);
      var XLMLFormatMap = {
        "General Number": "General",
        "General Date": SSF._table[22],
        "Long Date": "dddd, mmmm dd, yyyy",
        "Medium Date": SSF._table[15],
        "Short Date": SSF._table[14],
        "Long Time": SSF._table[19],
        "Medium Time": SSF._table[18],
        "Short Time": SSF._table[20],
        "Currency": '"$"#,##0.00_);[Red]\\("$"#,##0.00\\)',
        "Fixed": SSF._table[2],
        "Standard": SSF._table[4],
        "Percent": SSF._table[10],
        "Scientific": SSF._table[11],
        "Yes/No": '"Yes";"Yes";"No";@',
        "True/False": '"True";"True";"False";@',
        "On/Off": '"Yes";"Yes";"No";@'
      };
      var SSFImplicit = {
        "5": '"$"#,##0_);\\("$"#,##0\\)',
        "6": '"$"#,##0_);[Red]\\("$"#,##0\\)',
        "7": '"$"#,##0.00_);\\("$"#,##0.00\\)',
        "8": '"$"#,##0.00_);[Red]\\("$"#,##0.00\\)',
        "23": "General",
        "24": "General",
        "25": "General",
        "26": "General",
        "27": "m/d/yy",
        "28": "m/d/yy",
        "29": "m/d/yy",
        "30": "m/d/yy",
        "31": "m/d/yy",
        "32": "h:mm:ss",
        "33": "h:mm:ss",
        "34": "h:mm:ss",
        "35": "h:mm:ss",
        "36": "m/d/yy",
        "41": '_(* #,##0_);_(* (#,##0);_(* "-"_);_(@_)',
        "42": '_("$"* #,##0_);_("$"* (#,##0);_("$"* "-"_);_(@_)',
        "43": '_(* #,##0.00_);_(* (#,##0.00);_(* "-"??_);_(@_)',
        "44": '_("$"* #,##0.00_);_("$"* (#,##0.00);_("$"* "-"??_);_(@_)',
        "50": "m/d/yy",
        "51": "m/d/yy",
        "52": "m/d/yy",
        "53": "m/d/yy",
        "54": "m/d/yy",
        "55": "m/d/yy",
        "56": "m/d/yy",
        "57": "m/d/yy",
        "58": "m/d/yy",
        "59": "0",
        "60": "0.00",
        "61": "#,##0",
        "62": "#,##0.00",
        "63": '"$"#,##0_);\\("$"#,##0\\)',
        "64": '"$"#,##0_);[Red]\\("$"#,##0\\)',
        "65": '"$"#,##0.00_);\\("$"#,##0.00\\)',
        "66": '"$"#,##0.00_);[Red]\\("$"#,##0.00\\)',
        "67": "0%",
        "68": "0.00%",
        "69": "# ?/?",
        "70": "# ??/??",
        "71": "m/d/yy",
        "72": "m/d/yy",
        "73": "d-mmm-yy",
        "74": "d-mmm",
        "75": "mmm-yy",
        "76": "h:mm",
        "77": "h:mm:ss",
        "78": "m/d/yy h:mm",
        "79": "mm:ss",
        "80": "[h]:mm:ss",
        "81": "mmss.0"
      };
      var dateNFregex = /[dD]+|[mM]+|[yYeE]+|[Hh]+|[Ss]+/g;
      function dateNF_regex(dateNF) {
        var fmt = typeof dateNF == "number" ? SSF._table[dateNF] : dateNF;
        fmt = fmt.replace(dateNFregex, "(\\d+)");
        return new RegExp("^" + fmt + "$");
      }
      function dateNF_fix(str, dateNF, match) {
        var Y = -1, m = -1, d = -1, H = -1, M = -1, S = -1;
        (dateNF.match(dateNFregex) || []).forEach(function(n, i2) {
          var v = parseInt(match[i2 + 1], 10);
          switch (n.toLowerCase().charAt(0)) {
            case "y":
              Y = v;
              break;
            case "d":
              d = v;
              break;
            case "h":
              H = v;
              break;
            case "s":
              S = v;
              break;
            case "m":
              if (H >= 0)
                M = v;
              else
                m = v;
              break;
          }
        });
        if (S >= 0 && M == -1 && m >= 0) {
          M = m;
          m = -1;
        }
        var datestr = ("" + (Y >= 0 ? Y : new Date().getFullYear())).slice(-4) + "-" + ("00" + (m >= 1 ? m : 1)).slice(-2) + "-" + ("00" + (d >= 1 ? d : 1)).slice(-2);
        if (datestr.length == 7)
          datestr = "0" + datestr;
        if (datestr.length == 8)
          datestr = "20" + datestr;
        var timestr = ("00" + (H >= 0 ? H : 0)).slice(-2) + ":" + ("00" + (M >= 0 ? M : 0)).slice(-2) + ":" + ("00" + (S >= 0 ? S : 0)).slice(-2);
        if (H == -1 && M == -1 && S == -1)
          return datestr;
        if (Y == -1 && m == -1 && d == -1)
          return timestr;
        return datestr + "T" + timestr;
      }
      var DO_NOT_EXPORT_CFB = true;
      var CRC32;
      (function(factory) {
        factory(CRC32 = {});
      })(function(CRC322) {
        CRC322.version = "1.2.0";
        function signed_crc_table() {
          var c = 0, table = new Array(256);
          for (var n = 0; n != 256; ++n) {
            c = n;
            c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
            c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
            c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
            c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
            c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
            c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
            c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
            c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
            table[n] = c;
          }
          return typeof Int32Array !== "undefined" ? new Int32Array(table) : table;
        }
        var T = signed_crc_table();
        function crc32_bstr(bstr, seed) {
          var C = seed ^ -1, L = bstr.length - 1;
          for (var i2 = 0; i2 < L; ) {
            C = C >>> 8 ^ T[(C ^ bstr.charCodeAt(i2++)) & 255];
            C = C >>> 8 ^ T[(C ^ bstr.charCodeAt(i2++)) & 255];
          }
          if (i2 === L)
            C = C >>> 8 ^ T[(C ^ bstr.charCodeAt(i2)) & 255];
          return C ^ -1;
        }
        function crc32_buf(buf, seed) {
          if (buf.length > 1e4)
            return crc32_buf_8(buf, seed);
          var C = seed ^ -1, L = buf.length - 3;
          for (var i2 = 0; i2 < L; ) {
            C = C >>> 8 ^ T[(C ^ buf[i2++]) & 255];
            C = C >>> 8 ^ T[(C ^ buf[i2++]) & 255];
            C = C >>> 8 ^ T[(C ^ buf[i2++]) & 255];
            C = C >>> 8 ^ T[(C ^ buf[i2++]) & 255];
          }
          while (i2 < L + 3)
            C = C >>> 8 ^ T[(C ^ buf[i2++]) & 255];
          return C ^ -1;
        }
        function crc32_buf_8(buf, seed) {
          var C = seed ^ -1, L = buf.length - 7;
          for (var i2 = 0; i2 < L; ) {
            C = C >>> 8 ^ T[(C ^ buf[i2++]) & 255];
            C = C >>> 8 ^ T[(C ^ buf[i2++]) & 255];
            C = C >>> 8 ^ T[(C ^ buf[i2++]) & 255];
            C = C >>> 8 ^ T[(C ^ buf[i2++]) & 255];
            C = C >>> 8 ^ T[(C ^ buf[i2++]) & 255];
            C = C >>> 8 ^ T[(C ^ buf[i2++]) & 255];
            C = C >>> 8 ^ T[(C ^ buf[i2++]) & 255];
            C = C >>> 8 ^ T[(C ^ buf[i2++]) & 255];
          }
          while (i2 < L + 7)
            C = C >>> 8 ^ T[(C ^ buf[i2++]) & 255];
          return C ^ -1;
        }
        function crc32_str(str, seed) {
          var C = seed ^ -1;
          for (var i2 = 0, L = str.length, c, d; i2 < L; ) {
            c = str.charCodeAt(i2++);
            if (c < 128) {
              C = C >>> 8 ^ T[(C ^ c) & 255];
            } else if (c < 2048) {
              C = C >>> 8 ^ T[(C ^ (192 | c >> 6 & 31)) & 255];
              C = C >>> 8 ^ T[(C ^ (128 | c & 63)) & 255];
            } else if (c >= 55296 && c < 57344) {
              c = (c & 1023) + 64;
              d = str.charCodeAt(i2++) & 1023;
              C = C >>> 8 ^ T[(C ^ (240 | c >> 8 & 7)) & 255];
              C = C >>> 8 ^ T[(C ^ (128 | c >> 2 & 63)) & 255];
              C = C >>> 8 ^ T[(C ^ (128 | d >> 6 & 15 | (c & 3) << 4)) & 255];
              C = C >>> 8 ^ T[(C ^ (128 | d & 63)) & 255];
            } else {
              C = C >>> 8 ^ T[(C ^ (224 | c >> 12 & 15)) & 255];
              C = C >>> 8 ^ T[(C ^ (128 | c >> 6 & 63)) & 255];
              C = C >>> 8 ^ T[(C ^ (128 | c & 63)) & 255];
            }
          }
          return C ^ -1;
        }
        CRC322.table = T;
        CRC322.bstr = crc32_bstr;
        CRC322.buf = crc32_buf;
        CRC322.str = crc32_str;
      });
      var CFB = function _CFB() {
        var exports2 = {};
        exports2.version = "1.1.4";
        function namecmp(l, r) {
          var L = l.split("/"), R = r.split("/");
          for (var i3 = 0, c = 0, Z = Math.min(L.length, R.length); i3 < Z; ++i3) {
            if (c = L[i3].length - R[i3].length)
              return c;
            if (L[i3] != R[i3])
              return L[i3] < R[i3] ? -1 : 1;
          }
          return L.length - R.length;
        }
        function dirname(p) {
          if (p.charAt(p.length - 1) == "/")
            return p.slice(0, -1).indexOf("/") === -1 ? p : dirname(p.slice(0, -1));
          var c = p.lastIndexOf("/");
          return c === -1 ? p : p.slice(0, c + 1);
        }
        function filename(p) {
          if (p.charAt(p.length - 1) == "/")
            return filename(p.slice(0, -1));
          var c = p.lastIndexOf("/");
          return c === -1 ? p : p.slice(c + 1);
        }
        function write_dos_date(buf, date) {
          if (typeof date === "string")
            date = new Date(date);
          var hms = date.getHours();
          hms = hms << 6 | date.getMinutes();
          hms = hms << 5 | date.getSeconds() >>> 1;
          buf.write_shift(2, hms);
          var ymd = date.getFullYear() - 1980;
          ymd = ymd << 4 | date.getMonth() + 1;
          ymd = ymd << 5 | date.getDate();
          buf.write_shift(2, ymd);
        }
        function parse_dos_date(buf) {
          var hms = buf.read_shift(2) & 65535;
          var ymd = buf.read_shift(2) & 65535;
          var val = new Date();
          var d = ymd & 31;
          ymd >>>= 5;
          var m = ymd & 15;
          ymd >>>= 4;
          val.setMilliseconds(0);
          val.setFullYear(ymd + 1980);
          val.setMonth(m - 1);
          val.setDate(d);
          var S = hms & 31;
          hms >>>= 5;
          var M = hms & 63;
          hms >>>= 6;
          val.setHours(hms);
          val.setMinutes(M);
          val.setSeconds(S << 1);
          return val;
        }
        function parse_extra_field(blob) {
          prep_blob(blob, 0);
          var o = {};
          var flags = 0;
          while (blob.l <= blob.length - 4) {
            var type = blob.read_shift(2);
            var sz = blob.read_shift(2), tgt = blob.l + sz;
            var p = {};
            switch (type) {
              case 21589:
                {
                  flags = blob.read_shift(1);
                  if (flags & 1)
                    p.mtime = blob.read_shift(4);
                  if (sz > 5) {
                    if (flags & 2)
                      p.atime = blob.read_shift(4);
                    if (flags & 4)
                      p.ctime = blob.read_shift(4);
                  }
                  if (p.mtime)
                    p.mt = new Date(p.mtime * 1e3);
                }
                break;
            }
            blob.l = tgt;
            o[type] = p;
          }
          return o;
        }
        var fs;
        function get_fs() {
          return fs || (fs = require("fs"));
        }
        function parse(file, options) {
          if (file[0] == 80 && file[1] == 75)
            return parse_zip2(file, options);
          if (file.length < 512)
            throw new Error("CFB file size " + file.length + " < 512");
          var mver = 3;
          var ssz = 512;
          var nmfs = 0;
          var difat_sec_cnt = 0;
          var dir_start = 0;
          var minifat_start = 0;
          var difat_start = 0;
          var fat_addrs = [];
          var blob = file.slice(0, 512);
          prep_blob(blob, 0);
          var mv = check_get_mver(blob);
          mver = mv[0];
          switch (mver) {
            case 3:
              ssz = 512;
              break;
            case 4:
              ssz = 4096;
              break;
            case 0:
              if (mv[1] == 0)
                return parse_zip2(file, options);
            default:
              throw new Error("Major Version: Expected 3 or 4 saw " + mver);
          }
          if (ssz !== 512) {
            blob = file.slice(0, ssz);
            prep_blob(blob, 28);
          }
          var header = file.slice(0, ssz);
          check_shifts(blob, mver);
          var dir_cnt = blob.read_shift(4, "i");
          if (mver === 3 && dir_cnt !== 0)
            throw new Error("# Directory Sectors: Expected 0 saw " + dir_cnt);
          blob.l += 4;
          dir_start = blob.read_shift(4, "i");
          blob.l += 4;
          blob.chk("00100000", "Mini Stream Cutoff Size: ");
          minifat_start = blob.read_shift(4, "i");
          nmfs = blob.read_shift(4, "i");
          difat_start = blob.read_shift(4, "i");
          difat_sec_cnt = blob.read_shift(4, "i");
          for (var q2 = -1, j = 0; j < 109; ++j) {
            q2 = blob.read_shift(4, "i");
            if (q2 < 0)
              break;
            fat_addrs[j] = q2;
          }
          var sectors = sectorify(file, ssz);
          sleuth_fat(difat_start, difat_sec_cnt, sectors, ssz, fat_addrs);
          var sector_list = make_sector_list(sectors, dir_start, fat_addrs, ssz);
          sector_list[dir_start].name = "!Directory";
          if (nmfs > 0 && minifat_start !== ENDOFCHAIN)
            sector_list[minifat_start].name = "!MiniFAT";
          sector_list[fat_addrs[0]].name = "!FAT";
          sector_list.fat_addrs = fat_addrs;
          sector_list.ssz = ssz;
          var files = {}, Paths = [], FileIndex = [], FullPaths = [];
          read_directory(dir_start, sector_list, sectors, Paths, nmfs, files, FileIndex, minifat_start);
          build_full_paths(FileIndex, FullPaths, Paths);
          Paths.shift();
          var o = {
            FileIndex,
            FullPaths
          };
          if (options && options.raw)
            o.raw = { header, sectors };
          return o;
        }
        function check_get_mver(blob) {
          if (blob[blob.l] == 80 && blob[blob.l + 1] == 75)
            return [0, 0];
          blob.chk(HEADER_SIGNATURE, "Header Signature: ");
          blob.l += 16;
          var mver = blob.read_shift(2, "u");
          return [blob.read_shift(2, "u"), mver];
        }
        function check_shifts(blob, mver) {
          var shift = 9;
          blob.l += 2;
          switch (shift = blob.read_shift(2)) {
            case 9:
              if (mver != 3)
                throw new Error("Sector Shift: Expected 9 saw " + shift);
              break;
            case 12:
              if (mver != 4)
                throw new Error("Sector Shift: Expected 12 saw " + shift);
              break;
            default:
              throw new Error("Sector Shift: Expected 9 or 12 saw " + shift);
          }
          blob.chk("0600", "Mini Sector Shift: ");
          blob.chk("000000000000", "Reserved: ");
        }
        function sectorify(file, ssz) {
          var nsectors = Math.ceil(file.length / ssz) - 1;
          var sectors = [];
          for (var i3 = 1; i3 < nsectors; ++i3)
            sectors[i3 - 1] = file.slice(i3 * ssz, (i3 + 1) * ssz);
          sectors[nsectors - 1] = file.slice(nsectors * ssz);
          return sectors;
        }
        function build_full_paths(FI, FP, Paths) {
          var i3 = 0, L = 0, R = 0, C = 0, j = 0, pl = Paths.length;
          var dad = [], q2 = [];
          for (; i3 < pl; ++i3) {
            dad[i3] = q2[i3] = i3;
            FP[i3] = Paths[i3];
          }
          for (; j < q2.length; ++j) {
            i3 = q2[j];
            L = FI[i3].L;
            R = FI[i3].R;
            C = FI[i3].C;
            if (dad[i3] === i3) {
              if (L !== -1 && dad[L] !== L)
                dad[i3] = dad[L];
              if (R !== -1 && dad[R] !== R)
                dad[i3] = dad[R];
            }
            if (C !== -1)
              dad[C] = i3;
            if (L !== -1 && i3 != dad[i3]) {
              dad[L] = dad[i3];
              if (q2.lastIndexOf(L) < j)
                q2.push(L);
            }
            if (R !== -1 && i3 != dad[i3]) {
              dad[R] = dad[i3];
              if (q2.lastIndexOf(R) < j)
                q2.push(R);
            }
          }
          for (i3 = 1; i3 < pl; ++i3)
            if (dad[i3] === i3) {
              if (R !== -1 && dad[R] !== R)
                dad[i3] = dad[R];
              else if (L !== -1 && dad[L] !== L)
                dad[i3] = dad[L];
            }
          for (i3 = 1; i3 < pl; ++i3) {
            if (FI[i3].type === 0)
              continue;
            j = i3;
            if (j != dad[j])
              do {
                j = dad[j];
                FP[i3] = FP[j] + "/" + FP[i3];
              } while (j !== 0 && dad[j] !== -1 && j != dad[j]);
            dad[i3] = -1;
          }
          FP[0] += "/";
          for (i3 = 1; i3 < pl; ++i3) {
            if (FI[i3].type !== 2)
              FP[i3] += "/";
          }
        }
        function get_mfat_entry(entry, payload, mini) {
          var start = entry.start, size = entry.size;
          var o = [];
          var idx = start;
          while (mini && size > 0 && idx >= 0) {
            o.push(payload.slice(idx * MSSZ, idx * MSSZ + MSSZ));
            size -= MSSZ;
            idx = __readInt32LE(mini, idx * 4);
          }
          if (o.length === 0)
            return new_buf(0);
          return bconcat(o).slice(0, entry.size);
        }
        function sleuth_fat(idx, cnt, sectors, ssz, fat_addrs) {
          var q2 = ENDOFCHAIN;
          if (idx === ENDOFCHAIN) {
            if (cnt !== 0)
              throw new Error("DIFAT chain shorter than expected");
          } else if (idx !== -1) {
            var sector = sectors[idx], m = (ssz >>> 2) - 1;
            if (!sector)
              return;
            for (var i3 = 0; i3 < m; ++i3) {
              if ((q2 = __readInt32LE(sector, i3 * 4)) === ENDOFCHAIN)
                break;
              fat_addrs.push(q2);
            }
            sleuth_fat(__readInt32LE(sector, ssz - 4), cnt - 1, sectors, ssz, fat_addrs);
          }
        }
        function get_sector_list(sectors, start, fat_addrs, ssz, chkd) {
          var buf = [], buf_chain = [];
          if (!chkd)
            chkd = [];
          var modulus = ssz - 1, j = 0, jj = 0;
          for (j = start; j >= 0; ) {
            chkd[j] = true;
            buf[buf.length] = j;
            buf_chain.push(sectors[j]);
            var addr = fat_addrs[Math.floor(j * 4 / ssz)];
            jj = j * 4 & modulus;
            if (ssz < 4 + jj)
              throw new Error("FAT boundary crossed: " + j + " 4 " + ssz);
            if (!sectors[addr])
              break;
            j = __readInt32LE(sectors[addr], jj);
          }
          return { nodes: buf, data: __toBuffer([buf_chain]) };
        }
        function make_sector_list(sectors, dir_start, fat_addrs, ssz) {
          var sl = sectors.length, sector_list = [];
          var chkd = [], buf = [], buf_chain = [];
          var modulus = ssz - 1, i3 = 0, j = 0, k = 0, jj = 0;
          for (i3 = 0; i3 < sl; ++i3) {
            buf = [];
            k = i3 + dir_start;
            if (k >= sl)
              k -= sl;
            if (chkd[k])
              continue;
            buf_chain = [];
            var seen = [];
            for (j = k; j >= 0; ) {
              seen[j] = true;
              chkd[j] = true;
              buf[buf.length] = j;
              buf_chain.push(sectors[j]);
              var addr = fat_addrs[Math.floor(j * 4 / ssz)];
              jj = j * 4 & modulus;
              if (ssz < 4 + jj)
                throw new Error("FAT boundary crossed: " + j + " 4 " + ssz);
              if (!sectors[addr])
                break;
              j = __readInt32LE(sectors[addr], jj);
              if (seen[j])
                break;
            }
            sector_list[k] = { nodes: buf, data: __toBuffer([buf_chain]) };
          }
          return sector_list;
        }
        function read_directory(dir_start, sector_list, sectors, Paths, nmfs, files, FileIndex, mini) {
          var minifat_store = 0, pl = Paths.length ? 2 : 0;
          var sector = sector_list[dir_start].data;
          var i3 = 0, namelen = 0, name2;
          for (; i3 < sector.length; i3 += 128) {
            var blob = sector.slice(i3, i3 + 128);
            prep_blob(blob, 64);
            namelen = blob.read_shift(2);
            name2 = __utf16le(blob, 0, namelen - pl);
            Paths.push(name2);
            var o = {
              name: name2,
              type: blob.read_shift(1),
              color: blob.read_shift(1),
              L: blob.read_shift(4, "i"),
              R: blob.read_shift(4, "i"),
              C: blob.read_shift(4, "i"),
              clsid: blob.read_shift(16),
              state: blob.read_shift(4, "i"),
              start: 0,
              size: 0
            };
            var ctime = blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2);
            if (ctime !== 0)
              o.ct = read_date(blob, blob.l - 8);
            var mtime = blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2);
            if (mtime !== 0)
              o.mt = read_date(blob, blob.l - 8);
            o.start = blob.read_shift(4, "i");
            o.size = blob.read_shift(4, "i");
            if (o.size < 0 && o.start < 0) {
              o.size = o.type = 0;
              o.start = ENDOFCHAIN;
              o.name = "";
            }
            if (o.type === 5) {
              minifat_store = o.start;
              if (nmfs > 0 && minifat_store !== ENDOFCHAIN)
                sector_list[minifat_store].name = "!StreamData";
            } else if (o.size >= 4096) {
              o.storage = "fat";
              if (sector_list[o.start] === void 0)
                sector_list[o.start] = get_sector_list(sectors, o.start, sector_list.fat_addrs, sector_list.ssz);
              sector_list[o.start].name = o.name;
              o.content = sector_list[o.start].data.slice(0, o.size);
            } else {
              o.storage = "minifat";
              if (o.size < 0)
                o.size = 0;
              else if (minifat_store !== ENDOFCHAIN && o.start !== ENDOFCHAIN && sector_list[minifat_store]) {
                o.content = get_mfat_entry(o, sector_list[minifat_store].data, (sector_list[mini] || {}).data);
              }
            }
            if (o.content)
              prep_blob(o.content, 0);
            files[name2] = o;
            FileIndex.push(o);
          }
        }
        function read_date(blob, offset) {
          return new Date((__readUInt32LE(blob, offset + 4) / 1e7 * Math.pow(2, 32) + __readUInt32LE(blob, offset) / 1e7 - 11644473600) * 1e3);
        }
        function read_file(filename2, options) {
          get_fs();
          return parse(fs.readFileSync(filename2), options);
        }
        function read(blob, options) {
          switch (options && options.type || "base64") {
            case "file":
              return read_file(blob, options);
            case "base64":
              return parse(s2a(Base64.decode(blob)), options);
            case "binary":
              return parse(s2a(blob), options);
          }
          return parse(blob, options);
        }
        function init_cfb(cfb, opts) {
          var o = opts || {}, root = o.root || "Root Entry";
          if (!cfb.FullPaths)
            cfb.FullPaths = [];
          if (!cfb.FileIndex)
            cfb.FileIndex = [];
          if (cfb.FullPaths.length !== cfb.FileIndex.length)
            throw new Error("inconsistent CFB structure");
          if (cfb.FullPaths.length === 0) {
            cfb.FullPaths[0] = root + "/";
            cfb.FileIndex[0] = { name: root, type: 5 };
          }
          if (o.CLSID)
            cfb.FileIndex[0].clsid = o.CLSID;
          seed_cfb(cfb);
        }
        function seed_cfb(cfb) {
          var nm = "Sh33tJ5";
          if (CFB.find(cfb, "/" + nm))
            return;
          var p = new_buf(4);
          p[0] = 55;
          p[1] = p[3] = 50;
          p[2] = 54;
          cfb.FileIndex.push({ name: nm, type: 2, content: p, size: 4, L: 69, R: 69, C: 69 });
          cfb.FullPaths.push(cfb.FullPaths[0] + nm);
          rebuild_cfb(cfb);
        }
        function rebuild_cfb(cfb, f) {
          init_cfb(cfb);
          var gc = false, s = false;
          for (var i3 = cfb.FullPaths.length - 1; i3 >= 0; --i3) {
            var _file = cfb.FileIndex[i3];
            switch (_file.type) {
              case 0:
                if (s)
                  gc = true;
                else {
                  cfb.FileIndex.pop();
                  cfb.FullPaths.pop();
                }
                break;
              case 1:
              case 2:
              case 5:
                s = true;
                if (isNaN(_file.R * _file.L * _file.C))
                  gc = true;
                if (_file.R > -1 && _file.L > -1 && _file.R == _file.L)
                  gc = true;
                break;
              default:
                gc = true;
                break;
            }
          }
          if (!gc && !f)
            return;
          var now = new Date(1987, 1, 19), j = 0;
          var data = [];
          for (i3 = 0; i3 < cfb.FullPaths.length; ++i3) {
            if (cfb.FileIndex[i3].type === 0)
              continue;
            data.push([cfb.FullPaths[i3], cfb.FileIndex[i3]]);
          }
          for (i3 = 0; i3 < data.length; ++i3) {
            var dad = dirname(data[i3][0]);
            s = false;
            for (j = 0; j < data.length; ++j)
              if (data[j][0] === dad)
                s = true;
            if (!s)
              data.push([dad, {
                name: filename(dad).replace("/", ""),
                type: 1,
                clsid: HEADER_CLSID,
                ct: now,
                mt: now,
                content: null
              }]);
          }
          data.sort(function(x, y) {
            return namecmp(x[0], y[0]);
          });
          cfb.FullPaths = [];
          cfb.FileIndex = [];
          for (i3 = 0; i3 < data.length; ++i3) {
            cfb.FullPaths[i3] = data[i3][0];
            cfb.FileIndex[i3] = data[i3][1];
          }
          for (i3 = 0; i3 < data.length; ++i3) {
            var elt = cfb.FileIndex[i3];
            var nm = cfb.FullPaths[i3];
            elt.name = filename(nm).replace("/", "");
            elt.L = elt.R = elt.C = -(elt.color = 1);
            elt.size = elt.content ? elt.content.length : 0;
            elt.start = 0;
            elt.clsid = elt.clsid || HEADER_CLSID;
            if (i3 === 0) {
              elt.C = data.length > 1 ? 1 : -1;
              elt.size = 0;
              elt.type = 5;
            } else if (nm.slice(-1) == "/") {
              for (j = i3 + 1; j < data.length; ++j)
                if (dirname(cfb.FullPaths[j]) == nm)
                  break;
              elt.C = j >= data.length ? -1 : j;
              for (j = i3 + 1; j < data.length; ++j)
                if (dirname(cfb.FullPaths[j]) == dirname(nm))
                  break;
              elt.R = j >= data.length ? -1 : j;
              elt.type = 1;
            } else {
              if (dirname(cfb.FullPaths[i3 + 1] || "") == dirname(nm))
                elt.R = i3 + 1;
              elt.type = 2;
            }
          }
        }
        function _write(cfb, options) {
          var _opts = options || {};
          rebuild_cfb(cfb);
          if (_opts.fileType == "zip")
            return write_zip2(cfb, _opts);
          var L = function(cfb2) {
            var mini_size = 0, fat_size = 0;
            for (var i4 = 0; i4 < cfb2.FileIndex.length; ++i4) {
              var file2 = cfb2.FileIndex[i4];
              if (!file2.content)
                continue;
              var flen2 = file2.content.length;
              if (flen2 > 0) {
                if (flen2 < 4096)
                  mini_size += flen2 + 63 >> 6;
                else
                  fat_size += flen2 + 511 >> 9;
              }
            }
            var dir_cnt = cfb2.FullPaths.length + 3 >> 2;
            var mini_cnt = mini_size + 7 >> 3;
            var mfat_cnt = mini_size + 127 >> 7;
            var fat_base = mini_cnt + fat_size + dir_cnt + mfat_cnt;
            var fat_cnt = fat_base + 127 >> 7;
            var difat_cnt = fat_cnt <= 109 ? 0 : Math.ceil((fat_cnt - 109) / 127);
            while (fat_base + fat_cnt + difat_cnt + 127 >> 7 > fat_cnt)
              difat_cnt = ++fat_cnt <= 109 ? 0 : Math.ceil((fat_cnt - 109) / 127);
            var L2 = [1, difat_cnt, fat_cnt, mfat_cnt, dir_cnt, fat_size, mini_size, 0];
            cfb2.FileIndex[0].size = mini_size << 6;
            L2[7] = (cfb2.FileIndex[0].start = L2[0] + L2[1] + L2[2] + L2[3] + L2[4] + L2[5]) + (L2[6] + 7 >> 3);
            return L2;
          }(cfb);
          var o = new_buf(L[7] << 9);
          var i3 = 0, T = 0;
          {
            for (i3 = 0; i3 < 8; ++i3)
              o.write_shift(1, HEADER_SIG[i3]);
            for (i3 = 0; i3 < 8; ++i3)
              o.write_shift(2, 0);
            o.write_shift(2, 62);
            o.write_shift(2, 3);
            o.write_shift(2, 65534);
            o.write_shift(2, 9);
            o.write_shift(2, 6);
            for (i3 = 0; i3 < 3; ++i3)
              o.write_shift(2, 0);
            o.write_shift(4, 0);
            o.write_shift(4, L[2]);
            o.write_shift(4, L[0] + L[1] + L[2] + L[3] - 1);
            o.write_shift(4, 0);
            o.write_shift(4, 1 << 12);
            o.write_shift(4, L[3] ? L[0] + L[1] + L[2] - 1 : ENDOFCHAIN);
            o.write_shift(4, L[3]);
            o.write_shift(-4, L[1] ? L[0] - 1 : ENDOFCHAIN);
            o.write_shift(4, L[1]);
            for (i3 = 0; i3 < 109; ++i3)
              o.write_shift(-4, i3 < L[2] ? L[1] + i3 : -1);
          }
          if (L[1]) {
            for (T = 0; T < L[1]; ++T) {
              for (; i3 < 236 + T * 127; ++i3)
                o.write_shift(-4, i3 < L[2] ? L[1] + i3 : -1);
              o.write_shift(-4, T === L[1] - 1 ? ENDOFCHAIN : T + 1);
            }
          }
          var chainit = function(w) {
            for (T += w; i3 < T - 1; ++i3)
              o.write_shift(-4, i3 + 1);
            if (w) {
              ++i3;
              o.write_shift(-4, ENDOFCHAIN);
            }
          };
          T = i3 = 0;
          for (T += L[1]; i3 < T; ++i3)
            o.write_shift(-4, consts.DIFSECT);
          for (T += L[2]; i3 < T; ++i3)
            o.write_shift(-4, consts.FATSECT);
          chainit(L[3]);
          chainit(L[4]);
          var j = 0, flen = 0;
          var file = cfb.FileIndex[0];
          for (; j < cfb.FileIndex.length; ++j) {
            file = cfb.FileIndex[j];
            if (!file.content)
              continue;
            flen = file.content.length;
            if (flen < 4096)
              continue;
            file.start = T;
            chainit(flen + 511 >> 9);
          }
          chainit(L[6] + 7 >> 3);
          while (o.l & 511)
            o.write_shift(-4, consts.ENDOFCHAIN);
          T = i3 = 0;
          for (j = 0; j < cfb.FileIndex.length; ++j) {
            file = cfb.FileIndex[j];
            if (!file.content)
              continue;
            flen = file.content.length;
            if (!flen || flen >= 4096)
              continue;
            file.start = T;
            chainit(flen + 63 >> 6);
          }
          while (o.l & 511)
            o.write_shift(-4, consts.ENDOFCHAIN);
          for (i3 = 0; i3 < L[4] << 2; ++i3) {
            var nm = cfb.FullPaths[i3];
            if (!nm || nm.length === 0) {
              for (j = 0; j < 17; ++j)
                o.write_shift(4, 0);
              for (j = 0; j < 3; ++j)
                o.write_shift(4, -1);
              for (j = 0; j < 12; ++j)
                o.write_shift(4, 0);
              continue;
            }
            file = cfb.FileIndex[i3];
            if (i3 === 0)
              file.start = file.size ? file.start - 1 : ENDOFCHAIN;
            var _nm = i3 === 0 && _opts.root || file.name;
            flen = 2 * (_nm.length + 1);
            o.write_shift(64, _nm, "utf16le");
            o.write_shift(2, flen);
            o.write_shift(1, file.type);
            o.write_shift(1, file.color);
            o.write_shift(-4, file.L);
            o.write_shift(-4, file.R);
            o.write_shift(-4, file.C);
            if (!file.clsid)
              for (j = 0; j < 4; ++j)
                o.write_shift(4, 0);
            else
              o.write_shift(16, file.clsid, "hex");
            o.write_shift(4, file.state || 0);
            o.write_shift(4, 0);
            o.write_shift(4, 0);
            o.write_shift(4, 0);
            o.write_shift(4, 0);
            o.write_shift(4, file.start);
            o.write_shift(4, file.size);
            o.write_shift(4, 0);
          }
          for (i3 = 1; i3 < cfb.FileIndex.length; ++i3) {
            file = cfb.FileIndex[i3];
            if (file.size >= 4096) {
              o.l = file.start + 1 << 9;
              for (j = 0; j < file.size; ++j)
                o.write_shift(1, file.content[j]);
              for (; j & 511; ++j)
                o.write_shift(1, 0);
            }
          }
          for (i3 = 1; i3 < cfb.FileIndex.length; ++i3) {
            file = cfb.FileIndex[i3];
            if (file.size > 0 && file.size < 4096) {
              for (j = 0; j < file.size; ++j)
                o.write_shift(1, file.content[j]);
              for (; j & 63; ++j)
                o.write_shift(1, 0);
            }
          }
          while (o.l < o.length)
            o.write_shift(1, 0);
          return o;
        }
        function find(cfb, path) {
          var UCFullPaths = cfb.FullPaths.map(function(x) {
            return x.toUpperCase();
          });
          var UCPaths = UCFullPaths.map(function(x) {
            var y = x.split("/");
            return y[y.length - (x.slice(-1) == "/" ? 2 : 1)];
          });
          var k = false;
          if (path.charCodeAt(0) === 47) {
            k = true;
            path = UCFullPaths[0].slice(0, -1) + path;
          } else
            k = path.indexOf("/") !== -1;
          var UCPath = path.toUpperCase();
          var w = k === true ? UCFullPaths.indexOf(UCPath) : UCPaths.indexOf(UCPath);
          if (w !== -1)
            return cfb.FileIndex[w];
          var m = !UCPath.match(chr1);
          UCPath = UCPath.replace(chr0, "");
          if (m)
            UCPath = UCPath.replace(chr1, "!");
          for (w = 0; w < UCFullPaths.length; ++w) {
            if ((m ? UCFullPaths[w].replace(chr1, "!") : UCFullPaths[w]).replace(chr0, "") == UCPath)
              return cfb.FileIndex[w];
            if ((m ? UCPaths[w].replace(chr1, "!") : UCPaths[w]).replace(chr0, "") == UCPath)
              return cfb.FileIndex[w];
          }
          return null;
        }
        var MSSZ = 64;
        var ENDOFCHAIN = -2;
        var HEADER_SIGNATURE = "d0cf11e0a1b11ae1";
        var HEADER_SIG = [208, 207, 17, 224, 161, 177, 26, 225];
        var HEADER_CLSID = "00000000000000000000000000000000";
        var consts = {
          MAXREGSECT: -6,
          DIFSECT: -4,
          FATSECT: -3,
          ENDOFCHAIN,
          FREESECT: -1,
          HEADER_SIGNATURE,
          HEADER_MINOR_VERSION: "3e00",
          MAXREGSID: -6,
          NOSTREAM: -1,
          HEADER_CLSID,
          EntryTypes: ["unknown", "storage", "stream", "lockbytes", "property", "root"]
        };
        function write_file(cfb, filename2, options) {
          get_fs();
          var o = _write(cfb, options);
          fs.writeFileSync(filename2, o);
        }
        function a2s2(o) {
          var out = new Array(o.length);
          for (var i3 = 0; i3 < o.length; ++i3)
            out[i3] = String.fromCharCode(o[i3]);
          return out.join("");
        }
        function write(cfb, options) {
          var o = _write(cfb, options);
          switch (options && options.type) {
            case "file":
              get_fs();
              fs.writeFileSync(options.filename, o);
              return o;
            case "binary":
              return a2s2(o);
            case "base64":
              return Base64.encode(a2s2(o));
          }
          return o;
        }
        var _zlib;
        function use_zlib(zlib) {
          try {
            var InflateRaw = zlib.InflateRaw;
            var InflRaw = new InflateRaw();
            InflRaw._processChunk(new Uint8Array([3, 0]), InflRaw._finishFlushFlag);
            if (InflRaw.bytesRead)
              _zlib = zlib;
            else
              throw new Error("zlib does not expose bytesRead");
          } catch (e) {
            console.error("cannot use native zlib: " + (e.message || e));
          }
        }
        function _inflateRawSync(payload, usz) {
          if (!_zlib)
            return _inflate(payload, usz);
          var InflateRaw = _zlib.InflateRaw;
          var InflRaw = new InflateRaw();
          var out = InflRaw._processChunk(payload.slice(payload.l), InflRaw._finishFlushFlag);
          payload.l += InflRaw.bytesRead;
          return out;
        }
        function _deflateRawSync(payload) {
          return _zlib ? _zlib.deflateRawSync(payload) : _deflate(payload);
        }
        var CLEN_ORDER = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];
        var LEN_LN = [3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258];
        var DST_LN = [1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577];
        function bit_swap_8(n) {
          var t = (n << 1 | n << 11) & 139536 | (n << 5 | n << 15) & 558144;
          return (t >> 16 | t >> 8 | t) & 255;
        }
        var use_typed_arrays = typeof Uint8Array !== "undefined";
        var bitswap8 = use_typed_arrays ? new Uint8Array(1 << 8) : [];
        for (var q = 0; q < 1 << 8; ++q)
          bitswap8[q] = bit_swap_8(q);
        function bit_swap_n(n, b) {
          var rev = bitswap8[n & 255];
          if (b <= 8)
            return rev >>> 8 - b;
          rev = rev << 8 | bitswap8[n >> 8 & 255];
          if (b <= 16)
            return rev >>> 16 - b;
          rev = rev << 8 | bitswap8[n >> 16 & 255];
          return rev >>> 24 - b;
        }
        function read_bits_2(buf, bl) {
          var w = bl & 7, h = bl >>> 3;
          return (buf[h] | (w <= 6 ? 0 : buf[h + 1] << 8)) >>> w & 3;
        }
        function read_bits_3(buf, bl) {
          var w = bl & 7, h = bl >>> 3;
          return (buf[h] | (w <= 5 ? 0 : buf[h + 1] << 8)) >>> w & 7;
        }
        function read_bits_4(buf, bl) {
          var w = bl & 7, h = bl >>> 3;
          return (buf[h] | (w <= 4 ? 0 : buf[h + 1] << 8)) >>> w & 15;
        }
        function read_bits_5(buf, bl) {
          var w = bl & 7, h = bl >>> 3;
          return (buf[h] | (w <= 3 ? 0 : buf[h + 1] << 8)) >>> w & 31;
        }
        function read_bits_7(buf, bl) {
          var w = bl & 7, h = bl >>> 3;
          return (buf[h] | (w <= 1 ? 0 : buf[h + 1] << 8)) >>> w & 127;
        }
        function read_bits_n(buf, bl, n) {
          var w = bl & 7, h = bl >>> 3, f = (1 << n) - 1;
          var v = buf[h] >>> w;
          if (n < 8 - w)
            return v & f;
          v |= buf[h + 1] << 8 - w;
          if (n < 16 - w)
            return v & f;
          v |= buf[h + 2] << 16 - w;
          if (n < 24 - w)
            return v & f;
          v |= buf[h + 3] << 24 - w;
          return v & f;
        }
        function realloc(b, sz) {
          var L = b.length, M = 2 * L > sz ? 2 * L : sz + 5, i3 = 0;
          if (L >= sz)
            return b;
          if (has_buf) {
            var o = new_unsafe_buf(M);
            if (b.copy)
              b.copy(o);
            else
              for (; i3 < b.length; ++i3)
                o[i3] = b[i3];
            return o;
          } else if (use_typed_arrays) {
            var a = new Uint8Array(M);
            if (a.set)
              a.set(b);
            else
              for (; i3 < b.length; ++i3)
                a[i3] = b[i3];
            return a;
          }
          b.length = M;
          return b;
        }
        function zero_fill_array(n) {
          var o = new Array(n);
          for (var i3 = 0; i3 < n; ++i3)
            o[i3] = 0;
          return o;
        }
        var _deflate = function() {
          var _deflateRaw = function() {
            return function deflateRaw(data, out) {
              var boff = 0;
              while (boff < data.length) {
                var L = Math.min(65535, data.length - boff);
                var h = boff + L == data.length;
                out.write_shift(1, +h);
                out.write_shift(2, L);
                out.write_shift(2, ~L & 65535);
                while (L-- > 0)
                  out[out.l++] = data[boff++];
              }
              return out.l;
            };
          }();
          return function(data) {
            var buf = new_buf(50 + Math.floor(data.length * 1.1));
            var off = _deflateRaw(data, buf);
            return buf.slice(0, off);
          };
        }();
        function build_tree(clens, cmap, MAX) {
          var maxlen = 1, w = 0, i3 = 0, j = 0, ccode = 0, L = clens.length;
          var bl_count = use_typed_arrays ? new Uint16Array(32) : zero_fill_array(32);
          for (i3 = 0; i3 < 32; ++i3)
            bl_count[i3] = 0;
          for (i3 = L; i3 < MAX; ++i3)
            clens[i3] = 0;
          L = clens.length;
          var ctree = use_typed_arrays ? new Uint16Array(L) : zero_fill_array(L);
          for (i3 = 0; i3 < L; ++i3) {
            bl_count[w = clens[i3]]++;
            if (maxlen < w)
              maxlen = w;
            ctree[i3] = 0;
          }
          bl_count[0] = 0;
          for (i3 = 1; i3 <= maxlen; ++i3)
            bl_count[i3 + 16] = ccode = ccode + bl_count[i3 - 1] << 1;
          for (i3 = 0; i3 < L; ++i3) {
            ccode = clens[i3];
            if (ccode != 0)
              ctree[i3] = bl_count[ccode + 16]++;
          }
          var cleni = 0;
          for (i3 = 0; i3 < L; ++i3) {
            cleni = clens[i3];
            if (cleni != 0) {
              ccode = bit_swap_n(ctree[i3], maxlen) >> maxlen - cleni;
              for (j = (1 << maxlen + 4 - cleni) - 1; j >= 0; --j)
                cmap[ccode | j << cleni] = cleni & 15 | i3 << 4;
            }
          }
          return maxlen;
        }
        var fix_lmap = use_typed_arrays ? new Uint16Array(512) : zero_fill_array(512);
        var fix_dmap = use_typed_arrays ? new Uint16Array(32) : zero_fill_array(32);
        if (!use_typed_arrays) {
          for (var i2 = 0; i2 < 512; ++i2)
            fix_lmap[i2] = 0;
          for (i2 = 0; i2 < 32; ++i2)
            fix_dmap[i2] = 0;
        }
        (function() {
          var dlens = [];
          var i3 = 0;
          for (; i3 < 32; i3++)
            dlens.push(5);
          build_tree(dlens, fix_dmap, 32);
          var clens = [];
          i3 = 0;
          for (; i3 <= 143; i3++)
            clens.push(8);
          for (; i3 <= 255; i3++)
            clens.push(9);
          for (; i3 <= 279; i3++)
            clens.push(7);
          for (; i3 <= 287; i3++)
            clens.push(8);
          build_tree(clens, fix_lmap, 288);
        })();
        var dyn_lmap = use_typed_arrays ? new Uint16Array(32768) : zero_fill_array(32768);
        var dyn_dmap = use_typed_arrays ? new Uint16Array(32768) : zero_fill_array(32768);
        var dyn_cmap = use_typed_arrays ? new Uint16Array(128) : zero_fill_array(128);
        var dyn_len_1 = 1, dyn_len_2 = 1;
        function dyn(data, boff) {
          var _HLIT = read_bits_5(data, boff) + 257;
          boff += 5;
          var _HDIST = read_bits_5(data, boff) + 1;
          boff += 5;
          var _HCLEN = read_bits_4(data, boff) + 4;
          boff += 4;
          var w = 0;
          var clens = use_typed_arrays ? new Uint8Array(19) : zero_fill_array(19);
          var ctree = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
          var maxlen = 1;
          var bl_count = use_typed_arrays ? new Uint8Array(8) : zero_fill_array(8);
          var next_code = use_typed_arrays ? new Uint8Array(8) : zero_fill_array(8);
          var L = clens.length;
          for (var i3 = 0; i3 < _HCLEN; ++i3) {
            clens[CLEN_ORDER[i3]] = w = read_bits_3(data, boff);
            if (maxlen < w)
              maxlen = w;
            bl_count[w]++;
            boff += 3;
          }
          var ccode = 0;
          bl_count[0] = 0;
          for (i3 = 1; i3 <= maxlen; ++i3)
            next_code[i3] = ccode = ccode + bl_count[i3 - 1] << 1;
          for (i3 = 0; i3 < L; ++i3)
            if ((ccode = clens[i3]) != 0)
              ctree[i3] = next_code[ccode]++;
          var cleni = 0;
          for (i3 = 0; i3 < L; ++i3) {
            cleni = clens[i3];
            if (cleni != 0) {
              ccode = bitswap8[ctree[i3]] >> 8 - cleni;
              for (var j = (1 << 7 - cleni) - 1; j >= 0; --j)
                dyn_cmap[ccode | j << cleni] = cleni & 7 | i3 << 3;
            }
          }
          var hcodes = [];
          maxlen = 1;
          for (; hcodes.length < _HLIT + _HDIST; ) {
            ccode = dyn_cmap[read_bits_7(data, boff)];
            boff += ccode & 7;
            switch (ccode >>>= 3) {
              case 16:
                w = 3 + read_bits_2(data, boff);
                boff += 2;
                ccode = hcodes[hcodes.length - 1];
                while (w-- > 0)
                  hcodes.push(ccode);
                break;
              case 17:
                w = 3 + read_bits_3(data, boff);
                boff += 3;
                while (w-- > 0)
                  hcodes.push(0);
                break;
              case 18:
                w = 11 + read_bits_7(data, boff);
                boff += 7;
                while (w-- > 0)
                  hcodes.push(0);
                break;
              default:
                hcodes.push(ccode);
                if (maxlen < ccode)
                  maxlen = ccode;
                break;
            }
          }
          var h1 = hcodes.slice(0, _HLIT), h2 = hcodes.slice(_HLIT);
          for (i3 = _HLIT; i3 < 286; ++i3)
            h1[i3] = 0;
          for (i3 = _HDIST; i3 < 30; ++i3)
            h2[i3] = 0;
          dyn_len_1 = build_tree(h1, dyn_lmap, 286);
          dyn_len_2 = build_tree(h2, dyn_dmap, 30);
          return boff;
        }
        function inflate(data, usz) {
          if (data[0] == 3 && !(data[1] & 3)) {
            return [new_raw_buf(usz), 2];
          }
          var boff = 0;
          var header = 0;
          var outbuf = new_unsafe_buf(usz ? usz : 1 << 18);
          var woff = 0;
          var OL = outbuf.length >>> 0;
          var max_len_1 = 0, max_len_2 = 0;
          while ((header & 1) == 0) {
            header = read_bits_3(data, boff);
            boff += 3;
            if (header >>> 1 == 0) {
              if (boff & 7)
                boff += 8 - (boff & 7);
              var sz = data[boff >>> 3] | data[(boff >>> 3) + 1] << 8;
              boff += 32;
              if (!usz && OL < woff + sz) {
                outbuf = realloc(outbuf, woff + sz);
                OL = outbuf.length;
              }
              if (typeof data.copy === "function") {
                data.copy(outbuf, woff, boff >>> 3, (boff >>> 3) + sz);
                woff += sz;
                boff += 8 * sz;
              } else
                while (sz-- > 0) {
                  outbuf[woff++] = data[boff >>> 3];
                  boff += 8;
                }
              continue;
            } else if (header >>> 1 == 1) {
              max_len_1 = 9;
              max_len_2 = 5;
            } else {
              boff = dyn(data, boff);
              max_len_1 = dyn_len_1;
              max_len_2 = dyn_len_2;
            }
            if (!usz && OL < woff + 32767) {
              outbuf = realloc(outbuf, woff + 32767);
              OL = outbuf.length;
            }
            for (; ; ) {
              var bits = read_bits_n(data, boff, max_len_1);
              var code = header >>> 1 == 1 ? fix_lmap[bits] : dyn_lmap[bits];
              boff += code & 15;
              code >>>= 4;
              if ((code >>> 8 & 255) === 0)
                outbuf[woff++] = code;
              else if (code == 256)
                break;
              else {
                code -= 257;
                var len_eb = code < 8 ? 0 : code - 4 >> 2;
                if (len_eb > 5)
                  len_eb = 0;
                var tgt = woff + LEN_LN[code];
                if (len_eb > 0) {
                  tgt += read_bits_n(data, boff, len_eb);
                  boff += len_eb;
                }
                bits = read_bits_n(data, boff, max_len_2);
                code = header >>> 1 == 1 ? fix_dmap[bits] : dyn_dmap[bits];
                boff += code & 15;
                code >>>= 4;
                var dst_eb = code < 4 ? 0 : code - 2 >> 1;
                var dst = DST_LN[code];
                if (dst_eb > 0) {
                  dst += read_bits_n(data, boff, dst_eb);
                  boff += dst_eb;
                }
                if (!usz && OL < tgt) {
                  outbuf = realloc(outbuf, tgt);
                  OL = outbuf.length;
                }
                while (woff < tgt) {
                  outbuf[woff] = outbuf[woff - dst];
                  ++woff;
                }
              }
            }
          }
          return [usz ? outbuf : outbuf.slice(0, woff), boff + 7 >>> 3];
        }
        function _inflate(payload, usz) {
          var data = payload.slice(payload.l || 0);
          var out = inflate(data, usz);
          payload.l += out[1];
          return out[0];
        }
        function warn_or_throw(wrn, msg) {
          if (wrn) {
            if (typeof console !== "undefined")
              console.error(msg);
          } else
            throw new Error(msg);
        }
        function parse_zip2(file, options) {
          var blob = file;
          prep_blob(blob, 0);
          var FileIndex = [], FullPaths = [];
          var o = {
            FileIndex,
            FullPaths
          };
          init_cfb(o, { root: options.root });
          var i3 = blob.length - 4;
          while ((blob[i3] != 80 || blob[i3 + 1] != 75 || blob[i3 + 2] != 5 || blob[i3 + 3] != 6) && i3 >= 0)
            --i3;
          blob.l = i3 + 4;
          blob.l += 4;
          var fcnt = blob.read_shift(2);
          blob.l += 6;
          var start_cd = blob.read_shift(4);
          blob.l = start_cd;
          for (i3 = 0; i3 < fcnt; ++i3) {
            blob.l += 20;
            var csz = blob.read_shift(4);
            var usz = blob.read_shift(4);
            var namelen = blob.read_shift(2);
            var efsz = blob.read_shift(2);
            var fcsz = blob.read_shift(2);
            blob.l += 8;
            var offset = blob.read_shift(4);
            var EF = parse_extra_field(blob.slice(blob.l + namelen, blob.l + namelen + efsz));
            blob.l += namelen + efsz + fcsz;
            var L = blob.l;
            blob.l = offset + 4;
            parse_local_file(blob, csz, usz, o, EF);
            blob.l = L;
          }
          return o;
        }
        function parse_local_file(blob, csz, usz, o, EF) {
          blob.l += 2;
          var flags = blob.read_shift(2);
          var meth = blob.read_shift(2);
          var date = parse_dos_date(blob);
          if (flags & 8257)
            throw new Error("Unsupported ZIP encryption");
          var crc32 = blob.read_shift(4);
          var _csz = blob.read_shift(4);
          var _usz = blob.read_shift(4);
          var namelen = blob.read_shift(2);
          var efsz = blob.read_shift(2);
          var name2 = "";
          for (var i3 = 0; i3 < namelen; ++i3)
            name2 += String.fromCharCode(blob[blob.l++]);
          if (efsz) {
            var ef = parse_extra_field(blob.slice(blob.l, blob.l + efsz));
            if ((ef[21589] || {}).mt)
              date = ef[21589].mt;
            if (((EF || {})[21589] || {}).mt)
              date = EF[21589].mt;
          }
          blob.l += efsz;
          var data = blob.slice(blob.l, blob.l + _csz);
          switch (meth) {
            case 8:
              data = _inflateRawSync(blob, _usz);
              break;
            case 0:
              break;
            default:
              throw new Error("Unsupported ZIP Compression method " + meth);
          }
          var wrn = false;
          if (flags & 8) {
            crc32 = blob.read_shift(4);
            if (crc32 == 134695760) {
              crc32 = blob.read_shift(4);
              wrn = true;
            }
            _csz = blob.read_shift(4);
            _usz = blob.read_shift(4);
          }
          if (_csz != csz)
            warn_or_throw(wrn, "Bad compressed size: " + csz + " != " + _csz);
          if (_usz != usz)
            warn_or_throw(wrn, "Bad uncompressed size: " + usz + " != " + _usz);
          var _crc32 = CRC32.buf(data, 0);
          if (crc32 >> 0 != _crc32 >> 0)
            warn_or_throw(wrn, "Bad CRC32 checksum: " + crc32 + " != " + _crc32);
          cfb_add(o, name2, data, { unsafe: true, mt: date });
        }
        function write_zip2(cfb, options) {
          var _opts = options || {};
          var out = [], cdirs = [];
          var o = new_buf(1);
          var method = _opts.compression ? 8 : 0, flags = 0;
          var desc = false;
          if (desc)
            flags |= 8;
          var i3 = 0, j = 0;
          var start_cd = 0, fcnt = 0;
          var root = cfb.FullPaths[0], fp = root, fi = cfb.FileIndex[0];
          var crcs = [];
          var sz_cd = 0;
          for (i3 = 1; i3 < cfb.FullPaths.length; ++i3) {
            fp = cfb.FullPaths[i3].slice(root.length);
            fi = cfb.FileIndex[i3];
            if (!fi.size || !fi.content || fp == "Sh33tJ5")
              continue;
            var start = start_cd;
            var namebuf = new_buf(fp.length);
            for (j = 0; j < fp.length; ++j)
              namebuf.write_shift(1, fp.charCodeAt(j) & 127);
            namebuf = namebuf.slice(0, namebuf.l);
            crcs[fcnt] = CRC32.buf(fi.content, 0);
            var outbuf = fi.content;
            if (method == 8)
              outbuf = _deflateRawSync(outbuf);
            o = new_buf(30);
            o.write_shift(4, 67324752);
            o.write_shift(2, 20);
            o.write_shift(2, flags);
            o.write_shift(2, method);
            if (fi.mt)
              write_dos_date(o, fi.mt);
            else
              o.write_shift(4, 0);
            o.write_shift(-4, flags & 8 ? 0 : crcs[fcnt]);
            o.write_shift(4, flags & 8 ? 0 : outbuf.length);
            o.write_shift(4, flags & 8 ? 0 : fi.content.length);
            o.write_shift(2, namebuf.length);
            o.write_shift(2, 0);
            start_cd += o.length;
            out.push(o);
            start_cd += namebuf.length;
            out.push(namebuf);
            start_cd += outbuf.length;
            out.push(outbuf);
            if (flags & 8) {
              o = new_buf(12);
              o.write_shift(-4, crcs[fcnt]);
              o.write_shift(4, outbuf.length);
              o.write_shift(4, fi.content.length);
              start_cd += o.l;
              out.push(o);
            }
            o = new_buf(46);
            o.write_shift(4, 33639248);
            o.write_shift(2, 0);
            o.write_shift(2, 20);
            o.write_shift(2, flags);
            o.write_shift(2, method);
            o.write_shift(4, 0);
            o.write_shift(-4, crcs[fcnt]);
            o.write_shift(4, outbuf.length);
            o.write_shift(4, fi.content.length);
            o.write_shift(2, namebuf.length);
            o.write_shift(2, 0);
            o.write_shift(2, 0);
            o.write_shift(2, 0);
            o.write_shift(2, 0);
            o.write_shift(4, 0);
            o.write_shift(4, start);
            sz_cd += o.l;
            cdirs.push(o);
            sz_cd += namebuf.length;
            cdirs.push(namebuf);
            ++fcnt;
          }
          o = new_buf(22);
          o.write_shift(4, 101010256);
          o.write_shift(2, 0);
          o.write_shift(2, 0);
          o.write_shift(2, fcnt);
          o.write_shift(2, fcnt);
          o.write_shift(4, sz_cd);
          o.write_shift(4, start_cd);
          o.write_shift(2, 0);
          return bconcat([bconcat(out), bconcat(cdirs), o]);
        }
        function cfb_new(opts) {
          var o = {};
          init_cfb(o, opts);
          return o;
        }
        function cfb_add(cfb, name2, content, opts) {
          var unsafe = opts && opts.unsafe;
          if (!unsafe)
            init_cfb(cfb);
          var file = !unsafe && CFB.find(cfb, name2);
          if (!file) {
            var fpath = cfb.FullPaths[0];
            if (name2.slice(0, fpath.length) == fpath)
              fpath = name2;
            else {
              if (fpath.slice(-1) != "/")
                fpath += "/";
              fpath = (fpath + name2).replace("//", "/");
            }
            file = { name: filename(name2), type: 2 };
            cfb.FileIndex.push(file);
            cfb.FullPaths.push(fpath);
            if (!unsafe)
              CFB.utils.cfb_gc(cfb);
          }
          file.content = content;
          file.size = content ? content.length : 0;
          if (opts) {
            if (opts.CLSID)
              file.clsid = opts.CLSID;
            if (opts.mt)
              file.mt = opts.mt;
            if (opts.ct)
              file.ct = opts.ct;
          }
          return file;
        }
        function cfb_del(cfb, name2) {
          init_cfb(cfb);
          var file = CFB.find(cfb, name2);
          if (file) {
            for (var j = 0; j < cfb.FileIndex.length; ++j)
              if (cfb.FileIndex[j] == file) {
                cfb.FileIndex.splice(j, 1);
                cfb.FullPaths.splice(j, 1);
                return true;
              }
          }
          return false;
        }
        function cfb_mov(cfb, old_name, new_name) {
          init_cfb(cfb);
          var file = CFB.find(cfb, old_name);
          if (file) {
            for (var j = 0; j < cfb.FileIndex.length; ++j)
              if (cfb.FileIndex[j] == file) {
                cfb.FileIndex[j].name = filename(new_name);
                cfb.FullPaths[j] = new_name;
                return true;
              }
          }
          return false;
        }
        function cfb_gc(cfb) {
          rebuild_cfb(cfb, true);
        }
        exports2.find = find;
        exports2.read = read;
        exports2.parse = parse;
        exports2.write = write;
        exports2.writeFile = write_file;
        exports2.utils = {
          cfb_new,
          cfb_add,
          cfb_del,
          cfb_mov,
          cfb_gc,
          ReadShift,
          CheckField,
          prep_blob,
          bconcat,
          use_zlib,
          _deflateRaw: _deflate,
          _inflateRaw: _inflate,
          consts
        };
        return exports2;
      }();
      if (typeof require !== "undefined" && typeof module2 !== "undefined" && typeof DO_NOT_EXPORT_CFB === "undefined") {
        module2.exports = CFB;
      }
      var _fs;
      if (typeof require !== "undefined")
        try {
          _fs = require("fs");
        } catch (e) {
        }
      function blobify(data) {
        if (typeof data === "string")
          return s2ab(data);
        if (Array.isArray(data))
          return a2u(data);
        return data;
      }
      function write_dl(fname, payload, enc) {
        if (typeof _fs !== "undefined" && _fs.writeFileSync)
          return enc ? _fs.writeFileSync(fname, payload, enc) : _fs.writeFileSync(fname, payload);
        var data = enc == "utf8" ? utf8write(payload) : payload;
        if (typeof IE_SaveFile !== "undefined")
          return IE_SaveFile(data, fname);
        if (typeof Blob !== "undefined") {
          var blob = new Blob([blobify(data)], { type: "application/octet-stream" });
          if (typeof navigator !== "undefined" && navigator.msSaveBlob)
            return navigator.msSaveBlob(blob, fname);
          if (typeof saveAs !== "undefined")
            return saveAs(blob, fname);
          if (typeof URL !== "undefined" && typeof document !== "undefined" && document.createElement && URL.createObjectURL) {
            var url = URL.createObjectURL(blob);
            if (typeof chrome === "object" && typeof (chrome.downloads || {}).download == "function") {
              if (URL.revokeObjectURL && typeof setTimeout !== "undefined")
                setTimeout(function() {
                  URL.revokeObjectURL(url);
                }, 6e4);
              return chrome.downloads.download({ url, filename: fname, saveAs: true });
            }
            var a = document.createElement("a");
            if (a.download != null) {
              a.download = fname;
              a.href = url;
              document.body.appendChild(a);
              a.click();
              document.body.removeChild(a);
              if (URL.revokeObjectURL && typeof setTimeout !== "undefined")
                setTimeout(function() {
                  URL.revokeObjectURL(url);
                }, 6e4);
              return url;
            }
          }
        }
        if (typeof $ !== "undefined" && typeof File !== "undefined" && typeof Folder !== "undefined")
          try {
            var out = File(fname);
            out.open("w");
            out.encoding = "binary";
            if (Array.isArray(payload))
              payload = a2s(payload);
            out.write(payload);
            out.close();
            return payload;
          } catch (e) {
            if (!e.message || !e.message.match(/onstruct/))
              throw e;
          }
        throw new Error("cannot save file " + fname);
      }
      function read_binary(path) {
        if (typeof _fs !== "undefined")
          return _fs.readFileSync(path);
        if (typeof $ !== "undefined" && typeof File !== "undefined" && typeof Folder !== "undefined")
          try {
            var infile = File(path);
            infile.open("r");
            infile.encoding = "binary";
            var data = infile.read();
            infile.close();
            return data;
          } catch (e) {
            if (!e.message || !e.message.match(/onstruct/))
              throw e;
          }
        throw new Error("Cannot access file " + path);
      }
      function keys(o) {
        var ks = Object.keys(o), o2 = [];
        for (var i2 = 0; i2 < ks.length; ++i2)
          if (Object.prototype.hasOwnProperty.call(o, ks[i2]))
            o2.push(ks[i2]);
        return o2;
      }
      function evert_key(obj, key) {
        var o = [], K = keys(obj);
        for (var i2 = 0; i2 !== K.length; ++i2)
          if (o[obj[K[i2]][key]] == null)
            o[obj[K[i2]][key]] = K[i2];
        return o;
      }
      function evert(obj) {
        var o = [], K = keys(obj);
        for (var i2 = 0; i2 !== K.length; ++i2)
          o[obj[K[i2]]] = K[i2];
        return o;
      }
      function evert_num(obj) {
        var o = [], K = keys(obj);
        for (var i2 = 0; i2 !== K.length; ++i2)
          o[obj[K[i2]]] = parseInt(K[i2], 10);
        return o;
      }
      function evert_arr(obj) {
        var o = [], K = keys(obj);
        for (var i2 = 0; i2 !== K.length; ++i2) {
          if (o[obj[K[i2]]] == null)
            o[obj[K[i2]]] = [];
          o[obj[K[i2]]].push(K[i2]);
        }
        return o;
      }
      var basedate = new Date(1899, 11, 30, 0, 0, 0);
      function datenum(v, date1904) {
        var epoch = v.getTime();
        if (date1904)
          epoch -= 1462 * 24 * 60 * 60 * 1e3;
        var dnthresh2 = basedate.getTime() + (v.getTimezoneOffset() - basedate.getTimezoneOffset()) * 6e4;
        return (epoch - dnthresh2) / (24 * 60 * 60 * 1e3);
      }
      var refdate = new Date();
      var dnthresh = basedate.getTime() + (refdate.getTimezoneOffset() - basedate.getTimezoneOffset()) * 6e4;
      var refoffset = refdate.getTimezoneOffset();
      function numdate(v) {
        var out = new Date();
        out.setTime(v * 24 * 60 * 60 * 1e3 + dnthresh);
        if (out.getTimezoneOffset() !== refoffset) {
          out.setTime(out.getTime() + (out.getTimezoneOffset() - refoffset) * 6e4);
        }
        return out;
      }
      function parse_isodur(s) {
        var sec = 0, mt = 0, time = false;
        var m = s.match(/P([0-9\.]+Y)?([0-9\.]+M)?([0-9\.]+D)?T([0-9\.]+H)?([0-9\.]+M)?([0-9\.]+S)?/);
        if (!m)
          throw new Error("|" + s + "| is not an ISO8601 Duration");
        for (var i2 = 1; i2 != m.length; ++i2) {
          if (!m[i2])
            continue;
          mt = 1;
          if (i2 > 3)
            time = true;
          switch (m[i2].slice(m[i2].length - 1)) {
            case "Y":
              throw new Error("Unsupported ISO Duration Field: " + m[i2].slice(m[i2].length - 1));
            case "D":
              mt *= 24;
            case "H":
              mt *= 60;
            case "M":
              if (!time)
                throw new Error("Unsupported ISO Duration Field: M");
              else
                mt *= 60;
            case "S":
              break;
          }
          sec += mt * parseInt(m[i2], 10);
        }
        return sec;
      }
      var good_pd_date = new Date("2017-02-19T19:06:09.000Z");
      if (isNaN(good_pd_date.getFullYear()))
        good_pd_date = new Date("2/19/17");
      var good_pd = good_pd_date.getFullYear() == 2017;
      function parseDate(str, fixdate) {
        var d = new Date(str);
        if (good_pd) {
          if (fixdate > 0)
            d.setTime(d.getTime() + d.getTimezoneOffset() * 60 * 1e3);
          else if (fixdate < 0)
            d.setTime(d.getTime() - d.getTimezoneOffset() * 60 * 1e3);
          return d;
        }
        if (str instanceof Date)
          return str;
        if (good_pd_date.getFullYear() == 1917 && !isNaN(d.getFullYear())) {
          var s = d.getFullYear();
          if (str.indexOf("" + s) > -1)
            return d;
          d.setFullYear(d.getFullYear() + 100);
          return d;
        }
        var n = str.match(/\d+/g) || ["2017", "2", "19", "0", "0", "0"];
        var out = new Date(+n[0], +n[1] - 1, +n[2], +n[3] || 0, +n[4] || 0, +n[5] || 0);
        if (str.indexOf("Z") > -1)
          out = new Date(out.getTime() - out.getTimezoneOffset() * 60 * 1e3);
        return out;
      }
      function cc2str(arr) {
        var o = "";
        for (var i2 = 0; i2 != arr.length; ++i2)
          o += String.fromCharCode(arr[i2]);
        return o;
      }
      function dup(o) {
        if (typeof JSON != "undefined" && !Array.isArray(o))
          return JSON.parse(JSON.stringify(o));
        if (typeof o != "object" || o == null)
          return o;
        if (o instanceof Date)
          return new Date(o.getTime());
        var out = {};
        for (var k in o)
          if (Object.prototype.hasOwnProperty.call(o, k))
            out[k] = dup(o[k]);
        return out;
      }
      function fill(c, l) {
        var o = "";
        while (o.length < l)
          o += c;
        return o;
      }
      function fuzzynum(s) {
        var v = Number(s);
        if (isFinite(v))
          return v;
        if (!isNaN(v))
          return NaN;
        if (!/\d/.test(s))
          return v;
        var wt = 1;
        var ss = s.replace(/([\d]),([\d])/g, "$1$2").replace(/[$]/g, "").replace(/[%]/g, function() {
          wt *= 100;
          return "";
        });
        if (!isNaN(v = Number(ss)))
          return v / wt;
        ss = ss.replace(/[(](.*)[)]/, function($$, $1) {
          wt = -wt;
          return $1;
        });
        if (!isNaN(v = Number(ss)))
          return v / wt;
        return v;
      }
      function fuzzydate(s) {
        var o = new Date(s), n = new Date(NaN);
        var y = o.getYear(), m = o.getMonth(), d = o.getDate();
        if (isNaN(d))
          return n;
        if (y < 0 || y > 8099)
          return n;
        if ((m > 0 || d > 1) && y != 101)
          return o;
        if (s.toLowerCase().match(/jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec/))
          return o;
        if (s.match(/[^-0-9:,\/\\]/))
          return n;
        return o;
      }
      var safe_split_regex = "abacaba".split(/(:?b)/i).length == 5;
      function split_regex(str, re, def) {
        if (safe_split_regex || typeof re == "string")
          return str.split(re);
        var p = str.split(re), o = [p[0]];
        for (var i2 = 1; i2 < p.length; ++i2) {
          o.push(def);
          o.push(p[i2]);
        }
        return o;
      }
      function getdatastr(data) {
        if (!data)
          return null;
        if (data.data)
          return debom(data.data);
        if (data.asNodeBuffer && has_buf)
          return debom(data.asNodeBuffer().toString("binary"));
        if (data.asBinary)
          return debom(data.asBinary());
        if (data._data && data._data.getContent)
          return debom(cc2str(Array.prototype.slice.call(data._data.getContent(), 0)));
        if (data.content && data.type)
          return debom(cc2str(data.content));
        return null;
      }
      function getdatabin(data) {
        if (!data)
          return null;
        if (data.data)
          return char_codes(data.data);
        if (data.asNodeBuffer && has_buf)
          return data.asNodeBuffer();
        if (data._data && data._data.getContent) {
          var o = data._data.getContent();
          if (typeof o == "string")
            return char_codes(o);
          return Array.prototype.slice.call(o);
        }
        if (data.content && data.type)
          return data.content;
        return null;
      }
      function getdata(data) {
        return data && data.name.slice(-4) === ".bin" ? getdatabin(data) : getdatastr(data);
      }
      function safegetzipfile(zip, file) {
        var k = zip.FullPaths || keys(zip.files);
        var f = file.toLowerCase().replace(/[\/]/g, "\\"), g = f.replace(/\\/g, "/");
        for (var i2 = 0; i2 < k.length; ++i2) {
          var n = k[i2].replace(/^Root Entry[\/]/, "").toLowerCase();
          if (f == n || g == n)
            return zip.files ? zip.files[k[i2]] : zip.FileIndex[i2];
        }
        return null;
      }
      function getzipfile(zip, file) {
        var o = safegetzipfile(zip, file);
        if (o == null)
          throw new Error("Cannot find file " + file + " in zip");
        return o;
      }
      function getzipdata(zip, file, safe) {
        if (!safe)
          return getdata(getzipfile(zip, file));
        if (!file)
          return null;
        try {
          return getzipdata(zip, file);
        } catch (e) {
          return null;
        }
      }
      function getzipstr(zip, file, safe) {
        if (!safe)
          return getdatastr(getzipfile(zip, file));
        if (!file)
          return null;
        try {
          return getzipstr(zip, file);
        } catch (e) {
          return null;
        }
      }
      function zipentries(zip) {
        var k = zip.FullPaths || keys(zip.files), o = [];
        for (var i2 = 0; i2 < k.length; ++i2)
          if (k[i2].slice(-1) != "/")
            o.push(k[i2]);
        return o.sort();
      }
      function zip_add_file(zip, path, content) {
        if (zip.FullPaths)
          CFB.utils.cfb_add(zip, path, content);
        else
          zip.file(path, content);
      }
      var jszip;
      if (typeof JSZipSync !== "undefined")
        jszip = JSZipSync;
      if (typeof exports !== "undefined") {
        if (typeof module2 !== "undefined" && module2.exports) {
          if (typeof jszip === "undefined")
            jszip = require_jszip();
        }
      }
      function zip_new() {
        if (!jszip)
          return CFB.utils.cfb_new();
        return new jszip();
      }
      function zip_read(d, o) {
        var zip;
        if (jszip)
          switch (o.type) {
            case "base64":
              zip = new jszip(d, { base64: true });
              break;
            case "binary":
            case "array":
              zip = new jszip(d, { base64: false });
              break;
            case "buffer":
              zip = new jszip(d);
              break;
            default:
              throw new Error("Unrecognized type " + o.type);
          }
        else
          switch (o.type) {
            case "base64":
              zip = CFB.read(d, { type: "base64" });
              break;
            case "binary":
              zip = CFB.read(d, { type: "binary" });
              break;
            case "buffer":
            case "array":
              zip = CFB.read(d, { type: "buffer" });
              break;
            default:
              throw new Error("Unrecognized type " + o.type);
          }
        return zip;
      }
      function resolve_path(path, base) {
        if (path.charAt(0) == "/")
          return path.slice(1);
        var result = base.split("/");
        if (base.slice(-1) != "/")
          result.pop();
        var target = path.split("/");
        while (target.length !== 0) {
          var step = target.shift();
          if (step === "..")
            result.pop();
          else if (step !== ".")
            result.push(step);
        }
        return result.join("/");
      }
      var XML_HEADER = '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>\r\n';
      var attregexg = /([^"\s?>\/]+)\s*=\s*((?:")([^"]*)(?:")|(?:')([^']*)(?:')|([^'">\s]+))/g;
      var tagregex = /<[\/\?]?[a-zA-Z0-9:_-]+(?:\s+[^"\s?>\/]+\s*=\s*(?:"[^"]*"|'[^']*'|[^'">\s=]+))*\s*[\/\?]?>/mg;
      if (!XML_HEADER.match(tagregex))
        tagregex = /<[^>]*>/g;
      var nsregex = /<\w*:/, nsregex2 = /<(\/?)\w+:/;
      function parsexmltag(tag, skip_root, skip_LC) {
        var z = {};
        var eq = 0, c = 0;
        for (; eq !== tag.length; ++eq)
          if ((c = tag.charCodeAt(eq)) === 32 || c === 10 || c === 13)
            break;
        if (!skip_root)
          z[0] = tag.slice(0, eq);
        if (eq === tag.length)
          return z;
        var m = tag.match(attregexg), j = 0, v = "", i2 = 0, q = "", cc = "", quot = 1;
        if (m)
          for (i2 = 0; i2 != m.length; ++i2) {
            cc = m[i2];
            for (c = 0; c != cc.length; ++c)
              if (cc.charCodeAt(c) === 61)
                break;
            q = cc.slice(0, c).trim();
            while (cc.charCodeAt(c + 1) == 32)
              ++c;
            quot = (eq = cc.charCodeAt(c + 1)) == 34 || eq == 39 ? 1 : 0;
            v = cc.slice(c + 1 + quot, cc.length - quot);
            for (j = 0; j != q.length; ++j)
              if (q.charCodeAt(j) === 58)
                break;
            if (j === q.length) {
              if (q.indexOf("_") > 0)
                q = q.slice(0, q.indexOf("_"));
              z[q] = v;
              if (!skip_LC)
                z[q.toLowerCase()] = v;
            } else {
              var k = (j === 5 && q.slice(0, 5) === "xmlns" ? "xmlns" : "") + q.slice(j + 1);
              if (z[k] && q.slice(j - 3, j) == "ext")
                continue;
              z[k] = v;
              if (!skip_LC)
                z[k.toLowerCase()] = v;
            }
          }
        return z;
      }
      function strip_ns(x) {
        return x.replace(nsregex2, "<$1");
      }
      var encodings = {
        "&quot;": '"',
        "&apos;": "'",
        "&gt;": ">",
        "&lt;": "<",
        "&amp;": "&"
      };
      var rencoding = evert(encodings);
      var unescapexml = function() {
        var encregex = /&(?:quot|apos|gt|lt|amp|#x?([\da-fA-F]+));/ig, coderegex = /_x([\da-fA-F]{4})_/ig;
        return function unescapexml2(text) {
          var s = text + "", i2 = s.indexOf("<![CDATA[");
          if (i2 == -1)
            return s.replace(encregex, function($$, $1) {
              return encodings[$$] || String.fromCharCode(parseInt($1, $$.indexOf("x") > -1 ? 16 : 10)) || $$;
            }).replace(coderegex, function(m, c) {
              return String.fromCharCode(parseInt(c, 16));
            });
          var j = s.indexOf("]]>");
          return unescapexml2(s.slice(0, i2)) + s.slice(i2 + 9, j) + unescapexml2(s.slice(j + 3));
        };
      }();
      var decregex = /[&<>'"]/g, charegex = /[\u0000-\u0008\u000b-\u001f]/g;
      function escapexml(text) {
        var s = text + "";
        return s.replace(decregex, function(y) {
          return rencoding[y];
        }).replace(charegex, function(s2) {
          return "_x" + ("000" + s2.charCodeAt(0).toString(16)).slice(-4) + "_";
        });
      }
      function escapexmltag(text) {
        return escapexml(text).replace(/ /g, "_x0020_");
      }
      var htmlcharegex = /[\u0000-\u001f]/g;
      function escapehtml(text) {
        var s = text + "";
        return s.replace(decregex, function(y) {
          return rencoding[y];
        }).replace(/\n/g, "<br/>").replace(htmlcharegex, function(s2) {
          return "&#x" + ("000" + s2.charCodeAt(0).toString(16)).slice(-4) + ";";
        });
      }
      function escapexlml(text) {
        var s = text + "";
        return s.replace(decregex, function(y) {
          return rencoding[y];
        }).replace(htmlcharegex, function(s2) {
          return "&#x" + s2.charCodeAt(0).toString(16).toUpperCase() + ";";
        });
      }
      var xlml_fixstr = function() {
        var entregex = /&#(\d+);/g;
        function entrepl($$, $1) {
          return String.fromCharCode(parseInt($1, 10));
        }
        return function xlml_fixstr2(str) {
          return str.replace(entregex, entrepl);
        };
      }();
      var xlml_unfixstr = function() {
        return function xlml_unfixstr2(str) {
          return str.replace(/(\r\n|[\r\n])/g, "&#10;");
        };
      }();
      function parsexmlbool(value) {
        switch (value) {
          case 1:
          case true:
          case "1":
          case "true":
          case "TRUE":
            return true;
          default:
            return false;
        }
      }
      var utf8read = function utf8reada(orig) {
        var out = "", i2 = 0, c = 0, d = 0, e = 0, f = 0, w = 0;
        while (i2 < orig.length) {
          c = orig.charCodeAt(i2++);
          if (c < 128) {
            out += String.fromCharCode(c);
            continue;
          }
          d = orig.charCodeAt(i2++);
          if (c > 191 && c < 224) {
            f = (c & 31) << 6;
            f |= d & 63;
            out += String.fromCharCode(f);
            continue;
          }
          e = orig.charCodeAt(i2++);
          if (c < 240) {
            out += String.fromCharCode((c & 15) << 12 | (d & 63) << 6 | e & 63);
            continue;
          }
          f = orig.charCodeAt(i2++);
          w = ((c & 7) << 18 | (d & 63) << 12 | (e & 63) << 6 | f & 63) - 65536;
          out += String.fromCharCode(55296 + (w >>> 10 & 1023));
          out += String.fromCharCode(56320 + (w & 1023));
        }
        return out;
      };
      var utf8write = function(orig) {
        var out = [], i2 = 0, c = 0, d = 0;
        while (i2 < orig.length) {
          c = orig.charCodeAt(i2++);
          switch (true) {
            case c < 128:
              out.push(String.fromCharCode(c));
              break;
            case c < 2048:
              out.push(String.fromCharCode(192 + (c >> 6)));
              out.push(String.fromCharCode(128 + (c & 63)));
              break;
            case (c >= 55296 && c < 57344):
              c -= 55296;
              d = orig.charCodeAt(i2++) - 56320 + (c << 10);
              out.push(String.fromCharCode(240 + (d >> 18 & 7)));
              out.push(String.fromCharCode(144 + (d >> 12 & 63)));
              out.push(String.fromCharCode(128 + (d >> 6 & 63)));
              out.push(String.fromCharCode(128 + (d & 63)));
              break;
            default:
              out.push(String.fromCharCode(224 + (c >> 12)));
              out.push(String.fromCharCode(128 + (c >> 6 & 63)));
              out.push(String.fromCharCode(128 + (c & 63)));
          }
        }
        return out.join("");
      };
      if (has_buf) {
        var utf8readb = function utf8readb2(data) {
          var out = Buffer.alloc(2 * data.length), w, i2, j = 1, k = 0, ww = 0, c;
          for (i2 = 0; i2 < data.length; i2 += j) {
            j = 1;
            if ((c = data.charCodeAt(i2)) < 128)
              w = c;
            else if (c < 224) {
              w = (c & 31) * 64 + (data.charCodeAt(i2 + 1) & 63);
              j = 2;
            } else if (c < 240) {
              w = (c & 15) * 4096 + (data.charCodeAt(i2 + 1) & 63) * 64 + (data.charCodeAt(i2 + 2) & 63);
              j = 3;
            } else {
              j = 4;
              w = (c & 7) * 262144 + (data.charCodeAt(i2 + 1) & 63) * 4096 + (data.charCodeAt(i2 + 2) & 63) * 64 + (data.charCodeAt(i2 + 3) & 63);
              w -= 65536;
              ww = 55296 + (w >>> 10 & 1023);
              w = 56320 + (w & 1023);
            }
            if (ww !== 0) {
              out[k++] = ww & 255;
              out[k++] = ww >>> 8;
              ww = 0;
            }
            out[k++] = w % 256;
            out[k++] = w >>> 8;
          }
          return out.slice(0, k).toString("ucs2");
        };
        var corpus = "foo bar baz\xE2\x98\x83\xF0\x9F\x8D\xA3";
        if (utf8read(corpus) == utf8readb(corpus))
          utf8read = utf8readb;
        var utf8readc = function utf8readc2(data) {
          return Buffer_from(data, "binary").toString("utf8");
        };
        if (utf8read(corpus) == utf8readc(corpus))
          utf8read = utf8readc;
        utf8write = function(data) {
          return Buffer_from(data, "utf8").toString("binary");
        };
      }
      var matchtag = function() {
        var mtcache = {};
        return function matchtag2(f, g) {
          var t = f + "|" + (g || "");
          if (mtcache[t])
            return mtcache[t];
          return mtcache[t] = new RegExp("<(?:\\w+:)?" + f + '(?: xml:space="preserve")?(?:[^>]*)>([\\s\\S]*?)</(?:\\w+:)?' + f + ">", g || "");
        };
      }();
      var htmldecode = function() {
        var entities = [
          ["nbsp", " "],
          ["middot", "\xB7"],
          ["quot", '"'],
          ["apos", "'"],
          ["gt", ">"],
          ["lt", "<"],
          ["amp", "&"]
        ].map(function(x) {
          return [new RegExp("&" + x[0] + ";", "ig"), x[1]];
        });
        return function htmldecode2(str) {
          var o = str.replace(/^[\t\n\r ]+/, "").replace(/[\t\n\r ]+$/, "").replace(/>\s+/g, ">").replace(/\s+</g, "<").replace(/[\t\n\r ]+/g, " ").replace(/<\s*[bB][rR]\s*\/?>/g, "\n").replace(/<[^>]*>/g, "");
          for (var i2 = 0; i2 < entities.length; ++i2)
            o = o.replace(entities[i2][0], entities[i2][1]);
          return o;
        };
      }();
      var vtregex = function() {
        var vt_cache = {};
        return function vt_regex(bt) {
          if (vt_cache[bt] !== void 0)
            return vt_cache[bt];
          return vt_cache[bt] = new RegExp("<(?:vt:)?" + bt + ">([\\s\\S]*?)</(?:vt:)?" + bt + ">", "g");
        };
      }();
      var vtvregex = /<\/?(?:vt:)?variant>/g, vtmregex = /<(?:vt:)([^>]*)>([\s\S]*)</;
      function parseVector(data, opts) {
        var h = parsexmltag(data);
        var matches = data.match(vtregex(h.baseType)) || [];
        var res = [];
        if (matches.length != h.size) {
          if (opts.WTF)
            throw new Error("unexpected vector length " + matches.length + " != " + h.size);
          return res;
        }
        matches.forEach(function(x) {
          var v = x.replace(vtvregex, "").match(vtmregex);
          if (v)
            res.push({ v: utf8read(v[2]), t: v[1] });
        });
        return res;
      }
      var wtregex = /(^\s|\s$|\n)/;
      function writetag(f, g) {
        return "<" + f + (g.match(wtregex) ? ' xml:space="preserve"' : "") + ">" + g + "</" + f + ">";
      }
      function wxt_helper(h) {
        return keys(h).map(function(k) {
          return " " + k + '="' + h[k] + '"';
        }).join("");
      }
      function writextag(f, g, h) {
        return "<" + f + (h != null ? wxt_helper(h) : "") + (g != null ? (g.match(wtregex) ? ' xml:space="preserve"' : "") + ">" + g + "</" + f : "/") + ">";
      }
      function write_w3cdtf(d, t) {
        try {
          return d.toISOString().replace(/\.\d*/, "");
        } catch (e) {
          if (t)
            throw e;
        }
        return "";
      }
      function write_vt(s, xlsx2) {
        switch (typeof s) {
          case "string":
            var o = writextag("vt:lpwstr", escapexml(s));
            if (xlsx2)
              o = o.replace(/&quot;/g, "_x0022_");
            return o;
          case "number":
            return writextag((s | 0) == s ? "vt:i4" : "vt:r8", escapexml(String(s)));
          case "boolean":
            return writextag("vt:bool", s ? "true" : "false");
        }
        if (s instanceof Date)
          return writextag("vt:filetime", write_w3cdtf(s));
        throw new Error("Unable to serialize " + s);
      }
      var XMLNS = {
        "dc": "http://purl.org/dc/elements/1.1/",
        "dcterms": "http://purl.org/dc/terms/",
        "dcmitype": "http://purl.org/dc/dcmitype/",
        "mx": "http://schemas.microsoft.com/office/mac/excel/2008/main",
        "r": "http://schemas.openxmlformats.org/officeDocument/2006/relationships",
        "sjs": "http://schemas.openxmlformats.org/package/2006/sheetjs/core-properties",
        "vt": "http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes",
        "xsi": "http://www.w3.org/2001/XMLSchema-instance",
        "xsd": "http://www.w3.org/2001/XMLSchema"
      };
      XMLNS.main = [
        "http://schemas.openxmlformats.org/spreadsheetml/2006/main",
        "http://purl.oclc.org/ooxml/spreadsheetml/main",
        "http://schemas.microsoft.com/office/excel/2006/main",
        "http://schemas.microsoft.com/office/excel/2006/2"
      ];
      var XLMLNS = {
        "o": "urn:schemas-microsoft-com:office:office",
        "x": "urn:schemas-microsoft-com:office:excel",
        "ss": "urn:schemas-microsoft-com:office:spreadsheet",
        "dt": "uuid:C2F41010-65B3-11d1-A29F-00AA00C14882",
        "mv": "http://macVmlSchemaUri",
        "v": "urn:schemas-microsoft-com:vml",
        "html": "http://www.w3.org/TR/REC-html40"
      };
      function read_double_le(b, idx) {
        var s = 1 - 2 * (b[idx + 7] >>> 7);
        var e = ((b[idx + 7] & 127) << 4) + (b[idx + 6] >>> 4 & 15);
        var m = b[idx + 6] & 15;
        for (var i2 = 5; i2 >= 0; --i2)
          m = m * 256 + b[idx + i2];
        if (e == 2047)
          return m == 0 ? s * Infinity : NaN;
        if (e == 0)
          e = -1022;
        else {
          e -= 1023;
          m += Math.pow(2, 52);
        }
        return s * Math.pow(2, e - 52) * m;
      }
      function write_double_le(b, v, idx) {
        var bs = (v < 0 || 1 / v == -Infinity ? 1 : 0) << 7, e = 0, m = 0;
        var av = bs ? -v : v;
        if (!isFinite(av)) {
          e = 2047;
          m = isNaN(v) ? 26985 : 0;
        } else if (av == 0)
          e = m = 0;
        else {
          e = Math.floor(Math.log(av) / Math.LN2);
          m = av * Math.pow(2, 52 - e);
          if (e <= -1023 && (!isFinite(m) || m < Math.pow(2, 52))) {
            e = -1022;
          } else {
            m -= Math.pow(2, 52);
            e += 1023;
          }
        }
        for (var i2 = 0; i2 <= 5; ++i2, m /= 256)
          b[idx + i2] = m & 255;
        b[idx + 6] = (e & 15) << 4 | m & 15;
        b[idx + 7] = e >> 4 | bs;
      }
      var __toBuffer = function(bufs) {
        var x = [], w = 10240;
        for (var i2 = 0; i2 < bufs[0].length; ++i2)
          if (bufs[0][i2])
            for (var j = 0, L = bufs[0][i2].length; j < L; j += w)
              x.push.apply(x, bufs[0][i2].slice(j, j + w));
        return x;
      };
      var ___toBuffer = __toBuffer;
      var __utf16le = function(b, s, e) {
        var ss = [];
        for (var i2 = s; i2 < e; i2 += 2)
          ss.push(String.fromCharCode(__readUInt16LE(b, i2)));
        return ss.join("").replace(chr0, "");
      };
      var ___utf16le = __utf16le;
      var __hexlify = function(b, s, l) {
        var ss = [];
        for (var i2 = s; i2 < s + l; ++i2)
          ss.push(("0" + b[i2].toString(16)).slice(-2));
        return ss.join("");
      };
      var ___hexlify = __hexlify;
      var __utf8 = function(b, s, e) {
        var ss = [];
        for (var i2 = s; i2 < e; i2++)
          ss.push(String.fromCharCode(__readUInt8(b, i2)));
        return ss.join("");
      };
      var ___utf8 = __utf8;
      var __lpstr = function(b, i2) {
        var len = __readUInt32LE(b, i2);
        return len > 0 ? __utf8(b, i2 + 4, i2 + 4 + len - 1) : "";
      };
      var ___lpstr = __lpstr;
      var __cpstr = function(b, i2) {
        var len = __readUInt32LE(b, i2);
        return len > 0 ? __utf8(b, i2 + 4, i2 + 4 + len - 1) : "";
      };
      var ___cpstr = __cpstr;
      var __lpwstr = function(b, i2) {
        var len = 2 * __readUInt32LE(b, i2);
        return len > 0 ? __utf8(b, i2 + 4, i2 + 4 + len - 1) : "";
      };
      var ___lpwstr = __lpwstr;
      var __lpp4, ___lpp4;
      __lpp4 = ___lpp4 = function lpp4_(b, i2) {
        var len = __readUInt32LE(b, i2);
        return len > 0 ? __utf16le(b, i2 + 4, i2 + 4 + len) : "";
      };
      var __8lpp4 = function(b, i2) {
        var len = __readUInt32LE(b, i2);
        return len > 0 ? __utf8(b, i2 + 4, i2 + 4 + len) : "";
      };
      var ___8lpp4 = __8lpp4;
      var __double, ___double;
      __double = ___double = function(b, idx) {
        return read_double_le(b, idx);
      };
      var is_buf = function is_buf_a(a) {
        return Array.isArray(a);
      };
      if (has_buf) {
        __utf16le = function(b, s, e) {
          if (!Buffer.isBuffer(b))
            return ___utf16le(b, s, e);
          return b.toString("utf16le", s, e).replace(chr0, "");
        };
        __hexlify = function(b, s, l) {
          return Buffer.isBuffer(b) ? b.toString("hex", s, s + l) : ___hexlify(b, s, l);
        };
        __lpstr = function lpstr_b(b, i2) {
          if (!Buffer.isBuffer(b))
            return ___lpstr(b, i2);
          var len = b.readUInt32LE(i2);
          return len > 0 ? b.toString("utf8", i2 + 4, i2 + 4 + len - 1) : "";
        };
        __cpstr = function cpstr_b(b, i2) {
          if (!Buffer.isBuffer(b))
            return ___cpstr(b, i2);
          var len = b.readUInt32LE(i2);
          return len > 0 ? b.toString("utf8", i2 + 4, i2 + 4 + len - 1) : "";
        };
        __lpwstr = function lpwstr_b(b, i2) {
          if (!Buffer.isBuffer(b))
            return ___lpwstr(b, i2);
          var len = 2 * b.readUInt32LE(i2);
          return b.toString("utf16le", i2 + 4, i2 + 4 + len - 1);
        };
        __lpp4 = function lpp4_b(b, i2) {
          if (!Buffer.isBuffer(b))
            return ___lpp4(b, i2);
          var len = b.readUInt32LE(i2);
          return b.toString("utf16le", i2 + 4, i2 + 4 + len);
        };
        __8lpp4 = function lpp4_8b(b, i2) {
          if (!Buffer.isBuffer(b))
            return ___8lpp4(b, i2);
          var len = b.readUInt32LE(i2);
          return b.toString("utf8", i2 + 4, i2 + 4 + len);
        };
        __utf8 = function utf8_b(b, s, e) {
          return Buffer.isBuffer(b) ? b.toString("utf8", s, e) : ___utf8(b, s, e);
        };
        __toBuffer = function(bufs) {
          return bufs[0].length > 0 && Buffer.isBuffer(bufs[0][0]) ? Buffer.concat(bufs[0]) : ___toBuffer(bufs);
        };
        bconcat = function(bufs) {
          return Buffer.isBuffer(bufs[0]) ? Buffer.concat(bufs) : [].concat.apply([], bufs);
        };
        __double = function double_(b, i2) {
          if (Buffer.isBuffer(b))
            return b.readDoubleLE(i2);
          return ___double(b, i2);
        };
        is_buf = function is_buf_b(a) {
          return Buffer.isBuffer(a) || Array.isArray(a);
        };
      }
      if (typeof cptable !== "undefined") {
        __utf16le = function(b, s, e) {
          return cptable.utils.decode(1200, b.slice(s, e)).replace(chr0, "");
        };
        __utf8 = function(b, s, e) {
          return cptable.utils.decode(65001, b.slice(s, e));
        };
        __lpstr = function(b, i2) {
          var len = __readUInt32LE(b, i2);
          return len > 0 ? cptable.utils.decode(current_ansi, b.slice(i2 + 4, i2 + 4 + len - 1)) : "";
        };
        __cpstr = function(b, i2) {
          var len = __readUInt32LE(b, i2);
          return len > 0 ? cptable.utils.decode(current_codepage, b.slice(i2 + 4, i2 + 4 + len - 1)) : "";
        };
        __lpwstr = function(b, i2) {
          var len = 2 * __readUInt32LE(b, i2);
          return len > 0 ? cptable.utils.decode(1200, b.slice(i2 + 4, i2 + 4 + len - 1)) : "";
        };
        __lpp4 = function(b, i2) {
          var len = __readUInt32LE(b, i2);
          return len > 0 ? cptable.utils.decode(1200, b.slice(i2 + 4, i2 + 4 + len)) : "";
        };
        __8lpp4 = function(b, i2) {
          var len = __readUInt32LE(b, i2);
          return len > 0 ? cptable.utils.decode(65001, b.slice(i2 + 4, i2 + 4 + len)) : "";
        };
      }
      var __readUInt8 = function(b, idx) {
        return b[idx];
      };
      var __readUInt16LE = function(b, idx) {
        return b[idx + 1] * (1 << 8) + b[idx];
      };
      var __readInt16LE = function(b, idx) {
        var u = b[idx + 1] * (1 << 8) + b[idx];
        return u < 32768 ? u : (65535 - u + 1) * -1;
      };
      var __readUInt32LE = function(b, idx) {
        return b[idx + 3] * (1 << 24) + (b[idx + 2] << 16) + (b[idx + 1] << 8) + b[idx];
      };
      var __readInt32LE = function(b, idx) {
        return b[idx + 3] << 24 | b[idx + 2] << 16 | b[idx + 1] << 8 | b[idx];
      };
      var __readInt32BE = function(b, idx) {
        return b[idx] << 24 | b[idx + 1] << 16 | b[idx + 2] << 8 | b[idx + 3];
      };
      function ReadShift(size, t) {
        var o = "", oI, oR, oo = [], w, vv, i2, loc;
        switch (t) {
          case "dbcs":
            loc = this.l;
            if (has_buf && Buffer.isBuffer(this))
              o = this.slice(this.l, this.l + 2 * size).toString("utf16le");
            else
              for (i2 = 0; i2 < size; ++i2) {
                o += String.fromCharCode(__readUInt16LE(this, loc));
                loc += 2;
              }
            size *= 2;
            break;
          case "utf8":
            o = __utf8(this, this.l, this.l + size);
            break;
          case "utf16le":
            size *= 2;
            o = __utf16le(this, this.l, this.l + size);
            break;
          case "wstr":
            if (typeof cptable !== "undefined")
              o = cptable.utils.decode(current_codepage, this.slice(this.l, this.l + 2 * size));
            else
              return ReadShift.call(this, size, "dbcs");
            size = 2 * size;
            break;
          case "lpstr-ansi":
            o = __lpstr(this, this.l);
            size = 4 + __readUInt32LE(this, this.l);
            break;
          case "lpstr-cp":
            o = __cpstr(this, this.l);
            size = 4 + __readUInt32LE(this, this.l);
            break;
          case "lpwstr":
            o = __lpwstr(this, this.l);
            size = 4 + 2 * __readUInt32LE(this, this.l);
            break;
          case "lpp4":
            size = 4 + __readUInt32LE(this, this.l);
            o = __lpp4(this, this.l);
            if (size & 2)
              size += 2;
            break;
          case "8lpp4":
            size = 4 + __readUInt32LE(this, this.l);
            o = __8lpp4(this, this.l);
            if (size & 3)
              size += 4 - (size & 3);
            break;
          case "cstr":
            size = 0;
            o = "";
            while ((w = __readUInt8(this, this.l + size++)) !== 0)
              oo.push(_getchar(w));
            o = oo.join("");
            break;
          case "_wstr":
            size = 0;
            o = "";
            while ((w = __readUInt16LE(this, this.l + size)) !== 0) {
              oo.push(_getchar(w));
              size += 2;
            }
            size += 2;
            o = oo.join("");
            break;
          case "dbcs-cont":
            o = "";
            loc = this.l;
            for (i2 = 0; i2 < size; ++i2) {
              if (this.lens && this.lens.indexOf(loc) !== -1) {
                w = __readUInt8(this, loc);
                this.l = loc + 1;
                vv = ReadShift.call(this, size - i2, w ? "dbcs-cont" : "sbcs-cont");
                return oo.join("") + vv;
              }
              oo.push(_getchar(__readUInt16LE(this, loc)));
              loc += 2;
            }
            o = oo.join("");
            size *= 2;
            break;
          case "cpstr":
            if (typeof cptable !== "undefined") {
              o = cptable.utils.decode(current_codepage, this.slice(this.l, this.l + size));
              break;
            }
          case "sbcs-cont":
            o = "";
            loc = this.l;
            for (i2 = 0; i2 != size; ++i2) {
              if (this.lens && this.lens.indexOf(loc) !== -1) {
                w = __readUInt8(this, loc);
                this.l = loc + 1;
                vv = ReadShift.call(this, size - i2, w ? "dbcs-cont" : "sbcs-cont");
                return oo.join("") + vv;
              }
              oo.push(_getchar(__readUInt8(this, loc)));
              loc += 1;
            }
            o = oo.join("");
            break;
          default:
            switch (size) {
              case 1:
                oI = __readUInt8(this, this.l);
                this.l++;
                return oI;
              case 2:
                oI = (t === "i" ? __readInt16LE : __readUInt16LE)(this, this.l);
                this.l += 2;
                return oI;
              case 4:
              case -4:
                if (t === "i" || (this[this.l + 3] & 128) === 0) {
                  oI = (size > 0 ? __readInt32LE : __readInt32BE)(this, this.l);
                  this.l += 4;
                  return oI;
                } else {
                  oR = __readUInt32LE(this, this.l);
                  this.l += 4;
                }
                return oR;
              case 8:
              case -8:
                if (t === "f") {
                  if (size == 8)
                    oR = __double(this, this.l);
                  else
                    oR = __double([this[this.l + 7], this[this.l + 6], this[this.l + 5], this[this.l + 4], this[this.l + 3], this[this.l + 2], this[this.l + 1], this[this.l + 0]], 0);
                  this.l += 8;
                  return oR;
                } else
                  size = 8;
              case 16:
                o = __hexlify(this, this.l, size);
                break;
            }
        }
        this.l += size;
        return o;
      }
      var __writeUInt32LE = function(b, val, idx) {
        b[idx] = val & 255;
        b[idx + 1] = val >>> 8 & 255;
        b[idx + 2] = val >>> 16 & 255;
        b[idx + 3] = val >>> 24 & 255;
      };
      var __writeInt32LE = function(b, val, idx) {
        b[idx] = val & 255;
        b[idx + 1] = val >> 8 & 255;
        b[idx + 2] = val >> 16 & 255;
        b[idx + 3] = val >> 24 & 255;
      };
      var __writeUInt16LE = function(b, val, idx) {
        b[idx] = val & 255;
        b[idx + 1] = val >>> 8 & 255;
      };
      function WriteShift(t, val, f) {
        var size = 0, i2 = 0;
        if (f === "dbcs") {
          for (i2 = 0; i2 != val.length; ++i2)
            __writeUInt16LE(this, val.charCodeAt(i2), this.l + 2 * i2);
          size = 2 * val.length;
        } else if (f === "sbcs") {
          if (typeof cptable !== "undefined" && current_ansi == 874) {
            for (i2 = 0; i2 != val.length; ++i2) {
              var cppayload = cptable.utils.encode(current_ansi, val.charAt(i2));
              this[this.l + i2] = cppayload[0];
            }
          } else {
            val = val.replace(/[^\x00-\x7F]/g, "_");
            for (i2 = 0; i2 != val.length; ++i2)
              this[this.l + i2] = val.charCodeAt(i2) & 255;
          }
          size = val.length;
        } else if (f === "hex") {
          for (; i2 < t; ++i2) {
            this[this.l++] = parseInt(val.slice(2 * i2, 2 * i2 + 2), 16) || 0;
          }
          return this;
        } else if (f === "utf16le") {
          var end = Math.min(this.l + t, this.length);
          for (i2 = 0; i2 < Math.min(val.length, t); ++i2) {
            var cc = val.charCodeAt(i2);
            this[this.l++] = cc & 255;
            this[this.l++] = cc >> 8;
          }
          while (this.l < end)
            this[this.l++] = 0;
          return this;
        } else
          switch (t) {
            case 1:
              size = 1;
              this[this.l] = val & 255;
              break;
            case 2:
              size = 2;
              this[this.l] = val & 255;
              val >>>= 8;
              this[this.l + 1] = val & 255;
              break;
            case 3:
              size = 3;
              this[this.l] = val & 255;
              val >>>= 8;
              this[this.l + 1] = val & 255;
              val >>>= 8;
              this[this.l + 2] = val & 255;
              break;
            case 4:
              size = 4;
              __writeUInt32LE(this, val, this.l);
              break;
            case 8:
              size = 8;
              if (f === "f") {
                write_double_le(this, val, this.l);
                break;
              }
            case 16:
              break;
            case -4:
              size = 4;
              __writeInt32LE(this, val, this.l);
              break;
          }
        this.l += size;
        return this;
      }
      function CheckField(hexstr, fld) {
        var m = __hexlify(this, this.l, hexstr.length >> 1);
        if (m !== hexstr)
          throw new Error(fld + "Expected " + hexstr + " saw " + m);
        this.l += hexstr.length >> 1;
      }
      function prep_blob(blob, pos) {
        blob.l = pos;
        blob.read_shift = ReadShift;
        blob.chk = CheckField;
        blob.write_shift = WriteShift;
      }
      function parsenoop(blob, length) {
        blob.l += length;
      }
      function new_buf(sz) {
        var o = new_raw_buf(sz);
        prep_blob(o, 0);
        return o;
      }
      function recordhopper(data, cb, opts) {
        if (!data)
          return;
        var tmpbyte, cntbyte, length;
        prep_blob(data, data.l || 0);
        var L = data.length, RT = 0, tgt = 0;
        while (data.l < L) {
          RT = data.read_shift(1);
          if (RT & 128)
            RT = (RT & 127) + ((data.read_shift(1) & 127) << 7);
          var R = XLSBRecordEnum[RT] || XLSBRecordEnum[65535];
          tmpbyte = data.read_shift(1);
          length = tmpbyte & 127;
          for (cntbyte = 1; cntbyte < 4 && tmpbyte & 128; ++cntbyte)
            length += ((tmpbyte = data.read_shift(1)) & 127) << 7 * cntbyte;
          tgt = data.l + length;
          var d = (R.f || parsenoop)(data, length, opts);
          data.l = tgt;
          if (cb(d, R.n, RT))
            return;
        }
      }
      function buf_array() {
        var bufs = [], blksz = has_buf ? 256 : 2048;
        var newblk = function ba_newblk(sz) {
          var o = new_buf(sz);
          prep_blob(o, 0);
          return o;
        };
        var curbuf = newblk(blksz);
        var endbuf = function ba_endbuf() {
          if (!curbuf)
            return;
          if (curbuf.length > curbuf.l) {
            curbuf = curbuf.slice(0, curbuf.l);
            curbuf.l = curbuf.length;
          }
          if (curbuf.length > 0)
            bufs.push(curbuf);
          curbuf = null;
        };
        var next = function ba_next(sz) {
          if (curbuf && sz < curbuf.length - curbuf.l)
            return curbuf;
          endbuf();
          return curbuf = newblk(Math.max(sz + 1, blksz));
        };
        var end = function ba_end() {
          endbuf();
          return __toBuffer([bufs]);
        };
        var push = function ba_push(buf) {
          endbuf();
          curbuf = buf;
          if (curbuf.l == null)
            curbuf.l = curbuf.length;
          next(blksz);
        };
        return { next, push, end, _bufs: bufs };
      }
      function write_record(ba, type, payload, length) {
        var t = +XLSBRE[type], l;
        if (isNaN(t))
          return;
        if (!length)
          length = XLSBRecordEnum[t].p || (payload || []).length || 0;
        l = 1 + (t >= 128 ? 1 : 0) + 1;
        if (length >= 128)
          ++l;
        if (length >= 16384)
          ++l;
        if (length >= 2097152)
          ++l;
        var o = ba.next(l);
        if (t <= 127)
          o.write_shift(1, t);
        else {
          o.write_shift(1, (t & 127) + 128);
          o.write_shift(1, t >> 7);
        }
        for (var i2 = 0; i2 != 4; ++i2) {
          if (length >= 128) {
            o.write_shift(1, (length & 127) + 128);
            length >>= 7;
          } else {
            o.write_shift(1, length);
            break;
          }
        }
        if (length > 0 && is_buf(payload))
          ba.push(payload);
      }
      function shift_cell_xls(cell, tgt, opts) {
        var out = dup(cell);
        if (tgt.s) {
          if (out.cRel)
            out.c += tgt.s.c;
          if (out.rRel)
            out.r += tgt.s.r;
        } else {
          if (out.cRel)
            out.c += tgt.c;
          if (out.rRel)
            out.r += tgt.r;
        }
        if (!opts || opts.biff < 12) {
          while (out.c >= 256)
            out.c -= 256;
          while (out.r >= 65536)
            out.r -= 65536;
        }
        return out;
      }
      function shift_range_xls(cell, range, opts) {
        var out = dup(cell);
        out.s = shift_cell_xls(out.s, range.s, opts);
        out.e = shift_cell_xls(out.e, range.s, opts);
        return out;
      }
      function encode_cell_xls(c, biff) {
        if (c.cRel && c.c < 0) {
          c = dup(c);
          while (c.c < 0)
            c.c += biff > 8 ? 16384 : 256;
        }
        if (c.rRel && c.r < 0) {
          c = dup(c);
          while (c.r < 0)
            c.r += biff > 8 ? 1048576 : biff > 5 ? 65536 : 16384;
        }
        var s = encode_cell(c);
        if (!c.cRel && c.cRel != null)
          s = fix_col(s);
        if (!c.rRel && c.rRel != null)
          s = fix_row(s);
        return s;
      }
      function encode_range_xls(r, opts) {
        if (r.s.r == 0 && !r.s.rRel) {
          if (r.e.r == (opts.biff >= 12 ? 1048575 : opts.biff >= 8 ? 65536 : 16384) && !r.e.rRel) {
            return (r.s.cRel ? "" : "$") + encode_col(r.s.c) + ":" + (r.e.cRel ? "" : "$") + encode_col(r.e.c);
          }
        }
        if (r.s.c == 0 && !r.s.cRel) {
          if (r.e.c == (opts.biff >= 12 ? 16383 : 255) && !r.e.cRel) {
            return (r.s.rRel ? "" : "$") + encode_row(r.s.r) + ":" + (r.e.rRel ? "" : "$") + encode_row(r.e.r);
          }
        }
        return encode_cell_xls(r.s, opts.biff) + ":" + encode_cell_xls(r.e, opts.biff);
      }
      var OFFCRYPTO = {};
      var make_offcrypto = function(O, _crypto) {
        var crypto2;
        if (typeof _crypto !== "undefined")
          crypto2 = _crypto;
        else if (typeof require !== "undefined") {
          try {
            crypto2 = require("crypto");
          } catch (e) {
            crypto2 = null;
          }
        }
        O.rc4 = function(key, data) {
          var S = new Array(256);
          var c = 0, i2 = 0, j = 0, t = 0;
          for (i2 = 0; i2 != 256; ++i2)
            S[i2] = i2;
          for (i2 = 0; i2 != 256; ++i2) {
            j = j + S[i2] + key[i2 % key.length].charCodeAt(0) & 255;
            t = S[i2];
            S[i2] = S[j];
            S[j] = t;
          }
          i2 = j = 0;
          var out = new_raw_buf(data.length);
          for (c = 0; c != data.length; ++c) {
            i2 = i2 + 1 & 255;
            j = (j + S[i2]) % 256;
            t = S[i2];
            S[i2] = S[j];
            S[j] = t;
            out[c] = data[c] ^ S[S[i2] + S[j] & 255];
          }
          return out;
        };
        O.md5 = function(hex) {
          if (!crypto2)
            throw new Error("Unsupported crypto");
          return crypto2.createHash("md5").update(hex).digest("hex");
        };
      };
      make_offcrypto(OFFCRYPTO, typeof crypto !== "undefined" ? crypto : void 0);
      function decode_row(rowstr) {
        return parseInt(unfix_row(rowstr), 10) - 1;
      }
      function encode_row(row) {
        return "" + (row + 1);
      }
      function fix_row(cstr) {
        return cstr.replace(/([A-Z]|^)(\d+)$/, "$1$$$2");
      }
      function unfix_row(cstr) {
        return cstr.replace(/\$(\d+)$/, "$1");
      }
      function decode_col(colstr) {
        var c = unfix_col(colstr), d = 0, i2 = 0;
        for (; i2 !== c.length; ++i2)
          d = 26 * d + c.charCodeAt(i2) - 64;
        return d - 1;
      }
      function encode_col(col) {
        if (col < 0)
          throw new Error("invalid column " + col);
        var s = "";
        for (++col; col; col = Math.floor((col - 1) / 26))
          s = String.fromCharCode((col - 1) % 26 + 65) + s;
        return s;
      }
      function fix_col(cstr) {
        return cstr.replace(/^([A-Z])/, "$$$1");
      }
      function unfix_col(cstr) {
        return cstr.replace(/^\$([A-Z])/, "$1");
      }
      function split_cell(cstr) {
        return cstr.replace(/(\$?[A-Z]*)(\$?\d*)/, "$1,$2").split(",");
      }
      function decode_cell(cstr) {
        var R = 0, C = 0;
        for (var i2 = 0; i2 < cstr.length; ++i2) {
          var cc = cstr.charCodeAt(i2);
          if (cc >= 48 && cc <= 57)
            R = 10 * R + (cc - 48);
          else if (cc >= 65 && cc <= 90)
            C = 26 * C + (cc - 64);
        }
        return { c: C - 1, r: R - 1 };
      }
      function encode_cell(cell) {
        var col = cell.c + 1;
        var s = "";
        for (; col; col = (col - 1) / 26 | 0)
          s = String.fromCharCode((col - 1) % 26 + 65) + s;
        return s + (cell.r + 1);
      }
      function decode_range(range) {
        var idx = range.indexOf(":");
        if (idx == -1)
          return { s: decode_cell(range), e: decode_cell(range) };
        return { s: decode_cell(range.slice(0, idx)), e: decode_cell(range.slice(idx + 1)) };
      }
      function encode_range(cs, ce) {
        if (typeof ce === "undefined" || typeof ce === "number") {
          return encode_range(cs.s, cs.e);
        }
        if (typeof cs !== "string")
          cs = encode_cell(cs);
        if (typeof ce !== "string")
          ce = encode_cell(ce);
        return cs == ce ? cs : cs + ":" + ce;
      }
      function safe_decode_range(range) {
        var o = { s: { c: 0, r: 0 }, e: { c: 0, r: 0 } };
        var idx = 0, i2 = 0, cc = 0;
        var len = range.length;
        for (idx = 0; i2 < len; ++i2) {
          if ((cc = range.charCodeAt(i2) - 64) < 1 || cc > 26)
            break;
          idx = 26 * idx + cc;
        }
        o.s.c = --idx;
        for (idx = 0; i2 < len; ++i2) {
          if ((cc = range.charCodeAt(i2) - 48) < 0 || cc > 9)
            break;
          idx = 10 * idx + cc;
        }
        o.s.r = --idx;
        if (i2 === len || range.charCodeAt(++i2) === 58) {
          o.e.c = o.s.c;
          o.e.r = o.s.r;
          return o;
        }
        for (idx = 0; i2 != len; ++i2) {
          if ((cc = range.charCodeAt(i2) - 64) < 1 || cc > 26)
            break;
          idx = 26 * idx + cc;
        }
        o.e.c = --idx;
        for (idx = 0; i2 != len; ++i2) {
          if ((cc = range.charCodeAt(i2) - 48) < 0 || cc > 9)
            break;
          idx = 10 * idx + cc;
        }
        o.e.r = --idx;
        return o;
      }
      function safe_format_cell(cell, v) {
        var q = cell.t == "d" && v instanceof Date;
        if (cell.z != null)
          try {
            return cell.w = SSF.format(cell.z, q ? datenum(v) : v);
          } catch (e) {
          }
        try {
          return cell.w = SSF.format((cell.XF || {}).numFmtId || (q ? 14 : 0), q ? datenum(v) : v);
        } catch (e) {
          return "" + v;
        }
      }
      function format_cell(cell, v, o) {
        if (cell == null || cell.t == null || cell.t == "z")
          return "";
        if (cell.w !== void 0)
          return cell.w;
        if (cell.t == "d" && !cell.z && o && o.dateNF)
          cell.z = o.dateNF;
        if (cell.t == "e")
          return BErr[cell.v] || cell.v;
        if (v == void 0)
          return safe_format_cell(cell, cell.v);
        return safe_format_cell(cell, v);
      }
      function sheet_to_workbook(sheet, opts) {
        var n = opts && opts.sheet ? opts.sheet : "Sheet1";
        var sheets = {};
        sheets[n] = sheet;
        return { SheetNames: [n], Sheets: sheets };
      }
      function sheet_add_aoa(_ws, data, opts) {
        var o = opts || {};
        var dense = _ws ? Array.isArray(_ws) : o.dense;
        if (DENSE != null && dense == null)
          dense = DENSE;
        var ws = _ws || (dense ? [] : {});
        var _R = 0, _C = 0;
        if (ws && o.origin != null) {
          if (typeof o.origin == "number")
            _R = o.origin;
          else {
            var _origin = typeof o.origin == "string" ? decode_cell(o.origin) : o.origin;
            _R = _origin.r;
            _C = _origin.c;
          }
          if (!ws["!ref"])
            ws["!ref"] = "A1:A1";
        }
        var range = { s: { c: 1e7, r: 1e7 }, e: { c: 0, r: 0 } };
        if (ws["!ref"]) {
          var _range = safe_decode_range(ws["!ref"]);
          range.s.c = _range.s.c;
          range.s.r = _range.s.r;
          range.e.c = Math.max(range.e.c, _range.e.c);
          range.e.r = Math.max(range.e.r, _range.e.r);
          if (_R == -1)
            range.e.r = _R = _range.e.r + 1;
        }
        for (var R = 0; R != data.length; ++R) {
          if (!data[R])
            continue;
          if (!Array.isArray(data[R]))
            throw new Error("aoa_to_sheet expects an array of arrays");
          for (var C = 0; C != data[R].length; ++C) {
            if (typeof data[R][C] === "undefined")
              continue;
            var cell = { v: data[R][C] };
            var __R = _R + R, __C = _C + C;
            if (range.s.r > __R)
              range.s.r = __R;
            if (range.s.c > __C)
              range.s.c = __C;
            if (range.e.r < __R)
              range.e.r = __R;
            if (range.e.c < __C)
              range.e.c = __C;
            if (data[R][C] && typeof data[R][C] === "object" && !Array.isArray(data[R][C]) && !(data[R][C] instanceof Date))
              cell = data[R][C];
            else {
              if (Array.isArray(cell.v)) {
                cell.f = data[R][C][1];
                cell.v = cell.v[0];
              }
              if (cell.v === null) {
                if (cell.f)
                  cell.t = "n";
                else if (o.nullError) {
                  cell.t = "e";
                  cell.v = 0;
                } else if (!o.sheetStubs)
                  continue;
                else
                  cell.t = "z";
              } else if (typeof cell.v === "number")
                cell.t = "n";
              else if (typeof cell.v === "boolean")
                cell.t = "b";
              else if (cell.v instanceof Date) {
                cell.z = o.dateNF || SSF._table[14];
                if (o.cellDates) {
                  cell.t = "d";
                  cell.w = SSF.format(cell.z, datenum(cell.v));
                } else {
                  cell.t = "n";
                  cell.v = datenum(cell.v);
                  cell.w = SSF.format(cell.z, cell.v);
                }
              } else
                cell.t = "s";
            }
            if (dense) {
              if (!ws[__R])
                ws[__R] = [];
              if (ws[__R][__C] && ws[__R][__C].z)
                cell.z = ws[__R][__C].z;
              ws[__R][__C] = cell;
            } else {
              var cell_ref = encode_cell({ c: __C, r: __R });
              if (ws[cell_ref] && ws[cell_ref].z)
                cell.z = ws[cell_ref].z;
              ws[cell_ref] = cell;
            }
          }
        }
        if (range.s.c < 1e7)
          ws["!ref"] = encode_range(range);
        return ws;
      }
      function aoa_to_sheet(data, opts) {
        return sheet_add_aoa(null, data, opts);
      }
      function write_UInt32LE(x, o) {
        if (!o)
          o = new_buf(4);
        o.write_shift(4, x);
        return o;
      }
      function parse_XLWideString(data) {
        var cchCharacters = data.read_shift(4);
        return cchCharacters === 0 ? "" : data.read_shift(cchCharacters, "dbcs");
      }
      function write_XLWideString(data, o) {
        var _null = false;
        if (o == null) {
          _null = true;
          o = new_buf(4 + 2 * data.length);
        }
        o.write_shift(4, data.length);
        if (data.length > 0)
          o.write_shift(0, data, "dbcs");
        return _null ? o.slice(0, o.l) : o;
      }
      function parse_StrRun(data) {
        return { ich: data.read_shift(2), ifnt: data.read_shift(2) };
      }
      function write_StrRun(run, o) {
        if (!o)
          o = new_buf(4);
        o.write_shift(2, run.ich || 0);
        o.write_shift(2, run.ifnt || 0);
        return o;
      }
      function parse_RichStr(data, length) {
        var start = data.l;
        var flags = data.read_shift(1);
        var str = parse_XLWideString(data);
        var rgsStrRun = [];
        var z = { t: str, h: str };
        if ((flags & 1) !== 0) {
          var dwSizeStrRun = data.read_shift(4);
          for (var i2 = 0; i2 != dwSizeStrRun; ++i2)
            rgsStrRun.push(parse_StrRun(data));
          z.r = rgsStrRun;
        } else
          z.r = [{ ich: 0, ifnt: 0 }];
        data.l = start + length;
        return z;
      }
      function write_RichStr(str, o) {
        var _null = false;
        if (o == null) {
          _null = true;
          o = new_buf(15 + 4 * str.t.length);
        }
        o.write_shift(1, 0);
        write_XLWideString(str.t, o);
        return _null ? o.slice(0, o.l) : o;
      }
      var parse_BrtCommentText = parse_RichStr;
      function write_BrtCommentText(str, o) {
        var _null = false;
        if (o == null) {
          _null = true;
          o = new_buf(23 + 4 * str.t.length);
        }
        o.write_shift(1, 1);
        write_XLWideString(str.t, o);
        o.write_shift(4, 1);
        write_StrRun({ ich: 0, ifnt: 0 }, o);
        return _null ? o.slice(0, o.l) : o;
      }
      function parse_XLSBCell(data) {
        var col = data.read_shift(4);
        var iStyleRef = data.read_shift(2);
        iStyleRef += data.read_shift(1) << 16;
        data.l++;
        return { c: col, iStyleRef };
      }
      function write_XLSBCell(cell, o) {
        if (o == null)
          o = new_buf(8);
        o.write_shift(-4, cell.c);
        o.write_shift(3, cell.iStyleRef || cell.s);
        o.write_shift(1, 0);
        return o;
      }
      function parse_XLSBShortCell(data) {
        var iStyleRef = data.read_shift(2);
        iStyleRef += data.read_shift(1) << 16;
        data.l++;
        return { c: -1, iStyleRef };
      }
      function write_XLSBShortCell(cell, o) {
        if (o == null)
          o = new_buf(4);
        o.write_shift(3, cell.iStyleRef || cell.s);
        o.write_shift(1, 0);
        return o;
      }
      var parse_XLSBCodeName = parse_XLWideString;
      var write_XLSBCodeName = write_XLWideString;
      function parse_XLNullableWideString(data) {
        var cchCharacters = data.read_shift(4);
        return cchCharacters === 0 || cchCharacters === 4294967295 ? "" : data.read_shift(cchCharacters, "dbcs");
      }
      function write_XLNullableWideString(data, o) {
        var _null = false;
        if (o == null) {
          _null = true;
          o = new_buf(127);
        }
        o.write_shift(4, data.length > 0 ? data.length : 4294967295);
        if (data.length > 0)
          o.write_shift(0, data, "dbcs");
        return _null ? o.slice(0, o.l) : o;
      }
      var parse_XLNameWideString = parse_XLWideString;
      var parse_RelID = parse_XLNullableWideString;
      var write_RelID = write_XLNullableWideString;
      function parse_RkNumber(data) {
        var b = data.slice(data.l, data.l + 4);
        var fX100 = b[0] & 1, fInt = b[0] & 2;
        data.l += 4;
        b[0] &= 252;
        var RK = fInt === 0 ? __double([0, 0, 0, 0, b[0], b[1], b[2], b[3]], 0) : __readInt32LE(b, 0) >> 2;
        return fX100 ? RK / 100 : RK;
      }
      function write_RkNumber(data, o) {
        if (o == null)
          o = new_buf(4);
        var fX100 = 0, fInt = 0, d100 = data * 100;
        if (data == (data | 0) && data >= -(1 << 29) && data < 1 << 29) {
          fInt = 1;
        } else if (d100 == (d100 | 0) && d100 >= -(1 << 29) && d100 < 1 << 29) {
          fInt = 1;
          fX100 = 1;
        }
        if (fInt)
          o.write_shift(-4, ((fX100 ? d100 : data) << 2) + (fX100 + 2));
        else
          throw new Error("unsupported RkNumber " + data);
      }
      function parse_RfX(data) {
        var cell = { s: {}, e: {} };
        cell.s.r = data.read_shift(4);
        cell.e.r = data.read_shift(4);
        cell.s.c = data.read_shift(4);
        cell.e.c = data.read_shift(4);
        return cell;
      }
      function write_RfX(r, o) {
        if (!o)
          o = new_buf(16);
        o.write_shift(4, r.s.r);
        o.write_shift(4, r.e.r);
        o.write_shift(4, r.s.c);
        o.write_shift(4, r.e.c);
        return o;
      }
      var parse_UncheckedRfX = parse_RfX;
      var write_UncheckedRfX = write_RfX;
      function parse_Xnum(data) {
        if (data.length - data.l < 8)
          throw "XLS Xnum Buffer underflow";
        return data.read_shift(8, "f");
      }
      function write_Xnum(data, o) {
        return (o || new_buf(8)).write_shift(8, data, "f");
      }
      function parse_BrtColor(data) {
        var out = {};
        var d = data.read_shift(1);
        var xColorType = d >>> 1;
        var index = data.read_shift(1);
        var nTS = data.read_shift(2, "i");
        var bR = data.read_shift(1);
        var bG = data.read_shift(1);
        var bB = data.read_shift(1);
        data.l++;
        switch (xColorType) {
          case 0:
            out.auto = 1;
            break;
          case 1:
            out.index = index;
            var icv = XLSIcv[index];
            if (icv)
              out.rgb = rgb2Hex(icv);
            break;
          case 2:
            out.rgb = rgb2Hex([bR, bG, bB]);
            break;
          case 3:
            out.theme = index;
            break;
        }
        if (nTS != 0)
          out.tint = nTS > 0 ? nTS / 32767 : nTS / 32768;
        return out;
      }
      function write_BrtColor(color, o) {
        if (!o)
          o = new_buf(8);
        if (!color || color.auto) {
          o.write_shift(4, 0);
          o.write_shift(4, 0);
          return o;
        }
        if (color.index != null) {
          o.write_shift(1, 2);
          o.write_shift(1, color.index);
        } else if (color.theme != null) {
          o.write_shift(1, 6);
          o.write_shift(1, color.theme);
        } else {
          o.write_shift(1, 5);
          o.write_shift(1, 0);
        }
        var nTS = color.tint || 0;
        if (nTS > 0)
          nTS *= 32767;
        else if (nTS < 0)
          nTS *= 32768;
        o.write_shift(2, nTS);
        if (!color.rgb || color.theme != null) {
          o.write_shift(2, 0);
          o.write_shift(1, 0);
          o.write_shift(1, 0);
        } else {
          var rgb = color.rgb || "FFFFFF";
          if (typeof rgb == "number")
            rgb = ("000000" + rgb.toString(16)).slice(-6);
          o.write_shift(1, parseInt(rgb.slice(0, 2), 16));
          o.write_shift(1, parseInt(rgb.slice(2, 4), 16));
          o.write_shift(1, parseInt(rgb.slice(4, 6), 16));
          o.write_shift(1, 255);
        }
        return o;
      }
      function parse_FontFlags(data) {
        var d = data.read_shift(1);
        data.l++;
        var out = {
          fBold: d & 1,
          fItalic: d & 2,
          fUnderline: d & 4,
          fStrikeout: d & 8,
          fOutline: d & 16,
          fShadow: d & 32,
          fCondense: d & 64,
          fExtend: d & 128
        };
        return out;
      }
      function write_FontFlags(font, o) {
        if (!o)
          o = new_buf(2);
        var grbit = (font.italic ? 2 : 0) | (font.strike ? 8 : 0) | (font.outline ? 16 : 0) | (font.shadow ? 32 : 0) | (font.condense ? 64 : 0) | (font.extend ? 128 : 0);
        o.write_shift(1, grbit);
        o.write_shift(1, 0);
        return o;
      }
      function parse_ClipboardFormatOrString(o, w) {
        var ClipFmt = { 2: "BITMAP", 3: "METAFILEPICT", 8: "DIB", 14: "ENHMETAFILE" };
        var m = o.read_shift(4);
        switch (m) {
          case 0:
            return "";
          case 4294967295:
          case 4294967294:
            return ClipFmt[o.read_shift(4)] || "";
        }
        if (m > 400)
          throw new Error("Unsupported Clipboard: " + m.toString(16));
        o.l -= 4;
        return o.read_shift(0, w == 1 ? "lpstr" : "lpwstr");
      }
      function parse_ClipboardFormatOrAnsiString(o) {
        return parse_ClipboardFormatOrString(o, 1);
      }
      function parse_ClipboardFormatOrUnicodeString(o) {
        return parse_ClipboardFormatOrString(o, 2);
      }
      var VT_I2 = 2;
      var VT_I4 = 3;
      var VT_BOOL = 11;
      var VT_VARIANT = 12;
      var VT_UI4 = 19;
      var VT_LPSTR = 30;
      var VT_FILETIME = 64;
      var VT_BLOB = 65;
      var VT_CF = 71;
      var VT_VECTOR = 4096;
      var VT_STRING = 80;
      var VT_USTR = 81;
      var VT_CUSTOM = [VT_STRING, VT_USTR];
      var DocSummaryPIDDSI = {
        1: { n: "CodePage", t: VT_I2 },
        2: { n: "Category", t: VT_STRING },
        3: { n: "PresentationFormat", t: VT_STRING },
        4: { n: "ByteCount", t: VT_I4 },
        5: { n: "LineCount", t: VT_I4 },
        6: { n: "ParagraphCount", t: VT_I4 },
        7: { n: "SlideCount", t: VT_I4 },
        8: { n: "NoteCount", t: VT_I4 },
        9: { n: "HiddenCount", t: VT_I4 },
        10: { n: "MultimediaClipCount", t: VT_I4 },
        11: { n: "ScaleCrop", t: VT_BOOL },
        12: { n: "HeadingPairs", t: VT_VECTOR | VT_VARIANT },
        13: { n: "TitlesOfParts", t: VT_VECTOR | VT_LPSTR },
        14: { n: "Manager", t: VT_STRING },
        15: { n: "Company", t: VT_STRING },
        16: { n: "LinksUpToDate", t: VT_BOOL },
        17: { n: "CharacterCount", t: VT_I4 },
        19: { n: "SharedDoc", t: VT_BOOL },
        22: { n: "HyperlinksChanged", t: VT_BOOL },
        23: { n: "AppVersion", t: VT_I4, p: "version" },
        24: { n: "DigSig", t: VT_BLOB },
        26: { n: "ContentType", t: VT_STRING },
        27: { n: "ContentStatus", t: VT_STRING },
        28: { n: "Language", t: VT_STRING },
        29: { n: "Version", t: VT_STRING },
        255: {}
      };
      var SummaryPIDSI = {
        1: { n: "CodePage", t: VT_I2 },
        2: { n: "Title", t: VT_STRING },
        3: { n: "Subject", t: VT_STRING },
        4: { n: "Author", t: VT_STRING },
        5: { n: "Keywords", t: VT_STRING },
        6: { n: "Comments", t: VT_STRING },
        7: { n: "Template", t: VT_STRING },
        8: { n: "LastAuthor", t: VT_STRING },
        9: { n: "RevNumber", t: VT_STRING },
        10: { n: "EditTime", t: VT_FILETIME },
        11: { n: "LastPrinted", t: VT_FILETIME },
        12: { n: "CreatedDate", t: VT_FILETIME },
        13: { n: "ModifiedDate", t: VT_FILETIME },
        14: { n: "PageCount", t: VT_I4 },
        15: { n: "WordCount", t: VT_I4 },
        16: { n: "CharCount", t: VT_I4 },
        17: { n: "Thumbnail", t: VT_CF },
        18: { n: "Application", t: VT_STRING },
        19: { n: "DocSecurity", t: VT_I4 },
        255: {}
      };
      var SpecialProperties = {
        2147483648: { n: "Locale", t: VT_UI4 },
        2147483651: { n: "Behavior", t: VT_UI4 },
        1919054434: {}
      };
      (function() {
        for (var y in SpecialProperties)
          if (Object.prototype.hasOwnProperty.call(SpecialProperties, y))
            DocSummaryPIDDSI[y] = SummaryPIDSI[y] = SpecialProperties[y];
      })();
      var DocSummaryRE = evert_key(DocSummaryPIDDSI, "n");
      var SummaryRE = evert_key(SummaryPIDSI, "n");
      var CountryEnum = {
        1: "US",
        2: "CA",
        3: "",
        7: "RU",
        20: "EG",
        30: "GR",
        31: "NL",
        32: "BE",
        33: "FR",
        34: "ES",
        36: "HU",
        39: "IT",
        41: "CH",
        43: "AT",
        44: "GB",
        45: "DK",
        46: "SE",
        47: "NO",
        48: "PL",
        49: "DE",
        52: "MX",
        55: "BR",
        61: "AU",
        64: "NZ",
        66: "TH",
        81: "JP",
        82: "KR",
        84: "VN",
        86: "CN",
        90: "TR",
        105: "JS",
        213: "DZ",
        216: "MA",
        218: "LY",
        351: "PT",
        354: "IS",
        358: "FI",
        420: "CZ",
        886: "TW",
        961: "LB",
        962: "JO",
        963: "SY",
        964: "IQ",
        965: "KW",
        966: "SA",
        971: "AE",
        972: "IL",
        974: "QA",
        981: "IR",
        65535: "US"
      };
      var XLSFillPattern = [
        null,
        "solid",
        "mediumGray",
        "darkGray",
        "lightGray",
        "darkHorizontal",
        "darkVertical",
        "darkDown",
        "darkUp",
        "darkGrid",
        "darkTrellis",
        "lightHorizontal",
        "lightVertical",
        "lightDown",
        "lightUp",
        "lightGrid",
        "lightTrellis",
        "gray125",
        "gray0625"
      ];
      function rgbify(arr) {
        return arr.map(function(x) {
          return [x >> 16 & 255, x >> 8 & 255, x & 255];
        });
      }
      var _XLSIcv = rgbify([
        0,
        16777215,
        16711680,
        65280,
        255,
        16776960,
        16711935,
        65535,
        0,
        16777215,
        16711680,
        65280,
        255,
        16776960,
        16711935,
        65535,
        8388608,
        32768,
        128,
        8421376,
        8388736,
        32896,
        12632256,
        8421504,
        10066431,
        10040166,
        16777164,
        13434879,
        6684774,
        16744576,
        26316,
        13421823,
        128,
        16711935,
        16776960,
        65535,
        8388736,
        8388608,
        32896,
        255,
        52479,
        13434879,
        13434828,
        16777113,
        10079487,
        16751052,
        13408767,
        16764057,
        3368703,
        3394764,
        10079232,
        16763904,
        16750848,
        16737792,
        6710937,
        9868950,
        13158,
        3381606,
        13056,
        3355392,
        10040064,
        10040166,
        3355545,
        3355443,
        16777215,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ]);
      var XLSIcv = dup(_XLSIcv);
      var BErr = {
        0: "#NULL!",
        7: "#DIV/0!",
        15: "#VALUE!",
        23: "#REF!",
        29: "#NAME?",
        36: "#NUM!",
        42: "#N/A",
        43: "#GETTING_DATA",
        255: "#WTF?"
      };
      var RBErr = evert_num(BErr);
      var ct2type = {
        "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml": "workbooks",
        "application/vnd.ms-excel.binIndexWs": "TODO",
        "application/vnd.ms-excel.intlmacrosheet": "TODO",
        "application/vnd.ms-excel.binIndexMs": "TODO",
        "application/vnd.openxmlformats-package.core-properties+xml": "coreprops",
        "application/vnd.openxmlformats-officedocument.custom-properties+xml": "custprops",
        "application/vnd.openxmlformats-officedocument.extended-properties+xml": "extprops",
        "application/vnd.openxmlformats-officedocument.customXmlProperties+xml": "TODO",
        "application/vnd.openxmlformats-officedocument.spreadsheetml.customProperty": "TODO",
        "application/vnd.ms-excel.pivotTable": "TODO",
        "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotTable+xml": "TODO",
        "application/vnd.openxmlformats-officedocument.drawingml.chart+xml": "TODO",
        "application/vnd.ms-office.chartcolorstyle+xml": "TODO",
        "application/vnd.ms-office.chartstyle+xml": "TODO",
        "application/vnd.ms-office.chartex+xml": "TODO",
        "application/vnd.ms-excel.calcChain": "calcchains",
        "application/vnd.openxmlformats-officedocument.spreadsheetml.calcChain+xml": "calcchains",
        "application/vnd.openxmlformats-officedocument.spreadsheetml.printerSettings": "TODO",
        "application/vnd.ms-office.activeX": "TODO",
        "application/vnd.ms-office.activeX+xml": "TODO",
        "application/vnd.ms-excel.attachedToolbars": "TODO",
        "application/vnd.ms-excel.connections": "TODO",
        "application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml": "TODO",
        "application/vnd.ms-excel.externalLink": "links",
        "application/vnd.openxmlformats-officedocument.spreadsheetml.externalLink+xml": "links",
        "application/vnd.ms-excel.sheetMetadata": "TODO",
        "application/vnd.openxmlformats-officedocument.spreadsheetml.sheetMetadata+xml": "TODO",
        "application/vnd.ms-excel.pivotCacheDefinition": "TODO",
        "application/vnd.ms-excel.pivotCacheRecords": "TODO",
        "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotCacheDefinition+xml": "TODO",
        "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotCacheRecords+xml": "TODO",
        "application/vnd.ms-excel.queryTable": "TODO",
        "application/vnd.openxmlformats-officedocument.spreadsheetml.queryTable+xml": "TODO",
        "application/vnd.ms-excel.userNames": "TODO",
        "application/vnd.ms-excel.revisionHeaders": "TODO",
        "application/vnd.ms-excel.revisionLog": "TODO",
        "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionHeaders+xml": "TODO",
        "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionLog+xml": "TODO",
        "application/vnd.openxmlformats-officedocument.spreadsheetml.userNames+xml": "TODO",
        "application/vnd.ms-excel.tableSingleCells": "TODO",
        "application/vnd.openxmlformats-officedocument.spreadsheetml.tableSingleCells+xml": "TODO",
        "application/vnd.ms-excel.slicer": "TODO",
        "application/vnd.ms-excel.slicerCache": "TODO",
        "application/vnd.ms-excel.slicer+xml": "TODO",
        "application/vnd.ms-excel.slicerCache+xml": "TODO",
        "application/vnd.ms-excel.wsSortMap": "TODO",
        "application/vnd.ms-excel.table": "TODO",
        "application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml": "TODO",
        "application/vnd.openxmlformats-officedocument.theme+xml": "themes",
        "application/vnd.openxmlformats-officedocument.themeOverride+xml": "TODO",
        "application/vnd.ms-excel.Timeline+xml": "TODO",
        "application/vnd.ms-excel.TimelineCache+xml": "TODO",
        "application/vnd.ms-office.vbaProject": "vba",
        "application/vnd.ms-office.vbaProjectSignature": "vba",
        "application/vnd.ms-office.volatileDependencies": "TODO",
        "application/vnd.openxmlformats-officedocument.spreadsheetml.volatileDependencies+xml": "TODO",
        "application/vnd.ms-excel.controlproperties+xml": "TODO",
        "application/vnd.openxmlformats-officedocument.model+data": "TODO",
        "application/vnd.ms-excel.Survey+xml": "TODO",
        "application/vnd.openxmlformats-officedocument.drawing+xml": "drawings",
        "application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml": "TODO",
        "application/vnd.openxmlformats-officedocument.drawingml.diagramColors+xml": "TODO",
        "application/vnd.openxmlformats-officedocument.drawingml.diagramData+xml": "TODO",
        "application/vnd.openxmlformats-officedocument.drawingml.diagramLayout+xml": "TODO",
        "application/vnd.openxmlformats-officedocument.drawingml.diagramStyle+xml": "TODO",
        "application/vnd.openxmlformats-officedocument.vmlDrawing": "TODO",
        "application/vnd.openxmlformats-package.relationships+xml": "rels",
        "application/vnd.openxmlformats-officedocument.oleObject": "TODO",
        "image/png": "TODO",
        "sheet": "js"
      };
      var CT_LIST = function() {
        var o = {
          workbooks: {
            xlsx: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml",
            xlsm: "application/vnd.ms-excel.sheet.macroEnabled.main+xml",
            xlsb: "application/vnd.ms-excel.sheet.binary.macroEnabled.main",
            xlam: "application/vnd.ms-excel.addin.macroEnabled.main+xml",
            xltx: "application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml"
          },
          strs: {
            xlsx: "application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml",
            xlsb: "application/vnd.ms-excel.sharedStrings"
          },
          comments: {
            xlsx: "application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml",
            xlsb: "application/vnd.ms-excel.comments"
          },
          sheets: {
            xlsx: "application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml",
            xlsb: "application/vnd.ms-excel.worksheet"
          },
          charts: {
            xlsx: "application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml",
            xlsb: "application/vnd.ms-excel.chartsheet"
          },
          dialogs: {
            xlsx: "application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml",
            xlsb: "application/vnd.ms-excel.dialogsheet"
          },
          macros: {
            xlsx: "application/vnd.ms-excel.macrosheet+xml",
            xlsb: "application/vnd.ms-excel.macrosheet"
          },
          styles: {
            xlsx: "application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml",
            xlsb: "application/vnd.ms-excel.styles"
          }
        };
        keys(o).forEach(function(k) {
          ["xlsm", "xlam"].forEach(function(v) {
            if (!o[k][v])
              o[k][v] = o[k].xlsx;
          });
        });
        keys(o).forEach(function(k) {
          keys(o[k]).forEach(function(v) {
            ct2type[o[k][v]] = k;
          });
        });
        return o;
      }();
      var type2ct = evert_arr(ct2type);
      XMLNS.CT = "http://schemas.openxmlformats.org/package/2006/content-types";
      function new_ct() {
        return {
          workbooks: [],
          sheets: [],
          charts: [],
          dialogs: [],
          macros: [],
          rels: [],
          strs: [],
          comments: [],
          links: [],
          coreprops: [],
          extprops: [],
          custprops: [],
          themes: [],
          styles: [],
          calcchains: [],
          vba: [],
          drawings: [],
          TODO: [],
          xmlns: ""
        };
      }
      function parse_ct(data) {
        var ct = new_ct();
        if (!data || !data.match)
          return ct;
        var ctext = {};
        (data.match(tagregex) || []).forEach(function(x) {
          var y = parsexmltag(x);
          switch (y[0].replace(nsregex, "<")) {
            case "<?xml":
              break;
            case "<Types":
              ct.xmlns = y["xmlns" + (y[0].match(/<(\w+):/) || ["", ""])[1]];
              break;
            case "<Default":
              ctext[y.Extension] = y.ContentType;
              break;
            case "<Override":
              if (ct[ct2type[y.ContentType]] !== void 0)
                ct[ct2type[y.ContentType]].push(y.PartName);
              break;
          }
        });
        if (ct.xmlns !== XMLNS.CT)
          throw new Error("Unknown Namespace: " + ct.xmlns);
        ct.calcchain = ct.calcchains.length > 0 ? ct.calcchains[0] : "";
        ct.sst = ct.strs.length > 0 ? ct.strs[0] : "";
        ct.style = ct.styles.length > 0 ? ct.styles[0] : "";
        ct.defaults = ctext;
        delete ct.calcchains;
        return ct;
      }
      var CTYPE_XML_ROOT = writextag("Types", null, {
        "xmlns": XMLNS.CT,
        "xmlns:xsd": XMLNS.xsd,
        "xmlns:xsi": XMLNS.xsi
      });
      var CTYPE_DEFAULTS = [
        ["xml", "application/xml"],
        ["bin", "application/vnd.ms-excel.sheet.binary.macroEnabled.main"],
        ["vml", "application/vnd.openxmlformats-officedocument.vmlDrawing"],
        ["data", "application/vnd.openxmlformats-officedocument.model+data"],
        ["bmp", "image/bmp"],
        ["png", "image/png"],
        ["gif", "image/gif"],
        ["emf", "image/x-emf"],
        ["wmf", "image/x-wmf"],
        ["jpg", "image/jpeg"],
        ["jpeg", "image/jpeg"],
        ["tif", "image/tiff"],
        ["tiff", "image/tiff"],
        ["pdf", "application/pdf"],
        ["rels", type2ct.rels[0]]
      ].map(function(x) {
        return writextag("Default", null, { "Extension": x[0], "ContentType": x[1] });
      });
      function write_ct(ct, opts) {
        var o = [], v;
        o[o.length] = XML_HEADER;
        o[o.length] = CTYPE_XML_ROOT;
        o = o.concat(CTYPE_DEFAULTS);
        var f1 = function(w) {
          if (ct[w] && ct[w].length > 0) {
            v = ct[w][0];
            o[o.length] = writextag("Override", null, {
              "PartName": (v[0] == "/" ? "" : "/") + v,
              "ContentType": CT_LIST[w][opts.bookType || "xlsx"]
            });
          }
        };
        var f2 = function(w) {
          (ct[w] || []).forEach(function(v2) {
            o[o.length] = writextag("Override", null, {
              "PartName": (v2[0] == "/" ? "" : "/") + v2,
              "ContentType": CT_LIST[w][opts.bookType || "xlsx"]
            });
          });
        };
        var f3 = function(t) {
          (ct[t] || []).forEach(function(v2) {
            o[o.length] = writextag("Override", null, {
              "PartName": (v2[0] == "/" ? "" : "/") + v2,
              "ContentType": type2ct[t][0]
            });
          });
        };
        f1("workbooks");
        f2("sheets");
        f2("charts");
        f3("themes");
        ["strs", "styles"].forEach(f1);
        ["coreprops", "extprops", "custprops"].forEach(f3);
        f3("vba");
        f3("comments");
        f3("drawings");
        if (o.length > 2) {
          o[o.length] = "</Types>";
          o[1] = o[1].replace("/>", ">");
        }
        return o.join("");
      }
      var RELS = {
        WB: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument",
        SHEET: "http://sheetjs.openxmlformats.org/officeDocument/2006/relationships/officeDocument",
        HLINK: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink",
        VML: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/vmlDrawing",
        XPATH: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/externalLinkPath",
        XMISS: "http://schemas.microsoft.com/office/2006/relationships/xlExternalLinkPath/xlPathMissing",
        XLINK: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/externalLink",
        CXML: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/customXml",
        CXMLP: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/customXmlProps",
        VBA: "http://schemas.microsoft.com/office/2006/relationships/vbaProject"
      };
      function get_rels_path(file) {
        var n = file.lastIndexOf("/");
        return file.slice(0, n + 1) + "_rels/" + file.slice(n + 1) + ".rels";
      }
      function parse_rels(data, currentFilePath) {
        var rels = { "!id": {} };
        if (!data)
          return rels;
        if (currentFilePath.charAt(0) !== "/") {
          currentFilePath = "/" + currentFilePath;
        }
        var hash = {};
        (data.match(tagregex) || []).forEach(function(x) {
          var y = parsexmltag(x);
          if (y[0] === "<Relationship") {
            var rel = {};
            rel.Type = y.Type;
            rel.Target = y.Target;
            rel.Id = y.Id;
            rel.TargetMode = y.TargetMode;
            var canonictarget = y.TargetMode === "External" ? y.Target : resolve_path(y.Target, currentFilePath);
            rels[canonictarget] = rel;
            hash[y.Id] = rel;
          }
        });
        rels["!id"] = hash;
        return rels;
      }
      XMLNS.RELS = "http://schemas.openxmlformats.org/package/2006/relationships";
      var RELS_ROOT = writextag("Relationships", null, {
        "xmlns": XMLNS.RELS
      });
      function write_rels(rels) {
        var o = [XML_HEADER, RELS_ROOT];
        keys(rels["!id"]).forEach(function(rid) {
          o[o.length] = writextag("Relationship", null, rels["!id"][rid]);
        });
        if (o.length > 2) {
          o[o.length] = "</Relationships>";
          o[1] = o[1].replace("/>", ">");
        }
        return o.join("");
      }
      var RELS_EXTERN = [RELS.HLINK, RELS.XPATH, RELS.XMISS];
      function add_rels(rels, rId, f, type, relobj, targetmode) {
        if (!relobj)
          relobj = {};
        if (!rels["!id"])
          rels["!id"] = {};
        if (rId < 0)
          for (rId = 1; rels["!id"]["rId" + rId]; ++rId) {
          }
        relobj.Id = "rId" + rId;
        relobj.Type = type;
        relobj.Target = f;
        if (targetmode)
          relobj.TargetMode = targetmode;
        else if (RELS_EXTERN.indexOf(relobj.Type) > -1)
          relobj.TargetMode = "External";
        if (rels["!id"][relobj.Id])
          throw new Error("Cannot rewrite rId " + rId);
        rels["!id"][relobj.Id] = relobj;
        rels[("/" + relobj.Target).replace("//", "/")] = relobj;
        return rId;
      }
      var CT_ODS = "application/vnd.oasis.opendocument.spreadsheet";
      function parse_manifest(d, opts) {
        var str = xlml_normalize(d);
        var Rn;
        var FEtag;
        while (Rn = xlmlregex.exec(str))
          switch (Rn[3]) {
            case "manifest":
              break;
            case "file-entry":
              FEtag = parsexmltag(Rn[0], false);
              if (FEtag.path == "/" && FEtag.type !== CT_ODS)
                throw new Error("This OpenDocument is not a spreadsheet");
              break;
            case "encryption-data":
            case "algorithm":
            case "start-key-generation":
            case "key-derivation":
              throw new Error("Unsupported ODS Encryption");
            default:
              if (opts && opts.WTF)
                throw Rn;
          }
      }
      function write_manifest(manifest) {
        var o = [XML_HEADER];
        o.push('<manifest:manifest xmlns:manifest="urn:oasis:names:tc:opendocument:xmlns:manifest:1.0" manifest:version="1.2">\n');
        o.push('  <manifest:file-entry manifest:full-path="/" manifest:version="1.2" manifest:media-type="application/vnd.oasis.opendocument.spreadsheet"/>\n');
        for (var i2 = 0; i2 < manifest.length; ++i2)
          o.push('  <manifest:file-entry manifest:full-path="' + manifest[i2][0] + '" manifest:media-type="' + manifest[i2][1] + '"/>\n');
        o.push("</manifest:manifest>");
        return o.join("");
      }
      function write_rdf_type(file, res, tag) {
        return [
          '  <rdf:Description rdf:about="' + file + '">\n',
          '    <rdf:type rdf:resource="http://docs.oasis-open.org/ns/office/1.2/meta/' + (tag || "odf") + "#" + res + '"/>\n',
          "  </rdf:Description>\n"
        ].join("");
      }
      function write_rdf_has(base, file) {
        return [
          '  <rdf:Description rdf:about="' + base + '">\n',
          '    <ns0:hasPart xmlns:ns0="http://docs.oasis-open.org/ns/office/1.2/meta/pkg#" rdf:resource="' + file + '"/>\n',
          "  </rdf:Description>\n"
        ].join("");
      }
      function write_rdf(rdf) {
        var o = [XML_HEADER];
        o.push('<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">\n');
        for (var i2 = 0; i2 != rdf.length; ++i2) {
          o.push(write_rdf_type(rdf[i2][0], rdf[i2][1]));
          o.push(write_rdf_has("", rdf[i2][0]));
        }
        o.push(write_rdf_type("", "Document", "pkg"));
        o.push("</rdf:RDF>");
        return o.join("");
      }
      var write_meta_ods = function() {
        var payload = '<office:document-meta xmlns:office="urn:oasis:names:tc:opendocument:xmlns:office:1.0" xmlns:meta="urn:oasis:names:tc:opendocument:xmlns:meta:1.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:xlink="http://www.w3.org/1999/xlink" office:version="1.2"><office:meta><meta:generator>SheetJS ' + XLSX2.version + "</meta:generator></office:meta></office:document-meta>";
        return function wmo() {
          return payload;
        };
      }();
      var CORE_PROPS = [
        ["cp:category", "Category"],
        ["cp:contentStatus", "ContentStatus"],
        ["cp:keywords", "Keywords"],
        ["cp:lastModifiedBy", "LastAuthor"],
        ["cp:lastPrinted", "LastPrinted"],
        ["cp:revision", "RevNumber"],
        ["cp:version", "Version"],
        ["dc:creator", "Author"],
        ["dc:description", "Comments"],
        ["dc:identifier", "Identifier"],
        ["dc:language", "Language"],
        ["dc:subject", "Subject"],
        ["dc:title", "Title"],
        ["dcterms:created", "CreatedDate", "date"],
        ["dcterms:modified", "ModifiedDate", "date"]
      ];
      XMLNS.CORE_PROPS = "http://schemas.openxmlformats.org/package/2006/metadata/core-properties";
      RELS.CORE_PROPS = "http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties";
      var CORE_PROPS_REGEX = function() {
        var r = new Array(CORE_PROPS.length);
        for (var i2 = 0; i2 < CORE_PROPS.length; ++i2) {
          var f = CORE_PROPS[i2];
          var g = "(?:" + f[0].slice(0, f[0].indexOf(":")) + ":)" + f[0].slice(f[0].indexOf(":") + 1);
          r[i2] = new RegExp("<" + g + "[^>]*>([\\s\\S]*?)</" + g + ">");
        }
        return r;
      }();
      function parse_core_props(data) {
        var p = {};
        data = utf8read(data);
        for (var i2 = 0; i2 < CORE_PROPS.length; ++i2) {
          var f = CORE_PROPS[i2], cur = data.match(CORE_PROPS_REGEX[i2]);
          if (cur != null && cur.length > 0)
            p[f[1]] = unescapexml(cur[1]);
          if (f[2] === "date" && p[f[1]])
            p[f[1]] = parseDate(p[f[1]]);
        }
        return p;
      }
      var CORE_PROPS_XML_ROOT = writextag("cp:coreProperties", null, {
        "xmlns:cp": XMLNS.CORE_PROPS,
        "xmlns:dc": XMLNS.dc,
        "xmlns:dcterms": XMLNS.dcterms,
        "xmlns:dcmitype": XMLNS.dcmitype,
        "xmlns:xsi": XMLNS.xsi
      });
      function cp_doit(f, g, h, o, p) {
        if (p[f] != null || g == null || g === "")
          return;
        p[f] = g;
        g = escapexml(g);
        o[o.length] = h ? writextag(f, g, h) : writetag(f, g);
      }
      function write_core_props(cp, _opts) {
        var opts = _opts || {};
        var o = [XML_HEADER, CORE_PROPS_XML_ROOT], p = {};
        if (!cp && !opts.Props)
          return o.join("");
        if (cp) {
          if (cp.CreatedDate != null)
            cp_doit("dcterms:created", typeof cp.CreatedDate === "string" ? cp.CreatedDate : write_w3cdtf(cp.CreatedDate, opts.WTF), { "xsi:type": "dcterms:W3CDTF" }, o, p);
          if (cp.ModifiedDate != null)
            cp_doit("dcterms:modified", typeof cp.ModifiedDate === "string" ? cp.ModifiedDate : write_w3cdtf(cp.ModifiedDate, opts.WTF), { "xsi:type": "dcterms:W3CDTF" }, o, p);
        }
        for (var i2 = 0; i2 != CORE_PROPS.length; ++i2) {
          var f = CORE_PROPS[i2];
          var v = opts.Props && opts.Props[f[1]] != null ? opts.Props[f[1]] : cp ? cp[f[1]] : null;
          if (v === true)
            v = "1";
          else if (v === false)
            v = "0";
          else if (typeof v == "number")
            v = String(v);
          if (v != null)
            cp_doit(f[0], v, null, o, p);
        }
        if (o.length > 2) {
          o[o.length] = "</cp:coreProperties>";
          o[1] = o[1].replace("/>", ">");
        }
        return o.join("");
      }
      var EXT_PROPS = [
        ["Application", "Application", "string"],
        ["AppVersion", "AppVersion", "string"],
        ["Company", "Company", "string"],
        ["DocSecurity", "DocSecurity", "string"],
        ["Manager", "Manager", "string"],
        ["HyperlinksChanged", "HyperlinksChanged", "bool"],
        ["SharedDoc", "SharedDoc", "bool"],
        ["LinksUpToDate", "LinksUpToDate", "bool"],
        ["ScaleCrop", "ScaleCrop", "bool"],
        ["HeadingPairs", "HeadingPairs", "raw"],
        ["TitlesOfParts", "TitlesOfParts", "raw"]
      ];
      XMLNS.EXT_PROPS = "http://schemas.openxmlformats.org/officeDocument/2006/extended-properties";
      RELS.EXT_PROPS = "http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties";
      var PseudoPropsPairs = [
        "Worksheets",
        "SheetNames",
        "NamedRanges",
        "DefinedNames",
        "Chartsheets",
        "ChartNames"
      ];
      function load_props_pairs(HP, TOP, props, opts) {
        var v = [];
        if (typeof HP == "string")
          v = parseVector(HP, opts);
        else
          for (var j = 0; j < HP.length; ++j)
            v = v.concat(HP[j].map(function(hp) {
              return { v: hp };
            }));
        var parts = typeof TOP == "string" ? parseVector(TOP, opts).map(function(x) {
          return x.v;
        }) : TOP;
        var idx = 0, len = 0;
        if (parts.length > 0)
          for (var i2 = 0; i2 !== v.length; i2 += 2) {
            len = +v[i2 + 1].v;
            switch (v[i2].v) {
              case "Worksheets":
              case "\u5DE5\u4F5C\u8868":
              case "\u041B\u0438\u0441\u0442\u044B":
              case "\u0623\u0648\u0631\u0627\u0642 \u0627\u0644\u0639\u0645\u0644":
              case "\u30EF\u30FC\u30AF\u30B7\u30FC\u30C8":
              case "\u05D2\u05DC\u05D9\u05D5\u05E0\u05D5\u05EA \u05E2\u05D1\u05D5\u05D3\u05D4":
              case "Arbeitsbl\xE4tter":
              case "\xC7al\u0131\u015Fma Sayfalar\u0131":
              case "Feuilles de calcul":
              case "Fogli di lavoro":
              case "Folhas de c\xE1lculo":
              case "Planilhas":
              case "Regneark":
              case "Hojas de c\xE1lculo":
              case "Werkbladen":
                props.Worksheets = len;
                props.SheetNames = parts.slice(idx, idx + len);
                break;
              case "Named Ranges":
              case "Rangos con nombre":
              case "\u540D\u524D\u4ED8\u304D\u4E00\u89A7":
              case "Benannte Bereiche":
              case "Navngivne omr\xE5der":
                props.NamedRanges = len;
                props.DefinedNames = parts.slice(idx, idx + len);
                break;
              case "Charts":
              case "Diagramme":
                props.Chartsheets = len;
                props.ChartNames = parts.slice(idx, idx + len);
                break;
            }
            idx += len;
          }
      }
      function parse_ext_props(data, p, opts) {
        var q = {};
        if (!p)
          p = {};
        data = utf8read(data);
        EXT_PROPS.forEach(function(f) {
          var xml = (data.match(matchtag(f[0])) || [])[1];
          switch (f[2]) {
            case "string":
              if (xml)
                p[f[1]] = unescapexml(xml);
              break;
            case "bool":
              p[f[1]] = xml === "true";
              break;
            case "raw":
              var cur = data.match(new RegExp("<" + f[0] + "[^>]*>([\\s\\S]*?)</" + f[0] + ">"));
              if (cur && cur.length > 0)
                q[f[1]] = cur[1];
              break;
          }
        });
        if (q.HeadingPairs && q.TitlesOfParts)
          load_props_pairs(q.HeadingPairs, q.TitlesOfParts, p, opts);
        return p;
      }
      var EXT_PROPS_XML_ROOT = writextag("Properties", null, {
        "xmlns": XMLNS.EXT_PROPS,
        "xmlns:vt": XMLNS.vt
      });
      function write_ext_props(cp) {
        var o = [], W = writextag;
        if (!cp)
          cp = {};
        cp.Application = "SheetJS";
        o[o.length] = XML_HEADER;
        o[o.length] = EXT_PROPS_XML_ROOT;
        EXT_PROPS.forEach(function(f) {
          if (cp[f[1]] === void 0)
            return;
          var v;
          switch (f[2]) {
            case "string":
              v = escapexml(String(cp[f[1]]));
              break;
            case "bool":
              v = cp[f[1]] ? "true" : "false";
              break;
          }
          if (v !== void 0)
            o[o.length] = W(f[0], v);
        });
        o[o.length] = W("HeadingPairs", W("vt:vector", W("vt:variant", "<vt:lpstr>Worksheets</vt:lpstr>") + W("vt:variant", W("vt:i4", String(cp.Worksheets))), { size: 2, baseType: "variant" }));
        o[o.length] = W("TitlesOfParts", W("vt:vector", cp.SheetNames.map(function(s) {
          return "<vt:lpstr>" + escapexml(s) + "</vt:lpstr>";
        }).join(""), { size: cp.Worksheets, baseType: "lpstr" }));
        if (o.length > 2) {
          o[o.length] = "</Properties>";
          o[1] = o[1].replace("/>", ">");
        }
        return o.join("");
      }
      XMLNS.CUST_PROPS = "http://schemas.openxmlformats.org/officeDocument/2006/custom-properties";
      RELS.CUST_PROPS = "http://schemas.openxmlformats.org/officeDocument/2006/relationships/custom-properties";
      var custregex = /<[^>]+>[^<]*/g;
      function parse_cust_props(data, opts) {
        var p = {}, name2 = "";
        var m = data.match(custregex);
        if (m)
          for (var i2 = 0; i2 != m.length; ++i2) {
            var x = m[i2], y = parsexmltag(x);
            switch (y[0]) {
              case "<?xml":
                break;
              case "<Properties":
                break;
              case "<property":
                name2 = unescapexml(y.name);
                break;
              case "</property>":
                name2 = null;
                break;
              default:
                if (x.indexOf("<vt:") === 0) {
                  var toks = x.split(">");
                  var type = toks[0].slice(4), text = toks[1];
                  switch (type) {
                    case "lpstr":
                    case "bstr":
                    case "lpwstr":
                      p[name2] = unescapexml(text);
                      break;
                    case "bool":
                      p[name2] = parsexmlbool(text);
                      break;
                    case "i1":
                    case "i2":
                    case "i4":
                    case "i8":
                    case "int":
                    case "uint":
                      p[name2] = parseInt(text, 10);
                      break;
                    case "r4":
                    case "r8":
                    case "decimal":
                      p[name2] = parseFloat(text);
                      break;
                    case "filetime":
                    case "date":
                      p[name2] = parseDate(text);
                      break;
                    case "cy":
                    case "error":
                      p[name2] = unescapexml(text);
                      break;
                    default:
                      if (type.slice(-1) == "/")
                        break;
                      if (opts.WTF && typeof console !== "undefined")
                        console.warn("Unexpected", x, type, toks);
                  }
                } else if (x.slice(0, 2) === "</") {
                } else if (opts.WTF)
                  throw new Error(x);
            }
          }
        return p;
      }
      var CUST_PROPS_XML_ROOT = writextag("Properties", null, {
        "xmlns": XMLNS.CUST_PROPS,
        "xmlns:vt": XMLNS.vt
      });
      function write_cust_props(cp) {
        var o = [XML_HEADER, CUST_PROPS_XML_ROOT];
        if (!cp)
          return o.join("");
        var pid = 1;
        keys(cp).forEach(function custprop(k) {
          ++pid;
          o[o.length] = writextag("property", write_vt(cp[k], true), {
            "fmtid": "{D5CDD505-2E9C-101B-9397-08002B2CF9AE}",
            "pid": pid,
            "name": escapexml(k)
          });
        });
        if (o.length > 2) {
          o[o.length] = "</Properties>";
          o[1] = o[1].replace("/>", ">");
        }
        return o.join("");
      }
      var XLMLDocPropsMap = {
        Title: "Title",
        Subject: "Subject",
        Author: "Author",
        Keywords: "Keywords",
        Comments: "Description",
        LastAuthor: "LastAuthor",
        RevNumber: "Revision",
        Application: "AppName",
        LastPrinted: "LastPrinted",
        CreatedDate: "Created",
        ModifiedDate: "LastSaved",
        Category: "Category",
        Manager: "Manager",
        Company: "Company",
        AppVersion: "Version",
        ContentStatus: "ContentStatus",
        Identifier: "Identifier",
        Language: "Language"
      };
      var evert_XLMLDPM = evert(XLMLDocPropsMap);
      function xlml_set_prop(Props, tag, val) {
        tag = evert_XLMLDPM[tag] || tag;
        Props[tag] = val;
      }
      function xlml_write_docprops(Props, opts) {
        var o = [];
        keys(XLMLDocPropsMap).map(function(m) {
          for (var i2 = 0; i2 < CORE_PROPS.length; ++i2)
            if (CORE_PROPS[i2][1] == m)
              return CORE_PROPS[i2];
          for (i2 = 0; i2 < EXT_PROPS.length; ++i2)
            if (EXT_PROPS[i2][1] == m)
              return EXT_PROPS[i2];
          throw m;
        }).forEach(function(p) {
          if (Props[p[1]] == null)
            return;
          var m = opts && opts.Props && opts.Props[p[1]] != null ? opts.Props[p[1]] : Props[p[1]];
          switch (p[2]) {
            case "date":
              m = new Date(m).toISOString().replace(/\.\d*Z/, "Z");
              break;
          }
          if (typeof m == "number")
            m = String(m);
          else if (m === true || m === false) {
            m = m ? "1" : "0";
          } else if (m instanceof Date)
            m = new Date(m).toISOString().replace(/\.\d*Z/, "");
          o.push(writetag(XLMLDocPropsMap[p[1]] || p[1], m));
        });
        return writextag("DocumentProperties", o.join(""), { xmlns: XLMLNS.o });
      }
      function xlml_write_custprops(Props, Custprops) {
        var BLACKLIST = ["Worksheets", "SheetNames"];
        var T = "CustomDocumentProperties";
        var o = [];
        if (Props)
          keys(Props).forEach(function(k) {
            if (!Object.prototype.hasOwnProperty.call(Props, k))
              return;
            for (var i2 = 0; i2 < CORE_PROPS.length; ++i2)
              if (k == CORE_PROPS[i2][1])
                return;
            for (i2 = 0; i2 < EXT_PROPS.length; ++i2)
              if (k == EXT_PROPS[i2][1])
                return;
            for (i2 = 0; i2 < BLACKLIST.length; ++i2)
              if (k == BLACKLIST[i2])
                return;
            var m = Props[k];
            var t = "string";
            if (typeof m == "number") {
              t = "float";
              m = String(m);
            } else if (m === true || m === false) {
              t = "boolean";
              m = m ? "1" : "0";
            } else
              m = String(m);
            o.push(writextag(escapexmltag(k), m, { "dt:dt": t }));
          });
        if (Custprops)
          keys(Custprops).forEach(function(k) {
            if (!Object.prototype.hasOwnProperty.call(Custprops, k))
              return;
            if (Props && Object.prototype.hasOwnProperty.call(Props, k))
              return;
            var m = Custprops[k];
            var t = "string";
            if (typeof m == "number") {
              t = "float";
              m = String(m);
            } else if (m === true || m === false) {
              t = "boolean";
              m = m ? "1" : "0";
            } else if (m instanceof Date) {
              t = "dateTime.tz";
              m = m.toISOString();
            } else
              m = String(m);
            o.push(writextag(escapexmltag(k), m, { "dt:dt": t }));
          });
        return "<" + T + ' xmlns="' + XLMLNS.o + '">' + o.join("") + "</" + T + ">";
      }
      function parse_FILETIME(blob) {
        var dwLowDateTime = blob.read_shift(4), dwHighDateTime = blob.read_shift(4);
        return new Date((dwHighDateTime / 1e7 * Math.pow(2, 32) + dwLowDateTime / 1e7 - 11644473600) * 1e3).toISOString().replace(/\.000/, "");
      }
      function write_FILETIME(time) {
        var date = typeof time == "string" ? new Date(Date.parse(time)) : time;
        var t = date.getTime() / 1e3 + 11644473600;
        var l = t % Math.pow(2, 32), h = (t - l) / Math.pow(2, 32);
        l *= 1e7;
        h *= 1e7;
        var w = l / Math.pow(2, 32) | 0;
        if (w > 0) {
          l = l % Math.pow(2, 32);
          h += w;
        }
        var o = new_buf(8);
        o.write_shift(4, l);
        o.write_shift(4, h);
        return o;
      }
      function parse_lpstr(blob, type, pad) {
        var start = blob.l;
        var str = blob.read_shift(0, "lpstr-cp");
        if (pad)
          while (blob.l - start & 3)
            ++blob.l;
        return str;
      }
      function parse_lpwstr(blob, type, pad) {
        var str = blob.read_shift(0, "lpwstr");
        if (pad)
          blob.l += 4 - (str.length + 1 & 3) & 3;
        return str;
      }
      function parse_VtStringBase(blob, stringType, pad) {
        if (stringType === 31)
          return parse_lpwstr(blob);
        return parse_lpstr(blob, stringType, pad);
      }
      function parse_VtString(blob, t, pad) {
        return parse_VtStringBase(blob, t, pad === false ? 0 : 4);
      }
      function parse_VtUnalignedString(blob, t) {
        if (!t)
          throw new Error("VtUnalignedString must have positive length");
        return parse_VtStringBase(blob, t, 0);
      }
      function parse_VtVecLpwstrValue(blob) {
        var length = blob.read_shift(4);
        var ret = [];
        for (var i2 = 0; i2 != length; ++i2) {
          var start = blob.l;
          ret[i2] = blob.read_shift(0, "lpwstr").replace(chr0, "");
          if (blob.l - start & 2)
            blob.l += 2;
        }
        return ret;
      }
      function parse_VtVecUnalignedLpstrValue(blob) {
        var length = blob.read_shift(4);
        var ret = [];
        for (var i2 = 0; i2 != length; ++i2)
          ret[i2] = blob.read_shift(0, "lpstr-cp").replace(chr0, "");
        return ret;
      }
      function parse_VtHeadingPair(blob) {
        var start = blob.l;
        var headingString = parse_TypedPropertyValue(blob, VT_USTR);
        if (blob[blob.l] == 0 && blob[blob.l + 1] == 0 && blob.l - start & 2)
          blob.l += 2;
        var headerParts = parse_TypedPropertyValue(blob, VT_I4);
        return [headingString, headerParts];
      }
      function parse_VtVecHeadingPairValue(blob) {
        var cElements = blob.read_shift(4);
        var out = [];
        for (var i2 = 0; i2 < cElements / 2; ++i2)
          out.push(parse_VtHeadingPair(blob));
        return out;
      }
      function parse_dictionary(blob, CodePage) {
        var cnt = blob.read_shift(4);
        var dict = {};
        for (var j = 0; j != cnt; ++j) {
          var pid = blob.read_shift(4);
          var len = blob.read_shift(4);
          dict[pid] = blob.read_shift(len, CodePage === 1200 ? "utf16le" : "utf8").replace(chr0, "").replace(chr1, "!");
          if (CodePage === 1200 && len % 2)
            blob.l += 2;
        }
        if (blob.l & 3)
          blob.l = blob.l >> 2 + 1 << 2;
        return dict;
      }
      function parse_BLOB(blob) {
        var size = blob.read_shift(4);
        var bytes = blob.slice(blob.l, blob.l + size);
        blob.l += size;
        if ((size & 3) > 0)
          blob.l += 4 - (size & 3) & 3;
        return bytes;
      }
      function parse_ClipboardData(blob) {
        var o = {};
        o.Size = blob.read_shift(4);
        blob.l += o.Size + 3 - (o.Size - 1) % 4;
        return o;
      }
      function parse_TypedPropertyValue(blob, type, _opts) {
        var t = blob.read_shift(2), ret, opts = _opts || {};
        blob.l += 2;
        if (type !== VT_VARIANT) {
          if (t !== type && VT_CUSTOM.indexOf(type) === -1 && !((type & 65534) == 4126 && (t & 65534) == 4126))
            throw new Error("Expected type " + type + " saw " + t);
        }
        switch (type === VT_VARIANT ? t : type) {
          case 2:
            ret = blob.read_shift(2, "i");
            if (!opts.raw)
              blob.l += 2;
            return ret;
          case 3:
            ret = blob.read_shift(4, "i");
            return ret;
          case 11:
            return blob.read_shift(4) !== 0;
          case 19:
            ret = blob.read_shift(4);
            return ret;
          case 30:
            return parse_lpstr(blob, t, 4).replace(chr0, "");
          case 31:
            return parse_lpwstr(blob);
          case 64:
            return parse_FILETIME(blob);
          case 65:
            return parse_BLOB(blob);
          case 71:
            return parse_ClipboardData(blob);
          case 80:
            return parse_VtString(blob, t, !opts.raw).replace(chr0, "");
          case 81:
            return parse_VtUnalignedString(blob, t).replace(chr0, "");
          case 4108:
            return parse_VtVecHeadingPairValue(blob);
          case 4126:
          case 4127:
            return t == 4127 ? parse_VtVecLpwstrValue(blob) : parse_VtVecUnalignedLpstrValue(blob);
          default:
            throw new Error("TypedPropertyValue unrecognized type " + type + " " + t);
        }
      }
      function write_TypedPropertyValue(type, value) {
        var o = new_buf(4), p = new_buf(4);
        o.write_shift(4, type == 80 ? 31 : type);
        switch (type) {
          case 3:
            p.write_shift(-4, value);
            break;
          case 5:
            p = new_buf(8);
            p.write_shift(8, value, "f");
            break;
          case 11:
            p.write_shift(4, value ? 1 : 0);
            break;
          case 64:
            p = write_FILETIME(value);
            break;
          case 31:
          case 80:
            p = new_buf(4 + 2 * (value.length + 1) + (value.length % 2 ? 0 : 2));
            p.write_shift(4, value.length + 1);
            p.write_shift(0, value, "dbcs");
            while (p.l != p.length)
              p.write_shift(1, 0);
            break;
          default:
            throw new Error("TypedPropertyValue unrecognized type " + type + " " + value);
        }
        return bconcat([o, p]);
      }
      function parse_PropertySet(blob, PIDSI) {
        var start_addr = blob.l;
        var size = blob.read_shift(4);
        var NumProps = blob.read_shift(4);
        var Props = [], i2 = 0;
        var CodePage = 0;
        var Dictionary = -1, DictObj = {};
        for (i2 = 0; i2 != NumProps; ++i2) {
          var PropID = blob.read_shift(4);
          var Offset = blob.read_shift(4);
          Props[i2] = [PropID, Offset + start_addr];
        }
        Props.sort(function(x, y) {
          return x[1] - y[1];
        });
        var PropH = {};
        for (i2 = 0; i2 != NumProps; ++i2) {
          if (blob.l !== Props[i2][1]) {
            var fail = true;
            if (i2 > 0 && PIDSI)
              switch (PIDSI[Props[i2 - 1][0]].t) {
                case 2:
                  if (blob.l + 2 === Props[i2][1]) {
                    blob.l += 2;
                    fail = false;
                  }
                  break;
                case 80:
                  if (blob.l <= Props[i2][1]) {
                    blob.l = Props[i2][1];
                    fail = false;
                  }
                  break;
                case 4108:
                  if (blob.l <= Props[i2][1]) {
                    blob.l = Props[i2][1];
                    fail = false;
                  }
                  break;
              }
            if ((!PIDSI || i2 == 0) && blob.l <= Props[i2][1]) {
              fail = false;
              blob.l = Props[i2][1];
            }
            if (fail)
              throw new Error("Read Error: Expected address " + Props[i2][1] + " at " + blob.l + " :" + i2);
          }
          if (PIDSI) {
            var piddsi = PIDSI[Props[i2][0]];
            PropH[piddsi.n] = parse_TypedPropertyValue(blob, piddsi.t, { raw: true });
            if (piddsi.p === "version")
              PropH[piddsi.n] = String(PropH[piddsi.n] >> 16) + "." + ("0000" + String(PropH[piddsi.n] & 65535)).slice(-4);
            if (piddsi.n == "CodePage")
              switch (PropH[piddsi.n]) {
                case 0:
                  PropH[piddsi.n] = 1252;
                case 874:
                case 932:
                case 936:
                case 949:
                case 950:
                case 1250:
                case 1251:
                case 1253:
                case 1254:
                case 1255:
                case 1256:
                case 1257:
                case 1258:
                case 1e4:
                case 1200:
                case 1201:
                case 1252:
                case 65e3:
                case -536:
                case 65001:
                case -535:
                  set_cp(CodePage = PropH[piddsi.n] >>> 0 & 65535);
                  break;
                default:
                  throw new Error("Unsupported CodePage: " + PropH[piddsi.n]);
              }
          } else {
            if (Props[i2][0] === 1) {
              CodePage = PropH.CodePage = parse_TypedPropertyValue(blob, VT_I2);
              set_cp(CodePage);
              if (Dictionary !== -1) {
                var oldpos = blob.l;
                blob.l = Props[Dictionary][1];
                DictObj = parse_dictionary(blob, CodePage);
                blob.l = oldpos;
              }
            } else if (Props[i2][0] === 0) {
              if (CodePage === 0) {
                Dictionary = i2;
                blob.l = Props[i2 + 1][1];
                continue;
              }
              DictObj = parse_dictionary(blob, CodePage);
            } else {
              var name2 = DictObj[Props[i2][0]];
              var val;
              switch (blob[blob.l]) {
                case 65:
                  blob.l += 4;
                  val = parse_BLOB(blob);
                  break;
                case 30:
                  blob.l += 4;
                  val = parse_VtString(blob, blob[blob.l - 4]).replace(/\u0000+$/, "");
                  break;
                case 31:
                  blob.l += 4;
                  val = parse_VtString(blob, blob[blob.l - 4]).replace(/\u0000+$/, "");
                  break;
                case 3:
                  blob.l += 4;
                  val = blob.read_shift(4, "i");
                  break;
                case 19:
                  blob.l += 4;
                  val = blob.read_shift(4);
                  break;
                case 5:
                  blob.l += 4;
                  val = blob.read_shift(8, "f");
                  break;
                case 11:
                  blob.l += 4;
                  val = parsebool(blob, 4);
                  break;
                case 64:
                  blob.l += 4;
                  val = parseDate(parse_FILETIME(blob));
                  break;
                default:
                  throw new Error("unparsed value: " + blob[blob.l]);
              }
              PropH[name2] = val;
            }
          }
        }
        blob.l = start_addr + size;
        return PropH;
      }
      var XLSPSSkip = ["CodePage", "Thumbnail", "_PID_LINKBASE", "_PID_HLINKS", "SystemIdentifier", "FMTID"].concat(PseudoPropsPairs);
      function guess_property_type(val) {
        switch (typeof val) {
          case "boolean":
            return 11;
          case "number":
            return (val | 0) == val ? 3 : 5;
          case "string":
            return 31;
          case "object":
            if (val instanceof Date)
              return 64;
            break;
        }
        return -1;
      }
      function write_PropertySet(entries, RE, PIDSI) {
        var hdr = new_buf(8), piao = [], prop = [];
        var sz = 8, i2 = 0;
        var pr = new_buf(8), pio = new_buf(8);
        pr.write_shift(4, 2);
        pr.write_shift(4, 1200);
        pio.write_shift(4, 1);
        prop.push(pr);
        piao.push(pio);
        sz += 8 + pr.length;
        if (!RE) {
          pio = new_buf(8);
          pio.write_shift(4, 0);
          piao.unshift(pio);
          var bufs = [new_buf(4)];
          bufs[0].write_shift(4, entries.length);
          for (i2 = 0; i2 < entries.length; ++i2) {
            var value = entries[i2][0];
            pr = new_buf(4 + 4 + 2 * (value.length + 1) + (value.length % 2 ? 0 : 2));
            pr.write_shift(4, i2 + 2);
            pr.write_shift(4, value.length + 1);
            pr.write_shift(0, value, "dbcs");
            while (pr.l != pr.length)
              pr.write_shift(1, 0);
            bufs.push(pr);
          }
          pr = bconcat(bufs);
          prop.unshift(pr);
          sz += 8 + pr.length;
        }
        for (i2 = 0; i2 < entries.length; ++i2) {
          if (RE && !RE[entries[i2][0]])
            continue;
          if (XLSPSSkip.indexOf(entries[i2][0]) > -1)
            continue;
          if (entries[i2][1] == null)
            continue;
          var val = entries[i2][1], idx = 0;
          if (RE) {
            idx = +RE[entries[i2][0]];
            var pinfo = PIDSI[idx];
            if (pinfo.p == "version" && typeof val == "string") {
              var arr = val.split(".");
              val = (+arr[0] << 16) + (+arr[1] || 0);
            }
            pr = write_TypedPropertyValue(pinfo.t, val);
          } else {
            var T = guess_property_type(val);
            if (T == -1) {
              T = 31;
              val = String(val);
            }
            pr = write_TypedPropertyValue(T, val);
          }
          prop.push(pr);
          pio = new_buf(8);
          pio.write_shift(4, !RE ? 2 + i2 : idx);
          piao.push(pio);
          sz += 8 + pr.length;
        }
        var w = 8 * (prop.length + 1);
        for (i2 = 0; i2 < prop.length; ++i2) {
          piao[i2].write_shift(4, w);
          w += prop[i2].length;
        }
        hdr.write_shift(4, sz);
        hdr.write_shift(4, prop.length);
        return bconcat([hdr].concat(piao).concat(prop));
      }
      function parse_PropertySetStream(file, PIDSI, clsid) {
        var blob = file.content;
        if (!blob)
          return {};
        prep_blob(blob, 0);
        var NumSets, FMTID0, FMTID1, Offset0, Offset1 = 0;
        blob.chk("feff", "Byte Order: ");
        blob.read_shift(2);
        var SystemIdentifier = blob.read_shift(4);
        var CLSID = blob.read_shift(16);
        if (CLSID !== CFB.utils.consts.HEADER_CLSID && CLSID !== clsid)
          throw new Error("Bad PropertySet CLSID " + CLSID);
        NumSets = blob.read_shift(4);
        if (NumSets !== 1 && NumSets !== 2)
          throw new Error("Unrecognized #Sets: " + NumSets);
        FMTID0 = blob.read_shift(16);
        Offset0 = blob.read_shift(4);
        if (NumSets === 1 && Offset0 !== blob.l)
          throw new Error("Length mismatch: " + Offset0 + " !== " + blob.l);
        else if (NumSets === 2) {
          FMTID1 = blob.read_shift(16);
          Offset1 = blob.read_shift(4);
        }
        var PSet0 = parse_PropertySet(blob, PIDSI);
        var rval = { SystemIdentifier };
        for (var y in PSet0)
          rval[y] = PSet0[y];
        rval.FMTID = FMTID0;
        if (NumSets === 1)
          return rval;
        if (Offset1 - blob.l == 2)
          blob.l += 2;
        if (blob.l !== Offset1)
          throw new Error("Length mismatch 2: " + blob.l + " !== " + Offset1);
        var PSet1;
        try {
          PSet1 = parse_PropertySet(blob, null);
        } catch (e) {
        }
        for (y in PSet1)
          rval[y] = PSet1[y];
        rval.FMTID = [FMTID0, FMTID1];
        return rval;
      }
      function write_PropertySetStream(entries, clsid, RE, PIDSI, entries2, clsid2) {
        var hdr = new_buf(entries2 ? 68 : 48);
        var bufs = [hdr];
        hdr.write_shift(2, 65534);
        hdr.write_shift(2, 0);
        hdr.write_shift(4, 842412599);
        hdr.write_shift(16, CFB.utils.consts.HEADER_CLSID, "hex");
        hdr.write_shift(4, entries2 ? 2 : 1);
        hdr.write_shift(16, clsid, "hex");
        hdr.write_shift(4, entries2 ? 68 : 48);
        var ps0 = write_PropertySet(entries, RE, PIDSI);
        bufs.push(ps0);
        if (entries2) {
          var ps1 = write_PropertySet(entries2, null, null);
          hdr.write_shift(16, clsid2, "hex");
          hdr.write_shift(4, 68 + ps0.length);
          bufs.push(ps1);
        }
        return bconcat(bufs);
      }
      function parsenoop2(blob, length) {
        blob.read_shift(length);
        return null;
      }
      function writezeroes(n, o) {
        if (!o)
          o = new_buf(n);
        for (var j = 0; j < n; ++j)
          o.write_shift(1, 0);
        return o;
      }
      function parslurp(blob, length, cb) {
        var arr = [], target = blob.l + length;
        while (blob.l < target)
          arr.push(cb(blob, target - blob.l));
        if (target !== blob.l)
          throw new Error("Slurp error");
        return arr;
      }
      function parsebool(blob, length) {
        return blob.read_shift(length) === 1;
      }
      function writebool(v, o) {
        if (!o)
          o = new_buf(2);
        o.write_shift(2, +!!v);
        return o;
      }
      function parseuint16(blob) {
        return blob.read_shift(2, "u");
      }
      function writeuint16(v, o) {
        if (!o)
          o = new_buf(2);
        o.write_shift(2, v);
        return o;
      }
      function parseuint16a(blob, length) {
        return parslurp(blob, length, parseuint16);
      }
      function parse_Bes(blob) {
        var v = blob.read_shift(1), t = blob.read_shift(1);
        return t === 1 ? v : v === 1;
      }
      function write_Bes(v, t, o) {
        if (!o)
          o = new_buf(2);
        o.write_shift(1, t == "e" ? +v : +!!v);
        o.write_shift(1, t == "e" ? 1 : 0);
        return o;
      }
      function parse_ShortXLUnicodeString(blob, length, opts) {
        var cch = blob.read_shift(opts && opts.biff >= 12 ? 2 : 1);
        var encoding = "sbcs-cont";
        var cp = current_codepage;
        if (opts && opts.biff >= 8)
          current_codepage = 1200;
        if (!opts || opts.biff == 8) {
          var fHighByte = blob.read_shift(1);
          if (fHighByte) {
            encoding = "dbcs-cont";
          }
        } else if (opts.biff == 12) {
          encoding = "wstr";
        }
        if (opts.biff >= 2 && opts.biff <= 5)
          encoding = "cpstr";
        var o = cch ? blob.read_shift(cch, encoding) : "";
        current_codepage = cp;
        return o;
      }
      function parse_XLUnicodeRichExtendedString(blob) {
        var cp = current_codepage;
        current_codepage = 1200;
        var cch = blob.read_shift(2), flags = blob.read_shift(1);
        var fExtSt = flags & 4, fRichSt = flags & 8;
        var width = 1 + (flags & 1);
        var cRun = 0, cbExtRst;
        var z = {};
        if (fRichSt)
          cRun = blob.read_shift(2);
        if (fExtSt)
          cbExtRst = blob.read_shift(4);
        var encoding = width == 2 ? "dbcs-cont" : "sbcs-cont";
        var msg = cch === 0 ? "" : blob.read_shift(cch, encoding);
        if (fRichSt)
          blob.l += 4 * cRun;
        if (fExtSt)
          blob.l += cbExtRst;
        z.t = msg;
        if (!fRichSt) {
          z.raw = "<t>" + z.t + "</t>";
          z.r = z.t;
        }
        current_codepage = cp;
        return z;
      }
      function write_XLUnicodeRichExtendedString(xlstr) {
        var str = xlstr.t || "", nfmts = 1;
        var hdr = new_buf(3 + (nfmts > 1 ? 2 : 0));
        hdr.write_shift(2, str.length);
        hdr.write_shift(1, (nfmts > 1 ? 8 : 0) | 1);
        if (nfmts > 1)
          hdr.write_shift(2, nfmts);
        var otext = new_buf(2 * str.length);
        otext.write_shift(2 * str.length, str, "utf16le");
        var out = [hdr, otext];
        return bconcat(out);
      }
      function parse_XLUnicodeStringNoCch(blob, cch, opts) {
        var retval;
        if (opts) {
          if (opts.biff >= 2 && opts.biff <= 5)
            return blob.read_shift(cch, "cpstr");
          if (opts.biff >= 12)
            return blob.read_shift(cch, "dbcs-cont");
        }
        var fHighByte = blob.read_shift(1);
        if (fHighByte === 0) {
          retval = blob.read_shift(cch, "sbcs-cont");
        } else {
          retval = blob.read_shift(cch, "dbcs-cont");
        }
        return retval;
      }
      function parse_XLUnicodeString(blob, length, opts) {
        var cch = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);
        if (cch === 0) {
          blob.l++;
          return "";
        }
        return parse_XLUnicodeStringNoCch(blob, cch, opts);
      }
      function parse_XLUnicodeString2(blob, length, opts) {
        if (opts.biff > 5)
          return parse_XLUnicodeString(blob, length, opts);
        var cch = blob.read_shift(1);
        if (cch === 0) {
          blob.l++;
          return "";
        }
        return blob.read_shift(cch, opts.biff <= 4 || !blob.lens ? "cpstr" : "sbcs-cont");
      }
      function write_XLUnicodeString(str, opts, o) {
        if (!o)
          o = new_buf(3 + 2 * str.length);
        o.write_shift(2, str.length);
        o.write_shift(1, 1);
        o.write_shift(31, str, "utf16le");
        return o;
      }
      function parse_ControlInfo(blob) {
        var flags = blob.read_shift(1);
        blob.l++;
        var accel = blob.read_shift(2);
        blob.l += 2;
        return [flags, accel];
      }
      function parse_URLMoniker(blob) {
        var len = blob.read_shift(4), start = blob.l;
        var extra = false;
        if (len > 24) {
          blob.l += len - 24;
          if (blob.read_shift(16) === "795881f43b1d7f48af2c825dc4852763")
            extra = true;
          blob.l = start;
        }
        var url = blob.read_shift((extra ? len - 24 : len) >> 1, "utf16le").replace(chr0, "");
        if (extra)
          blob.l += 24;
        return url;
      }
      function parse_FileMoniker(blob) {
        var cAnti = blob.read_shift(2);
        var preamble = "";
        while (cAnti-- > 0)
          preamble += "../";
        var ansiPath = blob.read_shift(0, "lpstr-ansi");
        blob.l += 2;
        if (blob.read_shift(2) != 57005)
          throw new Error("Bad FileMoniker");
        var sz = blob.read_shift(4);
        if (sz === 0)
          return preamble + ansiPath.replace(/\\/g, "/");
        var bytes = blob.read_shift(4);
        if (blob.read_shift(2) != 3)
          throw new Error("Bad FileMoniker");
        var unicodePath = blob.read_shift(bytes >> 1, "utf16le").replace(chr0, "");
        return preamble + unicodePath;
      }
      function parse_HyperlinkMoniker(blob, length) {
        var clsid = blob.read_shift(16);
        length -= 16;
        switch (clsid) {
          case "e0c9ea79f9bace118c8200aa004ba90b":
            return parse_URLMoniker(blob, length);
          case "0303000000000000c000000000000046":
            return parse_FileMoniker(blob, length);
          default:
            throw new Error("Unsupported Moniker " + clsid);
        }
      }
      function parse_HyperlinkString(blob) {
        var len = blob.read_shift(4);
        var o = len > 0 ? blob.read_shift(len, "utf16le").replace(chr0, "") : "";
        return o;
      }
      function write_HyperlinkString(str, o) {
        if (!o)
          o = new_buf(6 + str.length * 2);
        o.write_shift(4, 1 + str.length);
        for (var i2 = 0; i2 < str.length; ++i2)
          o.write_shift(2, str.charCodeAt(i2));
        o.write_shift(2, 0);
        return o;
      }
      function parse_Hyperlink(blob, length) {
        var end = blob.l + length;
        var sVer = blob.read_shift(4);
        if (sVer !== 2)
          throw new Error("Unrecognized streamVersion: " + sVer);
        var flags = blob.read_shift(2);
        blob.l += 2;
        var displayName, targetFrameName, moniker, oleMoniker, Loc = "", guid, fileTime;
        if (flags & 16)
          displayName = parse_HyperlinkString(blob, end - blob.l);
        if (flags & 128)
          targetFrameName = parse_HyperlinkString(blob, end - blob.l);
        if ((flags & 257) === 257)
          moniker = parse_HyperlinkString(blob, end - blob.l);
        if ((flags & 257) === 1)
          oleMoniker = parse_HyperlinkMoniker(blob, end - blob.l);
        if (flags & 8)
          Loc = parse_HyperlinkString(blob, end - blob.l);
        if (flags & 32)
          guid = blob.read_shift(16);
        if (flags & 64)
          fileTime = parse_FILETIME(blob);
        blob.l = end;
        var target = targetFrameName || moniker || oleMoniker || "";
        if (target && Loc)
          target += "#" + Loc;
        if (!target)
          target = "#" + Loc;
        if (flags & 2 && target.charAt(0) == "/" && target.charAt(1) != "/")
          target = "file://" + target;
        var out = { Target: target };
        if (guid)
          out.guid = guid;
        if (fileTime)
          out.time = fileTime;
        if (displayName)
          out.Tooltip = displayName;
        return out;
      }
      function write_Hyperlink(hl) {
        var out = new_buf(512), i2 = 0;
        var Target = hl.Target;
        if (Target.slice(0, 7) == "file://")
          Target = Target.slice(7);
        var hashidx = Target.indexOf("#");
        var F = hashidx > -1 ? 31 : 23;
        switch (Target.charAt(0)) {
          case "#":
            F = 28;
            break;
          case ".":
            F &= ~2;
            break;
        }
        out.write_shift(4, 2);
        out.write_shift(4, F);
        var data = [8, 6815827, 6619237, 4849780, 83];
        for (i2 = 0; i2 < data.length; ++i2)
          out.write_shift(4, data[i2]);
        if (F == 28) {
          Target = Target.slice(1);
          write_HyperlinkString(Target, out);
        } else if (F & 2) {
          data = "e0 c9 ea 79 f9 ba ce 11 8c 82 00 aa 00 4b a9 0b".split(" ");
          for (i2 = 0; i2 < data.length; ++i2)
            out.write_shift(1, parseInt(data[i2], 16));
          var Pretarget = hashidx > -1 ? Target.slice(0, hashidx) : Target;
          out.write_shift(4, 2 * (Pretarget.length + 1));
          for (i2 = 0; i2 < Pretarget.length; ++i2)
            out.write_shift(2, Pretarget.charCodeAt(i2));
          out.write_shift(2, 0);
          if (F & 8)
            write_HyperlinkString(hashidx > -1 ? Target.slice(hashidx + 1) : "", out);
        } else {
          data = "03 03 00 00 00 00 00 00 c0 00 00 00 00 00 00 46".split(" ");
          for (i2 = 0; i2 < data.length; ++i2)
            out.write_shift(1, parseInt(data[i2], 16));
          var P = 0;
          while (Target.slice(P * 3, P * 3 + 3) == "../" || Target.slice(P * 3, P * 3 + 3) == "..\\")
            ++P;
          out.write_shift(2, P);
          out.write_shift(4, Target.length - 3 * P + 1);
          for (i2 = 0; i2 < Target.length - 3 * P; ++i2)
            out.write_shift(1, Target.charCodeAt(i2 + 3 * P) & 255);
          out.write_shift(1, 0);
          out.write_shift(2, 65535);
          out.write_shift(2, 57005);
          for (i2 = 0; i2 < 6; ++i2)
            out.write_shift(4, 0);
        }
        return out.slice(0, out.l);
      }
      function parse_LongRGBA(blob) {
        var r = blob.read_shift(1), g = blob.read_shift(1), b = blob.read_shift(1), a = blob.read_shift(1);
        return [r, g, b, a];
      }
      function parse_LongRGB(blob, length) {
        var x = parse_LongRGBA(blob, length);
        x[3] = 0;
        return x;
      }
      function parse_XLSCell(blob) {
        var rw = blob.read_shift(2);
        var col = blob.read_shift(2);
        var ixfe = blob.read_shift(2);
        return { r: rw, c: col, ixfe };
      }
      function write_XLSCell(R, C, ixfe, o) {
        if (!o)
          o = new_buf(6);
        o.write_shift(2, R);
        o.write_shift(2, C);
        o.write_shift(2, ixfe || 0);
        return o;
      }
      function parse_frtHeader(blob) {
        var rt = blob.read_shift(2);
        var flags = blob.read_shift(2);
        blob.l += 8;
        return { type: rt, flags };
      }
      function parse_OptXLUnicodeString(blob, length, opts) {
        return length === 0 ? "" : parse_XLUnicodeString2(blob, length, opts);
      }
      function parse_XTI(blob, length, opts) {
        var w = opts.biff > 8 ? 4 : 2;
        var iSupBook = blob.read_shift(w), itabFirst = blob.read_shift(w, "i"), itabLast = blob.read_shift(w, "i");
        return [iSupBook, itabFirst, itabLast];
      }
      function parse_RkRec(blob) {
        var ixfe = blob.read_shift(2);
        var RK = parse_RkNumber(blob);
        return [ixfe, RK];
      }
      function parse_AddinUdf(blob, length, opts) {
        blob.l += 4;
        length -= 4;
        var l = blob.l + length;
        var udfName = parse_ShortXLUnicodeString(blob, length, opts);
        var cb = blob.read_shift(2);
        l -= blob.l;
        if (cb !== l)
          throw new Error("Malformed AddinUdf: padding = " + l + " != " + cb);
        blob.l += cb;
        return udfName;
      }
      function parse_Ref8U(blob) {
        var rwFirst = blob.read_shift(2);
        var rwLast = blob.read_shift(2);
        var colFirst = blob.read_shift(2);
        var colLast = blob.read_shift(2);
        return { s: { c: colFirst, r: rwFirst }, e: { c: colLast, r: rwLast } };
      }
      function write_Ref8U(r, o) {
        if (!o)
          o = new_buf(8);
        o.write_shift(2, r.s.r);
        o.write_shift(2, r.e.r);
        o.write_shift(2, r.s.c);
        o.write_shift(2, r.e.c);
        return o;
      }
      function parse_RefU(blob) {
        var rwFirst = blob.read_shift(2);
        var rwLast = blob.read_shift(2);
        var colFirst = blob.read_shift(1);
        var colLast = blob.read_shift(1);
        return { s: { c: colFirst, r: rwFirst }, e: { c: colLast, r: rwLast } };
      }
      var parse_Ref = parse_RefU;
      function parse_FtCmo(blob) {
        blob.l += 4;
        var ot = blob.read_shift(2);
        var id = blob.read_shift(2);
        var flags = blob.read_shift(2);
        blob.l += 12;
        return [id, ot, flags];
      }
      function parse_FtNts(blob) {
        var out = {};
        blob.l += 4;
        blob.l += 16;
        out.fSharedNote = blob.read_shift(2);
        blob.l += 4;
        return out;
      }
      function parse_FtCf(blob) {
        var out = {};
        blob.l += 4;
        blob.cf = blob.read_shift(2);
        return out;
      }
      function parse_FtSkip(blob) {
        blob.l += 2;
        blob.l += blob.read_shift(2);
      }
      var FtTab = {
        0: parse_FtSkip,
        4: parse_FtSkip,
        5: parse_FtSkip,
        6: parse_FtSkip,
        7: parse_FtCf,
        8: parse_FtSkip,
        9: parse_FtSkip,
        10: parse_FtSkip,
        11: parse_FtSkip,
        12: parse_FtSkip,
        13: parse_FtNts,
        14: parse_FtSkip,
        15: parse_FtSkip,
        16: parse_FtSkip,
        17: parse_FtSkip,
        18: parse_FtSkip,
        19: parse_FtSkip,
        20: parse_FtSkip,
        21: parse_FtCmo
      };
      function parse_FtArray(blob, length) {
        var tgt = blob.l + length;
        var fts = [];
        while (blob.l < tgt) {
          var ft = blob.read_shift(2);
          blob.l -= 2;
          try {
            fts.push(FtTab[ft](blob, tgt - blob.l));
          } catch (e) {
            blob.l = tgt;
            return fts;
          }
        }
        if (blob.l != tgt)
          blob.l = tgt;
        return fts;
      }
      function parse_BOF(blob, length) {
        var o = { BIFFVer: 0, dt: 0 };
        o.BIFFVer = blob.read_shift(2);
        length -= 2;
        if (length >= 2) {
          o.dt = blob.read_shift(2);
          blob.l -= 2;
        }
        switch (o.BIFFVer) {
          case 1536:
          case 1280:
          case 1024:
          case 768:
          case 512:
          case 2:
          case 7:
            break;
          default:
            if (length > 6)
              throw new Error("Unexpected BIFF Ver " + o.BIFFVer);
        }
        blob.read_shift(length);
        return o;
      }
      function write_BOF(wb, t, o) {
        var h = 1536, w = 16;
        switch (o.bookType) {
          case "biff8":
            break;
          case "biff5":
            h = 1280;
            w = 8;
            break;
          case "biff4":
            h = 4;
            w = 6;
            break;
          case "biff3":
            h = 3;
            w = 6;
            break;
          case "biff2":
            h = 2;
            w = 4;
            break;
          case "xla":
            break;
          default:
            throw new Error("unsupported BIFF version");
        }
        var out = new_buf(w);
        out.write_shift(2, h);
        out.write_shift(2, t);
        if (w > 4)
          out.write_shift(2, 29282);
        if (w > 6)
          out.write_shift(2, 1997);
        if (w > 8) {
          out.write_shift(2, 49161);
          out.write_shift(2, 1);
          out.write_shift(2, 1798);
          out.write_shift(2, 0);
        }
        return out;
      }
      function parse_InterfaceHdr(blob, length) {
        if (length === 0)
          return 1200;
        if (blob.read_shift(2) !== 1200) {
        }
        return 1200;
      }
      function parse_WriteAccess(blob, length, opts) {
        if (opts.enc) {
          blob.l += length;
          return "";
        }
        var l = blob.l;
        var UserName = parse_XLUnicodeString2(blob, 0, opts);
        blob.read_shift(length + l - blob.l);
        return UserName;
      }
      function write_WriteAccess(s, opts) {
        var b8 = !opts || opts.biff == 8;
        var o = new_buf(b8 ? 112 : 54);
        o.write_shift(opts.biff == 8 ? 2 : 1, 7);
        if (b8)
          o.write_shift(1, 0);
        o.write_shift(4, 859007059);
        o.write_shift(4, 5458548 | (b8 ? 0 : 536870912));
        while (o.l < o.length)
          o.write_shift(1, b8 ? 0 : 32);
        return o;
      }
      function parse_WsBool(blob, length, opts) {
        var flags = opts && opts.biff == 8 || length == 2 ? blob.read_shift(2) : (blob.l += length, 0);
        return { fDialog: flags & 16, fBelow: flags & 64, fRight: flags & 128 };
      }
      function parse_BoundSheet8(blob, length, opts) {
        var pos = blob.read_shift(4);
        var hidden = blob.read_shift(1) & 3;
        var dt = blob.read_shift(1);
        switch (dt) {
          case 0:
            dt = "Worksheet";
            break;
          case 1:
            dt = "Macrosheet";
            break;
          case 2:
            dt = "Chartsheet";
            break;
          case 6:
            dt = "VBAModule";
            break;
        }
        var name2 = parse_ShortXLUnicodeString(blob, 0, opts);
        if (name2.length === 0)
          name2 = "Sheet1";
        return { pos, hs: hidden, dt, name: name2 };
      }
      function write_BoundSheet8(data, opts) {
        var w = !opts || opts.biff >= 8 ? 2 : 1;
        var o = new_buf(8 + w * data.name.length);
        o.write_shift(4, data.pos);
        o.write_shift(1, data.hs || 0);
        o.write_shift(1, data.dt);
        o.write_shift(1, data.name.length);
        if (opts.biff >= 8)
          o.write_shift(1, 1);
        o.write_shift(w * data.name.length, data.name, opts.biff < 8 ? "sbcs" : "utf16le");
        var out = o.slice(0, o.l);
        out.l = o.l;
        return out;
      }
      function parse_SST(blob, length) {
        var end = blob.l + length;
        var cnt = blob.read_shift(4);
        var ucnt = blob.read_shift(4);
        var strs2 = [];
        for (var i2 = 0; i2 != ucnt && blob.l < end; ++i2) {
          strs2.push(parse_XLUnicodeRichExtendedString(blob));
        }
        strs2.Count = cnt;
        strs2.Unique = ucnt;
        return strs2;
      }
      function write_SST(sst, opts) {
        var header = new_buf(8);
        header.write_shift(4, sst.Count);
        header.write_shift(4, sst.Unique);
        var strs2 = [];
        for (var j = 0; j < sst.length; ++j)
          strs2[j] = write_XLUnicodeRichExtendedString(sst[j], opts);
        var o = bconcat([header].concat(strs2));
        o.parts = [header.length].concat(strs2.map(function(str) {
          return str.length;
        }));
        return o;
      }
      function parse_ExtSST(blob, length) {
        var extsst = {};
        extsst.dsst = blob.read_shift(2);
        blob.l += length - 2;
        return extsst;
      }
      function parse_Row(blob) {
        var z = {};
        z.r = blob.read_shift(2);
        z.c = blob.read_shift(2);
        z.cnt = blob.read_shift(2) - z.c;
        var miyRw = blob.read_shift(2);
        blob.l += 4;
        var flags = blob.read_shift(1);
        blob.l += 3;
        if (flags & 7)
          z.level = flags & 7;
        if (flags & 32)
          z.hidden = true;
        if (flags & 64)
          z.hpt = miyRw / 20;
        return z;
      }
      function parse_ForceFullCalculation(blob) {
        var header = parse_frtHeader(blob);
        if (header.type != 2211)
          throw new Error("Invalid Future Record " + header.type);
        var fullcalc = blob.read_shift(4);
        return fullcalc !== 0;
      }
      function parse_RecalcId(blob) {
        blob.read_shift(2);
        return blob.read_shift(4);
      }
      function parse_DefaultRowHeight(blob, length, opts) {
        var f = 0;
        if (!(opts && opts.biff == 2)) {
          f = blob.read_shift(2);
        }
        var miyRw = blob.read_shift(2);
        if (opts && opts.biff == 2) {
          f = 1 - (miyRw >> 15);
          miyRw &= 32767;
        }
        var fl = { Unsynced: f & 1, DyZero: (f & 2) >> 1, ExAsc: (f & 4) >> 2, ExDsc: (f & 8) >> 3 };
        return [fl, miyRw];
      }
      function parse_Window1(blob) {
        var xWn = blob.read_shift(2), yWn = blob.read_shift(2), dxWn = blob.read_shift(2), dyWn = blob.read_shift(2);
        var flags = blob.read_shift(2), iTabCur = blob.read_shift(2), iTabFirst = blob.read_shift(2);
        var ctabSel = blob.read_shift(2), wTabRatio = blob.read_shift(2);
        return {
          Pos: [xWn, yWn],
          Dim: [dxWn, dyWn],
          Flags: flags,
          CurTab: iTabCur,
          FirstTab: iTabFirst,
          Selected: ctabSel,
          TabRatio: wTabRatio
        };
      }
      function write_Window1() {
        var o = new_buf(18);
        o.write_shift(2, 0);
        o.write_shift(2, 0);
        o.write_shift(2, 29280);
        o.write_shift(2, 17600);
        o.write_shift(2, 56);
        o.write_shift(2, 0);
        o.write_shift(2, 0);
        o.write_shift(2, 1);
        o.write_shift(2, 500);
        return o;
      }
      function parse_Window2(blob, length, opts) {
        if (opts && opts.biff >= 2 && opts.biff < 5)
          return {};
        var f = blob.read_shift(2);
        return { RTL: f & 64 };
      }
      function write_Window2(view) {
        var o = new_buf(18), f = 1718;
        if (view && view.RTL)
          f |= 64;
        o.write_shift(2, f);
        o.write_shift(4, 0);
        o.write_shift(4, 64);
        o.write_shift(4, 0);
        o.write_shift(4, 0);
        return o;
      }
      function parse_Pane() {
      }
      function parse_Font(blob, length, opts) {
        var o = {
          dyHeight: blob.read_shift(2),
          fl: blob.read_shift(2)
        };
        switch (opts && opts.biff || 8) {
          case 2:
            break;
          case 3:
          case 4:
            blob.l += 2;
            break;
          default:
            blob.l += 10;
            break;
        }
        o.name = parse_ShortXLUnicodeString(blob, 0, opts);
        return o;
      }
      function write_Font(data, opts) {
        var name2 = data.name || "Arial";
        var b5 = opts && opts.biff == 5, w = b5 ? 15 + name2.length : 16 + 2 * name2.length;
        var o = new_buf(w);
        o.write_shift(2, (data.sz || 12) * 20);
        o.write_shift(4, 0);
        o.write_shift(2, 400);
        o.write_shift(4, 0);
        o.write_shift(2, 0);
        o.write_shift(1, name2.length);
        if (!b5)
          o.write_shift(1, 1);
        o.write_shift((b5 ? 1 : 2) * name2.length, name2, b5 ? "sbcs" : "utf16le");
        return o;
      }
      function parse_LabelSst(blob) {
        var cell = parse_XLSCell(blob);
        cell.isst = blob.read_shift(4);
        return cell;
      }
      function write_LabelSst(R, C, v, os) {
        var o = new_buf(10);
        write_XLSCell(R, C, os, o);
        o.write_shift(4, v);
        return o;
      }
      function parse_Label(blob, length, opts) {
        if (opts.biffguess && opts.biff == 2)
          opts.biff = 5;
        var target = blob.l + length;
        var cell = parse_XLSCell(blob, 6);
        if (opts.biff == 2)
          blob.l++;
        var str = parse_XLUnicodeString(blob, target - blob.l, opts);
        cell.val = str;
        return cell;
      }
      function write_Label(R, C, v, os, opts) {
        var b8 = !opts || opts.biff == 8;
        var o = new_buf(6 + 2 + +b8 + (1 + b8) * v.length);
        write_XLSCell(R, C, os, o);
        o.write_shift(2, v.length);
        if (b8)
          o.write_shift(1, 1);
        o.write_shift((1 + b8) * v.length, v, b8 ? "utf16le" : "sbcs");
        return o;
      }
      function parse_Format(blob, length, opts) {
        var numFmtId = blob.read_shift(2);
        var fmtstr = parse_XLUnicodeString2(blob, 0, opts);
        return [numFmtId, fmtstr];
      }
      function write_Format(i2, f, opts, o) {
        var b5 = opts && opts.biff == 5;
        if (!o)
          o = new_buf(b5 ? 3 + f.length : 5 + 2 * f.length);
        o.write_shift(2, i2);
        o.write_shift(b5 ? 1 : 2, f.length);
        if (!b5)
          o.write_shift(1, 1);
        o.write_shift((b5 ? 1 : 2) * f.length, f, b5 ? "sbcs" : "utf16le");
        var out = o.length > o.l ? o.slice(0, o.l) : o;
        if (out.l == null)
          out.l = out.length;
        return out;
      }
      var parse_BIFF2Format = parse_XLUnicodeString2;
      function parse_Dimensions(blob, length, opts) {
        var end = blob.l + length;
        var w = opts.biff == 8 || !opts.biff ? 4 : 2;
        var r = blob.read_shift(w), R = blob.read_shift(w);
        var c = blob.read_shift(2), C = blob.read_shift(2);
        blob.l = end;
        return { s: { r, c }, e: { r: R, c: C } };
      }
      function write_Dimensions(range, opts) {
        var w = opts.biff == 8 || !opts.biff ? 4 : 2;
        var o = new_buf(2 * w + 6);
        o.write_shift(w, range.s.r);
        o.write_shift(w, range.e.r + 1);
        o.write_shift(2, range.s.c);
        o.write_shift(2, range.e.c + 1);
        o.write_shift(2, 0);
        return o;
      }
      function parse_RK(blob) {
        var rw = blob.read_shift(2), col = blob.read_shift(2);
        var rkrec = parse_RkRec(blob);
        return { r: rw, c: col, ixfe: rkrec[0], rknum: rkrec[1] };
      }
      function parse_MulRk(blob, length) {
        var target = blob.l + length - 2;
        var rw = blob.read_shift(2), col = blob.read_shift(2);
        var rkrecs = [];
        while (blob.l < target)
          rkrecs.push(parse_RkRec(blob));
        if (blob.l !== target)
          throw new Error("MulRK read error");
        var lastcol = blob.read_shift(2);
        if (rkrecs.length != lastcol - col + 1)
          throw new Error("MulRK length mismatch");
        return { r: rw, c: col, C: lastcol, rkrec: rkrecs };
      }
      function parse_MulBlank(blob, length) {
        var target = blob.l + length - 2;
        var rw = blob.read_shift(2), col = blob.read_shift(2);
        var ixfes = [];
        while (blob.l < target)
          ixfes.push(blob.read_shift(2));
        if (blob.l !== target)
          throw new Error("MulBlank read error");
        var lastcol = blob.read_shift(2);
        if (ixfes.length != lastcol - col + 1)
          throw new Error("MulBlank length mismatch");
        return { r: rw, c: col, C: lastcol, ixfe: ixfes };
      }
      function parse_CellStyleXF(blob, length, style, opts) {
        var o = {};
        var a = blob.read_shift(4), b = blob.read_shift(4);
        var c = blob.read_shift(4), d = blob.read_shift(2);
        o.patternType = XLSFillPattern[c >> 26];
        if (!opts.cellStyles)
          return o;
        o.alc = a & 7;
        o.fWrap = a >> 3 & 1;
        o.alcV = a >> 4 & 7;
        o.fJustLast = a >> 7 & 1;
        o.trot = a >> 8 & 255;
        o.cIndent = a >> 16 & 15;
        o.fShrinkToFit = a >> 20 & 1;
        o.iReadOrder = a >> 22 & 2;
        o.fAtrNum = a >> 26 & 1;
        o.fAtrFnt = a >> 27 & 1;
        o.fAtrAlc = a >> 28 & 1;
        o.fAtrBdr = a >> 29 & 1;
        o.fAtrPat = a >> 30 & 1;
        o.fAtrProt = a >> 31 & 1;
        o.dgLeft = b & 15;
        o.dgRight = b >> 4 & 15;
        o.dgTop = b >> 8 & 15;
        o.dgBottom = b >> 12 & 15;
        o.icvLeft = b >> 16 & 127;
        o.icvRight = b >> 23 & 127;
        o.grbitDiag = b >> 30 & 3;
        o.icvTop = c & 127;
        o.icvBottom = c >> 7 & 127;
        o.icvDiag = c >> 14 & 127;
        o.dgDiag = c >> 21 & 15;
        o.icvFore = d & 127;
        o.icvBack = d >> 7 & 127;
        o.fsxButton = d >> 14 & 1;
        return o;
      }
      function parse_XF(blob, length, opts) {
        var o = {};
        o.ifnt = blob.read_shift(2);
        o.numFmtId = blob.read_shift(2);
        o.flags = blob.read_shift(2);
        o.fStyle = o.flags >> 2 & 1;
        length -= 6;
        o.data = parse_CellStyleXF(blob, length, o.fStyle, opts);
        return o;
      }
      function write_XF(data, ixfeP, opts, o) {
        var b5 = opts && opts.biff == 5;
        if (!o)
          o = new_buf(b5 ? 16 : 20);
        o.write_shift(2, 0);
        if (data.style) {
          o.write_shift(2, data.numFmtId || 0);
          o.write_shift(2, 65524);
        } else {
          o.write_shift(2, data.numFmtId || 0);
          o.write_shift(2, ixfeP << 4);
        }
        var f = 0;
        if (data.numFmtId > 0 && b5)
          f |= 1024;
        o.write_shift(4, f);
        o.write_shift(4, 0);
        if (!b5)
          o.write_shift(4, 0);
        o.write_shift(2, 0);
        return o;
      }
      function parse_Guts(blob) {
        blob.l += 4;
        var out = [blob.read_shift(2), blob.read_shift(2)];
        if (out[0] !== 0)
          out[0]--;
        if (out[1] !== 0)
          out[1]--;
        if (out[0] > 7 || out[1] > 7)
          throw new Error("Bad Gutters: " + out.join("|"));
        return out;
      }
      function write_Guts(guts) {
        var o = new_buf(8);
        o.write_shift(4, 0);
        o.write_shift(2, guts[0] ? guts[0] + 1 : 0);
        o.write_shift(2, guts[1] ? guts[1] + 1 : 0);
        return o;
      }
      function parse_BoolErr(blob, length, opts) {
        var cell = parse_XLSCell(blob, 6);
        if (opts.biff == 2 || length == 9)
          ++blob.l;
        var val = parse_Bes(blob, 2);
        cell.val = val;
        cell.t = val === true || val === false ? "b" : "e";
        return cell;
      }
      function write_BoolErr(R, C, v, os, opts, t) {
        var o = new_buf(8);
        write_XLSCell(R, C, os, o);
        write_Bes(v, t, o);
        return o;
      }
      function parse_Number(blob, length, opts) {
        if (opts.biffguess && opts.biff == 2)
          opts.biff = 5;
        var cell = parse_XLSCell(blob, 6);
        var xnum = parse_Xnum(blob, 8);
        cell.val = xnum;
        return cell;
      }
      function write_Number(R, C, v, os) {
        var o = new_buf(14);
        write_XLSCell(R, C, os, o);
        write_Xnum(v, o);
        return o;
      }
      var parse_XLHeaderFooter = parse_OptXLUnicodeString;
      function parse_SupBook(blob, length, opts) {
        var end = blob.l + length;
        var ctab = blob.read_shift(2);
        var cch = blob.read_shift(2);
        opts.sbcch = cch;
        if (cch == 1025 || cch == 14849)
          return [cch, ctab];
        if (cch < 1 || cch > 255)
          throw new Error("Unexpected SupBook type: " + cch);
        var virtPath = parse_XLUnicodeStringNoCch(blob, cch);
        var rgst = [];
        while (end > blob.l)
          rgst.push(parse_XLUnicodeString(blob));
        return [cch, ctab, virtPath, rgst];
      }
      function parse_ExternName(blob, length, opts) {
        var flags = blob.read_shift(2);
        var body;
        var o = {
          fBuiltIn: flags & 1,
          fWantAdvise: flags >>> 1 & 1,
          fWantPict: flags >>> 2 & 1,
          fOle: flags >>> 3 & 1,
          fOleLink: flags >>> 4 & 1,
          cf: flags >>> 5 & 1023,
          fIcon: flags >>> 15 & 1
        };
        if (opts.sbcch === 14849)
          body = parse_AddinUdf(blob, length - 2, opts);
        o.body = body || blob.read_shift(length - 2);
        if (typeof body === "string")
          o.Name = body;
        return o;
      }
      var XLSLblBuiltIn = [
        "_xlnm.Consolidate_Area",
        "_xlnm.Auto_Open",
        "_xlnm.Auto_Close",
        "_xlnm.Extract",
        "_xlnm.Database",
        "_xlnm.Criteria",
        "_xlnm.Print_Area",
        "_xlnm.Print_Titles",
        "_xlnm.Recorder",
        "_xlnm.Data_Form",
        "_xlnm.Auto_Activate",
        "_xlnm.Auto_Deactivate",
        "_xlnm.Sheet_Title",
        "_xlnm._FilterDatabase"
      ];
      function parse_Lbl(blob, length, opts) {
        var target = blob.l + length;
        var flags = blob.read_shift(2);
        var chKey = blob.read_shift(1);
        var cch = blob.read_shift(1);
        var cce = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);
        var itab = 0;
        if (!opts || opts.biff >= 5) {
          if (opts.biff != 5)
            blob.l += 2;
          itab = blob.read_shift(2);
          if (opts.biff == 5)
            blob.l += 2;
          blob.l += 4;
        }
        var name2 = parse_XLUnicodeStringNoCch(blob, cch, opts);
        if (flags & 32)
          name2 = XLSLblBuiltIn[name2.charCodeAt(0)];
        var npflen = target - blob.l;
        if (opts && opts.biff == 2)
          --npflen;
        var rgce = target == blob.l || cce === 0 || !(npflen > 0) ? [] : parse_NameParsedFormula(blob, npflen, opts, cce);
        return {
          chKey,
          Name: name2,
          itab,
          rgce
        };
      }
      function parse_ExternSheet(blob, length, opts) {
        if (opts.biff < 8)
          return parse_BIFF5ExternSheet(blob, length, opts);
        var o = [], target = blob.l + length, len = blob.read_shift(opts.biff > 8 ? 4 : 2);
        while (len-- !== 0)
          o.push(parse_XTI(blob, opts.biff > 8 ? 12 : 6, opts));
        if (blob.l != target)
          throw new Error("Bad ExternSheet: " + blob.l + " != " + target);
        return o;
      }
      function parse_BIFF5ExternSheet(blob, length, opts) {
        if (blob[blob.l + 1] == 3)
          blob[blob.l]++;
        var o = parse_ShortXLUnicodeString(blob, length, opts);
        return o.charCodeAt(0) == 3 ? o.slice(1) : o;
      }
      function parse_NameCmt(blob, length, opts) {
        if (opts.biff < 8) {
          blob.l += length;
          return;
        }
        var cchName = blob.read_shift(2);
        var cchComment = blob.read_shift(2);
        var name2 = parse_XLUnicodeStringNoCch(blob, cchName, opts);
        var comment = parse_XLUnicodeStringNoCch(blob, cchComment, opts);
        return [name2, comment];
      }
      function parse_ShrFmla(blob, length, opts) {
        var ref = parse_RefU(blob, 6);
        blob.l++;
        var cUse = blob.read_shift(1);
        length -= 8;
        return [parse_SharedParsedFormula(blob, length, opts), cUse, ref];
      }
      function parse_Array(blob, length, opts) {
        var ref = parse_Ref(blob, 6);
        switch (opts.biff) {
          case 2:
            blob.l++;
            length -= 7;
            break;
          case 3:
          case 4:
            blob.l += 2;
            length -= 8;
            break;
          default:
            blob.l += 6;
            length -= 12;
        }
        return [ref, parse_ArrayParsedFormula(blob, length, opts, ref)];
      }
      function parse_MTRSettings(blob) {
        var fMTREnabled = blob.read_shift(4) !== 0;
        var fUserSetThreadCount = blob.read_shift(4) !== 0;
        var cUserThreadCount = blob.read_shift(4);
        return [fMTREnabled, fUserSetThreadCount, cUserThreadCount];
      }
      function parse_NoteSh(blob, length, opts) {
        if (opts.biff < 8)
          return;
        var row = blob.read_shift(2), col = blob.read_shift(2);
        var flags = blob.read_shift(2), idObj = blob.read_shift(2);
        var stAuthor = parse_XLUnicodeString2(blob, 0, opts);
        if (opts.biff < 8)
          blob.read_shift(1);
        return [{ r: row, c: col }, stAuthor, idObj, flags];
      }
      function parse_Note(blob, length, opts) {
        return parse_NoteSh(blob, length, opts);
      }
      function parse_MergeCells(blob, length) {
        var merges = [];
        var cmcs = blob.read_shift(2);
        while (cmcs--)
          merges.push(parse_Ref8U(blob, length));
        return merges;
      }
      function write_MergeCells(merges) {
        var o = new_buf(2 + merges.length * 8);
        o.write_shift(2, merges.length);
        for (var i2 = 0; i2 < merges.length; ++i2)
          write_Ref8U(merges[i2], o);
        return o;
      }
      function parse_Obj(blob, length, opts) {
        if (opts && opts.biff < 8)
          return parse_BIFF5Obj(blob, length, opts);
        var cmo = parse_FtCmo(blob, 22);
        var fts = parse_FtArray(blob, length - 22, cmo[1]);
        return { cmo, ft: fts };
      }
      var parse_BIFF5OT = [];
      parse_BIFF5OT[8] = function(blob, length) {
        var tgt = blob.l + length;
        blob.l += 10;
        var cf = blob.read_shift(2);
        blob.l += 4;
        blob.l += 2;
        blob.l += 2;
        blob.l += 2;
        blob.l += 4;
        var cchName = blob.read_shift(1);
        blob.l += cchName;
        blob.l = tgt;
        return { fmt: cf };
      };
      function parse_BIFF5Obj(blob, length, opts) {
        blob.l += 4;
        var ot = blob.read_shift(2);
        var id = blob.read_shift(2);
        var grbit = blob.read_shift(2);
        blob.l += 2;
        blob.l += 2;
        blob.l += 2;
        blob.l += 2;
        blob.l += 2;
        blob.l += 2;
        blob.l += 2;
        blob.l += 2;
        blob.l += 2;
        blob.l += 6;
        length -= 36;
        var fts = [];
        fts.push((parse_BIFF5OT[ot] || parsenoop)(blob, length, opts));
        return { cmo: [id, ot, grbit], ft: fts };
      }
      function parse_TxO(blob, length, opts) {
        var s = blob.l;
        var texts = "";
        try {
          blob.l += 4;
          var ot = (opts.lastobj || { cmo: [0, 0] }).cmo[1];
          var controlInfo;
          if ([0, 5, 7, 11, 12, 14].indexOf(ot) == -1)
            blob.l += 6;
          else
            controlInfo = parse_ControlInfo(blob, 6, opts);
          var cchText = blob.read_shift(2);
          blob.read_shift(2);
          parseuint16(blob, 2);
          var len = blob.read_shift(2);
          blob.l += len;
          for (var i2 = 1; i2 < blob.lens.length - 1; ++i2) {
            if (blob.l - s != blob.lens[i2])
              throw new Error("TxO: bad continue record");
            var hdr = blob[blob.l];
            var t = parse_XLUnicodeStringNoCch(blob, blob.lens[i2 + 1] - blob.lens[i2] - 1);
            texts += t;
            if (texts.length >= (hdr ? cchText : 2 * cchText))
              break;
          }
          if (texts.length !== cchText && texts.length !== cchText * 2) {
            throw new Error("cchText: " + cchText + " != " + texts.length);
          }
          blob.l = s + length;
          return { t: texts };
        } catch (e) {
          blob.l = s + length;
          return { t: texts };
        }
      }
      function parse_HLink(blob, length) {
        var ref = parse_Ref8U(blob, 8);
        blob.l += 16;
        var hlink = parse_Hyperlink(blob, length - 24);
        return [ref, hlink];
      }
      function write_HLink(hl) {
        var O = new_buf(24);
        var ref = decode_cell(hl[0]);
        O.write_shift(2, ref.r);
        O.write_shift(2, ref.r);
        O.write_shift(2, ref.c);
        O.write_shift(2, ref.c);
        var clsid = "d0 c9 ea 79 f9 ba ce 11 8c 82 00 aa 00 4b a9 0b".split(" ");
        for (var i2 = 0; i2 < 16; ++i2)
          O.write_shift(1, parseInt(clsid[i2], 16));
        return bconcat([O, write_Hyperlink(hl[1])]);
      }
      function parse_HLinkTooltip(blob, length) {
        blob.read_shift(2);
        var ref = parse_Ref8U(blob, 8);
        var wzTooltip = blob.read_shift((length - 10) / 2, "dbcs-cont");
        wzTooltip = wzTooltip.replace(chr0, "");
        return [ref, wzTooltip];
      }
      function write_HLinkTooltip(hl) {
        var TT = hl[1].Tooltip;
        var O = new_buf(10 + 2 * (TT.length + 1));
        O.write_shift(2, 2048);
        var ref = decode_cell(hl[0]);
        O.write_shift(2, ref.r);
        O.write_shift(2, ref.r);
        O.write_shift(2, ref.c);
        O.write_shift(2, ref.c);
        for (var i2 = 0; i2 < TT.length; ++i2)
          O.write_shift(2, TT.charCodeAt(i2));
        O.write_shift(2, 0);
        return O;
      }
      function parse_Country(blob) {
        var o = [0, 0], d;
        d = blob.read_shift(2);
        o[0] = CountryEnum[d] || d;
        d = blob.read_shift(2);
        o[1] = CountryEnum[d] || d;
        return o;
      }
      function write_Country(o) {
        if (!o)
          o = new_buf(4);
        o.write_shift(2, 1);
        o.write_shift(2, 1);
        return o;
      }
      function parse_ClrtClient(blob) {
        var ccv = blob.read_shift(2);
        var o = [];
        while (ccv-- > 0)
          o.push(parse_LongRGB(blob, 8));
        return o;
      }
      function parse_Palette(blob) {
        var ccv = blob.read_shift(2);
        var o = [];
        while (ccv-- > 0)
          o.push(parse_LongRGB(blob, 8));
        return o;
      }
      function parse_XFCRC(blob) {
        blob.l += 2;
        var o = { cxfs: 0, crc: 0 };
        o.cxfs = blob.read_shift(2);
        o.crc = blob.read_shift(4);
        return o;
      }
      function parse_ColInfo(blob, length, opts) {
        if (!opts.cellStyles)
          return parsenoop(blob, length);
        var w = opts && opts.biff >= 12 ? 4 : 2;
        var colFirst = blob.read_shift(w);
        var colLast = blob.read_shift(w);
        var coldx = blob.read_shift(w);
        var ixfe = blob.read_shift(w);
        var flags = blob.read_shift(2);
        if (w == 2)
          blob.l += 2;
        var o = { s: colFirst, e: colLast, w: coldx, ixfe, flags };
        if (opts.biff >= 5 || !opts.biff)
          o.level = flags >> 8 & 7;
        return o;
      }
      function write_ColInfo(col, idx) {
        var o = new_buf(12);
        o.write_shift(2, idx);
        o.write_shift(2, idx);
        o.write_shift(2, col.width * 256);
        o.write_shift(2, 0);
        var f = 0;
        if (col.hidden)
          f |= 1;
        o.write_shift(1, f);
        f = col.level || 0;
        o.write_shift(1, f);
        o.write_shift(2, 0);
        return o;
      }
      function parse_Setup(blob, length) {
        var o = {};
        if (length < 32)
          return o;
        blob.l += 16;
        o.header = parse_Xnum(blob, 8);
        o.footer = parse_Xnum(blob, 8);
        blob.l += 2;
        return o;
      }
      function parse_ShtProps(blob, length, opts) {
        var def = { area: false };
        if (opts.biff != 5) {
          blob.l += length;
          return def;
        }
        var d = blob.read_shift(1);
        blob.l += 3;
        if (d & 16)
          def.area = true;
        return def;
      }
      function write_RRTabId(n) {
        var out = new_buf(2 * n);
        for (var i2 = 0; i2 < n; ++i2)
          out.write_shift(2, i2 + 1);
        return out;
      }
      var parse_Blank = parse_XLSCell;
      var parse_Scl = parseuint16a;
      var parse_String = parse_XLUnicodeString;
      function parse_ImData(blob) {
        var cf = blob.read_shift(2);
        var env2 = blob.read_shift(2);
        var lcb = blob.read_shift(4);
        var o = { fmt: cf, env: env2, len: lcb, data: blob.slice(blob.l, blob.l + lcb) };
        blob.l += lcb;
        return o;
      }
      function parse_BIFF2STR(blob, length, opts) {
        if (opts.biffguess && opts.biff == 5)
          opts.biff = 2;
        var cell = parse_XLSCell(blob, 6);
        ++blob.l;
        var str = parse_XLUnicodeString2(blob, length - 7, opts);
        cell.t = "str";
        cell.val = str;
        return cell;
      }
      function parse_BIFF2NUM(blob) {
        var cell = parse_XLSCell(blob, 6);
        ++blob.l;
        var num = parse_Xnum(blob, 8);
        cell.t = "n";
        cell.val = num;
        return cell;
      }
      function write_BIFF2NUM(r, c, val) {
        var out = new_buf(15);
        write_BIFF2Cell(out, r, c);
        out.write_shift(8, val, "f");
        return out;
      }
      function parse_BIFF2INT(blob) {
        var cell = parse_XLSCell(blob, 6);
        ++blob.l;
        var num = blob.read_shift(2);
        cell.t = "n";
        cell.val = num;
        return cell;
      }
      function write_BIFF2INT(r, c, val) {
        var out = new_buf(9);
        write_BIFF2Cell(out, r, c);
        out.write_shift(2, val);
        return out;
      }
      function parse_BIFF2STRING(blob) {
        var cch = blob.read_shift(1);
        if (cch === 0) {
          blob.l++;
          return "";
        }
        return blob.read_shift(cch, "sbcs-cont");
      }
      function parse_BIFF2FONTXTRA(blob, length) {
        blob.l += 6;
        blob.l += 2;
        blob.l += 1;
        blob.l += 3;
        blob.l += 1;
        blob.l += length - 13;
      }
      function parse_RString(blob, length, opts) {
        var end = blob.l + length;
        var cell = parse_XLSCell(blob, 6);
        var cch = blob.read_shift(2);
        var str = parse_XLUnicodeStringNoCch(blob, cch, opts);
        blob.l = end;
        cell.t = "str";
        cell.val = str;
        return cell;
      }
      var DBF = function() {
        var dbf_codepage_map = {
          1: 437,
          2: 850,
          3: 1252,
          4: 1e4,
          100: 852,
          101: 866,
          102: 865,
          103: 861,
          104: 895,
          105: 620,
          106: 737,
          107: 857,
          120: 950,
          121: 949,
          122: 936,
          123: 932,
          124: 874,
          125: 1255,
          126: 1256,
          150: 10007,
          151: 10029,
          152: 10006,
          200: 1250,
          201: 1251,
          202: 1254,
          203: 1253,
          0: 20127,
          8: 865,
          9: 437,
          10: 850,
          11: 437,
          13: 437,
          14: 850,
          15: 437,
          16: 850,
          17: 437,
          18: 850,
          19: 932,
          20: 850,
          21: 437,
          22: 850,
          23: 865,
          24: 437,
          25: 437,
          26: 850,
          27: 437,
          28: 863,
          29: 850,
          31: 852,
          34: 852,
          35: 852,
          36: 860,
          37: 850,
          38: 866,
          55: 850,
          64: 852,
          77: 936,
          78: 949,
          79: 950,
          80: 874,
          87: 1252,
          88: 1252,
          89: 1252,
          108: 863,
          134: 737,
          135: 852,
          136: 857,
          204: 1257,
          255: 16969
        };
        var dbf_reverse_map = evert({
          1: 437,
          2: 850,
          3: 1252,
          4: 1e4,
          100: 852,
          101: 866,
          102: 865,
          103: 861,
          104: 895,
          105: 620,
          106: 737,
          107: 857,
          120: 950,
          121: 949,
          122: 936,
          123: 932,
          124: 874,
          125: 1255,
          126: 1256,
          150: 10007,
          151: 10029,
          152: 10006,
          200: 1250,
          201: 1251,
          202: 1254,
          203: 1253,
          0: 20127
        });
        var DBF_SUPPORTED_VERSIONS = [2, 3, 48, 49, 131, 139, 140, 245];
        function dbf_to_aoa(buf, opts) {
          var out = [];
          var d = new_raw_buf(1);
          switch (opts.type) {
            case "base64":
              d = s2a(Base64.decode(buf));
              break;
            case "binary":
              d = s2a(buf);
              break;
            case "buffer":
            case "array":
              d = buf;
              break;
          }
          prep_blob(d, 0);
          var ft = d.read_shift(1);
          var memo = !!(ft & 136);
          var vfp = false, l7 = false;
          switch (ft) {
            case 2:
              break;
            case 3:
              break;
            case 48:
              vfp = true;
              memo = true;
              break;
            case 49:
              vfp = true;
              memo = true;
              break;
            case 131:
              break;
            case 139:
              break;
            case 140:
              l7 = true;
              break;
            case 245:
              break;
            default:
              throw new Error("DBF Unsupported Version: " + ft.toString(16));
          }
          var nrow = 0, fpos = 521;
          if (ft == 2)
            nrow = d.read_shift(2);
          d.l += 3;
          if (ft != 2)
            nrow = d.read_shift(4);
          if (nrow > 1048576)
            nrow = 1e6;
          if (ft != 2)
            fpos = d.read_shift(2);
          var rlen = d.read_shift(2);
          var current_cp = opts.codepage || 1252;
          if (ft != 2) {
            d.l += 16;
            d.read_shift(1);
            if (d[d.l] !== 0)
              current_cp = dbf_codepage_map[d[d.l]];
            d.l += 1;
            d.l += 2;
          }
          if (l7)
            d.l += 36;
          var fields = [], field = {};
          var hend = Math.min(d.length, ft == 2 ? 521 : fpos - 10 - (vfp ? 264 : 0));
          var ww = l7 ? 32 : 11;
          while (d.l < hend && d[d.l] != 13) {
            field = {};
            field.name = cptable.utils.decode(current_cp, d.slice(d.l, d.l + ww)).replace(/[\u0000\r\n].*$/g, "");
            d.l += ww;
            field.type = String.fromCharCode(d.read_shift(1));
            if (ft != 2 && !l7)
              field.offset = d.read_shift(4);
            field.len = d.read_shift(1);
            if (ft == 2)
              field.offset = d.read_shift(2);
            field.dec = d.read_shift(1);
            if (field.name.length)
              fields.push(field);
            if (ft != 2)
              d.l += l7 ? 13 : 14;
            switch (field.type) {
              case "B":
                if ((!vfp || field.len != 8) && opts.WTF)
                  console.log("Skipping " + field.name + ":" + field.type);
                break;
              case "G":
              case "P":
                if (opts.WTF)
                  console.log("Skipping " + field.name + ":" + field.type);
                break;
              case "+":
              case "0":
              case "@":
              case "C":
              case "D":
              case "F":
              case "I":
              case "L":
              case "M":
              case "N":
              case "O":
              case "T":
              case "Y":
                break;
              default:
                throw new Error("Unknown Field Type: " + field.type);
            }
          }
          if (d[d.l] !== 13)
            d.l = fpos - 1;
          if (d.read_shift(1) !== 13)
            throw new Error("DBF Terminator not found " + d.l + " " + d[d.l]);
          d.l = fpos;
          var R = 0, C = 0;
          out[0] = [];
          for (C = 0; C != fields.length; ++C)
            out[0][C] = fields[C].name;
          while (nrow-- > 0) {
            if (d[d.l] === 42) {
              d.l += rlen;
              continue;
            }
            ++d.l;
            out[++R] = [];
            C = 0;
            for (C = 0; C != fields.length; ++C) {
              var dd = d.slice(d.l, d.l + fields[C].len);
              d.l += fields[C].len;
              prep_blob(dd, 0);
              var s = cptable.utils.decode(current_cp, dd);
              switch (fields[C].type) {
                case "C":
                  if (s.trim().length)
                    out[R][C] = s.replace(/\s+$/, "");
                  break;
                case "D":
                  if (s.length === 8)
                    out[R][C] = new Date(+s.slice(0, 4), +s.slice(4, 6) - 1, +s.slice(6, 8));
                  else
                    out[R][C] = s;
                  break;
                case "F":
                  out[R][C] = parseFloat(s.trim());
                  break;
                case "+":
                case "I":
                  out[R][C] = l7 ? dd.read_shift(-4, "i") ^ 2147483648 : dd.read_shift(4, "i");
                  break;
                case "L":
                  switch (s.trim().toUpperCase()) {
                    case "Y":
                    case "T":
                      out[R][C] = true;
                      break;
                    case "N":
                    case "F":
                      out[R][C] = false;
                      break;
                    case "":
                    case "?":
                      break;
                    default:
                      throw new Error("DBF Unrecognized L:|" + s + "|");
                  }
                  break;
                case "M":
                  if (!memo)
                    throw new Error("DBF Unexpected MEMO for type " + ft.toString(16));
                  out[R][C] = "##MEMO##" + (l7 ? parseInt(s.trim(), 10) : dd.read_shift(4));
                  break;
                case "N":
                  s = s.replace(/\u0000/g, "").trim();
                  if (s && s != ".")
                    out[R][C] = +s || 0;
                  break;
                case "@":
                  out[R][C] = new Date(dd.read_shift(-8, "f") - 621356832e5);
                  break;
                case "T":
                  out[R][C] = new Date((dd.read_shift(4) - 2440588) * 864e5 + dd.read_shift(4));
                  break;
                case "Y":
                  out[R][C] = dd.read_shift(4, "i") / 1e4;
                  break;
                case "O":
                  out[R][C] = -dd.read_shift(-8, "f");
                  break;
                case "B":
                  if (vfp && fields[C].len == 8) {
                    out[R][C] = dd.read_shift(8, "f");
                    break;
                  }
                case "G":
                case "P":
                  dd.l += fields[C].len;
                  break;
                case "0":
                  if (fields[C].name === "_NullFlags")
                    break;
                default:
                  throw new Error("DBF Unsupported data type " + fields[C].type);
              }
            }
          }
          if (ft != 2) {
            if (d.l < d.length && d[d.l++] != 26)
              throw new Error("DBF EOF Marker missing " + (d.l - 1) + " of " + d.length + " " + d[d.l - 1].toString(16));
          }
          if (opts && opts.sheetRows)
            out = out.slice(0, opts.sheetRows);
          return out;
        }
        function dbf_to_sheet(buf, opts) {
          var o = opts || {};
          if (!o.dateNF)
            o.dateNF = "yyyymmdd";
          return aoa_to_sheet(dbf_to_aoa(buf, o), o);
        }
        function dbf_to_workbook(buf, opts) {
          try {
            return sheet_to_workbook(dbf_to_sheet(buf, opts), opts);
          } catch (e) {
            if (opts && opts.WTF)
              throw e;
          }
          return { SheetNames: [], Sheets: {} };
        }
        var _RLEN = { "B": 8, "C": 250, "L": 1, "D": 8, "?": 0, "": 0 };
        function sheet_to_dbf(ws, opts) {
          var o = opts || {};
          if (+o.codepage >= 0)
            set_cp(+o.codepage);
          if (o.type == "string")
            throw new Error("Cannot write DBF to JS string");
          var ba = buf_array();
          var aoa = sheet_to_json(ws, { header: 1, raw: true, cellDates: true });
          var headers = aoa[0], data = aoa.slice(1);
          var i2 = 0, j = 0, hcnt = 0, rlen = 1;
          for (i2 = 0; i2 < headers.length; ++i2) {
            if (i2 == null)
              continue;
            ++hcnt;
            if (typeof headers[i2] === "number")
              headers[i2] = headers[i2].toString(10);
            if (typeof headers[i2] !== "string")
              throw new Error("DBF Invalid column name " + headers[i2] + " |" + typeof headers[i2] + "|");
            if (headers.indexOf(headers[i2]) !== i2) {
              for (j = 0; j < 1024; ++j)
                if (headers.indexOf(headers[i2] + "_" + j) == -1) {
                  headers[i2] += "_" + j;
                  break;
                }
            }
          }
          var range = safe_decode_range(ws["!ref"]);
          var coltypes = [];
          for (i2 = 0; i2 <= range.e.c - range.s.c; ++i2) {
            var col = [];
            for (j = 0; j < data.length; ++j) {
              if (data[j][i2] != null)
                col.push(data[j][i2]);
            }
            if (col.length == 0 || headers[i2] == null) {
              coltypes[i2] = "?";
              continue;
            }
            var guess = "", _guess = "";
            for (j = 0; j < col.length; ++j) {
              switch (typeof col[j]) {
                case "number":
                  _guess = "B";
                  break;
                case "string":
                  _guess = "C";
                  break;
                case "boolean":
                  _guess = "L";
                  break;
                case "object":
                  _guess = col[j] instanceof Date ? "D" : "C";
                  break;
                default:
                  _guess = "C";
              }
              guess = guess && guess != _guess ? "C" : _guess;
              if (guess == "C")
                break;
            }
            rlen += _RLEN[guess] || 0;
            coltypes[i2] = guess;
          }
          var h = ba.next(32);
          h.write_shift(4, 318902576);
          h.write_shift(4, data.length);
          h.write_shift(2, 296 + 32 * hcnt);
          h.write_shift(2, rlen);
          for (i2 = 0; i2 < 4; ++i2)
            h.write_shift(4, 0);
          h.write_shift(4, 0 | (+dbf_reverse_map[current_ansi] || 3) << 8);
          for (i2 = 0, j = 0; i2 < headers.length; ++i2) {
            if (headers[i2] == null)
              continue;
            var hf = ba.next(32);
            var _f = (headers[i2].slice(-10) + "\0\0\0\0\0\0\0\0\0\0\0").slice(0, 11);
            hf.write_shift(1, _f, "sbcs");
            hf.write_shift(1, coltypes[i2] == "?" ? "C" : coltypes[i2], "sbcs");
            hf.write_shift(4, j);
            hf.write_shift(1, _RLEN[coltypes[i2]] || 0);
            hf.write_shift(1, 0);
            hf.write_shift(1, 2);
            hf.write_shift(4, 0);
            hf.write_shift(1, 0);
            hf.write_shift(4, 0);
            hf.write_shift(4, 0);
            j += _RLEN[coltypes[i2]] || 0;
          }
          var hb = ba.next(264);
          hb.write_shift(4, 13);
          for (i2 = 0; i2 < 65; ++i2)
            hb.write_shift(4, 0);
          for (i2 = 0; i2 < data.length; ++i2) {
            var rout = ba.next(rlen);
            rout.write_shift(1, 0);
            for (j = 0; j < headers.length; ++j) {
              if (headers[j] == null)
                continue;
              switch (coltypes[j]) {
                case "L":
                  rout.write_shift(1, data[i2][j] == null ? 63 : data[i2][j] ? 84 : 70);
                  break;
                case "B":
                  rout.write_shift(8, data[i2][j] || 0, "f");
                  break;
                case "D":
                  if (!data[i2][j])
                    rout.write_shift(8, "00000000", "sbcs");
                  else {
                    rout.write_shift(4, ("0000" + data[i2][j].getFullYear()).slice(-4), "sbcs");
                    rout.write_shift(2, ("00" + (data[i2][j].getMonth() + 1)).slice(-2), "sbcs");
                    rout.write_shift(2, ("00" + data[i2][j].getDate()).slice(-2), "sbcs");
                  }
                  break;
                case "C":
                  var _s = String(data[i2][j] || "");
                  rout.write_shift(1, _s, "sbcs");
                  for (hcnt = 0; hcnt < 250 - _s.length; ++hcnt)
                    rout.write_shift(1, 32);
                  break;
              }
            }
          }
          ba.next(1).write_shift(1, 26);
          return ba.end();
        }
        return {
          versions: DBF_SUPPORTED_VERSIONS,
          to_workbook: dbf_to_workbook,
          to_sheet: dbf_to_sheet,
          from_sheet: sheet_to_dbf
        };
      }();
      var SYLK = function() {
        var sylk_escapes = {
          AA: "\xC0",
          BA: "\xC1",
          CA: "\xC2",
          DA: 195,
          HA: "\xC4",
          JA: 197,
          AE: "\xC8",
          BE: "\xC9",
          CE: "\xCA",
          HE: "\xCB",
          AI: "\xCC",
          BI: "\xCD",
          CI: "\xCE",
          HI: "\xCF",
          AO: "\xD2",
          BO: "\xD3",
          CO: "\xD4",
          DO: 213,
          HO: "\xD6",
          AU: "\xD9",
          BU: "\xDA",
          CU: "\xDB",
          HU: "\xDC",
          Aa: "\xE0",
          Ba: "\xE1",
          Ca: "\xE2",
          Da: 227,
          Ha: "\xE4",
          Ja: 229,
          Ae: "\xE8",
          Be: "\xE9",
          Ce: "\xEA",
          He: "\xEB",
          Ai: "\xEC",
          Bi: "\xED",
          Ci: "\xEE",
          Hi: "\xEF",
          Ao: "\xF2",
          Bo: "\xF3",
          Co: "\xF4",
          Do: 245,
          Ho: "\xF6",
          Au: "\xF9",
          Bu: "\xFA",
          Cu: "\xFB",
          Hu: "\xFC",
          KC: "\xC7",
          Kc: "\xE7",
          q: "\xE6",
          z: "\u0153",
          a: "\xC6",
          j: "\u0152",
          DN: 209,
          Dn: 241,
          Hy: 255,
          S: 169,
          c: 170,
          R: 174,
          "B ": 180,
          0: 176,
          1: 177,
          2: 178,
          3: 179,
          5: 181,
          6: 182,
          7: 183,
          Q: 185,
          k: 186,
          b: 208,
          i: 216,
          l: 222,
          s: 240,
          y: 248,
          "!": 161,
          '"': 162,
          "#": 163,
          "(": 164,
          "%": 165,
          "'": 167,
          "H ": 168,
          "+": 171,
          ";": 187,
          "<": 188,
          "=": 189,
          ">": 190,
          "?": 191,
          "{": 223
        };
        var sylk_char_regex = new RegExp("N(" + keys(sylk_escapes).join("|").replace(/\|\|\|/, "|\\||").replace(/([?()+])/g, "\\$1") + "|\\|)", "gm");
        var sylk_char_fn = function(_, $1) {
          var o = sylk_escapes[$1];
          return typeof o == "number" ? _getansi(o) : o;
        };
        var decode_sylk_char = function($$, $1, $2) {
          var newcc = $1.charCodeAt(0) - 32 << 4 | $2.charCodeAt(0) - 48;
          return newcc == 59 ? $$ : _getansi(newcc);
        };
        sylk_escapes["|"] = 254;
        function sylk_to_aoa(d, opts) {
          switch (opts.type) {
            case "base64":
              return sylk_to_aoa_str(Base64.decode(d), opts);
            case "binary":
              return sylk_to_aoa_str(d, opts);
            case "buffer":
              return sylk_to_aoa_str(has_buf && Buffer.isBuffer(d) ? d.toString("binary") : a2s(d), opts);
            case "array":
              return sylk_to_aoa_str(cc2str(d), opts);
          }
          throw new Error("Unrecognized type " + opts.type);
        }
        function sylk_to_aoa_str(str, opts) {
          var records = str.split(/[\n\r]+/), R = -1, C = -1, ri = 0, rj = 0, arr = [];
          var formats = [];
          var next_cell_format = null;
          var sht = {}, rowinfo = [], colinfo = [], cw = [];
          var Mval = 0, j;
          if (+opts.codepage >= 0)
            set_cp(+opts.codepage);
          for (; ri !== records.length; ++ri) {
            Mval = 0;
            var rstr = records[ri].trim().replace(/\x1B([\x20-\x2F])([\x30-\x3F])/g, decode_sylk_char).replace(sylk_char_regex, sylk_char_fn);
            var record = rstr.replace(/;;/g, "\0").split(";").map(function(x) {
              return x.replace(/\u0000/g, ";");
            });
            var RT = record[0], val;
            if (rstr.length > 0)
              switch (RT) {
                case "ID":
                  break;
                case "E":
                  break;
                case "B":
                  break;
                case "O":
                  break;
                case "W":
                  break;
                case "P":
                  if (record[1].charAt(0) == "P")
                    formats.push(rstr.slice(3).replace(/;;/g, ";"));
                  break;
                case "C":
                  var C_seen_K = false, C_seen_X = false, C_seen_S = false, C_seen_E = false, _R = -1, _C = -1;
                  for (rj = 1; rj < record.length; ++rj)
                    switch (record[rj].charAt(0)) {
                      case "A":
                        break;
                      case "X":
                        C = parseInt(record[rj].slice(1)) - 1;
                        C_seen_X = true;
                        break;
                      case "Y":
                        R = parseInt(record[rj].slice(1)) - 1;
                        if (!C_seen_X)
                          C = 0;
                        for (j = arr.length; j <= R; ++j)
                          arr[j] = [];
                        break;
                      case "K":
                        val = record[rj].slice(1);
                        if (val.charAt(0) === '"')
                          val = val.slice(1, val.length - 1);
                        else if (val === "TRUE")
                          val = true;
                        else if (val === "FALSE")
                          val = false;
                        else if (!isNaN(fuzzynum(val))) {
                          val = fuzzynum(val);
                          if (next_cell_format !== null && SSF.is_date(next_cell_format))
                            val = numdate(val);
                        } else if (!isNaN(fuzzydate(val).getDate())) {
                          val = parseDate(val);
                        }
                        if (typeof cptable !== "undefined" && typeof val == "string" && (opts || {}).type != "string" && (opts || {}).codepage)
                          val = cptable.utils.decode(opts.codepage, val);
                        C_seen_K = true;
                        break;
                      case "E":
                        C_seen_E = true;
                        var formula = rc_to_a1(record[rj].slice(1), { r: R, c: C });
                        arr[R][C] = [arr[R][C], formula];
                        break;
                      case "S":
                        C_seen_S = true;
                        arr[R][C] = [arr[R][C], "S5S"];
                        break;
                      case "G":
                        break;
                      case "R":
                        _R = parseInt(record[rj].slice(1)) - 1;
                        break;
                      case "C":
                        _C = parseInt(record[rj].slice(1)) - 1;
                        break;
                      default:
                        if (opts && opts.WTF)
                          throw new Error("SYLK bad record " + rstr);
                    }
                  if (C_seen_K) {
                    if (arr[R][C] && arr[R][C].length == 2)
                      arr[R][C][0] = val;
                    else
                      arr[R][C] = val;
                    next_cell_format = null;
                  }
                  if (C_seen_S) {
                    if (C_seen_E)
                      throw new Error("SYLK shared formula cannot have own formula");
                    var shrbase = _R > -1 && arr[_R][_C];
                    if (!shrbase || !shrbase[1])
                      throw new Error("SYLK shared formula cannot find base");
                    arr[R][C][1] = shift_formula_str(shrbase[1], { r: R - _R, c: C - _C });
                  }
                  break;
                case "F":
                  var F_seen = 0;
                  for (rj = 1; rj < record.length; ++rj)
                    switch (record[rj].charAt(0)) {
                      case "X":
                        C = parseInt(record[rj].slice(1)) - 1;
                        ++F_seen;
                        break;
                      case "Y":
                        R = parseInt(record[rj].slice(1)) - 1;
                        for (j = arr.length; j <= R; ++j)
                          arr[j] = [];
                        break;
                      case "M":
                        Mval = parseInt(record[rj].slice(1)) / 20;
                        break;
                      case "F":
                        break;
                      case "G":
                        break;
                      case "P":
                        next_cell_format = formats[parseInt(record[rj].slice(1))];
                        break;
                      case "S":
                        break;
                      case "D":
                        break;
                      case "N":
                        break;
                      case "W":
                        cw = record[rj].slice(1).split(" ");
                        for (j = parseInt(cw[0], 10); j <= parseInt(cw[1], 10); ++j) {
                          Mval = parseInt(cw[2], 10);
                          colinfo[j - 1] = Mval === 0 ? { hidden: true } : { wch: Mval };
                          process_col(colinfo[j - 1]);
                        }
                        break;
                      case "C":
                        C = parseInt(record[rj].slice(1)) - 1;
                        if (!colinfo[C])
                          colinfo[C] = {};
                        break;
                      case "R":
                        R = parseInt(record[rj].slice(1)) - 1;
                        if (!rowinfo[R])
                          rowinfo[R] = {};
                        if (Mval > 0) {
                          rowinfo[R].hpt = Mval;
                          rowinfo[R].hpx = pt2px(Mval);
                        } else if (Mval === 0)
                          rowinfo[R].hidden = true;
                        break;
                      default:
                        if (opts && opts.WTF)
                          throw new Error("SYLK bad record " + rstr);
                    }
                  if (F_seen < 1)
                    next_cell_format = null;
                  break;
                default:
                  if (opts && opts.WTF)
                    throw new Error("SYLK bad record " + rstr);
              }
          }
          if (rowinfo.length > 0)
            sht["!rows"] = rowinfo;
          if (colinfo.length > 0)
            sht["!cols"] = colinfo;
          if (opts && opts.sheetRows)
            arr = arr.slice(0, opts.sheetRows);
          return [arr, sht];
        }
        function sylk_to_sheet(d, opts) {
          var aoasht = sylk_to_aoa(d, opts);
          var aoa = aoasht[0], ws = aoasht[1];
          var o = aoa_to_sheet(aoa, opts);
          keys(ws).forEach(function(k) {
            o[k] = ws[k];
          });
          return o;
        }
        function sylk_to_workbook(d, opts) {
          return sheet_to_workbook(sylk_to_sheet(d, opts), opts);
        }
        function write_ws_cell_sylk(cell, ws, R, C) {
          var o = "C;Y" + (R + 1) + ";X" + (C + 1) + ";K";
          switch (cell.t) {
            case "n":
              o += cell.v || 0;
              if (cell.f && !cell.F)
                o += ";E" + a1_to_rc(cell.f, { r: R, c: C });
              break;
            case "b":
              o += cell.v ? "TRUE" : "FALSE";
              break;
            case "e":
              o += cell.w || cell.v;
              break;
            case "d":
              o += '"' + (cell.w || cell.v) + '"';
              break;
            case "s":
              o += '"' + cell.v.replace(/"/g, "") + '"';
              break;
          }
          return o;
        }
        function write_ws_cols_sylk(out, cols) {
          cols.forEach(function(col, i2) {
            var rec = "F;W" + (i2 + 1) + " " + (i2 + 1) + " ";
            if (col.hidden)
              rec += "0";
            else {
              if (typeof col.width == "number" && !col.wpx)
                col.wpx = width2px(col.width);
              if (typeof col.wpx == "number" && !col.wch)
                col.wch = px2char(col.wpx);
              if (typeof col.wch == "number")
                rec += Math.round(col.wch);
            }
            if (rec.charAt(rec.length - 1) != " ")
              out.push(rec);
          });
        }
        function write_ws_rows_sylk(out, rows) {
          rows.forEach(function(row, i2) {
            var rec = "F;";
            if (row.hidden)
              rec += "M0;";
            else if (row.hpt)
              rec += "M" + 20 * row.hpt + ";";
            else if (row.hpx)
              rec += "M" + 20 * px2pt(row.hpx) + ";";
            if (rec.length > 2)
              out.push(rec + "R" + (i2 + 1));
          });
        }
        function sheet_to_sylk(ws, opts) {
          var preamble = ["ID;PWXL;N;E"], o = [];
          var r = safe_decode_range(ws["!ref"]), cell;
          var dense = Array.isArray(ws);
          var RS = "\r\n";
          preamble.push("P;PGeneral");
          preamble.push("F;P0;DG0G8;M255");
          if (ws["!cols"])
            write_ws_cols_sylk(preamble, ws["!cols"]);
          if (ws["!rows"])
            write_ws_rows_sylk(preamble, ws["!rows"]);
          preamble.push("B;Y" + (r.e.r - r.s.r + 1) + ";X" + (r.e.c - r.s.c + 1) + ";D" + [r.s.c, r.s.r, r.e.c, r.e.r].join(" "));
          for (var R = r.s.r; R <= r.e.r; ++R) {
            for (var C = r.s.c; C <= r.e.c; ++C) {
              var coord = encode_cell({ r: R, c: C });
              cell = dense ? (ws[R] || [])[C] : ws[coord];
              if (!cell || cell.v == null && (!cell.f || cell.F))
                continue;
              o.push(write_ws_cell_sylk(cell, ws, R, C, opts));
            }
          }
          return preamble.join(RS) + RS + o.join(RS) + RS + "E" + RS;
        }
        return {
          to_workbook: sylk_to_workbook,
          to_sheet: sylk_to_sheet,
          from_sheet: sheet_to_sylk
        };
      }();
      var DIF = function() {
        function dif_to_aoa(d, opts) {
          switch (opts.type) {
            case "base64":
              return dif_to_aoa_str(Base64.decode(d), opts);
            case "binary":
              return dif_to_aoa_str(d, opts);
            case "buffer":
              return dif_to_aoa_str(has_buf && Buffer.isBuffer(d) ? d.toString("binary") : a2s(d), opts);
            case "array":
              return dif_to_aoa_str(cc2str(d), opts);
          }
          throw new Error("Unrecognized type " + opts.type);
        }
        function dif_to_aoa_str(str, opts) {
          var records = str.split("\n"), R = -1, C = -1, ri = 0, arr = [];
          for (; ri !== records.length; ++ri) {
            if (records[ri].trim() === "BOT") {
              arr[++R] = [];
              C = 0;
              continue;
            }
            if (R < 0)
              continue;
            var metadata = records[ri].trim().split(",");
            var type = metadata[0], value = metadata[1];
            ++ri;
            var data = records[ri] || "";
            while ((data.match(/["]/g) || []).length & 1 && ri < records.length - 1)
              data += "\n" + records[++ri];
            data = data.trim();
            switch (+type) {
              case -1:
                if (data === "BOT") {
                  arr[++R] = [];
                  C = 0;
                  continue;
                } else if (data !== "EOD")
                  throw new Error("Unrecognized DIF special command " + data);
                break;
              case 0:
                if (data === "TRUE")
                  arr[R][C] = true;
                else if (data === "FALSE")
                  arr[R][C] = false;
                else if (!isNaN(fuzzynum(value)))
                  arr[R][C] = fuzzynum(value);
                else if (!isNaN(fuzzydate(value).getDate()))
                  arr[R][C] = parseDate(value);
                else
                  arr[R][C] = value;
                ++C;
                break;
              case 1:
                data = data.slice(1, data.length - 1);
                data = data.replace(/""/g, '"');
                if (DIF_XL && data && data.match(/^=".*"$/))
                  data = data.slice(2, -1);
                arr[R][C++] = data !== "" ? data : null;
                break;
            }
            if (data === "EOD")
              break;
          }
          if (opts && opts.sheetRows)
            arr = arr.slice(0, opts.sheetRows);
          return arr;
        }
        function dif_to_sheet(str, opts) {
          return aoa_to_sheet(dif_to_aoa(str, opts), opts);
        }
        function dif_to_workbook(str, opts) {
          return sheet_to_workbook(dif_to_sheet(str, opts), opts);
        }
        var sheet_to_dif = function() {
          var push_field = function pf(o, topic, v, n, s) {
            o.push(topic);
            o.push(v + "," + n);
            o.push('"' + s.replace(/"/g, '""') + '"');
          };
          var push_value = function po(o, type, v, s) {
            o.push(type + "," + v);
            o.push(type == 1 ? '"' + s.replace(/"/g, '""') + '"' : s);
          };
          return function sheet_to_dif2(ws) {
            var o = [];
            var r = safe_decode_range(ws["!ref"]), cell;
            var dense = Array.isArray(ws);
            push_field(o, "TABLE", 0, 1, "sheetjs");
            push_field(o, "VECTORS", 0, r.e.r - r.s.r + 1, "");
            push_field(o, "TUPLES", 0, r.e.c - r.s.c + 1, "");
            push_field(o, "DATA", 0, 0, "");
            for (var R = r.s.r; R <= r.e.r; ++R) {
              push_value(o, -1, 0, "BOT");
              for (var C = r.s.c; C <= r.e.c; ++C) {
                var coord = encode_cell({ r: R, c: C });
                cell = dense ? (ws[R] || [])[C] : ws[coord];
                if (!cell) {
                  push_value(o, 1, 0, "");
                  continue;
                }
                switch (cell.t) {
                  case "n":
                    var val = DIF_XL ? cell.w : cell.v;
                    if (!val && cell.v != null)
                      val = cell.v;
                    if (val == null) {
                      if (DIF_XL && cell.f && !cell.F)
                        push_value(o, 1, 0, "=" + cell.f);
                      else
                        push_value(o, 1, 0, "");
                    } else
                      push_value(o, 0, val, "V");
                    break;
                  case "b":
                    push_value(o, 0, cell.v ? 1 : 0, cell.v ? "TRUE" : "FALSE");
                    break;
                  case "s":
                    push_value(o, 1, 0, !DIF_XL || isNaN(cell.v) ? cell.v : '="' + cell.v + '"');
                    break;
                  case "d":
                    if (!cell.w)
                      cell.w = SSF.format(cell.z || SSF._table[14], datenum(parseDate(cell.v)));
                    if (DIF_XL)
                      push_value(o, 0, cell.w, "V");
                    else
                      push_value(o, 1, 0, cell.w);
                    break;
                  default:
                    push_value(o, 1, 0, "");
                }
              }
            }
            push_value(o, -1, 0, "EOD");
            var RS = "\r\n";
            var oo = o.join(RS);
            return oo;
          };
        }();
        return {
          to_workbook: dif_to_workbook,
          to_sheet: dif_to_sheet,
          from_sheet: sheet_to_dif
        };
      }();
      var ETH = function() {
        function decode(s) {
          return s.replace(/\\b/g, "\\").replace(/\\c/g, ":").replace(/\\n/g, "\n");
        }
        function encode(s) {
          return s.replace(/\\/g, "\\b").replace(/:/g, "\\c").replace(/\n/g, "\\n");
        }
        function eth_to_aoa(str, opts) {
          var records = str.split("\n"), R = -1, C = -1, ri = 0, arr = [];
          for (; ri !== records.length; ++ri) {
            var record = records[ri].trim().split(":");
            if (record[0] !== "cell")
              continue;
            var addr = decode_cell(record[1]);
            if (arr.length <= addr.r) {
              for (R = arr.length; R <= addr.r; ++R)
                if (!arr[R])
                  arr[R] = [];
            }
            R = addr.r;
            C = addr.c;
            switch (record[2]) {
              case "t":
                arr[R][C] = decode(record[3]);
                break;
              case "v":
                arr[R][C] = +record[3];
                break;
              case "vtf":
                var _f = record[record.length - 1];
              case "vtc":
                switch (record[3]) {
                  case "nl":
                    arr[R][C] = +record[4] ? true : false;
                    break;
                  default:
                    arr[R][C] = +record[4];
                    break;
                }
                if (record[2] == "vtf")
                  arr[R][C] = [arr[R][C], _f];
            }
          }
          if (opts && opts.sheetRows)
            arr = arr.slice(0, opts.sheetRows);
          return arr;
        }
        function eth_to_sheet(d, opts) {
          return aoa_to_sheet(eth_to_aoa(d, opts), opts);
        }
        function eth_to_workbook(d, opts) {
          return sheet_to_workbook(eth_to_sheet(d, opts), opts);
        }
        var header = [
          "socialcalc:version:1.5",
          "MIME-Version: 1.0",
          "Content-Type: multipart/mixed; boundary=SocialCalcSpreadsheetControlSave"
        ].join("\n");
        var sep = [
          "--SocialCalcSpreadsheetControlSave",
          "Content-type: text/plain; charset=UTF-8"
        ].join("\n") + "\n";
        var meta = [
          "# SocialCalc Spreadsheet Control Save",
          "part:sheet"
        ].join("\n");
        var end = "--SocialCalcSpreadsheetControlSave--";
        function sheet_to_eth_data(ws) {
          if (!ws || !ws["!ref"])
            return "";
          var o = [], oo = [], cell, coord = "";
          var r = decode_range(ws["!ref"]);
          var dense = Array.isArray(ws);
          for (var R = r.s.r; R <= r.e.r; ++R) {
            for (var C = r.s.c; C <= r.e.c; ++C) {
              coord = encode_cell({ r: R, c: C });
              cell = dense ? (ws[R] || [])[C] : ws[coord];
              if (!cell || cell.v == null || cell.t === "z")
                continue;
              oo = ["cell", coord, "t"];
              switch (cell.t) {
                case "s":
                case "str":
                  oo.push(encode(cell.v));
                  break;
                case "n":
                  if (!cell.f) {
                    oo[2] = "v";
                    oo[3] = cell.v;
                  } else {
                    oo[2] = "vtf";
                    oo[3] = "n";
                    oo[4] = cell.v;
                    oo[5] = encode(cell.f);
                  }
                  break;
                case "b":
                  oo[2] = "vt" + (cell.f ? "f" : "c");
                  oo[3] = "nl";
                  oo[4] = cell.v ? "1" : "0";
                  oo[5] = encode(cell.f || (cell.v ? "TRUE" : "FALSE"));
                  break;
                case "d":
                  var t = datenum(parseDate(cell.v));
                  oo[2] = "vtc";
                  oo[3] = "nd";
                  oo[4] = "" + t;
                  oo[5] = cell.w || SSF.format(cell.z || SSF._table[14], t);
                  break;
                case "e":
                  continue;
              }
              o.push(oo.join(":"));
            }
          }
          o.push("sheet:c:" + (r.e.c - r.s.c + 1) + ":r:" + (r.e.r - r.s.r + 1) + ":tvf:1");
          o.push("valueformat:1:text-wiki");
          return o.join("\n");
        }
        function sheet_to_eth(ws) {
          return [header, sep, meta, sep, sheet_to_eth_data(ws), end].join("\n");
        }
        return {
          to_workbook: eth_to_workbook,
          to_sheet: eth_to_sheet,
          from_sheet: sheet_to_eth
        };
      }();
      var PRN = function() {
        function set_text_arr(data, arr, R, C, o) {
          if (o.raw)
            arr[R][C] = data;
          else if (data === "") {
          } else if (data === "TRUE")
            arr[R][C] = true;
          else if (data === "FALSE")
            arr[R][C] = false;
          else if (!isNaN(fuzzynum(data)))
            arr[R][C] = fuzzynum(data);
          else if (!isNaN(fuzzydate(data).getDate()))
            arr[R][C] = parseDate(data);
          else
            arr[R][C] = data;
        }
        function prn_to_aoa_str(f, opts) {
          var o = opts || {};
          var arr = [];
          if (!f || f.length === 0)
            return arr;
          var lines = f.split(/[\r\n]/);
          var L = lines.length - 1;
          while (L >= 0 && lines[L].length === 0)
            --L;
          var start = 10, idx = 0;
          var R = 0;
          for (; R <= L; ++R) {
            idx = lines[R].indexOf(" ");
            if (idx == -1)
              idx = lines[R].length;
            else
              idx++;
            start = Math.max(start, idx);
          }
          for (R = 0; R <= L; ++R) {
            arr[R] = [];
            var C = 0;
            set_text_arr(lines[R].slice(0, start).trim(), arr, R, C, o);
            for (C = 1; C <= (lines[R].length - start) / 10 + 1; ++C)
              set_text_arr(lines[R].slice(start + (C - 1) * 10, start + C * 10).trim(), arr, R, C, o);
          }
          if (o.sheetRows)
            arr = arr.slice(0, o.sheetRows);
          return arr;
        }
        var guess_seps = {
          44: ",",
          9: "	",
          59: ";",
          124: "|"
        };
        var guess_sep_weights = {
          44: 3,
          9: 2,
          59: 1,
          124: 0
        };
        function guess_sep(str) {
          var cnt = {}, instr = false, end = 0, cc = 0;
          for (; end < str.length; ++end) {
            if ((cc = str.charCodeAt(end)) == 34)
              instr = !instr;
            else if (!instr && cc in guess_seps)
              cnt[cc] = (cnt[cc] || 0) + 1;
          }
          cc = [];
          for (end in cnt)
            if (Object.prototype.hasOwnProperty.call(cnt, end)) {
              cc.push([cnt[end], end]);
            }
          if (!cc.length) {
            cnt = guess_sep_weights;
            for (end in cnt)
              if (Object.prototype.hasOwnProperty.call(cnt, end)) {
                cc.push([cnt[end], end]);
              }
          }
          cc.sort(function(a, b) {
            return a[0] - b[0] || guess_sep_weights[a[1]] - guess_sep_weights[b[1]];
          });
          return guess_seps[cc.pop()[1]] || 44;
        }
        function dsv_to_sheet_str(str, opts) {
          var o = opts || {};
          var sep = "";
          if (DENSE != null && o.dense == null)
            o.dense = DENSE;
          var ws = o.dense ? [] : {};
          var range = { s: { c: 0, r: 0 }, e: { c: 0, r: 0 } };
          if (str.slice(0, 4) == "sep=") {
            if (str.charCodeAt(5) == 13 && str.charCodeAt(6) == 10) {
              sep = str.charAt(4);
              str = str.slice(7);
            } else if (str.charCodeAt(5) == 13 || str.charCodeAt(5) == 10) {
              sep = str.charAt(4);
              str = str.slice(6);
            } else
              sep = guess_sep(str.slice(0, 1024));
          } else
            sep = guess_sep(str.slice(0, 1024));
          var R = 0, C = 0, v = 0;
          var start = 0, end = 0, sepcc = sep.charCodeAt(0), instr = false, cc = 0, startcc = str.charCodeAt(0);
          str = str.replace(/\r\n/mg, "\n");
          var _re = o.dateNF != null ? dateNF_regex(o.dateNF) : null;
          function finish_cell() {
            var s = str.slice(start, end);
            var cell = {};
            if (s.charAt(0) == '"' && s.charAt(s.length - 1) == '"')
              s = s.slice(1, -1).replace(/""/g, '"');
            if (s.length === 0)
              cell.t = "z";
            else if (o.raw) {
              cell.t = "s";
              cell.v = s;
            } else if (s.trim().length === 0) {
              cell.t = "s";
              cell.v = s;
            } else if (s.charCodeAt(0) == 61) {
              if (s.charCodeAt(1) == 34 && s.charCodeAt(s.length - 1) == 34) {
                cell.t = "s";
                cell.v = s.slice(2, -1).replace(/""/g, '"');
              } else if (fuzzyfmla(s)) {
                cell.t = "n";
                cell.f = s.slice(1);
              } else {
                cell.t = "s";
                cell.v = s;
              }
            } else if (s == "TRUE") {
              cell.t = "b";
              cell.v = true;
            } else if (s == "FALSE") {
              cell.t = "b";
              cell.v = false;
            } else if (!isNaN(v = fuzzynum(s))) {
              cell.t = "n";
              if (o.cellText !== false)
                cell.w = s;
              cell.v = v;
            } else if (!isNaN(fuzzydate(s).getDate()) || _re && s.match(_re)) {
              cell.z = o.dateNF || SSF._table[14];
              var k = 0;
              if (_re && s.match(_re)) {
                s = dateNF_fix(s, o.dateNF, s.match(_re) || []);
                k = 1;
              }
              if (o.cellDates) {
                cell.t = "d";
                cell.v = parseDate(s, k);
              } else {
                cell.t = "n";
                cell.v = datenum(parseDate(s, k));
              }
              if (o.cellText !== false)
                cell.w = SSF.format(cell.z, cell.v instanceof Date ? datenum(cell.v) : cell.v);
              if (!o.cellNF)
                delete cell.z;
            } else {
              cell.t = "s";
              cell.v = s;
            }
            if (cell.t == "z") {
            } else if (o.dense) {
              if (!ws[R])
                ws[R] = [];
              ws[R][C] = cell;
            } else
              ws[encode_cell({ c: C, r: R })] = cell;
            start = end + 1;
            startcc = str.charCodeAt(start);
            if (range.e.c < C)
              range.e.c = C;
            if (range.e.r < R)
              range.e.r = R;
            if (cc == sepcc)
              ++C;
            else {
              C = 0;
              ++R;
              if (o.sheetRows && o.sheetRows <= R)
                return true;
            }
          }
          outer:
            for (; end < str.length; ++end)
              switch (cc = str.charCodeAt(end)) {
                case 34:
                  if (startcc === 34)
                    instr = !instr;
                  break;
                case sepcc:
                case 10:
                case 13:
                  if (!instr && finish_cell())
                    break outer;
                  break;
                default:
                  break;
              }
          if (end - start > 0)
            finish_cell();
          ws["!ref"] = encode_range(range);
          return ws;
        }
        function prn_to_sheet_str(str, opts) {
          if (!(opts && opts.PRN))
            return dsv_to_sheet_str(str, opts);
          if (str.slice(0, 4) == "sep=")
            return dsv_to_sheet_str(str, opts);
          if (str.indexOf("	") >= 0 || str.indexOf(",") >= 0 || str.indexOf(";") >= 0)
            return dsv_to_sheet_str(str, opts);
          return aoa_to_sheet(prn_to_aoa_str(str, opts), opts);
        }
        function prn_to_sheet(d, opts) {
          var str = "", bytes = opts.type == "string" ? [0, 0, 0, 0] : firstbyte(d, opts);
          switch (opts.type) {
            case "base64":
              str = Base64.decode(d);
              break;
            case "binary":
              str = d;
              break;
            case "buffer":
              if (opts.codepage == 65001)
                str = d.toString("utf8");
              else if (opts.codepage && typeof cptable !== "undefined")
                str = cptable.utils.decode(opts.codepage, d);
              else
                str = has_buf && Buffer.isBuffer(d) ? d.toString("binary") : a2s(d);
              break;
            case "array":
              str = cc2str(d);
              break;
            case "string":
              str = d;
              break;
            default:
              throw new Error("Unrecognized type " + opts.type);
          }
          if (bytes[0] == 239 && bytes[1] == 187 && bytes[2] == 191)
            str = utf8read(str.slice(3));
          else if (opts.type != "string" && opts.codepage == 65001)
            str = utf8read(str);
          else if (opts.type == "binary" && typeof cptable !== "undefined" && opts.codepage)
            str = cptable.utils.decode(opts.codepage, cptable.utils.encode(28591, str));
          if (str.slice(0, 19) == "socialcalc:version:")
            return ETH.to_sheet(opts.type == "string" ? str : utf8read(str), opts);
          return prn_to_sheet_str(str, opts);
        }
        function prn_to_workbook(d, opts) {
          return sheet_to_workbook(prn_to_sheet(d, opts), opts);
        }
        function sheet_to_prn(ws) {
          var o = [];
          var r = safe_decode_range(ws["!ref"]), cell;
          var dense = Array.isArray(ws);
          for (var R = r.s.r; R <= r.e.r; ++R) {
            var oo = [];
            for (var C = r.s.c; C <= r.e.c; ++C) {
              var coord = encode_cell({ r: R, c: C });
              cell = dense ? (ws[R] || [])[C] : ws[coord];
              if (!cell || cell.v == null) {
                oo.push("          ");
                continue;
              }
              var w = (cell.w || (format_cell(cell), cell.w) || "").slice(0, 10);
              while (w.length < 10)
                w += " ";
              oo.push(w + (C === 0 ? " " : ""));
            }
            o.push(oo.join(""));
          }
          return o.join("\n");
        }
        return {
          to_workbook: prn_to_workbook,
          to_sheet: prn_to_sheet,
          from_sheet: sheet_to_prn
        };
      }();
      function read_wb_ID(d, opts) {
        var o = opts || {}, OLD_WTF = !!o.WTF;
        o.WTF = true;
        try {
          var out = SYLK.to_workbook(d, o);
          o.WTF = OLD_WTF;
          return out;
        } catch (e) {
          o.WTF = OLD_WTF;
          if (!e.message.match(/SYLK bad record ID/) && OLD_WTF)
            throw e;
          return PRN.to_workbook(d, opts);
        }
      }
      var WK_ = function() {
        function lotushopper(data, cb, opts) {
          if (!data)
            return;
          prep_blob(data, data.l || 0);
          var Enum = opts.Enum || WK1Enum;
          while (data.l < data.length) {
            var RT = data.read_shift(2);
            var R = Enum[RT] || Enum[255];
            var length = data.read_shift(2);
            var tgt = data.l + length;
            var d = (R.f || parsenoop)(data, length, opts);
            data.l = tgt;
            if (cb(d, R.n, RT))
              return;
          }
        }
        function lotus_to_workbook(d, opts) {
          switch (opts.type) {
            case "base64":
              return lotus_to_workbook_buf(s2a(Base64.decode(d)), opts);
            case "binary":
              return lotus_to_workbook_buf(s2a(d), opts);
            case "buffer":
            case "array":
              return lotus_to_workbook_buf(d, opts);
          }
          throw "Unsupported type " + opts.type;
        }
        function lotus_to_workbook_buf(d, opts) {
          if (!d)
            return d;
          var o = opts || {};
          if (DENSE != null && o.dense == null)
            o.dense = DENSE;
          var s = o.dense ? [] : {}, n = "Sheet1", sidx = 0;
          var sheets = {}, snames = [n];
          var refguess = { s: { r: 0, c: 0 }, e: { r: 0, c: 0 } };
          var sheetRows = o.sheetRows || 0;
          if (d[2] == 2)
            o.Enum = WK1Enum;
          else if (d[2] == 26)
            o.Enum = WK3Enum;
          else if (d[2] == 14) {
            o.Enum = WK3Enum;
            o.qpro = true;
            d.l = 0;
          } else
            throw new Error("Unrecognized LOTUS BOF " + d[2]);
          lotushopper(d, function(val, Rn, RT) {
            if (d[2] == 2)
              switch (RT) {
                case 0:
                  o.vers = val;
                  if (val >= 4096)
                    o.qpro = true;
                  break;
                case 6:
                  refguess = val;
                  break;
                case 15:
                  if (!o.qpro)
                    val[1].v = val[1].v.slice(1);
                case 13:
                case 14:
                case 16:
                case 51:
                  if (RT == 14 && (val[2] & 112) == 112 && (val[2] & 15) > 1 && (val[2] & 15) < 15) {
                    val[1].z = o.dateNF || SSF._table[14];
                    if (o.cellDates) {
                      val[1].t = "d";
                      val[1].v = numdate(val[1].v);
                    }
                  }
                  if (o.dense) {
                    if (!s[val[0].r])
                      s[val[0].r] = [];
                    s[val[0].r][val[0].c] = val[1];
                  } else
                    s[encode_cell(val[0])] = val[1];
                  break;
              }
            else
              switch (RT) {
                case 22:
                  val[1].v = val[1].v.slice(1);
                case 23:
                case 24:
                case 25:
                case 37:
                case 39:
                case 40:
                  if (val[3] > sidx) {
                    s["!ref"] = encode_range(refguess);
                    sheets[n] = s;
                    s = o.dense ? [] : {};
                    refguess = { s: { r: 0, c: 0 }, e: { r: 0, c: 0 } };
                    sidx = val[3];
                    n = "Sheet" + (sidx + 1);
                    snames.push(n);
                  }
                  if (sheetRows > 0 && val[0].r >= sheetRows)
                    break;
                  if (o.dense) {
                    if (!s[val[0].r])
                      s[val[0].r] = [];
                    s[val[0].r][val[0].c] = val[1];
                  } else
                    s[encode_cell(val[0])] = val[1];
                  if (refguess.e.c < val[0].c)
                    refguess.e.c = val[0].c;
                  if (refguess.e.r < val[0].r)
                    refguess.e.r = val[0].r;
                  break;
                default:
                  break;
              }
          }, o);
          s["!ref"] = encode_range(refguess);
          sheets[n] = s;
          return { SheetNames: snames, Sheets: sheets };
        }
        function parse_RANGE(blob) {
          var o = { s: { c: 0, r: 0 }, e: { c: 0, r: 0 } };
          o.s.c = blob.read_shift(2);
          o.s.r = blob.read_shift(2);
          o.e.c = blob.read_shift(2);
          o.e.r = blob.read_shift(2);
          if (o.s.c == 65535)
            o.s.c = o.e.c = o.s.r = o.e.r = 0;
          return o;
        }
        function parse_cell(blob, length, opts) {
          var o = [{ c: 0, r: 0 }, { t: "n", v: 0 }, 0];
          if (opts.qpro && opts.vers != 20768) {
            o[0].c = blob.read_shift(1);
            blob.l++;
            o[0].r = blob.read_shift(2);
            blob.l += 2;
          } else {
            o[2] = blob.read_shift(1);
            o[0].c = blob.read_shift(2);
            o[0].r = blob.read_shift(2);
          }
          return o;
        }
        function parse_LABEL(blob, length, opts) {
          var tgt = blob.l + length;
          var o = parse_cell(blob, length, opts);
          o[1].t = "s";
          if (opts.vers == 20768) {
            blob.l++;
            var len = blob.read_shift(1);
            o[1].v = blob.read_shift(len, "utf8");
            return o;
          }
          if (opts.qpro)
            blob.l++;
          o[1].v = blob.read_shift(tgt - blob.l, "cstr");
          return o;
        }
        function parse_INTEGER(blob, length, opts) {
          var o = parse_cell(blob, length, opts);
          o[1].v = blob.read_shift(2, "i");
          return o;
        }
        function parse_NUMBER(blob, length, opts) {
          var o = parse_cell(blob, length, opts);
          o[1].v = blob.read_shift(8, "f");
          return o;
        }
        function parse_FORMULA(blob, length, opts) {
          var tgt = blob.l + length;
          var o = parse_cell(blob, length, opts);
          o[1].v = blob.read_shift(8, "f");
          if (opts.qpro)
            blob.l = tgt;
          else {
            var flen = blob.read_shift(2);
            blob.l += flen;
          }
          return o;
        }
        function parse_cell_3(blob) {
          var o = [{ c: 0, r: 0 }, { t: "n", v: 0 }, 0];
          o[0].r = blob.read_shift(2);
          o[3] = blob[blob.l++];
          o[0].c = blob[blob.l++];
          return o;
        }
        function parse_LABEL_16(blob, length) {
          var o = parse_cell_3(blob, length);
          o[1].t = "s";
          o[1].v = blob.read_shift(length - 4, "cstr");
          return o;
        }
        function parse_NUMBER_18(blob, length) {
          var o = parse_cell_3(blob, length);
          o[1].v = blob.read_shift(2);
          var v = o[1].v >> 1;
          if (o[1].v & 1) {
            switch (v & 7) {
              case 1:
                v = (v >> 3) * 500;
                break;
              case 2:
                v = (v >> 3) / 20;
                break;
              case 4:
                v = (v >> 3) / 2e3;
                break;
              case 6:
                v = (v >> 3) / 16;
                break;
              case 7:
                v = (v >> 3) / 64;
                break;
              default:
                throw "unknown NUMBER_18 encoding " + (v & 7);
            }
          }
          o[1].v = v;
          return o;
        }
        function parse_NUMBER_17(blob, length) {
          var o = parse_cell_3(blob, length);
          var v1 = blob.read_shift(4);
          var v2 = blob.read_shift(4);
          var e = blob.read_shift(2);
          if (e == 65535) {
            o[1].v = 0;
            return o;
          }
          var s = e & 32768;
          e = (e & 32767) - 16446;
          o[1].v = (s * 2 - 1) * ((e > 0 ? v2 << e : v2 >>> -e) + (e > -32 ? v1 << e + 32 : v1 >>> -(e + 32)));
          return o;
        }
        function parse_FORMULA_19(blob, length) {
          var o = parse_NUMBER_17(blob, 14);
          blob.l += length - 14;
          return o;
        }
        function parse_NUMBER_25(blob, length) {
          var o = parse_cell_3(blob, length);
          var v1 = blob.read_shift(4);
          o[1].v = v1 >> 6;
          return o;
        }
        function parse_NUMBER_27(blob, length) {
          var o = parse_cell_3(blob, length);
          var v1 = blob.read_shift(8, "f");
          o[1].v = v1;
          return o;
        }
        function parse_FORMULA_28(blob, length) {
          var o = parse_NUMBER_27(blob, 14);
          blob.l += length - 10;
          return o;
        }
        var WK1Enum = {
          0: { n: "BOF", f: parseuint16 },
          1: { n: "EOF" },
          2: { n: "CALCMODE" },
          3: { n: "CALCORDER" },
          4: { n: "SPLIT" },
          5: { n: "SYNC" },
          6: { n: "RANGE", f: parse_RANGE },
          7: { n: "WINDOW1" },
          8: { n: "COLW1" },
          9: { n: "WINTWO" },
          10: { n: "COLW2" },
          11: { n: "NAME" },
          12: { n: "BLANK" },
          13: { n: "INTEGER", f: parse_INTEGER },
          14: { n: "NUMBER", f: parse_NUMBER },
          15: { n: "LABEL", f: parse_LABEL },
          16: { n: "FORMULA", f: parse_FORMULA },
          24: { n: "TABLE" },
          25: { n: "ORANGE" },
          26: { n: "PRANGE" },
          27: { n: "SRANGE" },
          28: { n: "FRANGE" },
          29: { n: "KRANGE1" },
          32: { n: "HRANGE" },
          35: { n: "KRANGE2" },
          36: { n: "PROTEC" },
          37: { n: "FOOTER" },
          38: { n: "HEADER" },
          39: { n: "SETUP" },
          40: { n: "MARGINS" },
          41: { n: "LABELFMT" },
          42: { n: "TITLES" },
          43: { n: "SHEETJS" },
          45: { n: "GRAPH" },
          46: { n: "NGRAPH" },
          47: { n: "CALCCOUNT" },
          48: { n: "UNFORMATTED" },
          49: { n: "CURSORW12" },
          50: { n: "WINDOW" },
          51: { n: "STRING", f: parse_LABEL },
          55: { n: "PASSWORD" },
          56: { n: "LOCKED" },
          60: { n: "QUERY" },
          61: { n: "QUERYNAME" },
          62: { n: "PRINT" },
          63: { n: "PRINTNAME" },
          64: { n: "GRAPH2" },
          65: { n: "GRAPHNAME" },
          66: { n: "ZOOM" },
          67: { n: "SYMSPLIT" },
          68: { n: "NSROWS" },
          69: { n: "NSCOLS" },
          70: { n: "RULER" },
          71: { n: "NNAME" },
          72: { n: "ACOMM" },
          73: { n: "AMACRO" },
          74: { n: "PARSE" },
          255: { n: "", f: parsenoop }
        };
        var WK3Enum = {
          0: { n: "BOF" },
          1: { n: "EOF" },
          3: { n: "??" },
          4: { n: "??" },
          5: { n: "??" },
          6: { n: "??" },
          7: { n: "??" },
          9: { n: "??" },
          10: { n: "??" },
          11: { n: "??" },
          12: { n: "??" },
          14: { n: "??" },
          15: { n: "??" },
          16: { n: "??" },
          17: { n: "??" },
          18: { n: "??" },
          19: { n: "??" },
          21: { n: "??" },
          22: { n: "LABEL16", f: parse_LABEL_16 },
          23: { n: "NUMBER17", f: parse_NUMBER_17 },
          24: { n: "NUMBER18", f: parse_NUMBER_18 },
          25: { n: "FORMULA19", f: parse_FORMULA_19 },
          26: { n: "??" },
          27: { n: "??" },
          28: { n: "??" },
          29: { n: "??" },
          30: { n: "??" },
          31: { n: "??" },
          33: { n: "??" },
          37: { n: "NUMBER25", f: parse_NUMBER_25 },
          39: { n: "NUMBER27", f: parse_NUMBER_27 },
          40: { n: "FORMULA28", f: parse_FORMULA_28 },
          255: { n: "", f: parsenoop }
        };
        return {
          to_workbook: lotus_to_workbook
        };
      }();
      function parse_rpr(rpr) {
        var font = {}, m = rpr.match(tagregex), i2 = 0;
        var pass = false;
        if (m)
          for (; i2 != m.length; ++i2) {
            var y = parsexmltag(m[i2]);
            switch (y[0].replace(/\w*:/g, "")) {
              case "<condense":
                break;
              case "<extend":
                break;
              case "<shadow":
                if (!y.val)
                  break;
              case "<shadow>":
              case "<shadow/>":
                font.shadow = 1;
                break;
              case "</shadow>":
                break;
              case "<charset":
                if (y.val == "1")
                  break;
                font.cp = CS2CP[parseInt(y.val, 10)];
                break;
              case "<outline":
                if (!y.val)
                  break;
              case "<outline>":
              case "<outline/>":
                font.outline = 1;
                break;
              case "</outline>":
                break;
              case "<rFont":
                font.name = y.val;
                break;
              case "<sz":
                font.sz = y.val;
                break;
              case "<strike":
                if (!y.val)
                  break;
              case "<strike>":
              case "<strike/>":
                font.strike = 1;
                break;
              case "</strike>":
                break;
              case "<u":
                if (!y.val)
                  break;
                switch (y.val) {
                  case "double":
                    font.uval = "double";
                    break;
                  case "singleAccounting":
                    font.uval = "single-accounting";
                    break;
                  case "doubleAccounting":
                    font.uval = "double-accounting";
                    break;
                }
              case "<u>":
              case "<u/>":
                font.u = 1;
                break;
              case "</u>":
                break;
              case "<b":
                if (y.val == "0")
                  break;
              case "<b>":
              case "<b/>":
                font.b = 1;
                break;
              case "</b>":
                break;
              case "<i":
                if (y.val == "0")
                  break;
              case "<i>":
              case "<i/>":
                font.i = 1;
                break;
              case "</i>":
                break;
              case "<color":
                if (y.rgb)
                  font.color = y.rgb.slice(2, 8);
                break;
              case "<family":
                font.family = y.val;
                break;
              case "<vertAlign":
                font.valign = y.val;
                break;
              case "<scheme":
                break;
              case "<extLst":
              case "<extLst>":
              case "</extLst>":
                break;
              case "<ext":
                pass = true;
                break;
              case "</ext>":
                pass = false;
                break;
              default:
                if (y[0].charCodeAt(1) !== 47 && !pass)
                  throw new Error("Unrecognized rich format " + y[0]);
            }
          }
        return font;
      }
      var parse_rs = function() {
        var tregex = matchtag("t"), rpregex = matchtag("rPr");
        function parse_r(r) {
          var t = r.match(tregex);
          if (!t)
            return { t: "s", v: "" };
          var o = { t: "s", v: unescapexml(t[1]) };
          var rpr = r.match(rpregex);
          if (rpr)
            o.s = parse_rpr(rpr[1]);
          return o;
        }
        var rregex = /<(?:\w+:)?r>/g, rend = /<\/(?:\w+:)?r>/;
        return function parse_rs2(rs) {
          return rs.replace(rregex, "").split(rend).map(parse_r).filter(function(r) {
            return r.v;
          });
        };
      }();
      var rs_to_html = function parse_rs_factory() {
        var nlregex = /(\r\n|\n)/g;
        function parse_rpr2(font, intro, outro) {
          var style = [];
          if (font.u)
            style.push("text-decoration: underline;");
          if (font.uval)
            style.push("text-underline-style:" + font.uval + ";");
          if (font.sz)
            style.push("font-size:" + font.sz + "pt;");
          if (font.outline)
            style.push("text-effect: outline;");
          if (font.shadow)
            style.push("text-shadow: auto;");
          intro.push('<span style="' + style.join("") + '">');
          if (font.b) {
            intro.push("<b>");
            outro.push("</b>");
          }
          if (font.i) {
            intro.push("<i>");
            outro.push("</i>");
          }
          if (font.strike) {
            intro.push("<s>");
            outro.push("</s>");
          }
          var align = font.valign || "";
          if (align == "superscript" || align == "super")
            align = "sup";
          else if (align == "subscript")
            align = "sub";
          if (align != "") {
            intro.push("<" + align + ">");
            outro.push("</" + align + ">");
          }
          outro.push("</span>");
          return font;
        }
        function r_to_html(r) {
          var terms = [[], r.v, []];
          if (!r.v)
            return "";
          if (r.s)
            parse_rpr2(r.s, terms[0], terms[2]);
          return terms[0].join("") + terms[1].replace(nlregex, "<br/>") + terms[2].join("");
        }
        return function parse_rs2(rs) {
          return rs.map(r_to_html).join("");
        };
      }();
      var sitregex = /<(?:\w+:)?t[^>]*>([^<]*)<\/(?:\w+:)?t>/g, sirregex = /<(?:\w+:)?r>/;
      var sirphregex = /<(?:\w+:)?rPh.*?>([\s\S]*?)<\/(?:\w+:)?rPh>/g;
      function parse_si(x, opts) {
        var html = opts ? opts.cellHTML : true;
        var z = {};
        if (!x)
          return { t: "" };
        if (x.match(/^\s*<(?:\w+:)?t[^>]*>/)) {
          z.t = unescapexml(utf8read(x.slice(x.indexOf(">") + 1).split(/<\/(?:\w+:)?t>/)[0] || ""));
          z.r = utf8read(x);
          if (html)
            z.h = escapehtml(z.t);
        } else if (x.match(sirregex)) {
          z.r = utf8read(x);
          z.t = unescapexml(utf8read((x.replace(sirphregex, "").match(sitregex) || []).join("").replace(tagregex, "")));
          if (html)
            z.h = rs_to_html(parse_rs(z.r));
        }
        return z;
      }
      var sstr0 = /<(?:\w+:)?sst([^>]*)>([\s\S]*)<\/(?:\w+:)?sst>/;
      var sstr1 = /<(?:\w+:)?(?:si|sstItem)>/g;
      var sstr2 = /<\/(?:\w+:)?(?:si|sstItem)>/;
      function parse_sst_xml(data, opts) {
        var s = [], ss = "";
        if (!data)
          return s;
        var sst = data.match(sstr0);
        if (sst) {
          ss = sst[2].replace(sstr1, "").split(sstr2);
          for (var i2 = 0; i2 != ss.length; ++i2) {
            var o = parse_si(ss[i2].trim(), opts);
            if (o != null)
              s[s.length] = o;
          }
          sst = parsexmltag(sst[1]);
          s.Count = sst.count;
          s.Unique = sst.uniqueCount;
        }
        return s;
      }
      RELS.SST = "http://schemas.openxmlformats.org/officeDocument/2006/relationships/sharedStrings";
      var straywsregex = /^\s|\s$|[\t\n\r]/;
      function write_sst_xml(sst, opts) {
        if (!opts.bookSST)
          return "";
        var o = [XML_HEADER];
        o[o.length] = writextag("sst", null, {
          xmlns: XMLNS.main[0],
          count: sst.Count,
          uniqueCount: sst.Unique
        });
        for (var i2 = 0; i2 != sst.length; ++i2) {
          if (sst[i2] == null)
            continue;
          var s = sst[i2];
          var sitag = "<si>";
          if (s.r)
            sitag += s.r;
          else {
            sitag += "<t";
            if (!s.t)
              s.t = "";
            if (s.t.match(straywsregex))
              sitag += ' xml:space="preserve"';
            sitag += ">" + escapexml(s.t) + "</t>";
          }
          sitag += "</si>";
          o[o.length] = sitag;
        }
        if (o.length > 2) {
          o[o.length] = "</sst>";
          o[1] = o[1].replace("/>", ">");
        }
        return o.join("");
      }
      function parse_BrtBeginSst(data) {
        return [data.read_shift(4), data.read_shift(4)];
      }
      function parse_sst_bin(data, opts) {
        var s = [];
        var pass = false;
        recordhopper(data, function hopper_sst(val, R_n, RT) {
          switch (RT) {
            case 159:
              s.Count = val[0];
              s.Unique = val[1];
              break;
            case 19:
              s.push(val);
              break;
            case 160:
              return true;
            case 35:
              pass = true;
              break;
            case 36:
              pass = false;
              break;
            default:
              if (R_n.indexOf("Begin") > 0) {
              } else if (R_n.indexOf("End") > 0) {
              }
              if (!pass || opts.WTF)
                throw new Error("Unexpected record " + RT + " " + R_n);
          }
        });
        return s;
      }
      function write_BrtBeginSst(sst, o) {
        if (!o)
          o = new_buf(8);
        o.write_shift(4, sst.Count);
        o.write_shift(4, sst.Unique);
        return o;
      }
      var write_BrtSSTItem = write_RichStr;
      function write_sst_bin(sst) {
        var ba = buf_array();
        write_record(ba, "BrtBeginSst", write_BrtBeginSst(sst));
        for (var i2 = 0; i2 < sst.length; ++i2)
          write_record(ba, "BrtSSTItem", write_BrtSSTItem(sst[i2]));
        write_record(ba, "BrtEndSst");
        return ba.end();
      }
      function _JS2ANSI(str) {
        if (typeof cptable !== "undefined")
          return cptable.utils.encode(current_ansi, str);
        var o = [], oo = str.split("");
        for (var i2 = 0; i2 < oo.length; ++i2)
          o[i2] = oo[i2].charCodeAt(0);
        return o;
      }
      function parse_CRYPTOVersion(blob, length) {
        var o = {};
        o.Major = blob.read_shift(2);
        o.Minor = blob.read_shift(2);
        if (length >= 4)
          blob.l += length - 4;
        return o;
      }
      function parse_DataSpaceVersionInfo(blob) {
        var o = {};
        o.id = blob.read_shift(0, "lpp4");
        o.R = parse_CRYPTOVersion(blob, 4);
        o.U = parse_CRYPTOVersion(blob, 4);
        o.W = parse_CRYPTOVersion(blob, 4);
        return o;
      }
      function parse_DataSpaceMapEntry(blob) {
        var len = blob.read_shift(4);
        var end = blob.l + len - 4;
        var o = {};
        var cnt = blob.read_shift(4);
        var comps = [];
        while (cnt-- > 0)
          comps.push({ t: blob.read_shift(4), v: blob.read_shift(0, "lpp4") });
        o.name = blob.read_shift(0, "lpp4");
        o.comps = comps;
        if (blob.l != end)
          throw new Error("Bad DataSpaceMapEntry: " + blob.l + " != " + end);
        return o;
      }
      function parse_DataSpaceMap(blob) {
        var o = [];
        blob.l += 4;
        var cnt = blob.read_shift(4);
        while (cnt-- > 0)
          o.push(parse_DataSpaceMapEntry(blob));
        return o;
      }
      function parse_DataSpaceDefinition(blob) {
        var o = [];
        blob.l += 4;
        var cnt = blob.read_shift(4);
        while (cnt-- > 0)
          o.push(blob.read_shift(0, "lpp4"));
        return o;
      }
      function parse_TransformInfoHeader(blob) {
        var o = {};
        blob.read_shift(4);
        blob.l += 4;
        o.id = blob.read_shift(0, "lpp4");
        o.name = blob.read_shift(0, "lpp4");
        o.R = parse_CRYPTOVersion(blob, 4);
        o.U = parse_CRYPTOVersion(blob, 4);
        o.W = parse_CRYPTOVersion(blob, 4);
        return o;
      }
      function parse_Primary(blob) {
        var hdr = parse_TransformInfoHeader(blob);
        hdr.ename = blob.read_shift(0, "8lpp4");
        hdr.blksz = blob.read_shift(4);
        hdr.cmode = blob.read_shift(4);
        if (blob.read_shift(4) != 4)
          throw new Error("Bad !Primary record");
        return hdr;
      }
      function parse_EncryptionHeader(blob, length) {
        var tgt = blob.l + length;
        var o = {};
        o.Flags = blob.read_shift(4) & 63;
        blob.l += 4;
        o.AlgID = blob.read_shift(4);
        var valid = false;
        switch (o.AlgID) {
          case 26126:
          case 26127:
          case 26128:
            valid = o.Flags == 36;
            break;
          case 26625:
            valid = o.Flags == 4;
            break;
          case 0:
            valid = o.Flags == 16 || o.Flags == 4 || o.Flags == 36;
            break;
          default:
            throw "Unrecognized encryption algorithm: " + o.AlgID;
        }
        if (!valid)
          throw new Error("Encryption Flags/AlgID mismatch");
        o.AlgIDHash = blob.read_shift(4);
        o.KeySize = blob.read_shift(4);
        o.ProviderType = blob.read_shift(4);
        blob.l += 8;
        o.CSPName = blob.read_shift(tgt - blob.l >> 1, "utf16le");
        blob.l = tgt;
        return o;
      }
      function parse_EncryptionVerifier(blob, length) {
        var o = {}, tgt = blob.l + length;
        blob.l += 4;
        o.Salt = blob.slice(blob.l, blob.l + 16);
        blob.l += 16;
        o.Verifier = blob.slice(blob.l, blob.l + 16);
        blob.l += 16;
        blob.read_shift(4);
        o.VerifierHash = blob.slice(blob.l, tgt);
        blob.l = tgt;
        return o;
      }
      function parse_EncryptionInfo(blob) {
        var vers = parse_CRYPTOVersion(blob);
        switch (vers.Minor) {
          case 2:
            return [vers.Minor, parse_EncInfoStd(blob, vers)];
          case 3:
            return [vers.Minor, parse_EncInfoExt(blob, vers)];
          case 4:
            return [vers.Minor, parse_EncInfoAgl(blob, vers)];
        }
        throw new Error("ECMA-376 Encrypted file unrecognized Version: " + vers.Minor);
      }
      function parse_EncInfoStd(blob) {
        var flags = blob.read_shift(4);
        if ((flags & 63) != 36)
          throw new Error("EncryptionInfo mismatch");
        var sz = blob.read_shift(4);
        var hdr = parse_EncryptionHeader(blob, sz);
        var verifier = parse_EncryptionVerifier(blob, blob.length - blob.l);
        return { t: "Std", h: hdr, v: verifier };
      }
      function parse_EncInfoExt() {
        throw new Error("File is password-protected: ECMA-376 Extensible");
      }
      function parse_EncInfoAgl(blob) {
        var KeyData = ["saltSize", "blockSize", "keyBits", "hashSize", "cipherAlgorithm", "cipherChaining", "hashAlgorithm", "saltValue"];
        blob.l += 4;
        var xml = blob.read_shift(blob.length - blob.l, "utf8");
        var o = {};
        xml.replace(tagregex, function xml_agile(x) {
          var y = parsexmltag(x);
          switch (strip_ns(y[0])) {
            case "<?xml":
              break;
            case "<encryption":
            case "</encryption>":
              break;
            case "<keyData":
              KeyData.forEach(function(k) {
                o[k] = y[k];
              });
              break;
            case "<dataIntegrity":
              o.encryptedHmacKey = y.encryptedHmacKey;
              o.encryptedHmacValue = y.encryptedHmacValue;
              break;
            case "<keyEncryptors>":
            case "<keyEncryptors":
              o.encs = [];
              break;
            case "</keyEncryptors>":
              break;
            case "<keyEncryptor":
              o.uri = y.uri;
              break;
            case "</keyEncryptor>":
              break;
            case "<encryptedKey":
              o.encs.push(y);
              break;
            default:
              throw y[0];
          }
        });
        return o;
      }
      function parse_RC4CryptoHeader(blob, length) {
        var o = {};
        var vers = o.EncryptionVersionInfo = parse_CRYPTOVersion(blob, 4);
        length -= 4;
        if (vers.Minor != 2)
          throw new Error("unrecognized minor version code: " + vers.Minor);
        if (vers.Major > 4 || vers.Major < 2)
          throw new Error("unrecognized major version code: " + vers.Major);
        o.Flags = blob.read_shift(4);
        length -= 4;
        var sz = blob.read_shift(4);
        length -= 4;
        o.EncryptionHeader = parse_EncryptionHeader(blob, sz);
        length -= sz;
        o.EncryptionVerifier = parse_EncryptionVerifier(blob, length);
        return o;
      }
      function parse_RC4Header(blob) {
        var o = {};
        var vers = o.EncryptionVersionInfo = parse_CRYPTOVersion(blob, 4);
        if (vers.Major != 1 || vers.Minor != 1)
          throw "unrecognized version code " + vers.Major + " : " + vers.Minor;
        o.Salt = blob.read_shift(16);
        o.EncryptedVerifier = blob.read_shift(16);
        o.EncryptedVerifierHash = blob.read_shift(16);
        return o;
      }
      function crypto_CreatePasswordVerifier_Method1(Password) {
        var Verifier = 0, PasswordArray;
        var PasswordDecoded = _JS2ANSI(Password);
        var len = PasswordDecoded.length + 1, i2, PasswordByte;
        var Intermediate1, Intermediate2, Intermediate3;
        PasswordArray = new_raw_buf(len);
        PasswordArray[0] = PasswordDecoded.length;
        for (i2 = 1; i2 != len; ++i2)
          PasswordArray[i2] = PasswordDecoded[i2 - 1];
        for (i2 = len - 1; i2 >= 0; --i2) {
          PasswordByte = PasswordArray[i2];
          Intermediate1 = (Verifier & 16384) === 0 ? 0 : 1;
          Intermediate2 = Verifier << 1 & 32767;
          Intermediate3 = Intermediate1 | Intermediate2;
          Verifier = Intermediate3 ^ PasswordByte;
        }
        return Verifier ^ 52811;
      }
      var crypto_CreateXorArray_Method1 = function() {
        var PadArray = [187, 255, 255, 186, 255, 255, 185, 128, 0, 190, 15, 0, 191, 15, 0];
        var InitialCode = [57840, 7439, 52380, 33984, 4364, 3600, 61902, 12606, 6258, 57657, 54287, 34041, 10252, 43370, 20163];
        var XorMatrix = [44796, 19929, 39858, 10053, 20106, 40212, 10761, 31585, 63170, 64933, 60267, 50935, 40399, 11199, 17763, 35526, 1453, 2906, 5812, 11624, 23248, 885, 1770, 3540, 7080, 14160, 28320, 56640, 55369, 41139, 20807, 41614, 21821, 43642, 17621, 28485, 56970, 44341, 19019, 38038, 14605, 29210, 60195, 50791, 40175, 10751, 21502, 43004, 24537, 18387, 36774, 3949, 7898, 15796, 31592, 63184, 47201, 24803, 49606, 37805, 14203, 28406, 56812, 17824, 35648, 1697, 3394, 6788, 13576, 27152, 43601, 17539, 35078, 557, 1114, 2228, 4456, 30388, 60776, 51953, 34243, 7079, 14158, 28316, 14128, 28256, 56512, 43425, 17251, 34502, 7597, 13105, 26210, 52420, 35241, 883, 1766, 3532, 4129, 8258, 16516, 33032, 4657, 9314, 18628];
        var Ror = function(Byte) {
          return (Byte / 2 | Byte * 128) & 255;
        };
        var XorRor = function(byte1, byte2) {
          return Ror(byte1 ^ byte2);
        };
        var CreateXorKey_Method1 = function(Password) {
          var XorKey = InitialCode[Password.length - 1];
          var CurrentElement = 104;
          for (var i2 = Password.length - 1; i2 >= 0; --i2) {
            var Char = Password[i2];
            for (var j = 0; j != 7; ++j) {
              if (Char & 64)
                XorKey ^= XorMatrix[CurrentElement];
              Char *= 2;
              --CurrentElement;
            }
          }
          return XorKey;
        };
        return function(password) {
          var Password = _JS2ANSI(password);
          var XorKey = CreateXorKey_Method1(Password);
          var Index = Password.length;
          var ObfuscationArray = new_raw_buf(16);
          for (var i2 = 0; i2 != 16; ++i2)
            ObfuscationArray[i2] = 0;
          var Temp, PasswordLastChar, PadIndex;
          if ((Index & 1) === 1) {
            Temp = XorKey >> 8;
            ObfuscationArray[Index] = XorRor(PadArray[0], Temp);
            --Index;
            Temp = XorKey & 255;
            PasswordLastChar = Password[Password.length - 1];
            ObfuscationArray[Index] = XorRor(PasswordLastChar, Temp);
          }
          while (Index > 0) {
            --Index;
            Temp = XorKey >> 8;
            ObfuscationArray[Index] = XorRor(Password[Index], Temp);
            --Index;
            Temp = XorKey & 255;
            ObfuscationArray[Index] = XorRor(Password[Index], Temp);
          }
          Index = 15;
          PadIndex = 15 - Password.length;
          while (PadIndex > 0) {
            Temp = XorKey >> 8;
            ObfuscationArray[Index] = XorRor(PadArray[PadIndex], Temp);
            --Index;
            --PadIndex;
            Temp = XorKey & 255;
            ObfuscationArray[Index] = XorRor(Password[Index], Temp);
            --Index;
            --PadIndex;
          }
          return ObfuscationArray;
        };
      }();
      var crypto_DecryptData_Method1 = function(password, Data, XorArrayIndex, XorArray, O) {
        if (!O)
          O = Data;
        if (!XorArray)
          XorArray = crypto_CreateXorArray_Method1(password);
        var Index, Value;
        for (Index = 0; Index != Data.length; ++Index) {
          Value = Data[Index];
          Value ^= XorArray[XorArrayIndex];
          Value = (Value >> 5 | Value << 3) & 255;
          O[Index] = Value;
          ++XorArrayIndex;
        }
        return [O, XorArrayIndex, XorArray];
      };
      var crypto_MakeXorDecryptor = function(password) {
        var XorArrayIndex = 0, XorArray = crypto_CreateXorArray_Method1(password);
        return function(Data) {
          var O = crypto_DecryptData_Method1("", Data, XorArrayIndex, XorArray);
          XorArrayIndex = O[1];
          return O[0];
        };
      };
      function parse_XORObfuscation(blob, length, opts, out) {
        var o = { key: parseuint16(blob), verificationBytes: parseuint16(blob) };
        if (opts.password)
          o.verifier = crypto_CreatePasswordVerifier_Method1(opts.password);
        out.valid = o.verificationBytes === o.verifier;
        if (out.valid)
          out.insitu = crypto_MakeXorDecryptor(opts.password);
        return o;
      }
      function parse_FilePassHeader(blob, length, oo) {
        var o = oo || {};
        o.Info = blob.read_shift(2);
        blob.l -= 2;
        if (o.Info === 1)
          o.Data = parse_RC4Header(blob, length);
        else
          o.Data = parse_RC4CryptoHeader(blob, length);
        return o;
      }
      function parse_FilePass(blob, length, opts) {
        var o = { Type: opts.biff >= 8 ? blob.read_shift(2) : 0 };
        if (o.Type)
          parse_FilePassHeader(blob, length - 2, o);
        else
          parse_XORObfuscation(blob, opts.biff >= 8 ? length : length - 2, opts, o);
        return o;
      }
      var RTF = function() {
        function rtf_to_sheet(d, opts) {
          switch (opts.type) {
            case "base64":
              return rtf_to_sheet_str(Base64.decode(d), opts);
            case "binary":
              return rtf_to_sheet_str(d, opts);
            case "buffer":
              return rtf_to_sheet_str(has_buf && Buffer.isBuffer(d) ? d.toString("binary") : a2s(d), opts);
            case "array":
              return rtf_to_sheet_str(cc2str(d), opts);
          }
          throw new Error("Unrecognized type " + opts.type);
        }
        function rtf_to_sheet_str(str, opts) {
          var o = opts || {};
          var ws = o.dense ? [] : {};
          var rows = str.match(/\\trowd.*?\\row\b/g);
          if (!rows.length)
            throw new Error("RTF missing table");
          var range = { s: { c: 0, r: 0 }, e: { c: 0, r: rows.length - 1 } };
          rows.forEach(function(rowtf, R) {
            if (Array.isArray(ws))
              ws[R] = [];
            var rtfre = /\\\w+\b/g;
            var last_index = 0;
            var res;
            var C = -1;
            while (res = rtfre.exec(rowtf)) {
              switch (res[0]) {
                case "\\cell":
                  var data = rowtf.slice(last_index, rtfre.lastIndex - res[0].length);
                  if (data[0] == " ")
                    data = data.slice(1);
                  ++C;
                  if (data.length) {
                    var cell = { v: data, t: "s" };
                    if (Array.isArray(ws))
                      ws[R][C] = cell;
                    else
                      ws[encode_cell({ r: R, c: C })] = cell;
                  }
                  break;
              }
              last_index = rtfre.lastIndex;
            }
            if (C > range.e.c)
              range.e.c = C;
          });
          ws["!ref"] = encode_range(range);
          return ws;
        }
        function rtf_to_workbook(d, opts) {
          return sheet_to_workbook(rtf_to_sheet(d, opts), opts);
        }
        function sheet_to_rtf(ws) {
          var o = ["{\\rtf1\\ansi"];
          var r = safe_decode_range(ws["!ref"]), cell;
          var dense = Array.isArray(ws);
          for (var R = r.s.r; R <= r.e.r; ++R) {
            o.push("\\trowd\\trautofit1");
            for (var C = r.s.c; C <= r.e.c; ++C)
              o.push("\\cellx" + (C + 1));
            o.push("\\pard\\intbl");
            for (C = r.s.c; C <= r.e.c; ++C) {
              var coord = encode_cell({ r: R, c: C });
              cell = dense ? (ws[R] || [])[C] : ws[coord];
              if (!cell || cell.v == null && (!cell.f || cell.F))
                continue;
              o.push(" " + (cell.w || (format_cell(cell), cell.w)));
              o.push("\\cell");
            }
            o.push("\\pard\\intbl\\row");
          }
          return o.join("") + "}";
        }
        return {
          to_workbook: rtf_to_workbook,
          to_sheet: rtf_to_sheet,
          from_sheet: sheet_to_rtf
        };
      }();
      function hex2RGB(h) {
        var o = h.slice(h[0] === "#" ? 1 : 0).slice(0, 6);
        return [parseInt(o.slice(0, 2), 16), parseInt(o.slice(2, 4), 16), parseInt(o.slice(4, 6), 16)];
      }
      function rgb2Hex(rgb) {
        for (var i2 = 0, o = 1; i2 != 3; ++i2)
          o = o * 256 + (rgb[i2] > 255 ? 255 : rgb[i2] < 0 ? 0 : rgb[i2]);
        return o.toString(16).toUpperCase().slice(1);
      }
      function rgb2HSL(rgb) {
        var R = rgb[0] / 255, G = rgb[1] / 255, B = rgb[2] / 255;
        var M = Math.max(R, G, B), m = Math.min(R, G, B), C = M - m;
        if (C === 0)
          return [0, 0, R];
        var H6 = 0, S = 0, L2 = M + m;
        S = C / (L2 > 1 ? 2 - L2 : L2);
        switch (M) {
          case R:
            H6 = ((G - B) / C + 6) % 6;
            break;
          case G:
            H6 = (B - R) / C + 2;
            break;
          case B:
            H6 = (R - G) / C + 4;
            break;
        }
        return [H6 / 6, S, L2 / 2];
      }
      function hsl2RGB(hsl) {
        var H = hsl[0], S = hsl[1], L = hsl[2];
        var C = S * 2 * (L < 0.5 ? L : 1 - L), m = L - C / 2;
        var rgb = [m, m, m], h6 = 6 * H;
        var X;
        if (S !== 0)
          switch (h6 | 0) {
            case 0:
            case 6:
              X = C * h6;
              rgb[0] += C;
              rgb[1] += X;
              break;
            case 1:
              X = C * (2 - h6);
              rgb[0] += X;
              rgb[1] += C;
              break;
            case 2:
              X = C * (h6 - 2);
              rgb[1] += C;
              rgb[2] += X;
              break;
            case 3:
              X = C * (4 - h6);
              rgb[1] += X;
              rgb[2] += C;
              break;
            case 4:
              X = C * (h6 - 4);
              rgb[2] += C;
              rgb[0] += X;
              break;
            case 5:
              X = C * (6 - h6);
              rgb[2] += X;
              rgb[0] += C;
              break;
          }
        for (var i2 = 0; i2 != 3; ++i2)
          rgb[i2] = Math.round(rgb[i2] * 255);
        return rgb;
      }
      function rgb_tint(hex, tint) {
        if (tint === 0)
          return hex;
        var hsl = rgb2HSL(hex2RGB(hex));
        if (tint < 0)
          hsl[2] = hsl[2] * (1 + tint);
        else
          hsl[2] = 1 - (1 - hsl[2]) * (1 - tint);
        return rgb2Hex(hsl2RGB(hsl));
      }
      var DEF_MDW = 6, MAX_MDW = 15, MIN_MDW = 1, MDW = DEF_MDW;
      function width2px(width) {
        return Math.floor((width + Math.round(128 / MDW) / 256) * MDW);
      }
      function px2char(px) {
        return Math.floor((px - 5) / MDW * 100 + 0.5) / 100;
      }
      function char2width(chr) {
        return Math.round((chr * MDW + 5) / MDW * 256) / 256;
      }
      function cycle_width(collw) {
        return char2width(px2char(width2px(collw)));
      }
      function find_mdw_colw(collw) {
        var delta = Math.abs(collw - cycle_width(collw)), _MDW = MDW;
        if (delta > 5e-3) {
          for (MDW = MIN_MDW; MDW < MAX_MDW; ++MDW)
            if (Math.abs(collw - cycle_width(collw)) <= delta) {
              delta = Math.abs(collw - cycle_width(collw));
              _MDW = MDW;
            }
        }
        MDW = _MDW;
      }
      function process_col(coll) {
        if (coll.width) {
          coll.wpx = width2px(coll.width);
          coll.wch = px2char(coll.wpx);
          coll.MDW = MDW;
        } else if (coll.wpx) {
          coll.wch = px2char(coll.wpx);
          coll.width = char2width(coll.wch);
          coll.MDW = MDW;
        } else if (typeof coll.wch == "number") {
          coll.width = char2width(coll.wch);
          coll.wpx = width2px(coll.width);
          coll.MDW = MDW;
        }
        if (coll.customWidth)
          delete coll.customWidth;
      }
      var DEF_PPI = 96, PPI = DEF_PPI;
      function px2pt(px) {
        return px * 96 / PPI;
      }
      function pt2px(pt) {
        return pt * PPI / 96;
      }
      var XLMLPatternTypeMap = {
        "None": "none",
        "Solid": "solid",
        "Gray50": "mediumGray",
        "Gray75": "darkGray",
        "Gray25": "lightGray",
        "HorzStripe": "darkHorizontal",
        "VertStripe": "darkVertical",
        "ReverseDiagStripe": "darkDown",
        "DiagStripe": "darkUp",
        "DiagCross": "darkGrid",
        "ThickDiagCross": "darkTrellis",
        "ThinHorzStripe": "lightHorizontal",
        "ThinVertStripe": "lightVertical",
        "ThinReverseDiagStripe": "lightDown",
        "ThinHorzCross": "lightGrid"
      };
      function parse_borders(t, styles, themes, opts) {
        styles.Borders = [];
        var border = {};
        var pass = false;
        (t[0].match(tagregex) || []).forEach(function(x) {
          var y = parsexmltag(x);
          switch (strip_ns(y[0])) {
            case "<borders":
            case "<borders>":
            case "</borders>":
              break;
            case "<border":
            case "<border>":
            case "<border/>":
              border = {};
              if (y.diagonalUp)
                border.diagonalUp = parsexmlbool(y.diagonalUp);
              if (y.diagonalDown)
                border.diagonalDown = parsexmlbool(y.diagonalDown);
              styles.Borders.push(border);
              break;
            case "</border>":
              break;
            case "<left/>":
              break;
            case "<left":
            case "<left>":
              break;
            case "</left>":
              break;
            case "<right/>":
              break;
            case "<right":
            case "<right>":
              break;
            case "</right>":
              break;
            case "<top/>":
              break;
            case "<top":
            case "<top>":
              break;
            case "</top>":
              break;
            case "<bottom/>":
              break;
            case "<bottom":
            case "<bottom>":
              break;
            case "</bottom>":
              break;
            case "<diagonal":
            case "<diagonal>":
            case "<diagonal/>":
              break;
            case "</diagonal>":
              break;
            case "<horizontal":
            case "<horizontal>":
            case "<horizontal/>":
              break;
            case "</horizontal>":
              break;
            case "<vertical":
            case "<vertical>":
            case "<vertical/>":
              break;
            case "</vertical>":
              break;
            case "<start":
            case "<start>":
            case "<start/>":
              break;
            case "</start>":
              break;
            case "<end":
            case "<end>":
            case "<end/>":
              break;
            case "</end>":
              break;
            case "<color":
            case "<color>":
              break;
            case "<color/>":
            case "</color>":
              break;
            case "<extLst":
            case "<extLst>":
            case "</extLst>":
              break;
            case "<ext":
              pass = true;
              break;
            case "</ext>":
              pass = false;
              break;
            default:
              if (opts && opts.WTF) {
                if (!pass)
                  throw new Error("unrecognized " + y[0] + " in borders");
              }
          }
        });
      }
      function parse_fills(t, styles, themes, opts) {
        styles.Fills = [];
        var fill2 = {};
        var pass = false;
        (t[0].match(tagregex) || []).forEach(function(x) {
          var y = parsexmltag(x);
          switch (strip_ns(y[0])) {
            case "<fills":
            case "<fills>":
            case "</fills>":
              break;
            case "<fill>":
            case "<fill":
            case "<fill/>":
              fill2 = {};
              styles.Fills.push(fill2);
              break;
            case "</fill>":
              break;
            case "<gradientFill>":
              break;
            case "<gradientFill":
            case "</gradientFill>":
              styles.Fills.push(fill2);
              fill2 = {};
              break;
            case "<patternFill":
            case "<patternFill>":
              if (y.patternType)
                fill2.patternType = y.patternType;
              break;
            case "<patternFill/>":
            case "</patternFill>":
              break;
            case "<bgColor":
              if (!fill2.bgColor)
                fill2.bgColor = {};
              if (y.indexed)
                fill2.bgColor.indexed = parseInt(y.indexed, 10);
              if (y.theme)
                fill2.bgColor.theme = parseInt(y.theme, 10);
              if (y.tint)
                fill2.bgColor.tint = parseFloat(y.tint);
              if (y.rgb)
                fill2.bgColor.rgb = y.rgb.slice(-6);
              break;
            case "<bgColor/>":
            case "</bgColor>":
              break;
            case "<fgColor":
              if (!fill2.fgColor)
                fill2.fgColor = {};
              if (y.theme)
                fill2.fgColor.theme = parseInt(y.theme, 10);
              if (y.tint)
                fill2.fgColor.tint = parseFloat(y.tint);
              if (y.rgb != null)
                fill2.fgColor.rgb = y.rgb.slice(-6);
              break;
            case "<fgColor/>":
            case "</fgColor>":
              break;
            case "<stop":
            case "<stop/>":
              break;
            case "</stop>":
              break;
            case "<color":
            case "<color/>":
              break;
            case "</color>":
              break;
            case "<extLst":
            case "<extLst>":
            case "</extLst>":
              break;
            case "<ext":
              pass = true;
              break;
            case "</ext>":
              pass = false;
              break;
            default:
              if (opts && opts.WTF) {
                if (!pass)
                  throw new Error("unrecognized " + y[0] + " in fills");
              }
          }
        });
      }
      function parse_fonts(t, styles, themes, opts) {
        styles.Fonts = [];
        var font = {};
        var pass = false;
        (t[0].match(tagregex) || []).forEach(function(x) {
          var y = parsexmltag(x);
          switch (strip_ns(y[0])) {
            case "<fonts":
            case "<fonts>":
            case "</fonts>":
              break;
            case "<font":
            case "<font>":
              break;
            case "</font>":
            case "<font/>":
              styles.Fonts.push(font);
              font = {};
              break;
            case "<name":
              if (y.val)
                font.name = utf8read(y.val);
              break;
            case "<name/>":
            case "</name>":
              break;
            case "<b":
              font.bold = y.val ? parsexmlbool(y.val) : 1;
              break;
            case "<b/>":
              font.bold = 1;
              break;
            case "<i":
              font.italic = y.val ? parsexmlbool(y.val) : 1;
              break;
            case "<i/>":
              font.italic = 1;
              break;
            case "<u":
              switch (y.val) {
                case "none":
                  font.underline = 0;
                  break;
                case "single":
                  font.underline = 1;
                  break;
                case "double":
                  font.underline = 2;
                  break;
                case "singleAccounting":
                  font.underline = 33;
                  break;
                case "doubleAccounting":
                  font.underline = 34;
                  break;
              }
              break;
            case "<u/>":
              font.underline = 1;
              break;
            case "<strike":
              font.strike = y.val ? parsexmlbool(y.val) : 1;
              break;
            case "<strike/>":
              font.strike = 1;
              break;
            case "<outline":
              font.outline = y.val ? parsexmlbool(y.val) : 1;
              break;
            case "<outline/>":
              font.outline = 1;
              break;
            case "<shadow":
              font.shadow = y.val ? parsexmlbool(y.val) : 1;
              break;
            case "<shadow/>":
              font.shadow = 1;
              break;
            case "<condense":
              font.condense = y.val ? parsexmlbool(y.val) : 1;
              break;
            case "<condense/>":
              font.condense = 1;
              break;
            case "<extend":
              font.extend = y.val ? parsexmlbool(y.val) : 1;
              break;
            case "<extend/>":
              font.extend = 1;
              break;
            case "<sz":
              if (y.val)
                font.sz = +y.val;
              break;
            case "<sz/>":
            case "</sz>":
              break;
            case "<vertAlign":
              if (y.val)
                font.vertAlign = y.val;
              break;
            case "<vertAlign/>":
            case "</vertAlign>":
              break;
            case "<family":
              if (y.val)
                font.family = parseInt(y.val, 10);
              break;
            case "<family/>":
            case "</family>":
              break;
            case "<scheme":
              if (y.val)
                font.scheme = y.val;
              break;
            case "<scheme/>":
            case "</scheme>":
              break;
            case "<charset":
              if (y.val == "1")
                break;
              y.codepage = CS2CP[parseInt(y.val, 10)];
              break;
            case "<color":
              if (!font.color)
                font.color = {};
              if (y.auto)
                font.color.auto = parsexmlbool(y.auto);
              if (y.rgb)
                font.color.rgb = y.rgb.slice(-6);
              else if (y.indexed) {
                font.color.index = parseInt(y.indexed, 10);
                var icv = XLSIcv[font.color.index];
                if (font.color.index == 81)
                  icv = XLSIcv[1];
                if (!icv)
                  icv = XLSIcv[1];
                font.color.rgb = icv[0].toString(16) + icv[1].toString(16) + icv[2].toString(16);
              } else if (y.theme) {
                font.color.theme = parseInt(y.theme, 10);
                if (y.tint)
                  font.color.tint = parseFloat(y.tint);
                if (y.theme && themes.themeElements && themes.themeElements.clrScheme) {
                  font.color.rgb = rgb_tint(themes.themeElements.clrScheme[font.color.theme].rgb, font.color.tint || 0);
                }
              }
              break;
            case "<color/>":
            case "</color>":
              break;
            case "<AlternateContent":
              pass = true;
              break;
            case "</AlternateContent>":
              pass = false;
              break;
            case "<extLst":
            case "<extLst>":
            case "</extLst>":
              break;
            case "<ext":
              pass = true;
              break;
            case "</ext>":
              pass = false;
              break;
            default:
              if (opts && opts.WTF) {
                if (!pass)
                  throw new Error("unrecognized " + y[0] + " in fonts");
              }
          }
        });
      }
      function parse_numFmts(t, styles, opts) {
        styles.NumberFmt = [];
        var k = keys(SSF._table);
        for (var i2 = 0; i2 < k.length; ++i2)
          styles.NumberFmt[k[i2]] = SSF._table[k[i2]];
        var m = t[0].match(tagregex);
        if (!m)
          return;
        for (i2 = 0; i2 < m.length; ++i2) {
          var y = parsexmltag(m[i2]);
          switch (strip_ns(y[0])) {
            case "<numFmts":
            case "</numFmts>":
            case "<numFmts/>":
            case "<numFmts>":
              break;
            case "<numFmt":
              {
                var f = unescapexml(utf8read(y.formatCode)), j = parseInt(y.numFmtId, 10);
                styles.NumberFmt[j] = f;
                if (j > 0) {
                  if (j > 392) {
                    for (j = 392; j > 60; --j)
                      if (styles.NumberFmt[j] == null)
                        break;
                    styles.NumberFmt[j] = f;
                  }
                  SSF.load(f, j);
                }
              }
              break;
            case "</numFmt>":
              break;
            default:
              if (opts.WTF)
                throw new Error("unrecognized " + y[0] + " in numFmts");
          }
        }
      }
      function write_numFmts(NF) {
        var o = ["<numFmts>"];
        [[5, 8], [23, 26], [41, 44], [50, 392]].forEach(function(r) {
          for (var i2 = r[0]; i2 <= r[1]; ++i2)
            if (NF[i2] != null)
              o[o.length] = writextag("numFmt", null, { numFmtId: i2, formatCode: escapexml(NF[i2]) });
        });
        if (o.length === 1)
          return "";
        o[o.length] = "</numFmts>";
        o[0] = writextag("numFmts", null, { count: o.length - 2 }).replace("/>", ">");
        return o.join("");
      }
      var cellXF_uint = ["numFmtId", "fillId", "fontId", "borderId", "xfId"];
      var cellXF_bool = ["applyAlignment", "applyBorder", "applyFill", "applyFont", "applyNumberFormat", "applyProtection", "pivotButton", "quotePrefix"];
      function parse_cellXfs(t, styles, opts) {
        styles.CellXf = [];
        var xf;
        var pass = false;
        (t[0].match(tagregex) || []).forEach(function(x) {
          var y = parsexmltag(x), i2 = 0;
          switch (strip_ns(y[0])) {
            case "<cellXfs":
            case "<cellXfs>":
            case "<cellXfs/>":
            case "</cellXfs>":
              break;
            case "<xf":
            case "<xf/>":
              xf = y;
              delete xf[0];
              for (i2 = 0; i2 < cellXF_uint.length; ++i2)
                if (xf[cellXF_uint[i2]])
                  xf[cellXF_uint[i2]] = parseInt(xf[cellXF_uint[i2]], 10);
              for (i2 = 0; i2 < cellXF_bool.length; ++i2)
                if (xf[cellXF_bool[i2]])
                  xf[cellXF_bool[i2]] = parsexmlbool(xf[cellXF_bool[i2]]);
              if (styles.NumberFmt && xf.numFmtId > 392) {
                for (i2 = 392; i2 > 60; --i2)
                  if (styles.NumberFmt[xf.numFmtId] == styles.NumberFmt[i2]) {
                    xf.numFmtId = i2;
                    break;
                  }
              }
              styles.CellXf.push(xf);
              break;
            case "</xf>":
              break;
            case "<alignment":
            case "<alignment/>":
              var alignment = {};
              if (y.vertical)
                alignment.vertical = y.vertical;
              if (y.horizontal)
                alignment.horizontal = y.horizontal;
              if (y.textRotation != null)
                alignment.textRotation = y.textRotation;
              if (y.indent)
                alignment.indent = y.indent;
              if (y.wrapText)
                alignment.wrapText = parsexmlbool(y.wrapText);
              xf.alignment = alignment;
              break;
            case "</alignment>":
              break;
            case "<protection":
              break;
            case "</protection>":
            case "<protection/>":
              break;
            case "<AlternateContent":
              pass = true;
              break;
            case "</AlternateContent>":
              pass = false;
              break;
            case "<extLst":
            case "<extLst>":
            case "</extLst>":
              break;
            case "<ext":
              pass = true;
              break;
            case "</ext>":
              pass = false;
              break;
            default:
              if (opts && opts.WTF) {
                if (!pass)
                  throw new Error("unrecognized " + y[0] + " in cellXfs");
              }
          }
        });
      }
      function write_cellXfs(cellXfs) {
        var o = [];
        o[o.length] = writextag("cellXfs", null);
        cellXfs.forEach(function(c) {
          o[o.length] = writextag("xf", null, c);
        });
        o[o.length] = "</cellXfs>";
        if (o.length === 2)
          return "";
        o[0] = writextag("cellXfs", null, { count: o.length - 2 }).replace("/>", ">");
        return o.join("");
      }
      var parse_sty_xml = function make_pstyx() {
        var numFmtRegex = /<(?:\w+:)?numFmts([^>]*)>[\S\s]*?<\/(?:\w+:)?numFmts>/;
        var cellXfRegex = /<(?:\w+:)?cellXfs([^>]*)>[\S\s]*?<\/(?:\w+:)?cellXfs>/;
        var fillsRegex = /<(?:\w+:)?fills([^>]*)>[\S\s]*?<\/(?:\w+:)?fills>/;
        var fontsRegex = /<(?:\w+:)?fonts([^>]*)>[\S\s]*?<\/(?:\w+:)?fonts>/;
        var bordersRegex = /<(?:\w+:)?borders([^>]*)>[\S\s]*?<\/(?:\w+:)?borders>/;
        return function parse_sty_xml2(data, themes, opts) {
          var styles = {};
          if (!data)
            return styles;
          data = data.replace(/<!--([\s\S]*?)-->/mg, "").replace(/<!DOCTYPE[^\[]*\[[^\]]*\]>/gm, "");
          var t;
          if (t = data.match(numFmtRegex))
            parse_numFmts(t, styles, opts);
          if (t = data.match(fontsRegex))
            parse_fonts(t, styles, themes, opts);
          if (t = data.match(fillsRegex))
            parse_fills(t, styles, themes, opts);
          if (t = data.match(bordersRegex))
            parse_borders(t, styles, themes, opts);
          if (t = data.match(cellXfRegex))
            parse_cellXfs(t, styles, opts);
          return styles;
        };
      }();
      var STYLES_XML_ROOT = writextag("styleSheet", null, {
        "xmlns": XMLNS.main[0],
        "xmlns:vt": XMLNS.vt
      });
      RELS.STY = "http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles";
      function write_sty_xml(wb, opts) {
        var o = [XML_HEADER, STYLES_XML_ROOT], w;
        if (wb.SSF && (w = write_numFmts(wb.SSF)) != null)
          o[o.length] = w;
        o[o.length] = '<fonts count="1"><font><sz val="12"/><color theme="1"/><name val="Calibri"/><family val="2"/><scheme val="minor"/></font></fonts>';
        o[o.length] = '<fills count="2"><fill><patternFill patternType="none"/></fill><fill><patternFill patternType="gray125"/></fill></fills>';
        o[o.length] = '<borders count="1"><border><left/><right/><top/><bottom/><diagonal/></border></borders>';
        o[o.length] = '<cellStyleXfs count="1"><xf numFmtId="0" fontId="0" fillId="0" borderId="0"/></cellStyleXfs>';
        if (w = write_cellXfs(opts.cellXfs))
          o[o.length] = w;
        o[o.length] = '<cellStyles count="1"><cellStyle name="Normal" xfId="0" builtinId="0"/></cellStyles>';
        o[o.length] = '<dxfs count="0"/>';
        o[o.length] = '<tableStyles count="0" defaultTableStyle="TableStyleMedium9" defaultPivotStyle="PivotStyleMedium4"/>';
        if (o.length > 2) {
          o[o.length] = "</styleSheet>";
          o[1] = o[1].replace("/>", ">");
        }
        return o.join("");
      }
      function parse_BrtFmt(data, length) {
        var numFmtId = data.read_shift(2);
        var stFmtCode = parse_XLWideString(data, length - 2);
        return [numFmtId, stFmtCode];
      }
      function write_BrtFmt(i2, f, o) {
        if (!o)
          o = new_buf(6 + 4 * f.length);
        o.write_shift(2, i2);
        write_XLWideString(f, o);
        var out = o.length > o.l ? o.slice(0, o.l) : o;
        if (o.l == null)
          o.l = o.length;
        return out;
      }
      function parse_BrtFont(data, length, opts) {
        var out = {};
        out.sz = data.read_shift(2) / 20;
        var grbit = parse_FontFlags(data, 2, opts);
        if (grbit.fItalic)
          out.italic = 1;
        if (grbit.fCondense)
          out.condense = 1;
        if (grbit.fExtend)
          out.extend = 1;
        if (grbit.fShadow)
          out.shadow = 1;
        if (grbit.fOutline)
          out.outline = 1;
        if (grbit.fStrikeout)
          out.strike = 1;
        var bls = data.read_shift(2);
        if (bls === 700)
          out.bold = 1;
        switch (data.read_shift(2)) {
          case 1:
            out.vertAlign = "superscript";
            break;
          case 2:
            out.vertAlign = "subscript";
            break;
        }
        var underline = data.read_shift(1);
        if (underline != 0)
          out.underline = underline;
        var family = data.read_shift(1);
        if (family > 0)
          out.family = family;
        var bCharSet = data.read_shift(1);
        if (bCharSet > 0)
          out.charset = bCharSet;
        data.l++;
        out.color = parse_BrtColor(data, 8);
        switch (data.read_shift(1)) {
          case 1:
            out.scheme = "major";
            break;
          case 2:
            out.scheme = "minor";
            break;
        }
        out.name = parse_XLWideString(data, length - 21);
        return out;
      }
      function write_BrtFont(font, o) {
        if (!o)
          o = new_buf(25 + 4 * 32);
        o.write_shift(2, font.sz * 20);
        write_FontFlags(font, o);
        o.write_shift(2, font.bold ? 700 : 400);
        var sss = 0;
        if (font.vertAlign == "superscript")
          sss = 1;
        else if (font.vertAlign == "subscript")
          sss = 2;
        o.write_shift(2, sss);
        o.write_shift(1, font.underline || 0);
        o.write_shift(1, font.family || 0);
        o.write_shift(1, font.charset || 0);
        o.write_shift(1, 0);
        write_BrtColor(font.color, o);
        var scheme = 0;
        if (font.scheme == "major")
          scheme = 1;
        if (font.scheme == "minor")
          scheme = 2;
        o.write_shift(1, scheme);
        write_XLWideString(font.name, o);
        return o.length > o.l ? o.slice(0, o.l) : o;
      }
      var XLSBFillPTNames = [
        "none",
        "solid",
        "mediumGray",
        "darkGray",
        "lightGray",
        "darkHorizontal",
        "darkVertical",
        "darkDown",
        "darkUp",
        "darkGrid",
        "darkTrellis",
        "lightHorizontal",
        "lightVertical",
        "lightDown",
        "lightUp",
        "lightGrid",
        "lightTrellis",
        "gray125",
        "gray0625"
      ];
      var rev_XLSBFillPTNames = evert(XLSBFillPTNames);
      var parse_BrtFill = parsenoop;
      function write_BrtFill(fill2, o) {
        if (!o)
          o = new_buf(4 * 3 + 8 * 7 + 16 * 1);
        var fls = rev_XLSBFillPTNames[fill2.patternType];
        if (fls == null)
          fls = 40;
        o.write_shift(4, fls);
        var j = 0;
        if (fls != 40) {
          write_BrtColor({ auto: 1 }, o);
          write_BrtColor({ auto: 1 }, o);
          for (; j < 12; ++j)
            o.write_shift(4, 0);
        } else {
          for (; j < 4; ++j)
            o.write_shift(4, 0);
          for (; j < 12; ++j)
            o.write_shift(4, 0);
        }
        return o.length > o.l ? o.slice(0, o.l) : o;
      }
      function parse_BrtXF(data, length) {
        var tgt = data.l + length;
        var ixfeParent = data.read_shift(2);
        var ifmt = data.read_shift(2);
        data.l = tgt;
        return { ixfe: ixfeParent, numFmtId: ifmt };
      }
      function write_BrtXF(data, ixfeP, o) {
        if (!o)
          o = new_buf(16);
        o.write_shift(2, ixfeP || 0);
        o.write_shift(2, data.numFmtId || 0);
        o.write_shift(2, 0);
        o.write_shift(2, 0);
        o.write_shift(2, 0);
        o.write_shift(1, 0);
        o.write_shift(1, 0);
        var flow = 0;
        o.write_shift(1, flow);
        o.write_shift(1, 0);
        o.write_shift(1, 0);
        o.write_shift(1, 0);
        return o;
      }
      function write_Blxf(data, o) {
        if (!o)
          o = new_buf(10);
        o.write_shift(1, 0);
        o.write_shift(1, 0);
        o.write_shift(4, 0);
        o.write_shift(4, 0);
        return o;
      }
      var parse_BrtBorder = parsenoop;
      function write_BrtBorder(border, o) {
        if (!o)
          o = new_buf(51);
        o.write_shift(1, 0);
        write_Blxf(null, o);
        write_Blxf(null, o);
        write_Blxf(null, o);
        write_Blxf(null, o);
        write_Blxf(null, o);
        return o.length > o.l ? o.slice(0, o.l) : o;
      }
      function write_BrtStyle(style, o) {
        if (!o)
          o = new_buf(12 + 4 * 10);
        o.write_shift(4, style.xfId);
        o.write_shift(2, 1);
        o.write_shift(1, +style.builtinId);
        o.write_shift(1, 0);
        write_XLNullableWideString(style.name || "", o);
        return o.length > o.l ? o.slice(0, o.l) : o;
      }
      function write_BrtBeginTableStyles(cnt, defTableStyle, defPivotStyle) {
        var o = new_buf(4 + 256 * 2 * 4);
        o.write_shift(4, cnt);
        write_XLNullableWideString(defTableStyle, o);
        write_XLNullableWideString(defPivotStyle, o);
        return o.length > o.l ? o.slice(0, o.l) : o;
      }
      function parse_sty_bin(data, themes, opts) {
        var styles = {};
        styles.NumberFmt = [];
        for (var y in SSF._table)
          styles.NumberFmt[y] = SSF._table[y];
        styles.CellXf = [];
        styles.Fonts = [];
        var state = [];
        var pass = false;
        recordhopper(data, function hopper_sty(val, R_n, RT) {
          switch (RT) {
            case 44:
              styles.NumberFmt[val[0]] = val[1];
              SSF.load(val[1], val[0]);
              break;
            case 43:
              styles.Fonts.push(val);
              if (val.color.theme != null && themes && themes.themeElements && themes.themeElements.clrScheme) {
                val.color.rgb = rgb_tint(themes.themeElements.clrScheme[val.color.theme].rgb, val.color.tint || 0);
              }
              break;
            case 1025:
              break;
            case 45:
              break;
            case 46:
              break;
            case 47:
              if (state[state.length - 1] == "BrtBeginCellXFs") {
                styles.CellXf.push(val);
              }
              break;
            case 48:
            case 507:
            case 572:
            case 475:
              break;
            case 1171:
            case 2102:
            case 1130:
            case 512:
            case 2095:
            case 3072:
              break;
            case 35:
              pass = true;
              break;
            case 36:
              pass = false;
              break;
            case 37:
              state.push(R_n);
              pass = true;
              break;
            case 38:
              state.pop();
              pass = false;
              break;
            default:
              if ((R_n || "").indexOf("Begin") > 0)
                state.push(R_n);
              else if ((R_n || "").indexOf("End") > 0)
                state.pop();
              else if (!pass || opts.WTF && state[state.length - 1] != "BrtACBegin")
                throw new Error("Unexpected record " + RT + " " + R_n);
          }
        });
        return styles;
      }
      function write_FMTS_bin(ba, NF) {
        if (!NF)
          return;
        var cnt = 0;
        [[5, 8], [23, 26], [41, 44], [50, 392]].forEach(function(r) {
          for (var i2 = r[0]; i2 <= r[1]; ++i2)
            if (NF[i2] != null)
              ++cnt;
        });
        if (cnt == 0)
          return;
        write_record(ba, "BrtBeginFmts", write_UInt32LE(cnt));
        [[5, 8], [23, 26], [41, 44], [50, 392]].forEach(function(r) {
          for (var i2 = r[0]; i2 <= r[1]; ++i2)
            if (NF[i2] != null)
              write_record(ba, "BrtFmt", write_BrtFmt(i2, NF[i2]));
        });
        write_record(ba, "BrtEndFmts");
      }
      function write_FONTS_bin(ba) {
        var cnt = 1;
        if (cnt == 0)
          return;
        write_record(ba, "BrtBeginFonts", write_UInt32LE(cnt));
        write_record(ba, "BrtFont", write_BrtFont({
          sz: 12,
          color: { theme: 1 },
          name: "Calibri",
          family: 2,
          scheme: "minor"
        }));
        write_record(ba, "BrtEndFonts");
      }
      function write_FILLS_bin(ba) {
        var cnt = 2;
        if (cnt == 0)
          return;
        write_record(ba, "BrtBeginFills", write_UInt32LE(cnt));
        write_record(ba, "BrtFill", write_BrtFill({ patternType: "none" }));
        write_record(ba, "BrtFill", write_BrtFill({ patternType: "gray125" }));
        write_record(ba, "BrtEndFills");
      }
      function write_BORDERS_bin(ba) {
        var cnt = 1;
        if (cnt == 0)
          return;
        write_record(ba, "BrtBeginBorders", write_UInt32LE(cnt));
        write_record(ba, "BrtBorder", write_BrtBorder({}));
        write_record(ba, "BrtEndBorders");
      }
      function write_CELLSTYLEXFS_bin(ba) {
        var cnt = 1;
        write_record(ba, "BrtBeginCellStyleXFs", write_UInt32LE(cnt));
        write_record(ba, "BrtXF", write_BrtXF({
          numFmtId: 0,
          fontId: 0,
          fillId: 0,
          borderId: 0
        }, 65535));
        write_record(ba, "BrtEndCellStyleXFs");
      }
      function write_CELLXFS_bin(ba, data) {
        write_record(ba, "BrtBeginCellXFs", write_UInt32LE(data.length));
        data.forEach(function(c) {
          write_record(ba, "BrtXF", write_BrtXF(c, 0));
        });
        write_record(ba, "BrtEndCellXFs");
      }
      function write_STYLES_bin(ba) {
        var cnt = 1;
        write_record(ba, "BrtBeginStyles", write_UInt32LE(cnt));
        write_record(ba, "BrtStyle", write_BrtStyle({
          xfId: 0,
          builtinId: 0,
          name: "Normal"
        }));
        write_record(ba, "BrtEndStyles");
      }
      function write_DXFS_bin(ba) {
        var cnt = 0;
        write_record(ba, "BrtBeginDXFs", write_UInt32LE(cnt));
        write_record(ba, "BrtEndDXFs");
      }
      function write_TABLESTYLES_bin(ba) {
        var cnt = 0;
        write_record(ba, "BrtBeginTableStyles", write_BrtBeginTableStyles(cnt, "TableStyleMedium9", "PivotStyleMedium4"));
        write_record(ba, "BrtEndTableStyles");
      }
      function write_COLORPALETTE_bin() {
        return;
      }
      function write_sty_bin(wb, opts) {
        var ba = buf_array();
        write_record(ba, "BrtBeginStyleSheet");
        write_FMTS_bin(ba, wb.SSF);
        write_FONTS_bin(ba, wb);
        write_FILLS_bin(ba, wb);
        write_BORDERS_bin(ba, wb);
        write_CELLSTYLEXFS_bin(ba, wb);
        write_CELLXFS_bin(ba, opts.cellXfs);
        write_STYLES_bin(ba, wb);
        write_DXFS_bin(ba, wb);
        write_TABLESTYLES_bin(ba, wb);
        write_COLORPALETTE_bin(ba, wb);
        write_record(ba, "BrtEndStyleSheet");
        return ba.end();
      }
      RELS.THEME = "http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme";
      var XLSXThemeClrScheme = [
        "</a:lt1>",
        "</a:dk1>",
        "</a:lt2>",
        "</a:dk2>",
        "</a:accent1>",
        "</a:accent2>",
        "</a:accent3>",
        "</a:accent4>",
        "</a:accent5>",
        "</a:accent6>",
        "</a:hlink>",
        "</a:folHlink>"
      ];
      function parse_clrScheme(t, themes, opts) {
        themes.themeElements.clrScheme = [];
        var color = {};
        (t[0].match(tagregex) || []).forEach(function(x) {
          var y = parsexmltag(x);
          switch (y[0]) {
            case "<a:clrScheme":
            case "</a:clrScheme>":
              break;
            case "<a:srgbClr":
              color.rgb = y.val;
              break;
            case "<a:sysClr":
              color.rgb = y.lastClr;
              break;
            case "<a:dk1>":
            case "</a:dk1>":
            case "<a:lt1>":
            case "</a:lt1>":
            case "<a:dk2>":
            case "</a:dk2>":
            case "<a:lt2>":
            case "</a:lt2>":
            case "<a:accent1>":
            case "</a:accent1>":
            case "<a:accent2>":
            case "</a:accent2>":
            case "<a:accent3>":
            case "</a:accent3>":
            case "<a:accent4>":
            case "</a:accent4>":
            case "<a:accent5>":
            case "</a:accent5>":
            case "<a:accent6>":
            case "</a:accent6>":
            case "<a:hlink>":
            case "</a:hlink>":
            case "<a:folHlink>":
            case "</a:folHlink>":
              if (y[0].charAt(1) === "/") {
                themes.themeElements.clrScheme[XLSXThemeClrScheme.indexOf(y[0])] = color;
                color = {};
              } else {
                color.name = y[0].slice(3, y[0].length - 1);
              }
              break;
            default:
              if (opts && opts.WTF)
                throw new Error("Unrecognized " + y[0] + " in clrScheme");
          }
        });
      }
      function parse_fontScheme() {
      }
      function parse_fmtScheme() {
      }
      var clrsregex = /<a:clrScheme([^>]*)>[\s\S]*<\/a:clrScheme>/;
      var fntsregex = /<a:fontScheme([^>]*)>[\s\S]*<\/a:fontScheme>/;
      var fmtsregex = /<a:fmtScheme([^>]*)>[\s\S]*<\/a:fmtScheme>/;
      function parse_themeElements(data, themes, opts) {
        themes.themeElements = {};
        var t;
        [
          ["clrScheme", clrsregex, parse_clrScheme],
          ["fontScheme", fntsregex, parse_fontScheme],
          ["fmtScheme", fmtsregex, parse_fmtScheme]
        ].forEach(function(m) {
          if (!(t = data.match(m[1])))
            throw new Error(m[0] + " not found in themeElements");
          m[2](t, themes, opts);
        });
      }
      var themeltregex = /<a:themeElements([^>]*)>[\s\S]*<\/a:themeElements>/;
      function parse_theme_xml(data, opts) {
        if (!data || data.length === 0)
          return parse_theme_xml(write_theme());
        var t;
        var themes = {};
        if (!(t = data.match(themeltregex)))
          throw new Error("themeElements not found in theme");
        parse_themeElements(t[0], themes, opts);
        themes.raw = data;
        return themes;
      }
      function write_theme(Themes, opts) {
        if (opts && opts.themeXLSX)
          return opts.themeXLSX;
        if (Themes && typeof Themes.raw == "string")
          return Themes.raw;
        var o = [XML_HEADER];
        o[o.length] = '<a:theme xmlns:a="http://schemas.openxmlformats.org/drawingml/2006/main" name="Office Theme">';
        o[o.length] = "<a:themeElements>";
        o[o.length] = '<a:clrScheme name="Office">';
        o[o.length] = '<a:dk1><a:sysClr val="windowText" lastClr="000000"/></a:dk1>';
        o[o.length] = '<a:lt1><a:sysClr val="window" lastClr="FFFFFF"/></a:lt1>';
        o[o.length] = '<a:dk2><a:srgbClr val="1F497D"/></a:dk2>';
        o[o.length] = '<a:lt2><a:srgbClr val="EEECE1"/></a:lt2>';
        o[o.length] = '<a:accent1><a:srgbClr val="4F81BD"/></a:accent1>';
        o[o.length] = '<a:accent2><a:srgbClr val="C0504D"/></a:accent2>';
        o[o.length] = '<a:accent3><a:srgbClr val="9BBB59"/></a:accent3>';
        o[o.length] = '<a:accent4><a:srgbClr val="8064A2"/></a:accent4>';
        o[o.length] = '<a:accent5><a:srgbClr val="4BACC6"/></a:accent5>';
        o[o.length] = '<a:accent6><a:srgbClr val="F79646"/></a:accent6>';
        o[o.length] = '<a:hlink><a:srgbClr val="0000FF"/></a:hlink>';
        o[o.length] = '<a:folHlink><a:srgbClr val="800080"/></a:folHlink>';
        o[o.length] = "</a:clrScheme>";
        o[o.length] = '<a:fontScheme name="Office">';
        o[o.length] = "<a:majorFont>";
        o[o.length] = '<a:latin typeface="Cambria"/>';
        o[o.length] = '<a:ea typeface=""/>';
        o[o.length] = '<a:cs typeface=""/>';
        o[o.length] = '<a:font script="Jpan" typeface="\uFF2D\uFF33 \uFF30\u30B4\u30B7\u30C3\u30AF"/>';
        o[o.length] = '<a:font script="Hang" typeface="\uB9D1\uC740 \uACE0\uB515"/>';
        o[o.length] = '<a:font script="Hans" typeface="\u5B8B\u4F53"/>';
        o[o.length] = '<a:font script="Hant" typeface="\u65B0\u7D30\u660E\u9AD4"/>';
        o[o.length] = '<a:font script="Arab" typeface="Times New Roman"/>';
        o[o.length] = '<a:font script="Hebr" typeface="Times New Roman"/>';
        o[o.length] = '<a:font script="Thai" typeface="Tahoma"/>';
        o[o.length] = '<a:font script="Ethi" typeface="Nyala"/>';
        o[o.length] = '<a:font script="Beng" typeface="Vrinda"/>';
        o[o.length] = '<a:font script="Gujr" typeface="Shruti"/>';
        o[o.length] = '<a:font script="Khmr" typeface="MoolBoran"/>';
        o[o.length] = '<a:font script="Knda" typeface="Tunga"/>';
        o[o.length] = '<a:font script="Guru" typeface="Raavi"/>';
        o[o.length] = '<a:font script="Cans" typeface="Euphemia"/>';
        o[o.length] = '<a:font script="Cher" typeface="Plantagenet Cherokee"/>';
        o[o.length] = '<a:font script="Yiii" typeface="Microsoft Yi Baiti"/>';
        o[o.length] = '<a:font script="Tibt" typeface="Microsoft Himalaya"/>';
        o[o.length] = '<a:font script="Thaa" typeface="MV Boli"/>';
        o[o.length] = '<a:font script="Deva" typeface="Mangal"/>';
        o[o.length] = '<a:font script="Telu" typeface="Gautami"/>';
        o[o.length] = '<a:font script="Taml" typeface="Latha"/>';
        o[o.length] = '<a:font script="Syrc" typeface="Estrangelo Edessa"/>';
        o[o.length] = '<a:font script="Orya" typeface="Kalinga"/>';
        o[o.length] = '<a:font script="Mlym" typeface="Kartika"/>';
        o[o.length] = '<a:font script="Laoo" typeface="DokChampa"/>';
        o[o.length] = '<a:font script="Sinh" typeface="Iskoola Pota"/>';
        o[o.length] = '<a:font script="Mong" typeface="Mongolian Baiti"/>';
        o[o.length] = '<a:font script="Viet" typeface="Times New Roman"/>';
        o[o.length] = '<a:font script="Uigh" typeface="Microsoft Uighur"/>';
        o[o.length] = '<a:font script="Geor" typeface="Sylfaen"/>';
        o[o.length] = "</a:majorFont>";
        o[o.length] = "<a:minorFont>";
        o[o.length] = '<a:latin typeface="Calibri"/>';
        o[o.length] = '<a:ea typeface=""/>';
        o[o.length] = '<a:cs typeface=""/>';
        o[o.length] = '<a:font script="Jpan" typeface="\uFF2D\uFF33 \uFF30\u30B4\u30B7\u30C3\u30AF"/>';
        o[o.length] = '<a:font script="Hang" typeface="\uB9D1\uC740 \uACE0\uB515"/>';
        o[o.length] = '<a:font script="Hans" typeface="\u5B8B\u4F53"/>';
        o[o.length] = '<a:font script="Hant" typeface="\u65B0\u7D30\u660E\u9AD4"/>';
        o[o.length] = '<a:font script="Arab" typeface="Arial"/>';
        o[o.length] = '<a:font script="Hebr" typeface="Arial"/>';
        o[o.length] = '<a:font script="Thai" typeface="Tahoma"/>';
        o[o.length] = '<a:font script="Ethi" typeface="Nyala"/>';
        o[o.length] = '<a:font script="Beng" typeface="Vrinda"/>';
        o[o.length] = '<a:font script="Gujr" typeface="Shruti"/>';
        o[o.length] = '<a:font script="Khmr" typeface="DaunPenh"/>';
        o[o.length] = '<a:font script="Knda" typeface="Tunga"/>';
        o[o.length] = '<a:font script="Guru" typeface="Raavi"/>';
        o[o.length] = '<a:font script="Cans" typeface="Euphemia"/>';
        o[o.length] = '<a:font script="Cher" typeface="Plantagenet Cherokee"/>';
        o[o.length] = '<a:font script="Yiii" typeface="Microsoft Yi Baiti"/>';
        o[o.length] = '<a:font script="Tibt" typeface="Microsoft Himalaya"/>';
        o[o.length] = '<a:font script="Thaa" typeface="MV Boli"/>';
        o[o.length] = '<a:font script="Deva" typeface="Mangal"/>';
        o[o.length] = '<a:font script="Telu" typeface="Gautami"/>';
        o[o.length] = '<a:font script="Taml" typeface="Latha"/>';
        o[o.length] = '<a:font script="Syrc" typeface="Estrangelo Edessa"/>';
        o[o.length] = '<a:font script="Orya" typeface="Kalinga"/>';
        o[o.length] = '<a:font script="Mlym" typeface="Kartika"/>';
        o[o.length] = '<a:font script="Laoo" typeface="DokChampa"/>';
        o[o.length] = '<a:font script="Sinh" typeface="Iskoola Pota"/>';
        o[o.length] = '<a:font script="Mong" typeface="Mongolian Baiti"/>';
        o[o.length] = '<a:font script="Viet" typeface="Arial"/>';
        o[o.length] = '<a:font script="Uigh" typeface="Microsoft Uighur"/>';
        o[o.length] = '<a:font script="Geor" typeface="Sylfaen"/>';
        o[o.length] = "</a:minorFont>";
        o[o.length] = "</a:fontScheme>";
        o[o.length] = '<a:fmtScheme name="Office">';
        o[o.length] = "<a:fillStyleLst>";
        o[o.length] = '<a:solidFill><a:schemeClr val="phClr"/></a:solidFill>';
        o[o.length] = '<a:gradFill rotWithShape="1">';
        o[o.length] = "<a:gsLst>";
        o[o.length] = '<a:gs pos="0"><a:schemeClr val="phClr"><a:tint val="50000"/><a:satMod val="300000"/></a:schemeClr></a:gs>';
        o[o.length] = '<a:gs pos="35000"><a:schemeClr val="phClr"><a:tint val="37000"/><a:satMod val="300000"/></a:schemeClr></a:gs>';
        o[o.length] = '<a:gs pos="100000"><a:schemeClr val="phClr"><a:tint val="15000"/><a:satMod val="350000"/></a:schemeClr></a:gs>';
        o[o.length] = "</a:gsLst>";
        o[o.length] = '<a:lin ang="16200000" scaled="1"/>';
        o[o.length] = "</a:gradFill>";
        o[o.length] = '<a:gradFill rotWithShape="1">';
        o[o.length] = "<a:gsLst>";
        o[o.length] = '<a:gs pos="0"><a:schemeClr val="phClr"><a:tint val="100000"/><a:shade val="100000"/><a:satMod val="130000"/></a:schemeClr></a:gs>';
        o[o.length] = '<a:gs pos="100000"><a:schemeClr val="phClr"><a:tint val="50000"/><a:shade val="100000"/><a:satMod val="350000"/></a:schemeClr></a:gs>';
        o[o.length] = "</a:gsLst>";
        o[o.length] = '<a:lin ang="16200000" scaled="0"/>';
        o[o.length] = "</a:gradFill>";
        o[o.length] = "</a:fillStyleLst>";
        o[o.length] = "<a:lnStyleLst>";
        o[o.length] = '<a:ln w="9525" cap="flat" cmpd="sng" algn="ctr"><a:solidFill><a:schemeClr val="phClr"><a:shade val="95000"/><a:satMod val="105000"/></a:schemeClr></a:solidFill><a:prstDash val="solid"/></a:ln>';
        o[o.length] = '<a:ln w="25400" cap="flat" cmpd="sng" algn="ctr"><a:solidFill><a:schemeClr val="phClr"/></a:solidFill><a:prstDash val="solid"/></a:ln>';
        o[o.length] = '<a:ln w="38100" cap="flat" cmpd="sng" algn="ctr"><a:solidFill><a:schemeClr val="phClr"/></a:solidFill><a:prstDash val="solid"/></a:ln>';
        o[o.length] = "</a:lnStyleLst>";
        o[o.length] = "<a:effectStyleLst>";
        o[o.length] = "<a:effectStyle>";
        o[o.length] = "<a:effectLst>";
        o[o.length] = '<a:outerShdw blurRad="40000" dist="20000" dir="5400000" rotWithShape="0"><a:srgbClr val="000000"><a:alpha val="38000"/></a:srgbClr></a:outerShdw>';
        o[o.length] = "</a:effectLst>";
        o[o.length] = "</a:effectStyle>";
        o[o.length] = "<a:effectStyle>";
        o[o.length] = "<a:effectLst>";
        o[o.length] = '<a:outerShdw blurRad="40000" dist="23000" dir="5400000" rotWithShape="0"><a:srgbClr val="000000"><a:alpha val="35000"/></a:srgbClr></a:outerShdw>';
        o[o.length] = "</a:effectLst>";
        o[o.length] = "</a:effectStyle>";
        o[o.length] = "<a:effectStyle>";
        o[o.length] = "<a:effectLst>";
        o[o.length] = '<a:outerShdw blurRad="40000" dist="23000" dir="5400000" rotWithShape="0"><a:srgbClr val="000000"><a:alpha val="35000"/></a:srgbClr></a:outerShdw>';
        o[o.length] = "</a:effectLst>";
        o[o.length] = '<a:scene3d><a:camera prst="orthographicFront"><a:rot lat="0" lon="0" rev="0"/></a:camera><a:lightRig rig="threePt" dir="t"><a:rot lat="0" lon="0" rev="1200000"/></a:lightRig></a:scene3d>';
        o[o.length] = '<a:sp3d><a:bevelT w="63500" h="25400"/></a:sp3d>';
        o[o.length] = "</a:effectStyle>";
        o[o.length] = "</a:effectStyleLst>";
        o[o.length] = "<a:bgFillStyleLst>";
        o[o.length] = '<a:solidFill><a:schemeClr val="phClr"/></a:solidFill>';
        o[o.length] = '<a:gradFill rotWithShape="1">';
        o[o.length] = "<a:gsLst>";
        o[o.length] = '<a:gs pos="0"><a:schemeClr val="phClr"><a:tint val="40000"/><a:satMod val="350000"/></a:schemeClr></a:gs>';
        o[o.length] = '<a:gs pos="40000"><a:schemeClr val="phClr"><a:tint val="45000"/><a:shade val="99000"/><a:satMod val="350000"/></a:schemeClr></a:gs>';
        o[o.length] = '<a:gs pos="100000"><a:schemeClr val="phClr"><a:shade val="20000"/><a:satMod val="255000"/></a:schemeClr></a:gs>';
        o[o.length] = "</a:gsLst>";
        o[o.length] = '<a:path path="circle"><a:fillToRect l="50000" t="-80000" r="50000" b="180000"/></a:path>';
        o[o.length] = "</a:gradFill>";
        o[o.length] = '<a:gradFill rotWithShape="1">';
        o[o.length] = "<a:gsLst>";
        o[o.length] = '<a:gs pos="0"><a:schemeClr val="phClr"><a:tint val="80000"/><a:satMod val="300000"/></a:schemeClr></a:gs>';
        o[o.length] = '<a:gs pos="100000"><a:schemeClr val="phClr"><a:shade val="30000"/><a:satMod val="200000"/></a:schemeClr></a:gs>';
        o[o.length] = "</a:gsLst>";
        o[o.length] = '<a:path path="circle"><a:fillToRect l="50000" t="50000" r="50000" b="50000"/></a:path>';
        o[o.length] = "</a:gradFill>";
        o[o.length] = "</a:bgFillStyleLst>";
        o[o.length] = "</a:fmtScheme>";
        o[o.length] = "</a:themeElements>";
        o[o.length] = "<a:objectDefaults>";
        o[o.length] = "<a:spDef>";
        o[o.length] = '<a:spPr/><a:bodyPr/><a:lstStyle/><a:style><a:lnRef idx="1"><a:schemeClr val="accent1"/></a:lnRef><a:fillRef idx="3"><a:schemeClr val="accent1"/></a:fillRef><a:effectRef idx="2"><a:schemeClr val="accent1"/></a:effectRef><a:fontRef idx="minor"><a:schemeClr val="lt1"/></a:fontRef></a:style>';
        o[o.length] = "</a:spDef>";
        o[o.length] = "<a:lnDef>";
        o[o.length] = '<a:spPr/><a:bodyPr/><a:lstStyle/><a:style><a:lnRef idx="2"><a:schemeClr val="accent1"/></a:lnRef><a:fillRef idx="0"><a:schemeClr val="accent1"/></a:fillRef><a:effectRef idx="1"><a:schemeClr val="accent1"/></a:effectRef><a:fontRef idx="minor"><a:schemeClr val="tx1"/></a:fontRef></a:style>';
        o[o.length] = "</a:lnDef>";
        o[o.length] = "</a:objectDefaults>";
        o[o.length] = "<a:extraClrSchemeLst/>";
        o[o.length] = "</a:theme>";
        return o.join("");
      }
      function parse_Theme(blob, length, opts) {
        var end = blob.l + length;
        var dwThemeVersion = blob.read_shift(4);
        if (dwThemeVersion === 124226)
          return;
        if (!opts.cellStyles) {
          blob.l = end;
          return;
        }
        var data = blob.slice(blob.l);
        blob.l = end;
        var zip;
        try {
          zip = zip_read(data, { type: "array" });
        } catch (e) {
          return;
        }
        var themeXML = getzipstr(zip, "theme/theme/theme1.xml", true);
        if (!themeXML)
          return;
        return parse_theme_xml(themeXML, opts);
      }
      function parse_ColorTheme(blob) {
        return blob.read_shift(4);
      }
      function parse_FullColorExt(blob) {
        var o = {};
        o.xclrType = blob.read_shift(2);
        o.nTintShade = blob.read_shift(2);
        switch (o.xclrType) {
          case 0:
            blob.l += 4;
            break;
          case 1:
            o.xclrValue = parse_IcvXF(blob, 4);
            break;
          case 2:
            o.xclrValue = parse_LongRGBA(blob, 4);
            break;
          case 3:
            o.xclrValue = parse_ColorTheme(blob, 4);
            break;
          case 4:
            blob.l += 4;
            break;
        }
        blob.l += 8;
        return o;
      }
      function parse_IcvXF(blob, length) {
        return parsenoop(blob, length);
      }
      function parse_XFExtGradient(blob, length) {
        return parsenoop(blob, length);
      }
      function parse_ExtProp(blob) {
        var extType = blob.read_shift(2);
        var cb = blob.read_shift(2) - 4;
        var o = [extType];
        switch (extType) {
          case 4:
          case 5:
          case 7:
          case 8:
          case 9:
          case 10:
          case 11:
          case 13:
            o[1] = parse_FullColorExt(blob, cb);
            break;
          case 6:
            o[1] = parse_XFExtGradient(blob, cb);
            break;
          case 14:
          case 15:
            o[1] = blob.read_shift(cb === 1 ? 1 : 2);
            break;
          default:
            throw new Error("Unrecognized ExtProp type: " + extType + " " + cb);
        }
        return o;
      }
      function parse_XFExt(blob, length) {
        var end = blob.l + length;
        blob.l += 2;
        var ixfe = blob.read_shift(2);
        blob.l += 2;
        var cexts = blob.read_shift(2);
        var ext = [];
        while (cexts-- > 0)
          ext.push(parse_ExtProp(blob, end - blob.l));
        return { ixfe, ext };
      }
      function update_xfext(xf, xfext) {
        xfext.forEach(function(xfe) {
          switch (xfe[0]) {
            case 4:
              break;
            case 5:
              break;
            case 6:
              break;
            case 7:
              break;
            case 8:
              break;
            case 9:
              break;
            case 10:
              break;
            case 11:
              break;
            case 13:
              break;
            case 14:
              break;
            case 15:
              break;
          }
        });
      }
      function parse_cc_xml(data) {
        var d = [];
        if (!data)
          return d;
        var i2 = 1;
        (data.match(tagregex) || []).forEach(function(x) {
          var y = parsexmltag(x);
          switch (y[0]) {
            case "<?xml":
              break;
            case "<calcChain":
            case "<calcChain>":
            case "</calcChain>":
              break;
            case "<c":
              delete y[0];
              if (y.i)
                i2 = y.i;
              else
                y.i = i2;
              d.push(y);
              break;
          }
        });
        return d;
      }
      function parse_BrtCalcChainItem$(data) {
        var out = {};
        out.i = data.read_shift(4);
        var cell = {};
        cell.r = data.read_shift(4);
        cell.c = data.read_shift(4);
        out.r = encode_cell(cell);
        var flags = data.read_shift(1);
        if (flags & 2)
          out.l = "1";
        if (flags & 8)
          out.a = "1";
        return out;
      }
      function parse_cc_bin(data, name2, opts) {
        var out = [];
        var pass = false;
        recordhopper(data, function hopper_cc(val, R_n, RT) {
          switch (RT) {
            case 63:
              out.push(val);
              break;
            default:
              if ((R_n || "").indexOf("Begin") > 0) {
              } else if ((R_n || "").indexOf("End") > 0) {
              } else if (!pass || opts.WTF)
                throw new Error("Unexpected record " + RT + " " + R_n);
          }
        });
        return out;
      }
      function parse_xlink_xml() {
      }
      function parse_xlink_bin(data, rel, name2, _opts) {
        if (!data)
          return data;
        var opts = _opts || {};
        var pass = false, end = false;
        recordhopper(data, function xlink_parse(val, R_n, RT) {
          if (end)
            return;
          switch (RT) {
            case 359:
            case 363:
            case 364:
            case 366:
            case 367:
            case 368:
            case 369:
            case 370:
            case 371:
            case 472:
            case 577:
            case 578:
            case 579:
            case 580:
            case 581:
            case 582:
            case 583:
            case 584:
            case 585:
            case 586:
            case 587:
              break;
            case 35:
              pass = true;
              break;
            case 36:
              pass = false;
              break;
            default:
              if ((R_n || "").indexOf("Begin") > 0) {
              } else if ((R_n || "").indexOf("End") > 0) {
              } else if (!pass || opts.WTF)
                throw new Error("Unexpected record " + RT.toString(16) + " " + R_n);
          }
        }, opts);
      }
      RELS.IMG = "http://schemas.openxmlformats.org/officeDocument/2006/relationships/image";
      RELS.DRAW = "http://schemas.openxmlformats.org/officeDocument/2006/relationships/drawing";
      function parse_drawing(data, rels) {
        if (!data)
          return "??";
        var id = (data.match(/<c:chart [^>]*r:id="([^"]*)"/) || ["", ""])[1];
        return rels["!id"][id].Target;
      }
      var _shapeid = 1024;
      function write_comments_vml(rId, comments) {
        var csize = [21600, 21600];
        var bbox = ["m0,0l0", csize[1], csize[0], csize[1], csize[0], "0xe"].join(",");
        var o = [
          writextag("xml", null, { "xmlns:v": XLMLNS.v, "xmlns:o": XLMLNS.o, "xmlns:x": XLMLNS.x, "xmlns:mv": XLMLNS.mv }).replace(/\/>/, ">"),
          writextag("o:shapelayout", writextag("o:idmap", null, { "v:ext": "edit", "data": rId }), { "v:ext": "edit" }),
          writextag("v:shapetype", [
            writextag("v:stroke", null, { joinstyle: "miter" }),
            writextag("v:path", null, { gradientshapeok: "t", "o:connecttype": "rect" })
          ].join(""), { id: "_x0000_t202", "o:spt": 202, coordsize: csize.join(","), path: bbox })
        ];
        while (_shapeid < rId * 1e3)
          _shapeid += 1e3;
        comments.forEach(function(x) {
          var c = decode_cell(x[0]);
          var fillopts = { "color2": "#BEFF82", "type": "gradient" };
          if (fillopts.type == "gradient")
            fillopts.angle = "-180";
          var fillparm = fillopts.type == "gradient" ? writextag("o:fill", null, { type: "gradientUnscaled", "v:ext": "view" }) : null;
          var fillxml = writextag("v:fill", fillparm, fillopts);
          var shadata = { on: "t", "obscured": "t" };
          ++_shapeid;
          o = o.concat([
            "<v:shape" + wxt_helper({
              id: "_x0000_s" + _shapeid,
              type: "#_x0000_t202",
              style: "position:absolute; margin-left:80pt;margin-top:5pt;width:104pt;height:64pt;z-index:10" + (x[1].hidden ? ";visibility:hidden" : ""),
              fillcolor: "#ECFAD4",
              strokecolor: "#edeaa1"
            }) + ">",
            fillxml,
            writextag("v:shadow", null, shadata),
            writextag("v:path", null, { "o:connecttype": "none" }),
            '<v:textbox><div style="text-align:left"></div></v:textbox>',
            '<x:ClientData ObjectType="Note">',
            "<x:MoveWithCells/>",
            "<x:SizeWithCells/>",
            writetag("x:Anchor", [c.c + 1, 0, c.r + 1, 0, c.c + 3, 20, c.r + 5, 20].join(",")),
            writetag("x:AutoFill", "False"),
            writetag("x:Row", String(c.r)),
            writetag("x:Column", String(c.c)),
            x[1].hidden ? "" : "<x:Visible/>",
            "</x:ClientData>",
            "</v:shape>"
          ]);
        });
        o.push("</xml>");
        return o.join("");
      }
      RELS.CMNT = "http://schemas.openxmlformats.org/officeDocument/2006/relationships/comments";
      function sheet_insert_comments(sheet, comments) {
        var dense = Array.isArray(sheet);
        var cell;
        comments.forEach(function(comment) {
          var r = decode_cell(comment.ref);
          if (dense) {
            if (!sheet[r.r])
              sheet[r.r] = [];
            cell = sheet[r.r][r.c];
          } else
            cell = sheet[comment.ref];
          if (!cell) {
            cell = { t: "z" };
            if (dense)
              sheet[r.r][r.c] = cell;
            else
              sheet[comment.ref] = cell;
            var range = safe_decode_range(sheet["!ref"] || "BDWGO1000001:A1");
            if (range.s.r > r.r)
              range.s.r = r.r;
            if (range.e.r < r.r)
              range.e.r = r.r;
            if (range.s.c > r.c)
              range.s.c = r.c;
            if (range.e.c < r.c)
              range.e.c = r.c;
            var encoded = encode_range(range);
            if (encoded !== sheet["!ref"])
              sheet["!ref"] = encoded;
          }
          if (!cell.c)
            cell.c = [];
          var o = { a: comment.author, t: comment.t, r: comment.r };
          if (comment.h)
            o.h = comment.h;
          cell.c.push(o);
        });
      }
      function parse_comments_xml(data, opts) {
        if (data.match(/<(?:\w+:)?comments *\/>/))
          return [];
        var authors = [];
        var commentList = [];
        var authtag = data.match(/<(?:\w+:)?authors>([\s\S]*)<\/(?:\w+:)?authors>/);
        if (authtag && authtag[1])
          authtag[1].split(/<\/\w*:?author>/).forEach(function(x) {
            if (x === "" || x.trim() === "")
              return;
            var a = x.match(/<(?:\w+:)?author[^>]*>(.*)/);
            if (a)
              authors.push(a[1]);
          });
        var cmnttag = data.match(/<(?:\w+:)?commentList>([\s\S]*)<\/(?:\w+:)?commentList>/);
        if (cmnttag && cmnttag[1])
          cmnttag[1].split(/<\/\w*:?comment>/).forEach(function(x) {
            if (x === "" || x.trim() === "")
              return;
            var cm = x.match(/<(?:\w+:)?comment[^>]*>/);
            if (!cm)
              return;
            var y = parsexmltag(cm[0]);
            var comment = { author: y.authorId && authors[y.authorId] || "sheetjsghost", ref: y.ref, guid: y.guid };
            var cell = decode_cell(y.ref);
            if (opts.sheetRows && opts.sheetRows <= cell.r)
              return;
            var textMatch = x.match(/<(?:\w+:)?text>([\s\S]*)<\/(?:\w+:)?text>/);
            var rt = !!textMatch && !!textMatch[1] && parse_si(textMatch[1]) || { r: "", t: "", h: "" };
            comment.r = rt.r;
            if (rt.r == "<t></t>")
              rt.t = rt.h = "";
            comment.t = (rt.t || "").replace(/\r\n/g, "\n").replace(/\r/g, "\n");
            if (opts.cellHTML)
              comment.h = rt.h;
            commentList.push(comment);
          });
        return commentList;
      }
      var CMNT_XML_ROOT = writextag("comments", null, { "xmlns": XMLNS.main[0] });
      function write_comments_xml(data) {
        var o = [XML_HEADER, CMNT_XML_ROOT];
        var iauthor = [];
        o.push("<authors>");
        data.forEach(function(x) {
          x[1].forEach(function(w) {
            var a = escapexml(w.a);
            if (iauthor.indexOf(a) > -1)
              return;
            iauthor.push(a);
            o.push("<author>" + a + "</author>");
          });
        });
        o.push("</authors>");
        o.push("<commentList>");
        data.forEach(function(d) {
          d[1].forEach(function(c) {
            o.push('<comment ref="' + d[0] + '" authorId="' + iauthor.indexOf(escapexml(c.a)) + '"><text>');
            o.push(writetag("t", c.t == null ? "" : escapexml(c.t)));
            o.push("</text></comment>");
          });
        });
        o.push("</commentList>");
        if (o.length > 2) {
          o[o.length] = "</comments>";
          o[1] = o[1].replace("/>", ">");
        }
        return o.join("");
      }
      function parse_BrtBeginComment(data) {
        var out = {};
        out.iauthor = data.read_shift(4);
        var rfx = parse_UncheckedRfX(data, 16);
        out.rfx = rfx.s;
        out.ref = encode_cell(rfx.s);
        data.l += 16;
        return out;
      }
      function write_BrtBeginComment(data, o) {
        if (o == null)
          o = new_buf(36);
        o.write_shift(4, data[1].iauthor);
        write_UncheckedRfX(data[0], o);
        o.write_shift(4, 0);
        o.write_shift(4, 0);
        o.write_shift(4, 0);
        o.write_shift(4, 0);
        return o;
      }
      var parse_BrtCommentAuthor = parse_XLWideString;
      function write_BrtCommentAuthor(data) {
        return write_XLWideString(data.slice(0, 54));
      }
      function parse_comments_bin(data, opts) {
        var out = [];
        var authors = [];
        var c = {};
        var pass = false;
        recordhopper(data, function hopper_cmnt(val, R_n, RT) {
          switch (RT) {
            case 632:
              authors.push(val);
              break;
            case 635:
              c = val;
              break;
            case 637:
              c.t = val.t;
              c.h = val.h;
              c.r = val.r;
              break;
            case 636:
              c.author = authors[c.iauthor];
              delete c.iauthor;
              if (opts.sheetRows && c.rfx && opts.sheetRows <= c.rfx.r)
                break;
              if (!c.t)
                c.t = "";
              delete c.rfx;
              out.push(c);
              break;
            case 3072:
              break;
            case 35:
              pass = true;
              break;
            case 36:
              pass = false;
              break;
            case 37:
              break;
            case 38:
              break;
            default:
              if ((R_n || "").indexOf("Begin") > 0) {
              } else if ((R_n || "").indexOf("End") > 0) {
              } else if (!pass || opts.WTF)
                throw new Error("Unexpected record " + RT + " " + R_n);
          }
        });
        return out;
      }
      function write_comments_bin(data) {
        var ba = buf_array();
        var iauthor = [];
        write_record(ba, "BrtBeginComments");
        write_record(ba, "BrtBeginCommentAuthors");
        data.forEach(function(comment) {
          comment[1].forEach(function(c) {
            if (iauthor.indexOf(c.a) > -1)
              return;
            iauthor.push(c.a.slice(0, 54));
            write_record(ba, "BrtCommentAuthor", write_BrtCommentAuthor(c.a));
          });
        });
        write_record(ba, "BrtEndCommentAuthors");
        write_record(ba, "BrtBeginCommentList");
        data.forEach(function(comment) {
          comment[1].forEach(function(c) {
            c.iauthor = iauthor.indexOf(c.a);
            var range = { s: decode_cell(comment[0]), e: decode_cell(comment[0]) };
            write_record(ba, "BrtBeginComment", write_BrtBeginComment([range, c]));
            if (c.t && c.t.length > 0)
              write_record(ba, "BrtCommentText", write_BrtCommentText(c));
            write_record(ba, "BrtEndComment");
            delete c.iauthor;
          });
        });
        write_record(ba, "BrtEndCommentList");
        write_record(ba, "BrtEndComments");
        return ba.end();
      }
      var CT_VBA = "application/vnd.ms-office.vbaProject";
      function make_vba_xls(cfb) {
        var newcfb = CFB.utils.cfb_new({ root: "R" });
        cfb.FullPaths.forEach(function(p, i2) {
          if (p.slice(-1) === "/" || !p.match(/_VBA_PROJECT_CUR/))
            return;
          var newpath = p.replace(/^[^\/]*/, "R").replace(/\/_VBA_PROJECT_CUR\u0000*/, "");
          CFB.utils.cfb_add(newcfb, newpath, cfb.FileIndex[i2].content);
        });
        return CFB.write(newcfb);
      }
      function fill_vba_xls(cfb, vba) {
        vba.FullPaths.forEach(function(p, i2) {
          if (i2 == 0)
            return;
          var newpath = p.replace(/[^\/]*[\/]/, "/_VBA_PROJECT_CUR/");
          if (newpath.slice(-1) !== "/")
            CFB.utils.cfb_add(cfb, newpath, vba.FileIndex[i2].content);
        });
      }
      var VBAFMTS = ["xlsb", "xlsm", "xlam", "biff8", "xla"];
      RELS.DS = "http://schemas.openxmlformats.org/officeDocument/2006/relationships/dialogsheet";
      RELS.MS = "http://schemas.microsoft.com/office/2006/relationships/xlMacrosheet";
      function parse_ds_bin() {
        return { "!type": "dialog" };
      }
      function parse_ds_xml() {
        return { "!type": "dialog" };
      }
      function parse_ms_bin() {
        return { "!type": "macro" };
      }
      function parse_ms_xml() {
        return { "!type": "macro" };
      }
      var rc_to_a1 = function() {
        var rcregex = /(^|[^A-Za-z_])R(\[?-?\d+\]|[1-9]\d*|)C(\[?-?\d+\]|[1-9]\d*|)(?![A-Za-z0-9_])/g;
        var rcbase = { r: 0, c: 0 };
        function rcfunc($$, $1, $2, $3) {
          var cRel = false, rRel = false;
          if ($2.length == 0)
            rRel = true;
          else if ($2.charAt(0) == "[") {
            rRel = true;
            $2 = $2.slice(1, -1);
          }
          if ($3.length == 0)
            cRel = true;
          else if ($3.charAt(0) == "[") {
            cRel = true;
            $3 = $3.slice(1, -1);
          }
          var R = $2.length > 0 ? parseInt($2, 10) | 0 : 0, C = $3.length > 0 ? parseInt($3, 10) | 0 : 0;
          if (cRel)
            C += rcbase.c;
          else
            --C;
          if (rRel)
            R += rcbase.r;
          else
            --R;
          return $1 + (cRel ? "" : "$") + encode_col(C) + (rRel ? "" : "$") + encode_row(R);
        }
        return function rc_to_a12(fstr, base) {
          rcbase = base;
          return fstr.replace(rcregex, rcfunc);
        };
      }();
      var crefregex = /(^|[^._A-Z0-9])([$]?)([A-Z]{1,2}|[A-W][A-Z]{2}|X[A-E][A-Z]|XF[A-D])([$]?)(10[0-3]\d{4}|104[0-7]\d{3}|1048[0-4]\d{2}|10485[0-6]\d|104857[0-6]|[1-9]\d{0,5})(?![_.\(A-Za-z0-9])/g;
      var a1_to_rc = function() {
        return function a1_to_rc2(fstr, base) {
          return fstr.replace(crefregex, function($0, $1, $2, $3, $4, $5) {
            var c = decode_col($3) - ($2 ? 0 : base.c);
            var r = decode_row($5) - ($4 ? 0 : base.r);
            var R = r == 0 ? "" : !$4 ? "[" + r + "]" : r + 1;
            var C = c == 0 ? "" : !$2 ? "[" + c + "]" : c + 1;
            return $1 + "R" + R + "C" + C;
          });
        };
      }();
      function shift_formula_str(f, delta) {
        return f.replace(crefregex, function($0, $1, $2, $3, $4, $5) {
          return $1 + ($2 == "$" ? $2 + $3 : encode_col(decode_col($3) + delta.c)) + ($4 == "$" ? $4 + $5 : encode_row(decode_row($5) + delta.r));
        });
      }
      function shift_formula_xlsx(f, range, cell) {
        var r = decode_range(range), s = r.s, c = decode_cell(cell);
        var delta = { r: c.r - s.r, c: c.c - s.c };
        return shift_formula_str(f, delta);
      }
      function fuzzyfmla(f) {
        if (f.length == 1)
          return false;
        return true;
      }
      function _xlfn(f) {
        return f.replace(/_xlfn\./g, "");
      }
      function parseread1(blob) {
        blob.l += 1;
        return;
      }
      function parse_ColRelU(blob, length) {
        var c = blob.read_shift(length == 1 ? 1 : 2);
        return [c & 16383, c >> 14 & 1, c >> 15 & 1];
      }
      function parse_RgceArea(blob, length, opts) {
        var w = 2;
        if (opts) {
          if (opts.biff >= 2 && opts.biff <= 5)
            return parse_RgceArea_BIFF2(blob, length, opts);
          else if (opts.biff == 12)
            w = 4;
        }
        var r = blob.read_shift(w), R = blob.read_shift(w);
        var c = parse_ColRelU(blob, 2);
        var C = parse_ColRelU(blob, 2);
        return { s: { r, c: c[0], cRel: c[1], rRel: c[2] }, e: { r: R, c: C[0], cRel: C[1], rRel: C[2] } };
      }
      function parse_RgceArea_BIFF2(blob) {
        var r = parse_ColRelU(blob, 2), R = parse_ColRelU(blob, 2);
        var c = blob.read_shift(1);
        var C = blob.read_shift(1);
        return { s: { r: r[0], c, cRel: r[1], rRel: r[2] }, e: { r: R[0], c: C, cRel: R[1], rRel: R[2] } };
      }
      function parse_RgceAreaRel(blob, length, opts) {
        if (opts.biff < 8)
          return parse_RgceArea_BIFF2(blob, length, opts);
        var r = blob.read_shift(opts.biff == 12 ? 4 : 2), R = blob.read_shift(opts.biff == 12 ? 4 : 2);
        var c = parse_ColRelU(blob, 2);
        var C = parse_ColRelU(blob, 2);
        return { s: { r, c: c[0], cRel: c[1], rRel: c[2] }, e: { r: R, c: C[0], cRel: C[1], rRel: C[2] } };
      }
      function parse_RgceLoc(blob, length, opts) {
        if (opts && opts.biff >= 2 && opts.biff <= 5)
          return parse_RgceLoc_BIFF2(blob, length, opts);
        var r = blob.read_shift(opts && opts.biff == 12 ? 4 : 2);
        var c = parse_ColRelU(blob, 2);
        return { r, c: c[0], cRel: c[1], rRel: c[2] };
      }
      function parse_RgceLoc_BIFF2(blob) {
        var r = parse_ColRelU(blob, 2);
        var c = blob.read_shift(1);
        return { r: r[0], c, cRel: r[1], rRel: r[2] };
      }
      function parse_RgceElfLoc(blob) {
        var r = blob.read_shift(2);
        var c = blob.read_shift(2);
        return { r, c: c & 255, fQuoted: !!(c & 16384), cRel: c >> 15, rRel: c >> 15 };
      }
      function parse_RgceLocRel(blob, length, opts) {
        var biff = opts && opts.biff ? opts.biff : 8;
        if (biff >= 2 && biff <= 5)
          return parse_RgceLocRel_BIFF2(blob, length, opts);
        var r = blob.read_shift(biff >= 12 ? 4 : 2);
        var cl = blob.read_shift(2);
        var cRel = (cl & 16384) >> 14, rRel = (cl & 32768) >> 15;
        cl &= 16383;
        if (rRel == 1)
          while (r > 524287)
            r -= 1048576;
        if (cRel == 1)
          while (cl > 8191)
            cl = cl - 16384;
        return { r, c: cl, cRel, rRel };
      }
      function parse_RgceLocRel_BIFF2(blob) {
        var rl = blob.read_shift(2);
        var c = blob.read_shift(1);
        var rRel = (rl & 32768) >> 15, cRel = (rl & 16384) >> 14;
        rl &= 16383;
        if (rRel == 1 && rl >= 8192)
          rl = rl - 16384;
        if (cRel == 1 && c >= 128)
          c = c - 256;
        return { r: rl, c, cRel, rRel };
      }
      function parse_PtgArea(blob, length, opts) {
        var type = (blob[blob.l++] & 96) >> 5;
        var area = parse_RgceArea(blob, opts.biff >= 2 && opts.biff <= 5 ? 6 : 8, opts);
        return [type, area];
      }
      function parse_PtgArea3d(blob, length, opts) {
        var type = (blob[blob.l++] & 96) >> 5;
        var ixti = blob.read_shift(2, "i");
        var w = 8;
        if (opts)
          switch (opts.biff) {
            case 5:
              blob.l += 12;
              w = 6;
              break;
            case 12:
              w = 12;
              break;
          }
        var area = parse_RgceArea(blob, w, opts);
        return [type, ixti, area];
      }
      function parse_PtgAreaErr(blob, length, opts) {
        var type = (blob[blob.l++] & 96) >> 5;
        blob.l += opts && opts.biff > 8 ? 12 : opts.biff < 8 ? 6 : 8;
        return [type];
      }
      function parse_PtgAreaErr3d(blob, length, opts) {
        var type = (blob[blob.l++] & 96) >> 5;
        var ixti = blob.read_shift(2);
        var w = 8;
        if (opts)
          switch (opts.biff) {
            case 5:
              blob.l += 12;
              w = 6;
              break;
            case 12:
              w = 12;
              break;
          }
        blob.l += w;
        return [type, ixti];
      }
      function parse_PtgAreaN(blob, length, opts) {
        var type = (blob[blob.l++] & 96) >> 5;
        var area = parse_RgceAreaRel(blob, length - 1, opts);
        return [type, area];
      }
      function parse_PtgArray(blob, length, opts) {
        var type = (blob[blob.l++] & 96) >> 5;
        blob.l += opts.biff == 2 ? 6 : opts.biff == 12 ? 14 : 7;
        return [type];
      }
      function parse_PtgAttrBaxcel(blob) {
        var bitSemi = blob[blob.l + 1] & 1;
        var bitBaxcel = 1;
        blob.l += 4;
        return [bitSemi, bitBaxcel];
      }
      function parse_PtgAttrChoose(blob, length, opts) {
        blob.l += 2;
        var offset = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);
        var o = [];
        for (var i2 = 0; i2 <= offset; ++i2)
          o.push(blob.read_shift(opts && opts.biff == 2 ? 1 : 2));
        return o;
      }
      function parse_PtgAttrGoto(blob, length, opts) {
        var bitGoto = blob[blob.l + 1] & 255 ? 1 : 0;
        blob.l += 2;
        return [bitGoto, blob.read_shift(opts && opts.biff == 2 ? 1 : 2)];
      }
      function parse_PtgAttrIf(blob, length, opts) {
        var bitIf = blob[blob.l + 1] & 255 ? 1 : 0;
        blob.l += 2;
        return [bitIf, blob.read_shift(opts && opts.biff == 2 ? 1 : 2)];
      }
      function parse_PtgAttrIfError(blob) {
        var bitIf = blob[blob.l + 1] & 255 ? 1 : 0;
        blob.l += 2;
        return [bitIf, blob.read_shift(2)];
      }
      function parse_PtgAttrSemi(blob, length, opts) {
        var bitSemi = blob[blob.l + 1] & 255 ? 1 : 0;
        blob.l += opts && opts.biff == 2 ? 3 : 4;
        return [bitSemi];
      }
      function parse_PtgAttrSpaceType(blob) {
        var type = blob.read_shift(1), cch = blob.read_shift(1);
        return [type, cch];
      }
      function parse_PtgAttrSpace(blob) {
        blob.read_shift(2);
        return parse_PtgAttrSpaceType(blob, 2);
      }
      function parse_PtgAttrSpaceSemi(blob) {
        blob.read_shift(2);
        return parse_PtgAttrSpaceType(blob, 2);
      }
      function parse_PtgRef(blob, length, opts) {
        var type = (blob[blob.l] & 96) >> 5;
        blob.l += 1;
        var loc = parse_RgceLoc(blob, 0, opts);
        return [type, loc];
      }
      function parse_PtgRefN(blob, length, opts) {
        var type = (blob[blob.l] & 96) >> 5;
        blob.l += 1;
        var loc = parse_RgceLocRel(blob, 0, opts);
        return [type, loc];
      }
      function parse_PtgRef3d(blob, length, opts) {
        var type = (blob[blob.l] & 96) >> 5;
        blob.l += 1;
        var ixti = blob.read_shift(2);
        if (opts && opts.biff == 5)
          blob.l += 12;
        var loc = parse_RgceLoc(blob, 0, opts);
        return [type, ixti, loc];
      }
      function parse_PtgFunc(blob, length, opts) {
        var type = (blob[blob.l] & 96) >> 5;
        blob.l += 1;
        var iftab = blob.read_shift(opts && opts.biff <= 3 ? 1 : 2);
        return [FtabArgc[iftab], Ftab[iftab], type];
      }
      function parse_PtgFuncVar(blob, length, opts) {
        var type = blob[blob.l++];
        var cparams = blob.read_shift(1), tab = opts && opts.biff <= 3 ? [type == 88 ? -1 : 0, blob.read_shift(1)] : parsetab(blob);
        return [cparams, (tab[0] === 0 ? Ftab : Cetab)[tab[1]]];
      }
      function parsetab(blob) {
        return [blob[blob.l + 1] >> 7, blob.read_shift(2) & 32767];
      }
      function parse_PtgAttrSum(blob, length, opts) {
        blob.l += opts && opts.biff == 2 ? 3 : 4;
        return;
      }
      function parse_PtgExp(blob, length, opts) {
        blob.l++;
        if (opts && opts.biff == 12)
          return [blob.read_shift(4, "i"), 0];
        var row = blob.read_shift(2);
        var col = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);
        return [row, col];
      }
      function parse_PtgErr(blob) {
        blob.l++;
        return BErr[blob.read_shift(1)];
      }
      function parse_PtgInt(blob) {
        blob.l++;
        return blob.read_shift(2);
      }
      function parse_PtgBool(blob) {
        blob.l++;
        return blob.read_shift(1) !== 0;
      }
      function parse_PtgNum(blob) {
        blob.l++;
        return parse_Xnum(blob, 8);
      }
      function parse_PtgStr(blob, length, opts) {
        blob.l++;
        return parse_ShortXLUnicodeString(blob, length - 1, opts);
      }
      function parse_SerAr(blob, biff) {
        var val = [blob.read_shift(1)];
        if (biff == 12)
          switch (val[0]) {
            case 2:
              val[0] = 4;
              break;
            case 4:
              val[0] = 16;
              break;
            case 0:
              val[0] = 1;
              break;
            case 1:
              val[0] = 2;
              break;
          }
        switch (val[0]) {
          case 4:
            val[1] = parsebool(blob, 1) ? "TRUE" : "FALSE";
            if (biff != 12)
              blob.l += 7;
            break;
          case 37:
          case 16:
            val[1] = BErr[blob[blob.l]];
            blob.l += biff == 12 ? 4 : 8;
            break;
          case 0:
            blob.l += 8;
            break;
          case 1:
            val[1] = parse_Xnum(blob, 8);
            break;
          case 2:
            val[1] = parse_XLUnicodeString2(blob, 0, { biff: biff > 0 && biff < 8 ? 2 : biff });
            break;
          default:
            throw new Error("Bad SerAr: " + val[0]);
        }
        return val;
      }
      function parse_PtgExtraMem(blob, cce, opts) {
        var count = blob.read_shift(opts.biff == 12 ? 4 : 2);
        var out = [];
        for (var i2 = 0; i2 != count; ++i2)
          out.push((opts.biff == 12 ? parse_UncheckedRfX : parse_Ref8U)(blob, 8));
        return out;
      }
      function parse_PtgExtraArray(blob, length, opts) {
        var rows = 0, cols = 0;
        if (opts.biff == 12) {
          rows = blob.read_shift(4);
          cols = blob.read_shift(4);
        } else {
          cols = 1 + blob.read_shift(1);
          rows = 1 + blob.read_shift(2);
        }
        if (opts.biff >= 2 && opts.biff < 8) {
          --rows;
          if (--cols == 0)
            cols = 256;
        }
        for (var i2 = 0, o = []; i2 != rows && (o[i2] = []); ++i2)
          for (var j = 0; j != cols; ++j)
            o[i2][j] = parse_SerAr(blob, opts.biff);
        return o;
      }
      function parse_PtgName(blob, length, opts) {
        var type = blob.read_shift(1) >>> 5 & 3;
        var w = !opts || opts.biff >= 8 ? 4 : 2;
        var nameindex = blob.read_shift(w);
        switch (opts.biff) {
          case 2:
            blob.l += 5;
            break;
          case 3:
          case 4:
            blob.l += 8;
            break;
          case 5:
            blob.l += 12;
            break;
        }
        return [type, 0, nameindex];
      }
      function parse_PtgNameX(blob, length, opts) {
        if (opts.biff == 5)
          return parse_PtgNameX_BIFF5(blob, length, opts);
        var type = blob.read_shift(1) >>> 5 & 3;
        var ixti = blob.read_shift(2);
        var nameindex = blob.read_shift(4);
        return [type, ixti, nameindex];
      }
      function parse_PtgNameX_BIFF5(blob) {
        var type = blob.read_shift(1) >>> 5 & 3;
        var ixti = blob.read_shift(2, "i");
        blob.l += 8;
        var nameindex = blob.read_shift(2);
        blob.l += 12;
        return [type, ixti, nameindex];
      }
      function parse_PtgMemArea(blob, length, opts) {
        var type = blob.read_shift(1) >>> 5 & 3;
        blob.l += opts && opts.biff == 2 ? 3 : 4;
        var cce = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);
        return [type, cce];
      }
      function parse_PtgMemFunc(blob, length, opts) {
        var type = blob.read_shift(1) >>> 5 & 3;
        var cce = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);
        return [type, cce];
      }
      function parse_PtgRefErr(blob, length, opts) {
        var type = blob.read_shift(1) >>> 5 & 3;
        blob.l += 4;
        if (opts.biff < 8)
          blob.l--;
        if (opts.biff == 12)
          blob.l += 2;
        return [type];
      }
      function parse_PtgRefErr3d(blob, length, opts) {
        var type = (blob[blob.l++] & 96) >> 5;
        var ixti = blob.read_shift(2);
        var w = 4;
        if (opts)
          switch (opts.biff) {
            case 5:
              w = 15;
              break;
            case 12:
              w = 6;
              break;
          }
        blob.l += w;
        return [type, ixti];
      }
      var parse_PtgMemErr = parsenoop;
      var parse_PtgMemNoMem = parsenoop;
      var parse_PtgTbl = parsenoop;
      function parse_PtgElfLoc(blob, length, opts) {
        blob.l += 2;
        return [parse_RgceElfLoc(blob, 4, opts)];
      }
      function parse_PtgElfNoop(blob) {
        blob.l += 6;
        return [];
      }
      var parse_PtgElfCol = parse_PtgElfLoc;
      var parse_PtgElfColS = parse_PtgElfNoop;
      var parse_PtgElfColSV = parse_PtgElfNoop;
      var parse_PtgElfColV = parse_PtgElfLoc;
      function parse_PtgElfLel(blob) {
        blob.l += 2;
        return [parseuint16(blob), blob.read_shift(2) & 1];
      }
      var parse_PtgElfRadical = parse_PtgElfLoc;
      var parse_PtgElfRadicalLel = parse_PtgElfLel;
      var parse_PtgElfRadicalS = parse_PtgElfNoop;
      var parse_PtgElfRw = parse_PtgElfLoc;
      var parse_PtgElfRwV = parse_PtgElfLoc;
      var PtgListRT = [
        "Data",
        "All",
        "Headers",
        "??",
        "?Data2",
        "??",
        "?DataHeaders",
        "??",
        "Totals",
        "??",
        "??",
        "??",
        "?DataTotals",
        "??",
        "??",
        "??",
        "?Current"
      ];
      function parse_PtgList(blob) {
        blob.l += 2;
        var ixti = blob.read_shift(2);
        var flags = blob.read_shift(2);
        var idx = blob.read_shift(4);
        var c = blob.read_shift(2);
        var C = blob.read_shift(2);
        var rt = PtgListRT[flags >> 2 & 31];
        return { ixti, coltype: flags & 3, rt, idx, c, C };
      }
      function parse_PtgSxName(blob) {
        blob.l += 2;
        return [blob.read_shift(4)];
      }
      function parse_PtgSheet(blob, length, opts) {
        blob.l += 5;
        blob.l += 2;
        blob.l += opts.biff == 2 ? 1 : 4;
        return ["PTGSHEET"];
      }
      function parse_PtgEndSheet(blob, length, opts) {
        blob.l += opts.biff == 2 ? 4 : 5;
        return ["PTGENDSHEET"];
      }
      function parse_PtgMemAreaN(blob) {
        var type = blob.read_shift(1) >>> 5 & 3;
        var cce = blob.read_shift(2);
        return [type, cce];
      }
      function parse_PtgMemNoMemN(blob) {
        var type = blob.read_shift(1) >>> 5 & 3;
        var cce = blob.read_shift(2);
        return [type, cce];
      }
      function parse_PtgAttrNoop(blob) {
        blob.l += 4;
        return [0, 0];
      }
      var PtgTypes = {
        1: { n: "PtgExp", f: parse_PtgExp },
        2: { n: "PtgTbl", f: parse_PtgTbl },
        3: { n: "PtgAdd", f: parseread1 },
        4: { n: "PtgSub", f: parseread1 },
        5: { n: "PtgMul", f: parseread1 },
        6: { n: "PtgDiv", f: parseread1 },
        7: { n: "PtgPower", f: parseread1 },
        8: { n: "PtgConcat", f: parseread1 },
        9: { n: "PtgLt", f: parseread1 },
        10: { n: "PtgLe", f: parseread1 },
        11: { n: "PtgEq", f: parseread1 },
        12: { n: "PtgGe", f: parseread1 },
        13: { n: "PtgGt", f: parseread1 },
        14: { n: "PtgNe", f: parseread1 },
        15: { n: "PtgIsect", f: parseread1 },
        16: { n: "PtgUnion", f: parseread1 },
        17: { n: "PtgRange", f: parseread1 },
        18: { n: "PtgUplus", f: parseread1 },
        19: { n: "PtgUminus", f: parseread1 },
        20: { n: "PtgPercent", f: parseread1 },
        21: { n: "PtgParen", f: parseread1 },
        22: { n: "PtgMissArg", f: parseread1 },
        23: { n: "PtgStr", f: parse_PtgStr },
        26: { n: "PtgSheet", f: parse_PtgSheet },
        27: { n: "PtgEndSheet", f: parse_PtgEndSheet },
        28: { n: "PtgErr", f: parse_PtgErr },
        29: { n: "PtgBool", f: parse_PtgBool },
        30: { n: "PtgInt", f: parse_PtgInt },
        31: { n: "PtgNum", f: parse_PtgNum },
        32: { n: "PtgArray", f: parse_PtgArray },
        33: { n: "PtgFunc", f: parse_PtgFunc },
        34: { n: "PtgFuncVar", f: parse_PtgFuncVar },
        35: { n: "PtgName", f: parse_PtgName },
        36: { n: "PtgRef", f: parse_PtgRef },
        37: { n: "PtgArea", f: parse_PtgArea },
        38: { n: "PtgMemArea", f: parse_PtgMemArea },
        39: { n: "PtgMemErr", f: parse_PtgMemErr },
        40: { n: "PtgMemNoMem", f: parse_PtgMemNoMem },
        41: { n: "PtgMemFunc", f: parse_PtgMemFunc },
        42: { n: "PtgRefErr", f: parse_PtgRefErr },
        43: { n: "PtgAreaErr", f: parse_PtgAreaErr },
        44: { n: "PtgRefN", f: parse_PtgRefN },
        45: { n: "PtgAreaN", f: parse_PtgAreaN },
        46: { n: "PtgMemAreaN", f: parse_PtgMemAreaN },
        47: { n: "PtgMemNoMemN", f: parse_PtgMemNoMemN },
        57: { n: "PtgNameX", f: parse_PtgNameX },
        58: { n: "PtgRef3d", f: parse_PtgRef3d },
        59: { n: "PtgArea3d", f: parse_PtgArea3d },
        60: { n: "PtgRefErr3d", f: parse_PtgRefErr3d },
        61: { n: "PtgAreaErr3d", f: parse_PtgAreaErr3d },
        255: {}
      };
      var PtgDupes = {
        64: 32,
        96: 32,
        65: 33,
        97: 33,
        66: 34,
        98: 34,
        67: 35,
        99: 35,
        68: 36,
        100: 36,
        69: 37,
        101: 37,
        70: 38,
        102: 38,
        71: 39,
        103: 39,
        72: 40,
        104: 40,
        73: 41,
        105: 41,
        74: 42,
        106: 42,
        75: 43,
        107: 43,
        76: 44,
        108: 44,
        77: 45,
        109: 45,
        78: 46,
        110: 46,
        79: 47,
        111: 47,
        88: 34,
        120: 34,
        89: 57,
        121: 57,
        90: 58,
        122: 58,
        91: 59,
        123: 59,
        92: 60,
        124: 60,
        93: 61,
        125: 61
      };
      (function() {
        for (var y in PtgDupes)
          PtgTypes[y] = PtgTypes[PtgDupes[y]];
      })();
      var Ptg18 = {
        1: { n: "PtgElfLel", f: parse_PtgElfLel },
        2: { n: "PtgElfRw", f: parse_PtgElfRw },
        3: { n: "PtgElfCol", f: parse_PtgElfCol },
        6: { n: "PtgElfRwV", f: parse_PtgElfRwV },
        7: { n: "PtgElfColV", f: parse_PtgElfColV },
        10: { n: "PtgElfRadical", f: parse_PtgElfRadical },
        11: { n: "PtgElfRadicalS", f: parse_PtgElfRadicalS },
        13: { n: "PtgElfColS", f: parse_PtgElfColS },
        15: { n: "PtgElfColSV", f: parse_PtgElfColSV },
        16: { n: "PtgElfRadicalLel", f: parse_PtgElfRadicalLel },
        25: { n: "PtgList", f: parse_PtgList },
        29: { n: "PtgSxName", f: parse_PtgSxName },
        255: {}
      };
      var Ptg19 = {
        0: { n: "PtgAttrNoop", f: parse_PtgAttrNoop },
        1: { n: "PtgAttrSemi", f: parse_PtgAttrSemi },
        2: { n: "PtgAttrIf", f: parse_PtgAttrIf },
        4: { n: "PtgAttrChoose", f: parse_PtgAttrChoose },
        8: { n: "PtgAttrGoto", f: parse_PtgAttrGoto },
        16: { n: "PtgAttrSum", f: parse_PtgAttrSum },
        32: { n: "PtgAttrBaxcel", f: parse_PtgAttrBaxcel },
        64: { n: "PtgAttrSpace", f: parse_PtgAttrSpace },
        65: { n: "PtgAttrSpaceSemi", f: parse_PtgAttrSpaceSemi },
        128: { n: "PtgAttrIfError", f: parse_PtgAttrIfError },
        255: {}
      };
      Ptg19[33] = Ptg19[32];
      function parse_RgbExtra(blob, length, rgce, opts) {
        if (opts.biff < 8)
          return parsenoop(blob, length);
        var target = blob.l + length;
        var o = [];
        for (var i2 = 0; i2 !== rgce.length; ++i2) {
          switch (rgce[i2][0]) {
            case "PtgArray":
              rgce[i2][1] = parse_PtgExtraArray(blob, 0, opts);
              o.push(rgce[i2][1]);
              break;
            case "PtgMemArea":
              rgce[i2][2] = parse_PtgExtraMem(blob, rgce[i2][1], opts);
              o.push(rgce[i2][2]);
              break;
            case "PtgExp":
              if (opts && opts.biff == 12) {
                rgce[i2][1][1] = blob.read_shift(4);
                o.push(rgce[i2][1]);
              }
              break;
            case "PtgList":
            case "PtgElfRadicalS":
            case "PtgElfColS":
            case "PtgElfColSV":
              throw "Unsupported " + rgce[i2][0];
            default:
              break;
          }
        }
        length = target - blob.l;
        if (length !== 0)
          o.push(parsenoop(blob, length));
        return o;
      }
      function parse_Rgce(blob, length, opts) {
        var target = blob.l + length;
        var R, id, ptgs = [];
        while (target != blob.l) {
          length = target - blob.l;
          id = blob[blob.l];
          R = PtgTypes[id];
          if (id === 24 || id === 25)
            R = (id === 24 ? Ptg18 : Ptg19)[blob[blob.l + 1]];
          if (!R || !R.f) {
            parsenoop(blob, length);
          } else {
            ptgs.push([R.n, R.f(blob, length, opts)]);
          }
        }
        return ptgs;
      }
      function stringify_array(f) {
        var o = [];
        for (var i2 = 0; i2 < f.length; ++i2) {
          var x = f[i2], r = [];
          for (var j = 0; j < x.length; ++j) {
            var y = x[j];
            if (y)
              switch (y[0]) {
                case 2:
                  r.push('"' + y[1].replace(/"/g, '""') + '"');
                  break;
                default:
                  r.push(y[1]);
              }
            else
              r.push("");
          }
          o.push(r.join(","));
        }
        return o.join(";");
      }
      var PtgBinOp = {
        PtgAdd: "+",
        PtgConcat: "&",
        PtgDiv: "/",
        PtgEq: "=",
        PtgGe: ">=",
        PtgGt: ">",
        PtgLe: "<=",
        PtgLt: "<",
        PtgMul: "*",
        PtgNe: "<>",
        PtgPower: "^",
        PtgSub: "-"
      };
      var quoteCharacters = new RegExp(/[^\w\u4E00-\u9FFF\u3040-\u30FF]/);
      function formula_quote_sheet_name(sname, opts) {
        if (!sname && !(opts && opts.biff <= 5 && opts.biff >= 2))
          throw new Error("empty sheet name");
        if (quoteCharacters.test(sname))
          return "'" + sname + "'";
        return sname;
      }
      function get_ixti_raw(supbooks, ixti, opts) {
        if (!supbooks)
          return "SH33TJSERR0";
        if (opts.biff > 8 && (!supbooks.XTI || !supbooks.XTI[ixti]))
          return supbooks.SheetNames[ixti];
        if (!supbooks.XTI)
          return "SH33TJSERR6";
        var XTI = supbooks.XTI[ixti];
        if (opts.biff < 8) {
          if (ixti > 1e4)
            ixti -= 65536;
          if (ixti < 0)
            ixti = -ixti;
          return ixti == 0 ? "" : supbooks.XTI[ixti - 1];
        }
        if (!XTI)
          return "SH33TJSERR1";
        var o = "";
        if (opts.biff > 8)
          switch (supbooks[XTI[0]][0]) {
            case 357:
              o = XTI[1] == -1 ? "#REF" : supbooks.SheetNames[XTI[1]];
              return XTI[1] == XTI[2] ? o : o + ":" + supbooks.SheetNames[XTI[2]];
            case 358:
              if (opts.SID != null)
                return supbooks.SheetNames[opts.SID];
              return "SH33TJSSAME" + supbooks[XTI[0]][0];
            case 355:
            default:
              return "SH33TJSSRC" + supbooks[XTI[0]][0];
          }
        switch (supbooks[XTI[0]][0][0]) {
          case 1025:
            o = XTI[1] == -1 ? "#REF" : supbooks.SheetNames[XTI[1]] || "SH33TJSERR3";
            return XTI[1] == XTI[2] ? o : o + ":" + supbooks.SheetNames[XTI[2]];
          case 14849:
            return supbooks[XTI[0]].slice(1).map(function(name2) {
              return name2.Name;
            }).join(";;");
          default:
            if (!supbooks[XTI[0]][0][3])
              return "SH33TJSERR2";
            o = XTI[1] == -1 ? "#REF" : supbooks[XTI[0]][0][3][XTI[1]] || "SH33TJSERR4";
            return XTI[1] == XTI[2] ? o : o + ":" + supbooks[XTI[0]][0][3][XTI[2]];
        }
      }
      function get_ixti(supbooks, ixti, opts) {
        var ixtiraw = get_ixti_raw(supbooks, ixti, opts);
        return ixtiraw == "#REF" ? ixtiraw : formula_quote_sheet_name(ixtiraw, opts);
      }
      function stringify_formula(formula, range, cell, supbooks, opts) {
        var biff = opts && opts.biff || 8;
        var _range = { s: { c: 0, r: 0 }, e: { c: 0, r: 0 } };
        var stack = [], e1, e2, c, ixti = 0, nameidx = 0, r, sname = "";
        if (!formula[0] || !formula[0][0])
          return "";
        var last_sp = -1, sp = "";
        for (var ff = 0, fflen = formula[0].length; ff < fflen; ++ff) {
          var f = formula[0][ff];
          switch (f[0]) {
            case "PtgUminus":
              stack.push("-" + stack.pop());
              break;
            case "PtgUplus":
              stack.push("+" + stack.pop());
              break;
            case "PtgPercent":
              stack.push(stack.pop() + "%");
              break;
            case "PtgAdd":
            case "PtgConcat":
            case "PtgDiv":
            case "PtgEq":
            case "PtgGe":
            case "PtgGt":
            case "PtgLe":
            case "PtgLt":
            case "PtgMul":
            case "PtgNe":
            case "PtgPower":
            case "PtgSub":
              e1 = stack.pop();
              e2 = stack.pop();
              if (last_sp >= 0) {
                switch (formula[0][last_sp][1][0]) {
                  case 0:
                    sp = fill(" ", formula[0][last_sp][1][1]);
                    break;
                  case 1:
                    sp = fill("\r", formula[0][last_sp][1][1]);
                    break;
                  default:
                    sp = "";
                    if (opts.WTF)
                      throw new Error("Unexpected PtgAttrSpaceType " + formula[0][last_sp][1][0]);
                }
                e2 = e2 + sp;
                last_sp = -1;
              }
              stack.push(e2 + PtgBinOp[f[0]] + e1);
              break;
            case "PtgIsect":
              e1 = stack.pop();
              e2 = stack.pop();
              stack.push(e2 + " " + e1);
              break;
            case "PtgUnion":
              e1 = stack.pop();
              e2 = stack.pop();
              stack.push(e2 + "," + e1);
              break;
            case "PtgRange":
              e1 = stack.pop();
              e2 = stack.pop();
              stack.push(e2 + ":" + e1);
              break;
            case "PtgAttrChoose":
              break;
            case "PtgAttrGoto":
              break;
            case "PtgAttrIf":
              break;
            case "PtgAttrIfError":
              break;
            case "PtgRef":
              c = shift_cell_xls(f[1][1], _range, opts);
              stack.push(encode_cell_xls(c, biff));
              break;
            case "PtgRefN":
              c = cell ? shift_cell_xls(f[1][1], cell, opts) : f[1][1];
              stack.push(encode_cell_xls(c, biff));
              break;
            case "PtgRef3d":
              ixti = f[1][1];
              c = shift_cell_xls(f[1][2], _range, opts);
              sname = get_ixti(supbooks, ixti, opts);
              var w = sname;
              stack.push(sname + "!" + encode_cell_xls(c, biff));
              break;
            case "PtgFunc":
            case "PtgFuncVar":
              var argc = f[1][0], func = f[1][1];
              if (!argc)
                argc = 0;
              argc &= 127;
              var args = argc == 0 ? [] : stack.slice(-argc);
              stack.length -= argc;
              if (func === "User")
                func = args.shift();
              stack.push(func + "(" + args.join(",") + ")");
              break;
            case "PtgBool":
              stack.push(f[1] ? "TRUE" : "FALSE");
              break;
            case "PtgInt":
              stack.push(f[1]);
              break;
            case "PtgNum":
              stack.push(String(f[1]));
              break;
            case "PtgStr":
              stack.push('"' + f[1].replace(/"/g, '""') + '"');
              break;
            case "PtgErr":
              stack.push(f[1]);
              break;
            case "PtgAreaN":
              r = shift_range_xls(f[1][1], cell ? { s: cell } : _range, opts);
              stack.push(encode_range_xls(r, opts));
              break;
            case "PtgArea":
              r = shift_range_xls(f[1][1], _range, opts);
              stack.push(encode_range_xls(r, opts));
              break;
            case "PtgArea3d":
              ixti = f[1][1];
              r = f[1][2];
              sname = get_ixti(supbooks, ixti, opts);
              stack.push(sname + "!" + encode_range_xls(r, opts));
              break;
            case "PtgAttrSum":
              stack.push("SUM(" + stack.pop() + ")");
              break;
            case "PtgAttrBaxcel":
            case "PtgAttrSemi":
              break;
            case "PtgName":
              nameidx = f[1][2];
              var lbl = (supbooks.names || [])[nameidx - 1] || (supbooks[0] || [])[nameidx];
              var name2 = lbl ? lbl.Name : "SH33TJSNAME" + String(nameidx);
              if (name2 in XLSXFutureFunctions)
                name2 = XLSXFutureFunctions[name2];
              stack.push(name2);
              break;
            case "PtgNameX":
              var bookidx = f[1][1];
              nameidx = f[1][2];
              var externbook;
              if (opts.biff <= 5) {
                if (bookidx < 0)
                  bookidx = -bookidx;
                if (supbooks[bookidx])
                  externbook = supbooks[bookidx][nameidx];
              } else {
                var o = "";
                if (((supbooks[bookidx] || [])[0] || [])[0] == 14849) {
                } else if (((supbooks[bookidx] || [])[0] || [])[0] == 1025) {
                  if (supbooks[bookidx][nameidx] && supbooks[bookidx][nameidx].itab > 0) {
                    o = supbooks.SheetNames[supbooks[bookidx][nameidx].itab - 1] + "!";
                  }
                } else
                  o = supbooks.SheetNames[nameidx - 1] + "!";
                if (supbooks[bookidx] && supbooks[bookidx][nameidx])
                  o += supbooks[bookidx][nameidx].Name;
                else if (supbooks[0] && supbooks[0][nameidx])
                  o += supbooks[0][nameidx].Name;
                else {
                  var ixtidata = (get_ixti_raw(supbooks, bookidx, opts) || "").split(";;");
                  if (ixtidata[nameidx - 1])
                    o = ixtidata[nameidx - 1];
                  else
                    o += "SH33TJSERRX";
                }
                stack.push(o);
                break;
              }
              if (!externbook)
                externbook = { Name: "SH33TJSERRY" };
              stack.push(externbook.Name);
              break;
            case "PtgParen":
              var lp = "(", rp = ")";
              if (last_sp >= 0) {
                sp = "";
                switch (formula[0][last_sp][1][0]) {
                  case 2:
                    lp = fill(" ", formula[0][last_sp][1][1]) + lp;
                    break;
                  case 3:
                    lp = fill("\r", formula[0][last_sp][1][1]) + lp;
                    break;
                  case 4:
                    rp = fill(" ", formula[0][last_sp][1][1]) + rp;
                    break;
                  case 5:
                    rp = fill("\r", formula[0][last_sp][1][1]) + rp;
                    break;
                  default:
                    if (opts.WTF)
                      throw new Error("Unexpected PtgAttrSpaceType " + formula[0][last_sp][1][0]);
                }
                last_sp = -1;
              }
              stack.push(lp + stack.pop() + rp);
              break;
            case "PtgRefErr":
              stack.push("#REF!");
              break;
            case "PtgRefErr3d":
              stack.push("#REF!");
              break;
            case "PtgExp":
              c = { c: f[1][1], r: f[1][0] };
              var q = { c: cell.c, r: cell.r };
              if (supbooks.sharedf[encode_cell(c)]) {
                var parsedf = supbooks.sharedf[encode_cell(c)];
                stack.push(stringify_formula(parsedf, _range, q, supbooks, opts));
              } else {
                var fnd = false;
                for (e1 = 0; e1 != supbooks.arrayf.length; ++e1) {
                  e2 = supbooks.arrayf[e1];
                  if (c.c < e2[0].s.c || c.c > e2[0].e.c)
                    continue;
                  if (c.r < e2[0].s.r || c.r > e2[0].e.r)
                    continue;
                  stack.push(stringify_formula(e2[1], _range, q, supbooks, opts));
                  fnd = true;
                  break;
                }
                if (!fnd)
                  stack.push(f[1]);
              }
              break;
            case "PtgArray":
              stack.push("{" + stringify_array(f[1]) + "}");
              break;
            case "PtgMemArea":
              break;
            case "PtgAttrSpace":
            case "PtgAttrSpaceSemi":
              last_sp = ff;
              break;
            case "PtgTbl":
              break;
            case "PtgMemErr":
              break;
            case "PtgMissArg":
              stack.push("");
              break;
            case "PtgAreaErr":
              stack.push("#REF!");
              break;
            case "PtgAreaErr3d":
              stack.push("#REF!");
              break;
            case "PtgList":
              stack.push("Table" + f[1].idx + "[#" + f[1].rt + "]");
              break;
            case "PtgMemAreaN":
            case "PtgMemNoMemN":
            case "PtgAttrNoop":
            case "PtgSheet":
            case "PtgEndSheet":
              break;
            case "PtgMemFunc":
              break;
            case "PtgMemNoMem":
              break;
            case "PtgElfCol":
            case "PtgElfColS":
            case "PtgElfColSV":
            case "PtgElfColV":
            case "PtgElfLel":
            case "PtgElfRadical":
            case "PtgElfRadicalLel":
            case "PtgElfRadicalS":
            case "PtgElfRw":
            case "PtgElfRwV":
              throw new Error("Unsupported ELFs");
            case "PtgSxName":
              throw new Error("Unrecognized Formula Token: " + String(f));
            default:
              throw new Error("Unrecognized Formula Token: " + String(f));
          }
          var PtgNonDisp = ["PtgAttrSpace", "PtgAttrSpaceSemi", "PtgAttrGoto"];
          if (opts.biff != 3) {
            if (last_sp >= 0 && PtgNonDisp.indexOf(formula[0][ff][0]) == -1) {
              f = formula[0][last_sp];
              var _left = true;
              switch (f[1][0]) {
                case 4:
                  _left = false;
                case 0:
                  sp = fill(" ", f[1][1]);
                  break;
                case 5:
                  _left = false;
                case 1:
                  sp = fill("\r", f[1][1]);
                  break;
                default:
                  sp = "";
                  if (opts.WTF)
                    throw new Error("Unexpected PtgAttrSpaceType " + f[1][0]);
              }
              stack.push((_left ? sp : "") + stack.pop() + (_left ? "" : sp));
              last_sp = -1;
            }
          }
        }
        if (stack.length > 1 && opts.WTF)
          throw new Error("bad formula stack");
        return stack[0];
      }
      function parse_ArrayParsedFormula(blob, length, opts) {
        var target = blob.l + length, len = opts.biff == 2 ? 1 : 2;
        var rgcb, cce = blob.read_shift(len);
        if (cce == 65535)
          return [[], parsenoop(blob, length - 2)];
        var rgce = parse_Rgce(blob, cce, opts);
        if (length !== cce + len)
          rgcb = parse_RgbExtra(blob, length - cce - len, rgce, opts);
        blob.l = target;
        return [rgce, rgcb];
      }
      function parse_XLSCellParsedFormula(blob, length, opts) {
        var target = blob.l + length, len = opts.biff == 2 ? 1 : 2;
        var rgcb, cce = blob.read_shift(len);
        if (cce == 65535)
          return [[], parsenoop(blob, length - 2)];
        var rgce = parse_Rgce(blob, cce, opts);
        if (length !== cce + len)
          rgcb = parse_RgbExtra(blob, length - cce - len, rgce, opts);
        blob.l = target;
        return [rgce, rgcb];
      }
      function parse_NameParsedFormula(blob, length, opts, cce) {
        var target = blob.l + length;
        var rgce = parse_Rgce(blob, cce, opts);
        var rgcb;
        if (target !== blob.l)
          rgcb = parse_RgbExtra(blob, target - blob.l, rgce, opts);
        return [rgce, rgcb];
      }
      function parse_SharedParsedFormula(blob, length, opts) {
        var target = blob.l + length;
        var rgcb, cce = blob.read_shift(2);
        var rgce = parse_Rgce(blob, cce, opts);
        if (cce == 65535)
          return [[], parsenoop(blob, length - 2)];
        if (length !== cce + 2)
          rgcb = parse_RgbExtra(blob, target - cce - 2, rgce, opts);
        return [rgce, rgcb];
      }
      function parse_FormulaValue(blob) {
        var b;
        if (__readUInt16LE(blob, blob.l + 6) !== 65535)
          return [parse_Xnum(blob), "n"];
        switch (blob[blob.l]) {
          case 0:
            blob.l += 8;
            return ["String", "s"];
          case 1:
            b = blob[blob.l + 2] === 1;
            blob.l += 8;
            return [b, "b"];
          case 2:
            b = blob[blob.l + 2];
            blob.l += 8;
            return [b, "e"];
          case 3:
            blob.l += 8;
            return ["", "s"];
        }
        return [];
      }
      function write_FormulaValue(value) {
        if (value == null) {
          var o = new_buf(8);
          o.write_shift(1, 3);
          o.write_shift(1, 0);
          o.write_shift(2, 0);
          o.write_shift(2, 0);
          o.write_shift(2, 65535);
          return o;
        } else if (typeof value == "number")
          return write_Xnum(value);
        return write_Xnum(0);
      }
      function parse_Formula(blob, length, opts) {
        var end = blob.l + length;
        var cell = parse_XLSCell(blob, 6);
        if (opts.biff == 2)
          ++blob.l;
        var val = parse_FormulaValue(blob, 8);
        var flags = blob.read_shift(1);
        if (opts.biff != 2) {
          blob.read_shift(1);
          if (opts.biff >= 5) {
            blob.read_shift(4);
          }
        }
        var cbf = parse_XLSCellParsedFormula(blob, end - blob.l, opts);
        return { cell, val: val[0], formula: cbf, shared: flags >> 3 & 1, tt: val[1] };
      }
      function write_Formula(cell, R, C, opts, os) {
        var o1 = write_XLSCell(R, C, os);
        var o2 = write_FormulaValue(cell.v);
        var o3 = new_buf(6);
        var flags = 1 | 32;
        o3.write_shift(2, flags);
        o3.write_shift(4, 0);
        var bf = new_buf(cell.bf.length);
        for (var i2 = 0; i2 < cell.bf.length; ++i2)
          bf[i2] = cell.bf[i2];
        var out = bconcat([o1, o2, o3, bf]);
        return out;
      }
      function parse_XLSBParsedFormula(data, length, opts) {
        var cce = data.read_shift(4);
        var rgce = parse_Rgce(data, cce, opts);
        var cb = data.read_shift(4);
        var rgcb = cb > 0 ? parse_RgbExtra(data, cb, rgce, opts) : null;
        return [rgce, rgcb];
      }
      var parse_XLSBArrayParsedFormula = parse_XLSBParsedFormula;
      var parse_XLSBCellParsedFormula = parse_XLSBParsedFormula;
      var parse_XLSBNameParsedFormula = parse_XLSBParsedFormula;
      var parse_XLSBSharedParsedFormula = parse_XLSBParsedFormula;
      var Cetab = {
        0: "BEEP",
        1: "OPEN",
        2: "OPEN.LINKS",
        3: "CLOSE.ALL",
        4: "SAVE",
        5: "SAVE.AS",
        6: "FILE.DELETE",
        7: "PAGE.SETUP",
        8: "PRINT",
        9: "PRINTER.SETUP",
        10: "QUIT",
        11: "NEW.WINDOW",
        12: "ARRANGE.ALL",
        13: "WINDOW.SIZE",
        14: "WINDOW.MOVE",
        15: "FULL",
        16: "CLOSE",
        17: "RUN",
        22: "SET.PRINT.AREA",
        23: "SET.PRINT.TITLES",
        24: "SET.PAGE.BREAK",
        25: "REMOVE.PAGE.BREAK",
        26: "FONT",
        27: "DISPLAY",
        28: "PROTECT.DOCUMENT",
        29: "PRECISION",
        30: "A1.R1C1",
        31: "CALCULATE.NOW",
        32: "CALCULATION",
        34: "DATA.FIND",
        35: "EXTRACT",
        36: "DATA.DELETE",
        37: "SET.DATABASE",
        38: "SET.CRITERIA",
        39: "SORT",
        40: "DATA.SERIES",
        41: "TABLE",
        42: "FORMAT.NUMBER",
        43: "ALIGNMENT",
        44: "STYLE",
        45: "BORDER",
        46: "CELL.PROTECTION",
        47: "COLUMN.WIDTH",
        48: "UNDO",
        49: "CUT",
        50: "COPY",
        51: "PASTE",
        52: "CLEAR",
        53: "PASTE.SPECIAL",
        54: "EDIT.DELETE",
        55: "INSERT",
        56: "FILL.RIGHT",
        57: "FILL.DOWN",
        61: "DEFINE.NAME",
        62: "CREATE.NAMES",
        63: "FORMULA.GOTO",
        64: "FORMULA.FIND",
        65: "SELECT.LAST.CELL",
        66: "SHOW.ACTIVE.CELL",
        67: "GALLERY.AREA",
        68: "GALLERY.BAR",
        69: "GALLERY.COLUMN",
        70: "GALLERY.LINE",
        71: "GALLERY.PIE",
        72: "GALLERY.SCATTER",
        73: "COMBINATION",
        74: "PREFERRED",
        75: "ADD.OVERLAY",
        76: "GRIDLINES",
        77: "SET.PREFERRED",
        78: "AXES",
        79: "LEGEND",
        80: "ATTACH.TEXT",
        81: "ADD.ARROW",
        82: "SELECT.CHART",
        83: "SELECT.PLOT.AREA",
        84: "PATTERNS",
        85: "MAIN.CHART",
        86: "OVERLAY",
        87: "SCALE",
        88: "FORMAT.LEGEND",
        89: "FORMAT.TEXT",
        90: "EDIT.REPEAT",
        91: "PARSE",
        92: "JUSTIFY",
        93: "HIDE",
        94: "UNHIDE",
        95: "WORKSPACE",
        96: "FORMULA",
        97: "FORMULA.FILL",
        98: "FORMULA.ARRAY",
        99: "DATA.FIND.NEXT",
        100: "DATA.FIND.PREV",
        101: "FORMULA.FIND.NEXT",
        102: "FORMULA.FIND.PREV",
        103: "ACTIVATE",
        104: "ACTIVATE.NEXT",
        105: "ACTIVATE.PREV",
        106: "UNLOCKED.NEXT",
        107: "UNLOCKED.PREV",
        108: "COPY.PICTURE",
        109: "SELECT",
        110: "DELETE.NAME",
        111: "DELETE.FORMAT",
        112: "VLINE",
        113: "HLINE",
        114: "VPAGE",
        115: "HPAGE",
        116: "VSCROLL",
        117: "HSCROLL",
        118: "ALERT",
        119: "NEW",
        120: "CANCEL.COPY",
        121: "SHOW.CLIPBOARD",
        122: "MESSAGE",
        124: "PASTE.LINK",
        125: "APP.ACTIVATE",
        126: "DELETE.ARROW",
        127: "ROW.HEIGHT",
        128: "FORMAT.MOVE",
        129: "FORMAT.SIZE",
        130: "FORMULA.REPLACE",
        131: "SEND.KEYS",
        132: "SELECT.SPECIAL",
        133: "APPLY.NAMES",
        134: "REPLACE.FONT",
        135: "FREEZE.PANES",
        136: "SHOW.INFO",
        137: "SPLIT",
        138: "ON.WINDOW",
        139: "ON.DATA",
        140: "DISABLE.INPUT",
        142: "OUTLINE",
        143: "LIST.NAMES",
        144: "FILE.CLOSE",
        145: "SAVE.WORKBOOK",
        146: "DATA.FORM",
        147: "COPY.CHART",
        148: "ON.TIME",
        149: "WAIT",
        150: "FORMAT.FONT",
        151: "FILL.UP",
        152: "FILL.LEFT",
        153: "DELETE.OVERLAY",
        155: "SHORT.MENUS",
        159: "SET.UPDATE.STATUS",
        161: "COLOR.PALETTE",
        162: "DELETE.STYLE",
        163: "WINDOW.RESTORE",
        164: "WINDOW.MAXIMIZE",
        166: "CHANGE.LINK",
        167: "CALCULATE.DOCUMENT",
        168: "ON.KEY",
        169: "APP.RESTORE",
        170: "APP.MOVE",
        171: "APP.SIZE",
        172: "APP.MINIMIZE",
        173: "APP.MAXIMIZE",
        174: "BRING.TO.FRONT",
        175: "SEND.TO.BACK",
        185: "MAIN.CHART.TYPE",
        186: "OVERLAY.CHART.TYPE",
        187: "SELECT.END",
        188: "OPEN.MAIL",
        189: "SEND.MAIL",
        190: "STANDARD.FONT",
        191: "CONSOLIDATE",
        192: "SORT.SPECIAL",
        193: "GALLERY.3D.AREA",
        194: "GALLERY.3D.COLUMN",
        195: "GALLERY.3D.LINE",
        196: "GALLERY.3D.PIE",
        197: "VIEW.3D",
        198: "GOAL.SEEK",
        199: "WORKGROUP",
        200: "FILL.GROUP",
        201: "UPDATE.LINK",
        202: "PROMOTE",
        203: "DEMOTE",
        204: "SHOW.DETAIL",
        206: "UNGROUP",
        207: "OBJECT.PROPERTIES",
        208: "SAVE.NEW.OBJECT",
        209: "SHARE",
        210: "SHARE.NAME",
        211: "DUPLICATE",
        212: "APPLY.STYLE",
        213: "ASSIGN.TO.OBJECT",
        214: "OBJECT.PROTECTION",
        215: "HIDE.OBJECT",
        216: "SET.EXTRACT",
        217: "CREATE.PUBLISHER",
        218: "SUBSCRIBE.TO",
        219: "ATTRIBUTES",
        220: "SHOW.TOOLBAR",
        222: "PRINT.PREVIEW",
        223: "EDIT.COLOR",
        224: "SHOW.LEVELS",
        225: "FORMAT.MAIN",
        226: "FORMAT.OVERLAY",
        227: "ON.RECALC",
        228: "EDIT.SERIES",
        229: "DEFINE.STYLE",
        240: "LINE.PRINT",
        243: "ENTER.DATA",
        249: "GALLERY.RADAR",
        250: "MERGE.STYLES",
        251: "EDITION.OPTIONS",
        252: "PASTE.PICTURE",
        253: "PASTE.PICTURE.LINK",
        254: "SPELLING",
        256: "ZOOM",
        259: "INSERT.OBJECT",
        260: "WINDOW.MINIMIZE",
        265: "SOUND.NOTE",
        266: "SOUND.PLAY",
        267: "FORMAT.SHAPE",
        268: "EXTEND.POLYGON",
        269: "FORMAT.AUTO",
        272: "GALLERY.3D.BAR",
        273: "GALLERY.3D.SURFACE",
        274: "FILL.AUTO",
        276: "CUSTOMIZE.TOOLBAR",
        277: "ADD.TOOL",
        278: "EDIT.OBJECT",
        279: "ON.DOUBLECLICK",
        280: "ON.ENTRY",
        281: "WORKBOOK.ADD",
        282: "WORKBOOK.MOVE",
        283: "WORKBOOK.COPY",
        284: "WORKBOOK.OPTIONS",
        285: "SAVE.WORKSPACE",
        288: "CHART.WIZARD",
        289: "DELETE.TOOL",
        290: "MOVE.TOOL",
        291: "WORKBOOK.SELECT",
        292: "WORKBOOK.ACTIVATE",
        293: "ASSIGN.TO.TOOL",
        295: "COPY.TOOL",
        296: "RESET.TOOL",
        297: "CONSTRAIN.NUMERIC",
        298: "PASTE.TOOL",
        302: "WORKBOOK.NEW",
        305: "SCENARIO.CELLS",
        306: "SCENARIO.DELETE",
        307: "SCENARIO.ADD",
        308: "SCENARIO.EDIT",
        309: "SCENARIO.SHOW",
        310: "SCENARIO.SHOW.NEXT",
        311: "SCENARIO.SUMMARY",
        312: "PIVOT.TABLE.WIZARD",
        313: "PIVOT.FIELD.PROPERTIES",
        314: "PIVOT.FIELD",
        315: "PIVOT.ITEM",
        316: "PIVOT.ADD.FIELDS",
        318: "OPTIONS.CALCULATION",
        319: "OPTIONS.EDIT",
        320: "OPTIONS.VIEW",
        321: "ADDIN.MANAGER",
        322: "MENU.EDITOR",
        323: "ATTACH.TOOLBARS",
        324: "VBAActivate",
        325: "OPTIONS.CHART",
        328: "VBA.INSERT.FILE",
        330: "VBA.PROCEDURE.DEFINITION",
        336: "ROUTING.SLIP",
        338: "ROUTE.DOCUMENT",
        339: "MAIL.LOGON",
        342: "INSERT.PICTURE",
        343: "EDIT.TOOL",
        344: "GALLERY.DOUGHNUT",
        350: "CHART.TREND",
        352: "PIVOT.ITEM.PROPERTIES",
        354: "WORKBOOK.INSERT",
        355: "OPTIONS.TRANSITION",
        356: "OPTIONS.GENERAL",
        370: "FILTER.ADVANCED",
        373: "MAIL.ADD.MAILER",
        374: "MAIL.DELETE.MAILER",
        375: "MAIL.REPLY",
        376: "MAIL.REPLY.ALL",
        377: "MAIL.FORWARD",
        378: "MAIL.NEXT.LETTER",
        379: "DATA.LABEL",
        380: "INSERT.TITLE",
        381: "FONT.PROPERTIES",
        382: "MACRO.OPTIONS",
        383: "WORKBOOK.HIDE",
        384: "WORKBOOK.UNHIDE",
        385: "WORKBOOK.DELETE",
        386: "WORKBOOK.NAME",
        388: "GALLERY.CUSTOM",
        390: "ADD.CHART.AUTOFORMAT",
        391: "DELETE.CHART.AUTOFORMAT",
        392: "CHART.ADD.DATA",
        393: "AUTO.OUTLINE",
        394: "TAB.ORDER",
        395: "SHOW.DIALOG",
        396: "SELECT.ALL",
        397: "UNGROUP.SHEETS",
        398: "SUBTOTAL.CREATE",
        399: "SUBTOTAL.REMOVE",
        400: "RENAME.OBJECT",
        412: "WORKBOOK.SCROLL",
        413: "WORKBOOK.NEXT",
        414: "WORKBOOK.PREV",
        415: "WORKBOOK.TAB.SPLIT",
        416: "FULL.SCREEN",
        417: "WORKBOOK.PROTECT",
        420: "SCROLLBAR.PROPERTIES",
        421: "PIVOT.SHOW.PAGES",
        422: "TEXT.TO.COLUMNS",
        423: "FORMAT.CHARTTYPE",
        424: "LINK.FORMAT",
        425: "TRACER.DISPLAY",
        430: "TRACER.NAVIGATE",
        431: "TRACER.CLEAR",
        432: "TRACER.ERROR",
        433: "PIVOT.FIELD.GROUP",
        434: "PIVOT.FIELD.UNGROUP",
        435: "CHECKBOX.PROPERTIES",
        436: "LABEL.PROPERTIES",
        437: "LISTBOX.PROPERTIES",
        438: "EDITBOX.PROPERTIES",
        439: "PIVOT.REFRESH",
        440: "LINK.COMBO",
        441: "OPEN.TEXT",
        442: "HIDE.DIALOG",
        443: "SET.DIALOG.FOCUS",
        444: "ENABLE.OBJECT",
        445: "PUSHBUTTON.PROPERTIES",
        446: "SET.DIALOG.DEFAULT",
        447: "FILTER",
        448: "FILTER.SHOW.ALL",
        449: "CLEAR.OUTLINE",
        450: "FUNCTION.WIZARD",
        451: "ADD.LIST.ITEM",
        452: "SET.LIST.ITEM",
        453: "REMOVE.LIST.ITEM",
        454: "SELECT.LIST.ITEM",
        455: "SET.CONTROL.VALUE",
        456: "SAVE.COPY.AS",
        458: "OPTIONS.LISTS.ADD",
        459: "OPTIONS.LISTS.DELETE",
        460: "SERIES.AXES",
        461: "SERIES.X",
        462: "SERIES.Y",
        463: "ERRORBAR.X",
        464: "ERRORBAR.Y",
        465: "FORMAT.CHART",
        466: "SERIES.ORDER",
        467: "MAIL.LOGOFF",
        468: "CLEAR.ROUTING.SLIP",
        469: "APP.ACTIVATE.MICROSOFT",
        470: "MAIL.EDIT.MAILER",
        471: "ON.SHEET",
        472: "STANDARD.WIDTH",
        473: "SCENARIO.MERGE",
        474: "SUMMARY.INFO",
        475: "FIND.FILE",
        476: "ACTIVE.CELL.FONT",
        477: "ENABLE.TIPWIZARD",
        478: "VBA.MAKE.ADDIN",
        480: "INSERTDATATABLE",
        481: "WORKGROUP.OPTIONS",
        482: "MAIL.SEND.MAILER",
        485: "AUTOCORRECT",
        489: "POST.DOCUMENT",
        491: "PICKLIST",
        493: "VIEW.SHOW",
        494: "VIEW.DEFINE",
        495: "VIEW.DELETE",
        509: "SHEET.BACKGROUND",
        510: "INSERT.MAP.OBJECT",
        511: "OPTIONS.MENONO",
        517: "MSOCHECKS",
        518: "NORMAL",
        519: "LAYOUT",
        520: "RM.PRINT.AREA",
        521: "CLEAR.PRINT.AREA",
        522: "ADD.PRINT.AREA",
        523: "MOVE.BRK",
        545: "HIDECURR.NOTE",
        546: "HIDEALL.NOTES",
        547: "DELETE.NOTE",
        548: "TRAVERSE.NOTES",
        549: "ACTIVATE.NOTES",
        620: "PROTECT.REVISIONS",
        621: "UNPROTECT.REVISIONS",
        647: "OPTIONS.ME",
        653: "WEB.PUBLISH",
        667: "NEWWEBQUERY",
        673: "PIVOT.TABLE.CHART",
        753: "OPTIONS.SAVE",
        755: "OPTIONS.SPELL",
        808: "HIDEALL.INKANNOTS"
      };
      var Ftab = {
        0: "COUNT",
        1: "IF",
        2: "ISNA",
        3: "ISERROR",
        4: "SUM",
        5: "AVERAGE",
        6: "MIN",
        7: "MAX",
        8: "ROW",
        9: "COLUMN",
        10: "NA",
        11: "NPV",
        12: "STDEV",
        13: "DOLLAR",
        14: "FIXED",
        15: "SIN",
        16: "COS",
        17: "TAN",
        18: "ATAN",
        19: "PI",
        20: "SQRT",
        21: "EXP",
        22: "LN",
        23: "LOG10",
        24: "ABS",
        25: "INT",
        26: "SIGN",
        27: "ROUND",
        28: "LOOKUP",
        29: "INDEX",
        30: "REPT",
        31: "MID",
        32: "LEN",
        33: "VALUE",
        34: "TRUE",
        35: "FALSE",
        36: "AND",
        37: "OR",
        38: "NOT",
        39: "MOD",
        40: "DCOUNT",
        41: "DSUM",
        42: "DAVERAGE",
        43: "DMIN",
        44: "DMAX",
        45: "DSTDEV",
        46: "VAR",
        47: "DVAR",
        48: "TEXT",
        49: "LINEST",
        50: "TREND",
        51: "LOGEST",
        52: "GROWTH",
        53: "GOTO",
        54: "HALT",
        55: "RETURN",
        56: "PV",
        57: "FV",
        58: "NPER",
        59: "PMT",
        60: "RATE",
        61: "MIRR",
        62: "IRR",
        63: "RAND",
        64: "MATCH",
        65: "DATE",
        66: "TIME",
        67: "DAY",
        68: "MONTH",
        69: "YEAR",
        70: "WEEKDAY",
        71: "HOUR",
        72: "MINUTE",
        73: "SECOND",
        74: "NOW",
        75: "AREAS",
        76: "ROWS",
        77: "COLUMNS",
        78: "OFFSET",
        79: "ABSREF",
        80: "RELREF",
        81: "ARGUMENT",
        82: "SEARCH",
        83: "TRANSPOSE",
        84: "ERROR",
        85: "STEP",
        86: "TYPE",
        87: "ECHO",
        88: "SET.NAME",
        89: "CALLER",
        90: "DEREF",
        91: "WINDOWS",
        92: "SERIES",
        93: "DOCUMENTS",
        94: "ACTIVE.CELL",
        95: "SELECTION",
        96: "RESULT",
        97: "ATAN2",
        98: "ASIN",
        99: "ACOS",
        100: "CHOOSE",
        101: "HLOOKUP",
        102: "VLOOKUP",
        103: "LINKS",
        104: "INPUT",
        105: "ISREF",
        106: "GET.FORMULA",
        107: "GET.NAME",
        108: "SET.VALUE",
        109: "LOG",
        110: "EXEC",
        111: "CHAR",
        112: "LOWER",
        113: "UPPER",
        114: "PROPER",
        115: "LEFT",
        116: "RIGHT",
        117: "EXACT",
        118: "TRIM",
        119: "REPLACE",
        120: "SUBSTITUTE",
        121: "CODE",
        122: "NAMES",
        123: "DIRECTORY",
        124: "FIND",
        125: "CELL",
        126: "ISERR",
        127: "ISTEXT",
        128: "ISNUMBER",
        129: "ISBLANK",
        130: "T",
        131: "N",
        132: "FOPEN",
        133: "FCLOSE",
        134: "FSIZE",
        135: "FREADLN",
        136: "FREAD",
        137: "FWRITELN",
        138: "FWRITE",
        139: "FPOS",
        140: "DATEVALUE",
        141: "TIMEVALUE",
        142: "SLN",
        143: "SYD",
        144: "DDB",
        145: "GET.DEF",
        146: "REFTEXT",
        147: "TEXTREF",
        148: "INDIRECT",
        149: "REGISTER",
        150: "CALL",
        151: "ADD.BAR",
        152: "ADD.MENU",
        153: "ADD.COMMAND",
        154: "ENABLE.COMMAND",
        155: "CHECK.COMMAND",
        156: "RENAME.COMMAND",
        157: "SHOW.BAR",
        158: "DELETE.MENU",
        159: "DELETE.COMMAND",
        160: "GET.CHART.ITEM",
        161: "DIALOG.BOX",
        162: "CLEAN",
        163: "MDETERM",
        164: "MINVERSE",
        165: "MMULT",
        166: "FILES",
        167: "IPMT",
        168: "PPMT",
        169: "COUNTA",
        170: "CANCEL.KEY",
        171: "FOR",
        172: "WHILE",
        173: "BREAK",
        174: "NEXT",
        175: "INITIATE",
        176: "REQUEST",
        177: "POKE",
        178: "EXECUTE",
        179: "TERMINATE",
        180: "RESTART",
        181: "HELP",
        182: "GET.BAR",
        183: "PRODUCT",
        184: "FACT",
        185: "GET.CELL",
        186: "GET.WORKSPACE",
        187: "GET.WINDOW",
        188: "GET.DOCUMENT",
        189: "DPRODUCT",
        190: "ISNONTEXT",
        191: "GET.NOTE",
        192: "NOTE",
        193: "STDEVP",
        194: "VARP",
        195: "DSTDEVP",
        196: "DVARP",
        197: "TRUNC",
        198: "ISLOGICAL",
        199: "DCOUNTA",
        200: "DELETE.BAR",
        201: "UNREGISTER",
        204: "USDOLLAR",
        205: "FINDB",
        206: "SEARCHB",
        207: "REPLACEB",
        208: "LEFTB",
        209: "RIGHTB",
        210: "MIDB",
        211: "LENB",
        212: "ROUNDUP",
        213: "ROUNDDOWN",
        214: "ASC",
        215: "DBCS",
        216: "RANK",
        219: "ADDRESS",
        220: "DAYS360",
        221: "TODAY",
        222: "VDB",
        223: "ELSE",
        224: "ELSE.IF",
        225: "END.IF",
        226: "FOR.CELL",
        227: "MEDIAN",
        228: "SUMPRODUCT",
        229: "SINH",
        230: "COSH",
        231: "TANH",
        232: "ASINH",
        233: "ACOSH",
        234: "ATANH",
        235: "DGET",
        236: "CREATE.OBJECT",
        237: "VOLATILE",
        238: "LAST.ERROR",
        239: "CUSTOM.UNDO",
        240: "CUSTOM.REPEAT",
        241: "FORMULA.CONVERT",
        242: "GET.LINK.INFO",
        243: "TEXT.BOX",
        244: "INFO",
        245: "GROUP",
        246: "GET.OBJECT",
        247: "DB",
        248: "PAUSE",
        251: "RESUME",
        252: "FREQUENCY",
        253: "ADD.TOOLBAR",
        254: "DELETE.TOOLBAR",
        255: "User",
        256: "RESET.TOOLBAR",
        257: "EVALUATE",
        258: "GET.TOOLBAR",
        259: "GET.TOOL",
        260: "SPELLING.CHECK",
        261: "ERROR.TYPE",
        262: "APP.TITLE",
        263: "WINDOW.TITLE",
        264: "SAVE.TOOLBAR",
        265: "ENABLE.TOOL",
        266: "PRESS.TOOL",
        267: "REGISTER.ID",
        268: "GET.WORKBOOK",
        269: "AVEDEV",
        270: "BETADIST",
        271: "GAMMALN",
        272: "BETAINV",
        273: "BINOMDIST",
        274: "CHIDIST",
        275: "CHIINV",
        276: "COMBIN",
        277: "CONFIDENCE",
        278: "CRITBINOM",
        279: "EVEN",
        280: "EXPONDIST",
        281: "FDIST",
        282: "FINV",
        283: "FISHER",
        284: "FISHERINV",
        285: "FLOOR",
        286: "GAMMADIST",
        287: "GAMMAINV",
        288: "CEILING",
        289: "HYPGEOMDIST",
        290: "LOGNORMDIST",
        291: "LOGINV",
        292: "NEGBINOMDIST",
        293: "NORMDIST",
        294: "NORMSDIST",
        295: "NORMINV",
        296: "NORMSINV",
        297: "STANDARDIZE",
        298: "ODD",
        299: "PERMUT",
        300: "POISSON",
        301: "TDIST",
        302: "WEIBULL",
        303: "SUMXMY2",
        304: "SUMX2MY2",
        305: "SUMX2PY2",
        306: "CHITEST",
        307: "CORREL",
        308: "COVAR",
        309: "FORECAST",
        310: "FTEST",
        311: "INTERCEPT",
        312: "PEARSON",
        313: "RSQ",
        314: "STEYX",
        315: "SLOPE",
        316: "TTEST",
        317: "PROB",
        318: "DEVSQ",
        319: "GEOMEAN",
        320: "HARMEAN",
        321: "SUMSQ",
        322: "KURT",
        323: "SKEW",
        324: "ZTEST",
        325: "LARGE",
        326: "SMALL",
        327: "QUARTILE",
        328: "PERCENTILE",
        329: "PERCENTRANK",
        330: "MODE",
        331: "TRIMMEAN",
        332: "TINV",
        334: "MOVIE.COMMAND",
        335: "GET.MOVIE",
        336: "CONCATENATE",
        337: "POWER",
        338: "PIVOT.ADD.DATA",
        339: "GET.PIVOT.TABLE",
        340: "GET.PIVOT.FIELD",
        341: "GET.PIVOT.ITEM",
        342: "RADIANS",
        343: "DEGREES",
        344: "SUBTOTAL",
        345: "SUMIF",
        346: "COUNTIF",
        347: "COUNTBLANK",
        348: "SCENARIO.GET",
        349: "OPTIONS.LISTS.GET",
        350: "ISPMT",
        351: "DATEDIF",
        352: "DATESTRING",
        353: "NUMBERSTRING",
        354: "ROMAN",
        355: "OPEN.DIALOG",
        356: "SAVE.DIALOG",
        357: "VIEW.GET",
        358: "GETPIVOTDATA",
        359: "HYPERLINK",
        360: "PHONETIC",
        361: "AVERAGEA",
        362: "MAXA",
        363: "MINA",
        364: "STDEVPA",
        365: "VARPA",
        366: "STDEVA",
        367: "VARA",
        368: "BAHTTEXT",
        369: "THAIDAYOFWEEK",
        370: "THAIDIGIT",
        371: "THAIMONTHOFYEAR",
        372: "THAINUMSOUND",
        373: "THAINUMSTRING",
        374: "THAISTRINGLENGTH",
        375: "ISTHAIDIGIT",
        376: "ROUNDBAHTDOWN",
        377: "ROUNDBAHTUP",
        378: "THAIYEAR",
        379: "RTD",
        380: "CUBEVALUE",
        381: "CUBEMEMBER",
        382: "CUBEMEMBERPROPERTY",
        383: "CUBERANKEDMEMBER",
        384: "HEX2BIN",
        385: "HEX2DEC",
        386: "HEX2OCT",
        387: "DEC2BIN",
        388: "DEC2HEX",
        389: "DEC2OCT",
        390: "OCT2BIN",
        391: "OCT2HEX",
        392: "OCT2DEC",
        393: "BIN2DEC",
        394: "BIN2OCT",
        395: "BIN2HEX",
        396: "IMSUB",
        397: "IMDIV",
        398: "IMPOWER",
        399: "IMABS",
        400: "IMSQRT",
        401: "IMLN",
        402: "IMLOG2",
        403: "IMLOG10",
        404: "IMSIN",
        405: "IMCOS",
        406: "IMEXP",
        407: "IMARGUMENT",
        408: "IMCONJUGATE",
        409: "IMAGINARY",
        410: "IMREAL",
        411: "COMPLEX",
        412: "IMSUM",
        413: "IMPRODUCT",
        414: "SERIESSUM",
        415: "FACTDOUBLE",
        416: "SQRTPI",
        417: "QUOTIENT",
        418: "DELTA",
        419: "GESTEP",
        420: "ISEVEN",
        421: "ISODD",
        422: "MROUND",
        423: "ERF",
        424: "ERFC",
        425: "BESSELJ",
        426: "BESSELK",
        427: "BESSELY",
        428: "BESSELI",
        429: "XIRR",
        430: "XNPV",
        431: "PRICEMAT",
        432: "YIELDMAT",
        433: "INTRATE",
        434: "RECEIVED",
        435: "DISC",
        436: "PRICEDISC",
        437: "YIELDDISC",
        438: "TBILLEQ",
        439: "TBILLPRICE",
        440: "TBILLYIELD",
        441: "PRICE",
        442: "YIELD",
        443: "DOLLARDE",
        444: "DOLLARFR",
        445: "NOMINAL",
        446: "EFFECT",
        447: "CUMPRINC",
        448: "CUMIPMT",
        449: "EDATE",
        450: "EOMONTH",
        451: "YEARFRAC",
        452: "COUPDAYBS",
        453: "COUPDAYS",
        454: "COUPDAYSNC",
        455: "COUPNCD",
        456: "COUPNUM",
        457: "COUPPCD",
        458: "DURATION",
        459: "MDURATION",
        460: "ODDLPRICE",
        461: "ODDLYIELD",
        462: "ODDFPRICE",
        463: "ODDFYIELD",
        464: "RANDBETWEEN",
        465: "WEEKNUM",
        466: "AMORDEGRC",
        467: "AMORLINC",
        468: "CONVERT",
        724: "SHEETJS",
        469: "ACCRINT",
        470: "ACCRINTM",
        471: "WORKDAY",
        472: "NETWORKDAYS",
        473: "GCD",
        474: "MULTINOMIAL",
        475: "LCM",
        476: "FVSCHEDULE",
        477: "CUBEKPIMEMBER",
        478: "CUBESET",
        479: "CUBESETCOUNT",
        480: "IFERROR",
        481: "COUNTIFS",
        482: "SUMIFS",
        483: "AVERAGEIF",
        484: "AVERAGEIFS"
      };
      var FtabArgc = {
        2: 1,
        3: 1,
        10: 0,
        15: 1,
        16: 1,
        17: 1,
        18: 1,
        19: 0,
        20: 1,
        21: 1,
        22: 1,
        23: 1,
        24: 1,
        25: 1,
        26: 1,
        27: 2,
        30: 2,
        31: 3,
        32: 1,
        33: 1,
        34: 0,
        35: 0,
        38: 1,
        39: 2,
        40: 3,
        41: 3,
        42: 3,
        43: 3,
        44: 3,
        45: 3,
        47: 3,
        48: 2,
        53: 1,
        61: 3,
        63: 0,
        65: 3,
        66: 3,
        67: 1,
        68: 1,
        69: 1,
        70: 1,
        71: 1,
        72: 1,
        73: 1,
        74: 0,
        75: 1,
        76: 1,
        77: 1,
        79: 2,
        80: 2,
        83: 1,
        85: 0,
        86: 1,
        89: 0,
        90: 1,
        94: 0,
        95: 0,
        97: 2,
        98: 1,
        99: 1,
        101: 3,
        102: 3,
        105: 1,
        106: 1,
        108: 2,
        111: 1,
        112: 1,
        113: 1,
        114: 1,
        117: 2,
        118: 1,
        119: 4,
        121: 1,
        126: 1,
        127: 1,
        128: 1,
        129: 1,
        130: 1,
        131: 1,
        133: 1,
        134: 1,
        135: 1,
        136: 2,
        137: 2,
        138: 2,
        140: 1,
        141: 1,
        142: 3,
        143: 4,
        144: 4,
        161: 1,
        162: 1,
        163: 1,
        164: 1,
        165: 2,
        172: 1,
        175: 2,
        176: 2,
        177: 3,
        178: 2,
        179: 1,
        184: 1,
        186: 1,
        189: 3,
        190: 1,
        195: 3,
        196: 3,
        197: 1,
        198: 1,
        199: 3,
        201: 1,
        207: 4,
        210: 3,
        211: 1,
        212: 2,
        213: 2,
        214: 1,
        215: 1,
        225: 0,
        229: 1,
        230: 1,
        231: 1,
        232: 1,
        233: 1,
        234: 1,
        235: 3,
        244: 1,
        247: 4,
        252: 2,
        257: 1,
        261: 1,
        271: 1,
        273: 4,
        274: 2,
        275: 2,
        276: 2,
        277: 3,
        278: 3,
        279: 1,
        280: 3,
        281: 3,
        282: 3,
        283: 1,
        284: 1,
        285: 2,
        286: 4,
        287: 3,
        288: 2,
        289: 4,
        290: 3,
        291: 3,
        292: 3,
        293: 4,
        294: 1,
        295: 3,
        296: 1,
        297: 3,
        298: 1,
        299: 2,
        300: 3,
        301: 3,
        302: 4,
        303: 2,
        304: 2,
        305: 2,
        306: 2,
        307: 2,
        308: 2,
        309: 3,
        310: 2,
        311: 2,
        312: 2,
        313: 2,
        314: 2,
        315: 2,
        316: 4,
        325: 2,
        326: 2,
        327: 2,
        328: 2,
        331: 2,
        332: 2,
        337: 2,
        342: 1,
        343: 1,
        346: 2,
        347: 1,
        350: 4,
        351: 3,
        352: 1,
        353: 2,
        360: 1,
        368: 1,
        369: 1,
        370: 1,
        371: 1,
        372: 1,
        373: 1,
        374: 1,
        375: 1,
        376: 1,
        377: 1,
        378: 1,
        382: 3,
        385: 1,
        392: 1,
        393: 1,
        396: 2,
        397: 2,
        398: 2,
        399: 1,
        400: 1,
        401: 1,
        402: 1,
        403: 1,
        404: 1,
        405: 1,
        406: 1,
        407: 1,
        408: 1,
        409: 1,
        410: 1,
        414: 4,
        415: 1,
        416: 1,
        417: 2,
        420: 1,
        421: 1,
        422: 2,
        424: 1,
        425: 2,
        426: 2,
        427: 2,
        428: 2,
        430: 3,
        438: 3,
        439: 3,
        440: 3,
        443: 2,
        444: 2,
        445: 2,
        446: 2,
        447: 6,
        448: 6,
        449: 2,
        450: 2,
        464: 2,
        468: 3,
        476: 2,
        479: 1,
        480: 2,
        65535: 0
      };
      var XLSXFutureFunctions = {
        "_xlfn.ACOT": "ACOT",
        "_xlfn.ACOTH": "ACOTH",
        "_xlfn.AGGREGATE": "AGGREGATE",
        "_xlfn.ARABIC": "ARABIC",
        "_xlfn.AVERAGEIF": "AVERAGEIF",
        "_xlfn.AVERAGEIFS": "AVERAGEIFS",
        "_xlfn.BASE": "BASE",
        "_xlfn.BETA.DIST": "BETA.DIST",
        "_xlfn.BETA.INV": "BETA.INV",
        "_xlfn.BINOM.DIST": "BINOM.DIST",
        "_xlfn.BINOM.DIST.RANGE": "BINOM.DIST.RANGE",
        "_xlfn.BINOM.INV": "BINOM.INV",
        "_xlfn.BITAND": "BITAND",
        "_xlfn.BITLSHIFT": "BITLSHIFT",
        "_xlfn.BITOR": "BITOR",
        "_xlfn.BITRSHIFT": "BITRSHIFT",
        "_xlfn.BITXOR": "BITXOR",
        "_xlfn.CEILING.MATH": "CEILING.MATH",
        "_xlfn.CEILING.PRECISE": "CEILING.PRECISE",
        "_xlfn.CHISQ.DIST": "CHISQ.DIST",
        "_xlfn.CHISQ.DIST.RT": "CHISQ.DIST.RT",
        "_xlfn.CHISQ.INV": "CHISQ.INV",
        "_xlfn.CHISQ.INV.RT": "CHISQ.INV.RT",
        "_xlfn.CHISQ.TEST": "CHISQ.TEST",
        "_xlfn.COMBINA": "COMBINA",
        "_xlfn.CONCAT": "CONCAT",
        "_xlfn.CONFIDENCE.NORM": "CONFIDENCE.NORM",
        "_xlfn.CONFIDENCE.T": "CONFIDENCE.T",
        "_xlfn.COT": "COT",
        "_xlfn.COTH": "COTH",
        "_xlfn.COUNTIFS": "COUNTIFS",
        "_xlfn.COVARIANCE.P": "COVARIANCE.P",
        "_xlfn.COVARIANCE.S": "COVARIANCE.S",
        "_xlfn.CSC": "CSC",
        "_xlfn.CSCH": "CSCH",
        "_xlfn.DAYS": "DAYS",
        "_xlfn.DECIMAL": "DECIMAL",
        "_xlfn.ECMA.CEILING": "ECMA.CEILING",
        "_xlfn.ERF.PRECISE": "ERF.PRECISE",
        "_xlfn.ERFC.PRECISE": "ERFC.PRECISE",
        "_xlfn.EXPON.DIST": "EXPON.DIST",
        "_xlfn.F.DIST": "F.DIST",
        "_xlfn.F.DIST.RT": "F.DIST.RT",
        "_xlfn.F.INV": "F.INV",
        "_xlfn.F.INV.RT": "F.INV.RT",
        "_xlfn.F.TEST": "F.TEST",
        "_xlfn.FILTERXML": "FILTERXML",
        "_xlfn.FLOOR.MATH": "FLOOR.MATH",
        "_xlfn.FLOOR.PRECISE": "FLOOR.PRECISE",
        "_xlfn.FORECAST.ETS": "FORECAST.ETS",
        "_xlfn.FORECAST.ETS.CONFINT": "FORECAST.ETS.CONFINT",
        "_xlfn.FORECAST.ETS.SEASONALITY": "FORECAST.ETS.SEASONALITY",
        "_xlfn.FORECAST.ETS.STAT": "FORECAST.ETS.STAT",
        "_xlfn.FORECAST.LINEAR": "FORECAST.LINEAR",
        "_xlfn.FORMULATEXT": "FORMULATEXT",
        "_xlfn.GAMMA": "GAMMA",
        "_xlfn.GAMMA.DIST": "GAMMA.DIST",
        "_xlfn.GAMMA.INV": "GAMMA.INV",
        "_xlfn.GAMMALN.PRECISE": "GAMMALN.PRECISE",
        "_xlfn.GAUSS": "GAUSS",
        "_xlfn.HYPGEOM.DIST": "HYPGEOM.DIST",
        "_xlfn.IFERROR": "IFERROR",
        "_xlfn.IFNA": "IFNA",
        "_xlfn.IFS": "IFS",
        "_xlfn.IMCOSH": "IMCOSH",
        "_xlfn.IMCOT": "IMCOT",
        "_xlfn.IMCSC": "IMCSC",
        "_xlfn.IMCSCH": "IMCSCH",
        "_xlfn.IMSEC": "IMSEC",
        "_xlfn.IMSECH": "IMSECH",
        "_xlfn.IMSINH": "IMSINH",
        "_xlfn.IMTAN": "IMTAN",
        "_xlfn.ISFORMULA": "ISFORMULA",
        "_xlfn.ISO.CEILING": "ISO.CEILING",
        "_xlfn.ISOWEEKNUM": "ISOWEEKNUM",
        "_xlfn.LOGNORM.DIST": "LOGNORM.DIST",
        "_xlfn.LOGNORM.INV": "LOGNORM.INV",
        "_xlfn.MAXIFS": "MAXIFS",
        "_xlfn.MINIFS": "MINIFS",
        "_xlfn.MODE.MULT": "MODE.MULT",
        "_xlfn.MODE.SNGL": "MODE.SNGL",
        "_xlfn.MUNIT": "MUNIT",
        "_xlfn.NEGBINOM.DIST": "NEGBINOM.DIST",
        "_xlfn.NETWORKDAYS.INTL": "NETWORKDAYS.INTL",
        "_xlfn.NIGBINOM": "NIGBINOM",
        "_xlfn.NORM.DIST": "NORM.DIST",
        "_xlfn.NORM.INV": "NORM.INV",
        "_xlfn.NORM.S.DIST": "NORM.S.DIST",
        "_xlfn.NORM.S.INV": "NORM.S.INV",
        "_xlfn.NUMBERVALUE": "NUMBERVALUE",
        "_xlfn.PDURATION": "PDURATION",
        "_xlfn.PERCENTILE.EXC": "PERCENTILE.EXC",
        "_xlfn.PERCENTILE.INC": "PERCENTILE.INC",
        "_xlfn.PERCENTRANK.EXC": "PERCENTRANK.EXC",
        "_xlfn.PERCENTRANK.INC": "PERCENTRANK.INC",
        "_xlfn.PERMUTATIONA": "PERMUTATIONA",
        "_xlfn.PHI": "PHI",
        "_xlfn.POISSON.DIST": "POISSON.DIST",
        "_xlfn.QUARTILE.EXC": "QUARTILE.EXC",
        "_xlfn.QUARTILE.INC": "QUARTILE.INC",
        "_xlfn.QUERYSTRING": "QUERYSTRING",
        "_xlfn.RANK.AVG": "RANK.AVG",
        "_xlfn.RANK.EQ": "RANK.EQ",
        "_xlfn.RRI": "RRI",
        "_xlfn.SEC": "SEC",
        "_xlfn.SECH": "SECH",
        "_xlfn.SHEET": "SHEET",
        "_xlfn.SHEETS": "SHEETS",
        "_xlfn.SKEW.P": "SKEW.P",
        "_xlfn.STDEV.P": "STDEV.P",
        "_xlfn.STDEV.S": "STDEV.S",
        "_xlfn.SUMIFS": "SUMIFS",
        "_xlfn.SWITCH": "SWITCH",
        "_xlfn.T.DIST": "T.DIST",
        "_xlfn.T.DIST.2T": "T.DIST.2T",
        "_xlfn.T.DIST.RT": "T.DIST.RT",
        "_xlfn.T.INV": "T.INV",
        "_xlfn.T.INV.2T": "T.INV.2T",
        "_xlfn.T.TEST": "T.TEST",
        "_xlfn.TEXTJOIN": "TEXTJOIN",
        "_xlfn.UNICHAR": "UNICHAR",
        "_xlfn.UNICODE": "UNICODE",
        "_xlfn.VAR.P": "VAR.P",
        "_xlfn.VAR.S": "VAR.S",
        "_xlfn.WEBSERVICE": "WEBSERVICE",
        "_xlfn.WEIBULL.DIST": "WEIBULL.DIST",
        "_xlfn.WORKDAY.INTL": "WORKDAY.INTL",
        "_xlfn.XOR": "XOR",
        "_xlfn.Z.TEST": "Z.TEST"
      };
      function ods_to_csf_formula(f) {
        if (f.slice(0, 3) == "of:")
          f = f.slice(3);
        if (f.charCodeAt(0) == 61) {
          f = f.slice(1);
          if (f.charCodeAt(0) == 61)
            f = f.slice(1);
        }
        f = f.replace(/COM\.MICROSOFT\./g, "");
        f = f.replace(/\[((?:\.[A-Z]+[0-9]+)(?::\.[A-Z]+[0-9]+)?)\]/g, function($$, $1) {
          return $1.replace(/\./g, "");
        });
        f = f.replace(/\[.(#[A-Z]*[?!])\]/g, "$1");
        return f.replace(/[;~]/g, ",").replace(/\|/g, ";");
      }
      function csf_to_ods_formula(f) {
        var o = "of:=" + f.replace(crefregex, "$1[.$2$3$4$5]").replace(/\]:\[/g, ":");
        return o.replace(/;/g, "|").replace(/,/g, ";");
      }
      function ods_to_csf_3D(r) {
        var a = r.split(":");
        var s = a[0].split(".")[0];
        return [s, a[0].split(".")[1] + (a.length > 1 ? ":" + (a[1].split(".")[1] || a[1].split(".")[0]) : "")];
      }
      function csf_to_ods_3D(r) {
        return r.replace(/\./, "!");
      }
      var strs = {};
      var _ssfopts = {};
      RELS.WS = [
        "http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet",
        "http://purl.oclc.org/ooxml/officeDocument/relationships/worksheet"
      ];
      var browser_has_Map = typeof Map !== "undefined";
      function get_sst_id(sst, str, rev) {
        var i2 = 0, len = sst.length;
        if (rev) {
          if (browser_has_Map ? rev.has(str) : Object.prototype.hasOwnProperty.call(rev, str)) {
            var revarr = browser_has_Map ? rev.get(str) : rev[str];
            for (; i2 < revarr.length; ++i2) {
              if (sst[revarr[i2]].t === str) {
                sst.Count++;
                return revarr[i2];
              }
            }
          }
        } else
          for (; i2 < len; ++i2) {
            if (sst[i2].t === str) {
              sst.Count++;
              return i2;
            }
          }
        sst[len] = { t: str };
        sst.Count++;
        sst.Unique++;
        if (rev) {
          if (browser_has_Map) {
            if (!rev.has(str))
              rev.set(str, []);
            rev.get(str).push(len);
          } else {
            if (!Object.prototype.hasOwnProperty.call(rev, str))
              rev[str] = [];
            rev[str].push(len);
          }
        }
        return len;
      }
      function col_obj_w(C, col) {
        var p = { min: C + 1, max: C + 1 };
        var wch = -1;
        if (col.MDW)
          MDW = col.MDW;
        if (col.width != null)
          p.customWidth = 1;
        else if (col.wpx != null)
          wch = px2char(col.wpx);
        else if (col.wch != null)
          wch = col.wch;
        if (wch > -1) {
          p.width = char2width(wch);
          p.customWidth = 1;
        } else if (col.width != null)
          p.width = col.width;
        if (col.hidden)
          p.hidden = true;
        if (col.level != null) {
          p.outlineLevel = p.level = col.level;
        }
        return p;
      }
      function default_margins(margins, mode) {
        if (!margins)
          return;
        var defs = [0.7, 0.7, 0.75, 0.75, 0.3, 0.3];
        if (mode == "xlml")
          defs = [1, 1, 1, 1, 0.5, 0.5];
        if (margins.left == null)
          margins.left = defs[0];
        if (margins.right == null)
          margins.right = defs[1];
        if (margins.top == null)
          margins.top = defs[2];
        if (margins.bottom == null)
          margins.bottom = defs[3];
        if (margins.header == null)
          margins.header = defs[4];
        if (margins.footer == null)
          margins.footer = defs[5];
      }
      function get_cell_style(styles, cell, opts) {
        var z = opts.revssf[cell.z != null ? cell.z : "General"];
        var i2 = 60, len = styles.length;
        if (z == null && opts.ssf) {
          for (; i2 < 392; ++i2)
            if (opts.ssf[i2] == null) {
              SSF.load(cell.z, i2);
              opts.ssf[i2] = cell.z;
              opts.revssf[cell.z] = z = i2;
              break;
            }
        }
        for (i2 = 0; i2 != len; ++i2)
          if (styles[i2].numFmtId === z)
            return i2;
        styles[len] = {
          numFmtId: z,
          fontId: 0,
          fillId: 0,
          borderId: 0,
          xfId: 0,
          applyNumberFormat: 1
        };
        return len;
      }
      function safe_format(p, fmtid, fillid, opts, themes, styles) {
        try {
          if (opts.cellNF)
            p.z = SSF._table[fmtid];
        } catch (e) {
          if (opts.WTF)
            throw e;
        }
        if (p.t === "z" && !opts.cellStyles)
          return;
        if (p.t === "d" && typeof p.v === "string")
          p.v = parseDate(p.v);
        if ((!opts || opts.cellText !== false) && p.t !== "z")
          try {
            if (SSF._table[fmtid] == null)
              SSF.load(SSFImplicit[fmtid] || "General", fmtid);
            if (p.t === "e")
              p.w = p.w || BErr[p.v];
            else if (fmtid === 0) {
              if (p.t === "n") {
                if ((p.v | 0) === p.v)
                  p.w = SSF._general_int(p.v);
                else
                  p.w = SSF._general_num(p.v);
              } else if (p.t === "d") {
                var dd = datenum(p.v);
                if ((dd | 0) === dd)
                  p.w = SSF._general_int(dd);
                else
                  p.w = SSF._general_num(dd);
              } else if (p.v === void 0)
                return "";
              else
                p.w = SSF._general(p.v, _ssfopts);
            } else if (p.t === "d")
              p.w = SSF.format(fmtid, datenum(p.v), _ssfopts);
            else
              p.w = SSF.format(fmtid, p.v, _ssfopts);
          } catch (e) {
            if (opts.WTF)
              throw e;
          }
        if (!opts.cellStyles)
          return;
        if (fillid != null)
          try {
            p.s = styles.Fills[fillid];
            if (p.s.fgColor && p.s.fgColor.theme && !p.s.fgColor.rgb) {
              p.s.fgColor.rgb = rgb_tint(themes.themeElements.clrScheme[p.s.fgColor.theme].rgb, p.s.fgColor.tint || 0);
              if (opts.WTF)
                p.s.fgColor.raw_rgb = themes.themeElements.clrScheme[p.s.fgColor.theme].rgb;
            }
            if (p.s.bgColor && p.s.bgColor.theme) {
              p.s.bgColor.rgb = rgb_tint(themes.themeElements.clrScheme[p.s.bgColor.theme].rgb, p.s.bgColor.tint || 0);
              if (opts.WTF)
                p.s.bgColor.raw_rgb = themes.themeElements.clrScheme[p.s.bgColor.theme].rgb;
            }
          } catch (e) {
            if (opts.WTF && styles.Fills)
              throw e;
          }
      }
      function check_ws(ws, sname, i2) {
        if (ws && ws["!ref"]) {
          var range = safe_decode_range(ws["!ref"]);
          if (range.e.c < range.s.c || range.e.r < range.s.r)
            throw new Error("Bad range (" + i2 + "): " + ws["!ref"]);
        }
      }
      function parse_ws_xml_dim(ws, s) {
        var d = safe_decode_range(s);
        if (d.s.r <= d.e.r && d.s.c <= d.e.c && d.s.r >= 0 && d.s.c >= 0)
          ws["!ref"] = encode_range(d);
      }
      var mergecregex = /<(?:\w:)?mergeCell ref="[A-Z0-9:]+"\s*[\/]?>/g;
      var sheetdataregex = /<(?:\w+:)?sheetData[^>]*>([\s\S]*)<\/(?:\w+:)?sheetData>/;
      var hlinkregex = /<(?:\w:)?hyperlink [^>]*>/mg;
      var dimregex = /"(\w*:\w*)"/;
      var colregex = /<(?:\w:)?col\b[^>]*[\/]?>/g;
      var afregex = /<(?:\w:)?autoFilter[^>]*([\/]|>([\s\S]*)<\/(?:\w:)?autoFilter)>/g;
      var marginregex = /<(?:\w:)?pageMargins[^>]*\/>/g;
      var sheetprregex = /<(?:\w:)?sheetPr\b(?:[^>a-z][^>]*)?\/>/;
      var sheetprregex2 = /<(?:\w:)?sheetPr[^>]*(?:[\/]|>([\s\S]*)<\/(?:\w:)?sheetPr)>/;
      var svsregex = /<(?:\w:)?sheetViews[^>]*(?:[\/]|>([\s\S]*)<\/(?:\w:)?sheetViews)>/;
      function parse_ws_xml(data, opts, idx, rels, wb, themes, styles) {
        if (!data)
          return data;
        if (!rels)
          rels = { "!id": {} };
        if (DENSE != null && opts.dense == null)
          opts.dense = DENSE;
        var s = opts.dense ? [] : {};
        var refguess = { s: { r: 2e6, c: 2e6 }, e: { r: 0, c: 0 } };
        var data1 = "", data2 = "";
        var mtch = data.match(sheetdataregex);
        if (mtch) {
          data1 = data.slice(0, mtch.index);
          data2 = data.slice(mtch.index + mtch[0].length);
        } else
          data1 = data2 = data;
        var sheetPr = data1.match(sheetprregex);
        if (sheetPr)
          parse_ws_xml_sheetpr(sheetPr[0], s, wb, idx);
        else if (sheetPr = data1.match(sheetprregex2))
          parse_ws_xml_sheetpr2(sheetPr[0], sheetPr[1] || "", s, wb, idx, styles, themes);
        var ridx = (data1.match(/<(?:\w*:)?dimension/) || { index: -1 }).index;
        if (ridx > 0) {
          var ref = data1.slice(ridx, ridx + 50).match(dimregex);
          if (ref)
            parse_ws_xml_dim(s, ref[1]);
        }
        var svs = data1.match(svsregex);
        if (svs && svs[1])
          parse_ws_xml_sheetviews(svs[1], wb);
        var columns = [];
        if (opts.cellStyles) {
          var cols = data1.match(colregex);
          if (cols)
            parse_ws_xml_cols(columns, cols);
        }
        if (mtch)
          parse_ws_xml_data(mtch[1], s, opts, refguess, themes, styles);
        var afilter = data2.match(afregex);
        if (afilter)
          s["!autofilter"] = parse_ws_xml_autofilter(afilter[0]);
        var merges = [];
        var _merge = data2.match(mergecregex);
        if (_merge)
          for (ridx = 0; ridx != _merge.length; ++ridx)
            merges[ridx] = safe_decode_range(_merge[ridx].slice(_merge[ridx].indexOf('"') + 1));
        var hlink = data2.match(hlinkregex);
        if (hlink)
          parse_ws_xml_hlinks(s, hlink, rels);
        var margins = data2.match(marginregex);
        if (margins)
          s["!margins"] = parse_ws_xml_margins(parsexmltag(margins[0]));
        if (!s["!ref"] && refguess.e.c >= refguess.s.c && refguess.e.r >= refguess.s.r)
          s["!ref"] = encode_range(refguess);
        if (opts.sheetRows > 0 && s["!ref"]) {
          var tmpref = safe_decode_range(s["!ref"]);
          if (opts.sheetRows <= +tmpref.e.r) {
            tmpref.e.r = opts.sheetRows - 1;
            if (tmpref.e.r > refguess.e.r)
              tmpref.e.r = refguess.e.r;
            if (tmpref.e.r < tmpref.s.r)
              tmpref.s.r = tmpref.e.r;
            if (tmpref.e.c > refguess.e.c)
              tmpref.e.c = refguess.e.c;
            if (tmpref.e.c < tmpref.s.c)
              tmpref.s.c = tmpref.e.c;
            s["!fullref"] = s["!ref"];
            s["!ref"] = encode_range(tmpref);
          }
        }
        if (columns.length > 0)
          s["!cols"] = columns;
        if (merges.length > 0)
          s["!merges"] = merges;
        return s;
      }
      function write_ws_xml_merges(merges) {
        if (merges.length === 0)
          return "";
        var o = '<mergeCells count="' + merges.length + '">';
        for (var i2 = 0; i2 != merges.length; ++i2)
          o += '<mergeCell ref="' + encode_range(merges[i2]) + '"/>';
        return o + "</mergeCells>";
      }
      function parse_ws_xml_sheetpr(sheetPr, s, wb, idx) {
        var data = parsexmltag(sheetPr);
        if (!wb.Sheets[idx])
          wb.Sheets[idx] = {};
        if (data.codeName)
          wb.Sheets[idx].CodeName = unescapexml(utf8read(data.codeName));
      }
      function parse_ws_xml_sheetpr2(sheetPr, body, s, wb, idx, styles, themes) {
        parse_ws_xml_sheetpr(sheetPr.slice(0, sheetPr.indexOf(">")), s, wb, idx);
      }
      function write_ws_xml_sheetpr(ws, wb, idx, opts, o) {
        var needed = false;
        var props = {}, payload = null;
        if (opts.bookType !== "xlsx" && wb.vbaraw) {
          var cname = wb.SheetNames[idx];
          try {
            if (wb.Workbook)
              cname = wb.Workbook.Sheets[idx].CodeName || cname;
          } catch (e) {
          }
          needed = true;
          props.codeName = utf8write(escapexml(cname));
        }
        if (ws && ws["!outline"]) {
          var outlineprops = { summaryBelow: 1, summaryRight: 1 };
          if (ws["!outline"].above)
            outlineprops.summaryBelow = 0;
          if (ws["!outline"].left)
            outlineprops.summaryRight = 0;
          payload = (payload || "") + writextag("outlinePr", null, outlineprops);
        }
        if (!needed && !payload)
          return;
        o[o.length] = writextag("sheetPr", payload, props);
      }
      var sheetprot_deffalse = ["objects", "scenarios", "selectLockedCells", "selectUnlockedCells"];
      var sheetprot_deftrue = [
        "formatColumns",
        "formatRows",
        "formatCells",
        "insertColumns",
        "insertRows",
        "insertHyperlinks",
        "deleteColumns",
        "deleteRows",
        "sort",
        "autoFilter",
        "pivotTables"
      ];
      function write_ws_xml_protection(sp) {
        var o = { sheet: 1 };
        sheetprot_deffalse.forEach(function(n) {
          if (sp[n] != null && sp[n])
            o[n] = "1";
        });
        sheetprot_deftrue.forEach(function(n) {
          if (sp[n] != null && !sp[n])
            o[n] = "0";
        });
        if (sp.password)
          o.password = crypto_CreatePasswordVerifier_Method1(sp.password).toString(16).toUpperCase();
        return writextag("sheetProtection", null, o);
      }
      function parse_ws_xml_hlinks(s, data, rels) {
        var dense = Array.isArray(s);
        for (var i2 = 0; i2 != data.length; ++i2) {
          var val = parsexmltag(utf8read(data[i2]), true);
          if (!val.ref)
            return;
          var rel = ((rels || {})["!id"] || [])[val.id];
          if (rel) {
            val.Target = rel.Target;
            if (val.location)
              val.Target += "#" + unescapexml(val.location);
          } else {
            val.Target = "#" + unescapexml(val.location);
            rel = { Target: val.Target, TargetMode: "Internal" };
          }
          val.Rel = rel;
          if (val.tooltip) {
            val.Tooltip = val.tooltip;
            delete val.tooltip;
          }
          var rng = safe_decode_range(val.ref);
          for (var R = rng.s.r; R <= rng.e.r; ++R)
            for (var C = rng.s.c; C <= rng.e.c; ++C) {
              var addr = encode_cell({ c: C, r: R });
              if (dense) {
                if (!s[R])
                  s[R] = [];
                if (!s[R][C])
                  s[R][C] = { t: "z", v: void 0 };
                s[R][C].l = val;
              } else {
                if (!s[addr])
                  s[addr] = { t: "z", v: void 0 };
                s[addr].l = val;
              }
            }
        }
      }
      function parse_ws_xml_margins(margin) {
        var o = {};
        ["left", "right", "top", "bottom", "header", "footer"].forEach(function(k) {
          if (margin[k])
            o[k] = parseFloat(margin[k]);
        });
        return o;
      }
      function write_ws_xml_margins(margin) {
        default_margins(margin);
        return writextag("pageMargins", null, margin);
      }
      function parse_ws_xml_cols(columns, cols) {
        var seencol = false;
        for (var coli = 0; coli != cols.length; ++coli) {
          var coll = parsexmltag(cols[coli], true);
          if (coll.hidden)
            coll.hidden = parsexmlbool(coll.hidden);
          var colm = parseInt(coll.min, 10) - 1, colM = parseInt(coll.max, 10) - 1;
          if (coll.outlineLevel)
            coll.level = +coll.outlineLevel || 0;
          delete coll.min;
          delete coll.max;
          coll.width = +coll.width;
          if (!seencol && coll.width) {
            seencol = true;
            find_mdw_colw(coll.width);
          }
          process_col(coll);
          while (colm <= colM)
            columns[colm++] = dup(coll);
        }
      }
      function write_ws_xml_cols(ws, cols) {
        var o = ["<cols>"], col;
        for (var i2 = 0; i2 != cols.length; ++i2) {
          if (!(col = cols[i2]))
            continue;
          o[o.length] = writextag("col", null, col_obj_w(i2, col));
        }
        o[o.length] = "</cols>";
        return o.join("");
      }
      function parse_ws_xml_autofilter(data) {
        var o = { ref: (data.match(/ref="([^"]*)"/) || [])[1] };
        return o;
      }
      function write_ws_xml_autofilter(data, ws, wb, idx) {
        var ref = typeof data.ref == "string" ? data.ref : encode_range(data.ref);
        if (!wb.Workbook)
          wb.Workbook = { Sheets: [] };
        if (!wb.Workbook.Names)
          wb.Workbook.Names = [];
        var names = wb.Workbook.Names;
        var range = decode_range(ref);
        if (range.s.r == range.e.r) {
          range.e.r = decode_range(ws["!ref"]).e.r;
          ref = encode_range(range);
        }
        for (var i2 = 0; i2 < names.length; ++i2) {
          var name2 = names[i2];
          if (name2.Name != "_xlnm._FilterDatabase")
            continue;
          if (name2.Sheet != idx)
            continue;
          name2.Ref = "'" + wb.SheetNames[idx] + "'!" + ref;
          break;
        }
        if (i2 == names.length)
          names.push({ Name: "_xlnm._FilterDatabase", Sheet: idx, Ref: "'" + wb.SheetNames[idx] + "'!" + ref });
        return writextag("autoFilter", null, { ref });
      }
      var sviewregex = /<(?:\w:)?sheetView(?:[^>a-z][^>]*)?\/?>/;
      function parse_ws_xml_sheetviews(data, wb) {
        if (!wb.Views)
          wb.Views = [{}];
        (data.match(sviewregex) || []).forEach(function(r, i2) {
          var tag = parsexmltag(r);
          if (!wb.Views[i2])
            wb.Views[i2] = {};
          if (+tag.zoomScale)
            wb.Views[i2].zoom = +tag.zoomScale;
          if (parsexmlbool(tag.rightToLeft))
            wb.Views[i2].RTL = true;
        });
      }
      function write_ws_xml_sheetviews(ws, opts, idx, wb) {
        var sview = { workbookViewId: "0" };
        if ((((wb || {}).Workbook || {}).Views || [])[0])
          sview.rightToLeft = wb.Workbook.Views[0].RTL ? "1" : "0";
        return writextag("sheetViews", writextag("sheetView", null, sview), {});
      }
      function write_ws_xml_cell(cell, ref, ws, opts) {
        if (cell.v === void 0 && typeof cell.f !== "string" || cell.t === "z")
          return "";
        var vv = "";
        var oldt = cell.t, oldv = cell.v;
        if (cell.t !== "z")
          switch (cell.t) {
            case "b":
              vv = cell.v ? "1" : "0";
              break;
            case "n":
              vv = "" + cell.v;
              break;
            case "e":
              vv = BErr[cell.v];
              break;
            case "d":
              if (opts && opts.cellDates)
                vv = parseDate(cell.v, -1).toISOString();
              else {
                cell = dup(cell);
                cell.t = "n";
                vv = "" + (cell.v = datenum(parseDate(cell.v)));
              }
              if (typeof cell.z === "undefined")
                cell.z = SSF._table[14];
              break;
            default:
              vv = cell.v;
              break;
          }
        var v = writetag("v", escapexml(vv)), o = { r: ref };
        var os = get_cell_style(opts.cellXfs, cell, opts);
        if (os !== 0)
          o.s = os;
        switch (cell.t) {
          case "n":
            break;
          case "d":
            o.t = "d";
            break;
          case "b":
            o.t = "b";
            break;
          case "e":
            o.t = "e";
            break;
          case "z":
            break;
          default:
            if (cell.v == null) {
              delete cell.t;
              break;
            }
            if (cell.v.length > 32767)
              throw new Error("Text length must not exceed 32767 characters");
            if (opts && opts.bookSST) {
              v = writetag("v", "" + get_sst_id(opts.Strings, cell.v, opts.revStrings));
              o.t = "s";
              break;
            }
            o.t = "str";
            break;
        }
        if (cell.t != oldt) {
          cell.t = oldt;
          cell.v = oldv;
        }
        if (typeof cell.f == "string" && cell.f) {
          var ff = cell.F && cell.F.slice(0, ref.length) == ref ? { t: "array", ref: cell.F } : null;
          v = writextag("f", escapexml(cell.f), ff) + (cell.v != null ? v : "");
        }
        if (cell.l)
          ws["!links"].push([ref, cell.l]);
        if (cell.c)
          ws["!comments"].push([ref, cell.c]);
        return writextag("c", v, o);
      }
      var parse_ws_xml_data = function() {
        var cellregex = /<(?:\w+:)?c[ \/>]/, rowregex = /<\/(?:\w+:)?row>/;
        var rregex = /r=["']([^"']*)["']/, isregex = /<(?:\w+:)?is>([\S\s]*?)<\/(?:\w+:)?is>/;
        var refregex = /ref=["']([^"']*)["']/;
        var match_v = matchtag("v"), match_f = matchtag("f");
        return function parse_ws_xml_data2(sdata, s, opts, guess, themes, styles) {
          var ri = 0, x = "", cells = [], cref = [], idx = 0, i2 = 0, cc = 0, d = "", p;
          var tag, tagr = 0, tagc = 0;
          var sstr, ftag;
          var fmtid = 0, fillid = 0;
          var do_format = Array.isArray(styles.CellXf), cf;
          var arrayf = [];
          var sharedf = [];
          var dense = Array.isArray(s);
          var rows = [], rowobj = {}, rowrite = false;
          var sheetStubs = !!opts.sheetStubs;
          for (var marr = sdata.split(rowregex), mt = 0, marrlen = marr.length; mt != marrlen; ++mt) {
            x = marr[mt].trim();
            var xlen = x.length;
            if (xlen === 0)
              continue;
            var rstarti = 0;
            outa:
              for (ri = 0; ri < xlen; ++ri)
                switch (x[ri]) {
                  case ">":
                    if (x[ri - 1] != "/") {
                      ++ri;
                      break outa;
                    }
                    if (opts && opts.cellStyles) {
                      tag = parsexmltag(x.slice(rstarti, ri), true);
                      tagr = tag.r != null ? parseInt(tag.r, 10) : tagr + 1;
                      tagc = -1;
                      if (opts.sheetRows && opts.sheetRows < tagr)
                        continue;
                      rowobj = {};
                      rowrite = false;
                      if (tag.ht) {
                        rowrite = true;
                        rowobj.hpt = parseFloat(tag.ht);
                        rowobj.hpx = pt2px(rowobj.hpt);
                      }
                      if (tag.hidden == "1") {
                        rowrite = true;
                        rowobj.hidden = true;
                      }
                      if (tag.outlineLevel != null) {
                        rowrite = true;
                        rowobj.level = +tag.outlineLevel;
                      }
                      if (rowrite)
                        rows[tagr - 1] = rowobj;
                    }
                    break;
                  case "<":
                    rstarti = ri;
                    break;
                }
            if (rstarti >= ri)
              break;
            tag = parsexmltag(x.slice(rstarti, ri), true);
            tagr = tag.r != null ? parseInt(tag.r, 10) : tagr + 1;
            tagc = -1;
            if (opts.sheetRows && opts.sheetRows < tagr)
              continue;
            if (guess.s.r > tagr - 1)
              guess.s.r = tagr - 1;
            if (guess.e.r < tagr - 1)
              guess.e.r = tagr - 1;
            if (opts && opts.cellStyles) {
              rowobj = {};
              rowrite = false;
              if (tag.ht) {
                rowrite = true;
                rowobj.hpt = parseFloat(tag.ht);
                rowobj.hpx = pt2px(rowobj.hpt);
              }
              if (tag.hidden == "1") {
                rowrite = true;
                rowobj.hidden = true;
              }
              if (tag.outlineLevel != null) {
                rowrite = true;
                rowobj.level = +tag.outlineLevel;
              }
              if (rowrite)
                rows[tagr - 1] = rowobj;
            }
            cells = x.slice(ri).split(cellregex);
            for (var rslice = 0; rslice != cells.length; ++rslice)
              if (cells[rslice].trim().charAt(0) != "<")
                break;
            cells = cells.slice(rslice);
            for (ri = 0; ri != cells.length; ++ri) {
              x = cells[ri].trim();
              if (x.length === 0)
                continue;
              cref = x.match(rregex);
              idx = ri;
              i2 = 0;
              cc = 0;
              x = "<c " + (x.slice(0, 1) == "<" ? ">" : "") + x;
              if (cref != null && cref.length === 2) {
                idx = 0;
                d = cref[1];
                for (i2 = 0; i2 != d.length; ++i2) {
                  if ((cc = d.charCodeAt(i2) - 64) < 1 || cc > 26)
                    break;
                  idx = 26 * idx + cc;
                }
                --idx;
                tagc = idx;
              } else
                ++tagc;
              for (i2 = 0; i2 != x.length; ++i2)
                if (x.charCodeAt(i2) === 62)
                  break;
              ++i2;
              tag = parsexmltag(x.slice(0, i2), true);
              if (!tag.r)
                tag.r = encode_cell({ r: tagr - 1, c: tagc });
              d = x.slice(i2);
              p = { t: "" };
              if ((cref = d.match(match_v)) != null && cref[1] !== "")
                p.v = unescapexml(cref[1]);
              if (opts.cellFormula) {
                if ((cref = d.match(match_f)) != null && cref[1] !== "") {
                  p.f = unescapexml(utf8read(cref[1])).replace(/\r\n/g, "\n");
                  if (!opts.xlfn)
                    p.f = _xlfn(p.f);
                  if (cref[0].indexOf('t="array"') > -1) {
                    p.F = (d.match(refregex) || [])[1];
                    if (p.F.indexOf(":") > -1)
                      arrayf.push([safe_decode_range(p.F), p.F]);
                  } else if (cref[0].indexOf('t="shared"') > -1) {
                    ftag = parsexmltag(cref[0]);
                    var ___f = unescapexml(utf8read(cref[1]));
                    if (!opts.xlfn)
                      ___f = _xlfn(___f);
                    sharedf[parseInt(ftag.si, 10)] = [ftag, ___f, tag.r];
                  }
                } else if (cref = d.match(/<f[^>]*\/>/)) {
                  ftag = parsexmltag(cref[0]);
                  if (sharedf[ftag.si])
                    p.f = shift_formula_xlsx(sharedf[ftag.si][1], sharedf[ftag.si][2], tag.r);
                }
                var _tag = decode_cell(tag.r);
                for (i2 = 0; i2 < arrayf.length; ++i2)
                  if (_tag.r >= arrayf[i2][0].s.r && _tag.r <= arrayf[i2][0].e.r) {
                    if (_tag.c >= arrayf[i2][0].s.c && _tag.c <= arrayf[i2][0].e.c)
                      p.F = arrayf[i2][1];
                  }
              }
              if (tag.t == null && p.v === void 0) {
                if (p.f || p.F) {
                  p.v = 0;
                  p.t = "n";
                } else if (!sheetStubs)
                  continue;
                else
                  p.t = "z";
              } else
                p.t = tag.t || "n";
              if (guess.s.c > tagc)
                guess.s.c = tagc;
              if (guess.e.c < tagc)
                guess.e.c = tagc;
              switch (p.t) {
                case "n":
                  if (p.v == "" || p.v == null) {
                    if (!sheetStubs)
                      continue;
                    p.t = "z";
                  } else
                    p.v = parseFloat(p.v);
                  break;
                case "s":
                  if (typeof p.v == "undefined") {
                    if (!sheetStubs)
                      continue;
                    p.t = "z";
                  } else {
                    sstr = strs[parseInt(p.v, 10)];
                    p.v = sstr.t;
                    p.r = sstr.r;
                    if (opts.cellHTML)
                      p.h = sstr.h;
                  }
                  break;
                case "str":
                  p.t = "s";
                  p.v = p.v != null ? utf8read(p.v) : "";
                  if (opts.cellHTML)
                    p.h = escapehtml(p.v);
                  break;
                case "inlineStr":
                  cref = d.match(isregex);
                  p.t = "s";
                  if (cref != null && (sstr = parse_si(cref[1]))) {
                    p.v = sstr.t;
                    if (opts.cellHTML)
                      p.h = sstr.h;
                  } else
                    p.v = "";
                  break;
                case "b":
                  p.v = parsexmlbool(p.v);
                  break;
                case "d":
                  if (opts.cellDates)
                    p.v = parseDate(p.v, 1);
                  else {
                    p.v = datenum(parseDate(p.v, 1));
                    p.t = "n";
                  }
                  break;
                case "e":
                  if (!opts || opts.cellText !== false)
                    p.w = p.v;
                  p.v = RBErr[p.v];
                  break;
              }
              fmtid = fillid = 0;
              cf = null;
              if (do_format && tag.s !== void 0) {
                cf = styles.CellXf[tag.s];
                if (cf != null) {
                  if (cf.numFmtId != null)
                    fmtid = cf.numFmtId;
                  if (opts.cellStyles) {
                    if (cf.fillId != null)
                      fillid = cf.fillId;
                  }
                }
              }
              safe_format(p, fmtid, fillid, opts, themes, styles);
              if (opts.cellDates && do_format && p.t == "n" && SSF.is_date(SSF._table[fmtid])) {
                p.t = "d";
                p.v = numdate(p.v);
              }
              if (dense) {
                var _r = decode_cell(tag.r);
                if (!s[_r.r])
                  s[_r.r] = [];
                s[_r.r][_r.c] = p;
              } else
                s[tag.r] = p;
            }
          }
          if (rows.length > 0)
            s["!rows"] = rows;
        };
      }();
      function write_ws_xml_data(ws, opts, idx, wb) {
        var o = [], r = [], range = safe_decode_range(ws["!ref"]), cell = "", ref, rr = "", cols = [], R = 0, C = 0, rows = ws["!rows"];
        var dense = Array.isArray(ws);
        var params = { r: rr }, row, height = -1;
        for (C = range.s.c; C <= range.e.c; ++C)
          cols[C] = encode_col(C);
        for (R = range.s.r; R <= range.e.r; ++R) {
          r = [];
          rr = encode_row(R);
          for (C = range.s.c; C <= range.e.c; ++C) {
            ref = cols[C] + rr;
            var _cell = dense ? (ws[R] || [])[C] : ws[ref];
            if (_cell === void 0)
              continue;
            if ((cell = write_ws_xml_cell(_cell, ref, ws, opts, idx, wb)) != null)
              r.push(cell);
          }
          if (r.length > 0 || rows && rows[R]) {
            params = { r: rr };
            if (rows && rows[R]) {
              row = rows[R];
              if (row.hidden)
                params.hidden = 1;
              height = -1;
              if (row.hpx)
                height = px2pt(row.hpx);
              else if (row.hpt)
                height = row.hpt;
              if (height > -1) {
                params.ht = height;
                params.customHeight = 1;
              }
              if (row.level) {
                params.outlineLevel = row.level;
              }
            }
            o[o.length] = writextag("row", r.join(""), params);
          }
        }
        if (rows)
          for (; R < rows.length; ++R) {
            if (rows && rows[R]) {
              params = { r: R + 1 };
              row = rows[R];
              if (row.hidden)
                params.hidden = 1;
              height = -1;
              if (row.hpx)
                height = px2pt(row.hpx);
              else if (row.hpt)
                height = row.hpt;
              if (height > -1) {
                params.ht = height;
                params.customHeight = 1;
              }
              if (row.level) {
                params.outlineLevel = row.level;
              }
              o[o.length] = writextag("row", "", params);
            }
          }
        return o.join("");
      }
      var WS_XML_ROOT = writextag("worksheet", null, {
        "xmlns": XMLNS.main[0],
        "xmlns:r": XMLNS.r
      });
      function write_ws_xml(idx, opts, wb, rels) {
        var o = [XML_HEADER, WS_XML_ROOT];
        var s = wb.SheetNames[idx], sidx = 0, rdata = "";
        var ws = wb.Sheets[s];
        if (ws == null)
          ws = {};
        var ref = ws["!ref"] || "A1";
        var range = safe_decode_range(ref);
        if (range.e.c > 16383 || range.e.r > 1048575) {
          if (opts.WTF)
            throw new Error("Range " + ref + " exceeds format limit A1:XFD1048576");
          range.e.c = Math.min(range.e.c, 16383);
          range.e.r = Math.min(range.e.c, 1048575);
          ref = encode_range(range);
        }
        if (!rels)
          rels = {};
        ws["!comments"] = [];
        var _drawing = [];
        write_ws_xml_sheetpr(ws, wb, idx, opts, o);
        o[o.length] = writextag("dimension", null, { "ref": ref });
        o[o.length] = write_ws_xml_sheetviews(ws, opts, idx, wb);
        if (opts.sheetFormat)
          o[o.length] = writextag("sheetFormatPr", null, {
            defaultRowHeight: opts.sheetFormat.defaultRowHeight || "16",
            baseColWidth: opts.sheetFormat.baseColWidth || "10",
            outlineLevelRow: opts.sheetFormat.outlineLevelRow || "7"
          });
        if (ws["!cols"] != null && ws["!cols"].length > 0)
          o[o.length] = write_ws_xml_cols(ws, ws["!cols"]);
        o[sidx = o.length] = "<sheetData/>";
        ws["!links"] = [];
        if (ws["!ref"] != null) {
          rdata = write_ws_xml_data(ws, opts, idx, wb, rels);
          if (rdata.length > 0)
            o[o.length] = rdata;
        }
        if (o.length > sidx + 1) {
          o[o.length] = "</sheetData>";
          o[sidx] = o[sidx].replace("/>", ">");
        }
        if (ws["!protect"] != null)
          o[o.length] = write_ws_xml_protection(ws["!protect"]);
        if (ws["!autofilter"] != null)
          o[o.length] = write_ws_xml_autofilter(ws["!autofilter"], ws, wb, idx);
        if (ws["!merges"] != null && ws["!merges"].length > 0)
          o[o.length] = write_ws_xml_merges(ws["!merges"]);
        var relc = -1, rel, rId = -1;
        if (ws["!links"].length > 0) {
          o[o.length] = "<hyperlinks>";
          ws["!links"].forEach(function(l) {
            if (!l[1].Target)
              return;
            rel = { "ref": l[0] };
            if (l[1].Target.charAt(0) != "#") {
              rId = add_rels(rels, -1, escapexml(l[1].Target).replace(/#.*$/, ""), RELS.HLINK);
              rel["r:id"] = "rId" + rId;
            }
            if ((relc = l[1].Target.indexOf("#")) > -1)
              rel.location = escapexml(l[1].Target.slice(relc + 1));
            if (l[1].Tooltip)
              rel.tooltip = escapexml(l[1].Tooltip);
            o[o.length] = writextag("hyperlink", null, rel);
          });
          o[o.length] = "</hyperlinks>";
        }
        delete ws["!links"];
        if (ws["!margins"] != null)
          o[o.length] = write_ws_xml_margins(ws["!margins"]);
        if (!opts || opts.ignoreEC || opts.ignoreEC == void 0)
          o[o.length] = writetag("ignoredErrors", writextag("ignoredError", null, { numberStoredAsText: 1, sqref: ref }));
        if (_drawing.length > 0) {
          rId = add_rels(rels, -1, "../drawings/drawing" + (idx + 1) + ".xml", RELS.DRAW);
          o[o.length] = writextag("drawing", null, { "r:id": "rId" + rId });
          ws["!drawing"] = _drawing;
        }
        if (ws["!comments"].length > 0) {
          rId = add_rels(rels, -1, "../drawings/vmlDrawing" + (idx + 1) + ".vml", RELS.VML);
          o[o.length] = writextag("legacyDrawing", null, { "r:id": "rId" + rId });
          ws["!legacy"] = rId;
        }
        if (o.length > 1) {
          o[o.length] = "</worksheet>";
          o[1] = o[1].replace("/>", ">");
        }
        return o.join("");
      }
      function parse_BrtRowHdr(data, length) {
        var z = {};
        var tgt = data.l + length;
        z.r = data.read_shift(4);
        data.l += 4;
        var miyRw = data.read_shift(2);
        data.l += 1;
        var flags = data.read_shift(1);
        data.l = tgt;
        if (flags & 7)
          z.level = flags & 7;
        if (flags & 16)
          z.hidden = true;
        if (flags & 32)
          z.hpt = miyRw / 20;
        return z;
      }
      function write_BrtRowHdr(R, range, ws) {
        var o = new_buf(17 + 8 * 16);
        var row = (ws["!rows"] || [])[R] || {};
        o.write_shift(4, R);
        o.write_shift(4, 0);
        var miyRw = 320;
        if (row.hpx)
          miyRw = px2pt(row.hpx) * 20;
        else if (row.hpt)
          miyRw = row.hpt * 20;
        o.write_shift(2, miyRw);
        o.write_shift(1, 0);
        var flags = 0;
        if (row.level)
          flags |= row.level;
        if (row.hidden)
          flags |= 16;
        if (row.hpx || row.hpt)
          flags |= 32;
        o.write_shift(1, flags);
        o.write_shift(1, 0);
        var ncolspan = 0, lcs = o.l;
        o.l += 4;
        var caddr = { r: R, c: 0 };
        for (var i2 = 0; i2 < 16; ++i2) {
          if (range.s.c > i2 + 1 << 10 || range.e.c < i2 << 10)
            continue;
          var first = -1, last = -1;
          for (var j = i2 << 10; j < i2 + 1 << 10; ++j) {
            caddr.c = j;
            var cell = Array.isArray(ws) ? (ws[caddr.r] || [])[caddr.c] : ws[encode_cell(caddr)];
            if (cell) {
              if (first < 0)
                first = j;
              last = j;
            }
          }
          if (first < 0)
            continue;
          ++ncolspan;
          o.write_shift(4, first);
          o.write_shift(4, last);
        }
        var l = o.l;
        o.l = lcs;
        o.write_shift(4, ncolspan);
        o.l = l;
        return o.length > o.l ? o.slice(0, o.l) : o;
      }
      function write_row_header(ba, ws, range, R) {
        var o = write_BrtRowHdr(R, range, ws);
        if (o.length > 17 || (ws["!rows"] || [])[R])
          write_record(ba, "BrtRowHdr", o);
      }
      var parse_BrtWsDim = parse_UncheckedRfX;
      var write_BrtWsDim = write_UncheckedRfX;
      function parse_BrtWsFmtInfo() {
      }
      function parse_BrtWsProp(data, length) {
        var z = {};
        var f = data[data.l];
        ++data.l;
        z.above = !(f & 64);
        z.left = !(f & 128);
        data.l += 18;
        z.name = parse_XLSBCodeName(data, length - 19);
        return z;
      }
      function write_BrtWsProp(str, outl, o) {
        if (o == null)
          o = new_buf(84 + 4 * str.length);
        var f = 192;
        if (outl) {
          if (outl.above)
            f &= ~64;
          if (outl.left)
            f &= ~128;
        }
        o.write_shift(1, f);
        for (var i2 = 1; i2 < 3; ++i2)
          o.write_shift(1, 0);
        write_BrtColor({ auto: 1 }, o);
        o.write_shift(-4, -1);
        o.write_shift(-4, -1);
        write_XLSBCodeName(str, o);
        return o.slice(0, o.l);
      }
      function parse_BrtCellBlank(data) {
        var cell = parse_XLSBCell(data);
        return [cell];
      }
      function write_BrtCellBlank(cell, ncell, o) {
        if (o == null)
          o = new_buf(8);
        return write_XLSBCell(ncell, o);
      }
      function parse_BrtShortBlank(data) {
        var cell = parse_XLSBShortCell(data);
        return [cell];
      }
      function write_BrtShortBlank(cell, ncell, o) {
        if (o == null)
          o = new_buf(4);
        return write_XLSBShortCell(ncell, o);
      }
      function parse_BrtCellBool(data) {
        var cell = parse_XLSBCell(data);
        var fBool = data.read_shift(1);
        return [cell, fBool, "b"];
      }
      function write_BrtCellBool(cell, ncell, o) {
        if (o == null)
          o = new_buf(9);
        write_XLSBCell(ncell, o);
        o.write_shift(1, cell.v ? 1 : 0);
        return o;
      }
      function parse_BrtShortBool(data) {
        var cell = parse_XLSBShortCell(data);
        var fBool = data.read_shift(1);
        return [cell, fBool, "b"];
      }
      function write_BrtShortBool(cell, ncell, o) {
        if (o == null)
          o = new_buf(5);
        write_XLSBShortCell(ncell, o);
        o.write_shift(1, cell.v ? 1 : 0);
        return o;
      }
      function parse_BrtCellError(data) {
        var cell = parse_XLSBCell(data);
        var bError = data.read_shift(1);
        return [cell, bError, "e"];
      }
      function write_BrtCellError(cell, ncell, o) {
        if (o == null)
          o = new_buf(9);
        write_XLSBCell(ncell, o);
        o.write_shift(1, cell.v);
        return o;
      }
      function parse_BrtShortError(data) {
        var cell = parse_XLSBShortCell(data);
        var bError = data.read_shift(1);
        return [cell, bError, "e"];
      }
      function write_BrtShortError(cell, ncell, o) {
        if (o == null)
          o = new_buf(8);
        write_XLSBShortCell(ncell, o);
        o.write_shift(1, cell.v);
        o.write_shift(2, 0);
        o.write_shift(1, 0);
        return o;
      }
      function parse_BrtCellIsst(data) {
        var cell = parse_XLSBCell(data);
        var isst = data.read_shift(4);
        return [cell, isst, "s"];
      }
      function write_BrtCellIsst(cell, ncell, o) {
        if (o == null)
          o = new_buf(12);
        write_XLSBCell(ncell, o);
        o.write_shift(4, ncell.v);
        return o;
      }
      function parse_BrtShortIsst(data) {
        var cell = parse_XLSBShortCell(data);
        var isst = data.read_shift(4);
        return [cell, isst, "s"];
      }
      function write_BrtShortIsst(cell, ncell, o) {
        if (o == null)
          o = new_buf(8);
        write_XLSBShortCell(ncell, o);
        o.write_shift(4, ncell.v);
        return o;
      }
      function parse_BrtCellReal(data) {
        var cell = parse_XLSBCell(data);
        var value = parse_Xnum(data);
        return [cell, value, "n"];
      }
      function write_BrtCellReal(cell, ncell, o) {
        if (o == null)
          o = new_buf(16);
        write_XLSBCell(ncell, o);
        write_Xnum(cell.v, o);
        return o;
      }
      function parse_BrtShortReal(data) {
        var cell = parse_XLSBShortCell(data);
        var value = parse_Xnum(data);
        return [cell, value, "n"];
      }
      function write_BrtShortReal(cell, ncell, o) {
        if (o == null)
          o = new_buf(12);
        write_XLSBShortCell(ncell, o);
        write_Xnum(cell.v, o);
        return o;
      }
      function parse_BrtCellRk(data) {
        var cell = parse_XLSBCell(data);
        var value = parse_RkNumber(data);
        return [cell, value, "n"];
      }
      function write_BrtCellRk(cell, ncell, o) {
        if (o == null)
          o = new_buf(12);
        write_XLSBCell(ncell, o);
        write_RkNumber(cell.v, o);
        return o;
      }
      function parse_BrtShortRk(data) {
        var cell = parse_XLSBShortCell(data);
        var value = parse_RkNumber(data);
        return [cell, value, "n"];
      }
      function write_BrtShortRk(cell, ncell, o) {
        if (o == null)
          o = new_buf(8);
        write_XLSBShortCell(ncell, o);
        write_RkNumber(cell.v, o);
        return o;
      }
      function parse_BrtCellSt(data) {
        var cell = parse_XLSBCell(data);
        var value = parse_XLWideString(data);
        return [cell, value, "str"];
      }
      function write_BrtCellSt(cell, ncell, o) {
        if (o == null)
          o = new_buf(12 + 4 * cell.v.length);
        write_XLSBCell(ncell, o);
        write_XLWideString(cell.v, o);
        return o.length > o.l ? o.slice(0, o.l) : o;
      }
      function parse_BrtShortSt(data) {
        var cell = parse_XLSBShortCell(data);
        var value = parse_XLWideString(data);
        return [cell, value, "str"];
      }
      function write_BrtShortSt(cell, ncell, o) {
        if (o == null)
          o = new_buf(8 + 4 * cell.v.length);
        write_XLSBShortCell(ncell, o);
        write_XLWideString(cell.v, o);
        return o.length > o.l ? o.slice(0, o.l) : o;
      }
      function parse_BrtFmlaBool(data, length, opts) {
        var end = data.l + length;
        var cell = parse_XLSBCell(data);
        cell.r = opts["!row"];
        var value = data.read_shift(1);
        var o = [cell, value, "b"];
        if (opts.cellFormula) {
          data.l += 2;
          var formula = parse_XLSBCellParsedFormula(data, end - data.l, opts);
          o[3] = stringify_formula(formula, null, cell, opts.supbooks, opts);
        } else
          data.l = end;
        return o;
      }
      function parse_BrtFmlaError(data, length, opts) {
        var end = data.l + length;
        var cell = parse_XLSBCell(data);
        cell.r = opts["!row"];
        var value = data.read_shift(1);
        var o = [cell, value, "e"];
        if (opts.cellFormula) {
          data.l += 2;
          var formula = parse_XLSBCellParsedFormula(data, end - data.l, opts);
          o[3] = stringify_formula(formula, null, cell, opts.supbooks, opts);
        } else
          data.l = end;
        return o;
      }
      function parse_BrtFmlaNum(data, length, opts) {
        var end = data.l + length;
        var cell = parse_XLSBCell(data);
        cell.r = opts["!row"];
        var value = parse_Xnum(data);
        var o = [cell, value, "n"];
        if (opts.cellFormula) {
          data.l += 2;
          var formula = parse_XLSBCellParsedFormula(data, end - data.l, opts);
          o[3] = stringify_formula(formula, null, cell, opts.supbooks, opts);
        } else
          data.l = end;
        return o;
      }
      function parse_BrtFmlaString(data, length, opts) {
        var end = data.l + length;
        var cell = parse_XLSBCell(data);
        cell.r = opts["!row"];
        var value = parse_XLWideString(data);
        var o = [cell, value, "str"];
        if (opts.cellFormula) {
          data.l += 2;
          var formula = parse_XLSBCellParsedFormula(data, end - data.l, opts);
          o[3] = stringify_formula(formula, null, cell, opts.supbooks, opts);
        } else
          data.l = end;
        return o;
      }
      var parse_BrtMergeCell = parse_UncheckedRfX;
      var write_BrtMergeCell = write_UncheckedRfX;
      function write_BrtBeginMergeCells(cnt, o) {
        if (o == null)
          o = new_buf(4);
        o.write_shift(4, cnt);
        return o;
      }
      function parse_BrtHLink(data, length) {
        var end = data.l + length;
        var rfx = parse_UncheckedRfX(data, 16);
        var relId = parse_XLNullableWideString(data);
        var loc = parse_XLWideString(data);
        var tooltip = parse_XLWideString(data);
        var display = parse_XLWideString(data);
        data.l = end;
        var o = { rfx, relId, loc, display };
        if (tooltip)
          o.Tooltip = tooltip;
        return o;
      }
      function write_BrtHLink(l, rId) {
        var o = new_buf(50 + 4 * (l[1].Target.length + (l[1].Tooltip || "").length));
        write_UncheckedRfX({ s: decode_cell(l[0]), e: decode_cell(l[0]) }, o);
        write_RelID("rId" + rId, o);
        var locidx = l[1].Target.indexOf("#");
        var loc = locidx == -1 ? "" : l[1].Target.slice(locidx + 1);
        write_XLWideString(loc || "", o);
        write_XLWideString(l[1].Tooltip || "", o);
        write_XLWideString("", o);
        return o.slice(0, o.l);
      }
      function parse_BrtPane() {
      }
      function parse_BrtArrFmla(data, length, opts) {
        var end = data.l + length;
        var rfx = parse_RfX(data, 16);
        var fAlwaysCalc = data.read_shift(1);
        var o = [rfx];
        o[2] = fAlwaysCalc;
        if (opts.cellFormula) {
          var formula = parse_XLSBArrayParsedFormula(data, end - data.l, opts);
          o[1] = formula;
        } else
          data.l = end;
        return o;
      }
      function parse_BrtShrFmla(data, length, opts) {
        var end = data.l + length;
        var rfx = parse_UncheckedRfX(data, 16);
        var o = [rfx];
        if (opts.cellFormula) {
          var formula = parse_XLSBSharedParsedFormula(data, end - data.l, opts);
          o[1] = formula;
          data.l = end;
        } else
          data.l = end;
        return o;
      }
      function write_BrtColInfo(C, col, o) {
        if (o == null)
          o = new_buf(18);
        var p = col_obj_w(C, col);
        o.write_shift(-4, C);
        o.write_shift(-4, C);
        o.write_shift(4, (p.width || 10) * 256);
        o.write_shift(4, 0);
        var flags = 0;
        if (col.hidden)
          flags |= 1;
        if (typeof p.width == "number")
          flags |= 2;
        if (col.level)
          flags |= col.level << 8;
        o.write_shift(2, flags);
        return o;
      }
      var BrtMarginKeys = ["left", "right", "top", "bottom", "header", "footer"];
      function parse_BrtMargins(data) {
        var margins = {};
        BrtMarginKeys.forEach(function(k) {
          margins[k] = parse_Xnum(data, 8);
        });
        return margins;
      }
      function write_BrtMargins(margins, o) {
        if (o == null)
          o = new_buf(6 * 8);
        default_margins(margins);
        BrtMarginKeys.forEach(function(k) {
          write_Xnum(margins[k], o);
        });
        return o;
      }
      function parse_BrtBeginWsView(data) {
        var f = data.read_shift(2);
        data.l += 28;
        return { RTL: f & 32 };
      }
      function write_BrtBeginWsView(ws, Workbook, o) {
        if (o == null)
          o = new_buf(30);
        var f = 924;
        if ((((Workbook || {}).Views || [])[0] || {}).RTL)
          f |= 32;
        o.write_shift(2, f);
        o.write_shift(4, 0);
        o.write_shift(4, 0);
        o.write_shift(4, 0);
        o.write_shift(1, 0);
        o.write_shift(1, 0);
        o.write_shift(2, 0);
        o.write_shift(2, 100);
        o.write_shift(2, 0);
        o.write_shift(2, 0);
        o.write_shift(2, 0);
        o.write_shift(4, 0);
        return o;
      }
      function write_BrtCellIgnoreEC(ref) {
        var o = new_buf(24);
        o.write_shift(4, 4);
        o.write_shift(4, 1);
        write_UncheckedRfX(ref, o);
        return o;
      }
      function write_BrtSheetProtection(sp, o) {
        if (o == null)
          o = new_buf(16 * 4 + 2);
        o.write_shift(2, sp.password ? crypto_CreatePasswordVerifier_Method1(sp.password) : 0);
        o.write_shift(4, 1);
        [
          ["objects", false],
          ["scenarios", false],
          ["formatCells", true],
          ["formatColumns", true],
          ["formatRows", true],
          ["insertColumns", true],
          ["insertRows", true],
          ["insertHyperlinks", true],
          ["deleteColumns", true],
          ["deleteRows", true],
          ["selectLockedCells", false],
          ["sort", true],
          ["autoFilter", true],
          ["pivotTables", true],
          ["selectUnlockedCells", false]
        ].forEach(function(n) {
          if (n[1])
            o.write_shift(4, sp[n[0]] != null && !sp[n[0]] ? 1 : 0);
          else
            o.write_shift(4, sp[n[0]] != null && sp[n[0]] ? 0 : 1);
        });
        return o;
      }
      function parse_BrtDVal() {
      }
      function parse_BrtDVal14() {
      }
      function parse_ws_bin(data, _opts, idx, rels, wb, themes, styles) {
        if (!data)
          return data;
        var opts = _opts || {};
        if (!rels)
          rels = { "!id": {} };
        if (DENSE != null && opts.dense == null)
          opts.dense = DENSE;
        var s = opts.dense ? [] : {};
        var ref;
        var refguess = { s: { r: 2e6, c: 2e6 }, e: { r: 0, c: 0 } };
        var state = [];
        var pass = false, end = false;
        var row, p, cf, R, C, addr, sstr, rr, cell;
        var merges = [];
        opts.biff = 12;
        opts["!row"] = 0;
        var ai = 0, af = false;
        var arrayf = [];
        var sharedf = {};
        var supbooks = opts.supbooks || wb.supbooks || [[]];
        supbooks.sharedf = sharedf;
        supbooks.arrayf = arrayf;
        supbooks.SheetNames = wb.SheetNames || wb.Sheets.map(function(x) {
          return x.name;
        });
        if (!opts.supbooks) {
          opts.supbooks = supbooks;
          if (wb.Names)
            for (var i2 = 0; i2 < wb.Names.length; ++i2)
              supbooks[0][i2 + 1] = wb.Names[i2];
        }
        var colinfo = [], rowinfo = [];
        var seencol = false;
        XLSBRecordEnum[16] = { n: "BrtShortReal", f: parse_BrtShortReal };
        recordhopper(data, function ws_parse(val, R_n, RT) {
          if (end)
            return;
          switch (RT) {
            case 148:
              ref = val;
              break;
            case 0:
              row = val;
              if (opts.sheetRows && opts.sheetRows <= row.r)
                end = true;
              rr = encode_row(R = row.r);
              opts["!row"] = row.r;
              if (val.hidden || val.hpt || val.level != null) {
                if (val.hpt)
                  val.hpx = pt2px(val.hpt);
                rowinfo[val.r] = val;
              }
              break;
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 13:
            case 14:
            case 15:
            case 16:
            case 17:
            case 18:
              p = { t: val[2] };
              switch (val[2]) {
                case "n":
                  p.v = val[1];
                  break;
                case "s":
                  sstr = strs[val[1]];
                  p.v = sstr.t;
                  p.r = sstr.r;
                  break;
                case "b":
                  p.v = val[1] ? true : false;
                  break;
                case "e":
                  p.v = val[1];
                  if (opts.cellText !== false)
                    p.w = BErr[p.v];
                  break;
                case "str":
                  p.t = "s";
                  p.v = val[1];
                  break;
              }
              if (cf = styles.CellXf[val[0].iStyleRef])
                safe_format(p, cf.numFmtId, null, opts, themes, styles);
              C = val[0].c == -1 ? C + 1 : val[0].c;
              if (opts.dense) {
                if (!s[R])
                  s[R] = [];
                s[R][C] = p;
              } else
                s[encode_col(C) + rr] = p;
              if (opts.cellFormula) {
                af = false;
                for (ai = 0; ai < arrayf.length; ++ai) {
                  var aii = arrayf[ai];
                  if (row.r >= aii[0].s.r && row.r <= aii[0].e.r) {
                    if (C >= aii[0].s.c && C <= aii[0].e.c) {
                      p.F = encode_range(aii[0]);
                      af = true;
                    }
                  }
                }
                if (!af && val.length > 3)
                  p.f = val[3];
              }
              if (refguess.s.r > row.r)
                refguess.s.r = row.r;
              if (refguess.s.c > C)
                refguess.s.c = C;
              if (refguess.e.r < row.r)
                refguess.e.r = row.r;
              if (refguess.e.c < C)
                refguess.e.c = C;
              if (opts.cellDates && cf && p.t == "n" && SSF.is_date(SSF._table[cf.numFmtId])) {
                var _d = SSF.parse_date_code(p.v);
                if (_d) {
                  p.t = "d";
                  p.v = new Date(_d.y, _d.m - 1, _d.d, _d.H, _d.M, _d.S, _d.u);
                }
              }
              break;
            case 1:
            case 12:
              if (!opts.sheetStubs || pass)
                break;
              p = { t: "z", v: void 0 };
              C = val[0].c == -1 ? C + 1 : val[0].c;
              if (opts.dense) {
                if (!s[R])
                  s[R] = [];
                s[R][C] = p;
              } else
                s[encode_col(C) + rr] = p;
              if (refguess.s.r > row.r)
                refguess.s.r = row.r;
              if (refguess.s.c > C)
                refguess.s.c = C;
              if (refguess.e.r < row.r)
                refguess.e.r = row.r;
              if (refguess.e.c < C)
                refguess.e.c = C;
              break;
            case 176:
              merges.push(val);
              break;
            case 494:
              var rel = rels["!id"][val.relId];
              if (rel) {
                val.Target = rel.Target;
                if (val.loc)
                  val.Target += "#" + val.loc;
                val.Rel = rel;
              } else if (val.relId == "") {
                val.Target = "#" + val.loc;
              }
              for (R = val.rfx.s.r; R <= val.rfx.e.r; ++R)
                for (C = val.rfx.s.c; C <= val.rfx.e.c; ++C) {
                  if (opts.dense) {
                    if (!s[R])
                      s[R] = [];
                    if (!s[R][C])
                      s[R][C] = { t: "z", v: void 0 };
                    s[R][C].l = val;
                  } else {
                    addr = encode_cell({ c: C, r: R });
                    if (!s[addr])
                      s[addr] = { t: "z", v: void 0 };
                    s[addr].l = val;
                  }
                }
              break;
            case 426:
              if (!opts.cellFormula)
                break;
              arrayf.push(val);
              cell = opts.dense ? s[R][C] : s[encode_col(C) + rr];
              cell.f = stringify_formula(val[1], refguess, { r: row.r, c: C }, supbooks, opts);
              cell.F = encode_range(val[0]);
              break;
            case 427:
              if (!opts.cellFormula)
                break;
              sharedf[encode_cell(val[0].s)] = val[1];
              cell = opts.dense ? s[R][C] : s[encode_col(C) + rr];
              cell.f = stringify_formula(val[1], refguess, { r: row.r, c: C }, supbooks, opts);
              break;
            case 60:
              if (!opts.cellStyles)
                break;
              while (val.e >= val.s) {
                colinfo[val.e--] = { width: val.w / 256, hidden: !!(val.flags & 1), level: val.level };
                if (!seencol) {
                  seencol = true;
                  find_mdw_colw(val.w / 256);
                }
                process_col(colinfo[val.e + 1]);
              }
              break;
            case 161:
              s["!autofilter"] = { ref: encode_range(val) };
              break;
            case 476:
              s["!margins"] = val;
              break;
            case 147:
              if (!wb.Sheets[idx])
                wb.Sheets[idx] = {};
              if (val.name)
                wb.Sheets[idx].CodeName = val.name;
              if (val.above || val.left)
                s["!outline"] = { above: val.above, left: val.left };
              break;
            case 137:
              if (!wb.Views)
                wb.Views = [{}];
              if (!wb.Views[0])
                wb.Views[0] = {};
              if (val.RTL)
                wb.Views[0].RTL = true;
              break;
            case 485:
              break;
            case 64:
            case 1053:
              break;
            case 151:
              break;
            case 152:
            case 175:
            case 644:
            case 625:
            case 562:
            case 396:
            case 1112:
            case 1146:
            case 471:
            case 1050:
            case 649:
            case 1105:
            case 49:
            case 589:
            case 607:
            case 564:
            case 1055:
            case 168:
            case 174:
            case 1180:
            case 499:
            case 507:
            case 550:
            case 171:
            case 167:
            case 1177:
            case 169:
            case 1181:
            case 551:
            case 552:
            case 661:
            case 639:
            case 478:
            case 537:
            case 477:
            case 536:
            case 1103:
            case 680:
            case 1104:
            case 1024:
            case 663:
            case 535:
            case 678:
            case 504:
            case 1043:
            case 428:
            case 170:
            case 3072:
            case 50:
            case 2070:
            case 1045:
              break;
            case 35:
              pass = true;
              break;
            case 36:
              pass = false;
              break;
            case 37:
              state.push(R_n);
              pass = true;
              break;
            case 38:
              state.pop();
              pass = false;
              break;
            default:
              if ((R_n || "").indexOf("Begin") > 0) {
              } else if ((R_n || "").indexOf("End") > 0) {
              } else if (!pass || opts.WTF)
                throw new Error("Unexpected record " + RT + " " + R_n);
          }
        }, opts);
        delete opts.supbooks;
        delete opts["!row"];
        if (!s["!ref"] && (refguess.s.r < 2e6 || ref && (ref.e.r > 0 || ref.e.c > 0 || ref.s.r > 0 || ref.s.c > 0)))
          s["!ref"] = encode_range(ref || refguess);
        if (opts.sheetRows && s["!ref"]) {
          var tmpref = safe_decode_range(s["!ref"]);
          if (opts.sheetRows <= +tmpref.e.r) {
            tmpref.e.r = opts.sheetRows - 1;
            if (tmpref.e.r > refguess.e.r)
              tmpref.e.r = refguess.e.r;
            if (tmpref.e.r < tmpref.s.r)
              tmpref.s.r = tmpref.e.r;
            if (tmpref.e.c > refguess.e.c)
              tmpref.e.c = refguess.e.c;
            if (tmpref.e.c < tmpref.s.c)
              tmpref.s.c = tmpref.e.c;
            s["!fullref"] = s["!ref"];
            s["!ref"] = encode_range(tmpref);
          }
        }
        if (merges.length > 0)
          s["!merges"] = merges;
        if (colinfo.length > 0)
          s["!cols"] = colinfo;
        if (rowinfo.length > 0)
          s["!rows"] = rowinfo;
        return s;
      }
      function write_ws_bin_cell(ba, cell, R, C, opts, ws, last_seen) {
        if (cell.v === void 0)
          return false;
        var vv = "";
        switch (cell.t) {
          case "b":
            vv = cell.v ? "1" : "0";
            break;
          case "d":
            cell = dup(cell);
            cell.z = cell.z || SSF._table[14];
            cell.v = datenum(parseDate(cell.v));
            cell.t = "n";
            break;
          case "n":
          case "e":
            vv = "" + cell.v;
            break;
          default:
            vv = cell.v;
            break;
        }
        var o = { r: R, c: C };
        o.s = get_cell_style(opts.cellXfs, cell, opts);
        if (cell.l)
          ws["!links"].push([encode_cell(o), cell.l]);
        if (cell.c)
          ws["!comments"].push([encode_cell(o), cell.c]);
        switch (cell.t) {
          case "s":
          case "str":
            if (opts.bookSST) {
              vv = get_sst_id(opts.Strings, cell.v, opts.revStrings);
              o.t = "s";
              o.v = vv;
              if (last_seen)
                write_record(ba, "BrtShortIsst", write_BrtShortIsst(cell, o));
              else
                write_record(ba, "BrtCellIsst", write_BrtCellIsst(cell, o));
            } else {
              o.t = "str";
              if (last_seen)
                write_record(ba, "BrtShortSt", write_BrtShortSt(cell, o));
              else
                write_record(ba, "BrtCellSt", write_BrtCellSt(cell, o));
            }
            return true;
          case "n":
            if (cell.v == (cell.v | 0) && cell.v > -1e3 && cell.v < 1e3) {
              if (last_seen)
                write_record(ba, "BrtShortRk", write_BrtShortRk(cell, o));
              else
                write_record(ba, "BrtCellRk", write_BrtCellRk(cell, o));
            } else {
              if (last_seen)
                write_record(ba, "BrtShortReal", write_BrtShortReal(cell, o));
              else
                write_record(ba, "BrtCellReal", write_BrtCellReal(cell, o));
            }
            return true;
          case "b":
            o.t = "b";
            if (last_seen)
              write_record(ba, "BrtShortBool", write_BrtShortBool(cell, o));
            else
              write_record(ba, "BrtCellBool", write_BrtCellBool(cell, o));
            return true;
          case "e":
            o.t = "e";
            if (last_seen)
              write_record(ba, "BrtShortError", write_BrtShortError(cell, o));
            else
              write_record(ba, "BrtCellError", write_BrtCellError(cell, o));
            return true;
        }
        if (last_seen)
          write_record(ba, "BrtShortBlank", write_BrtShortBlank(cell, o));
        else
          write_record(ba, "BrtCellBlank", write_BrtCellBlank(cell, o));
        return true;
      }
      function write_CELLTABLE(ba, ws, idx, opts) {
        var range = safe_decode_range(ws["!ref"] || "A1"), ref, rr = "", cols = [];
        write_record(ba, "BrtBeginSheetData");
        var dense = Array.isArray(ws);
        var cap = range.e.r;
        if (ws["!rows"])
          cap = Math.max(range.e.r, ws["!rows"].length - 1);
        for (var R = range.s.r; R <= cap; ++R) {
          rr = encode_row(R);
          write_row_header(ba, ws, range, R);
          var last_seen = false;
          if (R <= range.e.r)
            for (var C = range.s.c; C <= range.e.c; ++C) {
              if (R === range.s.r)
                cols[C] = encode_col(C);
              ref = cols[C] + rr;
              var cell = dense ? (ws[R] || [])[C] : ws[ref];
              if (!cell) {
                last_seen = false;
                continue;
              }
              last_seen = write_ws_bin_cell(ba, cell, R, C, opts, ws, last_seen);
            }
        }
        write_record(ba, "BrtEndSheetData");
      }
      function write_MERGECELLS(ba, ws) {
        if (!ws || !ws["!merges"])
          return;
        write_record(ba, "BrtBeginMergeCells", write_BrtBeginMergeCells(ws["!merges"].length));
        ws["!merges"].forEach(function(m) {
          write_record(ba, "BrtMergeCell", write_BrtMergeCell(m));
        });
        write_record(ba, "BrtEndMergeCells");
      }
      function write_COLINFOS(ba, ws) {
        if (!ws || !ws["!cols"])
          return;
        write_record(ba, "BrtBeginColInfos");
        ws["!cols"].forEach(function(m, i2) {
          if (m)
            write_record(ba, "BrtColInfo", write_BrtColInfo(i2, m));
        });
        write_record(ba, "BrtEndColInfos");
      }
      function write_IGNOREECS(ba, ws) {
        if (!ws || !ws["!ref"])
          return;
        write_record(ba, "BrtBeginCellIgnoreECs");
        write_record(ba, "BrtCellIgnoreEC", write_BrtCellIgnoreEC(safe_decode_range(ws["!ref"])));
        write_record(ba, "BrtEndCellIgnoreECs");
      }
      function write_HLINKS(ba, ws, rels) {
        ws["!links"].forEach(function(l) {
          if (!l[1].Target)
            return;
          var rId = add_rels(rels, -1, l[1].Target.replace(/#.*$/, ""), RELS.HLINK);
          write_record(ba, "BrtHLink", write_BrtHLink(l, rId));
        });
        delete ws["!links"];
      }
      function write_LEGACYDRAWING(ba, ws, idx, rels) {
        if (ws["!comments"].length > 0) {
          var rId = add_rels(rels, -1, "../drawings/vmlDrawing" + (idx + 1) + ".vml", RELS.VML);
          write_record(ba, "BrtLegacyDrawing", write_RelID("rId" + rId));
          ws["!legacy"] = rId;
        }
      }
      function write_AUTOFILTER(ba, ws, wb, idx) {
        if (!ws["!autofilter"])
          return;
        var data = ws["!autofilter"];
        var ref = typeof data.ref === "string" ? data.ref : encode_range(data.ref);
        if (!wb.Workbook)
          wb.Workbook = { Sheets: [] };
        if (!wb.Workbook.Names)
          wb.Workbook.Names = [];
        var names = wb.Workbook.Names;
        var range = decode_range(ref);
        if (range.s.r == range.e.r) {
          range.e.r = decode_range(ws["!ref"]).e.r;
          ref = encode_range(range);
        }
        for (var i2 = 0; i2 < names.length; ++i2) {
          var name2 = names[i2];
          if (name2.Name != "_xlnm._FilterDatabase")
            continue;
          if (name2.Sheet != idx)
            continue;
          name2.Ref = "'" + wb.SheetNames[idx] + "'!" + ref;
          break;
        }
        if (i2 == names.length)
          names.push({ Name: "_xlnm._FilterDatabase", Sheet: idx, Ref: "'" + wb.SheetNames[idx] + "'!" + ref });
        write_record(ba, "BrtBeginAFilter", write_UncheckedRfX(safe_decode_range(ref)));
        write_record(ba, "BrtEndAFilter");
      }
      function write_WSVIEWS2(ba, ws, Workbook) {
        write_record(ba, "BrtBeginWsViews");
        {
          write_record(ba, "BrtBeginWsView", write_BrtBeginWsView(ws, Workbook));
          write_record(ba, "BrtEndWsView");
        }
        write_record(ba, "BrtEndWsViews");
      }
      function write_WSFMTINFO() {
      }
      function write_SHEETPROTECT(ba, ws) {
        if (!ws["!protect"])
          return;
        write_record(ba, "BrtSheetProtection", write_BrtSheetProtection(ws["!protect"]));
      }
      function write_ws_bin(idx, opts, wb, rels) {
        var ba = buf_array();
        var s = wb.SheetNames[idx], ws = wb.Sheets[s] || {};
        var c = s;
        try {
          if (wb && wb.Workbook)
            c = wb.Workbook.Sheets[idx].CodeName || c;
        } catch (e) {
        }
        var r = safe_decode_range(ws["!ref"] || "A1");
        if (r.e.c > 16383 || r.e.r > 1048575) {
          if (opts.WTF)
            throw new Error("Range " + (ws["!ref"] || "A1") + " exceeds format limit A1:XFD1048576");
          r.e.c = Math.min(r.e.c, 16383);
          r.e.r = Math.min(r.e.c, 1048575);
        }
        ws["!links"] = [];
        ws["!comments"] = [];
        write_record(ba, "BrtBeginSheet");
        if (wb.vbaraw || ws["!outline"])
          write_record(ba, "BrtWsProp", write_BrtWsProp(c, ws["!outline"]));
        write_record(ba, "BrtWsDim", write_BrtWsDim(r));
        write_WSVIEWS2(ba, ws, wb.Workbook);
        write_WSFMTINFO(ba, ws);
        write_COLINFOS(ba, ws, idx, opts, wb);
        write_CELLTABLE(ba, ws, idx, opts, wb);
        write_SHEETPROTECT(ba, ws);
        write_AUTOFILTER(ba, ws, wb, idx);
        write_MERGECELLS(ba, ws);
        write_HLINKS(ba, ws, rels);
        if (ws["!margins"])
          write_record(ba, "BrtMargins", write_BrtMargins(ws["!margins"]));
        if (!opts || opts.ignoreEC || opts.ignoreEC == void 0)
          write_IGNOREECS(ba, ws);
        write_LEGACYDRAWING(ba, ws, idx, rels);
        write_record(ba, "BrtEndSheet");
        return ba.end();
      }
      RELS.CHART = "http://schemas.openxmlformats.org/officeDocument/2006/relationships/chart";
      RELS.CHARTEX = "http://schemas.microsoft.com/office/2014/relationships/chartEx";
      function parse_Cache(data) {
        var col = [];
        var num = data.match(/^<c:numCache>/);
        var f;
        (data.match(/<c:pt idx="(\d*)">(.*?)<\/c:pt>/mg) || []).forEach(function(pt) {
          var q = pt.match(/<c:pt idx="(\d*?)"><c:v>(.*)<\/c:v><\/c:pt>/);
          if (!q)
            return;
          col[+q[1]] = num ? +q[2] : q[2];
        });
        var nf = unescapexml((data.match(/<c:formatCode>([\s\S]*?)<\/c:formatCode>/) || ["", "General"])[1]);
        (data.match(/<c:f>(.*?)<\/c:f>/mg) || []).forEach(function(F) {
          f = F.replace(/<.*?>/g, "");
        });
        return [col, nf, f];
      }
      function parse_chart(data, name2, opts, rels, wb, csheet) {
        var cs = csheet || { "!type": "chart" };
        if (!data)
          return csheet;
        var C = 0, R = 0, col = "A";
        var refguess = { s: { r: 2e6, c: 2e6 }, e: { r: 0, c: 0 } };
        (data.match(/<c:numCache>[\s\S]*?<\/c:numCache>/gm) || []).forEach(function(nc) {
          var cache = parse_Cache(nc);
          refguess.s.r = refguess.s.c = 0;
          refguess.e.c = C;
          col = encode_col(C);
          cache[0].forEach(function(n, i2) {
            cs[col + encode_row(i2)] = { t: "n", v: n, z: cache[1] };
            R = i2;
          });
          if (refguess.e.r < R)
            refguess.e.r = R;
          ++C;
        });
        if (C > 0)
          cs["!ref"] = encode_range(refguess);
        return cs;
      }
      RELS.CS = "http://schemas.openxmlformats.org/officeDocument/2006/relationships/chartsheet";
      var CS_XML_ROOT = writextag("chartsheet", null, {
        "xmlns": XMLNS.main[0],
        "xmlns:r": XMLNS.r
      });
      function parse_cs_xml(data, opts, idx, rels, wb) {
        if (!data)
          return data;
        if (!rels)
          rels = { "!id": {} };
        var s = { "!type": "chart", "!drawel": null, "!rel": "" };
        var m;
        var sheetPr = data.match(sheetprregex);
        if (sheetPr)
          parse_ws_xml_sheetpr(sheetPr[0], s, wb, idx);
        if (m = data.match(/drawing r:id="(.*?)"/))
          s["!rel"] = m[1];
        if (rels["!id"][s["!rel"]])
          s["!drawel"] = rels["!id"][s["!rel"]];
        return s;
      }
      function write_cs_xml(idx, opts, wb, rels) {
        var o = [XML_HEADER, CS_XML_ROOT];
        o[o.length] = writextag("drawing", null, { "r:id": "rId1" });
        add_rels(rels, -1, "../drawings/drawing" + (idx + 1) + ".xml", RELS.DRAW);
        if (o.length > 2) {
          o[o.length] = "</chartsheet>";
          o[1] = o[1].replace("/>", ">");
        }
        return o.join("");
      }
      function parse_BrtCsProp(data, length) {
        data.l += 10;
        var name2 = parse_XLWideString(data, length - 10);
        return { name: name2 };
      }
      function parse_cs_bin(data, opts, idx, rels, wb) {
        if (!data)
          return data;
        if (!rels)
          rels = { "!id": {} };
        var s = { "!type": "chart", "!drawel": null, "!rel": "" };
        var state = [];
        var pass = false;
        recordhopper(data, function cs_parse(val, R_n, RT) {
          switch (RT) {
            case 550:
              s["!rel"] = val;
              break;
            case 651:
              if (!wb.Sheets[idx])
                wb.Sheets[idx] = {};
              if (val.name)
                wb.Sheets[idx].CodeName = val.name;
              break;
            case 562:
            case 652:
            case 669:
            case 679:
            case 551:
            case 552:
            case 476:
            case 3072:
              break;
            case 35:
              pass = true;
              break;
            case 36:
              pass = false;
              break;
            case 37:
              state.push(R_n);
              break;
            case 38:
              state.pop();
              break;
            default:
              if ((R_n || "").indexOf("Begin") > 0)
                state.push(R_n);
              else if ((R_n || "").indexOf("End") > 0)
                state.pop();
              else if (!pass || opts.WTF)
                throw new Error("Unexpected record " + RT + " " + R_n);
          }
        }, opts);
        if (rels["!id"][s["!rel"]])
          s["!drawel"] = rels["!id"][s["!rel"]];
        return s;
      }
      function write_cs_bin() {
        var ba = buf_array();
        write_record(ba, "BrtBeginSheet");
        write_record(ba, "BrtEndSheet");
        return ba.end();
      }
      var WBPropsDef = [
        ["allowRefreshQuery", false, "bool"],
        ["autoCompressPictures", true, "bool"],
        ["backupFile", false, "bool"],
        ["checkCompatibility", false, "bool"],
        ["CodeName", ""],
        ["date1904", false, "bool"],
        ["defaultThemeVersion", 0, "int"],
        ["filterPrivacy", false, "bool"],
        ["hidePivotFieldList", false, "bool"],
        ["promptedSolutions", false, "bool"],
        ["publishItems", false, "bool"],
        ["refreshAllConnections", false, "bool"],
        ["saveExternalLinkValues", true, "bool"],
        ["showBorderUnselectedTables", true, "bool"],
        ["showInkAnnotation", true, "bool"],
        ["showObjects", "all"],
        ["showPivotChartFilter", false, "bool"],
        ["updateLinks", "userSet"]
      ];
      var WBViewDef = [
        ["activeTab", 0, "int"],
        ["autoFilterDateGrouping", true, "bool"],
        ["firstSheet", 0, "int"],
        ["minimized", false, "bool"],
        ["showHorizontalScroll", true, "bool"],
        ["showSheetTabs", true, "bool"],
        ["showVerticalScroll", true, "bool"],
        ["tabRatio", 600, "int"],
        ["visibility", "visible"]
      ];
      var SheetDef = [];
      var CalcPrDef = [
        ["calcCompleted", "true"],
        ["calcMode", "auto"],
        ["calcOnSave", "true"],
        ["concurrentCalc", "true"],
        ["fullCalcOnLoad", "false"],
        ["fullPrecision", "true"],
        ["iterate", "false"],
        ["iterateCount", "100"],
        ["iterateDelta", "0.001"],
        ["refMode", "A1"]
      ];
      function push_defaults_array(target, defaults) {
        for (var j = 0; j != target.length; ++j) {
          var w = target[j];
          for (var i2 = 0; i2 != defaults.length; ++i2) {
            var z = defaults[i2];
            if (w[z[0]] == null)
              w[z[0]] = z[1];
            else
              switch (z[2]) {
                case "bool":
                  if (typeof w[z[0]] == "string")
                    w[z[0]] = parsexmlbool(w[z[0]]);
                  break;
                case "int":
                  if (typeof w[z[0]] == "string")
                    w[z[0]] = parseInt(w[z[0]], 10);
                  break;
              }
          }
        }
      }
      function push_defaults(target, defaults) {
        for (var i2 = 0; i2 != defaults.length; ++i2) {
          var z = defaults[i2];
          if (target[z[0]] == null)
            target[z[0]] = z[1];
          else
            switch (z[2]) {
              case "bool":
                if (typeof target[z[0]] == "string")
                  target[z[0]] = parsexmlbool(target[z[0]]);
                break;
              case "int":
                if (typeof target[z[0]] == "string")
                  target[z[0]] = parseInt(target[z[0]], 10);
                break;
            }
        }
      }
      function parse_wb_defaults(wb) {
        push_defaults(wb.WBProps, WBPropsDef);
        push_defaults(wb.CalcPr, CalcPrDef);
        push_defaults_array(wb.WBView, WBViewDef);
        push_defaults_array(wb.Sheets, SheetDef);
        _ssfopts.date1904 = parsexmlbool(wb.WBProps.date1904);
      }
      function safe1904(wb) {
        if (!wb.Workbook)
          return "false";
        if (!wb.Workbook.WBProps)
          return "false";
        return parsexmlbool(wb.Workbook.WBProps.date1904) ? "true" : "false";
      }
      var badchars = "][*?/\\".split("");
      function check_ws_name(n, safe) {
        if (n.length > 31) {
          if (safe)
            return false;
          throw new Error("Sheet names cannot exceed 31 chars");
        }
        var _good = true;
        badchars.forEach(function(c) {
          if (n.indexOf(c) == -1)
            return;
          if (!safe)
            throw new Error("Sheet name cannot contain : \\ / ? * [ ]");
          _good = false;
        });
        return _good;
      }
      function check_wb_names(N, S, codes) {
        N.forEach(function(n, i2) {
          check_ws_name(n);
          for (var j = 0; j < i2; ++j)
            if (n == N[j])
              throw new Error("Duplicate Sheet Name: " + n);
          if (codes) {
            var cn = S && S[i2] && S[i2].CodeName || n;
            if (cn.charCodeAt(0) == 95 && cn.length > 22)
              throw new Error("Bad Code Name: Worksheet" + cn);
          }
        });
      }
      function check_wb(wb) {
        if (!wb || !wb.SheetNames || !wb.Sheets)
          throw new Error("Invalid Workbook");
        if (!wb.SheetNames.length)
          throw new Error("Workbook is empty");
        var Sheets = wb.Workbook && wb.Workbook.Sheets || [];
        check_wb_names(wb.SheetNames, Sheets, !!wb.vbaraw);
        for (var i2 = 0; i2 < wb.SheetNames.length; ++i2)
          check_ws(wb.Sheets[wb.SheetNames[i2]], wb.SheetNames[i2], i2);
      }
      var wbnsregex = /<\w+:workbook/;
      function parse_wb_xml(data, opts) {
        if (!data)
          throw new Error("Could not find file");
        var wb = { AppVersion: {}, WBProps: {}, WBView: [], Sheets: [], CalcPr: {}, Names: [], xmlns: "" };
        var pass = false, xmlns = "xmlns";
        var dname = {}, dnstart = 0;
        data.replace(tagregex, function xml_wb(x, idx) {
          var y = parsexmltag(x);
          switch (strip_ns(y[0])) {
            case "<?xml":
              break;
            case "<workbook":
              if (x.match(wbnsregex))
                xmlns = "xmlns" + x.match(/<(\w+):/)[1];
              wb.xmlns = y[xmlns];
              break;
            case "</workbook>":
              break;
            case "<fileVersion":
              delete y[0];
              wb.AppVersion = y;
              break;
            case "<fileVersion/>":
            case "</fileVersion>":
              break;
            case "<fileSharing":
              break;
            case "<fileSharing/>":
              break;
            case "<workbookPr":
            case "<workbookPr/>":
              WBPropsDef.forEach(function(w) {
                if (y[w[0]] == null)
                  return;
                switch (w[2]) {
                  case "bool":
                    wb.WBProps[w[0]] = parsexmlbool(y[w[0]]);
                    break;
                  case "int":
                    wb.WBProps[w[0]] = parseInt(y[w[0]], 10);
                    break;
                  default:
                    wb.WBProps[w[0]] = y[w[0]];
                }
              });
              if (y.codeName)
                wb.WBProps.CodeName = utf8read(y.codeName);
              break;
            case "</workbookPr>":
              break;
            case "<workbookProtection":
              break;
            case "<workbookProtection/>":
              break;
            case "<bookViews":
            case "<bookViews>":
            case "</bookViews>":
              break;
            case "<workbookView":
            case "<workbookView/>":
              delete y[0];
              wb.WBView.push(y);
              break;
            case "</workbookView>":
              break;
            case "<sheets":
            case "<sheets>":
            case "</sheets>":
              break;
            case "<sheet":
              switch (y.state) {
                case "hidden":
                  y.Hidden = 1;
                  break;
                case "veryHidden":
                  y.Hidden = 2;
                  break;
                default:
                  y.Hidden = 0;
              }
              delete y.state;
              y.name = unescapexml(utf8read(y.name));
              delete y[0];
              wb.Sheets.push(y);
              break;
            case "</sheet>":
              break;
            case "<functionGroups":
            case "<functionGroups/>":
              break;
            case "<functionGroup":
              break;
            case "<externalReferences":
            case "</externalReferences>":
            case "<externalReferences>":
              break;
            case "<externalReference":
              break;
            case "<definedNames/>":
              break;
            case "<definedNames>":
            case "<definedNames":
              pass = true;
              break;
            case "</definedNames>":
              pass = false;
              break;
            case "<definedName":
              {
                dname = {};
                dname.Name = utf8read(y.name);
                if (y.comment)
                  dname.Comment = y.comment;
                if (y.localSheetId)
                  dname.Sheet = +y.localSheetId;
                if (parsexmlbool(y.hidden || "0"))
                  dname.Hidden = true;
                dnstart = idx + x.length;
              }
              break;
            case "</definedName>":
              {
                dname.Ref = unescapexml(utf8read(data.slice(dnstart, idx)));
                wb.Names.push(dname);
              }
              break;
            case "<definedName/>":
              break;
            case "<calcPr":
              delete y[0];
              wb.CalcPr = y;
              break;
            case "<calcPr/>":
              delete y[0];
              wb.CalcPr = y;
              break;
            case "</calcPr>":
              break;
            case "<oleSize":
              break;
            case "<customWorkbookViews>":
            case "</customWorkbookViews>":
            case "<customWorkbookViews":
              break;
            case "<customWorkbookView":
            case "</customWorkbookView>":
              break;
            case "<pivotCaches>":
            case "</pivotCaches>":
            case "<pivotCaches":
              break;
            case "<pivotCache":
              break;
            case "<smartTagPr":
            case "<smartTagPr/>":
              break;
            case "<smartTagTypes":
            case "<smartTagTypes>":
            case "</smartTagTypes>":
              break;
            case "<smartTagType":
              break;
            case "<webPublishing":
            case "<webPublishing/>":
              break;
            case "<fileRecoveryPr":
            case "<fileRecoveryPr/>":
              break;
            case "<webPublishObjects>":
            case "<webPublishObjects":
            case "</webPublishObjects>":
              break;
            case "<webPublishObject":
              break;
            case "<extLst":
            case "<extLst>":
            case "</extLst>":
            case "<extLst/>":
              break;
            case "<ext":
              pass = true;
              break;
            case "</ext>":
              pass = false;
              break;
            case "<ArchID":
              break;
            case "<AlternateContent":
            case "<AlternateContent>":
              pass = true;
              break;
            case "</AlternateContent>":
              pass = false;
              break;
            case "<revisionPtr":
              break;
            default:
              if (!pass && opts.WTF)
                throw new Error("unrecognized " + y[0] + " in workbook");
          }
          return x;
        });
        if (XMLNS.main.indexOf(wb.xmlns) === -1)
          throw new Error("Unknown Namespace: " + wb.xmlns);
        parse_wb_defaults(wb);
        return wb;
      }
      var WB_XML_ROOT = writextag("workbook", null, {
        "xmlns": XMLNS.main[0],
        "xmlns:r": XMLNS.r
      });
      function write_wb_xml(wb) {
        var o = [XML_HEADER];
        o[o.length] = WB_XML_ROOT;
        var write_names = wb.Workbook && (wb.Workbook.Names || []).length > 0;
        var workbookPr = { codeName: "ThisWorkbook" };
        if (wb.Workbook && wb.Workbook.WBProps) {
          WBPropsDef.forEach(function(x) {
            if (wb.Workbook.WBProps[x[0]] == null)
              return;
            if (wb.Workbook.WBProps[x[0]] == x[1])
              return;
            workbookPr[x[0]] = wb.Workbook.WBProps[x[0]];
          });
          if (wb.Workbook.WBProps.CodeName) {
            workbookPr.codeName = wb.Workbook.WBProps.CodeName;
            delete workbookPr.CodeName;
          }
        }
        o[o.length] = writextag("workbookPr", null, workbookPr);
        var sheets = wb.Workbook && wb.Workbook.Sheets || [];
        var i2 = 0;
        if (sheets && sheets[0] && !!sheets[0].Hidden) {
          o[o.length] = "<bookViews>";
          for (i2 = 0; i2 != wb.SheetNames.length; ++i2) {
            if (!sheets[i2])
              break;
            if (!sheets[i2].Hidden)
              break;
          }
          if (i2 == wb.SheetNames.length)
            i2 = 0;
          o[o.length] = '<workbookView firstSheet="' + i2 + '" activeTab="' + i2 + '"/>';
          o[o.length] = "</bookViews>";
        }
        o[o.length] = "<sheets>";
        for (i2 = 0; i2 != wb.SheetNames.length; ++i2) {
          var sht = { name: escapexml(wb.SheetNames[i2].slice(0, 31)) };
          sht.sheetId = "" + (i2 + 1);
          sht["r:id"] = "rId" + (i2 + 1);
          if (sheets[i2])
            switch (sheets[i2].Hidden) {
              case 1:
                sht.state = "hidden";
                break;
              case 2:
                sht.state = "veryHidden";
                break;
            }
          o[o.length] = writextag("sheet", null, sht);
        }
        o[o.length] = "</sheets>";
        if (write_names) {
          o[o.length] = "<definedNames>";
          if (wb.Workbook && wb.Workbook.Names)
            wb.Workbook.Names.forEach(function(n) {
              var d = { name: n.Name };
              if (n.Comment)
                d.comment = n.Comment;
              if (n.Sheet != null)
                d.localSheetId = "" + n.Sheet;
              if (n.Hidden)
                d.hidden = "1";
              if (!n.Ref)
                return;
              o[o.length] = writextag("definedName", escapexml(n.Ref), d);
            });
          o[o.length] = "</definedNames>";
        }
        if (o.length > 2) {
          o[o.length] = "</workbook>";
          o[1] = o[1].replace("/>", ">");
        }
        return o.join("");
      }
      function parse_BrtBundleSh(data, length) {
        var z = {};
        z.Hidden = data.read_shift(4);
        z.iTabID = data.read_shift(4);
        z.strRelID = parse_RelID(data, length - 8);
        z.name = parse_XLWideString(data);
        return z;
      }
      function write_BrtBundleSh(data, o) {
        if (!o)
          o = new_buf(127);
        o.write_shift(4, data.Hidden);
        o.write_shift(4, data.iTabID);
        write_RelID(data.strRelID, o);
        write_XLWideString(data.name.slice(0, 31), o);
        return o.length > o.l ? o.slice(0, o.l) : o;
      }
      function parse_BrtWbProp(data, length) {
        var o = {};
        var flags = data.read_shift(4);
        o.defaultThemeVersion = data.read_shift(4);
        var strName = length > 8 ? parse_XLWideString(data) : "";
        if (strName.length > 0)
          o.CodeName = strName;
        o.autoCompressPictures = !!(flags & 65536);
        o.backupFile = !!(flags & 64);
        o.checkCompatibility = !!(flags & 4096);
        o.date1904 = !!(flags & 1);
        o.filterPrivacy = !!(flags & 8);
        o.hidePivotFieldList = !!(flags & 1024);
        o.promptedSolutions = !!(flags & 16);
        o.publishItems = !!(flags & 2048);
        o.refreshAllConnections = !!(flags & 262144);
        o.saveExternalLinkValues = !!(flags & 128);
        o.showBorderUnselectedTables = !!(flags & 4);
        o.showInkAnnotation = !!(flags & 32);
        o.showObjects = ["all", "placeholders", "none"][flags >> 13 & 3];
        o.showPivotChartFilter = !!(flags & 32768);
        o.updateLinks = ["userSet", "never", "always"][flags >> 8 & 3];
        return o;
      }
      function write_BrtWbProp(data, o) {
        if (!o)
          o = new_buf(72);
        var flags = 0;
        if (data) {
          if (data.filterPrivacy)
            flags |= 8;
        }
        o.write_shift(4, flags);
        o.write_shift(4, 0);
        write_XLSBCodeName(data && data.CodeName || "ThisWorkbook", o);
        return o.slice(0, o.l);
      }
      function parse_BrtFRTArchID$(data, length) {
        var o = {};
        data.read_shift(4);
        o.ArchID = data.read_shift(4);
        data.l += length - 8;
        return o;
      }
      function parse_BrtName(data, length, opts) {
        var end = data.l + length;
        data.l += 4;
        data.l += 1;
        var itab = data.read_shift(4);
        var name2 = parse_XLNameWideString(data);
        var formula = parse_XLSBNameParsedFormula(data, 0, opts);
        var comment = parse_XLNullableWideString(data);
        data.l = end;
        var out = { Name: name2, Ptg: formula };
        if (itab < 268435455)
          out.Sheet = itab;
        if (comment)
          out.Comment = comment;
        return out;
      }
      function parse_wb_bin(data, opts) {
        var wb = { AppVersion: {}, WBProps: {}, WBView: [], Sheets: [], CalcPr: {}, xmlns: "" };
        var state = [];
        var pass = false;
        if (!opts)
          opts = {};
        opts.biff = 12;
        var Names = [];
        var supbooks = [[]];
        supbooks.SheetNames = [];
        supbooks.XTI = [];
        XLSBRecordEnum[16] = { n: "BrtFRTArchID$", f: parse_BrtFRTArchID$ };
        recordhopper(data, function hopper_wb(val, R_n, RT) {
          switch (RT) {
            case 156:
              supbooks.SheetNames.push(val.name);
              wb.Sheets.push(val);
              break;
            case 153:
              wb.WBProps = val;
              break;
            case 39:
              if (val.Sheet != null)
                opts.SID = val.Sheet;
              val.Ref = stringify_formula(val.Ptg, null, null, supbooks, opts);
              delete opts.SID;
              delete val.Ptg;
              Names.push(val);
              break;
            case 1036:
              break;
            case 357:
            case 358:
            case 355:
            case 667:
              if (!supbooks[0].length)
                supbooks[0] = [RT, val];
              else
                supbooks.push([RT, val]);
              supbooks[supbooks.length - 1].XTI = [];
              break;
            case 362:
              if (supbooks.length === 0) {
                supbooks[0] = [];
                supbooks[0].XTI = [];
              }
              supbooks[supbooks.length - 1].XTI = supbooks[supbooks.length - 1].XTI.concat(val);
              supbooks.XTI = supbooks.XTI.concat(val);
              break;
            case 361:
              break;
            case 2071:
            case 158:
            case 143:
            case 664:
            case 353:
              break;
            case 3072:
            case 3073:
            case 534:
            case 677:
            case 157:
            case 610:
            case 2050:
            case 155:
            case 548:
            case 676:
            case 128:
            case 665:
            case 2128:
            case 2125:
            case 549:
            case 2053:
            case 596:
            case 2076:
            case 2075:
            case 2082:
            case 397:
            case 154:
            case 1117:
            case 553:
            case 2091:
              break;
            case 35:
              state.push(R_n);
              pass = true;
              break;
            case 36:
              state.pop();
              pass = false;
              break;
            case 37:
              state.push(R_n);
              pass = true;
              break;
            case 38:
              state.pop();
              pass = false;
              break;
            case 16:
              break;
            default:
              if ((R_n || "").indexOf("Begin") > 0) {
              } else if ((R_n || "").indexOf("End") > 0) {
              } else if (!pass || opts.WTF && state[state.length - 1] != "BrtACBegin" && state[state.length - 1] != "BrtFRTBegin")
                throw new Error("Unexpected record " + RT + " " + R_n);
          }
        }, opts);
        parse_wb_defaults(wb);
        wb.Names = Names;
        wb.supbooks = supbooks;
        return wb;
      }
      function write_BUNDLESHS(ba, wb) {
        write_record(ba, "BrtBeginBundleShs");
        for (var idx = 0; idx != wb.SheetNames.length; ++idx) {
          var viz = wb.Workbook && wb.Workbook.Sheets && wb.Workbook.Sheets[idx] && wb.Workbook.Sheets[idx].Hidden || 0;
          var d = { Hidden: viz, iTabID: idx + 1, strRelID: "rId" + (idx + 1), name: wb.SheetNames[idx] };
          write_record(ba, "BrtBundleSh", write_BrtBundleSh(d));
        }
        write_record(ba, "BrtEndBundleShs");
      }
      function write_BrtFileVersion(data, o) {
        if (!o)
          o = new_buf(127);
        for (var i2 = 0; i2 != 4; ++i2)
          o.write_shift(4, 0);
        write_XLWideString("SheetJS", o);
        write_XLWideString(XLSX2.version, o);
        write_XLWideString(XLSX2.version, o);
        write_XLWideString("7262", o);
        return o.length > o.l ? o.slice(0, o.l) : o;
      }
      function write_BrtBookView(idx, o) {
        if (!o)
          o = new_buf(29);
        o.write_shift(-4, 0);
        o.write_shift(-4, 460);
        o.write_shift(4, 28800);
        o.write_shift(4, 17600);
        o.write_shift(4, 500);
        o.write_shift(4, idx);
        o.write_shift(4, idx);
        var flags = 120;
        o.write_shift(1, flags);
        return o.length > o.l ? o.slice(0, o.l) : o;
      }
      function write_BOOKVIEWS(ba, wb) {
        if (!wb.Workbook || !wb.Workbook.Sheets)
          return;
        var sheets = wb.Workbook.Sheets;
        var i2 = 0, vistab = -1, hidden = -1;
        for (; i2 < sheets.length; ++i2) {
          if (!sheets[i2] || !sheets[i2].Hidden && vistab == -1)
            vistab = i2;
          else if (sheets[i2].Hidden == 1 && hidden == -1)
            hidden = i2;
        }
        if (hidden > vistab)
          return;
        write_record(ba, "BrtBeginBookViews");
        write_record(ba, "BrtBookView", write_BrtBookView(vistab));
        write_record(ba, "BrtEndBookViews");
      }
      function write_wb_bin(wb, opts) {
        var ba = buf_array();
        write_record(ba, "BrtBeginBook");
        write_record(ba, "BrtFileVersion", write_BrtFileVersion());
        write_record(ba, "BrtWbProp", write_BrtWbProp(wb.Workbook && wb.Workbook.WBProps || null));
        write_BOOKVIEWS(ba, wb, opts);
        write_BUNDLESHS(ba, wb, opts);
        write_record(ba, "BrtEndBook");
        return ba.end();
      }
      function parse_wb(data, name2, opts) {
        if (name2.slice(-4) === ".bin")
          return parse_wb_bin(data, opts);
        return parse_wb_xml(data, opts);
      }
      function parse_ws(data, name2, idx, opts, rels, wb, themes, styles) {
        if (name2.slice(-4) === ".bin")
          return parse_ws_bin(data, opts, idx, rels, wb, themes, styles);
        return parse_ws_xml(data, opts, idx, rels, wb, themes, styles);
      }
      function parse_cs(data, name2, idx, opts, rels, wb, themes, styles) {
        if (name2.slice(-4) === ".bin")
          return parse_cs_bin(data, opts, idx, rels, wb, themes, styles);
        return parse_cs_xml(data, opts, idx, rels, wb, themes, styles);
      }
      function parse_ms(data, name2, idx, opts, rels, wb, themes, styles) {
        if (name2.slice(-4) === ".bin")
          return parse_ms_bin(data, opts, idx, rels, wb, themes, styles);
        return parse_ms_xml(data, opts, idx, rels, wb, themes, styles);
      }
      function parse_ds(data, name2, idx, opts, rels, wb, themes, styles) {
        if (name2.slice(-4) === ".bin")
          return parse_ds_bin(data, opts, idx, rels, wb, themes, styles);
        return parse_ds_xml(data, opts, idx, rels, wb, themes, styles);
      }
      function parse_sty(data, name2, themes, opts) {
        if (name2.slice(-4) === ".bin")
          return parse_sty_bin(data, themes, opts);
        return parse_sty_xml(data, themes, opts);
      }
      function parse_theme(data, name2, opts) {
        return parse_theme_xml(data, opts);
      }
      function parse_sst(data, name2, opts) {
        if (name2.slice(-4) === ".bin")
          return parse_sst_bin(data, opts);
        return parse_sst_xml(data, opts);
      }
      function parse_cmnt(data, name2, opts) {
        if (name2.slice(-4) === ".bin")
          return parse_comments_bin(data, opts);
        return parse_comments_xml(data, opts);
      }
      function parse_cc(data, name2, opts) {
        if (name2.slice(-4) === ".bin")
          return parse_cc_bin(data, name2, opts);
        return parse_cc_xml(data, name2, opts);
      }
      function parse_xlink(data, rel, name2, opts) {
        if (name2.slice(-4) === ".bin")
          return parse_xlink_bin(data, rel, name2, opts);
        return parse_xlink_xml(data, rel, name2, opts);
      }
      function write_wb(wb, name2, opts) {
        return (name2.slice(-4) === ".bin" ? write_wb_bin : write_wb_xml)(wb, opts);
      }
      function write_ws(data, name2, opts, wb, rels) {
        return (name2.slice(-4) === ".bin" ? write_ws_bin : write_ws_xml)(data, opts, wb, rels);
      }
      function write_cs(data, name2, opts, wb, rels) {
        return (name2.slice(-4) === ".bin" ? write_cs_bin : write_cs_xml)(data, opts, wb, rels);
      }
      function write_sty(data, name2, opts) {
        return (name2.slice(-4) === ".bin" ? write_sty_bin : write_sty_xml)(data, opts);
      }
      function write_sst(data, name2, opts) {
        return (name2.slice(-4) === ".bin" ? write_sst_bin : write_sst_xml)(data, opts);
      }
      function write_cmnt(data, name2, opts) {
        return (name2.slice(-4) === ".bin" ? write_comments_bin : write_comments_xml)(data, opts);
      }
      var attregexg2 = /([\w:]+)=((?:")([^"]*)(?:")|(?:')([^']*)(?:'))/g;
      var attregex2 = /([\w:]+)=((?:")(?:[^"]*)(?:")|(?:')(?:[^']*)(?:'))/;
      function xlml_parsexmltag(tag, skip_root) {
        var words = tag.split(/\s+/);
        var z = [];
        if (!skip_root)
          z[0] = words[0];
        if (words.length === 1)
          return z;
        var m = tag.match(attregexg2), y, j, w, i2;
        if (m)
          for (i2 = 0; i2 != m.length; ++i2) {
            y = m[i2].match(attregex2);
            if ((j = y[1].indexOf(":")) === -1)
              z[y[1]] = y[2].slice(1, y[2].length - 1);
            else {
              if (y[1].slice(0, 6) === "xmlns:")
                w = "xmlns" + y[1].slice(6);
              else
                w = y[1].slice(j + 1);
              z[w] = y[2].slice(1, y[2].length - 1);
            }
          }
        return z;
      }
      function xlml_parsexmltagobj(tag) {
        var words = tag.split(/\s+/);
        var z = {};
        if (words.length === 1)
          return z;
        var m = tag.match(attregexg2), y, j, w, i2;
        if (m)
          for (i2 = 0; i2 != m.length; ++i2) {
            y = m[i2].match(attregex2);
            if ((j = y[1].indexOf(":")) === -1)
              z[y[1]] = y[2].slice(1, y[2].length - 1);
            else {
              if (y[1].slice(0, 6) === "xmlns:")
                w = "xmlns" + y[1].slice(6);
              else
                w = y[1].slice(j + 1);
              z[w] = y[2].slice(1, y[2].length - 1);
            }
          }
        return z;
      }
      function xlml_format(format, value) {
        var fmt = XLMLFormatMap[format] || unescapexml(format);
        if (fmt === "General")
          return SSF._general(value);
        return SSF.format(fmt, value);
      }
      function xlml_set_custprop(Custprops, key, cp, val) {
        var oval = val;
        switch ((cp[0].match(/dt:dt="([\w.]+)"/) || ["", ""])[1]) {
          case "boolean":
            oval = parsexmlbool(val);
            break;
          case "i2":
          case "int":
            oval = parseInt(val, 10);
            break;
          case "r4":
          case "float":
            oval = parseFloat(val);
            break;
          case "date":
          case "dateTime.tz":
            oval = parseDate(val);
            break;
          case "i8":
          case "string":
          case "fixed":
          case "uuid":
          case "bin.base64":
            break;
          default:
            throw new Error("bad custprop:" + cp[0]);
        }
        Custprops[unescapexml(key)] = oval;
      }
      function safe_format_xlml(cell, nf, o) {
        if (cell.t === "z")
          return;
        if (!o || o.cellText !== false)
          try {
            if (cell.t === "e") {
              cell.w = cell.w || BErr[cell.v];
            } else if (nf === "General") {
              if (cell.t === "n") {
                if ((cell.v | 0) === cell.v)
                  cell.w = SSF._general_int(cell.v);
                else
                  cell.w = SSF._general_num(cell.v);
              } else
                cell.w = SSF._general(cell.v);
            } else
              cell.w = xlml_format(nf || "General", cell.v);
          } catch (e) {
            if (o.WTF)
              throw e;
          }
        try {
          var z = XLMLFormatMap[nf] || nf || "General";
          if (o.cellNF)
            cell.z = z;
          if (o.cellDates && cell.t == "n" && SSF.is_date(z)) {
            var _d = SSF.parse_date_code(cell.v);
            if (_d) {
              cell.t = "d";
              cell.v = new Date(_d.y, _d.m - 1, _d.d, _d.H, _d.M, _d.S, _d.u);
            }
          }
        } catch (e) {
          if (o.WTF)
            throw e;
        }
      }
      function process_style_xlml(styles, stag, opts) {
        if (opts.cellStyles) {
          if (stag.Interior) {
            var I = stag.Interior;
            if (I.Pattern)
              I.patternType = XLMLPatternTypeMap[I.Pattern] || I.Pattern;
          }
        }
        styles[stag.ID] = stag;
      }
      function parse_xlml_data(xml, ss, data, cell, base, styles, csty, row, arrayf, o) {
        var nf = "General", sid = cell.StyleID, S = {};
        o = o || {};
        var interiors = [];
        var i2 = 0;
        if (sid === void 0 && row)
          sid = row.StyleID;
        if (sid === void 0 && csty)
          sid = csty.StyleID;
        while (styles[sid] !== void 0) {
          if (styles[sid].nf)
            nf = styles[sid].nf;
          if (styles[sid].Interior)
            interiors.push(styles[sid].Interior);
          if (!styles[sid].Parent)
            break;
          sid = styles[sid].Parent;
        }
        switch (data.Type) {
          case "Boolean":
            cell.t = "b";
            cell.v = parsexmlbool(xml);
            break;
          case "String":
            cell.t = "s";
            cell.r = xlml_fixstr(unescapexml(xml));
            cell.v = xml.indexOf("<") > -1 ? unescapexml(ss || xml).replace(/<.*?>/g, "") : cell.r;
            break;
          case "DateTime":
            if (xml.slice(-1) != "Z")
              xml += "Z";
            cell.v = (parseDate(xml) - new Date(Date.UTC(1899, 11, 30))) / (24 * 60 * 60 * 1e3);
            if (cell.v !== cell.v)
              cell.v = unescapexml(xml);
            else if (cell.v < 60)
              cell.v = cell.v - 1;
            if (!nf || nf == "General")
              nf = "yyyy-mm-dd";
          case "Number":
            if (cell.v === void 0)
              cell.v = +xml;
            if (!cell.t)
              cell.t = "n";
            break;
          case "Error":
            cell.t = "e";
            cell.v = RBErr[xml];
            if (o.cellText !== false)
              cell.w = xml;
            break;
          default:
            if (xml == "" && ss == "") {
              cell.t = "z";
            } else {
              cell.t = "s";
              cell.v = xlml_fixstr(ss || xml);
            }
            break;
        }
        safe_format_xlml(cell, nf, o);
        if (o.cellFormula !== false) {
          if (cell.Formula) {
            var fstr = unescapexml(cell.Formula);
            if (fstr.charCodeAt(0) == 61)
              fstr = fstr.slice(1);
            cell.f = rc_to_a1(fstr, base);
            delete cell.Formula;
            if (cell.ArrayRange == "RC")
              cell.F = rc_to_a1("RC:RC", base);
            else if (cell.ArrayRange) {
              cell.F = rc_to_a1(cell.ArrayRange, base);
              arrayf.push([safe_decode_range(cell.F), cell.F]);
            }
          } else {
            for (i2 = 0; i2 < arrayf.length; ++i2)
              if (base.r >= arrayf[i2][0].s.r && base.r <= arrayf[i2][0].e.r) {
                if (base.c >= arrayf[i2][0].s.c && base.c <= arrayf[i2][0].e.c)
                  cell.F = arrayf[i2][1];
              }
          }
        }
        if (o.cellStyles) {
          interiors.forEach(function(x) {
            if (!S.patternType && x.patternType)
              S.patternType = x.patternType;
          });
          cell.s = S;
        }
        if (cell.StyleID !== void 0)
          cell.ixfe = cell.StyleID;
      }
      function xlml_clean_comment(comment) {
        comment.t = comment.v || "";
        comment.t = comment.t.replace(/\r\n/g, "\n").replace(/\r/g, "\n");
        comment.v = comment.w = comment.ixfe = void 0;
      }
      function xlml_normalize(d) {
        if (has_buf && Buffer.isBuffer(d))
          return d.toString("utf8");
        if (typeof d === "string")
          return d;
        if (typeof Uint8Array !== "undefined" && d instanceof Uint8Array)
          return utf8read(a2s(ab2a(d)));
        throw new Error("Bad input format: expected Buffer or string");
      }
      var xlmlregex = /<(\/?)([^\s?><!\/:]*:|)([^\s?<>:\/]+)(?:[\s?:\/][^>]*)?>/mg;
      function parse_xlml_xml(d, _opts) {
        var opts = _opts || {};
        make_ssf(SSF);
        var str = debom(xlml_normalize(d));
        if (opts.type == "binary" || opts.type == "array" || opts.type == "base64") {
          if (typeof cptable !== "undefined")
            str = cptable.utils.decode(65001, char_codes(str));
          else
            str = utf8read(str);
        }
        var opening = str.slice(0, 1024).toLowerCase(), ishtml = false;
        if ((opening.indexOf(">") & 1023) > Math.min(opening.indexOf(",") & 1023, opening.indexOf(";") & 1023)) {
          var _o = dup(opts);
          _o.type = "string";
          return PRN.to_workbook(str, _o);
        }
        if (opening.indexOf("<?xml") == -1)
          ["html", "table", "head", "meta", "script", "style", "div"].forEach(function(tag) {
            if (opening.indexOf("<" + tag) >= 0)
              ishtml = true;
          });
        if (ishtml)
          return HTML_.to_workbook(str, opts);
        var Rn;
        var state = [], tmp;
        if (DENSE != null && opts.dense == null)
          opts.dense = DENSE;
        var sheets = {}, sheetnames = [], cursheet = opts.dense ? [] : {}, sheetname = "";
        var table = {}, cell = {}, row = {};
        var dtag = xlml_parsexmltag('<Data ss:Type="String">'), didx = 0;
        var c = 0, r = 0;
        var refguess = { s: { r: 2e6, c: 2e6 }, e: { r: 0, c: 0 } };
        var styles = {}, stag = {};
        var ss = "", fidx = 0;
        var merges = [];
        var Props = {}, Custprops = {}, pidx = 0, cp = [];
        var comments = [], comment = {};
        var cstys = [], csty, seencol = false;
        var arrayf = [];
        var rowinfo = [], rowobj = {}, cc = 0, rr = 0;
        var Workbook = { Sheets: [], WBProps: { date1904: false } }, wsprops = {};
        xlmlregex.lastIndex = 0;
        str = str.replace(/<!--([\s\S]*?)-->/mg, "");
        var raw_Rn3 = "";
        while (Rn = xlmlregex.exec(str))
          switch (Rn[3] = (raw_Rn3 = Rn[3]).toLowerCase()) {
            case "data":
              if (raw_Rn3 == "data") {
                if (Rn[1] === "/") {
                  if ((tmp = state.pop())[0] !== Rn[3])
                    throw new Error("Bad state: " + tmp.join("|"));
                } else if (Rn[0].charAt(Rn[0].length - 2) !== "/")
                  state.push([Rn[3], true]);
                break;
              }
              if (state[state.length - 1][1])
                break;
              if (Rn[1] === "/")
                parse_xlml_data(str.slice(didx, Rn.index), ss, dtag, state[state.length - 1][0] == "comment" ? comment : cell, { c, r }, styles, cstys[c], row, arrayf, opts);
              else {
                ss = "";
                dtag = xlml_parsexmltag(Rn[0]);
                didx = Rn.index + Rn[0].length;
              }
              break;
            case "cell":
              if (Rn[1] === "/") {
                if (comments.length > 0)
                  cell.c = comments;
                if ((!opts.sheetRows || opts.sheetRows > r) && cell.v !== void 0) {
                  if (opts.dense) {
                    if (!cursheet[r])
                      cursheet[r] = [];
                    cursheet[r][c] = cell;
                  } else
                    cursheet[encode_col(c) + encode_row(r)] = cell;
                }
                if (cell.HRef) {
                  cell.l = { Target: unescapexml(cell.HRef) };
                  if (cell.HRefScreenTip)
                    cell.l.Tooltip = cell.HRefScreenTip;
                  delete cell.HRef;
                  delete cell.HRefScreenTip;
                }
                if (cell.MergeAcross || cell.MergeDown) {
                  cc = c + (parseInt(cell.MergeAcross, 10) | 0);
                  rr = r + (parseInt(cell.MergeDown, 10) | 0);
                  merges.push({ s: { c, r }, e: { c: cc, r: rr } });
                }
                if (!opts.sheetStubs) {
                  if (cell.MergeAcross)
                    c = cc + 1;
                  else
                    ++c;
                } else if (cell.MergeAcross || cell.MergeDown) {
                  for (var cma = c; cma <= cc; ++cma) {
                    for (var cmd = r; cmd <= rr; ++cmd) {
                      if (cma > c || cmd > r) {
                        if (opts.dense) {
                          if (!cursheet[cmd])
                            cursheet[cmd] = [];
                          cursheet[cmd][cma] = { t: "z" };
                        } else
                          cursheet[encode_col(cma) + encode_row(cmd)] = { t: "z" };
                      }
                    }
                  }
                  c = cc + 1;
                } else
                  ++c;
              } else {
                cell = xlml_parsexmltagobj(Rn[0]);
                if (cell.Index)
                  c = +cell.Index - 1;
                if (c < refguess.s.c)
                  refguess.s.c = c;
                if (c > refguess.e.c)
                  refguess.e.c = c;
                if (Rn[0].slice(-2) === "/>")
                  ++c;
                comments = [];
              }
              break;
            case "row":
              if (Rn[1] === "/" || Rn[0].slice(-2) === "/>") {
                if (r < refguess.s.r)
                  refguess.s.r = r;
                if (r > refguess.e.r)
                  refguess.e.r = r;
                if (Rn[0].slice(-2) === "/>") {
                  row = xlml_parsexmltag(Rn[0]);
                  if (row.Index)
                    r = +row.Index - 1;
                }
                c = 0;
                ++r;
              } else {
                row = xlml_parsexmltag(Rn[0]);
                if (row.Index)
                  r = +row.Index - 1;
                rowobj = {};
                if (row.AutoFitHeight == "0" || row.Height) {
                  rowobj.hpx = parseInt(row.Height, 10);
                  rowobj.hpt = px2pt(rowobj.hpx);
                  rowinfo[r] = rowobj;
                }
                if (row.Hidden == "1") {
                  rowobj.hidden = true;
                  rowinfo[r] = rowobj;
                }
              }
              break;
            case "worksheet":
              if (Rn[1] === "/") {
                if ((tmp = state.pop())[0] !== Rn[3])
                  throw new Error("Bad state: " + tmp.join("|"));
                sheetnames.push(sheetname);
                if (refguess.s.r <= refguess.e.r && refguess.s.c <= refguess.e.c) {
                  cursheet["!ref"] = encode_range(refguess);
                  if (opts.sheetRows && opts.sheetRows <= refguess.e.r) {
                    cursheet["!fullref"] = cursheet["!ref"];
                    refguess.e.r = opts.sheetRows - 1;
                    cursheet["!ref"] = encode_range(refguess);
                  }
                }
                if (merges.length)
                  cursheet["!merges"] = merges;
                if (cstys.length > 0)
                  cursheet["!cols"] = cstys;
                if (rowinfo.length > 0)
                  cursheet["!rows"] = rowinfo;
                sheets[sheetname] = cursheet;
              } else {
                refguess = { s: { r: 2e6, c: 2e6 }, e: { r: 0, c: 0 } };
                r = c = 0;
                state.push([Rn[3], false]);
                tmp = xlml_parsexmltag(Rn[0]);
                sheetname = unescapexml(tmp.Name);
                cursheet = opts.dense ? [] : {};
                merges = [];
                arrayf = [];
                rowinfo = [];
                wsprops = { name: sheetname, Hidden: 0 };
                Workbook.Sheets.push(wsprops);
              }
              break;
            case "table":
              if (Rn[1] === "/") {
                if ((tmp = state.pop())[0] !== Rn[3])
                  throw new Error("Bad state: " + tmp.join("|"));
              } else if (Rn[0].slice(-2) == "/>")
                break;
              else {
                table = xlml_parsexmltag(Rn[0]);
                state.push([Rn[3], false]);
                cstys = [];
                seencol = false;
              }
              break;
            case "style":
              if (Rn[1] === "/")
                process_style_xlml(styles, stag, opts);
              else
                stag = xlml_parsexmltag(Rn[0]);
              break;
            case "numberformat":
              stag.nf = unescapexml(xlml_parsexmltag(Rn[0]).Format || "General");
              if (XLMLFormatMap[stag.nf])
                stag.nf = XLMLFormatMap[stag.nf];
              for (var ssfidx = 0; ssfidx != 392; ++ssfidx)
                if (SSF._table[ssfidx] == stag.nf)
                  break;
              if (ssfidx == 392) {
                for (ssfidx = 57; ssfidx != 392; ++ssfidx)
                  if (SSF._table[ssfidx] == null) {
                    SSF.load(stag.nf, ssfidx);
                    break;
                  }
              }
              break;
            case "column":
              if (state[state.length - 1][0] !== "table")
                break;
              csty = xlml_parsexmltag(Rn[0]);
              if (csty.Hidden) {
                csty.hidden = true;
                delete csty.Hidden;
              }
              if (csty.Width)
                csty.wpx = parseInt(csty.Width, 10);
              if (!seencol && csty.wpx > 10) {
                seencol = true;
                MDW = DEF_MDW;
                for (var _col = 0; _col < cstys.length; ++_col)
                  if (cstys[_col])
                    process_col(cstys[_col]);
              }
              if (seencol)
                process_col(csty);
              cstys[csty.Index - 1 || cstys.length] = csty;
              for (var i2 = 0; i2 < +csty.Span; ++i2)
                cstys[cstys.length] = dup(csty);
              break;
            case "namedrange":
              if (Rn[1] === "/")
                break;
              if (!Workbook.Names)
                Workbook.Names = [];
              var _NamedRange = parsexmltag(Rn[0]);
              var _DefinedName = {
                Name: _NamedRange.Name,
                Ref: rc_to_a1(_NamedRange.RefersTo.slice(1), { r: 0, c: 0 })
              };
              if (Workbook.Sheets.length > 0)
                _DefinedName.Sheet = Workbook.Sheets.length - 1;
              Workbook.Names.push(_DefinedName);
              break;
            case "namedcell":
              break;
            case "b":
              break;
            case "i":
              break;
            case "u":
              break;
            case "s":
              break;
            case "em":
              break;
            case "h2":
              break;
            case "h3":
              break;
            case "sub":
              break;
            case "sup":
              break;
            case "span":
              break;
            case "alignment":
              break;
            case "borders":
              break;
            case "border":
              break;
            case "font":
              if (Rn[0].slice(-2) === "/>")
                break;
              else if (Rn[1] === "/")
                ss += str.slice(fidx, Rn.index);
              else
                fidx = Rn.index + Rn[0].length;
              break;
            case "interior":
              if (!opts.cellStyles)
                break;
              stag.Interior = xlml_parsexmltag(Rn[0]);
              break;
            case "protection":
              break;
            case "author":
            case "title":
            case "description":
            case "created":
            case "keywords":
            case "subject":
            case "category":
            case "company":
            case "lastauthor":
            case "lastsaved":
            case "lastprinted":
            case "version":
            case "revision":
            case "totaltime":
            case "hyperlinkbase":
            case "manager":
            case "contentstatus":
            case "identifier":
            case "language":
            case "appname":
              if (Rn[0].slice(-2) === "/>")
                break;
              else if (Rn[1] === "/")
                xlml_set_prop(Props, raw_Rn3, str.slice(pidx, Rn.index));
              else
                pidx = Rn.index + Rn[0].length;
              break;
            case "paragraphs":
              break;
            case "styles":
            case "workbook":
              if (Rn[1] === "/") {
                if ((tmp = state.pop())[0] !== Rn[3])
                  throw new Error("Bad state: " + tmp.join("|"));
              } else
                state.push([Rn[3], false]);
              break;
            case "comment":
              if (Rn[1] === "/") {
                if ((tmp = state.pop())[0] !== Rn[3])
                  throw new Error("Bad state: " + tmp.join("|"));
                xlml_clean_comment(comment);
                comments.push(comment);
              } else {
                state.push([Rn[3], false]);
                tmp = xlml_parsexmltag(Rn[0]);
                comment = { a: tmp.Author };
              }
              break;
            case "autofilter":
              if (Rn[1] === "/") {
                if ((tmp = state.pop())[0] !== Rn[3])
                  throw new Error("Bad state: " + tmp.join("|"));
              } else if (Rn[0].charAt(Rn[0].length - 2) !== "/") {
                var AutoFilter = xlml_parsexmltag(Rn[0]);
                cursheet["!autofilter"] = { ref: rc_to_a1(AutoFilter.Range).replace(/\$/g, "") };
                state.push([Rn[3], true]);
              }
              break;
            case "name":
              break;
            case "datavalidation":
              if (Rn[1] === "/") {
                if ((tmp = state.pop())[0] !== Rn[3])
                  throw new Error("Bad state: " + tmp.join("|"));
              } else {
                if (Rn[0].charAt(Rn[0].length - 2) !== "/")
                  state.push([Rn[3], true]);
              }
              break;
            case "pixelsperinch":
              break;
            case "componentoptions":
            case "documentproperties":
            case "customdocumentproperties":
            case "officedocumentsettings":
            case "pivottable":
            case "pivotcache":
            case "names":
            case "mapinfo":
            case "pagebreaks":
            case "querytable":
            case "sorting":
            case "schema":
            case "conditionalformatting":
            case "smarttagtype":
            case "smarttags":
            case "excelworkbook":
            case "workbookoptions":
            case "worksheetoptions":
              if (Rn[1] === "/") {
                if ((tmp = state.pop())[0] !== Rn[3])
                  throw new Error("Bad state: " + tmp.join("|"));
              } else if (Rn[0].charAt(Rn[0].length - 2) !== "/")
                state.push([Rn[3], true]);
              break;
            default:
              if (state.length == 0 && Rn[3] == "document")
                return parse_fods(str, opts);
              if (state.length == 0 && Rn[3] == "uof")
                return parse_fods(str, opts);
              var seen = true;
              switch (state[state.length - 1][0]) {
                case "officedocumentsettings":
                  switch (Rn[3]) {
                    case "allowpng":
                      break;
                    case "removepersonalinformation":
                      break;
                    case "downloadcomponents":
                      break;
                    case "locationofcomponents":
                      break;
                    case "colors":
                      break;
                    case "color":
                      break;
                    case "index":
                      break;
                    case "rgb":
                      break;
                    case "targetscreensize":
                      break;
                    case "readonlyrecommended":
                      break;
                    default:
                      seen = false;
                  }
                  break;
                case "componentoptions":
                  switch (Rn[3]) {
                    case "toolbar":
                      break;
                    case "hideofficelogo":
                      break;
                    case "spreadsheetautofit":
                      break;
                    case "label":
                      break;
                    case "caption":
                      break;
                    case "maxheight":
                      break;
                    case "maxwidth":
                      break;
                    case "nextsheetnumber":
                      break;
                    default:
                      seen = false;
                  }
                  break;
                case "excelworkbook":
                  switch (Rn[3]) {
                    case "date1904":
                      Workbook.WBProps.date1904 = true;
                      break;
                    case "windowheight":
                      break;
                    case "windowwidth":
                      break;
                    case "windowtopx":
                      break;
                    case "windowtopy":
                      break;
                    case "tabratio":
                      break;
                    case "protectstructure":
                      break;
                    case "protectwindow":
                      break;
                    case "protectwindows":
                      break;
                    case "activesheet":
                      break;
                    case "displayinknotes":
                      break;
                    case "firstvisiblesheet":
                      break;
                    case "supbook":
                      break;
                    case "sheetname":
                      break;
                    case "sheetindex":
                      break;
                    case "sheetindexfirst":
                      break;
                    case "sheetindexlast":
                      break;
                    case "dll":
                      break;
                    case "acceptlabelsinformulas":
                      break;
                    case "donotsavelinkvalues":
                      break;
                    case "iteration":
                      break;
                    case "maxiterations":
                      break;
                    case "maxchange":
                      break;
                    case "path":
                      break;
                    case "xct":
                      break;
                    case "count":
                      break;
                    case "selectedsheets":
                      break;
                    case "calculation":
                      break;
                    case "uncalced":
                      break;
                    case "startupprompt":
                      break;
                    case "crn":
                      break;
                    case "externname":
                      break;
                    case "formula":
                      break;
                    case "colfirst":
                      break;
                    case "collast":
                      break;
                    case "wantadvise":
                      break;
                    case "boolean":
                      break;
                    case "error":
                      break;
                    case "text":
                      break;
                    case "ole":
                      break;
                    case "noautorecover":
                      break;
                    case "publishobjects":
                      break;
                    case "donotcalculatebeforesave":
                      break;
                    case "number":
                      break;
                    case "refmoder1c1":
                      break;
                    case "embedsavesmarttags":
                      break;
                    default:
                      seen = false;
                  }
                  break;
                case "workbookoptions":
                  switch (Rn[3]) {
                    case "owcversion":
                      break;
                    case "height":
                      break;
                    case "width":
                      break;
                    default:
                      seen = false;
                  }
                  break;
                case "worksheetoptions":
                  switch (Rn[3]) {
                    case "visible":
                      if (Rn[0].slice(-2) === "/>") {
                      } else if (Rn[1] === "/")
                        switch (str.slice(pidx, Rn.index)) {
                          case "SheetHidden":
                            wsprops.Hidden = 1;
                            break;
                          case "SheetVeryHidden":
                            wsprops.Hidden = 2;
                            break;
                        }
                      else
                        pidx = Rn.index + Rn[0].length;
                      break;
                    case "header":
                      if (!cursheet["!margins"])
                        default_margins(cursheet["!margins"] = {}, "xlml");
                      cursheet["!margins"].header = parsexmltag(Rn[0]).Margin;
                      break;
                    case "footer":
                      if (!cursheet["!margins"])
                        default_margins(cursheet["!margins"] = {}, "xlml");
                      cursheet["!margins"].footer = parsexmltag(Rn[0]).Margin;
                      break;
                    case "pagemargins":
                      var pagemargins = parsexmltag(Rn[0]);
                      if (!cursheet["!margins"])
                        default_margins(cursheet["!margins"] = {}, "xlml");
                      if (pagemargins.Top)
                        cursheet["!margins"].top = pagemargins.Top;
                      if (pagemargins.Left)
                        cursheet["!margins"].left = pagemargins.Left;
                      if (pagemargins.Right)
                        cursheet["!margins"].right = pagemargins.Right;
                      if (pagemargins.Bottom)
                        cursheet["!margins"].bottom = pagemargins.Bottom;
                      break;
                    case "displayrighttoleft":
                      if (!Workbook.Views)
                        Workbook.Views = [];
                      if (!Workbook.Views[0])
                        Workbook.Views[0] = {};
                      Workbook.Views[0].RTL = true;
                      break;
                    case "freezepanes":
                      break;
                    case "frozennosplit":
                      break;
                    case "splithorizontal":
                    case "splitvertical":
                      break;
                    case "donotdisplaygridlines":
                      break;
                    case "activerow":
                      break;
                    case "activecol":
                      break;
                    case "toprowbottompane":
                      break;
                    case "leftcolumnrightpane":
                      break;
                    case "unsynced":
                      break;
                    case "print":
                      break;
                    case "printerrors":
                      break;
                    case "panes":
                      break;
                    case "scale":
                      break;
                    case "pane":
                      break;
                    case "number":
                      break;
                    case "layout":
                      break;
                    case "pagesetup":
                      break;
                    case "selected":
                      break;
                    case "protectobjects":
                      break;
                    case "enableselection":
                      break;
                    case "protectscenarios":
                      break;
                    case "validprinterinfo":
                      break;
                    case "horizontalresolution":
                      break;
                    case "verticalresolution":
                      break;
                    case "numberofcopies":
                      break;
                    case "activepane":
                      break;
                    case "toprowvisible":
                      break;
                    case "leftcolumnvisible":
                      break;
                    case "fittopage":
                      break;
                    case "rangeselection":
                      break;
                    case "papersizeindex":
                      break;
                    case "pagelayoutzoom":
                      break;
                    case "pagebreakzoom":
                      break;
                    case "filteron":
                      break;
                    case "fitwidth":
                      break;
                    case "fitheight":
                      break;
                    case "commentslayout":
                      break;
                    case "zoom":
                      break;
                    case "lefttoright":
                      break;
                    case "gridlines":
                      break;
                    case "allowsort":
                      break;
                    case "allowfilter":
                      break;
                    case "allowinsertrows":
                      break;
                    case "allowdeleterows":
                      break;
                    case "allowinsertcols":
                      break;
                    case "allowdeletecols":
                      break;
                    case "allowinserthyperlinks":
                      break;
                    case "allowformatcells":
                      break;
                    case "allowsizecols":
                      break;
                    case "allowsizerows":
                      break;
                    case "nosummaryrowsbelowdetail":
                      if (!cursheet["!outline"])
                        cursheet["!outline"] = {};
                      cursheet["!outline"].above = true;
                      break;
                    case "tabcolorindex":
                      break;
                    case "donotdisplayheadings":
                      break;
                    case "showpagelayoutzoom":
                      break;
                    case "nosummarycolumnsrightdetail":
                      if (!cursheet["!outline"])
                        cursheet["!outline"] = {};
                      cursheet["!outline"].left = true;
                      break;
                    case "blackandwhite":
                      break;
                    case "donotdisplayzeros":
                      break;
                    case "displaypagebreak":
                      break;
                    case "rowcolheadings":
                      break;
                    case "donotdisplayoutline":
                      break;
                    case "noorientation":
                      break;
                    case "allowusepivottables":
                      break;
                    case "zeroheight":
                      break;
                    case "viewablerange":
                      break;
                    case "selection":
                      break;
                    case "protectcontents":
                      break;
                    default:
                      seen = false;
                  }
                  break;
                case "pivottable":
                case "pivotcache":
                  switch (Rn[3]) {
                    case "immediateitemsondrop":
                      break;
                    case "showpagemultipleitemlabel":
                      break;
                    case "compactrowindent":
                      break;
                    case "location":
                      break;
                    case "pivotfield":
                      break;
                    case "orientation":
                      break;
                    case "layoutform":
                      break;
                    case "layoutsubtotallocation":
                      break;
                    case "layoutcompactrow":
                      break;
                    case "position":
                      break;
                    case "pivotitem":
                      break;
                    case "datatype":
                      break;
                    case "datafield":
                      break;
                    case "sourcename":
                      break;
                    case "parentfield":
                      break;
                    case "ptlineitems":
                      break;
                    case "ptlineitem":
                      break;
                    case "countofsameitems":
                      break;
                    case "item":
                      break;
                    case "itemtype":
                      break;
                    case "ptsource":
                      break;
                    case "cacheindex":
                      break;
                    case "consolidationreference":
                      break;
                    case "filename":
                      break;
                    case "reference":
                      break;
                    case "nocolumngrand":
                      break;
                    case "norowgrand":
                      break;
                    case "blanklineafteritems":
                      break;
                    case "hidden":
                      break;
                    case "subtotal":
                      break;
                    case "basefield":
                      break;
                    case "mapchilditems":
                      break;
                    case "function":
                      break;
                    case "refreshonfileopen":
                      break;
                    case "printsettitles":
                      break;
                    case "mergelabels":
                      break;
                    case "defaultversion":
                      break;
                    case "refreshname":
                      break;
                    case "refreshdate":
                      break;
                    case "refreshdatecopy":
                      break;
                    case "versionlastrefresh":
                      break;
                    case "versionlastupdate":
                      break;
                    case "versionupdateablemin":
                      break;
                    case "versionrefreshablemin":
                      break;
                    case "calculation":
                      break;
                    default:
                      seen = false;
                  }
                  break;
                case "pagebreaks":
                  switch (Rn[3]) {
                    case "colbreaks":
                      break;
                    case "colbreak":
                      break;
                    case "rowbreaks":
                      break;
                    case "rowbreak":
                      break;
                    case "colstart":
                      break;
                    case "colend":
                      break;
                    case "rowend":
                      break;
                    default:
                      seen = false;
                  }
                  break;
                case "autofilter":
                  switch (Rn[3]) {
                    case "autofiltercolumn":
                      break;
                    case "autofiltercondition":
                      break;
                    case "autofilterand":
                      break;
                    case "autofilteror":
                      break;
                    default:
                      seen = false;
                  }
                  break;
                case "querytable":
                  switch (Rn[3]) {
                    case "id":
                      break;
                    case "autoformatfont":
                      break;
                    case "autoformatpattern":
                      break;
                    case "querysource":
                      break;
                    case "querytype":
                      break;
                    case "enableredirections":
                      break;
                    case "refreshedinxl9":
                      break;
                    case "urlstring":
                      break;
                    case "htmltables":
                      break;
                    case "connection":
                      break;
                    case "commandtext":
                      break;
                    case "refreshinfo":
                      break;
                    case "notitles":
                      break;
                    case "nextid":
                      break;
                    case "columninfo":
                      break;
                    case "overwritecells":
                      break;
                    case "donotpromptforfile":
                      break;
                    case "textwizardsettings":
                      break;
                    case "source":
                      break;
                    case "number":
                      break;
                    case "decimal":
                      break;
                    case "thousandseparator":
                      break;
                    case "trailingminusnumbers":
                      break;
                    case "formatsettings":
                      break;
                    case "fieldtype":
                      break;
                    case "delimiters":
                      break;
                    case "tab":
                      break;
                    case "comma":
                      break;
                    case "autoformatname":
                      break;
                    case "versionlastedit":
                      break;
                    case "versionlastrefresh":
                      break;
                    default:
                      seen = false;
                  }
                  break;
                case "datavalidation":
                  switch (Rn[3]) {
                    case "range":
                      break;
                    case "type":
                      break;
                    case "min":
                      break;
                    case "max":
                      break;
                    case "sort":
                      break;
                    case "descending":
                      break;
                    case "order":
                      break;
                    case "casesensitive":
                      break;
                    case "value":
                      break;
                    case "errorstyle":
                      break;
                    case "errormessage":
                      break;
                    case "errortitle":
                      break;
                    case "inputmessage":
                      break;
                    case "inputtitle":
                      break;
                    case "combohide":
                      break;
                    case "inputhide":
                      break;
                    case "condition":
                      break;
                    case "qualifier":
                      break;
                    case "useblank":
                      break;
                    case "value1":
                      break;
                    case "value2":
                      break;
                    case "format":
                      break;
                    case "cellrangelist":
                      break;
                    default:
                      seen = false;
                  }
                  break;
                case "sorting":
                case "conditionalformatting":
                  switch (Rn[3]) {
                    case "range":
                      break;
                    case "type":
                      break;
                    case "min":
                      break;
                    case "max":
                      break;
                    case "sort":
                      break;
                    case "descending":
                      break;
                    case "order":
                      break;
                    case "casesensitive":
                      break;
                    case "value":
                      break;
                    case "errorstyle":
                      break;
                    case "errormessage":
                      break;
                    case "errortitle":
                      break;
                    case "cellrangelist":
                      break;
                    case "inputmessage":
                      break;
                    case "inputtitle":
                      break;
                    case "combohide":
                      break;
                    case "inputhide":
                      break;
                    case "condition":
                      break;
                    case "qualifier":
                      break;
                    case "useblank":
                      break;
                    case "value1":
                      break;
                    case "value2":
                      break;
                    case "format":
                      break;
                    default:
                      seen = false;
                  }
                  break;
                case "mapinfo":
                case "schema":
                case "data":
                  switch (Rn[3]) {
                    case "map":
                      break;
                    case "entry":
                      break;
                    case "range":
                      break;
                    case "xpath":
                      break;
                    case "field":
                      break;
                    case "xsdtype":
                      break;
                    case "filteron":
                      break;
                    case "aggregate":
                      break;
                    case "elementtype":
                      break;
                    case "attributetype":
                      break;
                    case "schema":
                    case "element":
                    case "complextype":
                    case "datatype":
                    case "all":
                    case "attribute":
                    case "extends":
                      break;
                    case "row":
                      break;
                    default:
                      seen = false;
                  }
                  break;
                case "smarttags":
                  break;
                default:
                  seen = false;
                  break;
              }
              if (seen)
                break;
              if (Rn[3].match(/!\[CDATA/))
                break;
              if (!state[state.length - 1][1])
                throw "Unrecognized tag: " + Rn[3] + "|" + state.join("|");
              if (state[state.length - 1][0] === "customdocumentproperties") {
                if (Rn[0].slice(-2) === "/>")
                  break;
                else if (Rn[1] === "/")
                  xlml_set_custprop(Custprops, raw_Rn3, cp, str.slice(pidx, Rn.index));
                else {
                  cp = Rn;
                  pidx = Rn.index + Rn[0].length;
                }
                break;
              }
              if (opts.WTF)
                throw "Unrecognized tag: " + Rn[3] + "|" + state.join("|");
          }
        var out = {};
        if (!opts.bookSheets && !opts.bookProps)
          out.Sheets = sheets;
        out.SheetNames = sheetnames;
        out.Workbook = Workbook;
        out.SSF = SSF.get_table();
        out.Props = Props;
        out.Custprops = Custprops;
        return out;
      }
      function parse_xlml(data, opts) {
        fix_read_opts(opts = opts || {});
        switch (opts.type || "base64") {
          case "base64":
            return parse_xlml_xml(Base64.decode(data), opts);
          case "binary":
          case "buffer":
          case "file":
            return parse_xlml_xml(data, opts);
          case "array":
            return parse_xlml_xml(a2s(data), opts);
        }
      }
      function write_props_xlml(wb, opts) {
        var o = [];
        if (wb.Props)
          o.push(xlml_write_docprops(wb.Props, opts));
        if (wb.Custprops)
          o.push(xlml_write_custprops(wb.Props, wb.Custprops, opts));
        return o.join("");
      }
      function write_wb_xlml() {
        return "";
      }
      function write_sty_xlml(wb, opts) {
        var styles = ['<Style ss:ID="Default" ss:Name="Normal"><NumberFormat/></Style>'];
        opts.cellXfs.forEach(function(xf, id) {
          var payload = [];
          payload.push(writextag("NumberFormat", null, { "ss:Format": escapexml(SSF._table[xf.numFmtId]) }));
          var o = { "ss:ID": "s" + (21 + id) };
          styles.push(writextag("Style", payload.join(""), o));
        });
        return writextag("Styles", styles.join(""));
      }
      function write_name_xlml(n) {
        return writextag("NamedRange", null, { "ss:Name": n.Name, "ss:RefersTo": "=" + a1_to_rc(n.Ref, { r: 0, c: 0 }) });
      }
      function write_names_xlml(wb) {
        if (!((wb || {}).Workbook || {}).Names)
          return "";
        var names = wb.Workbook.Names;
        var out = [];
        for (var i2 = 0; i2 < names.length; ++i2) {
          var n = names[i2];
          if (n.Sheet != null)
            continue;
          if (n.Name.match(/^_xlfn\./))
            continue;
          out.push(write_name_xlml(n));
        }
        return writextag("Names", out.join(""));
      }
      function write_ws_xlml_names(ws, opts, idx, wb) {
        if (!ws)
          return "";
        if (!((wb || {}).Workbook || {}).Names)
          return "";
        var names = wb.Workbook.Names;
        var out = [];
        for (var i2 = 0; i2 < names.length; ++i2) {
          var n = names[i2];
          if (n.Sheet != idx)
            continue;
          if (n.Name.match(/^_xlfn\./))
            continue;
          out.push(write_name_xlml(n));
        }
        return out.join("");
      }
      function write_ws_xlml_wsopts(ws, opts, idx, wb) {
        if (!ws)
          return "";
        var o = [];
        if (ws["!margins"]) {
          o.push("<PageSetup>");
          if (ws["!margins"].header)
            o.push(writextag("Header", null, { "x:Margin": ws["!margins"].header }));
          if (ws["!margins"].footer)
            o.push(writextag("Footer", null, { "x:Margin": ws["!margins"].footer }));
          o.push(writextag("PageMargins", null, {
            "x:Bottom": ws["!margins"].bottom || "0.75",
            "x:Left": ws["!margins"].left || "0.7",
            "x:Right": ws["!margins"].right || "0.7",
            "x:Top": ws["!margins"].top || "0.75"
          }));
          o.push("</PageSetup>");
        }
        if (wb && wb.Workbook && wb.Workbook.Sheets && wb.Workbook.Sheets[idx]) {
          if (wb.Workbook.Sheets[idx].Hidden)
            o.push(writextag("Visible", wb.Workbook.Sheets[idx].Hidden == 1 ? "SheetHidden" : "SheetVeryHidden", {}));
          else {
            for (var i2 = 0; i2 < idx; ++i2)
              if (wb.Workbook.Sheets[i2] && !wb.Workbook.Sheets[i2].Hidden)
                break;
            if (i2 == idx)
              o.push("<Selected/>");
          }
        }
        if (((((wb || {}).Workbook || {}).Views || [])[0] || {}).RTL)
          o.push("<DisplayRightToLeft/>");
        if (ws["!protect"]) {
          o.push(writetag("ProtectContents", "True"));
          if (ws["!protect"].objects)
            o.push(writetag("ProtectObjects", "True"));
          if (ws["!protect"].scenarios)
            o.push(writetag("ProtectScenarios", "True"));
          if (ws["!protect"].selectLockedCells != null && !ws["!protect"].selectLockedCells)
            o.push(writetag("EnableSelection", "NoSelection"));
          else if (ws["!protect"].selectUnlockedCells != null && !ws["!protect"].selectUnlockedCells)
            o.push(writetag("EnableSelection", "UnlockedCells"));
          [
            ["formatCells", "AllowFormatCells"],
            ["formatColumns", "AllowSizeCols"],
            ["formatRows", "AllowSizeRows"],
            ["insertColumns", "AllowInsertCols"],
            ["insertRows", "AllowInsertRows"],
            ["insertHyperlinks", "AllowInsertHyperlinks"],
            ["deleteColumns", "AllowDeleteCols"],
            ["deleteRows", "AllowDeleteRows"],
            ["sort", "AllowSort"],
            ["autoFilter", "AllowFilter"],
            ["pivotTables", "AllowUsePivotTables"]
          ].forEach(function(x) {
            if (ws["!protect"][x[0]])
              o.push("<" + x[1] + "/>");
          });
        }
        if (o.length == 0)
          return "";
        return writextag("WorksheetOptions", o.join(""), { xmlns: XLMLNS.x });
      }
      function write_ws_xlml_comment(comments) {
        return comments.map(function(c) {
          var t = xlml_unfixstr(c.t || "");
          var d = writextag("ss:Data", t, { "xmlns": "http://www.w3.org/TR/REC-html40" });
          return writextag("Comment", d, { "ss:Author": c.a });
        }).join("");
      }
      function write_ws_xlml_cell(cell, ref, ws, opts, idx, wb, addr) {
        if (!cell || cell.v == void 0 && cell.f == void 0)
          return "";
        var attr = {};
        if (cell.f)
          attr["ss:Formula"] = "=" + escapexml(a1_to_rc(cell.f, addr));
        if (cell.F && cell.F.slice(0, ref.length) == ref) {
          var end = decode_cell(cell.F.slice(ref.length + 1));
          attr["ss:ArrayRange"] = "RC:R" + (end.r == addr.r ? "" : "[" + (end.r - addr.r) + "]") + "C" + (end.c == addr.c ? "" : "[" + (end.c - addr.c) + "]");
        }
        if (cell.l && cell.l.Target) {
          attr["ss:HRef"] = escapexml(cell.l.Target);
          if (cell.l.Tooltip)
            attr["x:HRefScreenTip"] = escapexml(cell.l.Tooltip);
        }
        if (ws["!merges"]) {
          var marr = ws["!merges"];
          for (var mi = 0; mi != marr.length; ++mi) {
            if (marr[mi].s.c != addr.c || marr[mi].s.r != addr.r)
              continue;
            if (marr[mi].e.c > marr[mi].s.c)
              attr["ss:MergeAcross"] = marr[mi].e.c - marr[mi].s.c;
            if (marr[mi].e.r > marr[mi].s.r)
              attr["ss:MergeDown"] = marr[mi].e.r - marr[mi].s.r;
          }
        }
        var t = "", p = "";
        switch (cell.t) {
          case "z":
            if (!opts.sheetStubs)
              return "";
            break;
          case "n":
            t = "Number";
            p = String(cell.v);
            break;
          case "b":
            t = "Boolean";
            p = cell.v ? "1" : "0";
            break;
          case "e":
            t = "Error";
            p = BErr[cell.v];
            break;
          case "d":
            t = "DateTime";
            p = new Date(cell.v).toISOString();
            if (cell.z == null)
              cell.z = cell.z || SSF._table[14];
            break;
          case "s":
            t = "String";
            p = escapexlml(cell.v || "");
            break;
        }
        var os = get_cell_style(opts.cellXfs, cell, opts);
        attr["ss:StyleID"] = "s" + (21 + os);
        attr["ss:Index"] = addr.c + 1;
        var _v = cell.v != null ? p : "";
        var m = cell.t == "z" ? "" : '<Data ss:Type="' + t + '">' + _v + "</Data>";
        if ((cell.c || []).length > 0)
          m += write_ws_xlml_comment(cell.c);
        return writextag("Cell", m, attr);
      }
      function write_ws_xlml_row(R, row) {
        var o = '<Row ss:Index="' + (R + 1) + '"';
        if (row) {
          if (row.hpt && !row.hpx)
            row.hpx = pt2px(row.hpt);
          if (row.hpx)
            o += ' ss:AutoFitHeight="0" ss:Height="' + row.hpx + '"';
          if (row.hidden)
            o += ' ss:Hidden="1"';
        }
        return o + ">";
      }
      function write_ws_xlml_table(ws, opts, idx, wb) {
        if (!ws["!ref"])
          return "";
        var range = safe_decode_range(ws["!ref"]);
        var marr = ws["!merges"] || [], mi = 0;
        var o = [];
        if (ws["!cols"])
          ws["!cols"].forEach(function(n, i2) {
            process_col(n);
            var w = !!n.width;
            var p = col_obj_w(i2, n);
            var k = { "ss:Index": i2 + 1 };
            if (w)
              k["ss:Width"] = width2px(p.width);
            if (n.hidden)
              k["ss:Hidden"] = "1";
            o.push(writextag("Column", null, k));
          });
        var dense = Array.isArray(ws);
        for (var R = range.s.r; R <= range.e.r; ++R) {
          var row = [write_ws_xlml_row(R, (ws["!rows"] || [])[R])];
          for (var C = range.s.c; C <= range.e.c; ++C) {
            var skip = false;
            for (mi = 0; mi != marr.length; ++mi) {
              if (marr[mi].s.c > C)
                continue;
              if (marr[mi].s.r > R)
                continue;
              if (marr[mi].e.c < C)
                continue;
              if (marr[mi].e.r < R)
                continue;
              if (marr[mi].s.c != C || marr[mi].s.r != R)
                skip = true;
              break;
            }
            if (skip)
              continue;
            var addr = { r: R, c: C };
            var ref = encode_cell(addr), cell = dense ? (ws[R] || [])[C] : ws[ref];
            row.push(write_ws_xlml_cell(cell, ref, ws, opts, idx, wb, addr));
          }
          row.push("</Row>");
          if (row.length > 2)
            o.push(row.join(""));
        }
        return o.join("");
      }
      function write_ws_xlml(idx, opts, wb) {
        var o = [];
        var s = wb.SheetNames[idx];
        var ws = wb.Sheets[s];
        var t = ws ? write_ws_xlml_names(ws, opts, idx, wb) : "";
        if (t.length > 0)
          o.push("<Names>" + t + "</Names>");
        t = ws ? write_ws_xlml_table(ws, opts, idx, wb) : "";
        if (t.length > 0)
          o.push("<Table>" + t + "</Table>");
        o.push(write_ws_xlml_wsopts(ws, opts, idx, wb));
        return o.join("");
      }
      function write_xlml(wb, opts) {
        if (!opts)
          opts = {};
        if (!wb.SSF)
          wb.SSF = SSF.get_table();
        if (wb.SSF) {
          make_ssf(SSF);
          SSF.load_table(wb.SSF);
          opts.revssf = evert_num(wb.SSF);
          opts.revssf[wb.SSF[65535]] = 0;
          opts.ssf = wb.SSF;
          opts.cellXfs = [];
          get_cell_style(opts.cellXfs, {}, { revssf: { "General": 0 } });
        }
        var d = [];
        d.push(write_props_xlml(wb, opts));
        d.push(write_wb_xlml(wb, opts));
        d.push("");
        d.push("");
        for (var i2 = 0; i2 < wb.SheetNames.length; ++i2)
          d.push(writextag("Worksheet", write_ws_xlml(i2, opts, wb), { "ss:Name": escapexml(wb.SheetNames[i2]) }));
        d[2] = write_sty_xlml(wb, opts);
        d[3] = write_names_xlml(wb, opts);
        return XML_HEADER + writextag("Workbook", d.join(""), {
          "xmlns": XLMLNS.ss,
          "xmlns:o": XLMLNS.o,
          "xmlns:x": XLMLNS.x,
          "xmlns:ss": XLMLNS.ss,
          "xmlns:dt": XLMLNS.dt,
          "xmlns:html": XLMLNS.html
        });
      }
      function parse_compobj(obj) {
        var v = {};
        var o = obj.content;
        o.l = 28;
        v.AnsiUserType = o.read_shift(0, "lpstr-ansi");
        v.AnsiClipboardFormat = parse_ClipboardFormatOrAnsiString(o);
        if (o.length - o.l <= 4)
          return v;
        var m = o.read_shift(4);
        if (m == 0 || m > 40)
          return v;
        o.l -= 4;
        v.Reserved1 = o.read_shift(0, "lpstr-ansi");
        if (o.length - o.l <= 4)
          return v;
        m = o.read_shift(4);
        if (m !== 1907505652)
          return v;
        v.UnicodeClipboardFormat = parse_ClipboardFormatOrUnicodeString(o);
        m = o.read_shift(4);
        if (m == 0 || m > 40)
          return v;
        o.l -= 4;
        v.Reserved2 = o.read_shift(0, "lpwstr");
      }
      function slurp(R, blob, length, opts) {
        var l = length;
        var bufs = [];
        var d = blob.slice(blob.l, blob.l + l);
        if (opts && opts.enc && opts.enc.insitu && d.length > 0)
          switch (R.n) {
            case "BOF":
            case "FilePass":
            case "FileLock":
            case "InterfaceHdr":
            case "RRDInfo":
            case "RRDHead":
            case "UsrExcl":
            case "EOF":
              break;
            case "BoundSheet8":
              break;
            default:
              opts.enc.insitu(d);
          }
        bufs.push(d);
        blob.l += l;
        var next = XLSRecordEnum[__readUInt16LE(blob, blob.l)];
        var start = 0;
        while (next != null && next.n.slice(0, 8) === "Continue") {
          l = __readUInt16LE(blob, blob.l + 2);
          start = blob.l + 4;
          if (next.n == "ContinueFrt")
            start += 4;
          else if (next.n.slice(0, 11) == "ContinueFrt") {
            start += 12;
          }
          d = blob.slice(start, blob.l + 4 + l);
          bufs.push(d);
          blob.l += 4 + l;
          next = XLSRecordEnum[__readUInt16LE(blob, blob.l)];
        }
        var b = bconcat(bufs);
        prep_blob(b, 0);
        var ll = 0;
        b.lens = [];
        for (var j = 0; j < bufs.length; ++j) {
          b.lens.push(ll);
          ll += bufs[j].length;
        }
        if (b.length < length)
          throw "XLS Record " + (R && R.n || "??") + " Truncated: " + b.length + " < " + length;
        return R.f(b, b.length, opts);
      }
      function safe_format_xf(p, opts, date1904) {
        if (p.t === "z")
          return;
        if (!p.XF)
          return;
        var fmtid = 0;
        try {
          fmtid = p.z || p.XF.numFmtId || 0;
          if (opts.cellNF)
            p.z = SSF._table[fmtid];
        } catch (e) {
          if (opts.WTF)
            throw e;
        }
        if (!opts || opts.cellText !== false)
          try {
            if (p.t === "e") {
              p.w = p.w || BErr[p.v];
            } else if (fmtid === 0 || fmtid == "General") {
              if (p.t === "n") {
                if ((p.v | 0) === p.v)
                  p.w = SSF._general_int(p.v);
                else
                  p.w = SSF._general_num(p.v);
              } else
                p.w = SSF._general(p.v);
            } else
              p.w = SSF.format(fmtid, p.v, { date1904: !!date1904, dateNF: opts && opts.dateNF });
          } catch (e) {
            if (opts.WTF)
              throw e;
          }
        if (opts.cellDates && fmtid && p.t == "n" && SSF.is_date(SSF._table[fmtid] || String(fmtid))) {
          var _d = SSF.parse_date_code(p.v);
          if (_d) {
            p.t = "d";
            p.v = new Date(_d.y, _d.m - 1, _d.d, _d.H, _d.M, _d.S, _d.u);
          }
        }
      }
      function make_cell(val, ixfe, t) {
        return { v: val, ixfe, t };
      }
      function parse_workbook(blob, options) {
        var wb = { opts: {} };
        var Sheets = {};
        if (DENSE != null && options.dense == null)
          options.dense = DENSE;
        var out = options.dense ? [] : {};
        var Directory = {};
        var range = {};
        var last_formula = null;
        var sst = [];
        var cur_sheet = "";
        var Preamble = {};
        var lastcell, last_cell = "", cc, cmnt, rngC, rngR;
        var sharedf = {};
        var arrayf = [];
        var temp_val;
        var country;
        var cell_valid = true;
        var XFs = [];
        var palette = [];
        var Workbook = { Sheets: [], WBProps: { date1904: false }, Views: [{}] }, wsprops = {};
        var get_rgb = function getrgb(icv) {
          if (icv < 8)
            return XLSIcv[icv];
          if (icv < 64)
            return palette[icv - 8] || XLSIcv[icv];
          return XLSIcv[icv];
        };
        var process_cell_style = function pcs(cell, line, options2) {
          var xfd = line.XF.data;
          if (!xfd || !xfd.patternType || !options2 || !options2.cellStyles)
            return;
          line.s = {};
          line.s.patternType = xfd.patternType;
          var t;
          if (t = rgb2Hex(get_rgb(xfd.icvFore))) {
            line.s.fgColor = { rgb: t };
          }
          if (t = rgb2Hex(get_rgb(xfd.icvBack))) {
            line.s.bgColor = { rgb: t };
          }
        };
        var addcell = function addcell2(cell, line, options2) {
          if (file_depth > 1)
            return;
          if (options2.sheetRows && cell.r >= options2.sheetRows)
            cell_valid = false;
          if (!cell_valid)
            return;
          if (options2.cellStyles && line.XF && line.XF.data)
            process_cell_style(cell, line, options2);
          delete line.ixfe;
          delete line.XF;
          lastcell = cell;
          last_cell = encode_cell(cell);
          if (!range || !range.s || !range.e)
            range = { s: { r: 0, c: 0 }, e: { r: 0, c: 0 } };
          if (cell.r < range.s.r)
            range.s.r = cell.r;
          if (cell.c < range.s.c)
            range.s.c = cell.c;
          if (cell.r + 1 > range.e.r)
            range.e.r = cell.r + 1;
          if (cell.c + 1 > range.e.c)
            range.e.c = cell.c + 1;
          if (options2.cellFormula && line.f) {
            for (var afi = 0; afi < arrayf.length; ++afi) {
              if (arrayf[afi][0].s.c > cell.c || arrayf[afi][0].s.r > cell.r)
                continue;
              if (arrayf[afi][0].e.c < cell.c || arrayf[afi][0].e.r < cell.r)
                continue;
              line.F = encode_range(arrayf[afi][0]);
              if (arrayf[afi][0].s.c != cell.c || arrayf[afi][0].s.r != cell.r)
                delete line.f;
              if (line.f)
                line.f = "" + stringify_formula(arrayf[afi][1], range, cell, supbooks, opts);
              break;
            }
          }
          {
            if (options2.dense) {
              if (!out[cell.r])
                out[cell.r] = [];
              out[cell.r][cell.c] = line;
            } else
              out[last_cell] = line;
          }
        };
        var opts = {
          enc: false,
          sbcch: 0,
          snames: [],
          sharedf,
          arrayf,
          rrtabid: [],
          lastuser: "",
          biff: 8,
          codepage: 0,
          winlocked: 0,
          cellStyles: !!options && !!options.cellStyles,
          WTF: !!options && !!options.wtf
        };
        if (options.password)
          opts.password = options.password;
        var themes;
        var merges = [];
        var objects = [];
        var colinfo = [], rowinfo = [];
        var defwidth = 0, defheight = 0;
        var seencol = false;
        var supbooks = [];
        supbooks.SheetNames = opts.snames;
        supbooks.sharedf = opts.sharedf;
        supbooks.arrayf = opts.arrayf;
        supbooks.names = [];
        supbooks.XTI = [];
        var last_Rn = "";
        var file_depth = 0;
        var BIFF2Fmt = 0, BIFF2FmtTable = [];
        var FilterDatabases = [];
        var last_lbl;
        opts.codepage = 1200;
        set_cp(1200);
        var seen_codepage = false;
        while (blob.l < blob.length - 1) {
          var s = blob.l;
          var RecordType = blob.read_shift(2);
          if (RecordType === 0 && last_Rn === "EOF")
            break;
          var length = blob.l === blob.length ? 0 : blob.read_shift(2);
          var R = XLSRecordEnum[RecordType];
          if (R && R.f) {
            if (options.bookSheets) {
              if (last_Rn === "BoundSheet8" && R.n !== "BoundSheet8")
                break;
            }
            last_Rn = R.n;
            if (R.r === 2 || R.r == 12) {
              var rt = blob.read_shift(2);
              length -= 2;
              if (!opts.enc && rt !== RecordType && ((rt & 255) << 8 | rt >> 8) !== RecordType)
                throw new Error("rt mismatch: " + rt + "!=" + RecordType);
              if (R.r == 12) {
                blob.l += 10;
                length -= 10;
              }
            }
            var val = {};
            if (R.n === "EOF")
              val = R.f(blob, length, opts);
            else
              val = slurp(R, blob, length, opts);
            var Rn = R.n;
            if (file_depth == 0 && Rn != "BOF")
              continue;
            switch (Rn) {
              case "Date1904":
                wb.opts.Date1904 = Workbook.WBProps.date1904 = val;
                break;
              case "WriteProtect":
                wb.opts.WriteProtect = true;
                break;
              case "FilePass":
                if (!opts.enc)
                  blob.l = 0;
                opts.enc = val;
                if (!options.password)
                  throw new Error("File is password-protected");
                if (val.valid == null)
                  throw new Error("Encryption scheme unsupported");
                if (!val.valid)
                  throw new Error("Password is incorrect");
                break;
              case "WriteAccess":
                opts.lastuser = val;
                break;
              case "FileSharing":
                break;
              case "CodePage":
                var cpval = Number(val);
                switch (cpval) {
                  case 21010:
                    cpval = 1200;
                    break;
                  case 32768:
                    cpval = 1e4;
                    break;
                  case 32769:
                    cpval = 1252;
                    break;
                }
                set_cp(opts.codepage = cpval);
                seen_codepage = true;
                break;
              case "RRTabId":
                opts.rrtabid = val;
                break;
              case "WinProtect":
                opts.winlocked = val;
                break;
              case "Template":
                break;
              case "BookBool":
                break;
              case "UsesELFs":
                break;
              case "MTRSettings":
                break;
              case "RefreshAll":
              case "CalcCount":
              case "CalcDelta":
              case "CalcIter":
              case "CalcMode":
              case "CalcPrecision":
              case "CalcSaveRecalc":
                wb.opts[Rn] = val;
                break;
              case "CalcRefMode":
                opts.CalcRefMode = val;
                break;
              case "Uncalced":
                break;
              case "ForceFullCalculation":
                wb.opts.FullCalc = val;
                break;
              case "WsBool":
                if (val.fDialog)
                  out["!type"] = "dialog";
                if (!val.fBelow)
                  (out["!outline"] || (out["!outline"] = {})).above = true;
                if (!val.fRight)
                  (out["!outline"] || (out["!outline"] = {})).left = true;
                break;
              case "XF":
                XFs.push(val);
                break;
              case "ExtSST":
                break;
              case "BookExt":
                break;
              case "RichTextStream":
                break;
              case "BkHim":
                break;
              case "SupBook":
                supbooks.push([val]);
                supbooks[supbooks.length - 1].XTI = [];
                break;
              case "ExternName":
                supbooks[supbooks.length - 1].push(val);
                break;
              case "Index":
                break;
              case "Lbl":
                last_lbl = {
                  Name: val.Name,
                  Ref: stringify_formula(val.rgce, range, null, supbooks, opts)
                };
                if (val.itab > 0)
                  last_lbl.Sheet = val.itab - 1;
                supbooks.names.push(last_lbl);
                if (!supbooks[0]) {
                  supbooks[0] = [];
                  supbooks[0].XTI = [];
                }
                supbooks[supbooks.length - 1].push(val);
                if (val.Name == "_xlnm._FilterDatabase" && val.itab > 0) {
                  if (val.rgce && val.rgce[0] && val.rgce[0][0] && val.rgce[0][0][0] == "PtgArea3d")
                    FilterDatabases[val.itab - 1] = { ref: encode_range(val.rgce[0][0][1][2]) };
                }
                break;
              case "ExternCount":
                opts.ExternCount = val;
                break;
              case "ExternSheet":
                if (supbooks.length == 0) {
                  supbooks[0] = [];
                  supbooks[0].XTI = [];
                }
                supbooks[supbooks.length - 1].XTI = supbooks[supbooks.length - 1].XTI.concat(val);
                supbooks.XTI = supbooks.XTI.concat(val);
                break;
              case "NameCmt":
                if (opts.biff < 8)
                  break;
                if (last_lbl != null)
                  last_lbl.Comment = val[1];
                break;
              case "Protect":
                out["!protect"] = val;
                break;
              case "Password":
                if (val !== 0 && opts.WTF)
                  console.error("Password verifier: " + val);
                break;
              case "Prot4Rev":
              case "Prot4RevPass":
                break;
              case "BoundSheet8":
                {
                  Directory[val.pos] = val;
                  opts.snames.push(val.name);
                }
                break;
              case "EOF":
                {
                  if (--file_depth)
                    break;
                  if (range.e) {
                    if (range.e.r > 0 && range.e.c > 0) {
                      range.e.r--;
                      range.e.c--;
                      out["!ref"] = encode_range(range);
                      if (options.sheetRows && options.sheetRows <= range.e.r) {
                        var tmpri = range.e.r;
                        range.e.r = options.sheetRows - 1;
                        out["!fullref"] = out["!ref"];
                        out["!ref"] = encode_range(range);
                        range.e.r = tmpri;
                      }
                      range.e.r++;
                      range.e.c++;
                    }
                    if (merges.length > 0)
                      out["!merges"] = merges;
                    if (objects.length > 0)
                      out["!objects"] = objects;
                    if (colinfo.length > 0)
                      out["!cols"] = colinfo;
                    if (rowinfo.length > 0)
                      out["!rows"] = rowinfo;
                    Workbook.Sheets.push(wsprops);
                  }
                  if (cur_sheet === "")
                    Preamble = out;
                  else
                    Sheets[cur_sheet] = out;
                  out = options.dense ? [] : {};
                }
                break;
              case "BOF":
                {
                  if (opts.biff === 8)
                    opts.biff = {
                      9: 2,
                      521: 3,
                      1033: 4
                    }[RecordType] || {
                      512: 2,
                      768: 3,
                      1024: 4,
                      1280: 5,
                      1536: 8,
                      2: 2,
                      7: 2
                    }[val.BIFFVer] || 8;
                  opts.biffguess = val.BIFFVer == 0;
                  if (val.BIFFVer == 0 && val.dt == 4096) {
                    opts.biff = 5;
                    seen_codepage = true;
                    set_cp(opts.codepage = 28591);
                  }
                  if (opts.biff == 8 && val.BIFFVer == 0 && val.dt == 16)
                    opts.biff = 2;
                  if (file_depth++)
                    break;
                  cell_valid = true;
                  out = options.dense ? [] : {};
                  if (opts.biff < 8 && !seen_codepage) {
                    seen_codepage = true;
                    set_cp(opts.codepage = options.codepage || 1252);
                  }
                  if (opts.biff < 5 || val.BIFFVer == 0 && val.dt == 4096) {
                    if (cur_sheet === "")
                      cur_sheet = "Sheet1";
                    range = { s: { r: 0, c: 0 }, e: { r: 0, c: 0 } };
                    var fakebs8 = { pos: blob.l - length, name: cur_sheet };
                    Directory[fakebs8.pos] = fakebs8;
                    opts.snames.push(cur_sheet);
                  } else
                    cur_sheet = (Directory[s] || { name: "" }).name;
                  if (val.dt == 32)
                    out["!type"] = "chart";
                  if (val.dt == 64)
                    out["!type"] = "macro";
                  merges = [];
                  objects = [];
                  opts.arrayf = arrayf = [];
                  colinfo = [];
                  rowinfo = [];
                  defwidth = defheight = 0;
                  seencol = false;
                  wsprops = { Hidden: (Directory[s] || { hs: 0 }).hs, name: cur_sheet };
                }
                break;
              case "Number":
              case "BIFF2NUM":
              case "BIFF2INT":
                {
                  if (out["!type"] == "chart") {
                    if (options.dense ? (out[val.r] || [])[val.c] : out[encode_cell({ c: val.c, r: val.r })])
                      ++val.c;
                  }
                  temp_val = { ixfe: val.ixfe, XF: XFs[val.ixfe] || {}, v: val.val, t: "n" };
                  if (BIFF2Fmt > 0)
                    temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 63];
                  safe_format_xf(temp_val, options, wb.opts.Date1904);
                  addcell({ c: val.c, r: val.r }, temp_val, options);
                }
                break;
              case "BoolErr":
                {
                  temp_val = { ixfe: val.ixfe, XF: XFs[val.ixfe], v: val.val, t: val.t };
                  if (BIFF2Fmt > 0)
                    temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 63];
                  safe_format_xf(temp_val, options, wb.opts.Date1904);
                  addcell({ c: val.c, r: val.r }, temp_val, options);
                }
                break;
              case "RK":
                {
                  temp_val = { ixfe: val.ixfe, XF: XFs[val.ixfe], v: val.rknum, t: "n" };
                  if (BIFF2Fmt > 0)
                    temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 63];
                  safe_format_xf(temp_val, options, wb.opts.Date1904);
                  addcell({ c: val.c, r: val.r }, temp_val, options);
                }
                break;
              case "MulRk":
                {
                  for (var j = val.c; j <= val.C; ++j) {
                    var ixfe = val.rkrec[j - val.c][0];
                    temp_val = { ixfe, XF: XFs[ixfe], v: val.rkrec[j - val.c][1], t: "n" };
                    if (BIFF2Fmt > 0)
                      temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 63];
                    safe_format_xf(temp_val, options, wb.opts.Date1904);
                    addcell({ c: j, r: val.r }, temp_val, options);
                  }
                }
                break;
              case "Formula":
                {
                  if (val.val == "String") {
                    last_formula = val;
                    break;
                  }
                  temp_val = make_cell(val.val, val.cell.ixfe, val.tt);
                  temp_val.XF = XFs[temp_val.ixfe];
                  if (options.cellFormula) {
                    var _f = val.formula;
                    if (_f && _f[0] && _f[0][0] && _f[0][0][0] == "PtgExp") {
                      var _fr = _f[0][0][1][0], _fc = _f[0][0][1][1];
                      var _fe = encode_cell({ r: _fr, c: _fc });
                      if (sharedf[_fe])
                        temp_val.f = "" + stringify_formula(val.formula, range, val.cell, supbooks, opts);
                      else
                        temp_val.F = ((options.dense ? (out[_fr] || [])[_fc] : out[_fe]) || {}).F;
                    } else
                      temp_val.f = "" + stringify_formula(val.formula, range, val.cell, supbooks, opts);
                  }
                  if (BIFF2Fmt > 0)
                    temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 63];
                  safe_format_xf(temp_val, options, wb.opts.Date1904);
                  addcell(val.cell, temp_val, options);
                  last_formula = val;
                }
                break;
              case "String":
                {
                  if (last_formula) {
                    last_formula.val = val;
                    temp_val = make_cell(val, last_formula.cell.ixfe, "s");
                    temp_val.XF = XFs[temp_val.ixfe];
                    if (options.cellFormula) {
                      temp_val.f = "" + stringify_formula(last_formula.formula, range, last_formula.cell, supbooks, opts);
                    }
                    if (BIFF2Fmt > 0)
                      temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 63];
                    safe_format_xf(temp_val, options, wb.opts.Date1904);
                    addcell(last_formula.cell, temp_val, options);
                    last_formula = null;
                  } else
                    throw new Error("String record expects Formula");
                }
                break;
              case "Array":
                {
                  arrayf.push(val);
                  var _arraystart = encode_cell(val[0].s);
                  cc = options.dense ? (out[val[0].s.r] || [])[val[0].s.c] : out[_arraystart];
                  if (options.cellFormula && cc) {
                    if (!last_formula)
                      break;
                    if (!_arraystart || !cc)
                      break;
                    cc.f = "" + stringify_formula(val[1], range, val[0], supbooks, opts);
                    cc.F = encode_range(val[0]);
                  }
                }
                break;
              case "ShrFmla":
                {
                  if (!cell_valid)
                    break;
                  if (!options.cellFormula)
                    break;
                  if (last_cell) {
                    if (!last_formula)
                      break;
                    sharedf[encode_cell(last_formula.cell)] = val[0];
                    cc = options.dense ? (out[last_formula.cell.r] || [])[last_formula.cell.c] : out[encode_cell(last_formula.cell)];
                    (cc || {}).f = "" + stringify_formula(val[0], range, lastcell, supbooks, opts);
                  }
                }
                break;
              case "LabelSst":
                temp_val = make_cell(sst[val.isst].t, val.ixfe, "s");
                if (sst[val.isst].h)
                  temp_val.h = sst[val.isst].h;
                temp_val.XF = XFs[temp_val.ixfe];
                if (BIFF2Fmt > 0)
                  temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 63];
                safe_format_xf(temp_val, options, wb.opts.Date1904);
                addcell({ c: val.c, r: val.r }, temp_val, options);
                break;
              case "Blank":
                if (options.sheetStubs) {
                  temp_val = { ixfe: val.ixfe, XF: XFs[val.ixfe], t: "z" };
                  if (BIFF2Fmt > 0)
                    temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 63];
                  safe_format_xf(temp_val, options, wb.opts.Date1904);
                  addcell({ c: val.c, r: val.r }, temp_val, options);
                }
                break;
              case "MulBlank":
                if (options.sheetStubs) {
                  for (var _j = val.c; _j <= val.C; ++_j) {
                    var _ixfe = val.ixfe[_j - val.c];
                    temp_val = { ixfe: _ixfe, XF: XFs[_ixfe], t: "z" };
                    if (BIFF2Fmt > 0)
                      temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 63];
                    safe_format_xf(temp_val, options, wb.opts.Date1904);
                    addcell({ c: _j, r: val.r }, temp_val, options);
                  }
                }
                break;
              case "RString":
              case "Label":
              case "BIFF2STR":
                temp_val = make_cell(val.val, val.ixfe, "s");
                temp_val.XF = XFs[temp_val.ixfe];
                if (BIFF2Fmt > 0)
                  temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 63];
                safe_format_xf(temp_val, options, wb.opts.Date1904);
                addcell({ c: val.c, r: val.r }, temp_val, options);
                break;
              case "Dimensions":
                {
                  if (file_depth === 1)
                    range = val;
                }
                break;
              case "SST":
                {
                  sst = val;
                }
                break;
              case "Format":
                {
                  if (opts.biff == 4) {
                    BIFF2FmtTable[BIFF2Fmt++] = val[1];
                    for (var b4idx = 0; b4idx < BIFF2Fmt + 163; ++b4idx)
                      if (SSF._table[b4idx] == val[1])
                        break;
                    if (b4idx >= 163)
                      SSF.load(val[1], BIFF2Fmt + 163);
                  } else
                    SSF.load(val[1], val[0]);
                }
                break;
              case "BIFF2FORMAT":
                {
                  BIFF2FmtTable[BIFF2Fmt++] = val;
                  for (var b2idx = 0; b2idx < BIFF2Fmt + 163; ++b2idx)
                    if (SSF._table[b2idx] == val)
                      break;
                  if (b2idx >= 163)
                    SSF.load(val, BIFF2Fmt + 163);
                }
                break;
              case "MergeCells":
                merges = merges.concat(val);
                break;
              case "Obj":
                objects[val.cmo[0]] = opts.lastobj = val;
                break;
              case "TxO":
                opts.lastobj.TxO = val;
                break;
              case "ImData":
                opts.lastobj.ImData = val;
                break;
              case "HLink":
                {
                  for (rngR = val[0].s.r; rngR <= val[0].e.r; ++rngR)
                    for (rngC = val[0].s.c; rngC <= val[0].e.c; ++rngC) {
                      cc = options.dense ? (out[rngR] || [])[rngC] : out[encode_cell({ c: rngC, r: rngR })];
                      if (cc)
                        cc.l = val[1];
                    }
                }
                break;
              case "HLinkTooltip":
                {
                  for (rngR = val[0].s.r; rngR <= val[0].e.r; ++rngR)
                    for (rngC = val[0].s.c; rngC <= val[0].e.c; ++rngC) {
                      cc = options.dense ? (out[rngR] || [])[rngC] : out[encode_cell({ c: rngC, r: rngR })];
                      if (cc && cc.l)
                        cc.l.Tooltip = val[1];
                    }
                }
                break;
              case "Note":
                {
                  if (opts.biff <= 5 && opts.biff >= 2)
                    break;
                  cc = options.dense ? (out[val[0].r] || [])[val[0].c] : out[encode_cell(val[0])];
                  var noteobj = objects[val[2]];
                  if (!cc) {
                    if (options.dense) {
                      if (!out[val[0].r])
                        out[val[0].r] = [];
                      cc = out[val[0].r][val[0].c] = { t: "z" };
                    } else {
                      cc = out[encode_cell(val[0])] = { t: "z" };
                    }
                    range.e.r = Math.max(range.e.r, val[0].r);
                    range.s.r = Math.min(range.s.r, val[0].r);
                    range.e.c = Math.max(range.e.c, val[0].c);
                    range.s.c = Math.min(range.s.c, val[0].c);
                  }
                  if (!cc.c)
                    cc.c = [];
                  cmnt = { a: val[1], t: noteobj.TxO.t };
                  cc.c.push(cmnt);
                }
                break;
              default:
                switch (R.n) {
                  case "ClrtClient":
                    break;
                  case "XFExt":
                    update_xfext(XFs[val.ixfe], val.ext);
                    break;
                  case "DefColWidth":
                    defwidth = val;
                    break;
                  case "DefaultRowHeight":
                    defheight = val[1];
                    break;
                  case "ColInfo":
                    {
                      if (!opts.cellStyles)
                        break;
                      while (val.e >= val.s) {
                        colinfo[val.e--] = { width: val.w / 256, level: val.level || 0, hidden: !!(val.flags & 1) };
                        if (!seencol) {
                          seencol = true;
                          find_mdw_colw(val.w / 256);
                        }
                        process_col(colinfo[val.e + 1]);
                      }
                    }
                    break;
                  case "Row":
                    {
                      var rowobj = {};
                      if (val.level != null) {
                        rowinfo[val.r] = rowobj;
                        rowobj.level = val.level;
                      }
                      if (val.hidden) {
                        rowinfo[val.r] = rowobj;
                        rowobj.hidden = true;
                      }
                      if (val.hpt) {
                        rowinfo[val.r] = rowobj;
                        rowobj.hpt = val.hpt;
                        rowobj.hpx = pt2px(val.hpt);
                      }
                    }
                    break;
                  case "LeftMargin":
                  case "RightMargin":
                  case "TopMargin":
                  case "BottomMargin":
                    if (!out["!margins"])
                      default_margins(out["!margins"] = {});
                    out["!margins"][Rn.slice(0, -6).toLowerCase()] = val;
                    break;
                  case "Selection":
                    break;
                  case "Setup":
                    if (!out["!margins"])
                      default_margins(out["!margins"] = {});
                    out["!margins"].header = val.header;
                    out["!margins"].footer = val.footer;
                    break;
                  case "Window2":
                    if (val.RTL)
                      Workbook.Views[0].RTL = true;
                    break;
                  case "Header":
                    break;
                  case "Footer":
                    break;
                  case "HCenter":
                    break;
                  case "VCenter":
                    break;
                  case "Pls":
                    break;
                  case "GCW":
                    break;
                  case "LHRecord":
                    break;
                  case "DBCell":
                    break;
                  case "EntExU2":
                    break;
                  case "SxView":
                    break;
                  case "Sxvd":
                    break;
                  case "SXVI":
                    break;
                  case "SXVDEx":
                    break;
                  case "SxIvd":
                    break;
                  case "SXString":
                    break;
                  case "Sync":
                    break;
                  case "Addin":
                    break;
                  case "SXDI":
                    break;
                  case "SXLI":
                    break;
                  case "SXEx":
                    break;
                  case "QsiSXTag":
                    break;
                  case "Feat":
                    break;
                  case "FeatHdr":
                  case "FeatHdr11":
                    break;
                  case "Feature11":
                  case "Feature12":
                  case "List12":
                    break;
                  case "Country":
                    country = val;
                    break;
                  case "RecalcId":
                    break;
                  case "DxGCol":
                    break;
                  case "Fbi":
                  case "Fbi2":
                  case "GelFrame":
                    break;
                  case "Font":
                    break;
                  case "XFCRC":
                    break;
                  case "Style":
                    break;
                  case "StyleExt":
                    break;
                  case "Palette":
                    palette = val;
                    break;
                  case "Theme":
                    themes = val;
                    break;
                  case "ScenarioProtect":
                    break;
                  case "ObjProtect":
                    break;
                  case "CondFmt12":
                    break;
                  case "Table":
                    break;
                  case "TableStyles":
                    break;
                  case "TableStyle":
                    break;
                  case "TableStyleElement":
                    break;
                  case "SXStreamID":
                    break;
                  case "SXVS":
                    break;
                  case "DConRef":
                    break;
                  case "SXAddl":
                    break;
                  case "DConBin":
                    break;
                  case "DConName":
                    break;
                  case "SXPI":
                    break;
                  case "SxFormat":
                    break;
                  case "SxSelect":
                    break;
                  case "SxRule":
                    break;
                  case "SxFilt":
                    break;
                  case "SxItm":
                    break;
                  case "SxDXF":
                    break;
                  case "ScenMan":
                    break;
                  case "DCon":
                    break;
                  case "CellWatch":
                    break;
                  case "PrintRowCol":
                    break;
                  case "PrintGrid":
                    break;
                  case "PrintSize":
                    break;
                  case "XCT":
                    break;
                  case "CRN":
                    break;
                  case "Scl":
                    {
                    }
                    break;
                  case "SheetExt":
                    {
                    }
                    break;
                  case "SheetExtOptional":
                    {
                    }
                    break;
                  case "ObNoMacros":
                    {
                    }
                    break;
                  case "ObProj":
                    {
                    }
                    break;
                  case "CodeName":
                    {
                      if (!cur_sheet)
                        Workbook.WBProps.CodeName = val || "ThisWorkbook";
                      else
                        wsprops.CodeName = val || wsprops.name;
                    }
                    break;
                  case "GUIDTypeLib":
                    {
                    }
                    break;
                  case "WOpt":
                    break;
                  case "PhoneticInfo":
                    break;
                  case "OleObjectSize":
                    break;
                  case "DXF":
                  case "DXFN":
                  case "DXFN12":
                  case "DXFN12List":
                  case "DXFN12NoCB":
                    break;
                  case "Dv":
                  case "DVal":
                    break;
                  case "BRAI":
                  case "Series":
                  case "SeriesText":
                    break;
                  case "DConn":
                    break;
                  case "DbOrParamQry":
                    break;
                  case "DBQueryExt":
                    break;
                  case "OleDbConn":
                    break;
                  case "ExtString":
                    break;
                  case "IFmtRecord":
                    break;
                  case "CondFmt":
                  case "CF":
                  case "CF12":
                  case "CFEx":
                    break;
                  case "Excel9File":
                    break;
                  case "Units":
                    break;
                  case "InterfaceHdr":
                  case "Mms":
                  case "InterfaceEnd":
                  case "DSF":
                    break;
                  case "BuiltInFnGroupCount":
                    break;
                  case "Window1":
                  case "HideObj":
                  case "GridSet":
                  case "Guts":
                  case "UserBView":
                  case "UserSViewBegin":
                  case "UserSViewEnd":
                    break;
                  case "Pane":
                    break;
                  default:
                    switch (R.n) {
                      case "Dat":
                      case "Begin":
                      case "End":
                      case "StartBlock":
                      case "EndBlock":
                      case "Frame":
                      case "Area":
                      case "Axis":
                      case "AxisLine":
                      case "Tick":
                        break;
                      case "AxesUsed":
                      case "CrtLayout12":
                      case "CrtLayout12A":
                      case "CrtLink":
                      case "CrtLine":
                      case "CrtMlFrt":
                      case "CrtMlFrtContinue":
                        break;
                      case "LineFormat":
                      case "AreaFormat":
                      case "Chart":
                      case "Chart3d":
                      case "Chart3DBarShape":
                      case "ChartFormat":
                      case "ChartFrtInfo":
                        break;
                      case "PlotArea":
                      case "PlotGrowth":
                        break;
                      case "SeriesList":
                      case "SerParent":
                      case "SerAuxTrend":
                        break;
                      case "DataFormat":
                      case "SerToCrt":
                      case "FontX":
                        break;
                      case "CatSerRange":
                      case "AxcExt":
                      case "SerFmt":
                        break;
                      case "ShtProps":
                        break;
                      case "DefaultText":
                      case "Text":
                      case "CatLab":
                        break;
                      case "DataLabExtContents":
                        break;
                      case "Legend":
                      case "LegendException":
                        break;
                      case "Pie":
                      case "Scatter":
                        break;
                      case "PieFormat":
                      case "MarkerFormat":
                        break;
                      case "StartObject":
                      case "EndObject":
                        break;
                      case "AlRuns":
                      case "ObjectLink":
                        break;
                      case "SIIndex":
                        break;
                      case "AttachedLabel":
                      case "YMult":
                        break;
                      case "Line":
                      case "Bar":
                        break;
                      case "Surf":
                        break;
                      case "AxisParent":
                        break;
                      case "Pos":
                        break;
                      case "ValueRange":
                        break;
                      case "SXViewEx9":
                        break;
                      case "SXViewLink":
                        break;
                      case "PivotChartBits":
                        break;
                      case "SBaseRef":
                        break;
                      case "TextPropsStream":
                        break;
                      case "LnExt":
                        break;
                      case "MkrExt":
                        break;
                      case "CrtCoopt":
                        break;
                      case "Qsi":
                      case "Qsif":
                      case "Qsir":
                      case "QsiSXTag":
                        break;
                      case "TxtQry":
                        break;
                      case "FilterMode":
                        break;
                      case "AutoFilter":
                      case "AutoFilterInfo":
                        break;
                      case "AutoFilter12":
                        break;
                      case "DropDownObjIds":
                        break;
                      case "Sort":
                        break;
                      case "SortData":
                        break;
                      case "ShapePropsStream":
                        break;
                      case "MsoDrawing":
                      case "MsoDrawingGroup":
                      case "MsoDrawingSelection":
                        break;
                      case "WebPub":
                      case "AutoWebPub":
                        break;
                      case "HeaderFooter":
                      case "HFPicture":
                      case "PLV":
                      case "HorizontalPageBreaks":
                      case "VerticalPageBreaks":
                        break;
                      case "Backup":
                      case "CompressPictures":
                      case "Compat12":
                        break;
                      case "Continue":
                      case "ContinueFrt12":
                        break;
                      case "FrtFontList":
                      case "FrtWrapper":
                        break;
                      default:
                        switch (R.n) {
                          case "TabIdConf":
                          case "Radar":
                          case "RadarArea":
                          case "DropBar":
                          case "Intl":
                          case "CoordList":
                          case "SerAuxErrBar":
                            break;
                          case "BIFF2FONTCLR":
                          case "BIFF2FMTCNT":
                          case "BIFF2FONTXTRA":
                            break;
                          case "BIFF2XF":
                          case "BIFF3XF":
                          case "BIFF4XF":
                            break;
                          case "BIFF2XFINDEX":
                            break;
                          case "BIFF4FMTCNT":
                          case "BIFF2ROW":
                          case "BIFF2WINDOW2":
                            break;
                          case "SCENARIO":
                          case "DConBin":
                          case "PicF":
                          case "DataLabExt":
                          case "Lel":
                          case "BopPop":
                          case "BopPopCustom":
                          case "RealTimeData":
                          case "Name":
                            break;
                          case "LHNGraph":
                          case "FnGroupName":
                          case "AddMenu":
                          case "LPr":
                            break;
                          case "ListObj":
                          case "ListField":
                            break;
                          case "RRSort":
                            break;
                          case "BigName":
                            break;
                          case "ToolbarHdr":
                          case "ToolbarEnd":
                            break;
                          case "DDEObjName":
                            break;
                          case "FRTArchId$":
                            break;
                          default:
                            if (options.WTF)
                              throw "Unrecognized Record " + R.n;
                        }
                    }
                }
            }
          } else
            blob.l += length;
        }
        wb.SheetNames = keys(Directory).sort(function(a, b) {
          return Number(a) - Number(b);
        }).map(function(x) {
          return Directory[x].name;
        });
        if (!options.bookSheets)
          wb.Sheets = Sheets;
        if (!wb.SheetNames.length && Preamble["!ref"]) {
          wb.SheetNames.push("Sheet1");
          if (wb.Sheets)
            wb.Sheets["Sheet1"] = Preamble;
        } else
          wb.Preamble = Preamble;
        if (wb.Sheets)
          FilterDatabases.forEach(function(r, i2) {
            wb.Sheets[wb.SheetNames[i2]]["!autofilter"] = r;
          });
        wb.Strings = sst;
        wb.SSF = SSF.get_table();
        if (opts.enc)
          wb.Encryption = opts.enc;
        if (themes)
          wb.Themes = themes;
        wb.Metadata = {};
        if (country !== void 0)
          wb.Metadata.Country = country;
        if (supbooks.names.length > 0)
          Workbook.Names = supbooks.names;
        wb.Workbook = Workbook;
        return wb;
      }
      var PSCLSID = {
        SI: "e0859ff2f94f6810ab9108002b27b3d9",
        DSI: "02d5cdd59c2e1b10939708002b2cf9ae",
        UDI: "05d5cdd59c2e1b10939708002b2cf9ae"
      };
      function parse_xls_props(cfb, props, o) {
        var DSI = CFB.find(cfb, "!DocumentSummaryInformation");
        if (DSI && DSI.size > 0)
          try {
            var DocSummary = parse_PropertySetStream(DSI, DocSummaryPIDDSI, PSCLSID.DSI);
            for (var d in DocSummary)
              props[d] = DocSummary[d];
          } catch (e) {
            if (o.WTF)
              throw e;
          }
        var SI = CFB.find(cfb, "!SummaryInformation");
        if (SI && SI.size > 0)
          try {
            var Summary = parse_PropertySetStream(SI, SummaryPIDSI, PSCLSID.SI);
            for (var s in Summary)
              if (props[s] == null)
                props[s] = Summary[s];
          } catch (e) {
            if (o.WTF)
              throw e;
          }
        if (props.HeadingPairs && props.TitlesOfParts) {
          load_props_pairs(props.HeadingPairs, props.TitlesOfParts, props, o);
          delete props.HeadingPairs;
          delete props.TitlesOfParts;
        }
      }
      function write_xls_props(wb, cfb) {
        var DSEntries = [], SEntries = [], CEntries = [];
        var i2 = 0, Keys;
        if (wb.Props) {
          Keys = keys(wb.Props);
          for (i2 = 0; i2 < Keys.length; ++i2)
            (Object.prototype.hasOwnProperty.call(DocSummaryRE, Keys[i2]) ? DSEntries : Object.prototype.hasOwnProperty.call(SummaryRE, Keys[i2]) ? SEntries : CEntries).push([Keys[i2], wb.Props[Keys[i2]]]);
        }
        if (wb.Custprops) {
          Keys = keys(wb.Custprops);
          for (i2 = 0; i2 < Keys.length; ++i2)
            if (!Object.prototype.hasOwnProperty.call(wb.Props || {}, Keys[i2]))
              (Object.prototype.hasOwnProperty.call(DocSummaryRE, Keys[i2]) ? DSEntries : Object.prototype.hasOwnProperty.call(SummaryRE, Keys[i2]) ? SEntries : CEntries).push([Keys[i2], wb.Custprops[Keys[i2]]]);
        }
        var CEntries2 = [];
        for (i2 = 0; i2 < CEntries.length; ++i2) {
          if (XLSPSSkip.indexOf(CEntries[i2][0]) > -1)
            continue;
          if (CEntries[i2][1] == null)
            continue;
          CEntries2.push(CEntries[i2]);
        }
        if (SEntries.length)
          CFB.utils.cfb_add(cfb, "/SummaryInformation", write_PropertySetStream(SEntries, PSCLSID.SI, SummaryRE, SummaryPIDSI));
        if (DSEntries.length || CEntries2.length)
          CFB.utils.cfb_add(cfb, "/DocumentSummaryInformation", write_PropertySetStream(DSEntries, PSCLSID.DSI, DocSummaryRE, DocSummaryPIDDSI, CEntries2.length ? CEntries2 : null, PSCLSID.UDI));
      }
      function parse_xlscfb(cfb, options) {
        if (!options)
          options = {};
        fix_read_opts(options);
        reset_cp();
        if (options.codepage)
          set_ansi(options.codepage);
        var CompObj, WB;
        if (cfb.FullPaths) {
          if (CFB.find(cfb, "/encryption"))
            throw new Error("File is password-protected");
          CompObj = CFB.find(cfb, "!CompObj");
          WB = CFB.find(cfb, "/Workbook") || CFB.find(cfb, "/Book");
        } else {
          switch (options.type) {
            case "base64":
              cfb = s2a(Base64.decode(cfb));
              break;
            case "binary":
              cfb = s2a(cfb);
              break;
            case "buffer":
              break;
            case "array":
              if (!Array.isArray(cfb))
                cfb = Array.prototype.slice.call(cfb);
              break;
          }
          prep_blob(cfb, 0);
          WB = { content: cfb };
        }
        var WorkbookP;
        var _data;
        if (CompObj)
          parse_compobj(CompObj);
        if (options.bookProps && !options.bookSheets)
          WorkbookP = {};
        else {
          var T = has_buf ? "buffer" : "array";
          if (WB && WB.content)
            WorkbookP = parse_workbook(WB.content, options);
          else if ((_data = CFB.find(cfb, "PerfectOffice_MAIN")) && _data.content)
            WorkbookP = WK_.to_workbook(_data.content, (options.type = T, options));
          else if ((_data = CFB.find(cfb, "NativeContent_MAIN")) && _data.content)
            WorkbookP = WK_.to_workbook(_data.content, (options.type = T, options));
          else
            throw new Error("Cannot find Workbook stream");
          if (options.bookVBA && cfb.FullPaths && CFB.find(cfb, "/_VBA_PROJECT_CUR/VBA/dir"))
            WorkbookP.vbaraw = make_vba_xls(cfb);
        }
        var props = {};
        if (cfb.FullPaths)
          parse_xls_props(cfb, props, options);
        WorkbookP.Props = WorkbookP.Custprops = props;
        if (options.bookFiles)
          WorkbookP.cfb = cfb;
        return WorkbookP;
      }
      function write_xlscfb(wb, opts) {
        var o = opts || {};
        var cfb = CFB.utils.cfb_new({ root: "R" });
        var wbpath = "/Workbook";
        switch (o.bookType || "xls") {
          case "xls":
            o.bookType = "biff8";
          case "xla":
            if (!o.bookType)
              o.bookType = "xla";
          case "biff8":
            wbpath = "/Workbook";
            o.biff = 8;
            break;
          case "biff5":
            wbpath = "/Book";
            o.biff = 5;
            break;
          default:
            throw new Error("invalid type " + o.bookType + " for XLS CFB");
        }
        CFB.utils.cfb_add(cfb, wbpath, write_biff_buf(wb, o));
        if (o.biff == 8 && (wb.Props || wb.Custprops))
          write_xls_props(wb, cfb);
        if (o.biff == 8 && wb.vbaraw)
          fill_vba_xls(cfb, CFB.read(wb.vbaraw, { type: typeof wb.vbaraw == "string" ? "binary" : "buffer" }));
        return cfb;
      }
      var XLSBRecordEnum = {
        0: { n: "BrtRowHdr", f: parse_BrtRowHdr },
        1: { n: "BrtCellBlank", f: parse_BrtCellBlank },
        2: { n: "BrtCellRk", f: parse_BrtCellRk },
        3: { n: "BrtCellError", f: parse_BrtCellError },
        4: { n: "BrtCellBool", f: parse_BrtCellBool },
        5: { n: "BrtCellReal", f: parse_BrtCellReal },
        6: { n: "BrtCellSt", f: parse_BrtCellSt },
        7: { n: "BrtCellIsst", f: parse_BrtCellIsst },
        8: { n: "BrtFmlaString", f: parse_BrtFmlaString },
        9: { n: "BrtFmlaNum", f: parse_BrtFmlaNum },
        10: { n: "BrtFmlaBool", f: parse_BrtFmlaBool },
        11: { n: "BrtFmlaError", f: parse_BrtFmlaError },
        12: { n: "BrtShortBlank", f: parse_BrtShortBlank },
        13: { n: "BrtShortRk", f: parse_BrtShortRk },
        14: { n: "BrtShortError", f: parse_BrtShortError },
        15: { n: "BrtShortBool", f: parse_BrtShortBool },
        16: { n: "BrtShortReal", f: parse_BrtShortReal },
        17: { n: "BrtShortSt", f: parse_BrtShortSt },
        18: { n: "BrtShortIsst", f: parse_BrtShortIsst },
        19: { n: "BrtSSTItem", f: parse_RichStr },
        20: { n: "BrtPCDIMissing" },
        21: { n: "BrtPCDINumber" },
        22: { n: "BrtPCDIBoolean" },
        23: { n: "BrtPCDIError" },
        24: { n: "BrtPCDIString" },
        25: { n: "BrtPCDIDatetime" },
        26: { n: "BrtPCDIIndex" },
        27: { n: "BrtPCDIAMissing" },
        28: { n: "BrtPCDIANumber" },
        29: { n: "BrtPCDIABoolean" },
        30: { n: "BrtPCDIAError" },
        31: { n: "BrtPCDIAString" },
        32: { n: "BrtPCDIADatetime" },
        33: { n: "BrtPCRRecord" },
        34: { n: "BrtPCRRecordDt" },
        35: { n: "BrtFRTBegin" },
        36: { n: "BrtFRTEnd" },
        37: { n: "BrtACBegin" },
        38: { n: "BrtACEnd" },
        39: { n: "BrtName", f: parse_BrtName },
        40: { n: "BrtIndexRowBlock" },
        42: { n: "BrtIndexBlock" },
        43: { n: "BrtFont", f: parse_BrtFont },
        44: { n: "BrtFmt", f: parse_BrtFmt },
        45: { n: "BrtFill", f: parse_BrtFill },
        46: { n: "BrtBorder", f: parse_BrtBorder },
        47: { n: "BrtXF", f: parse_BrtXF },
        48: { n: "BrtStyle" },
        49: { n: "BrtCellMeta" },
        50: { n: "BrtValueMeta" },
        51: { n: "BrtMdb" },
        52: { n: "BrtBeginFmd" },
        53: { n: "BrtEndFmd" },
        54: { n: "BrtBeginMdx" },
        55: { n: "BrtEndMdx" },
        56: { n: "BrtBeginMdxTuple" },
        57: { n: "BrtEndMdxTuple" },
        58: { n: "BrtMdxMbrIstr" },
        59: { n: "BrtStr" },
        60: { n: "BrtColInfo", f: parse_ColInfo },
        62: { n: "BrtCellRString" },
        63: { n: "BrtCalcChainItem$", f: parse_BrtCalcChainItem$ },
        64: { n: "BrtDVal", f: parse_BrtDVal },
        65: { n: "BrtSxvcellNum" },
        66: { n: "BrtSxvcellStr" },
        67: { n: "BrtSxvcellBool" },
        68: { n: "BrtSxvcellErr" },
        69: { n: "BrtSxvcellDate" },
        70: { n: "BrtSxvcellNil" },
        128: { n: "BrtFileVersion" },
        129: { n: "BrtBeginSheet" },
        130: { n: "BrtEndSheet" },
        131: { n: "BrtBeginBook", f: parsenoop, p: 0 },
        132: { n: "BrtEndBook" },
        133: { n: "BrtBeginWsViews" },
        134: { n: "BrtEndWsViews" },
        135: { n: "BrtBeginBookViews" },
        136: { n: "BrtEndBookViews" },
        137: { n: "BrtBeginWsView", f: parse_BrtBeginWsView },
        138: { n: "BrtEndWsView" },
        139: { n: "BrtBeginCsViews" },
        140: { n: "BrtEndCsViews" },
        141: { n: "BrtBeginCsView" },
        142: { n: "BrtEndCsView" },
        143: { n: "BrtBeginBundleShs" },
        144: { n: "BrtEndBundleShs" },
        145: { n: "BrtBeginSheetData" },
        146: { n: "BrtEndSheetData" },
        147: { n: "BrtWsProp", f: parse_BrtWsProp },
        148: { n: "BrtWsDim", f: parse_BrtWsDim, p: 16 },
        151: { n: "BrtPane", f: parse_BrtPane },
        152: { n: "BrtSel" },
        153: { n: "BrtWbProp", f: parse_BrtWbProp },
        154: { n: "BrtWbFactoid" },
        155: { n: "BrtFileRecover" },
        156: { n: "BrtBundleSh", f: parse_BrtBundleSh },
        157: { n: "BrtCalcProp" },
        158: { n: "BrtBookView" },
        159: { n: "BrtBeginSst", f: parse_BrtBeginSst },
        160: { n: "BrtEndSst" },
        161: { n: "BrtBeginAFilter", f: parse_UncheckedRfX },
        162: { n: "BrtEndAFilter" },
        163: { n: "BrtBeginFilterColumn" },
        164: { n: "BrtEndFilterColumn" },
        165: { n: "BrtBeginFilters" },
        166: { n: "BrtEndFilters" },
        167: { n: "BrtFilter" },
        168: { n: "BrtColorFilter" },
        169: { n: "BrtIconFilter" },
        170: { n: "BrtTop10Filter" },
        171: { n: "BrtDynamicFilter" },
        172: { n: "BrtBeginCustomFilters" },
        173: { n: "BrtEndCustomFilters" },
        174: { n: "BrtCustomFilter" },
        175: { n: "BrtAFilterDateGroupItem" },
        176: { n: "BrtMergeCell", f: parse_BrtMergeCell },
        177: { n: "BrtBeginMergeCells" },
        178: { n: "BrtEndMergeCells" },
        179: { n: "BrtBeginPivotCacheDef" },
        180: { n: "BrtEndPivotCacheDef" },
        181: { n: "BrtBeginPCDFields" },
        182: { n: "BrtEndPCDFields" },
        183: { n: "BrtBeginPCDField" },
        184: { n: "BrtEndPCDField" },
        185: { n: "BrtBeginPCDSource" },
        186: { n: "BrtEndPCDSource" },
        187: { n: "BrtBeginPCDSRange" },
        188: { n: "BrtEndPCDSRange" },
        189: { n: "BrtBeginPCDFAtbl" },
        190: { n: "BrtEndPCDFAtbl" },
        191: { n: "BrtBeginPCDIRun" },
        192: { n: "BrtEndPCDIRun" },
        193: { n: "BrtBeginPivotCacheRecords" },
        194: { n: "BrtEndPivotCacheRecords" },
        195: { n: "BrtBeginPCDHierarchies" },
        196: { n: "BrtEndPCDHierarchies" },
        197: { n: "BrtBeginPCDHierarchy" },
        198: { n: "BrtEndPCDHierarchy" },
        199: { n: "BrtBeginPCDHFieldsUsage" },
        200: { n: "BrtEndPCDHFieldsUsage" },
        201: { n: "BrtBeginExtConnection" },
        202: { n: "BrtEndExtConnection" },
        203: { n: "BrtBeginECDbProps" },
        204: { n: "BrtEndECDbProps" },
        205: { n: "BrtBeginECOlapProps" },
        206: { n: "BrtEndECOlapProps" },
        207: { n: "BrtBeginPCDSConsol" },
        208: { n: "BrtEndPCDSConsol" },
        209: { n: "BrtBeginPCDSCPages" },
        210: { n: "BrtEndPCDSCPages" },
        211: { n: "BrtBeginPCDSCPage" },
        212: { n: "BrtEndPCDSCPage" },
        213: { n: "BrtBeginPCDSCPItem" },
        214: { n: "BrtEndPCDSCPItem" },
        215: { n: "BrtBeginPCDSCSets" },
        216: { n: "BrtEndPCDSCSets" },
        217: { n: "BrtBeginPCDSCSet" },
        218: { n: "BrtEndPCDSCSet" },
        219: { n: "BrtBeginPCDFGroup" },
        220: { n: "BrtEndPCDFGroup" },
        221: { n: "BrtBeginPCDFGItems" },
        222: { n: "BrtEndPCDFGItems" },
        223: { n: "BrtBeginPCDFGRange" },
        224: { n: "BrtEndPCDFGRange" },
        225: { n: "BrtBeginPCDFGDiscrete" },
        226: { n: "BrtEndPCDFGDiscrete" },
        227: { n: "BrtBeginPCDSDTupleCache" },
        228: { n: "BrtEndPCDSDTupleCache" },
        229: { n: "BrtBeginPCDSDTCEntries" },
        230: { n: "BrtEndPCDSDTCEntries" },
        231: { n: "BrtBeginPCDSDTCEMembers" },
        232: { n: "BrtEndPCDSDTCEMembers" },
        233: { n: "BrtBeginPCDSDTCEMember" },
        234: { n: "BrtEndPCDSDTCEMember" },
        235: { n: "BrtBeginPCDSDTCQueries" },
        236: { n: "BrtEndPCDSDTCQueries" },
        237: { n: "BrtBeginPCDSDTCQuery" },
        238: { n: "BrtEndPCDSDTCQuery" },
        239: { n: "BrtBeginPCDSDTCSets" },
        240: { n: "BrtEndPCDSDTCSets" },
        241: { n: "BrtBeginPCDSDTCSet" },
        242: { n: "BrtEndPCDSDTCSet" },
        243: { n: "BrtBeginPCDCalcItems" },
        244: { n: "BrtEndPCDCalcItems" },
        245: { n: "BrtBeginPCDCalcItem" },
        246: { n: "BrtEndPCDCalcItem" },
        247: { n: "BrtBeginPRule" },
        248: { n: "BrtEndPRule" },
        249: { n: "BrtBeginPRFilters" },
        250: { n: "BrtEndPRFilters" },
        251: { n: "BrtBeginPRFilter" },
        252: { n: "BrtEndPRFilter" },
        253: { n: "BrtBeginPNames" },
        254: { n: "BrtEndPNames" },
        255: { n: "BrtBeginPName" },
        256: { n: "BrtEndPName" },
        257: { n: "BrtBeginPNPairs" },
        258: { n: "BrtEndPNPairs" },
        259: { n: "BrtBeginPNPair" },
        260: { n: "BrtEndPNPair" },
        261: { n: "BrtBeginECWebProps" },
        262: { n: "BrtEndECWebProps" },
        263: { n: "BrtBeginEcWpTables" },
        264: { n: "BrtEndECWPTables" },
        265: { n: "BrtBeginECParams" },
        266: { n: "BrtEndECParams" },
        267: { n: "BrtBeginECParam" },
        268: { n: "BrtEndECParam" },
        269: { n: "BrtBeginPCDKPIs" },
        270: { n: "BrtEndPCDKPIs" },
        271: { n: "BrtBeginPCDKPI" },
        272: { n: "BrtEndPCDKPI" },
        273: { n: "BrtBeginDims" },
        274: { n: "BrtEndDims" },
        275: { n: "BrtBeginDim" },
        276: { n: "BrtEndDim" },
        277: { n: "BrtIndexPartEnd" },
        278: { n: "BrtBeginStyleSheet" },
        279: { n: "BrtEndStyleSheet" },
        280: { n: "BrtBeginSXView" },
        281: { n: "BrtEndSXVI" },
        282: { n: "BrtBeginSXVI" },
        283: { n: "BrtBeginSXVIs" },
        284: { n: "BrtEndSXVIs" },
        285: { n: "BrtBeginSXVD" },
        286: { n: "BrtEndSXVD" },
        287: { n: "BrtBeginSXVDs" },
        288: { n: "BrtEndSXVDs" },
        289: { n: "BrtBeginSXPI" },
        290: { n: "BrtEndSXPI" },
        291: { n: "BrtBeginSXPIs" },
        292: { n: "BrtEndSXPIs" },
        293: { n: "BrtBeginSXDI" },
        294: { n: "BrtEndSXDI" },
        295: { n: "BrtBeginSXDIs" },
        296: { n: "BrtEndSXDIs" },
        297: { n: "BrtBeginSXLI" },
        298: { n: "BrtEndSXLI" },
        299: { n: "BrtBeginSXLIRws" },
        300: { n: "BrtEndSXLIRws" },
        301: { n: "BrtBeginSXLICols" },
        302: { n: "BrtEndSXLICols" },
        303: { n: "BrtBeginSXFormat" },
        304: { n: "BrtEndSXFormat" },
        305: { n: "BrtBeginSXFormats" },
        306: { n: "BrtEndSxFormats" },
        307: { n: "BrtBeginSxSelect" },
        308: { n: "BrtEndSxSelect" },
        309: { n: "BrtBeginISXVDRws" },
        310: { n: "BrtEndISXVDRws" },
        311: { n: "BrtBeginISXVDCols" },
        312: { n: "BrtEndISXVDCols" },
        313: { n: "BrtEndSXLocation" },
        314: { n: "BrtBeginSXLocation" },
        315: { n: "BrtEndSXView" },
        316: { n: "BrtBeginSXTHs" },
        317: { n: "BrtEndSXTHs" },
        318: { n: "BrtBeginSXTH" },
        319: { n: "BrtEndSXTH" },
        320: { n: "BrtBeginISXTHRws" },
        321: { n: "BrtEndISXTHRws" },
        322: { n: "BrtBeginISXTHCols" },
        323: { n: "BrtEndISXTHCols" },
        324: { n: "BrtBeginSXTDMPS" },
        325: { n: "BrtEndSXTDMPs" },
        326: { n: "BrtBeginSXTDMP" },
        327: { n: "BrtEndSXTDMP" },
        328: { n: "BrtBeginSXTHItems" },
        329: { n: "BrtEndSXTHItems" },
        330: { n: "BrtBeginSXTHItem" },
        331: { n: "BrtEndSXTHItem" },
        332: { n: "BrtBeginMetadata" },
        333: { n: "BrtEndMetadata" },
        334: { n: "BrtBeginEsmdtinfo" },
        335: { n: "BrtMdtinfo" },
        336: { n: "BrtEndEsmdtinfo" },
        337: { n: "BrtBeginEsmdb" },
        338: { n: "BrtEndEsmdb" },
        339: { n: "BrtBeginEsfmd" },
        340: { n: "BrtEndEsfmd" },
        341: { n: "BrtBeginSingleCells" },
        342: { n: "BrtEndSingleCells" },
        343: { n: "BrtBeginList" },
        344: { n: "BrtEndList" },
        345: { n: "BrtBeginListCols" },
        346: { n: "BrtEndListCols" },
        347: { n: "BrtBeginListCol" },
        348: { n: "BrtEndListCol" },
        349: { n: "BrtBeginListXmlCPr" },
        350: { n: "BrtEndListXmlCPr" },
        351: { n: "BrtListCCFmla" },
        352: { n: "BrtListTrFmla" },
        353: { n: "BrtBeginExternals" },
        354: { n: "BrtEndExternals" },
        355: { n: "BrtSupBookSrc", f: parse_RelID },
        357: { n: "BrtSupSelf" },
        358: { n: "BrtSupSame" },
        359: { n: "BrtSupTabs" },
        360: { n: "BrtBeginSupBook" },
        361: { n: "BrtPlaceholderName" },
        362: { n: "BrtExternSheet", f: parse_ExternSheet },
        363: { n: "BrtExternTableStart" },
        364: { n: "BrtExternTableEnd" },
        366: { n: "BrtExternRowHdr" },
        367: { n: "BrtExternCellBlank" },
        368: { n: "BrtExternCellReal" },
        369: { n: "BrtExternCellBool" },
        370: { n: "BrtExternCellError" },
        371: { n: "BrtExternCellString" },
        372: { n: "BrtBeginEsmdx" },
        373: { n: "BrtEndEsmdx" },
        374: { n: "BrtBeginMdxSet" },
        375: { n: "BrtEndMdxSet" },
        376: { n: "BrtBeginMdxMbrProp" },
        377: { n: "BrtEndMdxMbrProp" },
        378: { n: "BrtBeginMdxKPI" },
        379: { n: "BrtEndMdxKPI" },
        380: { n: "BrtBeginEsstr" },
        381: { n: "BrtEndEsstr" },
        382: { n: "BrtBeginPRFItem" },
        383: { n: "BrtEndPRFItem" },
        384: { n: "BrtBeginPivotCacheIDs" },
        385: { n: "BrtEndPivotCacheIDs" },
        386: { n: "BrtBeginPivotCacheID" },
        387: { n: "BrtEndPivotCacheID" },
        388: { n: "BrtBeginISXVIs" },
        389: { n: "BrtEndISXVIs" },
        390: { n: "BrtBeginColInfos" },
        391: { n: "BrtEndColInfos" },
        392: { n: "BrtBeginRwBrk" },
        393: { n: "BrtEndRwBrk" },
        394: { n: "BrtBeginColBrk" },
        395: { n: "BrtEndColBrk" },
        396: { n: "BrtBrk" },
        397: { n: "BrtUserBookView" },
        398: { n: "BrtInfo" },
        399: { n: "BrtCUsr" },
        400: { n: "BrtUsr" },
        401: { n: "BrtBeginUsers" },
        403: { n: "BrtEOF" },
        404: { n: "BrtUCR" },
        405: { n: "BrtRRInsDel" },
        406: { n: "BrtRREndInsDel" },
        407: { n: "BrtRRMove" },
        408: { n: "BrtRREndMove" },
        409: { n: "BrtRRChgCell" },
        410: { n: "BrtRREndChgCell" },
        411: { n: "BrtRRHeader" },
        412: { n: "BrtRRUserView" },
        413: { n: "BrtRRRenSheet" },
        414: { n: "BrtRRInsertSh" },
        415: { n: "BrtRRDefName" },
        416: { n: "BrtRRNote" },
        417: { n: "BrtRRConflict" },
        418: { n: "BrtRRTQSIF" },
        419: { n: "BrtRRFormat" },
        420: { n: "BrtRREndFormat" },
        421: { n: "BrtRRAutoFmt" },
        422: { n: "BrtBeginUserShViews" },
        423: { n: "BrtBeginUserShView" },
        424: { n: "BrtEndUserShView" },
        425: { n: "BrtEndUserShViews" },
        426: { n: "BrtArrFmla", f: parse_BrtArrFmla },
        427: { n: "BrtShrFmla", f: parse_BrtShrFmla },
        428: { n: "BrtTable" },
        429: { n: "BrtBeginExtConnections" },
        430: { n: "BrtEndExtConnections" },
        431: { n: "BrtBeginPCDCalcMems" },
        432: { n: "BrtEndPCDCalcMems" },
        433: { n: "BrtBeginPCDCalcMem" },
        434: { n: "BrtEndPCDCalcMem" },
        435: { n: "BrtBeginPCDHGLevels" },
        436: { n: "BrtEndPCDHGLevels" },
        437: { n: "BrtBeginPCDHGLevel" },
        438: { n: "BrtEndPCDHGLevel" },
        439: { n: "BrtBeginPCDHGLGroups" },
        440: { n: "BrtEndPCDHGLGroups" },
        441: { n: "BrtBeginPCDHGLGroup" },
        442: { n: "BrtEndPCDHGLGroup" },
        443: { n: "BrtBeginPCDHGLGMembers" },
        444: { n: "BrtEndPCDHGLGMembers" },
        445: { n: "BrtBeginPCDHGLGMember" },
        446: { n: "BrtEndPCDHGLGMember" },
        447: { n: "BrtBeginQSI" },
        448: { n: "BrtEndQSI" },
        449: { n: "BrtBeginQSIR" },
        450: { n: "BrtEndQSIR" },
        451: { n: "BrtBeginDeletedNames" },
        452: { n: "BrtEndDeletedNames" },
        453: { n: "BrtBeginDeletedName" },
        454: { n: "BrtEndDeletedName" },
        455: { n: "BrtBeginQSIFs" },
        456: { n: "BrtEndQSIFs" },
        457: { n: "BrtBeginQSIF" },
        458: { n: "BrtEndQSIF" },
        459: { n: "BrtBeginAutoSortScope" },
        460: { n: "BrtEndAutoSortScope" },
        461: { n: "BrtBeginConditionalFormatting" },
        462: { n: "BrtEndConditionalFormatting" },
        463: { n: "BrtBeginCFRule" },
        464: { n: "BrtEndCFRule" },
        465: { n: "BrtBeginIconSet" },
        466: { n: "BrtEndIconSet" },
        467: { n: "BrtBeginDatabar" },
        468: { n: "BrtEndDatabar" },
        469: { n: "BrtBeginColorScale" },
        470: { n: "BrtEndColorScale" },
        471: { n: "BrtCFVO" },
        472: { n: "BrtExternValueMeta" },
        473: { n: "BrtBeginColorPalette" },
        474: { n: "BrtEndColorPalette" },
        475: { n: "BrtIndexedColor" },
        476: { n: "BrtMargins", f: parse_BrtMargins },
        477: { n: "BrtPrintOptions" },
        478: { n: "BrtPageSetup" },
        479: { n: "BrtBeginHeaderFooter" },
        480: { n: "BrtEndHeaderFooter" },
        481: { n: "BrtBeginSXCrtFormat" },
        482: { n: "BrtEndSXCrtFormat" },
        483: { n: "BrtBeginSXCrtFormats" },
        484: { n: "BrtEndSXCrtFormats" },
        485: { n: "BrtWsFmtInfo", f: parse_BrtWsFmtInfo },
        486: { n: "BrtBeginMgs" },
        487: { n: "BrtEndMGs" },
        488: { n: "BrtBeginMGMaps" },
        489: { n: "BrtEndMGMaps" },
        490: { n: "BrtBeginMG" },
        491: { n: "BrtEndMG" },
        492: { n: "BrtBeginMap" },
        493: { n: "BrtEndMap" },
        494: { n: "BrtHLink", f: parse_BrtHLink },
        495: { n: "BrtBeginDCon" },
        496: { n: "BrtEndDCon" },
        497: { n: "BrtBeginDRefs" },
        498: { n: "BrtEndDRefs" },
        499: { n: "BrtDRef" },
        500: { n: "BrtBeginScenMan" },
        501: { n: "BrtEndScenMan" },
        502: { n: "BrtBeginSct" },
        503: { n: "BrtEndSct" },
        504: { n: "BrtSlc" },
        505: { n: "BrtBeginDXFs" },
        506: { n: "BrtEndDXFs" },
        507: { n: "BrtDXF" },
        508: { n: "BrtBeginTableStyles" },
        509: { n: "BrtEndTableStyles" },
        510: { n: "BrtBeginTableStyle" },
        511: { n: "BrtEndTableStyle" },
        512: { n: "BrtTableStyleElement" },
        513: { n: "BrtTableStyleClient" },
        514: { n: "BrtBeginVolDeps" },
        515: { n: "BrtEndVolDeps" },
        516: { n: "BrtBeginVolType" },
        517: { n: "BrtEndVolType" },
        518: { n: "BrtBeginVolMain" },
        519: { n: "BrtEndVolMain" },
        520: { n: "BrtBeginVolTopic" },
        521: { n: "BrtEndVolTopic" },
        522: { n: "BrtVolSubtopic" },
        523: { n: "BrtVolRef" },
        524: { n: "BrtVolNum" },
        525: { n: "BrtVolErr" },
        526: { n: "BrtVolStr" },
        527: { n: "BrtVolBool" },
        528: { n: "BrtBeginCalcChain$" },
        529: { n: "BrtEndCalcChain$" },
        530: { n: "BrtBeginSortState" },
        531: { n: "BrtEndSortState" },
        532: { n: "BrtBeginSortCond" },
        533: { n: "BrtEndSortCond" },
        534: { n: "BrtBookProtection" },
        535: { n: "BrtSheetProtection" },
        536: { n: "BrtRangeProtection" },
        537: { n: "BrtPhoneticInfo" },
        538: { n: "BrtBeginECTxtWiz" },
        539: { n: "BrtEndECTxtWiz" },
        540: { n: "BrtBeginECTWFldInfoLst" },
        541: { n: "BrtEndECTWFldInfoLst" },
        542: { n: "BrtBeginECTwFldInfo" },
        548: { n: "BrtFileSharing" },
        549: { n: "BrtOleSize" },
        550: { n: "BrtDrawing", f: parse_RelID },
        551: { n: "BrtLegacyDrawing" },
        552: { n: "BrtLegacyDrawingHF" },
        553: { n: "BrtWebOpt" },
        554: { n: "BrtBeginWebPubItems" },
        555: { n: "BrtEndWebPubItems" },
        556: { n: "BrtBeginWebPubItem" },
        557: { n: "BrtEndWebPubItem" },
        558: { n: "BrtBeginSXCondFmt" },
        559: { n: "BrtEndSXCondFmt" },
        560: { n: "BrtBeginSXCondFmts" },
        561: { n: "BrtEndSXCondFmts" },
        562: { n: "BrtBkHim" },
        564: { n: "BrtColor" },
        565: { n: "BrtBeginIndexedColors" },
        566: { n: "BrtEndIndexedColors" },
        569: { n: "BrtBeginMRUColors" },
        570: { n: "BrtEndMRUColors" },
        572: { n: "BrtMRUColor" },
        573: { n: "BrtBeginDVals" },
        574: { n: "BrtEndDVals" },
        577: { n: "BrtSupNameStart" },
        578: { n: "BrtSupNameValueStart" },
        579: { n: "BrtSupNameValueEnd" },
        580: { n: "BrtSupNameNum" },
        581: { n: "BrtSupNameErr" },
        582: { n: "BrtSupNameSt" },
        583: { n: "BrtSupNameNil" },
        584: { n: "BrtSupNameBool" },
        585: { n: "BrtSupNameFmla" },
        586: { n: "BrtSupNameBits" },
        587: { n: "BrtSupNameEnd" },
        588: { n: "BrtEndSupBook" },
        589: { n: "BrtCellSmartTagProperty" },
        590: { n: "BrtBeginCellSmartTag" },
        591: { n: "BrtEndCellSmartTag" },
        592: { n: "BrtBeginCellSmartTags" },
        593: { n: "BrtEndCellSmartTags" },
        594: { n: "BrtBeginSmartTags" },
        595: { n: "BrtEndSmartTags" },
        596: { n: "BrtSmartTagType" },
        597: { n: "BrtBeginSmartTagTypes" },
        598: { n: "BrtEndSmartTagTypes" },
        599: { n: "BrtBeginSXFilters" },
        600: { n: "BrtEndSXFilters" },
        601: { n: "BrtBeginSXFILTER" },
        602: { n: "BrtEndSXFilter" },
        603: { n: "BrtBeginFills" },
        604: { n: "BrtEndFills" },
        605: { n: "BrtBeginCellWatches" },
        606: { n: "BrtEndCellWatches" },
        607: { n: "BrtCellWatch" },
        608: { n: "BrtBeginCRErrs" },
        609: { n: "BrtEndCRErrs" },
        610: { n: "BrtCrashRecErr" },
        611: { n: "BrtBeginFonts" },
        612: { n: "BrtEndFonts" },
        613: { n: "BrtBeginBorders" },
        614: { n: "BrtEndBorders" },
        615: { n: "BrtBeginFmts" },
        616: { n: "BrtEndFmts" },
        617: { n: "BrtBeginCellXFs" },
        618: { n: "BrtEndCellXFs" },
        619: { n: "BrtBeginStyles" },
        620: { n: "BrtEndStyles" },
        625: { n: "BrtBigName" },
        626: { n: "BrtBeginCellStyleXFs" },
        627: { n: "BrtEndCellStyleXFs" },
        628: { n: "BrtBeginComments" },
        629: { n: "BrtEndComments" },
        630: { n: "BrtBeginCommentAuthors" },
        631: { n: "BrtEndCommentAuthors" },
        632: { n: "BrtCommentAuthor", f: parse_BrtCommentAuthor },
        633: { n: "BrtBeginCommentList" },
        634: { n: "BrtEndCommentList" },
        635: { n: "BrtBeginComment", f: parse_BrtBeginComment },
        636: { n: "BrtEndComment" },
        637: { n: "BrtCommentText", f: parse_BrtCommentText },
        638: { n: "BrtBeginOleObjects" },
        639: { n: "BrtOleObject" },
        640: { n: "BrtEndOleObjects" },
        641: { n: "BrtBeginSxrules" },
        642: { n: "BrtEndSxRules" },
        643: { n: "BrtBeginActiveXControls" },
        644: { n: "BrtActiveX" },
        645: { n: "BrtEndActiveXControls" },
        646: { n: "BrtBeginPCDSDTCEMembersSortBy" },
        648: { n: "BrtBeginCellIgnoreECs" },
        649: { n: "BrtCellIgnoreEC" },
        650: { n: "BrtEndCellIgnoreECs" },
        651: { n: "BrtCsProp", f: parse_BrtCsProp },
        652: { n: "BrtCsPageSetup" },
        653: { n: "BrtBeginUserCsViews" },
        654: { n: "BrtEndUserCsViews" },
        655: { n: "BrtBeginUserCsView" },
        656: { n: "BrtEndUserCsView" },
        657: { n: "BrtBeginPcdSFCIEntries" },
        658: { n: "BrtEndPCDSFCIEntries" },
        659: { n: "BrtPCDSFCIEntry" },
        660: { n: "BrtBeginListParts" },
        661: { n: "BrtListPart" },
        662: { n: "BrtEndListParts" },
        663: { n: "BrtSheetCalcProp" },
        664: { n: "BrtBeginFnGroup" },
        665: { n: "BrtFnGroup" },
        666: { n: "BrtEndFnGroup" },
        667: { n: "BrtSupAddin" },
        668: { n: "BrtSXTDMPOrder" },
        669: { n: "BrtCsProtection" },
        671: { n: "BrtBeginWsSortMap" },
        672: { n: "BrtEndWsSortMap" },
        673: { n: "BrtBeginRRSort" },
        674: { n: "BrtEndRRSort" },
        675: { n: "BrtRRSortItem" },
        676: { n: "BrtFileSharingIso" },
        677: { n: "BrtBookProtectionIso" },
        678: { n: "BrtSheetProtectionIso" },
        679: { n: "BrtCsProtectionIso" },
        680: { n: "BrtRangeProtectionIso" },
        681: { n: "BrtDValList" },
        1024: { n: "BrtRwDescent" },
        1025: { n: "BrtKnownFonts" },
        1026: { n: "BrtBeginSXTupleSet" },
        1027: { n: "BrtEndSXTupleSet" },
        1028: { n: "BrtBeginSXTupleSetHeader" },
        1029: { n: "BrtEndSXTupleSetHeader" },
        1030: { n: "BrtSXTupleSetHeaderItem" },
        1031: { n: "BrtBeginSXTupleSetData" },
        1032: { n: "BrtEndSXTupleSetData" },
        1033: { n: "BrtBeginSXTupleSetRow" },
        1034: { n: "BrtEndSXTupleSetRow" },
        1035: { n: "BrtSXTupleSetRowItem" },
        1036: { n: "BrtNameExt" },
        1037: { n: "BrtPCDH14" },
        1038: { n: "BrtBeginPCDCalcMem14" },
        1039: { n: "BrtEndPCDCalcMem14" },
        1040: { n: "BrtSXTH14" },
        1041: { n: "BrtBeginSparklineGroup" },
        1042: { n: "BrtEndSparklineGroup" },
        1043: { n: "BrtSparkline" },
        1044: { n: "BrtSXDI14" },
        1045: { n: "BrtWsFmtInfoEx14" },
        1046: { n: "BrtBeginConditionalFormatting14" },
        1047: { n: "BrtEndConditionalFormatting14" },
        1048: { n: "BrtBeginCFRule14" },
        1049: { n: "BrtEndCFRule14" },
        1050: { n: "BrtCFVO14" },
        1051: { n: "BrtBeginDatabar14" },
        1052: { n: "BrtBeginIconSet14" },
        1053: { n: "BrtDVal14", f: parse_BrtDVal14 },
        1054: { n: "BrtBeginDVals14" },
        1055: { n: "BrtColor14" },
        1056: { n: "BrtBeginSparklines" },
        1057: { n: "BrtEndSparklines" },
        1058: { n: "BrtBeginSparklineGroups" },
        1059: { n: "BrtEndSparklineGroups" },
        1061: { n: "BrtSXVD14" },
        1062: { n: "BrtBeginSXView14" },
        1063: { n: "BrtEndSXView14" },
        1064: { n: "BrtBeginSXView16" },
        1065: { n: "BrtEndSXView16" },
        1066: { n: "BrtBeginPCD14" },
        1067: { n: "BrtEndPCD14" },
        1068: { n: "BrtBeginExtConn14" },
        1069: { n: "BrtEndExtConn14" },
        1070: { n: "BrtBeginSlicerCacheIDs" },
        1071: { n: "BrtEndSlicerCacheIDs" },
        1072: { n: "BrtBeginSlicerCacheID" },
        1073: { n: "BrtEndSlicerCacheID" },
        1075: { n: "BrtBeginSlicerCache" },
        1076: { n: "BrtEndSlicerCache" },
        1077: { n: "BrtBeginSlicerCacheDef" },
        1078: { n: "BrtEndSlicerCacheDef" },
        1079: { n: "BrtBeginSlicersEx" },
        1080: { n: "BrtEndSlicersEx" },
        1081: { n: "BrtBeginSlicerEx" },
        1082: { n: "BrtEndSlicerEx" },
        1083: { n: "BrtBeginSlicer" },
        1084: { n: "BrtEndSlicer" },
        1085: { n: "BrtSlicerCachePivotTables" },
        1086: { n: "BrtBeginSlicerCacheOlapImpl" },
        1087: { n: "BrtEndSlicerCacheOlapImpl" },
        1088: { n: "BrtBeginSlicerCacheLevelsData" },
        1089: { n: "BrtEndSlicerCacheLevelsData" },
        1090: { n: "BrtBeginSlicerCacheLevelData" },
        1091: { n: "BrtEndSlicerCacheLevelData" },
        1092: { n: "BrtBeginSlicerCacheSiRanges" },
        1093: { n: "BrtEndSlicerCacheSiRanges" },
        1094: { n: "BrtBeginSlicerCacheSiRange" },
        1095: { n: "BrtEndSlicerCacheSiRange" },
        1096: { n: "BrtSlicerCacheOlapItem" },
        1097: { n: "BrtBeginSlicerCacheSelections" },
        1098: { n: "BrtSlicerCacheSelection" },
        1099: { n: "BrtEndSlicerCacheSelections" },
        1100: { n: "BrtBeginSlicerCacheNative" },
        1101: { n: "BrtEndSlicerCacheNative" },
        1102: { n: "BrtSlicerCacheNativeItem" },
        1103: { n: "BrtRangeProtection14" },
        1104: { n: "BrtRangeProtectionIso14" },
        1105: { n: "BrtCellIgnoreEC14" },
        1111: { n: "BrtList14" },
        1112: { n: "BrtCFIcon" },
        1113: { n: "BrtBeginSlicerCachesPivotCacheIDs" },
        1114: { n: "BrtEndSlicerCachesPivotCacheIDs" },
        1115: { n: "BrtBeginSlicers" },
        1116: { n: "BrtEndSlicers" },
        1117: { n: "BrtWbProp14" },
        1118: { n: "BrtBeginSXEdit" },
        1119: { n: "BrtEndSXEdit" },
        1120: { n: "BrtBeginSXEdits" },
        1121: { n: "BrtEndSXEdits" },
        1122: { n: "BrtBeginSXChange" },
        1123: { n: "BrtEndSXChange" },
        1124: { n: "BrtBeginSXChanges" },
        1125: { n: "BrtEndSXChanges" },
        1126: { n: "BrtSXTupleItems" },
        1128: { n: "BrtBeginSlicerStyle" },
        1129: { n: "BrtEndSlicerStyle" },
        1130: { n: "BrtSlicerStyleElement" },
        1131: { n: "BrtBeginStyleSheetExt14" },
        1132: { n: "BrtEndStyleSheetExt14" },
        1133: { n: "BrtBeginSlicerCachesPivotCacheID" },
        1134: { n: "BrtEndSlicerCachesPivotCacheID" },
        1135: { n: "BrtBeginConditionalFormattings" },
        1136: { n: "BrtEndConditionalFormattings" },
        1137: { n: "BrtBeginPCDCalcMemExt" },
        1138: { n: "BrtEndPCDCalcMemExt" },
        1139: { n: "BrtBeginPCDCalcMemsExt" },
        1140: { n: "BrtEndPCDCalcMemsExt" },
        1141: { n: "BrtPCDField14" },
        1142: { n: "BrtBeginSlicerStyles" },
        1143: { n: "BrtEndSlicerStyles" },
        1144: { n: "BrtBeginSlicerStyleElements" },
        1145: { n: "BrtEndSlicerStyleElements" },
        1146: { n: "BrtCFRuleExt" },
        1147: { n: "BrtBeginSXCondFmt14" },
        1148: { n: "BrtEndSXCondFmt14" },
        1149: { n: "BrtBeginSXCondFmts14" },
        1150: { n: "BrtEndSXCondFmts14" },
        1152: { n: "BrtBeginSortCond14" },
        1153: { n: "BrtEndSortCond14" },
        1154: { n: "BrtEndDVals14" },
        1155: { n: "BrtEndIconSet14" },
        1156: { n: "BrtEndDatabar14" },
        1157: { n: "BrtBeginColorScale14" },
        1158: { n: "BrtEndColorScale14" },
        1159: { n: "BrtBeginSxrules14" },
        1160: { n: "BrtEndSxrules14" },
        1161: { n: "BrtBeginPRule14" },
        1162: { n: "BrtEndPRule14" },
        1163: { n: "BrtBeginPRFilters14" },
        1164: { n: "BrtEndPRFilters14" },
        1165: { n: "BrtBeginPRFilter14" },
        1166: { n: "BrtEndPRFilter14" },
        1167: { n: "BrtBeginPRFItem14" },
        1168: { n: "BrtEndPRFItem14" },
        1169: { n: "BrtBeginCellIgnoreECs14" },
        1170: { n: "BrtEndCellIgnoreECs14" },
        1171: { n: "BrtDxf14" },
        1172: { n: "BrtBeginDxF14s" },
        1173: { n: "BrtEndDxf14s" },
        1177: { n: "BrtFilter14" },
        1178: { n: "BrtBeginCustomFilters14" },
        1180: { n: "BrtCustomFilter14" },
        1181: { n: "BrtIconFilter14" },
        1182: { n: "BrtPivotCacheConnectionName" },
        2048: { n: "BrtBeginDecoupledPivotCacheIDs" },
        2049: { n: "BrtEndDecoupledPivotCacheIDs" },
        2050: { n: "BrtDecoupledPivotCacheID" },
        2051: { n: "BrtBeginPivotTableRefs" },
        2052: { n: "BrtEndPivotTableRefs" },
        2053: { n: "BrtPivotTableRef" },
        2054: { n: "BrtSlicerCacheBookPivotTables" },
        2055: { n: "BrtBeginSxvcells" },
        2056: { n: "BrtEndSxvcells" },
        2057: { n: "BrtBeginSxRow" },
        2058: { n: "BrtEndSxRow" },
        2060: { n: "BrtPcdCalcMem15" },
        2067: { n: "BrtQsi15" },
        2068: { n: "BrtBeginWebExtensions" },
        2069: { n: "BrtEndWebExtensions" },
        2070: { n: "BrtWebExtension" },
        2071: { n: "BrtAbsPath15" },
        2072: { n: "BrtBeginPivotTableUISettings" },
        2073: { n: "BrtEndPivotTableUISettings" },
        2075: { n: "BrtTableSlicerCacheIDs" },
        2076: { n: "BrtTableSlicerCacheID" },
        2077: { n: "BrtBeginTableSlicerCache" },
        2078: { n: "BrtEndTableSlicerCache" },
        2079: { n: "BrtSxFilter15" },
        2080: { n: "BrtBeginTimelineCachePivotCacheIDs" },
        2081: { n: "BrtEndTimelineCachePivotCacheIDs" },
        2082: { n: "BrtTimelineCachePivotCacheID" },
        2083: { n: "BrtBeginTimelineCacheIDs" },
        2084: { n: "BrtEndTimelineCacheIDs" },
        2085: { n: "BrtBeginTimelineCacheID" },
        2086: { n: "BrtEndTimelineCacheID" },
        2087: { n: "BrtBeginTimelinesEx" },
        2088: { n: "BrtEndTimelinesEx" },
        2089: { n: "BrtBeginTimelineEx" },
        2090: { n: "BrtEndTimelineEx" },
        2091: { n: "BrtWorkBookPr15" },
        2092: { n: "BrtPCDH15" },
        2093: { n: "BrtBeginTimelineStyle" },
        2094: { n: "BrtEndTimelineStyle" },
        2095: { n: "BrtTimelineStyleElement" },
        2096: { n: "BrtBeginTimelineStylesheetExt15" },
        2097: { n: "BrtEndTimelineStylesheetExt15" },
        2098: { n: "BrtBeginTimelineStyles" },
        2099: { n: "BrtEndTimelineStyles" },
        2100: { n: "BrtBeginTimelineStyleElements" },
        2101: { n: "BrtEndTimelineStyleElements" },
        2102: { n: "BrtDxf15" },
        2103: { n: "BrtBeginDxfs15" },
        2104: { n: "brtEndDxfs15" },
        2105: { n: "BrtSlicerCacheHideItemsWithNoData" },
        2106: { n: "BrtBeginItemUniqueNames" },
        2107: { n: "BrtEndItemUniqueNames" },
        2108: { n: "BrtItemUniqueName" },
        2109: { n: "BrtBeginExtConn15" },
        2110: { n: "BrtEndExtConn15" },
        2111: { n: "BrtBeginOledbPr15" },
        2112: { n: "BrtEndOledbPr15" },
        2113: { n: "BrtBeginDataFeedPr15" },
        2114: { n: "BrtEndDataFeedPr15" },
        2115: { n: "BrtTextPr15" },
        2116: { n: "BrtRangePr15" },
        2117: { n: "BrtDbCommand15" },
        2118: { n: "BrtBeginDbTables15" },
        2119: { n: "BrtEndDbTables15" },
        2120: { n: "BrtDbTable15" },
        2121: { n: "BrtBeginDataModel" },
        2122: { n: "BrtEndDataModel" },
        2123: { n: "BrtBeginModelTables" },
        2124: { n: "BrtEndModelTables" },
        2125: { n: "BrtModelTable" },
        2126: { n: "BrtBeginModelRelationships" },
        2127: { n: "BrtEndModelRelationships" },
        2128: { n: "BrtModelRelationship" },
        2129: { n: "BrtBeginECTxtWiz15" },
        2130: { n: "BrtEndECTxtWiz15" },
        2131: { n: "BrtBeginECTWFldInfoLst15" },
        2132: { n: "BrtEndECTWFldInfoLst15" },
        2133: { n: "BrtBeginECTWFldInfo15" },
        2134: { n: "BrtFieldListActiveItem" },
        2135: { n: "BrtPivotCacheIdVersion" },
        2136: { n: "BrtSXDI15" },
        2137: { n: "BrtBeginModelTimeGroupings" },
        2138: { n: "BrtEndModelTimeGroupings" },
        2139: { n: "BrtBeginModelTimeGrouping" },
        2140: { n: "BrtEndModelTimeGrouping" },
        2141: { n: "BrtModelTimeGroupingCalcCol" },
        3072: { n: "BrtUid" },
        3073: { n: "BrtRevisionPtr" },
        5095: { n: "BrtBeginCalcFeatures" },
        5096: { n: "BrtEndCalcFeatures" },
        5097: { n: "BrtCalcFeature" },
        65535: { n: "" }
      };
      var XLSBRE = evert_key(XLSBRecordEnum, "n");
      XLSBRE["BrtFRTArchID$"] = 16;
      var XLSRecordEnum = {
        3: { n: "BIFF2NUM", f: parse_BIFF2NUM },
        4: { n: "BIFF2STR", f: parse_BIFF2STR },
        6: { n: "Formula", f: parse_Formula },
        9: { n: "BOF", f: parse_BOF },
        10: { n: "EOF", f: parsenoop2 },
        12: { n: "CalcCount", f: parseuint16 },
        13: { n: "CalcMode", f: parseuint16 },
        14: { n: "CalcPrecision", f: parsebool },
        15: { n: "CalcRefMode", f: parsebool },
        16: { n: "CalcDelta", f: parse_Xnum },
        17: { n: "CalcIter", f: parsebool },
        18: { n: "Protect", f: parsebool },
        19: { n: "Password", f: parseuint16 },
        20: { n: "Header", f: parse_XLHeaderFooter },
        21: { n: "Footer", f: parse_XLHeaderFooter },
        23: { n: "ExternSheet", f: parse_ExternSheet },
        24: { n: "Lbl", f: parse_Lbl },
        25: { n: "WinProtect", f: parsebool },
        26: { n: "VerticalPageBreaks" },
        27: { n: "HorizontalPageBreaks" },
        28: { n: "Note", f: parse_Note },
        29: { n: "Selection" },
        34: { n: "Date1904", f: parsebool },
        35: { n: "ExternName", f: parse_ExternName },
        36: { n: "COLWIDTH" },
        38: { n: "LeftMargin", f: parse_Xnum },
        39: { n: "RightMargin", f: parse_Xnum },
        40: { n: "TopMargin", f: parse_Xnum },
        41: { n: "BottomMargin", f: parse_Xnum },
        42: { n: "PrintRowCol", f: parsebool },
        43: { n: "PrintGrid", f: parsebool },
        47: { n: "FilePass", f: parse_FilePass },
        49: { n: "Font", f: parse_Font },
        51: { n: "PrintSize", f: parseuint16 },
        60: { n: "Continue" },
        61: { n: "Window1", f: parse_Window1 },
        64: { n: "Backup", f: parsebool },
        65: { n: "Pane", f: parse_Pane },
        66: { n: "CodePage", f: parseuint16 },
        77: { n: "Pls" },
        80: { n: "DCon" },
        81: { n: "DConRef" },
        82: { n: "DConName" },
        85: { n: "DefColWidth", f: parseuint16 },
        89: { n: "XCT" },
        90: { n: "CRN" },
        91: { n: "FileSharing" },
        92: { n: "WriteAccess", f: parse_WriteAccess },
        93: { n: "Obj", f: parse_Obj },
        94: { n: "Uncalced" },
        95: { n: "CalcSaveRecalc", f: parsebool },
        96: { n: "Template" },
        97: { n: "Intl" },
        99: { n: "ObjProtect", f: parsebool },
        125: { n: "ColInfo", f: parse_ColInfo },
        128: { n: "Guts", f: parse_Guts },
        129: { n: "WsBool", f: parse_WsBool },
        130: { n: "GridSet", f: parseuint16 },
        131: { n: "HCenter", f: parsebool },
        132: { n: "VCenter", f: parsebool },
        133: { n: "BoundSheet8", f: parse_BoundSheet8 },
        134: { n: "WriteProtect" },
        140: { n: "Country", f: parse_Country },
        141: { n: "HideObj", f: parseuint16 },
        144: { n: "Sort" },
        146: { n: "Palette", f: parse_Palette },
        151: { n: "Sync" },
        152: { n: "LPr" },
        153: { n: "DxGCol" },
        154: { n: "FnGroupName" },
        155: { n: "FilterMode" },
        156: { n: "BuiltInFnGroupCount", f: parseuint16 },
        157: { n: "AutoFilterInfo" },
        158: { n: "AutoFilter" },
        160: { n: "Scl", f: parse_Scl },
        161: { n: "Setup", f: parse_Setup },
        174: { n: "ScenMan" },
        175: { n: "SCENARIO" },
        176: { n: "SxView" },
        177: { n: "Sxvd" },
        178: { n: "SXVI" },
        180: { n: "SxIvd" },
        181: { n: "SXLI" },
        182: { n: "SXPI" },
        184: { n: "DocRoute" },
        185: { n: "RecipName" },
        189: { n: "MulRk", f: parse_MulRk },
        190: { n: "MulBlank", f: parse_MulBlank },
        193: { n: "Mms", f: parsenoop2 },
        197: { n: "SXDI" },
        198: { n: "SXDB" },
        199: { n: "SXFDB" },
        200: { n: "SXDBB" },
        201: { n: "SXNum" },
        202: { n: "SxBool", f: parsebool },
        203: { n: "SxErr" },
        204: { n: "SXInt" },
        205: { n: "SXString" },
        206: { n: "SXDtr" },
        207: { n: "SxNil" },
        208: { n: "SXTbl" },
        209: { n: "SXTBRGIITM" },
        210: { n: "SxTbpg" },
        211: { n: "ObProj" },
        213: { n: "SXStreamID" },
        215: { n: "DBCell" },
        216: { n: "SXRng" },
        217: { n: "SxIsxoper" },
        218: { n: "BookBool", f: parseuint16 },
        220: { n: "DbOrParamQry" },
        221: { n: "ScenarioProtect", f: parsebool },
        222: { n: "OleObjectSize" },
        224: { n: "XF", f: parse_XF },
        225: { n: "InterfaceHdr", f: parse_InterfaceHdr },
        226: { n: "InterfaceEnd", f: parsenoop2 },
        227: { n: "SXVS" },
        229: { n: "MergeCells", f: parse_MergeCells },
        233: { n: "BkHim" },
        235: { n: "MsoDrawingGroup" },
        236: { n: "MsoDrawing" },
        237: { n: "MsoDrawingSelection" },
        239: { n: "PhoneticInfo" },
        240: { n: "SxRule" },
        241: { n: "SXEx" },
        242: { n: "SxFilt" },
        244: { n: "SxDXF" },
        245: { n: "SxItm" },
        246: { n: "SxName" },
        247: { n: "SxSelect" },
        248: { n: "SXPair" },
        249: { n: "SxFmla" },
        251: { n: "SxFormat" },
        252: { n: "SST", f: parse_SST },
        253: { n: "LabelSst", f: parse_LabelSst },
        255: { n: "ExtSST", f: parse_ExtSST },
        256: { n: "SXVDEx" },
        259: { n: "SXFormula" },
        290: { n: "SXDBEx" },
        311: { n: "RRDInsDel" },
        312: { n: "RRDHead" },
        315: { n: "RRDChgCell" },
        317: { n: "RRTabId", f: parseuint16a },
        318: { n: "RRDRenSheet" },
        319: { n: "RRSort" },
        320: { n: "RRDMove" },
        330: { n: "RRFormat" },
        331: { n: "RRAutoFmt" },
        333: { n: "RRInsertSh" },
        334: { n: "RRDMoveBegin" },
        335: { n: "RRDMoveEnd" },
        336: { n: "RRDInsDelBegin" },
        337: { n: "RRDInsDelEnd" },
        338: { n: "RRDConflict" },
        339: { n: "RRDDefName" },
        340: { n: "RRDRstEtxp" },
        351: { n: "LRng" },
        352: { n: "UsesELFs", f: parsebool },
        353: { n: "DSF", f: parsenoop2 },
        401: { n: "CUsr" },
        402: { n: "CbUsr" },
        403: { n: "UsrInfo" },
        404: { n: "UsrExcl" },
        405: { n: "FileLock" },
        406: { n: "RRDInfo" },
        407: { n: "BCUsrs" },
        408: { n: "UsrChk" },
        425: { n: "UserBView" },
        426: { n: "UserSViewBegin" },
        427: { n: "UserSViewEnd" },
        428: { n: "RRDUserView" },
        429: { n: "Qsi" },
        430: { n: "SupBook", f: parse_SupBook },
        431: { n: "Prot4Rev", f: parsebool },
        432: { n: "CondFmt" },
        433: { n: "CF" },
        434: { n: "DVal" },
        437: { n: "DConBin" },
        438: { n: "TxO", f: parse_TxO },
        439: { n: "RefreshAll", f: parsebool },
        440: { n: "HLink", f: parse_HLink },
        441: { n: "Lel" },
        442: { n: "CodeName", f: parse_XLUnicodeString },
        443: { n: "SXFDBType" },
        444: { n: "Prot4RevPass", f: parseuint16 },
        445: { n: "ObNoMacros" },
        446: { n: "Dv" },
        448: { n: "Excel9File", f: parsenoop2 },
        449: { n: "RecalcId", f: parse_RecalcId, r: 2 },
        450: { n: "EntExU2", f: parsenoop2 },
        512: { n: "Dimensions", f: parse_Dimensions },
        513: { n: "Blank", f: parse_Blank },
        515: { n: "Number", f: parse_Number },
        516: { n: "Label", f: parse_Label },
        517: { n: "BoolErr", f: parse_BoolErr },
        518: { n: "Formula", f: parse_Formula },
        519: { n: "String", f: parse_String },
        520: { n: "Row", f: parse_Row },
        523: { n: "Index" },
        545: { n: "Array", f: parse_Array },
        549: { n: "DefaultRowHeight", f: parse_DefaultRowHeight },
        566: { n: "Table" },
        574: { n: "Window2", f: parse_Window2 },
        638: { n: "RK", f: parse_RK },
        659: { n: "Style" },
        1030: { n: "Formula", f: parse_Formula },
        1048: { n: "BigName" },
        1054: { n: "Format", f: parse_Format },
        1084: { n: "ContinueBigName" },
        1212: { n: "ShrFmla", f: parse_ShrFmla },
        2048: { n: "HLinkTooltip", f: parse_HLinkTooltip },
        2049: { n: "WebPub" },
        2050: { n: "QsiSXTag" },
        2051: { n: "DBQueryExt" },
        2052: { n: "ExtString" },
        2053: { n: "TxtQry" },
        2054: { n: "Qsir" },
        2055: { n: "Qsif" },
        2056: { n: "RRDTQSIF" },
        2057: { n: "BOF", f: parse_BOF },
        2058: { n: "OleDbConn" },
        2059: { n: "WOpt" },
        2060: { n: "SXViewEx" },
        2061: { n: "SXTH" },
        2062: { n: "SXPIEx" },
        2063: { n: "SXVDTEx" },
        2064: { n: "SXViewEx9" },
        2066: { n: "ContinueFrt" },
        2067: { n: "RealTimeData" },
        2128: { n: "ChartFrtInfo" },
        2129: { n: "FrtWrapper" },
        2130: { n: "StartBlock" },
        2131: { n: "EndBlock" },
        2132: { n: "StartObject" },
        2133: { n: "EndObject" },
        2134: { n: "CatLab" },
        2135: { n: "YMult" },
        2136: { n: "SXViewLink" },
        2137: { n: "PivotChartBits" },
        2138: { n: "FrtFontList" },
        2146: { n: "SheetExt" },
        2147: { n: "BookExt", r: 12 },
        2148: { n: "SXAddl" },
        2149: { n: "CrErr" },
        2150: { n: "HFPicture" },
        2151: { n: "FeatHdr", f: parsenoop2 },
        2152: { n: "Feat" },
        2154: { n: "DataLabExt" },
        2155: { n: "DataLabExtContents" },
        2156: { n: "CellWatch" },
        2161: { n: "FeatHdr11" },
        2162: { n: "Feature11" },
        2164: { n: "DropDownObjIds" },
        2165: { n: "ContinueFrt11" },
        2166: { n: "DConn" },
        2167: { n: "List12" },
        2168: { n: "Feature12" },
        2169: { n: "CondFmt12" },
        2170: { n: "CF12" },
        2171: { n: "CFEx" },
        2172: { n: "XFCRC", f: parse_XFCRC, r: 12 },
        2173: { n: "XFExt", f: parse_XFExt, r: 12 },
        2174: { n: "AutoFilter12" },
        2175: { n: "ContinueFrt12" },
        2180: { n: "MDTInfo" },
        2181: { n: "MDXStr" },
        2182: { n: "MDXTuple" },
        2183: { n: "MDXSet" },
        2184: { n: "MDXProp" },
        2185: { n: "MDXKPI" },
        2186: { n: "MDB" },
        2187: { n: "PLV" },
        2188: { n: "Compat12", f: parsebool, r: 12 },
        2189: { n: "DXF" },
        2190: { n: "TableStyles", r: 12 },
        2191: { n: "TableStyle" },
        2192: { n: "TableStyleElement" },
        2194: { n: "StyleExt" },
        2195: { n: "NamePublish" },
        2196: { n: "NameCmt", f: parse_NameCmt, r: 12 },
        2197: { n: "SortData" },
        2198: { n: "Theme", f: parse_Theme, r: 12 },
        2199: { n: "GUIDTypeLib" },
        2200: { n: "FnGrp12" },
        2201: { n: "NameFnGrp12" },
        2202: { n: "MTRSettings", f: parse_MTRSettings, r: 12 },
        2203: { n: "CompressPictures", f: parsenoop2 },
        2204: { n: "HeaderFooter" },
        2205: { n: "CrtLayout12" },
        2206: { n: "CrtMlFrt" },
        2207: { n: "CrtMlFrtContinue" },
        2211: { n: "ForceFullCalculation", f: parse_ForceFullCalculation },
        2212: { n: "ShapePropsStream" },
        2213: { n: "TextPropsStream" },
        2214: { n: "RichTextStream" },
        2215: { n: "CrtLayout12A" },
        4097: { n: "Units" },
        4098: { n: "Chart" },
        4099: { n: "Series" },
        4102: { n: "DataFormat" },
        4103: { n: "LineFormat" },
        4105: { n: "MarkerFormat" },
        4106: { n: "AreaFormat" },
        4107: { n: "PieFormat" },
        4108: { n: "AttachedLabel" },
        4109: { n: "SeriesText" },
        4116: { n: "ChartFormat" },
        4117: { n: "Legend" },
        4118: { n: "SeriesList" },
        4119: { n: "Bar" },
        4120: { n: "Line" },
        4121: { n: "Pie" },
        4122: { n: "Area" },
        4123: { n: "Scatter" },
        4124: { n: "CrtLine" },
        4125: { n: "Axis" },
        4126: { n: "Tick" },
        4127: { n: "ValueRange" },
        4128: { n: "CatSerRange" },
        4129: { n: "AxisLine" },
        4130: { n: "CrtLink" },
        4132: { n: "DefaultText" },
        4133: { n: "Text" },
        4134: { n: "FontX", f: parseuint16 },
        4135: { n: "ObjectLink" },
        4146: { n: "Frame" },
        4147: { n: "Begin" },
        4148: { n: "End" },
        4149: { n: "PlotArea" },
        4154: { n: "Chart3d" },
        4156: { n: "PicF" },
        4157: { n: "DropBar" },
        4158: { n: "Radar" },
        4159: { n: "Surf" },
        4160: { n: "RadarArea" },
        4161: { n: "AxisParent" },
        4163: { n: "LegendException" },
        4164: { n: "ShtProps", f: parse_ShtProps },
        4165: { n: "SerToCrt" },
        4166: { n: "AxesUsed" },
        4168: { n: "SBaseRef" },
        4170: { n: "SerParent" },
        4171: { n: "SerAuxTrend" },
        4174: { n: "IFmtRecord" },
        4175: { n: "Pos" },
        4176: { n: "AlRuns" },
        4177: { n: "BRAI" },
        4187: { n: "SerAuxErrBar" },
        4188: { n: "ClrtClient", f: parse_ClrtClient },
        4189: { n: "SerFmt" },
        4191: { n: "Chart3DBarShape" },
        4192: { n: "Fbi" },
        4193: { n: "BopPop" },
        4194: { n: "AxcExt" },
        4195: { n: "Dat" },
        4196: { n: "PlotGrowth" },
        4197: { n: "SIIndex" },
        4198: { n: "GelFrame" },
        4199: { n: "BopPopCustom" },
        4200: { n: "Fbi2" },
        0: { n: "Dimensions", f: parse_Dimensions },
        2: { n: "BIFF2INT", f: parse_BIFF2INT },
        5: { n: "BoolErr", f: parse_BoolErr },
        7: { n: "String", f: parse_BIFF2STRING },
        8: { n: "BIFF2ROW" },
        11: { n: "Index" },
        22: { n: "ExternCount", f: parseuint16 },
        30: { n: "BIFF2FORMAT", f: parse_BIFF2Format },
        31: { n: "BIFF2FMTCNT" },
        32: { n: "BIFF2COLINFO" },
        33: { n: "Array", f: parse_Array },
        37: { n: "DefaultRowHeight", f: parse_DefaultRowHeight },
        50: { n: "BIFF2FONTXTRA", f: parse_BIFF2FONTXTRA },
        52: { n: "DDEObjName" },
        62: { n: "BIFF2WINDOW2" },
        67: { n: "BIFF2XF" },
        68: { n: "BIFF2XFINDEX", f: parseuint16 },
        69: { n: "BIFF2FONTCLR" },
        86: { n: "BIFF4FMTCNT" },
        126: { n: "RK" },
        127: { n: "ImData", f: parse_ImData },
        135: { n: "Addin" },
        136: { n: "Edg" },
        137: { n: "Pub" },
        145: { n: "Sub" },
        148: { n: "LHRecord" },
        149: { n: "LHNGraph" },
        150: { n: "Sound" },
        169: { n: "CoordList" },
        171: { n: "GCW" },
        188: { n: "ShrFmla" },
        191: { n: "ToolbarHdr" },
        192: { n: "ToolbarEnd" },
        194: { n: "AddMenu" },
        195: { n: "DelMenu" },
        214: { n: "RString", f: parse_RString },
        223: { n: "UDDesc" },
        234: { n: "TabIdConf" },
        354: { n: "XL5Modify" },
        421: { n: "FileSharing2" },
        521: { n: "BOF", f: parse_BOF },
        536: { n: "Lbl", f: parse_Lbl },
        547: { n: "ExternName", f: parse_ExternName },
        561: { n: "Font" },
        579: { n: "BIFF3XF" },
        1033: { n: "BOF", f: parse_BOF },
        1091: { n: "BIFF4XF" },
        2157: { n: "FeatInfo" },
        2163: { n: "FeatInfo11" },
        2177: { n: "SXAddl12" },
        2240: { n: "AutoWebPub" },
        2241: { n: "ListObj" },
        2242: { n: "ListField" },
        2243: { n: "ListDV" },
        2244: { n: "ListCondFmt" },
        2245: { n: "ListCF" },
        2246: { n: "FMQry" },
        2247: { n: "FMSQry" },
        2248: { n: "PLV" },
        2249: { n: "LnExt" },
        2250: { n: "MkrExt" },
        2251: { n: "CrtCoopt" },
        2262: { n: "FRTArchId$", r: 12 },
        29282: {}
      };
      var XLSRE = evert_key(XLSRecordEnum, "n");
      function write_biff_rec(ba, type, payload, length) {
        var t = +type || +XLSRE[type];
        if (isNaN(t))
          return;
        var len = length || (payload || []).length || 0;
        var o = ba.next(4);
        o.write_shift(2, t);
        o.write_shift(2, len);
        if (len > 0 && is_buf(payload))
          ba.push(payload);
      }
      function write_biff_continue(ba, type, payload, length) {
        var len = length || (payload || []).length || 0;
        if (len <= 8224)
          return write_biff_rec(ba, type, payload, len);
        var t = +type || +XLSRE[type];
        if (isNaN(t))
          return;
        var parts = payload.parts || [], sidx = 0;
        var i2 = 0, w = 0;
        while (w + (parts[sidx] || 8224) <= 8224) {
          w += parts[sidx] || 8224;
          sidx++;
        }
        var o = ba.next(4);
        o.write_shift(2, t);
        o.write_shift(2, w);
        ba.push(payload.slice(i2, i2 + w));
        i2 += w;
        while (i2 < len) {
          o = ba.next(4);
          o.write_shift(2, 60);
          w = 0;
          while (w + (parts[sidx] || 8224) <= 8224) {
            w += parts[sidx] || 8224;
            sidx++;
          }
          o.write_shift(2, w);
          ba.push(payload.slice(i2, i2 + w));
          i2 += w;
        }
      }
      function write_BIFF2Cell(out, r, c) {
        if (!out)
          out = new_buf(7);
        out.write_shift(2, r);
        out.write_shift(2, c);
        out.write_shift(2, 0);
        out.write_shift(1, 0);
        return out;
      }
      function write_BIFF2BERR(r, c, val, t) {
        var out = new_buf(9);
        write_BIFF2Cell(out, r, c);
        write_Bes(val, t || "b", out);
        return out;
      }
      function write_BIFF2LABEL(r, c, val) {
        var out = new_buf(8 + 2 * val.length);
        write_BIFF2Cell(out, r, c);
        out.write_shift(1, val.length);
        out.write_shift(val.length, val, "sbcs");
        return out.l < out.length ? out.slice(0, out.l) : out;
      }
      function write_ws_biff2_cell(ba, cell, R, C) {
        if (cell.v != null)
          switch (cell.t) {
            case "d":
            case "n":
              var v = cell.t == "d" ? datenum(parseDate(cell.v)) : cell.v;
              if (v == (v | 0) && v >= 0 && v < 65536)
                write_biff_rec(ba, 2, write_BIFF2INT(R, C, v));
              else
                write_biff_rec(ba, 3, write_BIFF2NUM(R, C, v));
              return;
            case "b":
            case "e":
              write_biff_rec(ba, 5, write_BIFF2BERR(R, C, cell.v, cell.t));
              return;
            case "s":
            case "str":
              write_biff_rec(ba, 4, write_BIFF2LABEL(R, C, (cell.v || "").slice(0, 255)));
              return;
          }
        write_biff_rec(ba, 1, write_BIFF2Cell(null, R, C));
      }
      function write_ws_biff2(ba, ws, idx, opts) {
        var dense = Array.isArray(ws);
        var range = safe_decode_range(ws["!ref"] || "A1"), ref, rr = "", cols = [];
        if (range.e.c > 255 || range.e.r > 16383) {
          if (opts.WTF)
            throw new Error("Range " + (ws["!ref"] || "A1") + " exceeds format limit A1:IV16384");
          range.e.c = Math.min(range.e.c, 255);
          range.e.r = Math.min(range.e.c, 16383);
          ref = encode_range(range);
        }
        for (var R = range.s.r; R <= range.e.r; ++R) {
          rr = encode_row(R);
          for (var C = range.s.c; C <= range.e.c; ++C) {
            if (R === range.s.r)
              cols[C] = encode_col(C);
            ref = cols[C] + rr;
            var cell = dense ? (ws[R] || [])[C] : ws[ref];
            if (!cell)
              continue;
            write_ws_biff2_cell(ba, cell, R, C, opts);
          }
        }
      }
      function write_biff2_buf(wb, opts) {
        var o = opts || {};
        if (DENSE != null && o.dense == null)
          o.dense = DENSE;
        var ba = buf_array();
        var idx = 0;
        for (var i2 = 0; i2 < wb.SheetNames.length; ++i2)
          if (wb.SheetNames[i2] == o.sheet)
            idx = i2;
        if (idx == 0 && !!o.sheet && wb.SheetNames[0] != o.sheet)
          throw new Error("Sheet not found: " + o.sheet);
        write_biff_rec(ba, o.biff == 4 ? 1033 : o.biff == 3 ? 521 : 9, write_BOF(wb, 16, o));
        write_ws_biff2(ba, wb.Sheets[wb.SheetNames[idx]], idx, o, wb);
        write_biff_rec(ba, 10);
        return ba.end();
      }
      function write_FONTS_biff8(ba, data, opts) {
        write_biff_rec(ba, "Font", write_Font({
          sz: 12,
          color: { theme: 1 },
          name: "Arial",
          family: 2,
          scheme: "minor"
        }, opts));
      }
      function write_FMTS_biff8(ba, NF, opts) {
        if (!NF)
          return;
        [[5, 8], [23, 26], [41, 44], [50, 392]].forEach(function(r) {
          for (var i2 = r[0]; i2 <= r[1]; ++i2)
            if (NF[i2] != null)
              write_biff_rec(ba, "Format", write_Format(i2, NF[i2], opts));
        });
      }
      function write_FEAT(ba, ws) {
        var o = new_buf(19);
        o.write_shift(4, 2151);
        o.write_shift(4, 0);
        o.write_shift(4, 0);
        o.write_shift(2, 3);
        o.write_shift(1, 1);
        o.write_shift(4, 0);
        write_biff_rec(ba, "FeatHdr", o);
        o = new_buf(39);
        o.write_shift(4, 2152);
        o.write_shift(4, 0);
        o.write_shift(4, 0);
        o.write_shift(2, 3);
        o.write_shift(1, 0);
        o.write_shift(4, 0);
        o.write_shift(2, 1);
        o.write_shift(4, 4);
        o.write_shift(2, 0);
        write_Ref8U(safe_decode_range(ws["!ref"] || "A1"), o);
        o.write_shift(4, 4);
        write_biff_rec(ba, "Feat", o);
      }
      function write_CELLXFS_biff8(ba, opts) {
        for (var i2 = 0; i2 < 16; ++i2)
          write_biff_rec(ba, "XF", write_XF({ numFmtId: 0, style: true }, 0, opts));
        opts.cellXfs.forEach(function(c) {
          write_biff_rec(ba, "XF", write_XF(c, 0, opts));
        });
      }
      function write_ws_biff8_hlinks(ba, ws) {
        for (var R = 0; R < ws["!links"].length; ++R) {
          var HL = ws["!links"][R];
          write_biff_rec(ba, "HLink", write_HLink(HL));
          if (HL[1].Tooltip)
            write_biff_rec(ba, "HLinkTooltip", write_HLinkTooltip(HL));
        }
        delete ws["!links"];
      }
      function write_ws_cols_biff8(ba, cols, ws) {
        if (!cols)
          return;
        var cnt = 0;
        cols.forEach(function(col, idx) {
          if (++cnt <= 256 && col) {
            write_biff_rec(ba, "ColInfo", write_ColInfo(col_obj_w(idx, col), idx));
          }
        });
      }
      function write_ws_biff8_cell(ba, cell, R, C, opts) {
        var os = 16 + get_cell_style(opts.cellXfs, cell, opts);
        if (cell.v == null && !cell.bf) {
          write_biff_rec(ba, "Blank", write_XLSCell(R, C, os));
          return;
        }
        if (cell.bf)
          write_biff_rec(ba, "Formula", write_Formula(cell, R, C, opts, os));
        else
          switch (cell.t) {
            case "d":
            case "n":
              var v = cell.t == "d" ? datenum(parseDate(cell.v)) : cell.v;
              write_biff_rec(ba, "Number", write_Number(R, C, v, os, opts));
              break;
            case "b":
            case "e":
              write_biff_rec(ba, 517, write_BoolErr(R, C, cell.v, os, opts, cell.t));
              break;
            case "s":
            case "str":
              if (opts.bookSST) {
                var isst = get_sst_id(opts.Strings, cell.v, opts.revStrings);
                write_biff_rec(ba, "LabelSst", write_LabelSst(R, C, isst, os, opts));
              } else
                write_biff_rec(ba, "Label", write_Label(R, C, (cell.v || "").slice(0, 255), os, opts));
              break;
            default:
              write_biff_rec(ba, "Blank", write_XLSCell(R, C, os));
          }
      }
      function write_ws_biff8(idx, opts, wb) {
        var ba = buf_array();
        var s = wb.SheetNames[idx], ws = wb.Sheets[s] || {};
        var _WB = (wb || {}).Workbook || {};
        var _sheet = (_WB.Sheets || [])[idx] || {};
        var dense = Array.isArray(ws);
        var b8 = opts.biff == 8;
        var ref, rr = "", cols = [];
        var range = safe_decode_range(ws["!ref"] || "A1");
        var MAX_ROWS = b8 ? 65536 : 16384;
        if (range.e.c > 255 || range.e.r >= MAX_ROWS) {
          if (opts.WTF)
            throw new Error("Range " + (ws["!ref"] || "A1") + " exceeds format limit A1:IV16384");
          range.e.c = Math.min(range.e.c, 255);
          range.e.r = Math.min(range.e.c, MAX_ROWS - 1);
        }
        write_biff_rec(ba, 2057, write_BOF(wb, 16, opts));
        write_biff_rec(ba, "CalcMode", writeuint16(1));
        write_biff_rec(ba, "CalcCount", writeuint16(100));
        write_biff_rec(ba, "CalcRefMode", writebool(true));
        write_biff_rec(ba, "CalcIter", writebool(false));
        write_biff_rec(ba, "CalcDelta", write_Xnum(1e-3));
        write_biff_rec(ba, "CalcSaveRecalc", writebool(true));
        write_biff_rec(ba, "PrintRowCol", writebool(false));
        write_biff_rec(ba, "PrintGrid", writebool(false));
        write_biff_rec(ba, "GridSet", writeuint16(1));
        write_biff_rec(ba, "Guts", write_Guts([0, 0]));
        write_biff_rec(ba, "HCenter", writebool(false));
        write_biff_rec(ba, "VCenter", writebool(false));
        if (b8)
          write_ws_cols_biff8(ba, ws["!cols"], ws);
        write_biff_rec(ba, 512, write_Dimensions(range, opts));
        if (b8)
          ws["!links"] = [];
        for (var R = range.s.r; R <= range.e.r; ++R) {
          rr = encode_row(R);
          for (var C = range.s.c; C <= range.e.c; ++C) {
            if (R === range.s.r)
              cols[C] = encode_col(C);
            ref = cols[C] + rr;
            var cell = dense ? (ws[R] || [])[C] : ws[ref];
            if (!cell)
              continue;
            write_ws_biff8_cell(ba, cell, R, C, opts);
            if (b8 && cell.l)
              ws["!links"].push([ref, cell.l]);
          }
        }
        var cname = _sheet.CodeName || _sheet.name || s;
        if (b8)
          write_biff_rec(ba, "Window2", write_Window2((_WB.Views || [])[0]));
        if (b8 && (ws["!merges"] || []).length)
          write_biff_rec(ba, "MergeCells", write_MergeCells(ws["!merges"]));
        if (b8)
          write_ws_biff8_hlinks(ba, ws);
        write_biff_rec(ba, "CodeName", write_XLUnicodeString(cname, opts));
        if (b8)
          write_FEAT(ba, ws);
        write_biff_rec(ba, "EOF");
        return ba.end();
      }
      function write_biff8_global(wb, bufs, opts) {
        var A = buf_array();
        var _WB = (wb || {}).Workbook || {};
        var _sheets = _WB.Sheets || [];
        var _wb = _WB.WBProps || {};
        var b8 = opts.biff == 8, b5 = opts.biff == 5;
        write_biff_rec(A, 2057, write_BOF(wb, 5, opts));
        if (opts.bookType == "xla")
          write_biff_rec(A, "Addin");
        write_biff_rec(A, "InterfaceHdr", b8 ? writeuint16(1200) : null);
        write_biff_rec(A, "Mms", writezeroes(2));
        if (b5)
          write_biff_rec(A, "ToolbarHdr");
        if (b5)
          write_biff_rec(A, "ToolbarEnd");
        write_biff_rec(A, "InterfaceEnd");
        write_biff_rec(A, "WriteAccess", write_WriteAccess("SheetJS", opts));
        write_biff_rec(A, "CodePage", writeuint16(b8 ? 1200 : 1252));
        if (b8)
          write_biff_rec(A, "DSF", writeuint16(0));
        if (b8)
          write_biff_rec(A, "Excel9File");
        write_biff_rec(A, "RRTabId", write_RRTabId(wb.SheetNames.length));
        if (b8 && wb.vbaraw)
          write_biff_rec(A, "ObProj");
        if (b8 && wb.vbaraw) {
          var cname = _wb.CodeName || "ThisWorkbook";
          write_biff_rec(A, "CodeName", write_XLUnicodeString(cname, opts));
        }
        write_biff_rec(A, "BuiltInFnGroupCount", writeuint16(17));
        write_biff_rec(A, "WinProtect", writebool(false));
        write_biff_rec(A, "Protect", writebool(false));
        write_biff_rec(A, "Password", writeuint16(0));
        if (b8)
          write_biff_rec(A, "Prot4Rev", writebool(false));
        if (b8)
          write_biff_rec(A, "Prot4RevPass", writeuint16(0));
        write_biff_rec(A, "Window1", write_Window1(opts));
        write_biff_rec(A, "Backup", writebool(false));
        write_biff_rec(A, "HideObj", writeuint16(0));
        write_biff_rec(A, "Date1904", writebool(safe1904(wb) == "true"));
        write_biff_rec(A, "CalcPrecision", writebool(true));
        if (b8)
          write_biff_rec(A, "RefreshAll", writebool(false));
        write_biff_rec(A, "BookBool", writeuint16(0));
        write_FONTS_biff8(A, wb, opts);
        write_FMTS_biff8(A, wb.SSF, opts);
        write_CELLXFS_biff8(A, opts);
        if (b8)
          write_biff_rec(A, "UsesELFs", writebool(false));
        var a = A.end();
        var C = buf_array();
        if (b8)
          write_biff_rec(C, "Country", write_Country());
        if (b8 && opts.Strings)
          write_biff_continue(C, "SST", write_SST(opts.Strings, opts));
        write_biff_rec(C, "EOF");
        var c = C.end();
        var B = buf_array();
        var blen = 0, j = 0;
        for (j = 0; j < wb.SheetNames.length; ++j)
          blen += (b8 ? 12 : 11) + (b8 ? 2 : 1) * wb.SheetNames[j].length;
        var start = a.length + blen + c.length;
        for (j = 0; j < wb.SheetNames.length; ++j) {
          var _sheet = _sheets[j] || {};
          write_biff_rec(B, "BoundSheet8", write_BoundSheet8({ pos: start, hs: _sheet.Hidden || 0, dt: 0, name: wb.SheetNames[j] }, opts));
          start += bufs[j].length;
        }
        var b = B.end();
        if (blen != b.length)
          throw new Error("BS8 " + blen + " != " + b.length);
        var out = [];
        if (a.length)
          out.push(a);
        if (b.length)
          out.push(b);
        if (c.length)
          out.push(c);
        return __toBuffer([out]);
      }
      function write_biff8_buf(wb, opts) {
        var o = opts || {};
        var bufs = [];
        if (wb && !wb.SSF) {
          wb.SSF = SSF.get_table();
        }
        if (wb && wb.SSF) {
          make_ssf(SSF);
          SSF.load_table(wb.SSF);
          o.revssf = evert_num(wb.SSF);
          o.revssf[wb.SSF[65535]] = 0;
          o.ssf = wb.SSF;
        }
        o.Strings = [];
        o.Strings.Count = 0;
        o.Strings.Unique = 0;
        fix_write_opts(o);
        o.cellXfs = [];
        get_cell_style(o.cellXfs, {}, { revssf: { "General": 0 } });
        if (!wb.Props)
          wb.Props = {};
        for (var i2 = 0; i2 < wb.SheetNames.length; ++i2)
          bufs[bufs.length] = write_ws_biff8(i2, o, wb);
        bufs.unshift(write_biff8_global(wb, bufs, o));
        return __toBuffer([bufs]);
      }
      function write_biff_buf(wb, opts) {
        var o = opts || {};
        switch (o.biff || 2) {
          case 8:
          case 5:
            return write_biff8_buf(wb, opts);
          case 4:
          case 3:
          case 2:
            return write_biff2_buf(wb, opts);
        }
        throw new Error("invalid type " + o.bookType + " for BIFF");
      }
      var HTML_ = function() {
        function html_to_sheet(str, _opts) {
          var opts = _opts || {};
          if (DENSE != null && opts.dense == null)
            opts.dense = DENSE;
          var ws = opts.dense ? [] : {};
          str = str.replace(/<!--.*?-->/g, "");
          var mtch = str.match(/<table/i);
          if (!mtch)
            throw new Error("Invalid HTML: could not find <table>");
          var mtch2 = str.match(/<\/table/i);
          var i2 = mtch.index, j = mtch2 && mtch2.index || str.length;
          var rows = split_regex(str.slice(i2, j), /(:?<tr[^>]*>)/i, "<tr>");
          var R = -1, C = 0, RS = 0, CS = 0;
          var range = { s: { r: 1e7, c: 1e7 }, e: { r: 0, c: 0 } };
          var merges = [];
          for (i2 = 0; i2 < rows.length; ++i2) {
            var row = rows[i2].trim();
            var hd = row.slice(0, 3).toLowerCase();
            if (hd == "<tr") {
              ++R;
              if (opts.sheetRows && opts.sheetRows <= R) {
                --R;
                break;
              }
              C = 0;
              continue;
            }
            if (hd != "<td" && hd != "<th")
              continue;
            var cells = row.split(/<\/t[dh]>/i);
            for (j = 0; j < cells.length; ++j) {
              var cell = cells[j].trim();
              if (!cell.match(/<t[dh]/i))
                continue;
              var m = cell, cc = 0;
              while (m.charAt(0) == "<" && (cc = m.indexOf(">")) > -1)
                m = m.slice(cc + 1);
              for (var midx = 0; midx < merges.length; ++midx) {
                var _merge = merges[midx];
                if (_merge.s.c == C && _merge.s.r < R && R <= _merge.e.r) {
                  C = _merge.e.c + 1;
                  midx = -1;
                }
              }
              var tag = parsexmltag(cell.slice(0, cell.indexOf(">")));
              CS = tag.colspan ? +tag.colspan : 1;
              if ((RS = +tag.rowspan) > 1 || CS > 1)
                merges.push({ s: { r: R, c: C }, e: { r: R + (RS || 1) - 1, c: C + CS - 1 } });
              var _t = tag.t || tag["data-t"] || "";
              if (!m.length) {
                C += CS;
                continue;
              }
              m = htmldecode(m);
              if (range.s.r > R)
                range.s.r = R;
              if (range.e.r < R)
                range.e.r = R;
              if (range.s.c > C)
                range.s.c = C;
              if (range.e.c < C)
                range.e.c = C;
              if (!m.length)
                continue;
              var o = { t: "s", v: m };
              if (opts.raw || !m.trim().length || _t == "s") {
              } else if (m === "TRUE")
                o = { t: "b", v: true };
              else if (m === "FALSE")
                o = { t: "b", v: false };
              else if (!isNaN(fuzzynum(m)))
                o = { t: "n", v: fuzzynum(m) };
              else if (!isNaN(fuzzydate(m).getDate())) {
                o = { t: "d", v: parseDate(m) };
                if (!opts.cellDates)
                  o = { t: "n", v: datenum(o.v) };
                o.z = opts.dateNF || SSF._table[14];
              }
              if (opts.dense) {
                if (!ws[R])
                  ws[R] = [];
                ws[R][C] = o;
              } else
                ws[encode_cell({ r: R, c: C })] = o;
              C += CS;
            }
          }
          ws["!ref"] = encode_range(range);
          if (merges.length)
            ws["!merges"] = merges;
          return ws;
        }
        function html_to_book(str, opts) {
          return sheet_to_workbook(html_to_sheet(str, opts), opts);
        }
        function make_html_row(ws, r, R, o) {
          var M = ws["!merges"] || [];
          var oo = [];
          for (var C = r.s.c; C <= r.e.c; ++C) {
            var RS = 0, CS = 0;
            for (var j = 0; j < M.length; ++j) {
              if (M[j].s.r > R || M[j].s.c > C)
                continue;
              if (M[j].e.r < R || M[j].e.c < C)
                continue;
              if (M[j].s.r < R || M[j].s.c < C) {
                RS = -1;
                break;
              }
              RS = M[j].e.r - M[j].s.r + 1;
              CS = M[j].e.c - M[j].s.c + 1;
              break;
            }
            if (RS < 0)
              continue;
            var coord = encode_cell({ r: R, c: C });
            var cell = o.dense ? (ws[R] || [])[C] : ws[coord];
            var w = cell && cell.v != null && (cell.h || escapehtml(cell.w || (format_cell(cell), cell.w) || "")) || "";
            var sp = {};
            if (RS > 1)
              sp.rowspan = RS;
            if (CS > 1)
              sp.colspan = CS;
            if (o.editable)
              w = '<span contenteditable="true">' + w + "</span>";
            else if (cell) {
              sp["data-t"] = cell && cell.t || "z";
              if (cell.v != null)
                sp["data-v"] = cell.v;
              if (cell.z != null)
                sp["data-z"] = cell.z;
              if (cell.l && (cell.l.Target || "#").charAt(0) != "#")
                w = '<a href="' + cell.l.Target + '">' + w + "</a>";
            }
            sp.id = (o.id || "sjs") + "-" + coord;
            oo.push(writextag("td", w, sp));
          }
          var preamble = "<tr>";
          return preamble + oo.join("") + "</tr>";
        }
        function make_html_preamble(ws, R, o) {
          var out = [];
          return out.join("") + "<table" + (o && o.id ? ' id="' + o.id + '"' : "") + ">";
        }
        var _BEGIN = '<html><head><meta charset="utf-8"/><title>SheetJS Table Export</title></head><body>';
        var _END = "</body></html>";
        function sheet_to_html(ws, opts) {
          var o = opts || {};
          var header = o.header != null ? o.header : _BEGIN;
          var footer = o.footer != null ? o.footer : _END;
          var out = [header];
          var r = decode_range(ws["!ref"]);
          o.dense = Array.isArray(ws);
          out.push(make_html_preamble(ws, r, o));
          for (var R = r.s.r; R <= r.e.r; ++R)
            out.push(make_html_row(ws, r, R, o));
          out.push("</table>" + footer);
          return out.join("");
        }
        return {
          to_workbook: html_to_book,
          to_sheet: html_to_sheet,
          _row: make_html_row,
          BEGIN: _BEGIN,
          END: _END,
          _preamble: make_html_preamble,
          from_sheet: sheet_to_html
        };
      }();
      function sheet_add_dom(ws, table, _opts) {
        var opts = _opts || {};
        if (DENSE != null)
          opts.dense = DENSE;
        var or_R = 0, or_C = 0;
        if (opts.origin != null) {
          if (typeof opts.origin == "number")
            or_R = opts.origin;
          else {
            var _origin = typeof opts.origin == "string" ? decode_cell(opts.origin) : opts.origin;
            or_R = _origin.r;
            or_C = _origin.c;
          }
        }
        var rows = table.getElementsByTagName("tr");
        var sheetRows = Math.min(opts.sheetRows || 1e7, rows.length);
        var range = { s: { r: 0, c: 0 }, e: { r: or_R, c: or_C } };
        if (ws["!ref"]) {
          var _range = decode_range(ws["!ref"]);
          range.s.r = Math.min(range.s.r, _range.s.r);
          range.s.c = Math.min(range.s.c, _range.s.c);
          range.e.r = Math.max(range.e.r, _range.e.r);
          range.e.c = Math.max(range.e.c, _range.e.c);
          if (or_R == -1)
            range.e.r = or_R = _range.e.r + 1;
        }
        var merges = [], midx = 0;
        var rowinfo = ws["!rows"] || (ws["!rows"] = []);
        var _R = 0, R = 0, _C = 0, C = 0, RS = 0, CS = 0;
        if (!ws["!cols"])
          ws["!cols"] = [];
        for (; _R < rows.length && R < sheetRows; ++_R) {
          var row = rows[_R];
          if (is_dom_element_hidden(row)) {
            if (opts.display)
              continue;
            rowinfo[R] = { hidden: true };
          }
          var elts = row.children;
          for (_C = C = 0; _C < elts.length; ++_C) {
            var elt = elts[_C];
            if (opts.display && is_dom_element_hidden(elt))
              continue;
            var v = elt.hasAttribute("data-v") ? elt.getAttribute("data-v") : elt.hasAttribute("v") ? elt.getAttribute("v") : htmldecode(elt.innerHTML);
            var z = elt.getAttribute("data-z") || elt.getAttribute("z");
            for (midx = 0; midx < merges.length; ++midx) {
              var m = merges[midx];
              if (m.s.c == C + or_C && m.s.r < R + or_R && R + or_R <= m.e.r) {
                C = m.e.c + 1 - or_C;
                midx = -1;
              }
            }
            CS = +elt.getAttribute("colspan") || 1;
            if ((RS = +elt.getAttribute("rowspan") || 1) > 1 || CS > 1)
              merges.push({ s: { r: R + or_R, c: C + or_C }, e: { r: R + or_R + (RS || 1) - 1, c: C + or_C + (CS || 1) - 1 } });
            var o = { t: "s", v };
            var _t = elt.getAttribute("data-t") || elt.getAttribute("t") || "";
            if (v != null) {
              if (v.length == 0)
                o.t = _t || "z";
              else if (opts.raw || v.trim().length == 0 || _t == "s") {
              } else if (v === "TRUE")
                o = { t: "b", v: true };
              else if (v === "FALSE")
                o = { t: "b", v: false };
              else if (!isNaN(fuzzynum(v)))
                o = { t: "n", v: fuzzynum(v) };
              else if (!isNaN(fuzzydate(v).getDate())) {
                o = { t: "d", v: parseDate(v) };
                if (!opts.cellDates)
                  o = { t: "n", v: datenum(o.v) };
                o.z = opts.dateNF || SSF._table[14];
              }
            }
            if (o.z === void 0 && z != null)
              o.z = z;
            var l = "", Aelts = elt.getElementsByTagName("A");
            if (Aelts && Aelts.length) {
              for (var Aelti = 0; Aelti < Aelts.length; ++Aelti)
                if (Aelts[Aelti].hasAttribute("href")) {
                  l = Aelts[Aelti].getAttribute("href");
                  if (l.charAt(0) != "#")
                    break;
                }
            }
            if (l && l.charAt(0) != "#")
              o.l = { Target: l };
            if (opts.dense) {
              if (!ws[R + or_R])
                ws[R + or_R] = [];
              ws[R + or_R][C + or_C] = o;
            } else
              ws[encode_cell({ c: C + or_C, r: R + or_R })] = o;
            if (range.e.c < C + or_C)
              range.e.c = C + or_C;
            C += CS;
          }
          ++R;
        }
        if (merges.length)
          ws["!merges"] = (ws["!merges"] || []).concat(merges);
        range.e.r = Math.max(range.e.r, R - 1 + or_R);
        ws["!ref"] = encode_range(range);
        if (R >= sheetRows)
          ws["!fullref"] = encode_range((range.e.r = rows.length - _R + R - 1 + or_R, range));
        return ws;
      }
      function parse_dom_table(table, _opts) {
        var opts = _opts || {};
        var ws = opts.dense ? [] : {};
        return sheet_add_dom(ws, table, _opts);
      }
      function table_to_book(table, opts) {
        return sheet_to_workbook(parse_dom_table(table, opts), opts);
      }
      function is_dom_element_hidden(element) {
        var display = "";
        var get_computed_style = get_get_computed_style_function(element);
        if (get_computed_style)
          display = get_computed_style(element).getPropertyValue("display");
        if (!display)
          display = element.style.display;
        return display === "none";
      }
      function get_get_computed_style_function(element) {
        if (element.ownerDocument.defaultView && typeof element.ownerDocument.defaultView.getComputedStyle === "function")
          return element.ownerDocument.defaultView.getComputedStyle;
        if (typeof getComputedStyle === "function")
          return getComputedStyle;
        return null;
      }
      var parse_content_xml = function() {
        var parse_text_p = function(text) {
          var fixed = text.replace(/[\t\r\n]/g, " ").trim().replace(/ +/g, " ").replace(/<text:s\/>/g, " ").replace(/<text:s text:c="(\d+)"\/>/g, function($$, $1) {
            return Array(parseInt($1, 10) + 1).join(" ");
          }).replace(/<text:tab[^>]*\/>/g, "	").replace(/<text:line-break\/>/g, "\n");
          var v = unescapexml(fixed.replace(/<[^>]*>/g, ""));
          return [v];
        };
        var number_formats = {
          day: ["d", "dd"],
          month: ["m", "mm"],
          year: ["y", "yy"],
          hours: ["h", "hh"],
          minutes: ["m", "mm"],
          seconds: ["s", "ss"],
          "am-pm": ["A/P", "AM/PM"],
          "day-of-week": ["ddd", "dddd"],
          era: ["e", "ee"],
          quarter: ["\\Qm", 'm\\"th quarter"']
        };
        return function pcx(d, _opts) {
          var opts = _opts || {};
          if (DENSE != null && opts.dense == null)
            opts.dense = DENSE;
          var str = xlml_normalize(d);
          var state = [], tmp;
          var tag;
          var NFtag = { name: "" }, NF = "", pidx = 0;
          var sheetag;
          var rowtag;
          var Sheets = {}, SheetNames = [];
          var ws = opts.dense ? [] : {};
          var Rn, q;
          var ctag = { value: "" };
          var textp = "", textpidx = 0, textptag;
          var textR = [];
          var R = -1, C = -1, range = { s: { r: 1e6, c: 1e7 }, e: { r: 0, c: 0 } };
          var row_ol = 0;
          var number_format_map = {};
          var merges = [], mrange = {}, mR = 0, mC = 0;
          var rowinfo = [], rowpeat = 1, colpeat = 1;
          var arrayf = [];
          var WB = { Names: [] };
          var atag = {};
          var _Ref = ["", ""];
          var comments = [], comment = {};
          var creator = "", creatoridx = 0;
          var isstub = false, intable = false;
          var i2 = 0;
          xlmlregex.lastIndex = 0;
          str = str.replace(/<!--([\s\S]*?)-->/mg, "").replace(/<!DOCTYPE[^\[]*\[[^\]]*\]>/gm, "");
          while (Rn = xlmlregex.exec(str))
            switch (Rn[3] = Rn[3].replace(/_.*$/, "")) {
              case "table":
              case "\u5DE5\u4F5C\u8868":
                if (Rn[1] === "/") {
                  if (range.e.c >= range.s.c && range.e.r >= range.s.r)
                    ws["!ref"] = encode_range(range);
                  else
                    ws["!ref"] = "A1:A1";
                  if (opts.sheetRows > 0 && opts.sheetRows <= range.e.r) {
                    ws["!fullref"] = ws["!ref"];
                    range.e.r = opts.sheetRows - 1;
                    ws["!ref"] = encode_range(range);
                  }
                  if (merges.length)
                    ws["!merges"] = merges;
                  if (rowinfo.length)
                    ws["!rows"] = rowinfo;
                  sheetag.name = sheetag["\u540D\u79F0"] || sheetag.name;
                  if (typeof JSON !== "undefined")
                    JSON.stringify(sheetag);
                  SheetNames.push(sheetag.name);
                  Sheets[sheetag.name] = ws;
                  intable = false;
                } else if (Rn[0].charAt(Rn[0].length - 2) !== "/") {
                  sheetag = parsexmltag(Rn[0], false);
                  R = C = -1;
                  range.s.r = range.s.c = 1e7;
                  range.e.r = range.e.c = 0;
                  ws = opts.dense ? [] : {};
                  merges = [];
                  rowinfo = [];
                  intable = true;
                }
                break;
              case "table-row-group":
                if (Rn[1] === "/")
                  --row_ol;
                else
                  ++row_ol;
                break;
              case "table-row":
              case "\u884C":
                if (Rn[1] === "/") {
                  R += rowpeat;
                  rowpeat = 1;
                  break;
                }
                rowtag = parsexmltag(Rn[0], false);
                if (rowtag["\u884C\u53F7"])
                  R = rowtag["\u884C\u53F7"] - 1;
                else if (R == -1)
                  R = 0;
                rowpeat = +rowtag["number-rows-repeated"] || 1;
                if (rowpeat < 10) {
                  for (i2 = 0; i2 < rowpeat; ++i2)
                    if (row_ol > 0)
                      rowinfo[R + i2] = { level: row_ol };
                }
                C = -1;
                break;
              case "covered-table-cell":
                if (Rn[1] !== "/")
                  ++C;
                if (opts.sheetStubs) {
                  if (opts.dense) {
                    if (!ws[R])
                      ws[R] = [];
                    ws[R][C] = { t: "z" };
                  } else
                    ws[encode_cell({ r: R, c: C })] = { t: "z" };
                }
                textp = "";
                textR = [];
                break;
              case "table-cell":
              case "\u6570\u636E":
                if (Rn[0].charAt(Rn[0].length - 2) === "/") {
                  ++C;
                  ctag = parsexmltag(Rn[0], false);
                  colpeat = parseInt(ctag["number-columns-repeated"] || "1", 10);
                  q = { t: "z", v: null };
                  if (ctag.formula && opts.cellFormula != false)
                    q.f = ods_to_csf_formula(unescapexml(ctag.formula));
                  if ((ctag["\u6570\u636E\u7C7B\u578B"] || ctag["value-type"]) == "string") {
                    q.t = "s";
                    q.v = unescapexml(ctag["string-value"] || "");
                    if (opts.dense) {
                      if (!ws[R])
                        ws[R] = [];
                      ws[R][C] = q;
                    } else {
                      ws[encode_cell({ r: R, c: C })] = q;
                    }
                  }
                  C += colpeat - 1;
                } else if (Rn[1] !== "/") {
                  ++C;
                  colpeat = 1;
                  var rptR = rowpeat ? R + rowpeat - 1 : R;
                  if (C > range.e.c)
                    range.e.c = C;
                  if (C < range.s.c)
                    range.s.c = C;
                  if (R < range.s.r)
                    range.s.r = R;
                  if (rptR > range.e.r)
                    range.e.r = rptR;
                  ctag = parsexmltag(Rn[0], false);
                  comments = [];
                  comment = {};
                  q = { t: ctag["\u6570\u636E\u7C7B\u578B"] || ctag["value-type"], v: null };
                  if (opts.cellFormula) {
                    if (ctag.formula)
                      ctag.formula = unescapexml(ctag.formula);
                    if (ctag["number-matrix-columns-spanned"] && ctag["number-matrix-rows-spanned"]) {
                      mR = parseInt(ctag["number-matrix-rows-spanned"], 10) || 0;
                      mC = parseInt(ctag["number-matrix-columns-spanned"], 10) || 0;
                      mrange = { s: { r: R, c: C }, e: { r: R + mR - 1, c: C + mC - 1 } };
                      q.F = encode_range(mrange);
                      arrayf.push([mrange, q.F]);
                    }
                    if (ctag.formula)
                      q.f = ods_to_csf_formula(ctag.formula);
                    else
                      for (i2 = 0; i2 < arrayf.length; ++i2)
                        if (R >= arrayf[i2][0].s.r && R <= arrayf[i2][0].e.r) {
                          if (C >= arrayf[i2][0].s.c && C <= arrayf[i2][0].e.c)
                            q.F = arrayf[i2][1];
                        }
                  }
                  if (ctag["number-columns-spanned"] || ctag["number-rows-spanned"]) {
                    mR = parseInt(ctag["number-rows-spanned"], 10) || 0;
                    mC = parseInt(ctag["number-columns-spanned"], 10) || 0;
                    mrange = { s: { r: R, c: C }, e: { r: R + mR - 1, c: C + mC - 1 } };
                    merges.push(mrange);
                  }
                  if (ctag["number-columns-repeated"])
                    colpeat = parseInt(ctag["number-columns-repeated"], 10);
                  switch (q.t) {
                    case "boolean":
                      q.t = "b";
                      q.v = parsexmlbool(ctag["boolean-value"]);
                      break;
                    case "float":
                      q.t = "n";
                      q.v = parseFloat(ctag.value);
                      break;
                    case "percentage":
                      q.t = "n";
                      q.v = parseFloat(ctag.value);
                      break;
                    case "currency":
                      q.t = "n";
                      q.v = parseFloat(ctag.value);
                      break;
                    case "date":
                      q.t = "d";
                      q.v = parseDate(ctag["date-value"]);
                      if (!opts.cellDates) {
                        q.t = "n";
                        q.v = datenum(q.v);
                      }
                      q.z = "m/d/yy";
                      break;
                    case "time":
                      q.t = "n";
                      q.v = parse_isodur(ctag["time-value"]) / 86400;
                      if (opts.cellDates) {
                        q.t = "d";
                        q.v = numdate(q.v);
                      }
                      q.z = "HH:MM:SS";
                      break;
                    case "number":
                      q.t = "n";
                      q.v = parseFloat(ctag["\u6570\u636E\u6570\u503C"]);
                      break;
                    default:
                      if (q.t === "string" || q.t === "text" || !q.t) {
                        q.t = "s";
                        if (ctag["string-value"] != null) {
                          textp = unescapexml(ctag["string-value"]);
                          textR = [];
                        }
                      } else
                        throw new Error("Unsupported value type " + q.t);
                  }
                } else {
                  isstub = false;
                  if (q.t === "s") {
                    q.v = textp || "";
                    if (textR.length)
                      q.R = textR;
                    isstub = textpidx == 0;
                  }
                  if (atag.Target)
                    q.l = atag;
                  if (comments.length > 0) {
                    q.c = comments;
                    comments = [];
                  }
                  if (textp && opts.cellText !== false)
                    q.w = textp;
                  if (isstub) {
                    q.t = "z";
                    delete q.v;
                  }
                  if (!isstub || opts.sheetStubs) {
                    if (!(opts.sheetRows && opts.sheetRows <= R)) {
                      for (var rpt = 0; rpt < rowpeat; ++rpt) {
                        colpeat = parseInt(ctag["number-columns-repeated"] || "1", 10);
                        if (opts.dense) {
                          if (!ws[R + rpt])
                            ws[R + rpt] = [];
                          ws[R + rpt][C] = rpt == 0 ? q : dup(q);
                          while (--colpeat > 0)
                            ws[R + rpt][C + colpeat] = dup(q);
                        } else {
                          ws[encode_cell({ r: R + rpt, c: C })] = q;
                          while (--colpeat > 0)
                            ws[encode_cell({ r: R + rpt, c: C + colpeat })] = dup(q);
                        }
                        if (range.e.c <= C)
                          range.e.c = C;
                      }
                    }
                  }
                  colpeat = parseInt(ctag["number-columns-repeated"] || "1", 10);
                  C += colpeat - 1;
                  colpeat = 0;
                  q = {};
                  textp = "";
                  textR = [];
                }
                atag = {};
                break;
              case "document":
              case "document-content":
              case "\u7535\u5B50\u8868\u683C\u6587\u6863":
              case "spreadsheet":
              case "\u4E3B\u4F53":
              case "scripts":
              case "styles":
              case "font-face-decls":
              case "master-styles":
                if (Rn[1] === "/") {
                  if ((tmp = state.pop())[0] !== Rn[3])
                    throw "Bad state: " + tmp;
                } else if (Rn[0].charAt(Rn[0].length - 2) !== "/")
                  state.push([Rn[3], true]);
                break;
              case "annotation":
                if (Rn[1] === "/") {
                  if ((tmp = state.pop())[0] !== Rn[3])
                    throw "Bad state: " + tmp;
                  comment.t = textp;
                  if (textR.length)
                    comment.R = textR;
                  comment.a = creator;
                  comments.push(comment);
                } else if (Rn[0].charAt(Rn[0].length - 2) !== "/") {
                  state.push([Rn[3], false]);
                }
                creator = "";
                creatoridx = 0;
                textp = "";
                textpidx = 0;
                textR = [];
                break;
              case "creator":
                if (Rn[1] === "/") {
                  creator = str.slice(creatoridx, Rn.index);
                } else
                  creatoridx = Rn.index + Rn[0].length;
                break;
              case "meta":
              case "\u5143\u6570\u636E":
              case "settings":
              case "config-item-set":
              case "config-item-map-indexed":
              case "config-item-map-entry":
              case "config-item-map-named":
              case "shapes":
              case "frame":
              case "text-box":
              case "image":
              case "data-pilot-tables":
              case "list-style":
              case "form":
              case "dde-links":
              case "event-listeners":
              case "chart":
                if (Rn[1] === "/") {
                  if ((tmp = state.pop())[0] !== Rn[3])
                    throw "Bad state: " + tmp;
                } else if (Rn[0].charAt(Rn[0].length - 2) !== "/")
                  state.push([Rn[3], false]);
                textp = "";
                textpidx = 0;
                textR = [];
                break;
              case "scientific-number":
                break;
              case "currency-symbol":
                break;
              case "currency-style":
                break;
              case "number-style":
              case "percentage-style":
              case "date-style":
              case "time-style":
                if (Rn[1] === "/") {
                  number_format_map[NFtag.name] = NF;
                  if ((tmp = state.pop())[0] !== Rn[3])
                    throw "Bad state: " + tmp;
                } else if (Rn[0].charAt(Rn[0].length - 2) !== "/") {
                  NF = "";
                  NFtag = parsexmltag(Rn[0], false);
                  state.push([Rn[3], true]);
                }
                break;
              case "script":
                break;
              case "libraries":
                break;
              case "automatic-styles":
                break;
              case "default-style":
              case "page-layout":
                break;
              case "style":
                break;
              case "map":
                break;
              case "font-face":
                break;
              case "paragraph-properties":
                break;
              case "table-properties":
                break;
              case "table-column-properties":
                break;
              case "table-row-properties":
                break;
              case "table-cell-properties":
                break;
              case "number":
                switch (state[state.length - 1][0]) {
                  case "time-style":
                  case "date-style":
                    tag = parsexmltag(Rn[0], false);
                    NF += number_formats[Rn[3]][tag.style === "long" ? 1 : 0];
                    break;
                }
                break;
              case "fraction":
                break;
              case "day":
              case "month":
              case "year":
              case "era":
              case "day-of-week":
              case "week-of-year":
              case "quarter":
              case "hours":
              case "minutes":
              case "seconds":
              case "am-pm":
                switch (state[state.length - 1][0]) {
                  case "time-style":
                  case "date-style":
                    tag = parsexmltag(Rn[0], false);
                    NF += number_formats[Rn[3]][tag.style === "long" ? 1 : 0];
                    break;
                }
                break;
              case "boolean-style":
                break;
              case "boolean":
                break;
              case "text-style":
                break;
              case "text":
                if (Rn[0].slice(-2) === "/>")
                  break;
                else if (Rn[1] === "/")
                  switch (state[state.length - 1][0]) {
                    case "number-style":
                    case "date-style":
                    case "time-style":
                      NF += str.slice(pidx, Rn.index);
                      break;
                  }
                else
                  pidx = Rn.index + Rn[0].length;
                break;
              case "named-range":
                tag = parsexmltag(Rn[0], false);
                _Ref = ods_to_csf_3D(tag["cell-range-address"]);
                var nrange = { Name: tag.name, Ref: _Ref[0] + "!" + _Ref[1] };
                if (intable)
                  nrange.Sheet = SheetNames.length;
                WB.Names.push(nrange);
                break;
              case "text-content":
                break;
              case "text-properties":
                break;
              case "embedded-text":
                break;
              case "body":
              case "\u7535\u5B50\u8868\u683C":
                break;
              case "forms":
                break;
              case "table-column":
                break;
              case "table-header-rows":
                break;
              case "table-rows":
                break;
              case "table-column-group":
                break;
              case "table-header-columns":
                break;
              case "table-columns":
                break;
              case "null-date":
                break;
              case "graphic-properties":
                break;
              case "calculation-settings":
                break;
              case "named-expressions":
                break;
              case "label-range":
                break;
              case "label-ranges":
                break;
              case "named-expression":
                break;
              case "sort":
                break;
              case "sort-by":
                break;
              case "sort-groups":
                break;
              case "tab":
                break;
              case "line-break":
                break;
              case "span":
                break;
              case "p":
              case "\u6587\u672C\u4E32":
                if (["master-styles"].indexOf(state[state.length - 1][0]) > -1)
                  break;
                if (Rn[1] === "/" && (!ctag || !ctag["string-value"])) {
                  var ptp = parse_text_p(str.slice(textpidx, Rn.index), textptag);
                  textp = (textp.length > 0 ? textp + "\n" : "") + ptp[0];
                } else {
                  textptag = parsexmltag(Rn[0], false);
                  textpidx = Rn.index + Rn[0].length;
                }
                break;
              case "s":
                break;
              case "database-range":
                if (Rn[1] === "/")
                  break;
                try {
                  _Ref = ods_to_csf_3D(parsexmltag(Rn[0])["target-range-address"]);
                  Sheets[_Ref[0]]["!autofilter"] = { ref: _Ref[1] };
                } catch (e) {
                }
                break;
              case "date":
                break;
              case "object":
                break;
              case "title":
              case "\u6807\u9898":
                break;
              case "desc":
                break;
              case "binary-data":
                break;
              case "table-source":
                break;
              case "scenario":
                break;
              case "iteration":
                break;
              case "content-validations":
                break;
              case "content-validation":
                break;
              case "help-message":
                break;
              case "error-message":
                break;
              case "database-ranges":
                break;
              case "filter":
                break;
              case "filter-and":
                break;
              case "filter-or":
                break;
              case "filter-condition":
                break;
              case "list-level-style-bullet":
                break;
              case "list-level-style-number":
                break;
              case "list-level-properties":
                break;
              case "sender-firstname":
              case "sender-lastname":
              case "sender-initials":
              case "sender-title":
              case "sender-position":
              case "sender-email":
              case "sender-phone-private":
              case "sender-fax":
              case "sender-company":
              case "sender-phone-work":
              case "sender-street":
              case "sender-city":
              case "sender-postal-code":
              case "sender-country":
              case "sender-state-or-province":
              case "author-name":
              case "author-initials":
              case "chapter":
              case "file-name":
              case "template-name":
              case "sheet-name":
                break;
              case "event-listener":
                break;
              case "initial-creator":
              case "creation-date":
              case "print-date":
              case "generator":
              case "document-statistic":
              case "user-defined":
              case "editing-duration":
              case "editing-cycles":
                break;
              case "config-item":
                break;
              case "page-number":
                break;
              case "page-count":
                break;
              case "time":
                break;
              case "cell-range-source":
                break;
              case "detective":
                break;
              case "operation":
                break;
              case "highlighted-range":
                break;
              case "data-pilot-table":
              case "source-cell-range":
              case "source-service":
              case "data-pilot-field":
              case "data-pilot-level":
              case "data-pilot-subtotals":
              case "data-pilot-subtotal":
              case "data-pilot-members":
              case "data-pilot-member":
              case "data-pilot-display-info":
              case "data-pilot-sort-info":
              case "data-pilot-layout-info":
              case "data-pilot-field-reference":
              case "data-pilot-groups":
              case "data-pilot-group":
              case "data-pilot-group-member":
                break;
              case "rect":
                break;
              case "dde-connection-decls":
              case "dde-connection-decl":
              case "dde-link":
              case "dde-source":
                break;
              case "properties":
                break;
              case "property":
                break;
              case "a":
                if (Rn[1] !== "/") {
                  atag = parsexmltag(Rn[0], false);
                  if (!atag.href)
                    break;
                  atag.Target = unescapexml(atag.href);
                  delete atag.href;
                  if (atag.Target.charAt(0) == "#" && atag.Target.indexOf(".") > -1) {
                    _Ref = ods_to_csf_3D(atag.Target.slice(1));
                    atag.Target = "#" + _Ref[0] + "!" + _Ref[1];
                  } else if (atag.Target.match(/^\.\.[\\\/]/))
                    atag.Target = atag.Target.slice(3);
                }
                break;
              case "table-protection":
                break;
              case "data-pilot-grand-total":
                break;
              case "office-document-common-attrs":
                break;
              default:
                switch (Rn[2]) {
                  case "dc:":
                  case "calcext:":
                  case "loext:":
                  case "ooo:":
                  case "chartooo:":
                  case "draw:":
                  case "style:":
                  case "chart:":
                  case "form:":
                  case "uof:":
                  case "\u8868:":
                  case "\u5B57:":
                    break;
                  default:
                    if (opts.WTF)
                      throw new Error(Rn);
                }
            }
          var out = {
            Sheets,
            SheetNames,
            Workbook: WB
          };
          if (opts.bookSheets)
            delete out.Sheets;
          return out;
        };
      }();
      function parse_ods(zip, opts) {
        opts = opts || {};
        var ods = !!safegetzipfile(zip, "objectdata");
        if (ods)
          parse_manifest(getzipdata(zip, "META-INF/manifest.xml"), opts);
        var content = getzipstr(zip, "content.xml");
        if (!content)
          throw new Error("Missing content.xml in " + (ods ? "ODS" : "UOF") + " file");
        var wb = parse_content_xml(ods ? content : utf8read(content), opts);
        if (safegetzipfile(zip, "meta.xml"))
          wb.Props = parse_core_props(getzipdata(zip, "meta.xml"));
        return wb;
      }
      function parse_fods(data, opts) {
        return parse_content_xml(data, opts);
      }
      var write_styles_ods = function() {
        var payload = "<office:document-styles " + wxt_helper({
          "xmlns:office": "urn:oasis:names:tc:opendocument:xmlns:office:1.0",
          "xmlns:table": "urn:oasis:names:tc:opendocument:xmlns:table:1.0",
          "xmlns:style": "urn:oasis:names:tc:opendocument:xmlns:style:1.0",
          "xmlns:text": "urn:oasis:names:tc:opendocument:xmlns:text:1.0",
          "xmlns:draw": "urn:oasis:names:tc:opendocument:xmlns:drawing:1.0",
          "xmlns:fo": "urn:oasis:names:tc:opendocument:xmlns:xsl-fo-compatible:1.0",
          "xmlns:xlink": "http://www.w3.org/1999/xlink",
          "xmlns:dc": "http://purl.org/dc/elements/1.1/",
          "xmlns:number": "urn:oasis:names:tc:opendocument:xmlns:datastyle:1.0",
          "xmlns:svg": "urn:oasis:names:tc:opendocument:xmlns:svg-compatible:1.0",
          "xmlns:of": "urn:oasis:names:tc:opendocument:xmlns:of:1.2",
          "office:version": "1.2"
        }) + "></office:document-styles>";
        return function wso() {
          return XML_HEADER + payload;
        };
      }();
      var write_content_ods = function() {
        var write_text_p = function(text) {
          return escapexml(text).replace(/  +/g, function($$) {
            return '<text:s text:c="' + $$.length + '"/>';
          }).replace(/\t/g, "<text:tab/>").replace(/\n/g, "</text:p><text:p>").replace(/^ /, "<text:s/>").replace(/ $/, "<text:s/>");
        };
        var null_cell_xml = "          <table:table-cell />\n";
        var covered_cell_xml = "          <table:covered-table-cell/>\n";
        var write_ws2 = function(ws, wb, i2) {
          var o = [];
          o.push('      <table:table table:name="' + escapexml(wb.SheetNames[i2]) + '" table:style-name="ta1">\n');
          var R = 0, C = 0, range = decode_range(ws["!ref"] || "A1");
          var marr = ws["!merges"] || [], mi = 0;
          var dense = Array.isArray(ws);
          if (ws["!cols"]) {
            for (C = 0; C <= range.e.c; ++C)
              o.push("        <table:table-column" + (ws["!cols"][C] ? ' table:style-name="co' + ws["!cols"][C].ods + '"' : "") + "></table:table-column>\n");
          }
          var H = "", ROWS = ws["!rows"] || [];
          for (R = 0; R < range.s.r; ++R) {
            H = ROWS[R] ? ' table:style-name="ro' + ROWS[R].ods + '"' : "";
            o.push("        <table:table-row" + H + "></table:table-row>\n");
          }
          for (; R <= range.e.r; ++R) {
            H = ROWS[R] ? ' table:style-name="ro' + ROWS[R].ods + '"' : "";
            o.push("        <table:table-row" + H + ">\n");
            for (C = 0; C < range.s.c; ++C)
              o.push(null_cell_xml);
            for (; C <= range.e.c; ++C) {
              var skip = false, ct = {}, textp = "";
              for (mi = 0; mi != marr.length; ++mi) {
                if (marr[mi].s.c > C)
                  continue;
                if (marr[mi].s.r > R)
                  continue;
                if (marr[mi].e.c < C)
                  continue;
                if (marr[mi].e.r < R)
                  continue;
                if (marr[mi].s.c != C || marr[mi].s.r != R)
                  skip = true;
                ct["table:number-columns-spanned"] = marr[mi].e.c - marr[mi].s.c + 1;
                ct["table:number-rows-spanned"] = marr[mi].e.r - marr[mi].s.r + 1;
                break;
              }
              if (skip) {
                o.push(covered_cell_xml);
                continue;
              }
              var ref = encode_cell({ r: R, c: C }), cell = dense ? (ws[R] || [])[C] : ws[ref];
              if (cell && cell.f) {
                ct["table:formula"] = escapexml(csf_to_ods_formula(cell.f));
                if (cell.F) {
                  if (cell.F.slice(0, ref.length) == ref) {
                    var _Fref = decode_range(cell.F);
                    ct["table:number-matrix-columns-spanned"] = _Fref.e.c - _Fref.s.c + 1;
                    ct["table:number-matrix-rows-spanned"] = _Fref.e.r - _Fref.s.r + 1;
                  }
                }
              }
              if (!cell) {
                o.push(null_cell_xml);
                continue;
              }
              switch (cell.t) {
                case "b":
                  textp = cell.v ? "TRUE" : "FALSE";
                  ct["office:value-type"] = "boolean";
                  ct["office:boolean-value"] = cell.v ? "true" : "false";
                  break;
                case "n":
                  textp = cell.w || String(cell.v || 0);
                  ct["office:value-type"] = "float";
                  ct["office:value"] = cell.v || 0;
                  break;
                case "s":
                case "str":
                  textp = cell.v == null ? "" : cell.v;
                  ct["office:value-type"] = "string";
                  break;
                case "d":
                  textp = cell.w || parseDate(cell.v).toISOString();
                  ct["office:value-type"] = "date";
                  ct["office:date-value"] = parseDate(cell.v).toISOString();
                  ct["table:style-name"] = "ce1";
                  break;
                default:
                  o.push(null_cell_xml);
                  continue;
              }
              var text_p = write_text_p(textp);
              if (cell.l && cell.l.Target) {
                var _tgt = cell.l.Target;
                _tgt = _tgt.charAt(0) == "#" ? "#" + csf_to_ods_3D(_tgt.slice(1)) : _tgt;
                if (_tgt.charAt(0) != "#" && !_tgt.match(/^\w+:/))
                  _tgt = "../" + _tgt;
                text_p = writextag("text:a", text_p, { "xlink:href": _tgt.replace(/&/g, "&amp;") });
              }
              o.push("          " + writextag("table:table-cell", writextag("text:p", text_p, {}), ct) + "\n");
            }
            o.push("        </table:table-row>\n");
          }
          o.push("      </table:table>\n");
          return o.join("");
        };
        var write_automatic_styles_ods = function(o, wb) {
          o.push(" <office:automatic-styles>\n");
          o.push('  <number:date-style style:name="N37" number:automatic-order="true">\n');
          o.push('   <number:month number:style="long"/>\n');
          o.push("   <number:text>/</number:text>\n");
          o.push('   <number:day number:style="long"/>\n');
          o.push("   <number:text>/</number:text>\n");
          o.push("   <number:year/>\n");
          o.push("  </number:date-style>\n");
          var cidx = 0;
          wb.SheetNames.map(function(n) {
            return wb.Sheets[n];
          }).forEach(function(ws) {
            if (!ws)
              return;
            if (ws["!cols"]) {
              for (var C = 0; C < ws["!cols"].length; ++C)
                if (ws["!cols"][C]) {
                  var colobj = ws["!cols"][C];
                  if (colobj.width == null && colobj.wpx == null && colobj.wch == null)
                    continue;
                  process_col(colobj);
                  colobj.ods = cidx;
                  var w = ws["!cols"][C].wpx + "px";
                  o.push('  <style:style style:name="co' + cidx + '" style:family="table-column">\n');
                  o.push('   <style:table-column-properties fo:break-before="auto" style:column-width="' + w + '"/>\n');
                  o.push("  </style:style>\n");
                  ++cidx;
                }
            }
          });
          var ridx = 0;
          wb.SheetNames.map(function(n) {
            return wb.Sheets[n];
          }).forEach(function(ws) {
            if (!ws)
              return;
            if (ws["!rows"]) {
              for (var R = 0; R < ws["!rows"].length; ++R)
                if (ws["!rows"][R]) {
                  ws["!rows"][R].ods = ridx;
                  var h = ws["!rows"][R].hpx + "px";
                  o.push('  <style:style style:name="ro' + ridx + '" style:family="table-row">\n');
                  o.push('   <style:table-row-properties fo:break-before="auto" style:row-height="' + h + '"/>\n');
                  o.push("  </style:style>\n");
                  ++ridx;
                }
            }
          });
          o.push('  <style:style style:name="ta1" style:family="table">\n');
          o.push('   <style:table-properties table:display="true" style:writing-mode="lr-tb"/>\n');
          o.push("  </style:style>\n");
          o.push('  <style:style style:name="ce1" style:family="table-cell" style:parent-style-name="Default" style:data-style-name="N37"/>\n');
          o.push(" </office:automatic-styles>\n");
        };
        return function wcx(wb, opts) {
          var o = [XML_HEADER];
          var attr = wxt_helper({
            "xmlns:office": "urn:oasis:names:tc:opendocument:xmlns:office:1.0",
            "xmlns:table": "urn:oasis:names:tc:opendocument:xmlns:table:1.0",
            "xmlns:style": "urn:oasis:names:tc:opendocument:xmlns:style:1.0",
            "xmlns:text": "urn:oasis:names:tc:opendocument:xmlns:text:1.0",
            "xmlns:draw": "urn:oasis:names:tc:opendocument:xmlns:drawing:1.0",
            "xmlns:fo": "urn:oasis:names:tc:opendocument:xmlns:xsl-fo-compatible:1.0",
            "xmlns:xlink": "http://www.w3.org/1999/xlink",
            "xmlns:dc": "http://purl.org/dc/elements/1.1/",
            "xmlns:meta": "urn:oasis:names:tc:opendocument:xmlns:meta:1.0",
            "xmlns:number": "urn:oasis:names:tc:opendocument:xmlns:datastyle:1.0",
            "xmlns:presentation": "urn:oasis:names:tc:opendocument:xmlns:presentation:1.0",
            "xmlns:svg": "urn:oasis:names:tc:opendocument:xmlns:svg-compatible:1.0",
            "xmlns:chart": "urn:oasis:names:tc:opendocument:xmlns:chart:1.0",
            "xmlns:dr3d": "urn:oasis:names:tc:opendocument:xmlns:dr3d:1.0",
            "xmlns:math": "http://www.w3.org/1998/Math/MathML",
            "xmlns:form": "urn:oasis:names:tc:opendocument:xmlns:form:1.0",
            "xmlns:script": "urn:oasis:names:tc:opendocument:xmlns:script:1.0",
            "xmlns:ooo": "http://openoffice.org/2004/office",
            "xmlns:ooow": "http://openoffice.org/2004/writer",
            "xmlns:oooc": "http://openoffice.org/2004/calc",
            "xmlns:dom": "http://www.w3.org/2001/xml-events",
            "xmlns:xforms": "http://www.w3.org/2002/xforms",
            "xmlns:xsd": "http://www.w3.org/2001/XMLSchema",
            "xmlns:xsi": "http://www.w3.org/2001/XMLSchema-instance",
            "xmlns:sheet": "urn:oasis:names:tc:opendocument:sh33tjs:1.0",
            "xmlns:rpt": "http://openoffice.org/2005/report",
            "xmlns:of": "urn:oasis:names:tc:opendocument:xmlns:of:1.2",
            "xmlns:xhtml": "http://www.w3.org/1999/xhtml",
            "xmlns:grddl": "http://www.w3.org/2003/g/data-view#",
            "xmlns:tableooo": "http://openoffice.org/2009/table",
            "xmlns:drawooo": "http://openoffice.org/2010/draw",
            "xmlns:calcext": "urn:org:documentfoundation:names:experimental:calc:xmlns:calcext:1.0",
            "xmlns:loext": "urn:org:documentfoundation:names:experimental:office:xmlns:loext:1.0",
            "xmlns:field": "urn:openoffice:names:experimental:ooo-ms-interop:xmlns:field:1.0",
            "xmlns:formx": "urn:openoffice:names:experimental:ooxml-odf-interop:xmlns:form:1.0",
            "xmlns:css3t": "http://www.w3.org/TR/css3-text/",
            "office:version": "1.2"
          });
          var fods = wxt_helper({
            "xmlns:config": "urn:oasis:names:tc:opendocument:xmlns:config:1.0",
            "office:mimetype": "application/vnd.oasis.opendocument.spreadsheet"
          });
          if (opts.bookType == "fods") {
            o.push("<office:document" + attr + fods + ">\n");
            o.push(write_meta_ods().replace(/office:document-meta/g, "office:meta"));
          } else
            o.push("<office:document-content" + attr + ">\n");
          write_automatic_styles_ods(o, wb);
          o.push("  <office:body>\n");
          o.push("    <office:spreadsheet>\n");
          for (var i2 = 0; i2 != wb.SheetNames.length; ++i2)
            o.push(write_ws2(wb.Sheets[wb.SheetNames[i2]], wb, i2, opts));
          o.push("    </office:spreadsheet>\n");
          o.push("  </office:body>\n");
          if (opts.bookType == "fods")
            o.push("</office:document>");
          else
            o.push("</office:document-content>");
          return o.join("");
        };
      }();
      function write_ods(wb, opts) {
        if (opts.bookType == "fods")
          return write_content_ods(wb, opts);
        var zip = zip_new();
        var f = "";
        var manifest = [];
        var rdf = [];
        f = "mimetype";
        zip_add_file(zip, f, "application/vnd.oasis.opendocument.spreadsheet");
        f = "content.xml";
        zip_add_file(zip, f, write_content_ods(wb, opts));
        manifest.push([f, "text/xml"]);
        rdf.push([f, "ContentFile"]);
        f = "styles.xml";
        zip_add_file(zip, f, write_styles_ods(wb, opts));
        manifest.push([f, "text/xml"]);
        rdf.push([f, "StylesFile"]);
        f = "meta.xml";
        zip_add_file(zip, f, XML_HEADER + write_meta_ods());
        manifest.push([f, "text/xml"]);
        rdf.push([f, "MetadataFile"]);
        f = "manifest.rdf";
        zip_add_file(zip, f, write_rdf(rdf));
        manifest.push([f, "application/rdf+xml"]);
        f = "META-INF/manifest.xml";
        zip_add_file(zip, f, write_manifest(manifest));
        return zip;
      }
      function write_sheet_index(wb, sheet) {
        if (!sheet)
          return 0;
        var idx = wb.SheetNames.indexOf(sheet);
        if (idx == -1)
          throw new Error("Sheet not found: " + sheet);
        return idx;
      }
      function write_obj_str(factory) {
        return function write_str(wb, o) {
          var idx = write_sheet_index(wb, o.sheet);
          return factory.from_sheet(wb.Sheets[wb.SheetNames[idx]], o, wb);
        };
      }
      var write_htm_str = write_obj_str(HTML_);
      var write_csv_str = write_obj_str({ from_sheet: sheet_to_csv });
      var write_slk_str = write_obj_str(typeof SYLK !== "undefined" ? SYLK : {});
      var write_dif_str = write_obj_str(typeof DIF !== "undefined" ? DIF : {});
      var write_prn_str = write_obj_str(typeof PRN !== "undefined" ? PRN : {});
      var write_rtf_str = write_obj_str(typeof RTF !== "undefined" ? RTF : {});
      var write_txt_str = write_obj_str({ from_sheet: sheet_to_txt });
      var write_dbf_buf = write_obj_str(typeof DBF !== "undefined" ? DBF : {});
      var write_eth_str = write_obj_str(typeof ETH !== "undefined" ? ETH : {});
      function fix_opts_func(defaults) {
        return function fix_opts(opts) {
          for (var i2 = 0; i2 != defaults.length; ++i2) {
            var d = defaults[i2];
            if (opts[d[0]] === void 0)
              opts[d[0]] = d[1];
            if (d[2] === "n")
              opts[d[0]] = Number(opts[d[0]]);
          }
        };
      }
      var fix_read_opts = function(opts) {
        fix_opts_func([
          ["cellNF", false],
          ["cellHTML", true],
          ["cellFormula", true],
          ["cellStyles", false],
          ["cellText", true],
          ["cellDates", false],
          ["sheetStubs", false],
          ["sheetRows", 0, "n"],
          ["bookDeps", false],
          ["bookSheets", false],
          ["bookProps", false],
          ["bookFiles", false],
          ["bookVBA", false],
          ["password", ""],
          ["WTF", false]
        ])(opts);
      };
      var fix_write_opts = fix_opts_func([
        ["cellDates", false],
        ["bookSST", false],
        ["bookType", "xlsx"],
        ["compression", false],
        ["WTF", false]
      ]);
      function get_sheet_type(n) {
        if (RELS.WS.indexOf(n) > -1)
          return "sheet";
        if (RELS.CS && n == RELS.CS)
          return "chart";
        if (RELS.DS && n == RELS.DS)
          return "dialog";
        if (RELS.MS && n == RELS.MS)
          return "macro";
        return n && n.length ? n : "sheet";
      }
      function safe_parse_wbrels(wbrels, sheets) {
        if (!wbrels)
          return 0;
        try {
          wbrels = sheets.map(function pwbr(w) {
            if (!w.id)
              w.id = w.strRelID;
            return [w.name, wbrels["!id"][w.id].Target, get_sheet_type(wbrels["!id"][w.id].Type)];
          });
        } catch (e) {
          return null;
        }
        return !wbrels || wbrels.length === 0 ? null : wbrels;
      }
      function safe_parse_sheet(zip, path, relsPath, sheet, idx, sheetRels, sheets, stype, opts, wb, themes, styles) {
        try {
          sheetRels[sheet] = parse_rels(getzipstr(zip, relsPath, true), path);
          var data = getzipdata(zip, path);
          var _ws;
          switch (stype) {
            case "sheet":
              _ws = parse_ws(data, path, idx, opts, sheetRels[sheet], wb, themes, styles);
              break;
            case "chart":
              _ws = parse_cs(data, path, idx, opts, sheetRels[sheet], wb, themes, styles);
              if (!_ws || !_ws["!drawel"])
                break;
              var dfile = resolve_path(_ws["!drawel"].Target, path);
              var drelsp = get_rels_path(dfile);
              var draw = parse_drawing(getzipstr(zip, dfile, true), parse_rels(getzipstr(zip, drelsp, true), dfile));
              var chartp = resolve_path(draw, dfile);
              var crelsp = get_rels_path(chartp);
              _ws = parse_chart(getzipstr(zip, chartp, true), chartp, opts, parse_rels(getzipstr(zip, crelsp, true), chartp), wb, _ws);
              break;
            case "macro":
              _ws = parse_ms(data, path, idx, opts, sheetRels[sheet], wb, themes, styles);
              break;
            case "dialog":
              _ws = parse_ds(data, path, idx, opts, sheetRels[sheet], wb, themes, styles);
              break;
            default:
              throw new Error("Unrecognized sheet type " + stype);
          }
          sheets[sheet] = _ws;
          var comments = [];
          if (sheetRels && sheetRels[sheet])
            keys(sheetRels[sheet]).forEach(function(n) {
              if (sheetRels[sheet][n].Type == RELS.CMNT) {
                var dfile2 = resolve_path(sheetRels[sheet][n].Target, path);
                comments = parse_cmnt(getzipdata(zip, dfile2, true), dfile2, opts);
                if (!comments || !comments.length)
                  return;
                sheet_insert_comments(_ws, comments);
              }
            });
        } catch (e) {
          if (opts.WTF)
            throw e;
        }
      }
      function strip_front_slash(x) {
        return x.charAt(0) == "/" ? x.slice(1) : x;
      }
      function parse_zip(zip, opts) {
        make_ssf(SSF);
        opts = opts || {};
        fix_read_opts(opts);
        if (safegetzipfile(zip, "META-INF/manifest.xml"))
          return parse_ods(zip, opts);
        if (safegetzipfile(zip, "objectdata.xml"))
          return parse_ods(zip, opts);
        if (safegetzipfile(zip, "Index/Document.iwa"))
          throw new Error("Unsupported NUMBERS file");
        var entries = zipentries(zip);
        var dir = parse_ct(getzipstr(zip, "[Content_Types].xml"));
        var xlsb = false;
        var sheets, binname;
        if (dir.workbooks.length === 0) {
          binname = "xl/workbook.xml";
          if (getzipdata(zip, binname, true))
            dir.workbooks.push(binname);
        }
        if (dir.workbooks.length === 0) {
          binname = "xl/workbook.bin";
          if (!getzipdata(zip, binname, true))
            throw new Error("Could not find workbook");
          dir.workbooks.push(binname);
          xlsb = true;
        }
        if (dir.workbooks[0].slice(-3) == "bin")
          xlsb = true;
        var themes = {};
        var styles = {};
        if (!opts.bookSheets && !opts.bookProps) {
          strs = [];
          if (dir.sst)
            try {
              strs = parse_sst(getzipdata(zip, strip_front_slash(dir.sst)), dir.sst, opts);
            } catch (e) {
              if (opts.WTF)
                throw e;
            }
          if (opts.cellStyles && dir.themes.length)
            themes = parse_theme(getzipstr(zip, dir.themes[0].replace(/^\//, ""), true) || "", dir.themes[0], opts);
          if (dir.style)
            styles = parse_sty(getzipdata(zip, strip_front_slash(dir.style)), dir.style, themes, opts);
        }
        dir.links.map(function(link) {
          try {
            var rels = parse_rels(getzipstr(zip, get_rels_path(strip_front_slash(link))), link);
            return parse_xlink(getzipdata(zip, strip_front_slash(link)), rels, link, opts);
          } catch (e) {
          }
        });
        var wb = parse_wb(getzipdata(zip, strip_front_slash(dir.workbooks[0])), dir.workbooks[0], opts);
        var props = {}, propdata = "";
        if (dir.coreprops.length) {
          propdata = getzipdata(zip, strip_front_slash(dir.coreprops[0]), true);
          if (propdata)
            props = parse_core_props(propdata);
          if (dir.extprops.length !== 0) {
            propdata = getzipdata(zip, strip_front_slash(dir.extprops[0]), true);
            if (propdata)
              parse_ext_props(propdata, props, opts);
          }
        }
        var custprops = {};
        if (!opts.bookSheets || opts.bookProps) {
          if (dir.custprops.length !== 0) {
            propdata = getzipstr(zip, strip_front_slash(dir.custprops[0]), true);
            if (propdata)
              custprops = parse_cust_props(propdata, opts);
          }
        }
        var out = {};
        if (opts.bookSheets || opts.bookProps) {
          if (wb.Sheets)
            sheets = wb.Sheets.map(function pluck(x) {
              return x.name;
            });
          else if (props.Worksheets && props.SheetNames.length > 0)
            sheets = props.SheetNames;
          if (opts.bookProps) {
            out.Props = props;
            out.Custprops = custprops;
          }
          if (opts.bookSheets && typeof sheets !== "undefined")
            out.SheetNames = sheets;
          if (opts.bookSheets ? out.SheetNames : opts.bookProps)
            return out;
        }
        sheets = {};
        var deps = {};
        if (opts.bookDeps && dir.calcchain)
          deps = parse_cc(getzipdata(zip, strip_front_slash(dir.calcchain)), dir.calcchain, opts);
        var i2 = 0;
        var sheetRels = {};
        var path, relsPath;
        {
          var wbsheets = wb.Sheets;
          props.Worksheets = wbsheets.length;
          props.SheetNames = [];
          for (var j = 0; j != wbsheets.length; ++j) {
            props.SheetNames[j] = wbsheets[j].name;
          }
        }
        var wbext = xlsb ? "bin" : "xml";
        var wbrelsi = dir.workbooks[0].lastIndexOf("/");
        var wbrelsfile = (dir.workbooks[0].slice(0, wbrelsi + 1) + "_rels/" + dir.workbooks[0].slice(wbrelsi + 1) + ".rels").replace(/^\//, "");
        if (!safegetzipfile(zip, wbrelsfile))
          wbrelsfile = "xl/_rels/workbook." + wbext + ".rels";
        var wbrels = parse_rels(getzipstr(zip, wbrelsfile, true), wbrelsfile);
        if (wbrels)
          wbrels = safe_parse_wbrels(wbrels, wb.Sheets);
        var nmode = getzipdata(zip, "xl/worksheets/sheet.xml", true) ? 1 : 0;
        wsloop:
          for (i2 = 0; i2 != props.Worksheets; ++i2) {
            var stype = "sheet";
            if (wbrels && wbrels[i2]) {
              path = "xl/" + wbrels[i2][1].replace(/[\/]?xl\//, "");
              if (!safegetzipfile(zip, path))
                path = wbrels[i2][1];
              if (!safegetzipfile(zip, path))
                path = wbrelsfile.replace(/_rels\/.*$/, "") + wbrels[i2][1];
              stype = wbrels[i2][2];
            } else {
              path = "xl/worksheets/sheet" + (i2 + 1 - nmode) + "." + wbext;
              path = path.replace(/sheet0\./, "sheet.");
            }
            relsPath = path.replace(/^(.*)(\/)([^\/]*)$/, "$1/_rels/$3.rels");
            if (opts && opts.sheets != null)
              switch (typeof opts.sheets) {
                case "number":
                  if (i2 != opts.sheets)
                    continue wsloop;
                  break;
                case "string":
                  if (props.SheetNames[i2].toLowerCase() != opts.sheets.toLowerCase())
                    continue wsloop;
                  break;
                default:
                  if (Array.isArray && Array.isArray(opts.sheets)) {
                    var snjseen = false;
                    for (var snj = 0; snj != opts.sheets.length; ++snj) {
                      if (typeof opts.sheets[snj] == "number" && opts.sheets[snj] == i2)
                        snjseen = 1;
                      if (typeof opts.sheets[snj] == "string" && opts.sheets[snj].toLowerCase() == props.SheetNames[i2].toLowerCase())
                        snjseen = 1;
                    }
                    if (!snjseen)
                      continue wsloop;
                  }
              }
            safe_parse_sheet(zip, path, relsPath, props.SheetNames[i2], i2, sheetRels, sheets, stype, opts, wb, themes, styles);
          }
        out = {
          Directory: dir,
          Workbook: wb,
          Props: props,
          Custprops: custprops,
          Deps: deps,
          Sheets: sheets,
          SheetNames: props.SheetNames,
          Strings: strs,
          Styles: styles,
          Themes: themes,
          SSF: SSF.get_table()
        };
        if (opts && opts.bookFiles) {
          if (zip.files) {
            out.keys = entries;
            out.files = zip.files;
          } else {
            out.keys = [];
            out.files = {};
            zip.FullPaths.forEach(function(p, idx) {
              p = p.replace(/^Root Entry[\/]/, "");
              out.keys.push(p);
              out.files[p] = zip.FileIndex[idx];
            });
          }
        }
        if (opts && opts.bookVBA) {
          if (dir.vba.length > 0)
            out.vbaraw = getzipdata(zip, strip_front_slash(dir.vba[0]), true);
          else if (dir.defaults && dir.defaults.bin === CT_VBA)
            out.vbaraw = getzipdata(zip, "xl/vbaProject.bin", true);
        }
        return out;
      }
      function parse_xlsxcfb(cfb, _opts) {
        var opts = _opts || {};
        var f = "Workbook", data = CFB.find(cfb, f);
        try {
          f = "/!DataSpaces/Version";
          data = CFB.find(cfb, f);
          if (!data || !data.content)
            throw new Error("ECMA-376 Encrypted file missing " + f);
          parse_DataSpaceVersionInfo(data.content);
          f = "/!DataSpaces/DataSpaceMap";
          data = CFB.find(cfb, f);
          if (!data || !data.content)
            throw new Error("ECMA-376 Encrypted file missing " + f);
          var dsm = parse_DataSpaceMap(data.content);
          if (dsm.length !== 1 || dsm[0].comps.length !== 1 || dsm[0].comps[0].t !== 0 || dsm[0].name !== "StrongEncryptionDataSpace" || dsm[0].comps[0].v !== "EncryptedPackage")
            throw new Error("ECMA-376 Encrypted file bad " + f);
          f = "/!DataSpaces/DataSpaceInfo/StrongEncryptionDataSpace";
          data = CFB.find(cfb, f);
          if (!data || !data.content)
            throw new Error("ECMA-376 Encrypted file missing " + f);
          var seds = parse_DataSpaceDefinition(data.content);
          if (seds.length != 1 || seds[0] != "StrongEncryptionTransform")
            throw new Error("ECMA-376 Encrypted file bad " + f);
          f = "/!DataSpaces/TransformInfo/StrongEncryptionTransform/!Primary";
          data = CFB.find(cfb, f);
          if (!data || !data.content)
            throw new Error("ECMA-376 Encrypted file missing " + f);
          parse_Primary(data.content);
        } catch (e) {
        }
        f = "/EncryptionInfo";
        data = CFB.find(cfb, f);
        if (!data || !data.content)
          throw new Error("ECMA-376 Encrypted file missing " + f);
        var einfo = parse_EncryptionInfo(data.content);
        f = "/EncryptedPackage";
        data = CFB.find(cfb, f);
        if (!data || !data.content)
          throw new Error("ECMA-376 Encrypted file missing " + f);
        if (einfo[0] == 4 && typeof decrypt_agile !== "undefined")
          return decrypt_agile(einfo[1], data.content, opts.password || "", opts);
        if (einfo[0] == 2 && typeof decrypt_std76 !== "undefined")
          return decrypt_std76(einfo[1], data.content, opts.password || "", opts);
        throw new Error("File is password-protected");
      }
      function write_zip(wb, opts) {
        _shapeid = 1024;
        if (opts.bookType == "ods")
          return write_ods(wb, opts);
        if (wb && !wb.SSF) {
          wb.SSF = SSF.get_table();
        }
        if (wb && wb.SSF) {
          make_ssf(SSF);
          SSF.load_table(wb.SSF);
          opts.revssf = evert_num(wb.SSF);
          opts.revssf[wb.SSF[65535]] = 0;
          opts.ssf = wb.SSF;
        }
        opts.rels = {};
        opts.wbrels = {};
        opts.Strings = [];
        opts.Strings.Count = 0;
        opts.Strings.Unique = 0;
        if (browser_has_Map)
          opts.revStrings = new Map();
        else {
          opts.revStrings = {};
          opts.revStrings.foo = [];
          delete opts.revStrings.foo;
        }
        var wbext = opts.bookType == "xlsb" ? "bin" : "xml";
        var vbafmt = VBAFMTS.indexOf(opts.bookType) > -1;
        var ct = new_ct();
        fix_write_opts(opts = opts || {});
        var zip = zip_new();
        var f = "", rId = 0;
        opts.cellXfs = [];
        get_cell_style(opts.cellXfs, {}, { revssf: { "General": 0 } });
        if (!wb.Props)
          wb.Props = {};
        f = "docProps/core.xml";
        zip_add_file(zip, f, write_core_props(wb.Props, opts));
        ct.coreprops.push(f);
        add_rels(opts.rels, 2, f, RELS.CORE_PROPS);
        f = "docProps/app.xml";
        if (wb.Props && wb.Props.SheetNames) {
        } else if (!wb.Workbook || !wb.Workbook.Sheets)
          wb.Props.SheetNames = wb.SheetNames;
        else {
          var _sn = [];
          for (var _i = 0; _i < wb.SheetNames.length; ++_i)
            if ((wb.Workbook.Sheets[_i] || {}).Hidden != 2)
              _sn.push(wb.SheetNames[_i]);
          wb.Props.SheetNames = _sn;
        }
        wb.Props.Worksheets = wb.Props.SheetNames.length;
        zip_add_file(zip, f, write_ext_props(wb.Props, opts));
        ct.extprops.push(f);
        add_rels(opts.rels, 3, f, RELS.EXT_PROPS);
        if (wb.Custprops !== wb.Props && keys(wb.Custprops || {}).length > 0) {
          f = "docProps/custom.xml";
          zip_add_file(zip, f, write_cust_props(wb.Custprops, opts));
          ct.custprops.push(f);
          add_rels(opts.rels, 4, f, RELS.CUST_PROPS);
        }
        for (rId = 1; rId <= wb.SheetNames.length; ++rId) {
          var wsrels = { "!id": {} };
          var ws = wb.Sheets[wb.SheetNames[rId - 1]];
          var _type = (ws || {})["!type"] || "sheet";
          switch (_type) {
            case "chart":
            default:
              f = "xl/worksheets/sheet" + rId + "." + wbext;
              zip_add_file(zip, f, write_ws(rId - 1, f, opts, wb, wsrels));
              ct.sheets.push(f);
              add_rels(opts.wbrels, -1, "worksheets/sheet" + rId + "." + wbext, RELS.WS[0]);
          }
          if (ws) {
            var comments = ws["!comments"];
            var need_vml = false;
            if (comments && comments.length > 0) {
              var cf = "xl/comments" + rId + "." + wbext;
              zip_add_file(zip, cf, write_cmnt(comments, cf, opts));
              ct.comments.push(cf);
              add_rels(wsrels, -1, "../comments" + rId + "." + wbext, RELS.CMNT);
              need_vml = true;
            }
            if (ws["!legacy"]) {
              if (need_vml)
                zip_add_file(zip, "xl/drawings/vmlDrawing" + rId + ".vml", write_comments_vml(rId, ws["!comments"]));
            }
            delete ws["!comments"];
            delete ws["!legacy"];
          }
          if (wsrels["!id"].rId1)
            zip_add_file(zip, get_rels_path(f), write_rels(wsrels));
        }
        if (opts.Strings != null && opts.Strings.length > 0) {
          f = "xl/sharedStrings." + wbext;
          zip_add_file(zip, f, write_sst(opts.Strings, f, opts));
          ct.strs.push(f);
          add_rels(opts.wbrels, -1, "sharedStrings." + wbext, RELS.SST);
        }
        f = "xl/workbook." + wbext;
        zip_add_file(zip, f, write_wb(wb, f, opts));
        ct.workbooks.push(f);
        add_rels(opts.rels, 1, f, RELS.WB);
        f = "xl/theme/theme1.xml";
        zip_add_file(zip, f, write_theme(wb.Themes, opts));
        ct.themes.push(f);
        add_rels(opts.wbrels, -1, "theme/theme1.xml", RELS.THEME);
        f = "xl/styles." + wbext;
        zip_add_file(zip, f, write_sty(wb, f, opts));
        ct.styles.push(f);
        add_rels(opts.wbrels, -1, "styles." + wbext, RELS.STY);
        if (wb.vbaraw && vbafmt) {
          f = "xl/vbaProject.bin";
          zip_add_file(zip, f, wb.vbaraw);
          ct.vba.push(f);
          add_rels(opts.wbrels, -1, "vbaProject.bin", RELS.VBA);
        }
        zip_add_file(zip, "[Content_Types].xml", write_ct(ct, opts));
        zip_add_file(zip, "_rels/.rels", write_rels(opts.rels));
        zip_add_file(zip, "xl/_rels/workbook." + wbext + ".rels", write_rels(opts.wbrels));
        delete opts.revssf;
        delete opts.ssf;
        return zip;
      }
      function firstbyte(f, o) {
        var x = "";
        switch ((o || {}).type || "base64") {
          case "buffer":
            return [f[0], f[1], f[2], f[3], f[4], f[5], f[6], f[7]];
          case "base64":
            x = Base64.decode(f.slice(0, 12));
            break;
          case "binary":
            x = f;
            break;
          case "array":
            return [f[0], f[1], f[2], f[3], f[4], f[5], f[6], f[7]];
          default:
            throw new Error("Unrecognized type " + (o && o.type || "undefined"));
        }
        return [x.charCodeAt(0), x.charCodeAt(1), x.charCodeAt(2), x.charCodeAt(3), x.charCodeAt(4), x.charCodeAt(5), x.charCodeAt(6), x.charCodeAt(7)];
      }
      function read_cfb(cfb, opts) {
        if (CFB.find(cfb, "EncryptedPackage"))
          return parse_xlsxcfb(cfb, opts);
        return parse_xlscfb(cfb, opts);
      }
      function read_zip(data, opts) {
        var zip, d = data;
        var o = opts || {};
        if (!o.type)
          o.type = has_buf && Buffer.isBuffer(data) ? "buffer" : "base64";
        zip = zip_read(d, o);
        return parse_zip(zip, o);
      }
      function read_plaintext(data, o) {
        var i2 = 0;
        main:
          while (i2 < data.length)
            switch (data.charCodeAt(i2)) {
              case 10:
              case 13:
              case 32:
                ++i2;
                break;
              case 60:
                return parse_xlml(data.slice(i2), o);
              default:
                break main;
            }
        return PRN.to_workbook(data, o);
      }
      function read_plaintext_raw(data, o) {
        var str = "", bytes = firstbyte(data, o);
        switch (o.type) {
          case "base64":
            str = Base64.decode(data);
            break;
          case "binary":
            str = data;
            break;
          case "buffer":
            str = data.toString("binary");
            break;
          case "array":
            str = cc2str(data);
            break;
          default:
            throw new Error("Unrecognized type " + o.type);
        }
        if (bytes[0] == 239 && bytes[1] == 187 && bytes[2] == 191)
          str = utf8read(str);
        return read_plaintext(str, o);
      }
      function read_utf16(data, o) {
        var d = data;
        if (o.type == "base64")
          d = Base64.decode(d);
        d = cptable.utils.decode(1200, d.slice(2), "str");
        o.type = "binary";
        return read_plaintext(d, o);
      }
      function bstrify(data) {
        return !data.match(/[^\x00-\x7F]/) ? data : utf8write(data);
      }
      function read_prn(data, d, o, str) {
        if (str) {
          o.type = "string";
          return PRN.to_workbook(data, o);
        }
        return PRN.to_workbook(d, o);
      }
      function readSync(data, opts) {
        reset_cp();
        var o = opts || {};
        if (typeof ArrayBuffer !== "undefined" && data instanceof ArrayBuffer)
          return readSync(new Uint8Array(data), (o = dup(o), o.type = "array", o));
        var d = data, n = [0, 0, 0, 0], str = false;
        if (o.cellStyles) {
          o.cellNF = true;
          o.sheetStubs = true;
        }
        _ssfopts = {};
        if (o.dateNF)
          _ssfopts.dateNF = o.dateNF;
        if (!o.type)
          o.type = has_buf && Buffer.isBuffer(data) ? "buffer" : "base64";
        if (o.type == "file") {
          o.type = has_buf ? "buffer" : "binary";
          d = read_binary(data);
        }
        if (o.type == "string") {
          str = true;
          o.type = "binary";
          o.codepage = 65001;
          d = bstrify(data);
        }
        if (o.type == "array" && typeof Uint8Array !== "undefined" && data instanceof Uint8Array && typeof ArrayBuffer !== "undefined") {
          var ab = new ArrayBuffer(3), vu = new Uint8Array(ab);
          vu.foo = "bar";
          if (!vu.foo) {
            o = dup(o);
            o.type = "array";
            return readSync(ab2a(d), o);
          }
        }
        switch ((n = firstbyte(d, o))[0]) {
          case 208:
            if (n[1] === 207 && n[2] === 17 && n[3] === 224 && n[4] === 161 && n[5] === 177 && n[6] === 26 && n[7] === 225)
              return read_cfb(CFB.read(d, o), o);
            break;
          case 9:
            if (n[1] <= 8)
              return parse_xlscfb(d, o);
            break;
          case 60:
            return parse_xlml(d, o);
          case 73:
            if (n[1] === 73 && n[2] === 42 && n[3] === 0)
              throw new Error("TIFF Image File is not a spreadsheet");
            if (n[1] === 68)
              return read_wb_ID(d, o);
            break;
          case 84:
            if (n[1] === 65 && n[2] === 66 && n[3] === 76)
              return DIF.to_workbook(d, o);
            break;
          case 80:
            return n[1] === 75 && n[2] < 9 && n[3] < 9 ? read_zip(d, o) : read_prn(data, d, o, str);
          case 239:
            return n[3] === 60 ? parse_xlml(d, o) : read_prn(data, d, o, str);
          case 255:
            if (n[1] === 254) {
              return read_utf16(d, o);
            }
            break;
          case 0:
            if (n[1] === 0 && n[2] >= 2 && n[3] === 0)
              return WK_.to_workbook(d, o);
            break;
          case 3:
          case 131:
          case 139:
          case 140:
            return DBF.to_workbook(d, o);
          case 123:
            if (n[1] === 92 && n[2] === 114 && n[3] === 116)
              return RTF.to_workbook(d, o);
            break;
          case 10:
          case 13:
          case 32:
            return read_plaintext_raw(d, o);
        }
        if (DBF.versions.indexOf(n[0]) > -1 && n[2] <= 12 && n[3] <= 31)
          return DBF.to_workbook(d, o);
        return read_prn(data, d, o, str);
      }
      function readFileSync(filename, opts) {
        var o = opts || {};
        o.type = "file";
        return readSync(filename, o);
      }
      function write_cfb_ctr(cfb, o) {
        switch (o.type) {
          case "base64":
          case "binary":
            break;
          case "buffer":
          case "array":
            o.type = "";
            break;
          case "file":
            return write_dl(o.file, CFB.write(cfb, { type: has_buf ? "buffer" : "" }));
          case "string":
            throw new Error("'string' output type invalid for '" + o.bookType + "' files");
          default:
            throw new Error("Unrecognized type " + o.type);
        }
        return CFB.write(cfb, o);
      }
      function write_zip_type(wb, opts) {
        var o = dup(opts || {});
        var z = write_zip(wb, o);
        var oopts = {};
        if (o.compression)
          oopts.compression = "DEFLATE";
        if (o.password)
          oopts.type = has_buf ? "nodebuffer" : "string";
        else
          switch (o.type) {
            case "base64":
              oopts.type = "base64";
              break;
            case "binary":
              oopts.type = "string";
              break;
            case "string":
              throw new Error("'string' output type invalid for '" + o.bookType + "' files");
            case "buffer":
            case "file":
              oopts.type = has_buf ? "nodebuffer" : "string";
              break;
            default:
              throw new Error("Unrecognized type " + o.type);
          }
        var out = z.FullPaths ? CFB.write(z, { fileType: "zip", type: { "nodebuffer": "buffer", "string": "binary" }[oopts.type] || oopts.type }) : z.generate(oopts);
        if (o.password && typeof encrypt_agile !== "undefined")
          return write_cfb_ctr(encrypt_agile(out, o.password), o);
        if (o.type === "file")
          return write_dl(o.file, out);
        return o.type == "string" ? utf8read(out) : out;
      }
      function write_cfb_type(wb, opts) {
        var o = opts || {};
        var cfb = write_xlscfb(wb, o);
        return write_cfb_ctr(cfb, o);
      }
      function write_string_type(out, opts, bom) {
        if (!bom)
          bom = "";
        var o = bom + out;
        switch (opts.type) {
          case "base64":
            return Base64.encode(utf8write(o));
          case "binary":
            return utf8write(o);
          case "string":
            return out;
          case "file":
            return write_dl(opts.file, o, "utf8");
          case "buffer": {
            if (has_buf)
              return Buffer_from(o, "utf8");
            else
              return write_string_type(o, { type: "binary" }).split("").map(function(c) {
                return c.charCodeAt(0);
              });
          }
        }
        throw new Error("Unrecognized type " + opts.type);
      }
      function write_stxt_type(out, opts) {
        switch (opts.type) {
          case "base64":
            return Base64.encode(out);
          case "binary":
            return out;
          case "string":
            return out;
          case "file":
            return write_dl(opts.file, out, "binary");
          case "buffer": {
            if (has_buf)
              return Buffer_from(out, "binary");
            else
              return out.split("").map(function(c) {
                return c.charCodeAt(0);
              });
          }
        }
        throw new Error("Unrecognized type " + opts.type);
      }
      function write_binary_type(out, opts) {
        switch (opts.type) {
          case "string":
          case "base64":
          case "binary":
            var bstr = "";
            for (var i2 = 0; i2 < out.length; ++i2)
              bstr += String.fromCharCode(out[i2]);
            return opts.type == "base64" ? Base64.encode(bstr) : opts.type == "string" ? utf8read(bstr) : bstr;
          case "file":
            return write_dl(opts.file, out);
          case "buffer":
            return out;
          default:
            throw new Error("Unrecognized type " + opts.type);
        }
      }
      function writeSync(wb, opts) {
        reset_cp();
        check_wb(wb);
        var o = dup(opts || {});
        if (o.cellStyles) {
          o.cellNF = true;
          o.sheetStubs = true;
        }
        if (o.type == "array") {
          o.type = "binary";
          var out = writeSync(wb, o);
          o.type = "array";
          return s2ab(out);
        }
        switch (o.bookType || "xlsb") {
          case "xml":
          case "xlml":
            return write_string_type(write_xlml(wb, o), o);
          case "slk":
          case "sylk":
            return write_string_type(write_slk_str(wb, o), o);
          case "htm":
          case "html":
            return write_string_type(write_htm_str(wb, o), o);
          case "txt":
            return write_stxt_type(write_txt_str(wb, o), o);
          case "csv":
            return write_string_type(write_csv_str(wb, o), o, "\uFEFF");
          case "dif":
            return write_string_type(write_dif_str(wb, o), o);
          case "dbf":
            return write_binary_type(write_dbf_buf(wb, o), o);
          case "prn":
            return write_string_type(write_prn_str(wb, o), o);
          case "rtf":
            return write_string_type(write_rtf_str(wb, o), o);
          case "eth":
            return write_string_type(write_eth_str(wb, o), o);
          case "fods":
            return write_string_type(write_ods(wb, o), o);
          case "biff2":
            if (!o.biff)
              o.biff = 2;
          case "biff3":
            if (!o.biff)
              o.biff = 3;
          case "biff4":
            if (!o.biff)
              o.biff = 4;
            return write_binary_type(write_biff_buf(wb, o), o);
          case "biff5":
            if (!o.biff)
              o.biff = 5;
          case "biff8":
          case "xla":
          case "xls":
            if (!o.biff)
              o.biff = 8;
            return write_cfb_type(wb, o);
          case "xlsx":
          case "xlsm":
          case "xlam":
          case "xlsb":
          case "ods":
            return write_zip_type(wb, o);
          default:
            throw new Error("Unrecognized bookType |" + o.bookType + "|");
        }
      }
      function resolve_book_type(o) {
        if (o.bookType)
          return;
        var _BT = {
          "xls": "biff8",
          "htm": "html",
          "slk": "sylk",
          "socialcalc": "eth",
          "Sh33tJS": "WTF"
        };
        var ext = o.file.slice(o.file.lastIndexOf(".")).toLowerCase();
        if (ext.match(/^\.[a-z]+$/))
          o.bookType = ext.slice(1);
        o.bookType = _BT[o.bookType] || o.bookType;
      }
      function writeFileSync(wb, filename, opts) {
        var o = opts || {};
        o.type = "file";
        o.file = filename;
        resolve_book_type(o);
        return writeSync(wb, o);
      }
      function writeFileAsync(filename, wb, opts, cb) {
        var o = opts || {};
        o.type = "file";
        o.file = filename;
        resolve_book_type(o);
        o.type = "buffer";
        var _cb = cb;
        if (!(_cb instanceof Function))
          _cb = opts;
        return _fs.writeFile(filename, writeSync(wb, o), _cb);
      }
      function make_json_row(sheet, r, R, cols, header, hdr, dense, o) {
        var rr = encode_row(R);
        var defval = o.defval, raw = o.raw || !Object.prototype.hasOwnProperty.call(o, "raw");
        var isempty = true;
        var row = header === 1 ? [] : {};
        if (header !== 1) {
          if (Object.defineProperty)
            try {
              Object.defineProperty(row, "__rowNum__", { value: R, enumerable: false });
            } catch (e) {
              row.__rowNum__ = R;
            }
          else
            row.__rowNum__ = R;
        }
        if (!dense || sheet[R])
          for (var C = r.s.c; C <= r.e.c; ++C) {
            var val = dense ? sheet[R][C] : sheet[cols[C] + rr];
            if (val === void 0 || val.t === void 0) {
              if (defval === void 0)
                continue;
              if (hdr[C] != null) {
                row[hdr[C]] = defval;
              }
              continue;
            }
            var v = val.v;
            switch (val.t) {
              case "z":
                if (v == null)
                  break;
                continue;
              case "e":
                v = v == 0 ? null : void 0;
                break;
              case "s":
              case "d":
              case "b":
              case "n":
                break;
              default:
                throw new Error("unrecognized type " + val.t);
            }
            if (hdr[C] != null) {
              if (v == null) {
                if (val.t == "e" && v === null)
                  row[hdr[C]] = null;
                else if (defval !== void 0)
                  row[hdr[C]] = defval;
                else if (raw && v === null)
                  row[hdr[C]] = null;
                else
                  continue;
              } else {
                row[hdr[C]] = raw || o.rawNumbers && val.t == "n" ? v : format_cell(val, v, o);
              }
              if (v != null)
                isempty = false;
            }
          }
        return { row, isempty };
      }
      function sheet_to_json(sheet, opts) {
        if (sheet == null || sheet["!ref"] == null)
          return [];
        var val = { t: "n", v: 0 }, header = 0, offset = 1, hdr = [], v = 0, vv = "";
        var r = { s: { r: 0, c: 0 }, e: { r: 0, c: 0 } };
        var o = opts || {};
        var range = o.range != null ? o.range : sheet["!ref"];
        if (o.header === 1)
          header = 1;
        else if (o.header === "A")
          header = 2;
        else if (Array.isArray(o.header))
          header = 3;
        else if (o.header == null)
          header = 0;
        switch (typeof range) {
          case "string":
            r = safe_decode_range(range);
            break;
          case "number":
            r = safe_decode_range(sheet["!ref"]);
            r.s.r = range;
            break;
          default:
            r = range;
        }
        if (header > 0)
          offset = 0;
        var rr = encode_row(r.s.r);
        var cols = [];
        var out = [];
        var outi = 0, counter = 0;
        var dense = Array.isArray(sheet);
        var R = r.s.r, C = 0, CC = 0;
        if (dense && !sheet[R])
          sheet[R] = [];
        for (C = r.s.c; C <= r.e.c; ++C) {
          cols[C] = encode_col(C);
          val = dense ? sheet[R][C] : sheet[cols[C] + rr];
          switch (header) {
            case 1:
              hdr[C] = C - r.s.c;
              break;
            case 2:
              hdr[C] = cols[C];
              break;
            case 3:
              hdr[C] = o.header[C - r.s.c];
              break;
            default:
              if (val == null)
                val = { w: "__EMPTY", t: "s" };
              vv = v = format_cell(val, null, o);
              counter = 0;
              for (CC = 0; CC < hdr.length; ++CC)
                if (hdr[CC] == vv)
                  vv = v + "_" + ++counter;
              hdr[C] = vv;
          }
        }
        for (R = r.s.r + offset; R <= r.e.r; ++R) {
          var row = make_json_row(sheet, r, R, cols, header, hdr, dense, o);
          if (row.isempty === false || (header === 1 ? o.blankrows !== false : !!o.blankrows))
            out[outi++] = row.row;
        }
        out.length = outi;
        return out;
      }
      var qreg = /"/g;
      function make_csv_row(sheet, r, R, cols, fs, rs, FS, o) {
        var isempty = true;
        var row = [], txt = "", rr = encode_row(R);
        for (var C = r.s.c; C <= r.e.c; ++C) {
          if (!cols[C])
            continue;
          var val = o.dense ? (sheet[R] || [])[C] : sheet[cols[C] + rr];
          if (val == null)
            txt = "";
          else if (val.v != null) {
            isempty = false;
            txt = "" + (o.rawNumbers && val.t == "n" ? val.v : format_cell(val, null, o));
            for (var i2 = 0, cc = 0; i2 !== txt.length; ++i2)
              if ((cc = txt.charCodeAt(i2)) === fs || cc === rs || cc === 34 || o.forceQuotes) {
                txt = '"' + txt.replace(qreg, '""') + '"';
                break;
              }
            if (txt == "ID")
              txt = '"ID"';
          } else if (val.f != null && !val.F) {
            isempty = false;
            txt = "=" + val.f;
            if (txt.indexOf(",") >= 0)
              txt = '"' + txt.replace(qreg, '""') + '"';
          } else
            txt = "";
          row.push(txt);
        }
        if (o.blankrows === false && isempty)
          return null;
        return row.join(FS);
      }
      function sheet_to_csv(sheet, opts) {
        var out = [];
        var o = opts == null ? {} : opts;
        if (sheet == null || sheet["!ref"] == null)
          return "";
        var r = safe_decode_range(sheet["!ref"]);
        var FS = o.FS !== void 0 ? o.FS : ",", fs = FS.charCodeAt(0);
        var RS = o.RS !== void 0 ? o.RS : "\n", rs = RS.charCodeAt(0);
        var endregex = new RegExp((FS == "|" ? "\\|" : FS) + "+$");
        var row = "", cols = [];
        o.dense = Array.isArray(sheet);
        var colinfo = o.skipHidden && sheet["!cols"] || [];
        var rowinfo = o.skipHidden && sheet["!rows"] || [];
        for (var C = r.s.c; C <= r.e.c; ++C)
          if (!(colinfo[C] || {}).hidden)
            cols[C] = encode_col(C);
        for (var R = r.s.r; R <= r.e.r; ++R) {
          if ((rowinfo[R] || {}).hidden)
            continue;
          row = make_csv_row(sheet, r, R, cols, fs, rs, FS, o);
          if (row == null) {
            continue;
          }
          if (o.strip)
            row = row.replace(endregex, "");
          out.push(row + RS);
        }
        delete o.dense;
        return out.join("");
      }
      function sheet_to_txt(sheet, opts) {
        if (!opts)
          opts = {};
        opts.FS = "	";
        opts.RS = "\n";
        var s = sheet_to_csv(sheet, opts);
        if (typeof cptable == "undefined" || opts.type == "string")
          return s;
        var o = cptable.utils.encode(1200, s, "str");
        return String.fromCharCode(255) + String.fromCharCode(254) + o;
      }
      function sheet_to_formulae(sheet) {
        var y = "", x, val = "";
        if (sheet == null || sheet["!ref"] == null)
          return [];
        var r = safe_decode_range(sheet["!ref"]), rr = "", cols = [], C;
        var cmds = [];
        var dense = Array.isArray(sheet);
        for (C = r.s.c; C <= r.e.c; ++C)
          cols[C] = encode_col(C);
        for (var R = r.s.r; R <= r.e.r; ++R) {
          rr = encode_row(R);
          for (C = r.s.c; C <= r.e.c; ++C) {
            y = cols[C] + rr;
            x = dense ? (sheet[R] || [])[C] : sheet[y];
            val = "";
            if (x === void 0)
              continue;
            else if (x.F != null) {
              y = x.F;
              if (!x.f)
                continue;
              val = x.f;
              if (y.indexOf(":") == -1)
                y = y + ":" + y;
            }
            if (x.f != null)
              val = x.f;
            else if (x.t == "z")
              continue;
            else if (x.t == "n" && x.v != null)
              val = "" + x.v;
            else if (x.t == "b")
              val = x.v ? "TRUE" : "FALSE";
            else if (x.w !== void 0)
              val = "'" + x.w;
            else if (x.v === void 0)
              continue;
            else if (x.t == "s")
              val = "'" + x.v;
            else
              val = "" + x.v;
            cmds[cmds.length] = y + "=" + val;
          }
        }
        return cmds;
      }
      function sheet_add_json(_ws, js, opts) {
        var o = opts || {};
        var offset = +!o.skipHeader;
        var ws = _ws || {};
        var _R = 0, _C = 0;
        if (ws && o.origin != null) {
          if (typeof o.origin == "number")
            _R = o.origin;
          else {
            var _origin = typeof o.origin == "string" ? decode_cell(o.origin) : o.origin;
            _R = _origin.r;
            _C = _origin.c;
          }
        }
        var cell;
        var range = { s: { c: 0, r: 0 }, e: { c: _C, r: _R + js.length - 1 + offset } };
        if (ws["!ref"]) {
          var _range = safe_decode_range(ws["!ref"]);
          range.e.c = Math.max(range.e.c, _range.e.c);
          range.e.r = Math.max(range.e.r, _range.e.r);
          if (_R == -1) {
            _R = _range.e.r + 1;
            range.e.r = _R + js.length - 1 + offset;
          }
        } else {
          if (_R == -1) {
            _R = 0;
            range.e.r = js.length - 1 + offset;
          }
        }
        var hdr = o.header || [], C = 0;
        js.forEach(function(JS, R) {
          keys(JS).forEach(function(k) {
            if ((C = hdr.indexOf(k)) == -1)
              hdr[C = hdr.length] = k;
            var v = JS[k];
            var t = "z";
            var z = "";
            var ref = encode_cell({ c: _C + C, r: _R + R + offset });
            cell = utils.sheet_get_cell(ws, ref);
            if (v && typeof v === "object" && !(v instanceof Date)) {
              ws[ref] = v;
            } else {
              if (typeof v == "number")
                t = "n";
              else if (typeof v == "boolean")
                t = "b";
              else if (typeof v == "string")
                t = "s";
              else if (v instanceof Date) {
                t = "d";
                if (!o.cellDates) {
                  t = "n";
                  v = datenum(v);
                }
                z = o.dateNF || SSF._table[14];
              } else if (v === null && o.nullError) {
                t = "e";
                v = 0;
              }
              if (!cell)
                ws[ref] = cell = { t, v };
              else {
                cell.t = t;
                cell.v = v;
                delete cell.w;
                delete cell.R;
                if (z)
                  cell.z = z;
              }
              if (z)
                cell.z = z;
            }
          });
        });
        range.e.c = Math.max(range.e.c, _C + hdr.length - 1);
        var __R = encode_row(_R);
        if (offset)
          for (C = 0; C < hdr.length; ++C)
            ws[encode_col(C + _C) + __R] = { t: "s", v: hdr[C] };
        ws["!ref"] = encode_range(range);
        return ws;
      }
      function json_to_sheet(js, opts) {
        return sheet_add_json(null, js, opts);
      }
      var utils = {
        encode_col,
        encode_row,
        encode_cell,
        encode_range,
        decode_col,
        decode_row,
        split_cell,
        decode_cell,
        decode_range,
        format_cell,
        get_formulae: sheet_to_formulae,
        make_csv: sheet_to_csv,
        make_json: sheet_to_json,
        make_formulae: sheet_to_formulae,
        sheet_add_aoa,
        sheet_add_json,
        sheet_add_dom,
        aoa_to_sheet,
        json_to_sheet,
        table_to_sheet: parse_dom_table,
        table_to_book,
        sheet_to_csv,
        sheet_to_txt,
        sheet_to_json,
        sheet_to_html: HTML_.from_sheet,
        sheet_to_formulae,
        sheet_to_row_object_array: sheet_to_json
      };
      (function(utils2) {
        utils2.consts = utils2.consts || {};
        function add_consts(R) {
          R.forEach(function(a) {
            utils2.consts[a[0]] = a[1];
          });
        }
        function get_default(x, y, z) {
          return x[y] != null ? x[y] : x[y] = z;
        }
        function ws_get_cell_stub(ws, R, C) {
          if (typeof R == "string") {
            if (Array.isArray(ws)) {
              var RC = decode_cell(R);
              if (!ws[RC.r])
                ws[RC.r] = [];
              return ws[RC.r][RC.c] || (ws[RC.r][RC.c] = { t: "z" });
            }
            return ws[R] || (ws[R] = { t: "z" });
          }
          if (typeof R != "number")
            return ws_get_cell_stub(ws, encode_cell(R));
          return ws_get_cell_stub(ws, encode_cell({ r: R, c: C || 0 }));
        }
        utils2.sheet_get_cell = ws_get_cell_stub;
        function wb_sheet_idx(wb, sh) {
          if (typeof sh == "number") {
            if (sh >= 0 && wb.SheetNames.length > sh)
              return sh;
            throw new Error("Cannot find sheet # " + sh);
          } else if (typeof sh == "string") {
            var idx = wb.SheetNames.indexOf(sh);
            if (idx > -1)
              return idx;
            throw new Error("Cannot find sheet name |" + sh + "|");
          } else
            throw new Error("Cannot find sheet |" + sh + "|");
        }
        utils2.book_new = function() {
          return { SheetNames: [], Sheets: {} };
        };
        utils2.book_append_sheet = function(wb, ws, name2) {
          if (!name2) {
            for (var i2 = 1; i2 <= 65535; ++i2, name2 = void 0)
              if (wb.SheetNames.indexOf(name2 = "Sheet" + i2) == -1)
                break;
          }
          if (!name2 || wb.SheetNames.length >= 65535)
            throw new Error("Too many worksheets");
          check_ws_name(name2);
          if (wb.SheetNames.indexOf(name2) >= 0)
            throw new Error("Worksheet with name |" + name2 + "| already exists!");
          wb.SheetNames.push(name2);
          wb.Sheets[name2] = ws;
        };
        utils2.book_set_sheet_visibility = function(wb, sh, vis) {
          get_default(wb, "Workbook", {});
          get_default(wb.Workbook, "Sheets", []);
          var idx = wb_sheet_idx(wb, sh);
          get_default(wb.Workbook.Sheets, idx, {});
          switch (vis) {
            case 0:
            case 1:
            case 2:
              break;
            default:
              throw new Error("Bad sheet visibility setting " + vis);
          }
          wb.Workbook.Sheets[idx].Hidden = vis;
        };
        add_consts([
          ["SHEET_VISIBLE", 0],
          ["SHEET_HIDDEN", 1],
          ["SHEET_VERY_HIDDEN", 2]
        ]);
        utils2.cell_set_number_format = function(cell, fmt) {
          cell.z = fmt;
          return cell;
        };
        utils2.cell_set_hyperlink = function(cell, target, tooltip) {
          if (!target) {
            delete cell.l;
          } else {
            cell.l = { Target: target };
            if (tooltip)
              cell.l.Tooltip = tooltip;
          }
          return cell;
        };
        utils2.cell_set_internal_link = function(cell, range, tooltip) {
          return utils2.cell_set_hyperlink(cell, "#" + range, tooltip);
        };
        utils2.cell_add_comment = function(cell, text, author2) {
          if (!cell.c)
            cell.c = [];
          cell.c.push({ t: text, a: author2 || "SheetJS" });
        };
        utils2.sheet_set_array_formula = function(ws, range, formula) {
          var rng = typeof range != "string" ? range : safe_decode_range(range);
          var rngstr = typeof range == "string" ? range : encode_range(range);
          for (var R = rng.s.r; R <= rng.e.r; ++R)
            for (var C = rng.s.c; C <= rng.e.c; ++C) {
              var cell = ws_get_cell_stub(ws, R, C);
              cell.t = "n";
              cell.F = rngstr;
              delete cell.v;
              if (R == rng.s.r && C == rng.s.c)
                cell.f = formula;
            }
          return ws;
        };
        return utils2;
      })(utils);
      if (has_buf && typeof require != "undefined")
        (function() {
          var Readable = require("stream").Readable;
          var write_csv_stream = function(sheet, opts) {
            var stream = Readable();
            var o = opts == null ? {} : opts;
            if (sheet == null || sheet["!ref"] == null) {
              stream.push(null);
              return stream;
            }
            var r = safe_decode_range(sheet["!ref"]);
            var FS = o.FS !== void 0 ? o.FS : ",", fs = FS.charCodeAt(0);
            var RS = o.RS !== void 0 ? o.RS : "\n", rs = RS.charCodeAt(0);
            var endregex = new RegExp((FS == "|" ? "\\|" : FS) + "+$");
            var row = "", cols = [];
            o.dense = Array.isArray(sheet);
            var colinfo = o.skipHidden && sheet["!cols"] || [];
            var rowinfo = o.skipHidden && sheet["!rows"] || [];
            for (var C = r.s.c; C <= r.e.c; ++C)
              if (!(colinfo[C] || {}).hidden)
                cols[C] = encode_col(C);
            var R = r.s.r;
            var BOM = false;
            stream._read = function() {
              if (!BOM) {
                BOM = true;
                return stream.push("\uFEFF");
              }
              while (R <= r.e.r) {
                ++R;
                if ((rowinfo[R - 1] || {}).hidden)
                  continue;
                row = make_csv_row(sheet, r, R - 1, cols, fs, rs, FS, o);
                if (row != null) {
                  if (o.strip)
                    row = row.replace(endregex, "");
                  stream.push(row + RS);
                  break;
                }
              }
              if (R > r.e.r)
                return stream.push(null);
            };
            return stream;
          };
          var write_html_stream = function(ws, opts) {
            var stream = Readable();
            var o = opts || {};
            var header = o.header != null ? o.header : HTML_.BEGIN;
            var footer = o.footer != null ? o.footer : HTML_.END;
            stream.push(header);
            var r = decode_range(ws["!ref"]);
            o.dense = Array.isArray(ws);
            stream.push(HTML_._preamble(ws, r, o));
            var R = r.s.r;
            var end = false;
            stream._read = function() {
              if (R > r.e.r) {
                if (!end) {
                  end = true;
                  stream.push("</table>" + footer);
                }
                return stream.push(null);
              }
              while (R <= r.e.r) {
                stream.push(HTML_._row(ws, r, R, o));
                ++R;
                break;
              }
            };
            return stream;
          };
          var write_json_stream = function(sheet, opts) {
            var stream = Readable({ objectMode: true });
            if (sheet == null || sheet["!ref"] == null) {
              stream.push(null);
              return stream;
            }
            var val = { t: "n", v: 0 }, header = 0, offset = 1, hdr = [], v = 0, vv = "";
            var r = { s: { r: 0, c: 0 }, e: { r: 0, c: 0 } };
            var o = opts || {};
            var range = o.range != null ? o.range : sheet["!ref"];
            if (o.header === 1)
              header = 1;
            else if (o.header === "A")
              header = 2;
            else if (Array.isArray(o.header))
              header = 3;
            switch (typeof range) {
              case "string":
                r = safe_decode_range(range);
                break;
              case "number":
                r = safe_decode_range(sheet["!ref"]);
                r.s.r = range;
                break;
              default:
                r = range;
            }
            if (header > 0)
              offset = 0;
            var rr = encode_row(r.s.r);
            var cols = [];
            var counter = 0;
            var dense = Array.isArray(sheet);
            var R = r.s.r, C = 0, CC = 0;
            if (dense && !sheet[R])
              sheet[R] = [];
            for (C = r.s.c; C <= r.e.c; ++C) {
              cols[C] = encode_col(C);
              val = dense ? sheet[R][C] : sheet[cols[C] + rr];
              switch (header) {
                case 1:
                  hdr[C] = C - r.s.c;
                  break;
                case 2:
                  hdr[C] = cols[C];
                  break;
                case 3:
                  hdr[C] = o.header[C - r.s.c];
                  break;
                default:
                  if (val == null)
                    val = { w: "__EMPTY", t: "s" };
                  vv = v = format_cell(val, null, o);
                  counter = 0;
                  for (CC = 0; CC < hdr.length; ++CC)
                    if (hdr[CC] == vv)
                      vv = v + "_" + ++counter;
                  hdr[C] = vv;
              }
            }
            R = r.s.r + offset;
            stream._read = function() {
              if (R > r.e.r)
                return stream.push(null);
              while (R <= r.e.r) {
                var row = make_json_row(sheet, r, R, cols, header, hdr, dense, o);
                ++R;
                if (row.isempty === false || (header === 1 ? o.blankrows !== false : !!o.blankrows)) {
                  stream.push(row.row);
                  break;
                }
              }
            };
            return stream;
          };
          XLSX2.stream = {
            to_json: write_json_stream,
            to_html: write_html_stream,
            to_csv: write_csv_stream
          };
        })();
      if (typeof parse_xlscfb !== "undefined")
        XLSX2.parse_xlscfb = parse_xlscfb;
      XLSX2.parse_zip = parse_zip;
      XLSX2.read = readSync;
      XLSX2.readFile = readFileSync;
      XLSX2.readFileSync = readFileSync;
      XLSX2.write = writeSync;
      XLSX2.writeFile = writeFileSync;
      XLSX2.writeFileSync = writeFileSync;
      XLSX2.writeFileAsync = writeFileAsync;
      XLSX2.utils = utils;
      XLSX2.SSF = SSF;
      if (typeof CFB !== "undefined")
        XLSX2.CFB = CFB;
    }
    if (typeof exports !== "undefined")
      make_xlsx_lib(exports);
    else if (typeof module2 !== "undefined" && module2.exports)
      make_xlsx_lib(module2.exports);
    else if (typeof define === "function" && define.amd)
      define("xlsx-dist", function() {
        if (!XLSX.version)
          make_xlsx_lib(XLSX);
        return XLSX;
      });
    else
      make_xlsx_lib(XLSX);
    if (typeof window !== "undefined" && !window.XLSX)
      window.XLSX = XLSX;
  }
});

// node_modules/buffer-from/index.js
var require_buffer_from = __commonJS({
  "node_modules/buffer-from/index.js"(exports, module2) {
    var toString = Object.prototype.toString;
    var isModern = typeof Buffer !== "undefined" && typeof Buffer.alloc === "function" && typeof Buffer.allocUnsafe === "function" && typeof Buffer.from === "function";
    function isArrayBuffer(input) {
      return toString.call(input).slice(8, -1) === "ArrayBuffer";
    }
    function fromArrayBuffer(obj, byteOffset, length) {
      byteOffset >>>= 0;
      var maxLength = obj.byteLength - byteOffset;
      if (maxLength < 0) {
        throw new RangeError("'offset' is out of bounds");
      }
      if (length === void 0) {
        length = maxLength;
      } else {
        length >>>= 0;
        if (length > maxLength) {
          throw new RangeError("'length' is out of bounds");
        }
      }
      return isModern ? Buffer.from(obj.slice(byteOffset, byteOffset + length)) : new Buffer(new Uint8Array(obj.slice(byteOffset, byteOffset + length)));
    }
    function fromString(string, encoding) {
      if (typeof encoding !== "string" || encoding === "") {
        encoding = "utf8";
      }
      if (!Buffer.isEncoding(encoding)) {
        throw new TypeError('"encoding" must be a valid string encoding');
      }
      return isModern ? Buffer.from(string, encoding) : new Buffer(string, encoding);
    }
    function bufferFrom(value, encodingOrOffset, length) {
      if (typeof value === "number") {
        throw new TypeError('"value" argument must not be a number');
      }
      if (isArrayBuffer(value)) {
        return fromArrayBuffer(value, encodingOrOffset, length);
      }
      if (typeof value === "string") {
        return fromString(value, encodingOrOffset);
      }
      return isModern ? Buffer.from(value) : new Buffer(value);
    }
    module2.exports = bufferFrom;
  }
});

// node_modules/node-xlsx/lib/helpers.js
var require_helpers = __commonJS({
  "node_modules/node-xlsx/lib/helpers.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    exports.__esModule = true;
    exports.buildSheetFromMatrix = exports.buildExcelDate = exports.isCellDescriptor = exports.isObject = exports.isString = exports.isNumber = exports.isBoolean = void 0;
    var _xlsx = _interopRequireDefault(require_xlsx());
    var ORIGIN_DATE = new Date(Date.UTC(1899, 11, 30));
    var isBoolean = function isBoolean2(maybeBoolean) {
      return typeof maybeBoolean === "boolean";
    };
    exports.isBoolean = isBoolean;
    var isNumber = function isNumber2(maybeNumber) {
      return typeof maybeNumber === "number";
    };
    exports.isNumber = isNumber;
    var isString2 = function isString3(maybeString) {
      return typeof maybeString === "string";
    };
    exports.isString = isString2;
    var isObject = function isObject2(maybeObject) {
      return maybeObject !== null && typeof maybeObject === "object";
    };
    exports.isObject = isObject;
    var isCellDescriptor = function isCellDescriptor2(maybeCell) {
      return isObject(maybeCell) && "v" in maybeCell;
    };
    exports.isCellDescriptor = isCellDescriptor;
    var buildExcelDate = function buildExcelDate2(value, is1904) {
      var epoch = Date.parse(value + (is1904 ? 1462 : 0));
      return (epoch - ORIGIN_DATE) / 864e5;
    };
    exports.buildExcelDate = buildExcelDate;
    var buildSheetFromMatrix = function buildSheetFromMatrix2(data, options) {
      if (options === void 0) {
        options = {};
      }
      var workSheet = {};
      var range = {
        s: {
          c: 1e7,
          r: 1e7
        },
        e: {
          c: 0,
          r: 0
        }
      };
      if (!Array.isArray(data))
        throw new Error("sheet data is not array");
      for (var R = 0; R !== data.length; R += 1) {
        for (var C = 0; C !== data[R].length; C += 1) {
          if (!Array.isArray(data[R]))
            throw new Error(`${R}th row data is not array`);
          if (range.s.r > R)
            range.s.r = R;
          if (range.s.c > C)
            range.s.c = C;
          if (range.e.r < R)
            range.e.r = R;
          if (range.e.c < C)
            range.e.c = C;
          if (data[R][C] === null) {
            continue;
          }
          var cell = isCellDescriptor(data[R][C]) ? data[R][C] : {
            v: data[R][C]
          };
          var cellRef = _xlsx.default.utils.encode_cell({
            c: C,
            r: R
          });
          if (isNumber(cell.v)) {
            cell.t = "n";
          } else if (isBoolean(cell.v)) {
            cell.t = "b";
          } else if (cell.v instanceof Date) {
            cell.t = "n";
            cell.v = buildExcelDate(cell.v);
            cell.z = cell.z || _xlsx.default.SSF._table[14];
          } else if (isObject(cell.v)) {
            cell.t = cell.v.t;
            cell.f = cell.v.f;
            cell.F = cell.v.F;
            cell.z = cell.v.z;
          } else {
            cell.t = "s";
          }
          if (isNumber(cell.z))
            cell.z = _xlsx.default.SSF._table[cell.z];
          workSheet[cellRef] = cell;
        }
      }
      if (range.s.c < 1e7) {
        workSheet["!ref"] = _xlsx.default.utils.encode_range(range);
      }
      if (options["!cols"]) {
        workSheet["!cols"] = options["!cols"];
      }
      if (options["!merges"]) {
        workSheet["!merges"] = options["!merges"];
      }
      return workSheet;
    };
    exports.buildSheetFromMatrix = buildSheetFromMatrix;
  }
});

// node_modules/@babel/runtime/helpers/defineProperty.js
var require_defineProperty = __commonJS({
  "node_modules/@babel/runtime/helpers/defineProperty.js"(exports, module2) {
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, {
          value,
          enumerable: true,
          configurable: true,
          writable: true
        });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    module2.exports = _defineProperty;
    module2.exports["default"] = module2.exports, module2.exports.__esModule = true;
  }
});

// node_modules/node-xlsx/lib/workbook.js
var require_workbook = __commonJS({
  "node_modules/node-xlsx/lib/workbook.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    exports.__esModule = true;
    exports.default = void 0;
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var Workbook = function Workbook2() {
      (0, _defineProperty2.default)(this, "SheetNames", []);
      (0, _defineProperty2.default)(this, "Sheets", {});
    };
    exports.default = Workbook;
  }
});

// node_modules/node-xlsx/lib/index.js
var require_lib2 = __commonJS({
  "node_modules/node-xlsx/lib/index.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    exports.__esModule = true;
    exports.default = exports.build = exports.parseMetadata = exports.parse = void 0;
    var _extends2 = _interopRequireDefault(require_extends());
    var _xlsx = _interopRequireDefault(require_xlsx());
    var _bufferFrom = _interopRequireDefault(require_buffer_from());
    var _helpers = require_helpers();
    var _workbook = _interopRequireDefault(require_workbook());
    var parse = function parse2(mixed, options) {
      if (options === void 0) {
        options = {};
      }
      var workSheet = _xlsx.default[(0, _helpers.isString)(mixed) ? "readFile" : "read"](mixed, options);
      return Object.keys(workSheet.Sheets).map(function(name2) {
        var sheet = workSheet.Sheets[name2];
        return {
          name: name2,
          data: _xlsx.default.utils.sheet_to_json(sheet, {
            header: 1,
            raw: options.raw !== false,
            range: options.range ? options.range[name2] : null
          })
        };
      });
    };
    exports.parse = parse;
    var parseMetadata = function parseMetadata2(mixed, options) {
      if (options === void 0) {
        options = {};
      }
      var workSheet = _xlsx.default[(0, _helpers.isString)(mixed) ? "readFile" : "read"](mixed, options);
      return Object.keys(workSheet.Sheets).map(function(name2) {
        var sheet = workSheet.Sheets[name2];
        return {
          name: name2,
          data: sheet["!ref"] ? _xlsx.default.utils.decode_range(sheet["!ref"]) : null
        };
      });
    };
    exports.parseMetadata = parseMetadata;
    var build2 = function build3(worksheets, options) {
      if (options === void 0) {
        options = {};
      }
      var defaults = {
        bookType: "xlsx",
        bookSST: false,
        type: "binary"
      };
      var workBook = new _workbook.default();
      worksheets.forEach(function(worksheet) {
        var sheetName = worksheet.name || "Sheet";
        var sheetOptions = worksheet.options || {};
        var sheetData = (0, _helpers.buildSheetFromMatrix)(worksheet.data || [], (0, _extends2.default)({}, options, sheetOptions));
        workBook.SheetNames.push(sheetName);
        workBook.Sheets[sheetName] = sheetData;
      });
      var excelData = _xlsx.default.write(workBook, (0, _extends2.default)({}, defaults, options));
      return excelData instanceof Buffer ? excelData : (0, _bufferFrom.default)(excelData, "binary");
    };
    exports.build = build2;
    var _default = {
      parse,
      parseMetadata,
      build: build2
    };
    exports.default = _default;
  }
});

// node_modules/class-transformer/cjs/enums/transformation-type.enum.js
var require_transformation_type_enum = __commonJS({
  "node_modules/class-transformer/cjs/enums/transformation-type.enum.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TransformationType = void 0;
    var TransformationType;
    (function(TransformationType2) {
      TransformationType2[TransformationType2["PLAIN_TO_CLASS"] = 0] = "PLAIN_TO_CLASS";
      TransformationType2[TransformationType2["CLASS_TO_PLAIN"] = 1] = "CLASS_TO_PLAIN";
      TransformationType2[TransformationType2["CLASS_TO_CLASS"] = 2] = "CLASS_TO_CLASS";
    })(TransformationType = exports.TransformationType || (exports.TransformationType = {}));
  }
});

// node_modules/class-transformer/cjs/enums/index.js
var require_enums = __commonJS({
  "node_modules/class-transformer/cjs/enums/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_transformation_type_enum(), exports);
  }
});

// node_modules/class-transformer/cjs/MetadataStorage.js
var require_MetadataStorage = __commonJS({
  "node_modules/class-transformer/cjs/MetadataStorage.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MetadataStorage = void 0;
    var enums_1 = require_enums();
    var MetadataStorage = class {
      constructor() {
        this._typeMetadatas = new Map();
        this._transformMetadatas = new Map();
        this._exposeMetadatas = new Map();
        this._excludeMetadatas = new Map();
        this._ancestorsMap = new Map();
      }
      addTypeMetadata(metadata) {
        if (!this._typeMetadatas.has(metadata.target)) {
          this._typeMetadatas.set(metadata.target, new Map());
        }
        this._typeMetadatas.get(metadata.target).set(metadata.propertyName, metadata);
      }
      addTransformMetadata(metadata) {
        if (!this._transformMetadatas.has(metadata.target)) {
          this._transformMetadatas.set(metadata.target, new Map());
        }
        if (!this._transformMetadatas.get(metadata.target).has(metadata.propertyName)) {
          this._transformMetadatas.get(metadata.target).set(metadata.propertyName, []);
        }
        this._transformMetadatas.get(metadata.target).get(metadata.propertyName).push(metadata);
      }
      addExposeMetadata(metadata) {
        if (!this._exposeMetadatas.has(metadata.target)) {
          this._exposeMetadatas.set(metadata.target, new Map());
        }
        this._exposeMetadatas.get(metadata.target).set(metadata.propertyName, metadata);
      }
      addExcludeMetadata(metadata) {
        if (!this._excludeMetadatas.has(metadata.target)) {
          this._excludeMetadatas.set(metadata.target, new Map());
        }
        this._excludeMetadatas.get(metadata.target).set(metadata.propertyName, metadata);
      }
      findTransformMetadatas(target, propertyName, transformationType) {
        return this.findMetadatas(this._transformMetadatas, target, propertyName).filter((metadata) => {
          if (!metadata.options)
            return true;
          if (metadata.options.toClassOnly === true && metadata.options.toPlainOnly === true)
            return true;
          if (metadata.options.toClassOnly === true) {
            return transformationType === enums_1.TransformationType.CLASS_TO_CLASS || transformationType === enums_1.TransformationType.PLAIN_TO_CLASS;
          }
          if (metadata.options.toPlainOnly === true) {
            return transformationType === enums_1.TransformationType.CLASS_TO_PLAIN;
          }
          return true;
        });
      }
      findExcludeMetadata(target, propertyName) {
        return this.findMetadata(this._excludeMetadatas, target, propertyName);
      }
      findExposeMetadata(target, propertyName) {
        return this.findMetadata(this._exposeMetadatas, target, propertyName);
      }
      findExposeMetadataByCustomName(target, name2) {
        return this.getExposedMetadatas(target).find((metadata) => {
          return metadata.options && metadata.options.name === name2;
        });
      }
      findTypeMetadata(target, propertyName) {
        return this.findMetadata(this._typeMetadatas, target, propertyName);
      }
      getStrategy(target) {
        const excludeMap = this._excludeMetadatas.get(target);
        const exclude = excludeMap && excludeMap.get(void 0);
        const exposeMap = this._exposeMetadatas.get(target);
        const expose = exposeMap && exposeMap.get(void 0);
        if (exclude && expose || !exclude && !expose)
          return "none";
        return exclude ? "excludeAll" : "exposeAll";
      }
      getExposedMetadatas(target) {
        return this.getMetadata(this._exposeMetadatas, target);
      }
      getExcludedMetadatas(target) {
        return this.getMetadata(this._excludeMetadatas, target);
      }
      getExposedProperties(target, transformationType) {
        return this.getExposedMetadatas(target).filter((metadata) => {
          if (!metadata.options)
            return true;
          if (metadata.options.toClassOnly === true && metadata.options.toPlainOnly === true)
            return true;
          if (metadata.options.toClassOnly === true) {
            return transformationType === enums_1.TransformationType.CLASS_TO_CLASS || transformationType === enums_1.TransformationType.PLAIN_TO_CLASS;
          }
          if (metadata.options.toPlainOnly === true) {
            return transformationType === enums_1.TransformationType.CLASS_TO_PLAIN;
          }
          return true;
        }).map((metadata) => metadata.propertyName);
      }
      getExcludedProperties(target, transformationType) {
        return this.getExcludedMetadatas(target).filter((metadata) => {
          if (!metadata.options)
            return true;
          if (metadata.options.toClassOnly === true && metadata.options.toPlainOnly === true)
            return true;
          if (metadata.options.toClassOnly === true) {
            return transformationType === enums_1.TransformationType.CLASS_TO_CLASS || transformationType === enums_1.TransformationType.PLAIN_TO_CLASS;
          }
          if (metadata.options.toPlainOnly === true) {
            return transformationType === enums_1.TransformationType.CLASS_TO_PLAIN;
          }
          return true;
        }).map((metadata) => metadata.propertyName);
      }
      clear() {
        this._typeMetadatas.clear();
        this._exposeMetadatas.clear();
        this._excludeMetadatas.clear();
        this._ancestorsMap.clear();
      }
      getMetadata(metadatas, target) {
        const metadataFromTargetMap = metadatas.get(target);
        let metadataFromTarget;
        if (metadataFromTargetMap) {
          metadataFromTarget = Array.from(metadataFromTargetMap.values()).filter((meta) => meta.propertyName !== void 0);
        }
        const metadataFromAncestors = [];
        for (const ancestor of this.getAncestors(target)) {
          const ancestorMetadataMap = metadatas.get(ancestor);
          if (ancestorMetadataMap) {
            const metadataFromAncestor = Array.from(ancestorMetadataMap.values()).filter((meta) => meta.propertyName !== void 0);
            metadataFromAncestors.push(...metadataFromAncestor);
          }
        }
        return metadataFromAncestors.concat(metadataFromTarget || []);
      }
      findMetadata(metadatas, target, propertyName) {
        const metadataFromTargetMap = metadatas.get(target);
        if (metadataFromTargetMap) {
          const metadataFromTarget = metadataFromTargetMap.get(propertyName);
          if (metadataFromTarget) {
            return metadataFromTarget;
          }
        }
        for (const ancestor of this.getAncestors(target)) {
          const ancestorMetadataMap = metadatas.get(ancestor);
          if (ancestorMetadataMap) {
            const ancestorResult = ancestorMetadataMap.get(propertyName);
            if (ancestorResult) {
              return ancestorResult;
            }
          }
        }
        return void 0;
      }
      findMetadatas(metadatas, target, propertyName) {
        const metadataFromTargetMap = metadatas.get(target);
        let metadataFromTarget;
        if (metadataFromTargetMap) {
          metadataFromTarget = metadataFromTargetMap.get(propertyName);
        }
        const metadataFromAncestorsTarget = [];
        for (const ancestor of this.getAncestors(target)) {
          const ancestorMetadataMap = metadatas.get(ancestor);
          if (ancestorMetadataMap) {
            if (ancestorMetadataMap.has(propertyName)) {
              metadataFromAncestorsTarget.push(...ancestorMetadataMap.get(propertyName));
            }
          }
        }
        return metadataFromAncestorsTarget.slice().reverse().concat((metadataFromTarget || []).slice().reverse());
      }
      getAncestors(target) {
        if (!target)
          return [];
        if (!this._ancestorsMap.has(target)) {
          const ancestors = [];
          for (let baseClass = Object.getPrototypeOf(target.prototype.constructor); typeof baseClass.prototype !== "undefined"; baseClass = Object.getPrototypeOf(baseClass.prototype.constructor)) {
            ancestors.push(baseClass);
          }
          this._ancestorsMap.set(target, ancestors);
        }
        return this._ancestorsMap.get(target);
      }
    };
    exports.MetadataStorage = MetadataStorage;
  }
});

// node_modules/class-transformer/cjs/storage.js
var require_storage = __commonJS({
  "node_modules/class-transformer/cjs/storage.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultMetadataStorage = void 0;
    var MetadataStorage_1 = require_MetadataStorage();
    exports.defaultMetadataStorage = new MetadataStorage_1.MetadataStorage();
  }
});

// node_modules/class-transformer/cjs/utils/get-global.util.js
var require_get_global_util = __commonJS({
  "node_modules/class-transformer/cjs/utils/get-global.util.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getGlobal = void 0;
    function getGlobal() {
      if (typeof globalThis !== "undefined") {
        return globalThis;
      }
      if (typeof global !== "undefined") {
        return global;
      }
      if (typeof window !== "undefined") {
        return window;
      }
      if (typeof self !== "undefined") {
        return self;
      }
    }
    exports.getGlobal = getGlobal;
  }
});

// node_modules/class-transformer/cjs/utils/is-promise.util.js
var require_is_promise_util = __commonJS({
  "node_modules/class-transformer/cjs/utils/is-promise.util.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isPromise = void 0;
    function isPromise(p) {
      return p !== null && typeof p === "object" && typeof p.then === "function";
    }
    exports.isPromise = isPromise;
  }
});

// node_modules/class-transformer/cjs/utils/index.js
var require_utils3 = __commonJS({
  "node_modules/class-transformer/cjs/utils/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_get_global_util(), exports);
    __exportStar(require_is_promise_util(), exports);
  }
});

// node_modules/class-transformer/cjs/TransformOperationExecutor.js
var require_TransformOperationExecutor = __commonJS({
  "node_modules/class-transformer/cjs/TransformOperationExecutor.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TransformOperationExecutor = void 0;
    var storage_1 = require_storage();
    var enums_1 = require_enums();
    var utils_1 = require_utils3();
    function instantiateArrayType(arrayType) {
      const array = new arrayType();
      if (!(array instanceof Set) && !("push" in array)) {
        return [];
      }
      return array;
    }
    var TransformOperationExecutor = class {
      constructor(transformationType, options) {
        this.transformationType = transformationType;
        this.options = options;
        this.recursionStack = new Set();
      }
      transform(source, value, targetType, arrayType, isMap, level = 0) {
        if (Array.isArray(value) || value instanceof Set) {
          const newValue = arrayType && this.transformationType === enums_1.TransformationType.PLAIN_TO_CLASS ? instantiateArrayType(arrayType) : [];
          value.forEach((subValue, index) => {
            const subSource = source ? source[index] : void 0;
            if (!this.options.enableCircularCheck || !this.isCircular(subValue)) {
              let realTargetType;
              if (typeof targetType !== "function" && targetType && targetType.options && targetType.options.discriminator && targetType.options.discriminator.property && targetType.options.discriminator.subTypes) {
                if (this.transformationType === enums_1.TransformationType.PLAIN_TO_CLASS) {
                  realTargetType = targetType.options.discriminator.subTypes.find((subType) => subType.name === subValue[targetType.options.discriminator.property]);
                  const options = { newObject: newValue, object: subValue, property: void 0 };
                  const newType = targetType.typeFunction(options);
                  realTargetType === void 0 ? realTargetType = newType : realTargetType = realTargetType.value;
                  if (!targetType.options.keepDiscriminatorProperty)
                    delete subValue[targetType.options.discriminator.property];
                }
                if (this.transformationType === enums_1.TransformationType.CLASS_TO_CLASS) {
                  realTargetType = subValue.constructor;
                }
                if (this.transformationType === enums_1.TransformationType.CLASS_TO_PLAIN) {
                  subValue[targetType.options.discriminator.property] = targetType.options.discriminator.subTypes.find((subType) => subType.value === subValue.constructor).name;
                }
              } else {
                realTargetType = targetType;
              }
              const value2 = this.transform(subSource, subValue, realTargetType, void 0, subValue instanceof Map, level + 1);
              if (newValue instanceof Set) {
                newValue.add(value2);
              } else {
                newValue.push(value2);
              }
            } else if (this.transformationType === enums_1.TransformationType.CLASS_TO_CLASS) {
              if (newValue instanceof Set) {
                newValue.add(subValue);
              } else {
                newValue.push(subValue);
              }
            }
          });
          return newValue;
        } else if (targetType === String && !isMap) {
          if (value === null || value === void 0)
            return value;
          return String(value);
        } else if (targetType === Number && !isMap) {
          if (value === null || value === void 0)
            return value;
          return Number(value);
        } else if (targetType === Boolean && !isMap) {
          if (value === null || value === void 0)
            return value;
          return Boolean(value);
        } else if ((targetType === Date || value instanceof Date) && !isMap) {
          if (value instanceof Date) {
            return new Date(value.valueOf());
          }
          if (value === null || value === void 0)
            return value;
          return new Date(value);
        } else if (!!utils_1.getGlobal().Buffer && (targetType === Buffer || value instanceof Buffer) && !isMap) {
          if (value === null || value === void 0)
            return value;
          return Buffer.from(value);
        } else if (utils_1.isPromise(value) && !isMap) {
          return new Promise((resolve, reject) => {
            value.then((data) => resolve(this.transform(void 0, data, targetType, void 0, void 0, level + 1)), reject);
          });
        } else if (!isMap && value !== null && typeof value === "object" && typeof value.then === "function") {
          return value;
        } else if (typeof value === "object" && value !== null) {
          if (!targetType && value.constructor !== Object)
            targetType = value.constructor;
          if (!targetType && source)
            targetType = source.constructor;
          if (this.options.enableCircularCheck) {
            this.recursionStack.add(value);
          }
          const keys = this.getKeys(targetType, value, isMap);
          let newValue = source ? source : {};
          if (!source && (this.transformationType === enums_1.TransformationType.PLAIN_TO_CLASS || this.transformationType === enums_1.TransformationType.CLASS_TO_CLASS)) {
            if (isMap) {
              newValue = new Map();
            } else if (targetType) {
              newValue = new targetType();
            } else {
              newValue = {};
            }
          }
          for (const key of keys) {
            if (key === "__proto__" || key === "constructor") {
              continue;
            }
            const valueKey = key;
            let newValueKey = key, propertyName = key;
            if (!this.options.ignoreDecorators && targetType) {
              if (this.transformationType === enums_1.TransformationType.PLAIN_TO_CLASS) {
                const exposeMetadata = storage_1.defaultMetadataStorage.findExposeMetadataByCustomName(targetType, key);
                if (exposeMetadata) {
                  propertyName = exposeMetadata.propertyName;
                  newValueKey = exposeMetadata.propertyName;
                }
              } else if (this.transformationType === enums_1.TransformationType.CLASS_TO_PLAIN || this.transformationType === enums_1.TransformationType.CLASS_TO_CLASS) {
                const exposeMetadata = storage_1.defaultMetadataStorage.findExposeMetadata(targetType, key);
                if (exposeMetadata && exposeMetadata.options && exposeMetadata.options.name) {
                  newValueKey = exposeMetadata.options.name;
                }
              }
            }
            let subValue = void 0;
            if (value instanceof Map) {
              subValue = value.get(valueKey);
            } else if (value[valueKey] instanceof Function) {
              subValue = value[valueKey]();
            } else {
              subValue = value[valueKey];
            }
            let type = void 0, isSubValueMap = subValue instanceof Map;
            if (targetType && isMap) {
              type = targetType;
            } else if (targetType) {
              const metadata = storage_1.defaultMetadataStorage.findTypeMetadata(targetType, propertyName);
              if (metadata) {
                const options = { newObject: newValue, object: value, property: propertyName };
                const newType = metadata.typeFunction ? metadata.typeFunction(options) : metadata.reflectedType;
                if (metadata.options && metadata.options.discriminator && metadata.options.discriminator.property && metadata.options.discriminator.subTypes) {
                  if (!(value[valueKey] instanceof Array)) {
                    if (this.transformationType === enums_1.TransformationType.PLAIN_TO_CLASS) {
                      type = metadata.options.discriminator.subTypes.find((subType) => {
                        if (subValue && subValue instanceof Object && metadata.options.discriminator.property in subValue) {
                          return subType.name === subValue[metadata.options.discriminator.property];
                        }
                      });
                      type === void 0 ? type = newType : type = type.value;
                      if (!metadata.options.keepDiscriminatorProperty) {
                        if (subValue && subValue instanceof Object && metadata.options.discriminator.property in subValue) {
                          delete subValue[metadata.options.discriminator.property];
                        }
                      }
                    }
                    if (this.transformationType === enums_1.TransformationType.CLASS_TO_CLASS) {
                      type = subValue.constructor;
                    }
                    if (this.transformationType === enums_1.TransformationType.CLASS_TO_PLAIN) {
                      subValue[metadata.options.discriminator.property] = metadata.options.discriminator.subTypes.find((subType) => subType.value === subValue.constructor).name;
                    }
                  } else {
                    type = metadata;
                  }
                } else {
                  type = newType;
                }
                isSubValueMap = isSubValueMap || metadata.reflectedType === Map;
              } else if (this.options.targetMaps) {
                this.options.targetMaps.filter((map) => map.target === targetType && !!map.properties[propertyName]).forEach((map) => type = map.properties[propertyName]);
              } else if (this.options.enableImplicitConversion && this.transformationType === enums_1.TransformationType.PLAIN_TO_CLASS) {
                const reflectedType = Reflect.getMetadata("design:type", targetType.prototype, propertyName);
                if (reflectedType) {
                  type = reflectedType;
                }
              }
            }
            const arrayType2 = Array.isArray(value[valueKey]) ? this.getReflectedType(targetType, propertyName) : void 0;
            const subSource = source ? source[valueKey] : void 0;
            if (newValue.constructor.prototype) {
              const descriptor = Object.getOwnPropertyDescriptor(newValue.constructor.prototype, newValueKey);
              if ((this.transformationType === enums_1.TransformationType.PLAIN_TO_CLASS || this.transformationType === enums_1.TransformationType.CLASS_TO_CLASS) && (descriptor && !descriptor.set || newValue[newValueKey] instanceof Function))
                continue;
            }
            if (!this.options.enableCircularCheck || !this.isCircular(subValue)) {
              const transformKey = this.transformationType === enums_1.TransformationType.PLAIN_TO_CLASS ? newValueKey : key;
              let finalValue;
              if (this.transformationType === enums_1.TransformationType.CLASS_TO_PLAIN) {
                finalValue = value[transformKey];
                finalValue = this.applyCustomTransformations(finalValue, targetType, transformKey, value, this.transformationType);
                finalValue = value[transformKey] === finalValue ? subValue : finalValue;
                finalValue = this.transform(subSource, finalValue, type, arrayType2, isSubValueMap, level + 1);
              } else {
                if (subValue === void 0 && this.options.exposeDefaultValues) {
                  finalValue = newValue[newValueKey];
                } else {
                  finalValue = this.transform(subSource, subValue, type, arrayType2, isSubValueMap, level + 1);
                  finalValue = this.applyCustomTransformations(finalValue, targetType, transformKey, value, this.transformationType);
                }
              }
              if (finalValue !== void 0 || this.options.exposeUnsetFields) {
                if (newValue instanceof Map) {
                  newValue.set(newValueKey, finalValue);
                } else {
                  newValue[newValueKey] = finalValue;
                }
              }
            } else if (this.transformationType === enums_1.TransformationType.CLASS_TO_CLASS) {
              let finalValue = subValue;
              finalValue = this.applyCustomTransformations(finalValue, targetType, key, value, this.transformationType);
              if (finalValue !== void 0 || this.options.exposeUnsetFields) {
                if (newValue instanceof Map) {
                  newValue.set(newValueKey, finalValue);
                } else {
                  newValue[newValueKey] = finalValue;
                }
              }
            }
          }
          if (this.options.enableCircularCheck) {
            this.recursionStack.delete(value);
          }
          return newValue;
        } else {
          return value;
        }
      }
      applyCustomTransformations(value, target, key, obj, transformationType) {
        let metadatas = storage_1.defaultMetadataStorage.findTransformMetadatas(target, key, this.transformationType);
        if (this.options.version !== void 0) {
          metadatas = metadatas.filter((metadata) => {
            if (!metadata.options)
              return true;
            return this.checkVersion(metadata.options.since, metadata.options.until);
          });
        }
        if (this.options.groups && this.options.groups.length) {
          metadatas = metadatas.filter((metadata) => {
            if (!metadata.options)
              return true;
            return this.checkGroups(metadata.options.groups);
          });
        } else {
          metadatas = metadatas.filter((metadata) => {
            return !metadata.options || !metadata.options.groups || !metadata.options.groups.length;
          });
        }
        metadatas.forEach((metadata) => {
          value = metadata.transformFn({ value, key, obj, type: transformationType, options: this.options });
        });
        return value;
      }
      isCircular(object) {
        return this.recursionStack.has(object);
      }
      getReflectedType(target, propertyName) {
        if (!target)
          return void 0;
        const meta = storage_1.defaultMetadataStorage.findTypeMetadata(target, propertyName);
        return meta ? meta.reflectedType : void 0;
      }
      getKeys(target, object, isMap) {
        let strategy = storage_1.defaultMetadataStorage.getStrategy(target);
        if (strategy === "none")
          strategy = this.options.strategy || "exposeAll";
        let keys = [];
        if (strategy === "exposeAll" || isMap) {
          if (object instanceof Map) {
            keys = Array.from(object.keys());
          } else {
            keys = Object.keys(object);
          }
        }
        if (isMap) {
          return keys;
        }
        if (!this.options.ignoreDecorators && target) {
          let exposedProperties = storage_1.defaultMetadataStorage.getExposedProperties(target, this.transformationType);
          if (this.transformationType === enums_1.TransformationType.PLAIN_TO_CLASS) {
            exposedProperties = exposedProperties.map((key) => {
              const exposeMetadata = storage_1.defaultMetadataStorage.findExposeMetadata(target, key);
              if (exposeMetadata && exposeMetadata.options && exposeMetadata.options.name) {
                return exposeMetadata.options.name;
              }
              return key;
            });
          }
          if (this.options.excludeExtraneousValues) {
            keys = exposedProperties;
          } else {
            keys = keys.concat(exposedProperties);
          }
          const excludedProperties = storage_1.defaultMetadataStorage.getExcludedProperties(target, this.transformationType);
          if (excludedProperties.length > 0) {
            keys = keys.filter((key) => {
              return !excludedProperties.includes(key);
            });
          }
          if (this.options.version !== void 0) {
            keys = keys.filter((key) => {
              const exposeMetadata = storage_1.defaultMetadataStorage.findExposeMetadata(target, key);
              if (!exposeMetadata || !exposeMetadata.options)
                return true;
              return this.checkVersion(exposeMetadata.options.since, exposeMetadata.options.until);
            });
          }
          if (this.options.groups && this.options.groups.length) {
            keys = keys.filter((key) => {
              const exposeMetadata = storage_1.defaultMetadataStorage.findExposeMetadata(target, key);
              if (!exposeMetadata || !exposeMetadata.options)
                return true;
              return this.checkGroups(exposeMetadata.options.groups);
            });
          } else {
            keys = keys.filter((key) => {
              const exposeMetadata = storage_1.defaultMetadataStorage.findExposeMetadata(target, key);
              return !exposeMetadata || !exposeMetadata.options || !exposeMetadata.options.groups || !exposeMetadata.options.groups.length;
            });
          }
        }
        if (this.options.excludePrefixes && this.options.excludePrefixes.length) {
          keys = keys.filter((key) => this.options.excludePrefixes.every((prefix) => {
            return key.substr(0, prefix.length) !== prefix;
          }));
        }
        keys = keys.filter((key, index, self2) => {
          return self2.indexOf(key) === index;
        });
        return keys;
      }
      checkVersion(since, until) {
        let decision = true;
        if (decision && since)
          decision = this.options.version >= since;
        if (decision && until)
          decision = this.options.version < until;
        return decision;
      }
      checkGroups(groups) {
        if (!groups)
          return true;
        return this.options.groups.some((optionGroup) => groups.includes(optionGroup));
      }
    };
    exports.TransformOperationExecutor = TransformOperationExecutor;
  }
});

// node_modules/class-transformer/cjs/constants/default-options.constant.js
var require_default_options_constant = __commonJS({
  "node_modules/class-transformer/cjs/constants/default-options.constant.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultOptions = void 0;
    exports.defaultOptions = {
      enableCircularCheck: false,
      enableImplicitConversion: false,
      excludeExtraneousValues: false,
      excludePrefixes: void 0,
      exposeDefaultValues: false,
      exposeUnsetFields: true,
      groups: void 0,
      ignoreDecorators: false,
      strategy: void 0,
      targetMaps: void 0,
      version: void 0
    };
  }
});

// node_modules/class-transformer/cjs/ClassTransformer.js
var require_ClassTransformer = __commonJS({
  "node_modules/class-transformer/cjs/ClassTransformer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ClassTransformer = void 0;
    var TransformOperationExecutor_1 = require_TransformOperationExecutor();
    var enums_1 = require_enums();
    var default_options_constant_1 = require_default_options_constant();
    var ClassTransformer = class {
      classToPlain(object, options) {
        const executor = new TransformOperationExecutor_1.TransformOperationExecutor(enums_1.TransformationType.CLASS_TO_PLAIN, __spreadValues(__spreadValues({}, default_options_constant_1.defaultOptions), options));
        return executor.transform(void 0, object, void 0, void 0, void 0, void 0);
      }
      classToPlainFromExist(object, plainObject, options) {
        const executor = new TransformOperationExecutor_1.TransformOperationExecutor(enums_1.TransformationType.CLASS_TO_PLAIN, __spreadValues(__spreadValues({}, default_options_constant_1.defaultOptions), options));
        return executor.transform(plainObject, object, void 0, void 0, void 0, void 0);
      }
      plainToClass(cls, plain, options) {
        const executor = new TransformOperationExecutor_1.TransformOperationExecutor(enums_1.TransformationType.PLAIN_TO_CLASS, __spreadValues(__spreadValues({}, default_options_constant_1.defaultOptions), options));
        return executor.transform(void 0, plain, cls, void 0, void 0, void 0);
      }
      plainToClassFromExist(clsObject, plain, options) {
        const executor = new TransformOperationExecutor_1.TransformOperationExecutor(enums_1.TransformationType.PLAIN_TO_CLASS, __spreadValues(__spreadValues({}, default_options_constant_1.defaultOptions), options));
        return executor.transform(clsObject, plain, void 0, void 0, void 0, void 0);
      }
      classToClass(object, options) {
        const executor = new TransformOperationExecutor_1.TransformOperationExecutor(enums_1.TransformationType.CLASS_TO_CLASS, __spreadValues(__spreadValues({}, default_options_constant_1.defaultOptions), options));
        return executor.transform(void 0, object, void 0, void 0, void 0, void 0);
      }
      classToClassFromExist(object, fromObject, options) {
        const executor = new TransformOperationExecutor_1.TransformOperationExecutor(enums_1.TransformationType.CLASS_TO_CLASS, __spreadValues(__spreadValues({}, default_options_constant_1.defaultOptions), options));
        return executor.transform(fromObject, object, void 0, void 0, void 0, void 0);
      }
      serialize(object, options) {
        return JSON.stringify(this.classToPlain(object, options));
      }
      deserialize(cls, json, options) {
        const jsonObject = JSON.parse(json);
        return this.plainToClass(cls, jsonObject, options);
      }
      deserializeArray(cls, json, options) {
        const jsonObject = JSON.parse(json);
        return this.plainToClass(cls, jsonObject, options);
      }
    };
    exports.ClassTransformer = ClassTransformer;
  }
});

// node_modules/class-transformer/cjs/decorators/exclude.decorator.js
var require_exclude_decorator = __commonJS({
  "node_modules/class-transformer/cjs/decorators/exclude.decorator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Exclude = void 0;
    var storage_1 = require_storage();
    function Exclude(options = {}) {
      return function(object, propertyName) {
        storage_1.defaultMetadataStorage.addExcludeMetadata({
          target: object instanceof Function ? object : object.constructor,
          propertyName,
          options
        });
      };
    }
    exports.Exclude = Exclude;
  }
});

// node_modules/class-transformer/cjs/decorators/expose.decorator.js
var require_expose_decorator = __commonJS({
  "node_modules/class-transformer/cjs/decorators/expose.decorator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Expose = void 0;
    var storage_1 = require_storage();
    function Expose(options = {}) {
      return function(object, propertyName) {
        storage_1.defaultMetadataStorage.addExposeMetadata({
          target: object instanceof Function ? object : object.constructor,
          propertyName,
          options
        });
      };
    }
    exports.Expose = Expose;
  }
});

// node_modules/class-transformer/cjs/decorators/transform-class-to-class.decorator.js
var require_transform_class_to_class_decorator = __commonJS({
  "node_modules/class-transformer/cjs/decorators/transform-class-to-class.decorator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TransformClassToClass = void 0;
    var ClassTransformer_1 = require_ClassTransformer();
    function TransformClassToClass(params) {
      return function(target, propertyKey, descriptor) {
        const classTransformer = new ClassTransformer_1.ClassTransformer();
        const originalMethod = descriptor.value;
        descriptor.value = function(...args) {
          const result = originalMethod.apply(this, args);
          const isPromise = !!result && (typeof result === "object" || typeof result === "function") && typeof result.then === "function";
          return isPromise ? result.then((data) => classTransformer.classToClass(data, params)) : classTransformer.classToClass(result, params);
        };
      };
    }
    exports.TransformClassToClass = TransformClassToClass;
  }
});

// node_modules/class-transformer/cjs/decorators/transform-class-to-plain.decorator.js
var require_transform_class_to_plain_decorator = __commonJS({
  "node_modules/class-transformer/cjs/decorators/transform-class-to-plain.decorator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TransformClassToPlain = void 0;
    var ClassTransformer_1 = require_ClassTransformer();
    function TransformClassToPlain(params) {
      return function(target, propertyKey, descriptor) {
        const classTransformer = new ClassTransformer_1.ClassTransformer();
        const originalMethod = descriptor.value;
        descriptor.value = function(...args) {
          const result = originalMethod.apply(this, args);
          const isPromise = !!result && (typeof result === "object" || typeof result === "function") && typeof result.then === "function";
          return isPromise ? result.then((data) => classTransformer.classToPlain(data, params)) : classTransformer.classToPlain(result, params);
        };
      };
    }
    exports.TransformClassToPlain = TransformClassToPlain;
  }
});

// node_modules/class-transformer/cjs/decorators/transform-plain-to-class.decorator.js
var require_transform_plain_to_class_decorator = __commonJS({
  "node_modules/class-transformer/cjs/decorators/transform-plain-to-class.decorator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TransformPlainToClass = void 0;
    var ClassTransformer_1 = require_ClassTransformer();
    function TransformPlainToClass(classType, params) {
      return function(target, propertyKey, descriptor) {
        const classTransformer = new ClassTransformer_1.ClassTransformer();
        const originalMethod = descriptor.value;
        descriptor.value = function(...args) {
          const result = originalMethod.apply(this, args);
          const isPromise = !!result && (typeof result === "object" || typeof result === "function") && typeof result.then === "function";
          return isPromise ? result.then((data) => classTransformer.plainToClass(classType, data, params)) : classTransformer.plainToClass(classType, result, params);
        };
      };
    }
    exports.TransformPlainToClass = TransformPlainToClass;
  }
});

// node_modules/class-transformer/cjs/decorators/transform.decorator.js
var require_transform_decorator = __commonJS({
  "node_modules/class-transformer/cjs/decorators/transform.decorator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Transform = void 0;
    var storage_1 = require_storage();
    function Transform(transformFn, options = {}) {
      return function(target, propertyName) {
        storage_1.defaultMetadataStorage.addTransformMetadata({
          target: target.constructor,
          propertyName,
          transformFn,
          options
        });
      };
    }
    exports.Transform = Transform;
  }
});

// node_modules/class-transformer/cjs/decorators/type.decorator.js
var require_type_decorator = __commonJS({
  "node_modules/class-transformer/cjs/decorators/type.decorator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Type = void 0;
    var storage_1 = require_storage();
    function Type(typeFunction, options = {}) {
      return function(target, propertyName) {
        const reflectedType = Reflect.getMetadata("design:type", target, propertyName);
        storage_1.defaultMetadataStorage.addTypeMetadata({
          target: target.constructor,
          propertyName,
          reflectedType,
          typeFunction,
          options
        });
      };
    }
    exports.Type = Type;
  }
});

// node_modules/class-transformer/cjs/decorators/index.js
var require_decorators = __commonJS({
  "node_modules/class-transformer/cjs/decorators/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_exclude_decorator(), exports);
    __exportStar(require_expose_decorator(), exports);
    __exportStar(require_transform_class_to_class_decorator(), exports);
    __exportStar(require_transform_class_to_plain_decorator(), exports);
    __exportStar(require_transform_plain_to_class_decorator(), exports);
    __exportStar(require_transform_decorator(), exports);
    __exportStar(require_type_decorator(), exports);
  }
});

// node_modules/class-transformer/cjs/interfaces/decorator-options/expose-options.interface.js
var require_expose_options_interface = __commonJS({
  "node_modules/class-transformer/cjs/interfaces/decorator-options/expose-options.interface.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/class-transformer/cjs/interfaces/decorator-options/exclude-options.interface.js
var require_exclude_options_interface = __commonJS({
  "node_modules/class-transformer/cjs/interfaces/decorator-options/exclude-options.interface.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/class-transformer/cjs/interfaces/decorator-options/transform-options.interface.js
var require_transform_options_interface = __commonJS({
  "node_modules/class-transformer/cjs/interfaces/decorator-options/transform-options.interface.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/class-transformer/cjs/interfaces/decorator-options/type-discriminator-descriptor.interface.js
var require_type_discriminator_descriptor_interface = __commonJS({
  "node_modules/class-transformer/cjs/interfaces/decorator-options/type-discriminator-descriptor.interface.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/class-transformer/cjs/interfaces/decorator-options/type-options.interface.js
var require_type_options_interface = __commonJS({
  "node_modules/class-transformer/cjs/interfaces/decorator-options/type-options.interface.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/class-transformer/cjs/interfaces/metadata/exclude-metadata.interface.js
var require_exclude_metadata_interface = __commonJS({
  "node_modules/class-transformer/cjs/interfaces/metadata/exclude-metadata.interface.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/class-transformer/cjs/interfaces/metadata/expose-metadata.interface.js
var require_expose_metadata_interface = __commonJS({
  "node_modules/class-transformer/cjs/interfaces/metadata/expose-metadata.interface.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/class-transformer/cjs/interfaces/metadata/transform-metadata.interface.js
var require_transform_metadata_interface = __commonJS({
  "node_modules/class-transformer/cjs/interfaces/metadata/transform-metadata.interface.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/class-transformer/cjs/interfaces/metadata/transform-fn-params.interface.js
var require_transform_fn_params_interface = __commonJS({
  "node_modules/class-transformer/cjs/interfaces/metadata/transform-fn-params.interface.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/class-transformer/cjs/interfaces/metadata/type-metadata.interface.js
var require_type_metadata_interface = __commonJS({
  "node_modules/class-transformer/cjs/interfaces/metadata/type-metadata.interface.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/class-transformer/cjs/interfaces/class-constructor.type.js
var require_class_constructor_type = __commonJS({
  "node_modules/class-transformer/cjs/interfaces/class-constructor.type.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/class-transformer/cjs/interfaces/class-transformer-options.interface.js
var require_class_transformer_options_interface = __commonJS({
  "node_modules/class-transformer/cjs/interfaces/class-transformer-options.interface.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/class-transformer/cjs/interfaces/target-map.interface.js
var require_target_map_interface = __commonJS({
  "node_modules/class-transformer/cjs/interfaces/target-map.interface.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/class-transformer/cjs/interfaces/type-help-options.interface.js
var require_type_help_options_interface = __commonJS({
  "node_modules/class-transformer/cjs/interfaces/type-help-options.interface.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/class-transformer/cjs/interfaces/index.js
var require_interfaces = __commonJS({
  "node_modules/class-transformer/cjs/interfaces/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_expose_options_interface(), exports);
    __exportStar(require_exclude_options_interface(), exports);
    __exportStar(require_transform_options_interface(), exports);
    __exportStar(require_type_discriminator_descriptor_interface(), exports);
    __exportStar(require_type_options_interface(), exports);
    __exportStar(require_exclude_metadata_interface(), exports);
    __exportStar(require_expose_metadata_interface(), exports);
    __exportStar(require_transform_metadata_interface(), exports);
    __exportStar(require_transform_fn_params_interface(), exports);
    __exportStar(require_type_metadata_interface(), exports);
    __exportStar(require_class_constructor_type(), exports);
    __exportStar(require_class_transformer_options_interface(), exports);
    __exportStar(require_target_map_interface(), exports);
    __exportStar(require_type_help_options_interface(), exports);
  }
});

// node_modules/class-transformer/cjs/index.js
var require_cjs = __commonJS({
  "node_modules/class-transformer/cjs/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.deserializeArray = exports.deserialize = exports.serialize = exports.classToClassFromExist = exports.classToClass = exports.plainToClassFromExist = exports.plainToClass = exports.classToPlainFromExist = exports.classToPlain = exports.ClassTransformer = void 0;
    var ClassTransformer_1 = require_ClassTransformer();
    var ClassTransformer_2 = require_ClassTransformer();
    Object.defineProperty(exports, "ClassTransformer", { enumerable: true, get: function() {
      return ClassTransformer_2.ClassTransformer;
    } });
    __exportStar(require_decorators(), exports);
    __exportStar(require_interfaces(), exports);
    __exportStar(require_enums(), exports);
    var classTransformer = new ClassTransformer_1.ClassTransformer();
    function classToPlain(object, options) {
      return classTransformer.classToPlain(object, options);
    }
    exports.classToPlain = classToPlain;
    function classToPlainFromExist(object, plainObject, options) {
      return classTransformer.classToPlainFromExist(object, plainObject, options);
    }
    exports.classToPlainFromExist = classToPlainFromExist;
    function plainToClass2(cls, plain, options) {
      return classTransformer.plainToClass(cls, plain, options);
    }
    exports.plainToClass = plainToClass2;
    function plainToClassFromExist(clsObject, plain, options) {
      return classTransformer.plainToClassFromExist(clsObject, plain, options);
    }
    exports.plainToClassFromExist = plainToClassFromExist;
    function classToClass(object, options) {
      return classTransformer.classToClass(object, options);
    }
    exports.classToClass = classToClass;
    function classToClassFromExist(object, fromObject, options) {
      return classTransformer.classToClassFromExist(object, fromObject, options);
    }
    exports.classToClassFromExist = classToClassFromExist;
    function serialize(object, options) {
      return classTransformer.serialize(object, options);
    }
    exports.serialize = serialize;
    function deserialize(cls, json, options) {
      return classTransformer.deserialize(cls, json, options);
    }
    exports.deserialize = deserialize;
    function deserializeArray(cls, json, options) {
      return classTransformer.deserializeArray(cls, json, options);
    }
    exports.deserializeArray = deserializeArray;
  }
});

// node_modules/class-validator/cjs/metadata/ValidationMetadata.js
var require_ValidationMetadata = __commonJS({
  "node_modules/class-validator/cjs/metadata/ValidationMetadata.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ValidationMetadata = void 0;
    var ValidationMetadata = class {
      constructor(args) {
        this.groups = [];
        this.each = false;
        this.context = void 0;
        this.type = args.type;
        this.target = args.target;
        this.propertyName = args.propertyName;
        this.constraints = args.constraints;
        this.constraintCls = args.constraintCls;
        this.validationTypeOptions = args.validationTypeOptions;
        if (args.validationOptions) {
          this.message = args.validationOptions.message;
          this.groups = args.validationOptions.groups;
          this.always = args.validationOptions.always;
          this.each = args.validationOptions.each;
          this.context = args.validationOptions.context;
        }
      }
    };
    exports.ValidationMetadata = ValidationMetadata;
  }
});

// node_modules/class-validator/cjs/validation-schema/ValidationSchemaToMetadataTransformer.js
var require_ValidationSchemaToMetadataTransformer = __commonJS({
  "node_modules/class-validator/cjs/validation-schema/ValidationSchemaToMetadataTransformer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ValidationSchemaToMetadataTransformer = void 0;
    var ValidationMetadata_1 = require_ValidationMetadata();
    var ValidationSchemaToMetadataTransformer = class {
      transform(schema) {
        const metadatas = [];
        Object.keys(schema.properties).forEach((property) => {
          schema.properties[property].forEach((validation) => {
            const validationOptions = {
              message: validation.message,
              groups: validation.groups,
              always: validation.always,
              each: validation.each
            };
            const args = {
              type: validation.type,
              target: schema.name,
              propertyName: property,
              constraints: validation.constraints,
              validationTypeOptions: validation.options,
              validationOptions
            };
            metadatas.push(new ValidationMetadata_1.ValidationMetadata(args));
          });
        });
        return metadatas;
      }
    };
    exports.ValidationSchemaToMetadataTransformer = ValidationSchemaToMetadataTransformer;
  }
});

// node_modules/class-validator/cjs/utils/convert-to-array.util.js
var require_convert_to_array_util = __commonJS({
  "node_modules/class-validator/cjs/utils/convert-to-array.util.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.convertToArray = void 0;
    function convertToArray(val) {
      if (val instanceof Map) {
        return Array.from(val.values());
      }
      return Array.isArray(val) ? val : Array.from(val);
    }
    exports.convertToArray = convertToArray;
  }
});

// node_modules/class-validator/cjs/utils/get-global.util.js
var require_get_global_util2 = __commonJS({
  "node_modules/class-validator/cjs/utils/get-global.util.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getGlobal = void 0;
    function getGlobal() {
      if (typeof globalThis !== "undefined") {
        return globalThis;
      }
      if (typeof global !== "undefined") {
        return global;
      }
      if (typeof window !== "undefined") {
        return window;
      }
      if (typeof self !== "undefined") {
        return self;
      }
    }
    exports.getGlobal = getGlobal;
  }
});

// node_modules/class-validator/cjs/utils/is-promise.util.js
var require_is_promise_util2 = __commonJS({
  "node_modules/class-validator/cjs/utils/is-promise.util.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isPromise = void 0;
    function isPromise(p) {
      return p !== null && typeof p === "object" && typeof p.then === "function";
    }
    exports.isPromise = isPromise;
  }
});

// node_modules/class-validator/cjs/utils/index.js
var require_utils4 = __commonJS({
  "node_modules/class-validator/cjs/utils/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_convert_to_array_util(), exports);
    __exportStar(require_get_global_util2(), exports);
    __exportStar(require_is_promise_util2(), exports);
  }
});

// node_modules/class-validator/cjs/metadata/MetadataStorage.js
var require_MetadataStorage2 = __commonJS({
  "node_modules/class-validator/cjs/metadata/MetadataStorage.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getMetadataStorage = exports.MetadataStorage = void 0;
    var ValidationSchemaToMetadataTransformer_1 = require_ValidationSchemaToMetadataTransformer();
    var utils_1 = require_utils4();
    var MetadataStorage = class {
      constructor() {
        this.validationMetadatas = [];
        this.constraintMetadatas = [];
      }
      get hasValidationMetaData() {
        return !!this.validationMetadatas.length;
      }
      addValidationSchema(schema) {
        const validationMetadatas = new ValidationSchemaToMetadataTransformer_1.ValidationSchemaToMetadataTransformer().transform(schema);
        validationMetadatas.forEach((validationMetadata) => this.addValidationMetadata(validationMetadata));
      }
      addValidationMetadata(metadata) {
        this.validationMetadatas.push(metadata);
      }
      addConstraintMetadata(metadata) {
        this.constraintMetadatas.push(metadata);
      }
      groupByPropertyName(metadata) {
        const grouped = {};
        metadata.forEach((metadata2) => {
          if (!grouped[metadata2.propertyName])
            grouped[metadata2.propertyName] = [];
          grouped[metadata2.propertyName].push(metadata2);
        });
        return grouped;
      }
      getTargetValidationMetadatas(targetConstructor, targetSchema, always, strictGroups, groups) {
        const includeMetadataBecauseOfAlwaysOption = (metadata) => {
          if (typeof metadata.always !== "undefined")
            return metadata.always;
          if (metadata.groups && metadata.groups.length)
            return false;
          return always;
        };
        const excludeMetadataBecauseOfStrictGroupsOption = (metadata) => {
          if (strictGroups) {
            if (!groups || !groups.length) {
              if (metadata.groups && metadata.groups.length)
                return true;
            }
          }
          return false;
        };
        const originalMetadatas = this.validationMetadatas.filter((metadata) => {
          if (metadata.target !== targetConstructor && metadata.target !== targetSchema)
            return false;
          if (includeMetadataBecauseOfAlwaysOption(metadata))
            return true;
          if (excludeMetadataBecauseOfStrictGroupsOption(metadata))
            return false;
          if (groups && groups.length > 0)
            return metadata.groups && !!metadata.groups.find((group) => groups.indexOf(group) !== -1);
          return true;
        });
        const inheritedMetadatas = this.validationMetadatas.filter((metadata) => {
          if (typeof metadata.target === "string")
            return false;
          if (metadata.target === targetConstructor)
            return false;
          if (metadata.target instanceof Function && !(targetConstructor.prototype instanceof metadata.target))
            return false;
          if (includeMetadataBecauseOfAlwaysOption(metadata))
            return true;
          if (excludeMetadataBecauseOfStrictGroupsOption(metadata))
            return false;
          if (groups && groups.length > 0)
            return metadata.groups && !!metadata.groups.find((group) => groups.indexOf(group) !== -1);
          return true;
        });
        const uniqueInheritedMetadatas = inheritedMetadatas.filter((inheritedMetadata) => {
          return !originalMetadatas.find((originalMetadata) => {
            return originalMetadata.propertyName === inheritedMetadata.propertyName && originalMetadata.type === inheritedMetadata.type;
          });
        });
        return originalMetadatas.concat(uniqueInheritedMetadatas);
      }
      getTargetValidatorConstraints(target) {
        return this.constraintMetadatas.filter((metadata) => metadata.target === target);
      }
    };
    exports.MetadataStorage = MetadataStorage;
    function getMetadataStorage() {
      const global2 = utils_1.getGlobal();
      if (!global2.classValidatorMetadataStorage) {
        global2.classValidatorMetadataStorage = new MetadataStorage();
      }
      return global2.classValidatorMetadataStorage;
    }
    exports.getMetadataStorage = getMetadataStorage;
  }
});

// node_modules/class-validator/cjs/validation/ValidationError.js
var require_ValidationError = __commonJS({
  "node_modules/class-validator/cjs/validation/ValidationError.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ValidationError = void 0;
    var ValidationError = class {
      toString(shouldDecorate = false, hasParent = false, parentPath = ``) {
        const boldStart = shouldDecorate ? `[1m` : ``;
        const boldEnd = shouldDecorate ? `[22m` : ``;
        const propConstraintFailed = (propertyName) => ` - property ${boldStart}${parentPath}${propertyName}${boldEnd} has failed the following constraints: ${boldStart}${Object.keys(this.constraints).join(`, `)}${boldEnd} 
`;
        if (!hasParent) {
          return `An instance of ${boldStart}${this.target ? this.target.constructor.name : "an object"}${boldEnd} has failed the validation:
` + (this.constraints ? propConstraintFailed(this.property) : ``) + (this.children ? this.children.map((childError) => childError.toString(shouldDecorate, true, this.property)).join(``) : ``);
        } else {
          const formattedProperty = Number.isInteger(+this.property) ? `[${this.property}]` : `${parentPath ? `.` : ``}${this.property}`;
          if (this.constraints) {
            return propConstraintFailed(formattedProperty);
          } else {
            return this.children ? this.children.map((childError) => childError.toString(shouldDecorate, true, `${parentPath}${formattedProperty}`)).join(``) : ``;
          }
        }
      }
    };
    exports.ValidationError = ValidationError;
  }
});

// node_modules/class-validator/cjs/validation/ValidationTypes.js
var require_ValidationTypes = __commonJS({
  "node_modules/class-validator/cjs/validation/ValidationTypes.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ValidationTypes = void 0;
    var ValidationTypes = class {
      static isValid(type) {
        return type !== "isValid" && type !== "getMessage" && Object.keys(this).map((key) => this[key]).indexOf(type) !== -1;
      }
    };
    exports.ValidationTypes = ValidationTypes;
    ValidationTypes.CUSTOM_VALIDATION = "customValidation";
    ValidationTypes.NESTED_VALIDATION = "nestedValidation";
    ValidationTypes.PROMISE_VALIDATION = "promiseValidation";
    ValidationTypes.CONDITIONAL_VALIDATION = "conditionalValidation";
    ValidationTypes.WHITELIST = "whitelistValidation";
    ValidationTypes.IS_DEFINED = "isDefined";
  }
});

// node_modules/class-validator/cjs/validation/ValidationUtils.js
var require_ValidationUtils = __commonJS({
  "node_modules/class-validator/cjs/validation/ValidationUtils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ValidationUtils = exports.constraintToString = void 0;
    function constraintToString(constraint) {
      if (Array.isArray(constraint)) {
        return constraint.join(", ");
      }
      return `${constraint}`;
    }
    exports.constraintToString = constraintToString;
    var ValidationUtils = class {
      static replaceMessageSpecialTokens(message, validationArguments) {
        let messageString;
        if (message instanceof Function) {
          messageString = message(validationArguments);
        } else if (typeof message === "string") {
          messageString = message;
        }
        if (messageString && validationArguments.constraints instanceof Array) {
          validationArguments.constraints.forEach((constraint, index) => {
            messageString = messageString.replace(new RegExp(`\\$constraint${index + 1}`, "g"), constraintToString(constraint));
          });
        }
        if (messageString && validationArguments.value !== void 0 && validationArguments.value !== null && typeof validationArguments.value === "string")
          messageString = messageString.replace(/\$value/g, validationArguments.value);
        if (messageString)
          messageString = messageString.replace(/\$property/g, validationArguments.property);
        if (messageString)
          messageString = messageString.replace(/\$target/g, validationArguments.targetName);
        return messageString;
      }
    };
    exports.ValidationUtils = ValidationUtils;
  }
});

// node_modules/class-validator/cjs/validation/ValidationExecutor.js
var require_ValidationExecutor = __commonJS({
  "node_modules/class-validator/cjs/validation/ValidationExecutor.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ValidationExecutor = void 0;
    var ValidationError_1 = require_ValidationError();
    var ValidationTypes_1 = require_ValidationTypes();
    var ValidationUtils_1 = require_ValidationUtils();
    var utils_1 = require_utils4();
    var MetadataStorage_1 = require_MetadataStorage2();
    var ValidationExecutor = class {
      constructor(validator, validatorOptions) {
        this.validator = validator;
        this.validatorOptions = validatorOptions;
        this.awaitingPromises = [];
        this.ignoreAsyncValidations = false;
        this.metadataStorage = MetadataStorage_1.getMetadataStorage();
      }
      execute(object, targetSchema, validationErrors) {
        var _a;
        if (!this.metadataStorage.hasValidationMetaData && ((_a = this.validatorOptions) === null || _a === void 0 ? void 0 : _a.enableDebugMessages) === true) {
          console.warn(`No metadata found. There is more than once class-validator version installed probably. You need to flatten your dependencies.`);
        }
        const groups = this.validatorOptions ? this.validatorOptions.groups : void 0;
        const strictGroups = this.validatorOptions && this.validatorOptions.strictGroups || false;
        const always = this.validatorOptions && this.validatorOptions.always || false;
        const targetMetadatas = this.metadataStorage.getTargetValidationMetadatas(object.constructor, targetSchema, always, strictGroups, groups);
        const groupedMetadatas = this.metadataStorage.groupByPropertyName(targetMetadatas);
        if (this.validatorOptions && this.validatorOptions.forbidUnknownValues && !targetMetadatas.length) {
          const validationError = new ValidationError_1.ValidationError();
          if (!this.validatorOptions || !this.validatorOptions.validationError || this.validatorOptions.validationError.target === void 0 || this.validatorOptions.validationError.target === true)
            validationError.target = object;
          validationError.value = void 0;
          validationError.property = void 0;
          validationError.children = [];
          validationError.constraints = { unknownValue: "an unknown value was passed to the validate function" };
          validationErrors.push(validationError);
          return;
        }
        if (this.validatorOptions && this.validatorOptions.whitelist)
          this.whitelist(object, groupedMetadatas, validationErrors);
        Object.keys(groupedMetadatas).forEach((propertyName) => {
          const value = object[propertyName];
          const definedMetadatas = groupedMetadatas[propertyName].filter((metadata) => metadata.type === ValidationTypes_1.ValidationTypes.IS_DEFINED);
          const metadatas = groupedMetadatas[propertyName].filter((metadata) => metadata.type !== ValidationTypes_1.ValidationTypes.IS_DEFINED && metadata.type !== ValidationTypes_1.ValidationTypes.WHITELIST);
          if (value instanceof Promise && metadatas.find((metadata) => metadata.type === ValidationTypes_1.ValidationTypes.PROMISE_VALIDATION)) {
            this.awaitingPromises.push(value.then((resolvedValue) => {
              this.performValidations(object, resolvedValue, propertyName, definedMetadatas, metadatas, validationErrors);
            }));
          } else {
            this.performValidations(object, value, propertyName, definedMetadatas, metadatas, validationErrors);
          }
        });
      }
      whitelist(object, groupedMetadatas, validationErrors) {
        const notAllowedProperties = [];
        Object.keys(object).forEach((propertyName) => {
          if (!groupedMetadatas[propertyName] || groupedMetadatas[propertyName].length === 0)
            notAllowedProperties.push(propertyName);
        });
        if (notAllowedProperties.length > 0) {
          if (this.validatorOptions && this.validatorOptions.forbidNonWhitelisted) {
            notAllowedProperties.forEach((property) => {
              const validationError = this.generateValidationError(object, object[property], property);
              validationError.constraints = { [ValidationTypes_1.ValidationTypes.WHITELIST]: `property ${property} should not exist` };
              validationError.children = void 0;
              validationErrors.push(validationError);
            });
          } else {
            notAllowedProperties.forEach((property) => delete object[property]);
          }
        }
      }
      stripEmptyErrors(errors) {
        return errors.filter((error) => {
          if (error.children) {
            error.children = this.stripEmptyErrors(error.children);
          }
          if (Object.keys(error.constraints).length === 0) {
            if (error.children.length === 0) {
              return false;
            } else {
              delete error.constraints;
            }
          }
          return true;
        });
      }
      performValidations(object, value, propertyName, definedMetadatas, metadatas, validationErrors) {
        const customValidationMetadatas = metadatas.filter((metadata) => metadata.type === ValidationTypes_1.ValidationTypes.CUSTOM_VALIDATION);
        const nestedValidationMetadatas = metadatas.filter((metadata) => metadata.type === ValidationTypes_1.ValidationTypes.NESTED_VALIDATION);
        const conditionalValidationMetadatas = metadatas.filter((metadata) => metadata.type === ValidationTypes_1.ValidationTypes.CONDITIONAL_VALIDATION);
        const validationError = this.generateValidationError(object, value, propertyName);
        validationErrors.push(validationError);
        const canValidate = this.conditionalValidations(object, value, conditionalValidationMetadatas);
        if (!canValidate) {
          return;
        }
        this.customValidations(object, value, definedMetadatas, validationError);
        this.mapContexts(object, value, definedMetadatas, validationError);
        if (value === void 0 && this.validatorOptions && this.validatorOptions.skipUndefinedProperties === true) {
          return;
        }
        if (value === null && this.validatorOptions && this.validatorOptions.skipNullProperties === true) {
          return;
        }
        if ((value === null || value === void 0) && this.validatorOptions && this.validatorOptions.skipMissingProperties === true) {
          return;
        }
        this.customValidations(object, value, customValidationMetadatas, validationError);
        this.nestedValidations(value, nestedValidationMetadatas, validationError.children);
        this.mapContexts(object, value, metadatas, validationError);
        this.mapContexts(object, value, customValidationMetadatas, validationError);
      }
      generateValidationError(object, value, propertyName) {
        const validationError = new ValidationError_1.ValidationError();
        if (!this.validatorOptions || !this.validatorOptions.validationError || this.validatorOptions.validationError.target === void 0 || this.validatorOptions.validationError.target === true)
          validationError.target = object;
        if (!this.validatorOptions || !this.validatorOptions.validationError || this.validatorOptions.validationError.value === void 0 || this.validatorOptions.validationError.value === true)
          validationError.value = value;
        validationError.property = propertyName;
        validationError.children = [];
        validationError.constraints = {};
        return validationError;
      }
      conditionalValidations(object, value, metadatas) {
        return metadatas.map((metadata) => metadata.constraints[0](object, value)).reduce((resultA, resultB) => resultA && resultB, true);
      }
      customValidations(object, value, metadatas, error) {
        metadatas.forEach((metadata) => {
          this.metadataStorage.getTargetValidatorConstraints(metadata.constraintCls).forEach((customConstraintMetadata) => {
            if (customConstraintMetadata.async && this.ignoreAsyncValidations)
              return;
            if (this.validatorOptions && this.validatorOptions.stopAtFirstError && Object.keys(error.constraints || {}).length > 0)
              return;
            const validationArguments = {
              targetName: object.constructor ? object.constructor.name : void 0,
              property: metadata.propertyName,
              object,
              value,
              constraints: metadata.constraints
            };
            if (!metadata.each || !(value instanceof Array || value instanceof Set || value instanceof Map)) {
              const validatedValue = customConstraintMetadata.instance.validate(value, validationArguments);
              if (utils_1.isPromise(validatedValue)) {
                const promise = validatedValue.then((isValid) => {
                  if (!isValid) {
                    const [type, message] = this.createValidationError(object, value, metadata, customConstraintMetadata);
                    error.constraints[type] = message;
                    if (metadata.context) {
                      if (!error.contexts) {
                        error.contexts = {};
                      }
                      error.contexts[type] = Object.assign(error.contexts[type] || {}, metadata.context);
                    }
                  }
                });
                this.awaitingPromises.push(promise);
              } else {
                if (!validatedValue) {
                  const [type, message] = this.createValidationError(object, value, metadata, customConstraintMetadata);
                  error.constraints[type] = message;
                }
              }
              return;
            }
            const arrayValue = utils_1.convertToArray(value);
            const validatedSubValues = arrayValue.map((subValue) => customConstraintMetadata.instance.validate(subValue, validationArguments));
            const validationIsAsync = validatedSubValues.some((validatedSubValue) => utils_1.isPromise(validatedSubValue));
            if (validationIsAsync) {
              const asyncValidatedSubValues = validatedSubValues.map((validatedSubValue) => utils_1.isPromise(validatedSubValue) ? validatedSubValue : Promise.resolve(validatedSubValue));
              const asyncValidationIsFinishedPromise = Promise.all(asyncValidatedSubValues).then((flatValidatedValues) => {
                const validationResult2 = flatValidatedValues.every((isValid) => isValid);
                if (!validationResult2) {
                  const [type, message] = this.createValidationError(object, value, metadata, customConstraintMetadata);
                  error.constraints[type] = message;
                  if (metadata.context) {
                    if (!error.contexts) {
                      error.contexts = {};
                    }
                    error.contexts[type] = Object.assign(error.contexts[type] || {}, metadata.context);
                  }
                }
              });
              this.awaitingPromises.push(asyncValidationIsFinishedPromise);
              return;
            }
            const validationResult = validatedSubValues.every((isValid) => isValid);
            if (!validationResult) {
              const [type, message] = this.createValidationError(object, value, metadata, customConstraintMetadata);
              error.constraints[type] = message;
            }
          });
        });
      }
      nestedValidations(value, metadatas, errors) {
        if (value === void 0) {
          return;
        }
        metadatas.forEach((metadata) => {
          if (metadata.type !== ValidationTypes_1.ValidationTypes.NESTED_VALIDATION && metadata.type !== ValidationTypes_1.ValidationTypes.PROMISE_VALIDATION) {
            return;
          }
          if (value instanceof Array || value instanceof Set || value instanceof Map) {
            const arrayLikeValue = value instanceof Set ? Array.from(value) : value;
            arrayLikeValue.forEach((subValue, index) => {
              this.performValidations(value, subValue, index.toString(), [], metadatas, errors);
            });
          } else if (value instanceof Object) {
            const targetSchema = typeof metadata.target === "string" ? metadata.target : metadata.target.name;
            this.execute(value, targetSchema, errors);
          } else {
            const error = new ValidationError_1.ValidationError();
            error.value = value;
            error.property = metadata.propertyName;
            error.target = metadata.target;
            const [type, message] = this.createValidationError(metadata.target, value, metadata);
            error.constraints = {
              [type]: message
            };
            errors.push(error);
          }
        });
      }
      mapContexts(object, value, metadatas, error) {
        return metadatas.forEach((metadata) => {
          if (metadata.context) {
            let customConstraint;
            if (metadata.type === ValidationTypes_1.ValidationTypes.CUSTOM_VALIDATION) {
              const customConstraints = this.metadataStorage.getTargetValidatorConstraints(metadata.constraintCls);
              customConstraint = customConstraints[0];
            }
            const type = this.getConstraintType(metadata, customConstraint);
            if (error.constraints[type]) {
              if (!error.contexts) {
                error.contexts = {};
              }
              error.contexts[type] = Object.assign(error.contexts[type] || {}, metadata.context);
            }
          }
        });
      }
      createValidationError(object, value, metadata, customValidatorMetadata) {
        const targetName = object.constructor ? object.constructor.name : void 0;
        const type = this.getConstraintType(metadata, customValidatorMetadata);
        const validationArguments = {
          targetName,
          property: metadata.propertyName,
          object,
          value,
          constraints: metadata.constraints
        };
        let message = metadata.message || "";
        if (!metadata.message && (!this.validatorOptions || this.validatorOptions && !this.validatorOptions.dismissDefaultMessages)) {
          if (customValidatorMetadata && customValidatorMetadata.instance.defaultMessage instanceof Function) {
            message = customValidatorMetadata.instance.defaultMessage(validationArguments);
          }
        }
        const messageString = ValidationUtils_1.ValidationUtils.replaceMessageSpecialTokens(message, validationArguments);
        return [type, messageString];
      }
      getConstraintType(metadata, customValidatorMetadata) {
        const type = customValidatorMetadata && customValidatorMetadata.name ? customValidatorMetadata.name : metadata.type;
        return type;
      }
    };
    exports.ValidationExecutor = ValidationExecutor;
  }
});

// node_modules/class-validator/cjs/validation/Validator.js
var require_Validator = __commonJS({
  "node_modules/class-validator/cjs/validation/Validator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Validator = void 0;
    var ValidationExecutor_1 = require_ValidationExecutor();
    var Validator = class {
      validate(objectOrSchemaName, objectOrValidationOptions, maybeValidatorOptions) {
        return this.coreValidate(objectOrSchemaName, objectOrValidationOptions, maybeValidatorOptions);
      }
      async validateOrReject(objectOrSchemaName, objectOrValidationOptions, maybeValidatorOptions) {
        const errors = await this.coreValidate(objectOrSchemaName, objectOrValidationOptions, maybeValidatorOptions);
        if (errors.length)
          return Promise.reject(errors);
      }
      validateSync(objectOrSchemaName, objectOrValidationOptions, maybeValidatorOptions) {
        const object = typeof objectOrSchemaName === "string" ? objectOrValidationOptions : objectOrSchemaName;
        const options = typeof objectOrSchemaName === "string" ? maybeValidatorOptions : objectOrValidationOptions;
        const schema = typeof objectOrSchemaName === "string" ? objectOrSchemaName : void 0;
        const executor = new ValidationExecutor_1.ValidationExecutor(this, options);
        executor.ignoreAsyncValidations = true;
        const validationErrors = [];
        executor.execute(object, schema, validationErrors);
        return executor.stripEmptyErrors(validationErrors);
      }
      coreValidate(objectOrSchemaName, objectOrValidationOptions, maybeValidatorOptions) {
        const object = typeof objectOrSchemaName === "string" ? objectOrValidationOptions : objectOrSchemaName;
        const options = typeof objectOrSchemaName === "string" ? maybeValidatorOptions : objectOrValidationOptions;
        const schema = typeof objectOrSchemaName === "string" ? objectOrSchemaName : void 0;
        const executor = new ValidationExecutor_1.ValidationExecutor(this, options);
        const validationErrors = [];
        executor.execute(object, schema, validationErrors);
        return Promise.all(executor.awaitingPromises).then(() => {
          return executor.stripEmptyErrors(validationErrors);
        });
      }
    };
    exports.Validator = Validator;
  }
});

// node_modules/class-validator/cjs/container.js
var require_container = __commonJS({
  "node_modules/class-validator/cjs/container.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getFromContainer = exports.useContainer = void 0;
    var defaultContainer = new class {
      constructor() {
        this.instances = [];
      }
      get(someClass) {
        let instance = this.instances.find((instance2) => instance2.type === someClass);
        if (!instance) {
          instance = { type: someClass, object: new someClass() };
          this.instances.push(instance);
        }
        return instance.object;
      }
    }();
    var userContainer;
    var userContainerOptions;
    function useContainer(iocContainer, options) {
      userContainer = iocContainer;
      userContainerOptions = options;
    }
    exports.useContainer = useContainer;
    function getFromContainer(someClass) {
      if (userContainer) {
        try {
          const instance = userContainer.get(someClass);
          if (instance)
            return instance;
          if (!userContainerOptions || !userContainerOptions.fallback)
            return instance;
        } catch (error) {
          if (!userContainerOptions || !userContainerOptions.fallbackOnErrors)
            throw error;
        }
      }
      return defaultContainer.get(someClass);
    }
    exports.getFromContainer = getFromContainer;
  }
});

// node_modules/class-validator/cjs/decorator/common/Allow.js
var require_Allow = __commonJS({
  "node_modules/class-validator/cjs/decorator/common/Allow.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Allow = void 0;
    var ValidationTypes_1 = require_ValidationTypes();
    var ValidationMetadata_1 = require_ValidationMetadata();
    var MetadataStorage_1 = require_MetadataStorage2();
    function Allow(validationOptions) {
      return function(object, propertyName) {
        const args = {
          type: ValidationTypes_1.ValidationTypes.WHITELIST,
          target: object.constructor,
          propertyName,
          validationOptions
        };
        MetadataStorage_1.getMetadataStorage().addValidationMetadata(new ValidationMetadata_1.ValidationMetadata(args));
      };
    }
    exports.Allow = Allow;
  }
});

// node_modules/class-validator/cjs/metadata/ConstraintMetadata.js
var require_ConstraintMetadata = __commonJS({
  "node_modules/class-validator/cjs/metadata/ConstraintMetadata.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ConstraintMetadata = void 0;
    var container_1 = require_container();
    var ConstraintMetadata = class {
      constructor(target, name2, async = false) {
        this.target = target;
        this.name = name2;
        this.async = async;
      }
      get instance() {
        return container_1.getFromContainer(this.target);
      }
    };
    exports.ConstraintMetadata = ConstraintMetadata;
  }
});

// node_modules/class-validator/cjs/register-decorator.js
var require_register_decorator = __commonJS({
  "node_modules/class-validator/cjs/register-decorator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.registerDecorator = void 0;
    var ConstraintMetadata_1 = require_ConstraintMetadata();
    var ValidationMetadata_1 = require_ValidationMetadata();
    var ValidationTypes_1 = require_ValidationTypes();
    var container_1 = require_container();
    var MetadataStorage_1 = require_MetadataStorage2();
    function registerDecorator(options) {
      let constraintCls;
      if (options.validator instanceof Function) {
        constraintCls = options.validator;
        const constraintClasses = container_1.getFromContainer(MetadataStorage_1.MetadataStorage).getTargetValidatorConstraints(options.validator);
        if (constraintClasses.length > 1) {
          throw `More than one implementation of ValidatorConstraintInterface found for validator on: ${options.target.name}:${options.propertyName}`;
        }
      } else {
        const validator = options.validator;
        constraintCls = class CustomConstraint {
          validate(value, validationArguments) {
            return validator.validate(value, validationArguments);
          }
          defaultMessage(validationArguments) {
            if (validator.defaultMessage) {
              return validator.defaultMessage(validationArguments);
            }
            return "";
          }
        };
        MetadataStorage_1.getMetadataStorage().addConstraintMetadata(new ConstraintMetadata_1.ConstraintMetadata(constraintCls, options.name, options.async));
      }
      const validationMetadataArgs = {
        type: options.name && ValidationTypes_1.ValidationTypes.isValid(options.name) ? options.name : ValidationTypes_1.ValidationTypes.CUSTOM_VALIDATION,
        target: options.target,
        propertyName: options.propertyName,
        validationOptions: options.options,
        constraintCls,
        constraints: options.constraints
      };
      MetadataStorage_1.getMetadataStorage().addValidationMetadata(new ValidationMetadata_1.ValidationMetadata(validationMetadataArgs));
    }
    exports.registerDecorator = registerDecorator;
  }
});

// node_modules/class-validator/cjs/decorator/common/ValidateBy.js
var require_ValidateBy = __commonJS({
  "node_modules/class-validator/cjs/decorator/common/ValidateBy.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ValidateBy = exports.buildMessage = void 0;
    var register_decorator_1 = require_register_decorator();
    function buildMessage(impl, validationOptions) {
      return (validationArguments) => {
        const eachPrefix = validationOptions && validationOptions.each ? "each value in " : "";
        return impl(eachPrefix, validationArguments);
      };
    }
    exports.buildMessage = buildMessage;
    function ValidateBy(options, validationOptions) {
      return function(object, propertyName) {
        register_decorator_1.registerDecorator({
          name: options.name,
          target: object.constructor,
          propertyName,
          options: validationOptions,
          constraints: options.constraints,
          validator: options.validator
        });
      };
    }
    exports.ValidateBy = ValidateBy;
  }
});

// node_modules/class-validator/cjs/decorator/common/IsDefined.js
var require_IsDefined = __commonJS({
  "node_modules/class-validator/cjs/decorator/common/IsDefined.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IsDefined = exports.isDefined = exports.IS_DEFINED = void 0;
    var ValidateBy_1 = require_ValidateBy();
    var ValidationTypes_1 = require_ValidationTypes();
    exports.IS_DEFINED = ValidationTypes_1.ValidationTypes.IS_DEFINED;
    function isDefined(value) {
      return value !== void 0 && value !== null;
    }
    exports.isDefined = isDefined;
    function IsDefined(validationOptions) {
      return ValidateBy_1.ValidateBy({
        name: exports.IS_DEFINED,
        validator: {
          validate: (value) => isDefined(value),
          defaultMessage: ValidateBy_1.buildMessage((eachPrefix) => eachPrefix + "$property should not be null or undefined", validationOptions)
        }
      }, validationOptions);
    }
    exports.IsDefined = IsDefined;
  }
});

// node_modules/class-validator/cjs/decorator/common/IsOptional.js
var require_IsOptional = __commonJS({
  "node_modules/class-validator/cjs/decorator/common/IsOptional.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IsOptional = void 0;
    var ValidationTypes_1 = require_ValidationTypes();
    var ValidationMetadata_1 = require_ValidationMetadata();
    var MetadataStorage_1 = require_MetadataStorage2();
    function IsOptional(validationOptions) {
      return function(object, propertyName) {
        const args = {
          type: ValidationTypes_1.ValidationTypes.CONDITIONAL_VALIDATION,
          target: object.constructor,
          propertyName,
          constraints: [
            (object2, value) => {
              return object2[propertyName] !== null && object2[propertyName] !== void 0;
            }
          ],
          validationOptions
        };
        MetadataStorage_1.getMetadataStorage().addValidationMetadata(new ValidationMetadata_1.ValidationMetadata(args));
      };
    }
    exports.IsOptional = IsOptional;
  }
});

// node_modules/class-validator/cjs/decorator/common/Validate.js
var require_Validate = __commonJS({
  "node_modules/class-validator/cjs/decorator/common/Validate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Validate = exports.ValidatorConstraint = void 0;
    var ValidationMetadata_1 = require_ValidationMetadata();
    var MetadataStorage_1 = require_MetadataStorage2();
    var ValidationTypes_1 = require_ValidationTypes();
    var ConstraintMetadata_1 = require_ConstraintMetadata();
    function ValidatorConstraint(options) {
      return function(target) {
        const isAsync = options && options.async;
        let name2 = options && options.name ? options.name : "";
        if (!name2) {
          name2 = target.name;
          if (!name2)
            name2 = name2.replace(/\.?([A-Z]+)/g, (x, y) => "_" + y.toLowerCase()).replace(/^_/, "");
        }
        const metadata = new ConstraintMetadata_1.ConstraintMetadata(target, name2, isAsync);
        MetadataStorage_1.getMetadataStorage().addConstraintMetadata(metadata);
      };
    }
    exports.ValidatorConstraint = ValidatorConstraint;
    function Validate2(constraintClass, constraintsOrValidationOptions, maybeValidationOptions) {
      return function(object, propertyName) {
        const args = {
          type: ValidationTypes_1.ValidationTypes.CUSTOM_VALIDATION,
          target: object.constructor,
          propertyName,
          constraintCls: constraintClass,
          constraints: constraintsOrValidationOptions instanceof Array ? constraintsOrValidationOptions : void 0,
          validationOptions: !(constraintsOrValidationOptions instanceof Array) ? constraintsOrValidationOptions : maybeValidationOptions
        };
        MetadataStorage_1.getMetadataStorage().addValidationMetadata(new ValidationMetadata_1.ValidationMetadata(args));
      };
    }
    exports.Validate = Validate2;
  }
});

// node_modules/class-validator/cjs/decorator/common/ValidateIf.js
var require_ValidateIf = __commonJS({
  "node_modules/class-validator/cjs/decorator/common/ValidateIf.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ValidateIf = void 0;
    var ValidationTypes_1 = require_ValidationTypes();
    var ValidationMetadata_1 = require_ValidationMetadata();
    var MetadataStorage_1 = require_MetadataStorage2();
    function ValidateIf(condition, validationOptions) {
      return function(object, propertyName) {
        const args = {
          type: ValidationTypes_1.ValidationTypes.CONDITIONAL_VALIDATION,
          target: object.constructor,
          propertyName,
          constraints: [condition],
          validationOptions
        };
        MetadataStorage_1.getMetadataStorage().addValidationMetadata(new ValidationMetadata_1.ValidationMetadata(args));
      };
    }
    exports.ValidateIf = ValidateIf;
  }
});

// node_modules/class-validator/cjs/decorator/common/ValidateNested.js
var require_ValidateNested = __commonJS({
  "node_modules/class-validator/cjs/decorator/common/ValidateNested.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ValidateNested = void 0;
    var ValidationTypes_1 = require_ValidationTypes();
    var ValidationMetadata_1 = require_ValidationMetadata();
    var MetadataStorage_1 = require_MetadataStorage2();
    function ValidateNested(validationOptions) {
      const opts = __spreadValues({}, validationOptions);
      const eachPrefix = opts.each ? "each value in " : "";
      opts.message = opts.message || eachPrefix + "nested property $property must be either object or array";
      return function(object, propertyName) {
        const args = {
          type: ValidationTypes_1.ValidationTypes.NESTED_VALIDATION,
          target: object.constructor,
          propertyName,
          validationOptions: opts
        };
        MetadataStorage_1.getMetadataStorage().addValidationMetadata(new ValidationMetadata_1.ValidationMetadata(args));
      };
    }
    exports.ValidateNested = ValidateNested;
  }
});

// node_modules/class-validator/cjs/decorator/common/ValidatePromise.js
var require_ValidatePromise = __commonJS({
  "node_modules/class-validator/cjs/decorator/common/ValidatePromise.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ValidatePromise = void 0;
    var ValidationTypes_1 = require_ValidationTypes();
    var ValidationMetadata_1 = require_ValidationMetadata();
    var MetadataStorage_1 = require_MetadataStorage2();
    function ValidatePromise(validationOptions) {
      return function(object, propertyName) {
        const args = {
          type: ValidationTypes_1.ValidationTypes.PROMISE_VALIDATION,
          target: object.constructor,
          propertyName,
          validationOptions
        };
        MetadataStorage_1.getMetadataStorage().addValidationMetadata(new ValidationMetadata_1.ValidationMetadata(args));
      };
    }
    exports.ValidatePromise = ValidatePromise;
  }
});

// node_modules/validator/lib/util/assertString.js
var require_assertString = __commonJS({
  "node_modules/validator/lib/util/assertString.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = assertString;
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    function assertString(input) {
      var isString2 = typeof input === "string" || input instanceof String;
      if (!isString2) {
        var invalidType = _typeof(input);
        if (input === null)
          invalidType = "null";
        else if (invalidType === "object")
          invalidType = input.constructor.name;
        throw new TypeError("Expected a string but received a ".concat(invalidType));
      }
    }
    module2.exports = exports.default;
    module2.exports.default = exports.default;
  }
});

// node_modules/validator/lib/util/merge.js
var require_merge = __commonJS({
  "node_modules/validator/lib/util/merge.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = merge;
    function merge() {
      var obj = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      var defaults = arguments.length > 1 ? arguments[1] : void 0;
      for (var key in defaults) {
        if (typeof obj[key] === "undefined") {
          obj[key] = defaults[key];
        }
      }
      return obj;
    }
    module2.exports = exports.default;
    module2.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isLatLong.js
var require_isLatLong = __commonJS({
  "node_modules/validator/lib/isLatLong.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isLatLong;
    var _assertString = _interopRequireDefault(require_assertString());
    var _merge = _interopRequireDefault(require_merge());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var lat = /^\(?[+-]?(90(\.0+)?|[1-8]?\d(\.\d+)?)$/;
    var long = /^\s?[+-]?(180(\.0+)?|1[0-7]\d(\.\d+)?|\d{1,2}(\.\d+)?)\)?$/;
    var latDMS = /^(([1-8]?\d)\D+([1-5]?\d|60)\D+([1-5]?\d|60)(\.\d+)?|90\D+0\D+0)\D+[NSns]?$/i;
    var longDMS = /^\s*([1-7]?\d{1,2}\D+([1-5]?\d|60)\D+([1-5]?\d|60)(\.\d+)?|180\D+0\D+0)\D+[EWew]?$/i;
    var defaultLatLongOptions = {
      checkDMS: false
    };
    function isLatLong(str, options) {
      (0, _assertString.default)(str);
      options = (0, _merge.default)(options, defaultLatLongOptions);
      if (!str.includes(","))
        return false;
      var pair = str.split(",");
      if (pair[0].startsWith("(") && !pair[1].endsWith(")") || pair[1].endsWith(")") && !pair[0].startsWith("("))
        return false;
      if (options.checkDMS) {
        return latDMS.test(pair[0]) && longDMS.test(pair[1]);
      }
      return lat.test(pair[0]) && long.test(pair[1]);
    }
    module2.exports = exports.default;
    module2.exports.default = exports.default;
  }
});

// node_modules/class-validator/cjs/decorator/common/IsLatLong.js
var require_IsLatLong = __commonJS({
  "node_modules/class-validator/cjs/decorator/common/IsLatLong.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IsLatLong = exports.isLatLong = exports.IS_LATLONG = void 0;
    var ValidateBy_1 = require_ValidateBy();
    var isLatLong_1 = __importDefault(require_isLatLong());
    exports.IS_LATLONG = "isLatLong";
    function isLatLong(value) {
      return typeof value === "string" && isLatLong_1.default(value);
    }
    exports.isLatLong = isLatLong;
    function IsLatLong(validationOptions) {
      return ValidateBy_1.ValidateBy({
        name: exports.IS_LATLONG,
        validator: {
          validate: (value, args) => isLatLong(value),
          defaultMessage: ValidateBy_1.buildMessage((eachPrefix) => eachPrefix + "$property must be a latitude,longitude string", validationOptions)
        }
      }, validationOptions);
    }
    exports.IsLatLong = IsLatLong;
  }
});

// node_modules/class-validator/cjs/decorator/common/IsLatitude.js
var require_IsLatitude = __commonJS({
  "node_modules/class-validator/cjs/decorator/common/IsLatitude.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IsLatitude = exports.isLatitude = exports.IS_LATITUDE = void 0;
    var ValidateBy_1 = require_ValidateBy();
    var IsLatLong_1 = require_IsLatLong();
    exports.IS_LATITUDE = "isLatitude";
    function isLatitude(value) {
      return (typeof value === "number" || typeof value === "string") && IsLatLong_1.isLatLong(`${value},0`);
    }
    exports.isLatitude = isLatitude;
    function IsLatitude(validationOptions) {
      return ValidateBy_1.ValidateBy({
        name: exports.IS_LATITUDE,
        validator: {
          validate: (value, args) => isLatitude(value),
          defaultMessage: ValidateBy_1.buildMessage((eachPrefix) => eachPrefix + "$property must be a latitude string or number", validationOptions)
        }
      }, validationOptions);
    }
    exports.IsLatitude = IsLatitude;
  }
});

// node_modules/class-validator/cjs/decorator/common/IsLongitude.js
var require_IsLongitude = __commonJS({
  "node_modules/class-validator/cjs/decorator/common/IsLongitude.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IsLongitude = exports.isLongitude = exports.IS_LONGITUDE = void 0;
    var ValidateBy_1 = require_ValidateBy();
    var IsLatLong_1 = require_IsLatLong();
    exports.IS_LONGITUDE = "isLongitude";
    function isLongitude(value) {
      return (typeof value === "number" || typeof value === "string") && IsLatLong_1.isLatLong(`0,${value}`);
    }
    exports.isLongitude = isLongitude;
    function IsLongitude(validationOptions) {
      return ValidateBy_1.ValidateBy({
        name: exports.IS_LONGITUDE,
        validator: {
          validate: (value, args) => isLongitude(value),
          defaultMessage: ValidateBy_1.buildMessage((eachPrefix) => eachPrefix + "$property must be a longitude string or number", validationOptions)
        }
      }, validationOptions);
    }
    exports.IsLongitude = IsLongitude;
  }
});

// node_modules/class-validator/cjs/decorator/common/Equals.js
var require_Equals = __commonJS({
  "node_modules/class-validator/cjs/decorator/common/Equals.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Equals = exports.equals = exports.EQUALS = void 0;
    var ValidateBy_1 = require_ValidateBy();
    exports.EQUALS = "equals";
    function equals(value, comparison) {
      return value === comparison;
    }
    exports.equals = equals;
    function Equals(comparison, validationOptions) {
      return ValidateBy_1.ValidateBy({
        name: exports.EQUALS,
        constraints: [comparison],
        validator: {
          validate: (value, args) => equals(value, args.constraints[0]),
          defaultMessage: ValidateBy_1.buildMessage((eachPrefix) => eachPrefix + "$property must be equal to $constraint1", validationOptions)
        }
      }, validationOptions);
    }
    exports.Equals = Equals;
  }
});

// node_modules/class-validator/cjs/decorator/common/NotEquals.js
var require_NotEquals = __commonJS({
  "node_modules/class-validator/cjs/decorator/common/NotEquals.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NotEquals = exports.notEquals = exports.NOT_EQUALS = void 0;
    var ValidateBy_1 = require_ValidateBy();
    exports.NOT_EQUALS = "notEquals";
    function notEquals(value, comparison) {
      return value !== comparison;
    }
    exports.notEquals = notEquals;
    function NotEquals(comparison, validationOptions) {
      return ValidateBy_1.ValidateBy({
        name: exports.NOT_EQUALS,
        constraints: [comparison],
        validator: {
          validate: (value, args) => notEquals(value, args.constraints[0]),
          defaultMessage: ValidateBy_1.buildMessage((eachPrefix) => eachPrefix + "$property should not be equal to $constraint1", validationOptions)
        }
      }, validationOptions);
    }
    exports.NotEquals = NotEquals;
  }
});

// node_modules/class-validator/cjs/decorator/common/IsEmpty.js
var require_IsEmpty = __commonJS({
  "node_modules/class-validator/cjs/decorator/common/IsEmpty.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IsEmpty = exports.isEmpty = exports.IS_EMPTY = void 0;
    var ValidateBy_1 = require_ValidateBy();
    exports.IS_EMPTY = "isEmpty";
    function isEmpty2(value) {
      return value === "" || value === null || value === void 0;
    }
    exports.isEmpty = isEmpty2;
    function IsEmpty(validationOptions) {
      return ValidateBy_1.ValidateBy({
        name: exports.IS_EMPTY,
        validator: {
          validate: (value, args) => isEmpty2(value),
          defaultMessage: ValidateBy_1.buildMessage((eachPrefix) => eachPrefix + "$property must be empty", validationOptions)
        }
      }, validationOptions);
    }
    exports.IsEmpty = IsEmpty;
  }
});

// node_modules/class-validator/cjs/decorator/common/IsNotEmpty.js
var require_IsNotEmpty = __commonJS({
  "node_modules/class-validator/cjs/decorator/common/IsNotEmpty.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IsNotEmpty = exports.isNotEmpty = exports.IS_NOT_EMPTY = void 0;
    var ValidateBy_1 = require_ValidateBy();
    exports.IS_NOT_EMPTY = "isNotEmpty";
    function isNotEmpty(value) {
      return value !== "" && value !== null && value !== void 0;
    }
    exports.isNotEmpty = isNotEmpty;
    function IsNotEmpty25(validationOptions) {
      return ValidateBy_1.ValidateBy({
        name: exports.IS_NOT_EMPTY,
        validator: {
          validate: (value, args) => isNotEmpty(value),
          defaultMessage: ValidateBy_1.buildMessage((eachPrefix) => eachPrefix + "$property should not be empty", validationOptions)
        }
      }, validationOptions);
    }
    exports.IsNotEmpty = IsNotEmpty25;
  }
});

// node_modules/class-validator/cjs/decorator/common/IsIn.js
var require_IsIn = __commonJS({
  "node_modules/class-validator/cjs/decorator/common/IsIn.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IsIn = exports.isIn = exports.IS_IN = void 0;
    var ValidateBy_1 = require_ValidateBy();
    exports.IS_IN = "isIn";
    function isIn(value, possibleValues) {
      return !(possibleValues instanceof Array) || possibleValues.some((possibleValue) => possibleValue === value);
    }
    exports.isIn = isIn;
    function IsIn(values, validationOptions) {
      return ValidateBy_1.ValidateBy({
        name: exports.IS_IN,
        constraints: [values],
        validator: {
          validate: (value, args) => isIn(value, args.constraints[0]),
          defaultMessage: ValidateBy_1.buildMessage((eachPrefix) => eachPrefix + "$property must be one of the following values: $constraint1", validationOptions)
        }
      }, validationOptions);
    }
    exports.IsIn = IsIn;
  }
});

// node_modules/class-validator/cjs/decorator/common/IsNotIn.js
var require_IsNotIn = __commonJS({
  "node_modules/class-validator/cjs/decorator/common/IsNotIn.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IsNotIn = exports.isNotIn = exports.IS_NOT_IN = void 0;
    var ValidateBy_1 = require_ValidateBy();
    exports.IS_NOT_IN = "isNotIn";
    function isNotIn(value, possibleValues) {
      return !(possibleValues instanceof Array) || !possibleValues.some((possibleValue) => possibleValue === value);
    }
    exports.isNotIn = isNotIn;
    function IsNotIn(values, validationOptions) {
      return ValidateBy_1.ValidateBy({
        name: exports.IS_NOT_IN,
        constraints: [values],
        validator: {
          validate: (value, args) => isNotIn(value, args.constraints[0]),
          defaultMessage: ValidateBy_1.buildMessage((eachPrefix) => eachPrefix + "$property should not be one of the following values: $constraint1", validationOptions)
        }
      }, validationOptions);
    }
    exports.IsNotIn = IsNotIn;
  }
});

// node_modules/validator/lib/alpha.js
var require_alpha = __commonJS({
  "node_modules/validator/lib/alpha.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.commaDecimal = exports.dotDecimal = exports.farsiLocales = exports.arabicLocales = exports.englishLocales = exports.decimal = exports.alphanumeric = exports.alpha = void 0;
    var alpha = {
      "en-US": /^[A-Z]+$/i,
      "az-AZ": /^[A-VXYZÇƏĞİıÖŞÜ]+$/i,
      "bg-BG": /^[А-Я]+$/i,
      "cs-CZ": /^[A-ZÁČĎÉĚÍŇÓŘŠŤÚŮÝŽ]+$/i,
      "da-DK": /^[A-ZÆØÅ]+$/i,
      "de-DE": /^[A-ZÄÖÜß]+$/i,
      "el-GR": /^[Α-ώ]+$/i,
      "es-ES": /^[A-ZÁÉÍÑÓÚÜ]+$/i,
      "fa-IR": /^[ابپتثجچحخدذرزژسشصضطظعغفقکگلمنوهی]+$/i,
      "fi-FI": /^[A-ZÅÄÖ]+$/i,
      "fr-FR": /^[A-ZÀÂÆÇÉÈÊËÏÎÔŒÙÛÜŸ]+$/i,
      "it-IT": /^[A-ZÀÉÈÌÎÓÒÙ]+$/i,
      "nb-NO": /^[A-ZÆØÅ]+$/i,
      "nl-NL": /^[A-ZÁÉËÏÓÖÜÚ]+$/i,
      "nn-NO": /^[A-ZÆØÅ]+$/i,
      "hu-HU": /^[A-ZÁÉÍÓÖŐÚÜŰ]+$/i,
      "pl-PL": /^[A-ZĄĆĘŚŁŃÓŻŹ]+$/i,
      "pt-PT": /^[A-ZÃÁÀÂÄÇÉÊËÍÏÕÓÔÖÚÜ]+$/i,
      "ru-RU": /^[А-ЯЁ]+$/i,
      "sl-SI": /^[A-ZČĆĐŠŽ]+$/i,
      "sk-SK": /^[A-ZÁČĎÉÍŇÓŠŤÚÝŽĹŔĽÄÔ]+$/i,
      "sr-RS@latin": /^[A-ZČĆŽŠĐ]+$/i,
      "sr-RS": /^[А-ЯЂЈЉЊЋЏ]+$/i,
      "sv-SE": /^[A-ZÅÄÖ]+$/i,
      "th-TH": /^[ก-๐\s]+$/i,
      "tr-TR": /^[A-ZÇĞİıÖŞÜ]+$/i,
      "uk-UA": /^[А-ЩЬЮЯЄIЇҐі]+$/i,
      "vi-VN": /^[A-ZÀÁẠẢÃÂẦẤẬẨẪĂẰẮẶẲẴĐÈÉẸẺẼÊỀẾỆỂỄÌÍỊỈĨÒÓỌỎÕÔỒỐỘỔỖƠỜỚỢỞỠÙÚỤỦŨƯỪỨỰỬỮỲÝỴỶỸ]+$/i,
      "ku-IQ": /^[ئابپتجچحخدرڕزژسشعغفڤقکگلڵمنوۆھەیێيطؤثآإأكضصةظذ]+$/i,
      ar: /^[ءآأؤإئابةتثجحخدذرزسشصضطظعغفقكلمنهوىيًٌٍَُِّْٰ]+$/,
      he: /^[א-ת]+$/,
      fa: /^['آاءأؤئبپتثجچحخدذرزژسشصضطظعغفقکگلمنوهةی']+$/i,
      "hi-IN": /^[\u0900-\u0961]+[\u0972-\u097F]*$/i
    };
    exports.alpha = alpha;
    var alphanumeric = {
      "en-US": /^[0-9A-Z]+$/i,
      "az-AZ": /^[0-9A-VXYZÇƏĞİıÖŞÜ]+$/i,
      "bg-BG": /^[0-9А-Я]+$/i,
      "cs-CZ": /^[0-9A-ZÁČĎÉĚÍŇÓŘŠŤÚŮÝŽ]+$/i,
      "da-DK": /^[0-9A-ZÆØÅ]+$/i,
      "de-DE": /^[0-9A-ZÄÖÜß]+$/i,
      "el-GR": /^[0-9Α-ω]+$/i,
      "es-ES": /^[0-9A-ZÁÉÍÑÓÚÜ]+$/i,
      "fi-FI": /^[0-9A-ZÅÄÖ]+$/i,
      "fr-FR": /^[0-9A-ZÀÂÆÇÉÈÊËÏÎÔŒÙÛÜŸ]+$/i,
      "it-IT": /^[0-9A-ZÀÉÈÌÎÓÒÙ]+$/i,
      "hu-HU": /^[0-9A-ZÁÉÍÓÖŐÚÜŰ]+$/i,
      "nb-NO": /^[0-9A-ZÆØÅ]+$/i,
      "nl-NL": /^[0-9A-ZÁÉËÏÓÖÜÚ]+$/i,
      "nn-NO": /^[0-9A-ZÆØÅ]+$/i,
      "pl-PL": /^[0-9A-ZĄĆĘŚŁŃÓŻŹ]+$/i,
      "pt-PT": /^[0-9A-ZÃÁÀÂÄÇÉÊËÍÏÕÓÔÖÚÜ]+$/i,
      "ru-RU": /^[0-9А-ЯЁ]+$/i,
      "sl-SI": /^[0-9A-ZČĆĐŠŽ]+$/i,
      "sk-SK": /^[0-9A-ZÁČĎÉÍŇÓŠŤÚÝŽĹŔĽÄÔ]+$/i,
      "sr-RS@latin": /^[0-9A-ZČĆŽŠĐ]+$/i,
      "sr-RS": /^[0-9А-ЯЂЈЉЊЋЏ]+$/i,
      "sv-SE": /^[0-9A-ZÅÄÖ]+$/i,
      "th-TH": /^[ก-๙\s]+$/i,
      "tr-TR": /^[0-9A-ZÇĞİıÖŞÜ]+$/i,
      "uk-UA": /^[0-9А-ЩЬЮЯЄIЇҐі]+$/i,
      "ku-IQ": /^[٠١٢٣٤٥٦٧٨٩0-9ئابپتجچحخدرڕزژسشعغفڤقکگلڵمنوۆھەیێيطؤثآإأكضصةظذ]+$/i,
      "vi-VN": /^[0-9A-ZÀÁẠẢÃÂẦẤẬẨẪĂẰẮẶẲẴĐÈÉẸẺẼÊỀẾỆỂỄÌÍỊỈĨÒÓỌỎÕÔỒỐỘỔỖƠỜỚỢỞỠÙÚỤỦŨƯỪỨỰỬỮỲÝỴỶỸ]+$/i,
      ar: /^[٠١٢٣٤٥٦٧٨٩0-9ءآأؤإئابةتثجحخدذرزسشصضطظعغفقكلمنهوىيًٌٍَُِّْٰ]+$/,
      he: /^[0-9א-ת]+$/,
      fa: /^['0-9آاءأؤئبپتثجچحخدذرزژسشصضطظعغفقکگلمنوهةی۱۲۳۴۵۶۷۸۹۰']+$/i,
      "hi-IN": /^[\u0900-\u0963]+[\u0966-\u097F]*$/i
    };
    exports.alphanumeric = alphanumeric;
    var decimal = {
      "en-US": ".",
      ar: "\u066B"
    };
    exports.decimal = decimal;
    var englishLocales = ["AU", "GB", "HK", "IN", "NZ", "ZA", "ZM"];
    exports.englishLocales = englishLocales;
    for (i = 0; i < englishLocales.length; i++) {
      locale = "en-".concat(englishLocales[i]);
      alpha[locale] = alpha["en-US"];
      alphanumeric[locale] = alphanumeric["en-US"];
      decimal[locale] = decimal["en-US"];
    }
    var locale;
    var i;
    var arabicLocales = ["AE", "BH", "DZ", "EG", "IQ", "JO", "KW", "LB", "LY", "MA", "QM", "QA", "SA", "SD", "SY", "TN", "YE"];
    exports.arabicLocales = arabicLocales;
    for (_i = 0; _i < arabicLocales.length; _i++) {
      _locale = "ar-".concat(arabicLocales[_i]);
      alpha[_locale] = alpha.ar;
      alphanumeric[_locale] = alphanumeric.ar;
      decimal[_locale] = decimal.ar;
    }
    var _locale;
    var _i;
    var farsiLocales = ["IR", "AF"];
    exports.farsiLocales = farsiLocales;
    for (_i2 = 0; _i2 < farsiLocales.length; _i2++) {
      _locale2 = "fa-".concat(farsiLocales[_i2]);
      alphanumeric[_locale2] = alphanumeric.fa;
      decimal[_locale2] = decimal.ar;
    }
    var _locale2;
    var _i2;
    var dotDecimal = ["ar-EG", "ar-LB", "ar-LY"];
    exports.dotDecimal = dotDecimal;
    var commaDecimal = ["bg-BG", "cs-CZ", "da-DK", "de-DE", "el-GR", "en-ZM", "es-ES", "fr-CA", "fr-FR", "id-ID", "it-IT", "ku-IQ", "hi-IN", "hu-HU", "nb-NO", "nn-NO", "nl-NL", "pl-PL", "pt-PT", "ru-RU", "sl-SI", "sr-RS@latin", "sr-RS", "sv-SE", "tr-TR", "uk-UA", "vi-VN"];
    exports.commaDecimal = commaDecimal;
    for (_i3 = 0; _i3 < dotDecimal.length; _i3++) {
      decimal[dotDecimal[_i3]] = decimal["en-US"];
    }
    var _i3;
    for (_i4 = 0; _i4 < commaDecimal.length; _i4++) {
      decimal[commaDecimal[_i4]] = ",";
    }
    var _i4;
    alpha["fr-CA"] = alpha["fr-FR"];
    alphanumeric["fr-CA"] = alphanumeric["fr-FR"];
    alpha["pt-BR"] = alpha["pt-PT"];
    alphanumeric["pt-BR"] = alphanumeric["pt-PT"];
    decimal["pt-BR"] = decimal["pt-PT"];
    alpha["pl-Pl"] = alpha["pl-PL"];
    alphanumeric["pl-Pl"] = alphanumeric["pl-PL"];
    decimal["pl-Pl"] = decimal["pl-PL"];
    alpha["fa-AF"] = alpha.fa;
  }
});

// node_modules/validator/lib/isFloat.js
var require_isFloat = __commonJS({
  "node_modules/validator/lib/isFloat.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isFloat;
    exports.locales = void 0;
    var _assertString = _interopRequireDefault(require_assertString());
    var _alpha = require_alpha();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function isFloat(str, options) {
      (0, _assertString.default)(str);
      options = options || {};
      var float = new RegExp("^(?:[-+])?(?:[0-9]+)?(?:\\".concat(options.locale ? _alpha.decimal[options.locale] : ".", "[0-9]*)?(?:[eE][\\+\\-]?(?:[0-9]+))?$"));
      if (str === "" || str === "." || str === "-" || str === "+") {
        return false;
      }
      var value = parseFloat(str.replace(",", "."));
      return float.test(str) && (!options.hasOwnProperty("min") || value >= options.min) && (!options.hasOwnProperty("max") || value <= options.max) && (!options.hasOwnProperty("lt") || value < options.lt) && (!options.hasOwnProperty("gt") || value > options.gt);
    }
    var locales = Object.keys(_alpha.decimal);
    exports.locales = locales;
  }
});

// node_modules/validator/lib/toFloat.js
var require_toFloat = __commonJS({
  "node_modules/validator/lib/toFloat.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = toFloat;
    var _isFloat = _interopRequireDefault(require_isFloat());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function toFloat(str) {
      if (!(0, _isFloat.default)(str))
        return NaN;
      return parseFloat(str);
    }
    module2.exports = exports.default;
    module2.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isDivisibleBy.js
var require_isDivisibleBy = __commonJS({
  "node_modules/validator/lib/isDivisibleBy.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isDivisibleBy;
    var _assertString = _interopRequireDefault(require_assertString());
    var _toFloat = _interopRequireDefault(require_toFloat());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function isDivisibleBy(str, num) {
      (0, _assertString.default)(str);
      return (0, _toFloat.default)(str) % parseInt(num, 10) === 0;
    }
    module2.exports = exports.default;
    module2.exports.default = exports.default;
  }
});

// node_modules/class-validator/cjs/decorator/number/IsDivisibleBy.js
var require_IsDivisibleBy = __commonJS({
  "node_modules/class-validator/cjs/decorator/number/IsDivisibleBy.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IsDivisibleBy = exports.isDivisibleBy = exports.IS_DIVISIBLE_BY = void 0;
    var ValidateBy_1 = require_ValidateBy();
    var isDivisibleBy_1 = __importDefault(require_isDivisibleBy());
    exports.IS_DIVISIBLE_BY = "isDivisibleBy";
    function isDivisibleBy(value, num) {
      return typeof value === "number" && typeof num === "number" && isDivisibleBy_1.default(String(value), num);
    }
    exports.isDivisibleBy = isDivisibleBy;
    function IsDivisibleBy(num, validationOptions) {
      return ValidateBy_1.ValidateBy({
        name: exports.IS_DIVISIBLE_BY,
        constraints: [num],
        validator: {
          validate: (value, args) => isDivisibleBy(value, args.constraints[0]),
          defaultMessage: ValidateBy_1.buildMessage((eachPrefix) => eachPrefix + "$property must be divisible by $constraint1", validationOptions)
        }
      }, validationOptions);
    }
    exports.IsDivisibleBy = IsDivisibleBy;
  }
});

// node_modules/class-validator/cjs/decorator/number/IsPositive.js
var require_IsPositive = __commonJS({
  "node_modules/class-validator/cjs/decorator/number/IsPositive.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IsPositive = exports.isPositive = exports.IS_POSITIVE = void 0;
    var ValidateBy_1 = require_ValidateBy();
    exports.IS_POSITIVE = "isPositive";
    function isPositive(value) {
      return typeof value === "number" && value > 0;
    }
    exports.isPositive = isPositive;
    function IsPositive(validationOptions) {
      return ValidateBy_1.ValidateBy({
        name: exports.IS_POSITIVE,
        validator: {
          validate: (value, args) => isPositive(value),
          defaultMessage: ValidateBy_1.buildMessage((eachPrefix) => eachPrefix + "$property must be a positive number", validationOptions)
        }
      }, validationOptions);
    }
    exports.IsPositive = IsPositive;
  }
});

// node_modules/class-validator/cjs/decorator/number/IsNegative.js
var require_IsNegative = __commonJS({
  "node_modules/class-validator/cjs/decorator/number/IsNegative.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IsNegative = exports.isNegative = exports.IS_NEGATIVE = void 0;
    var ValidateBy_1 = require_ValidateBy();
    exports.IS_NEGATIVE = "isNegative";
    function isNegative(value) {
      return typeof value === "number" && value < 0;
    }
    exports.isNegative = isNegative;
    function IsNegative(validationOptions) {
      return ValidateBy_1.ValidateBy({
        name: exports.IS_NEGATIVE,
        validator: {
          validate: (value, args) => isNegative(value),
          defaultMessage: ValidateBy_1.buildMessage((eachPrefix) => eachPrefix + "$property must be a negative number", validationOptions)
        }
      }, validationOptions);
    }
    exports.IsNegative = IsNegative;
  }
});

// node_modules/class-validator/cjs/decorator/number/Max.js
var require_Max = __commonJS({
  "node_modules/class-validator/cjs/decorator/number/Max.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Max = exports.max = exports.MAX = void 0;
    var ValidateBy_1 = require_ValidateBy();
    exports.MAX = "max";
    function max(num, max2) {
      return typeof num === "number" && typeof max2 === "number" && num <= max2;
    }
    exports.max = max;
    function Max(maxValue, validationOptions) {
      return ValidateBy_1.ValidateBy({
        name: exports.MAX,
        constraints: [maxValue],
        validator: {
          validate: (value, args) => max(value, args.constraints[0]),
          defaultMessage: ValidateBy_1.buildMessage((eachPrefix) => eachPrefix + "$property must not be greater than $constraint1", validationOptions)
        }
      }, validationOptions);
    }
    exports.Max = Max;
  }
});

// node_modules/class-validator/cjs/decorator/number/Min.js
var require_Min = __commonJS({
  "node_modules/class-validator/cjs/decorator/number/Min.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Min = exports.min = exports.MIN = void 0;
    var ValidateBy_1 = require_ValidateBy();
    exports.MIN = "min";
    function min(num, min2) {
      return typeof num === "number" && typeof min2 === "number" && num >= min2;
    }
    exports.min = min;
    function Min(minValue, validationOptions) {
      return ValidateBy_1.ValidateBy({
        name: exports.MIN,
        constraints: [minValue],
        validator: {
          validate: (value, args) => min(value, args.constraints[0]),
          defaultMessage: ValidateBy_1.buildMessage((eachPrefix) => eachPrefix + "$property must not be less than $constraint1", validationOptions)
        }
      }, validationOptions);
    }
    exports.Min = Min;
  }
});

// node_modules/class-validator/cjs/decorator/date/MinDate.js
var require_MinDate = __commonJS({
  "node_modules/class-validator/cjs/decorator/date/MinDate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MinDate = exports.minDate = exports.MIN_DATE = void 0;
    var ValidateBy_1 = require_ValidateBy();
    exports.MIN_DATE = "minDate";
    function minDate(date, minDate2) {
      return date instanceof Date && date.getTime() >= minDate2.getTime();
    }
    exports.minDate = minDate;
    function MinDate(date, validationOptions) {
      return ValidateBy_1.ValidateBy({
        name: exports.MIN_DATE,
        constraints: [date],
        validator: {
          validate: (value, args) => minDate(value, args.constraints[0]),
          defaultMessage: ValidateBy_1.buildMessage((eachPrefix) => "minimal allowed date for " + eachPrefix + "$property is $constraint1", validationOptions)
        }
      }, validationOptions);
    }
    exports.MinDate = MinDate;
  }
});

// node_modules/class-validator/cjs/decorator/date/MaxDate.js
var require_MaxDate = __commonJS({
  "node_modules/class-validator/cjs/decorator/date/MaxDate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MaxDate = exports.maxDate = exports.MAX_DATE = void 0;
    var ValidateBy_1 = require_ValidateBy();
    exports.MAX_DATE = "maxDate";
    function maxDate(date, maxDate2) {
      return date instanceof Date && date.getTime() <= maxDate2.getTime();
    }
    exports.maxDate = maxDate;
    function MaxDate(date, validationOptions) {
      return ValidateBy_1.ValidateBy({
        name: exports.MAX_DATE,
        constraints: [date],
        validator: {
          validate: (value, args) => maxDate(value, args.constraints[0]),
          defaultMessage: ValidateBy_1.buildMessage((eachPrefix) => "maximal allowed date for " + eachPrefix + "$property is $constraint1", validationOptions)
        }
      }, validationOptions);
    }
    exports.MaxDate = MaxDate;
  }
});

// node_modules/validator/lib/util/toString.js
var require_toString = __commonJS({
  "node_modules/validator/lib/util/toString.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = toString;
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    function toString(input) {
      if (_typeof(input) === "object" && input !== null) {
        if (typeof input.toString === "function") {
          input = input.toString();
        } else {
          input = "[object Object]";
        }
      } else if (input === null || typeof input === "undefined" || isNaN(input) && !input.length) {
        input = "";
      }
      return String(input);
    }
    module2.exports = exports.default;
    module2.exports.default = exports.default;
  }
});

// node_modules/validator/lib/contains.js
var require_contains = __commonJS({
  "node_modules/validator/lib/contains.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = contains;
    var _assertString = _interopRequireDefault(require_assertString());
    var _toString = _interopRequireDefault(require_toString());
    var _merge = _interopRequireDefault(require_merge());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var defaulContainsOptions = {
      ignoreCase: false,
      minOccurrences: 1
    };
    function contains(str, elem, options) {
      (0, _assertString.default)(str);
      options = (0, _merge.default)(options, defaulContainsOptions);
      if (options.ignoreCase) {
        return str.toLowerCase().split((0, _toString.default)(elem).toLowerCase()).length > options.minOccurrences;
      }
      return str.split((0, _toString.default)(elem)).length > options.minOccurrences;
    }
    module2.exports = exports.default;
    module2.exports.default = exports.default;
  }
});

// node_modules/class-validator/cjs/decorator/string/Contains.js
var require_Contains = __commonJS({
  "node_modules/class-validator/cjs/decorator/string/Contains.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Contains = exports.contains = exports.CONTAINS = void 0;
    var ValidateBy_1 = require_ValidateBy();
    var contains_1 = __importDefault(require_contains());
    exports.CONTAINS = "contains";
    function contains(value, seed) {
      return typeof value === "string" && contains_1.default(value, seed);
    }
    exports.contains = contains;
    function Contains(seed, validationOptions) {
      return ValidateBy_1.ValidateBy({
        name: exports.CONTAINS,
        constraints: [seed],
        validator: {
          validate: (value, args) => contains(value, args.constraints[0]),
          defaultMessage: ValidateBy_1.buildMessage((eachPrefix) => eachPrefix + "$property must contain a $constraint1 string", validationOptions)
        }
      }, validationOptions);
    }
    exports.Contains = Contains;
  }
});

// node_modules/class-validator/cjs/decorator/string/NotContains.js
var require_NotContains = __commonJS({
  "node_modules/class-validator/cjs/decorator/string/NotContains.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NotContains = exports.notContains = exports.NOT_CONTAINS = void 0;
    var ValidateBy_1 = require_ValidateBy();
    var contains_1 = __importDefault(require_contains());
    exports.NOT_CONTAINS = "notContains";
    function notContains(value, seed) {
      return typeof value === "string" && !contains_1.default(value, seed);
    }
    exports.notContains = notContains;
    function NotContains(seed, validationOptions) {
      return ValidateBy_1.ValidateBy({
        name: exports.NOT_CONTAINS,
        constraints: [seed],
        validator: {
          validate: (value, args) => notContains(value, args.constraints[0]),
          defaultMessage: ValidateBy_1.buildMessage((eachPrefix) => eachPrefix + "$property should not contain a $constraint1 string", validationOptions)
        }
      }, validationOptions);
    }
    exports.NotContains = NotContains;
  }
});

// node_modules/validator/lib/isAlpha.js
var require_isAlpha = __commonJS({
  "node_modules/validator/lib/isAlpha.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isAlpha;
    exports.locales = void 0;
    var _assertString = _interopRequireDefault(require_assertString());
    var _alpha = require_alpha();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function isAlpha(_str) {
      var locale = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "en-US";
      var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
      (0, _assertString.default)(_str);
      var str = _str;
      var ignore = options.ignore;
      if (ignore) {
        if (ignore instanceof RegExp) {
          str = str.replace(ignore, "");
        } else if (typeof ignore === "string") {
          str = str.replace(new RegExp("[".concat(ignore.replace(/[-[\]{}()*+?.,\\^$|#\\s]/g, "\\$&"), "]"), "g"), "");
        } else {
          throw new Error("ignore should be instance of a String or RegExp");
        }
      }
      if (locale in _alpha.alpha) {
        return _alpha.alpha[locale].test(str);
      }
      throw new Error("Invalid locale '".concat(locale, "'"));
    }
    var locales = Object.keys(_alpha.alpha);
    exports.locales = locales;
  }
});

// node_modules/class-validator/cjs/decorator/string/IsAlpha.js
var require_IsAlpha = __commonJS({
  "node_modules/class-validator/cjs/decorator/string/IsAlpha.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IsAlpha = exports.isAlpha = exports.IS_ALPHA = void 0;
    var ValidateBy_1 = require_ValidateBy();
    var isAlpha_1 = __importDefault(require_isAlpha());
    exports.IS_ALPHA = "isAlpha";
    function isAlpha(value, locale) {
      return typeof value === "string" && isAlpha_1.default(value, locale);
    }
    exports.isAlpha = isAlpha;
    function IsAlpha(locale, validationOptions) {
      return ValidateBy_1.ValidateBy({
        name: exports.IS_ALPHA,
        constraints: [locale],
        validator: {
          validate: (value, args) => isAlpha(value, args.constraints[0]),
          defaultMessage: ValidateBy_1.buildMessage((eachPrefix) => eachPrefix + "$property must contain only letters (a-zA-Z)", validationOptions)
        }
      }, validationOptions);
    }
    exports.IsAlpha = IsAlpha;
  }
});

// node_modules/validator/lib/isAlphanumeric.js
var require_isAlphanumeric = __commonJS({
  "node_modules/validator/lib/isAlphanumeric.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isAlphanumeric;
    exports.locales = void 0;
    var _assertString = _interopRequireDefault(require_assertString());
    var _alpha = require_alpha();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function isAlphanumeric(_str) {
      var locale = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "en-US";
      var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
      (0, _assertString.default)(_str);
      var str = _str;
      var ignore = options.ignore;
      if (ignore) {
        if (ignore instanceof RegExp) {
          str = str.replace(ignore, "");
        } else if (typeof ignore === "string") {
          str = str.replace(new RegExp("[".concat(ignore.replace(/[-[\]{}()*+?.,\\^$|#\\s]/g, "\\$&"), "]"), "g"), "");
        } else {
          throw new Error("ignore should be instance of a String or RegExp");
        }
      }
      if (locale in _alpha.alphanumeric) {
        return _alpha.alphanumeric[locale].test(str);
      }
      throw new Error("Invalid locale '".concat(locale, "'"));
    }
    var locales = Object.keys(_alpha.alphanumeric);
    exports.locales = locales;
  }
});

// node_modules/class-validator/cjs/decorator/string/IsAlphanumeric.js
var require_IsAlphanumeric = __commonJS({
  "node_modules/class-validator/cjs/decorator/string/IsAlphanumeric.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IsAlphanumeric = exports.isAlphanumeric = exports.IS_ALPHANUMERIC = void 0;
    var ValidateBy_1 = require_ValidateBy();
    var isAlphanumeric_1 = __importDefault(require_isAlphanumeric());
    exports.IS_ALPHANUMERIC = "isAlphanumeric";
    function isAlphanumeric(value, locale) {
      return typeof value === "string" && isAlphanumeric_1.default(value, locale);
    }
    exports.isAlphanumeric = isAlphanumeric;
    function IsAlphanumeric(locale, validationOptions) {
      return ValidateBy_1.ValidateBy({
        name: exports.IS_ALPHANUMERIC,
        constraints: [locale],
        validator: {
          validate: (value, args) => isAlphanumeric(value, args.constraints[0]),
          defaultMessage: ValidateBy_1.buildMessage((eachPrefix) => eachPrefix + "$property must contain only letters and numbers", validationOptions)
        }
      }, validationOptions);
    }
    exports.IsAlphanumeric = IsAlphanumeric;
  }
});

// node_modules/validator/lib/util/includes.js
var require_includes = __commonJS({
  "node_modules/validator/lib/util/includes.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var includes = function includes2(arr, val) {
      return arr.some(function(arrVal) {
        return val === arrVal;
      });
    };
    var _default = includes;
    exports.default = _default;
    module2.exports = exports.default;
    module2.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isDecimal.js
var require_isDecimal = __commonJS({
  "node_modules/validator/lib/isDecimal.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isDecimal;
    var _merge = _interopRequireDefault(require_merge());
    var _assertString = _interopRequireDefault(require_assertString());
    var _includes = _interopRequireDefault(require_includes());
    var _alpha = require_alpha();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function decimalRegExp(options) {
      var regExp = new RegExp("^[-+]?([0-9]+)?(\\".concat(_alpha.decimal[options.locale], "[0-9]{").concat(options.decimal_digits, "})").concat(options.force_decimal ? "" : "?", "$"));
      return regExp;
    }
    var default_decimal_options = {
      force_decimal: false,
      decimal_digits: "1,",
      locale: "en-US"
    };
    var blacklist = ["", "-", "+"];
    function isDecimal(str, options) {
      (0, _assertString.default)(str);
      options = (0, _merge.default)(options, default_decimal_options);
      if (options.locale in _alpha.decimal) {
        return !(0, _includes.default)(blacklist, str.replace(/ /g, "")) && decimalRegExp(options).test(str);
      }
      throw new Error("Invalid locale '".concat(options.locale, "'"));
    }
    module2.exports = exports.default;
    module2.exports.default = exports.default;
  }
});

// node_modules/class-validator/cjs/decorator/string/IsDecimal.js
var require_IsDecimal = __commonJS({
  "node_modules/class-validator/cjs/decorator/string/IsDecimal.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IsDecimal = exports.isDecimal = exports.IS_DECIMAL = void 0;
    var ValidateBy_1 = require_ValidateBy();
    var isDecimal_1 = __importDefault(require_isDecimal());
    exports.IS_DECIMAL = "isDecimal";
    function isDecimal(value, options) {
      return typeof value === "string" && isDecimal_1.default(value, options);
    }
    exports.isDecimal = isDecimal;
    function IsDecimal(options, validationOptions) {
      return ValidateBy_1.ValidateBy({
        name: exports.IS_DECIMAL,
        constraints: [options],
        validator: {
          validate: (value, args) => isDecimal(value, args.constraints[0]),
          defaultMessage: ValidateBy_1.buildMessage((eachPrefix) => eachPrefix + "$property is not a valid decimal number.", validationOptions)
        }
      }, validationOptions);
    }
    exports.IsDecimal = IsDecimal;
  }
});

// node_modules/validator/lib/isAscii.js
var require_isAscii = __commonJS({
  "node_modules/validator/lib/isAscii.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isAscii;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var ascii = /^[\x00-\x7F]+$/;
    function isAscii(str) {
      (0, _assertString.default)(str);
      return ascii.test(str);
    }
    module2.exports = exports.default;
    module2.exports.default = exports.default;
  }
});

// node_modules/class-validator/cjs/decorator/string/IsAscii.js
var require_IsAscii = __commonJS({
  "node_modules/class-validator/cjs/decorator/string/IsAscii.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IsAscii = exports.isAscii = exports.IS_ASCII = void 0;
    var ValidateBy_1 = require_ValidateBy();
    var isAscii_1 = __importDefault(require_isAscii());
    exports.IS_ASCII = "isAscii";
    function isAscii(value) {
      return typeof value === "string" && isAscii_1.default(value);
    }
    exports.isAscii = isAscii;
    function IsAscii(validationOptions) {
      return ValidateBy_1.ValidateBy({
        name: exports.IS_ASCII,
        validator: {
          validate: (value, args) => isAscii(value),
          defaultMessage: ValidateBy_1.buildMessage((eachPrefix) => eachPrefix + "$property must contain only ASCII characters", validationOptions)
        }
      }, validationOptions);
    }
    exports.IsAscii = IsAscii;
  }
});

// node_modules/validator/lib/isBase64.js
var require_isBase64 = __commonJS({
  "node_modules/validator/lib/isBase64.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isBase64;
    var _assertString = _interopRequireDefault(require_assertString());
    var _merge = _interopRequireDefault(require_merge());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var notBase64 = /[^A-Z0-9+\/=]/i;
    var urlSafeBase64 = /^[A-Z0-9_\-]*$/i;
    var defaultBase64Options = {
      urlSafe: false
    };
    function isBase64(str, options) {
      (0, _assertString.default)(str);
      options = (0, _merge.default)(options, defaultBase64Options);
      var len = str.length;
      if (options.urlSafe) {
        return urlSafeBase64.test(str);
      }
      if (len % 4 !== 0 || notBase64.test(str)) {
        return false;
      }
      var firstPaddingChar = str.indexOf("=");
      return firstPaddingChar === -1 || firstPaddingChar === len - 1 || firstPaddingChar === len - 2 && str[len - 1] === "=";
    }
    module2.exports = exports.default;
    module2.exports.default = exports.default;
  }
});

// node_modules/class-validator/cjs/decorator/string/IsBase64.js
var require_IsBase64 = __commonJS({
  "node_modules/class-validator/cjs/decorator/string/IsBase64.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IsBase64 = exports.isBase64 = exports.IS_BASE64 = void 0;
    var ValidateBy_1 = require_ValidateBy();
    var isBase64_1 = __importDefault(require_isBase64());
    exports.IS_BASE64 = "isBase64";
    function isBase64(value) {
      return typeof value === "string" && isBase64_1.default(value);
    }
    exports.isBase64 = isBase64;
    function IsBase64(validationOptions) {
      return ValidateBy_1.ValidateBy({
        name: exports.IS_BASE64,
        validator: {
          validate: (value, args) => isBase64(value),
          defaultMessage: ValidateBy_1.buildMessage((eachPrefix) => eachPrefix + "$property must be base64 encoded", validationOptions)
        }
      }, validationOptions);
    }
    exports.IsBase64 = IsBase64;
  }
});

// node_modules/validator/lib/isByteLength.js
var require_isByteLength = __commonJS({
  "node_modules/validator/lib/isByteLength.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isByteLength;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    function isByteLength(str, options) {
      (0, _assertString.default)(str);
      var min;
      var max;
      if (_typeof(options) === "object") {
        min = options.min || 0;
        max = options.max;
      } else {
        min = arguments[1];
        max = arguments[2];
      }
      var len = encodeURI(str).split(/%..|./).length - 1;
      return len >= min && (typeof max === "undefined" || len <= max);
    }
    module2.exports = exports.default;
    module2.exports.default = exports.default;
  }
});

// node_modules/class-validator/cjs/decorator/string/IsByteLength.js
var require_IsByteLength = __commonJS({
  "node_modules/class-validator/cjs/decorator/string/IsByteLength.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IsByteLength = exports.isByteLength = exports.IS_BYTE_LENGTH = void 0;
    var ValidateBy_1 = require_ValidateBy();
    var isByteLength_1 = __importDefault(require_isByteLength());
    exports.IS_BYTE_LENGTH = "isByteLength";
    function isByteLength(value, min, max) {
      return typeof value === "string" && isByteLength_1.default(value, { min, max });
    }
    exports.isByteLength = isByteLength;
    function IsByteLength(min, max, validationOptions) {
      return ValidateBy_1.ValidateBy({
        name: exports.IS_BYTE_LENGTH,
        constraints: [min, max],
        validator: {
          validate: (value, args) => isByteLength(value, args.constraints[0], args.constraints[1]),
          defaultMessage: ValidateBy_1.buildMessage((eachPrefix) => eachPrefix + "$property's byte length must fall into ($constraint1, $constraint2) range", validationOptions)
        }
      }, validationOptions);
    }
    exports.IsByteLength = IsByteLength;
  }
});

// node_modules/validator/lib/isCreditCard.js
var require_isCreditCard = __commonJS({
  "node_modules/validator/lib/isCreditCard.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isCreditCard;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var creditCard = /^(?:4[0-9]{12}(?:[0-9]{3,6})?|5[1-5][0-9]{14}|(222[1-9]|22[3-9][0-9]|2[3-6][0-9]{2}|27[01][0-9]|2720)[0-9]{12}|6(?:011|5[0-9][0-9])[0-9]{12,15}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\d{3})\d{11}|6[27][0-9]{14}|^(81[0-9]{14,17}))$/;
    function isCreditCard(str) {
      (0, _assertString.default)(str);
      var sanitized = str.replace(/[- ]+/g, "");
      if (!creditCard.test(sanitized)) {
        return false;
      }
      var sum = 0;
      var digit;
      var tmpNum;
      var shouldDouble;
      for (var i = sanitized.length - 1; i >= 0; i--) {
        digit = sanitized.substring(i, i + 1);
        tmpNum = parseInt(digit, 10);
        if (shouldDouble) {
          tmpNum *= 2;
          if (tmpNum >= 10) {
            sum += tmpNum % 10 + 1;
          } else {
            sum += tmpNum;
          }
        } else {
          sum += tmpNum;
        }
        shouldDouble = !shouldDouble;
      }
      return !!(sum % 10 === 0 ? sanitized : false);
    }
    module2.exports = exports.default;
    module2.exports.default = exports.default;
  }
});

// node_modules/class-validator/cjs/decorator/string/IsCreditCard.js
var require_IsCreditCard = __commonJS({
  "node_modules/class-validator/cjs/decorator/string/IsCreditCard.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IsCreditCard = exports.isCreditCard = exports.IS_CREDIT_CARD = void 0;
    var ValidateBy_1 = require_ValidateBy();
    var isCreditCard_1 = __importDefault(require_isCreditCard());
    exports.IS_CREDIT_CARD = "isCreditCard";
    function isCreditCard(value) {
      return typeof value === "string" && isCreditCard_1.default(value);
    }
    exports.isCreditCard = isCreditCard;
    function IsCreditCard(validationOptions) {
      return ValidateBy_1.ValidateBy({
        name: exports.IS_CREDIT_CARD,
        validator: {
          validate: (value, args) => isCreditCard(value),
          defaultMessage: ValidateBy_1.buildMessage((eachPrefix) => eachPrefix + "$property must be a credit card", validationOptions)
        }
      }, validationOptions);
    }
    exports.IsCreditCard = IsCreditCard;
  }
});

// node_modules/validator/lib/isCurrency.js
var require_isCurrency = __commonJS({
  "node_modules/validator/lib/isCurrency.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isCurrency;
    var _merge = _interopRequireDefault(require_merge());
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function currencyRegex(options) {
      var decimal_digits = "\\d{".concat(options.digits_after_decimal[0], "}");
      options.digits_after_decimal.forEach(function(digit, index) {
        if (index !== 0)
          decimal_digits = "".concat(decimal_digits, "|\\d{").concat(digit, "}");
      });
      var symbol = "(".concat(options.symbol.replace(/\W/, function(m) {
        return "\\".concat(m);
      }), ")").concat(options.require_symbol ? "" : "?"), negative = "-?", whole_dollar_amount_without_sep = "[1-9]\\d*", whole_dollar_amount_with_sep = "[1-9]\\d{0,2}(\\".concat(options.thousands_separator, "\\d{3})*"), valid_whole_dollar_amounts = ["0", whole_dollar_amount_without_sep, whole_dollar_amount_with_sep], whole_dollar_amount = "(".concat(valid_whole_dollar_amounts.join("|"), ")?"), decimal_amount = "(\\".concat(options.decimal_separator, "(").concat(decimal_digits, "))").concat(options.require_decimal ? "" : "?");
      var pattern = whole_dollar_amount + (options.allow_decimal || options.require_decimal ? decimal_amount : "");
      if (options.allow_negatives && !options.parens_for_negatives) {
        if (options.negative_sign_after_digits) {
          pattern += negative;
        } else if (options.negative_sign_before_digits) {
          pattern = negative + pattern;
        }
      }
      if (options.allow_negative_sign_placeholder) {
        pattern = "( (?!\\-))?".concat(pattern);
      } else if (options.allow_space_after_symbol) {
        pattern = " ?".concat(pattern);
      } else if (options.allow_space_after_digits) {
        pattern += "( (?!$))?";
      }
      if (options.symbol_after_digits) {
        pattern += symbol;
      } else {
        pattern = symbol + pattern;
      }
      if (options.allow_negatives) {
        if (options.parens_for_negatives) {
          pattern = "(\\(".concat(pattern, "\\)|").concat(pattern, ")");
        } else if (!(options.negative_sign_before_digits || options.negative_sign_after_digits)) {
          pattern = negative + pattern;
        }
      }
      return new RegExp("^(?!-? )(?=.*\\d)".concat(pattern, "$"));
    }
    var default_currency_options = {
      symbol: "$",
      require_symbol: false,
      allow_space_after_symbol: false,
      symbol_after_digits: false,
      allow_negatives: true,
      parens_for_negatives: false,
      negative_sign_before_digits: false,
      negative_sign_after_digits: false,
      allow_negative_sign_placeholder: false,
      thousands_separator: ",",
      decimal_separator: ".",
      allow_decimal: true,
      require_decimal: false,
      digits_after_decimal: [2],
      allow_space_after_digits: false
    };
    function isCurrency(str, options) {
      (0, _assertString.default)(str);
      options = (0, _merge.default)(options, default_currency_options);
      return currencyRegex(options).test(str);
    }
    module2.exports = exports.default;
    module2.exports.default = exports.default;
  }
});

// node_modules/class-validator/cjs/decorator/string/IsCurrency.js
var require_IsCurrency = __commonJS({
  "node_modules/class-validator/cjs/decorator/string/IsCurrency.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IsCurrency = exports.isCurrency = exports.IS_CURRENCY = void 0;
    var ValidateBy_1 = require_ValidateBy();
    var isCurrency_1 = __importDefault(require_isCurrency());
    exports.IS_CURRENCY = "isCurrency";
    function isCurrency(value, options) {
      return typeof value === "string" && isCurrency_1.default(value, options);
    }
    exports.isCurrency = isCurrency;
    function IsCurrency(options, validationOptions) {
      return ValidateBy_1.ValidateBy({
        name: exports.IS_CURRENCY,
        constraints: [options],
        validator: {
          validate: (value, args) => isCurrency(value, args.constraints[0]),
          defaultMessage: ValidateBy_1.buildMessage((eachPrefix) => eachPrefix + "$property must be a currency", validationOptions)
        }
      }, validationOptions);
    }
    exports.IsCurrency = IsCurrency;
  }
});

// node_modules/validator/lib/isFQDN.js
var require_isFQDN = __commonJS({
  "node_modules/validator/lib/isFQDN.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isFQDN;
    var _assertString = _interopRequireDefault(require_assertString());
    var _merge = _interopRequireDefault(require_merge());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var default_fqdn_options = {
      require_tld: true,
      allow_underscores: false,
      allow_trailing_dot: false,
      allow_numeric_tld: false,
      allow_wildcard: false
    };
    function isFQDN(str, options) {
      (0, _assertString.default)(str);
      options = (0, _merge.default)(options, default_fqdn_options);
      if (options.allow_trailing_dot && str[str.length - 1] === ".") {
        str = str.substring(0, str.length - 1);
      }
      if (options.allow_wildcard === true && str.indexOf("*.") === 0) {
        str = str.substring(2);
      }
      var parts = str.split(".");
      var tld = parts[parts.length - 1];
      if (options.require_tld) {
        if (parts.length < 2) {
          return false;
        }
        if (!/^([a-z\u00A1-\u00A8\u00AA-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]{2,}|xn[a-z0-9-]{2,})$/i.test(tld)) {
          return false;
        }
        if (/\s/.test(tld)) {
          return false;
        }
      }
      if (!options.allow_numeric_tld && /^\d+$/.test(tld)) {
        return false;
      }
      return parts.every(function(part) {
        if (part.length > 63) {
          return false;
        }
        if (!/^[a-z_\u00a1-\uffff0-9-]+$/i.test(part)) {
          return false;
        }
        if (/[\uff01-\uff5e]/.test(part)) {
          return false;
        }
        if (/^-|-$/.test(part)) {
          return false;
        }
        if (!options.allow_underscores && /_/.test(part)) {
          return false;
        }
        return true;
      });
    }
    module2.exports = exports.default;
    module2.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isIP.js
var require_isIP = __commonJS({
  "node_modules/validator/lib/isIP.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isIP;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var IPv4SegmentFormat = "(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])";
    var IPv4AddressFormat = "(".concat(IPv4SegmentFormat, "[.]){3}").concat(IPv4SegmentFormat);
    var IPv4AddressRegExp = new RegExp("^".concat(IPv4AddressFormat, "$"));
    var IPv6SegmentFormat = "(?:[0-9a-fA-F]{1,4})";
    var IPv6AddressRegExp = new RegExp("^(" + "(?:".concat(IPv6SegmentFormat, ":){7}(?:").concat(IPv6SegmentFormat, "|:)|") + "(?:".concat(IPv6SegmentFormat, ":){6}(?:").concat(IPv4AddressFormat, "|:").concat(IPv6SegmentFormat, "|:)|") + "(?:".concat(IPv6SegmentFormat, ":){5}(?::").concat(IPv4AddressFormat, "|(:").concat(IPv6SegmentFormat, "){1,2}|:)|") + "(?:".concat(IPv6SegmentFormat, ":){4}(?:(:").concat(IPv6SegmentFormat, "){0,1}:").concat(IPv4AddressFormat, "|(:").concat(IPv6SegmentFormat, "){1,3}|:)|") + "(?:".concat(IPv6SegmentFormat, ":){3}(?:(:").concat(IPv6SegmentFormat, "){0,2}:").concat(IPv4AddressFormat, "|(:").concat(IPv6SegmentFormat, "){1,4}|:)|") + "(?:".concat(IPv6SegmentFormat, ":){2}(?:(:").concat(IPv6SegmentFormat, "){0,3}:").concat(IPv4AddressFormat, "|(:").concat(IPv6SegmentFormat, "){1,5}|:)|") + "(?:".concat(IPv6SegmentFormat, ":){1}(?:(:").concat(IPv6SegmentFormat, "){0,4}:").concat(IPv4AddressFormat, "|(:").concat(IPv6SegmentFormat, "){1,6}|:)|") + "(?::((?::".concat(IPv6SegmentFormat, "){0,5}:").concat(IPv4AddressFormat, "|(?::").concat(IPv6SegmentFormat, "){1,7}|:))") + ")(%[0-9a-zA-Z-.:]{1,})?$");
    function isIP(str) {
      var version2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
      (0, _assertString.default)(str);
      version2 = String(version2);
      if (!version2) {
        return isIP(str, 4) || isIP(str, 6);
      }
      if (version2 === "4") {
        if (!IPv4AddressRegExp.test(str)) {
          return false;
        }
        var parts = str.split(".").sort(function(a, b) {
          return a - b;
        });
        return parts[3] <= 255;
      }
      if (version2 === "6") {
        return !!IPv6AddressRegExp.test(str);
      }
      return false;
    }
    module2.exports = exports.default;
    module2.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isEmail.js
var require_isEmail = __commonJS({
  "node_modules/validator/lib/isEmail.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isEmail;
    var _assertString = _interopRequireDefault(require_assertString());
    var _merge = _interopRequireDefault(require_merge());
    var _isByteLength = _interopRequireDefault(require_isByteLength());
    var _isFQDN = _interopRequireDefault(require_isFQDN());
    var _isIP = _interopRequireDefault(require_isIP());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var default_email_options = {
      allow_display_name: false,
      require_display_name: false,
      allow_utf8_local_part: true,
      require_tld: true,
      blacklisted_chars: "",
      ignore_max_length: false,
      host_blacklist: []
    };
    var splitNameAddress = /^([^\x00-\x1F\x7F-\x9F\cX]+)</i;
    var emailUserPart = /^[a-z\d!#\$%&'\*\+\-\/=\?\^_`{\|}~]+$/i;
    var gmailUserPart = /^[a-z\d]+$/;
    var quotedEmailUser = /^([\s\x01-\x08\x0b\x0c\x0e-\x1f\x7f\x21\x23-\x5b\x5d-\x7e]|(\\[\x01-\x09\x0b\x0c\x0d-\x7f]))*$/i;
    var emailUserUtf8Part = /^[a-z\d!#\$%&'\*\+\-\/=\?\^_`{\|}~\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+$/i;
    var quotedEmailUserUtf8 = /^([\s\x01-\x08\x0b\x0c\x0e-\x1f\x7f\x21\x23-\x5b\x5d-\x7e\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]|(\\[\x01-\x09\x0b\x0c\x0d-\x7f\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))*$/i;
    var defaultMaxEmailLength = 254;
    function validateDisplayName(display_name) {
      var display_name_without_quotes = display_name.replace(/^"(.+)"$/, "$1");
      if (!display_name_without_quotes.trim()) {
        return false;
      }
      var contains_illegal = /[\.";<>]/.test(display_name_without_quotes);
      if (contains_illegal) {
        if (display_name_without_quotes === display_name) {
          return false;
        }
        var all_start_with_back_slash = display_name_without_quotes.split('"').length === display_name_without_quotes.split('\\"').length;
        if (!all_start_with_back_slash) {
          return false;
        }
      }
      return true;
    }
    function isEmail(str, options) {
      (0, _assertString.default)(str);
      options = (0, _merge.default)(options, default_email_options);
      if (options.require_display_name || options.allow_display_name) {
        var display_email = str.match(splitNameAddress);
        if (display_email) {
          var display_name = display_email[1];
          str = str.replace(display_name, "").replace(/(^<|>$)/g, "");
          if (display_name.endsWith(" ")) {
            display_name = display_name.substr(0, display_name.length - 1);
          }
          if (!validateDisplayName(display_name)) {
            return false;
          }
        } else if (options.require_display_name) {
          return false;
        }
      }
      if (!options.ignore_max_length && str.length > defaultMaxEmailLength) {
        return false;
      }
      var parts = str.split("@");
      var domain = parts.pop();
      var lower_domain = domain.toLowerCase();
      if (options.host_blacklist.includes(lower_domain)) {
        return false;
      }
      var user = parts.join("@");
      if (options.domain_specific_validation && (lower_domain === "gmail.com" || lower_domain === "googlemail.com")) {
        user = user.toLowerCase();
        var username = user.split("+")[0];
        if (!(0, _isByteLength.default)(username.replace(/\./g, ""), {
          min: 6,
          max: 30
        })) {
          return false;
        }
        var _user_parts = username.split(".");
        for (var i = 0; i < _user_parts.length; i++) {
          if (!gmailUserPart.test(_user_parts[i])) {
            return false;
          }
        }
      }
      if (options.ignore_max_length === false && (!(0, _isByteLength.default)(user, {
        max: 64
      }) || !(0, _isByteLength.default)(domain, {
        max: 254
      }))) {
        return false;
      }
      if (!(0, _isFQDN.default)(domain, {
        require_tld: options.require_tld
      })) {
        if (!options.allow_ip_domain) {
          return false;
        }
        if (!(0, _isIP.default)(domain)) {
          if (!domain.startsWith("[") || !domain.endsWith("]")) {
            return false;
          }
          var noBracketdomain = domain.substr(1, domain.length - 2);
          if (noBracketdomain.length === 0 || !(0, _isIP.default)(noBracketdomain)) {
            return false;
          }
        }
      }
      if (user[0] === '"') {
        user = user.slice(1, user.length - 1);
        return options.allow_utf8_local_part ? quotedEmailUserUtf8.test(user) : quotedEmailUser.test(user);
      }
      var pattern = options.allow_utf8_local_part ? emailUserUtf8Part : emailUserPart;
      var user_parts = user.split(".");
      for (var _i = 0; _i < user_parts.length; _i++) {
        if (!pattern.test(user_parts[_i])) {
          return false;
        }
      }
      if (options.blacklisted_chars) {
        if (user.search(new RegExp("[".concat(options.blacklisted_chars, "]+"), "g")) !== -1)
          return false;
      }
      return true;
    }
    module2.exports = exports.default;
    module2.exports.default = exports.default;
  }
});

// node_modules/class-validator/cjs/decorator/string/IsEmail.js
var require_IsEmail = __commonJS({
  "node_modules/class-validator/cjs/decorator/string/IsEmail.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IsEmail = exports.isEmail = exports.IS_EMAIL = void 0;
    var ValidateBy_1 = require_ValidateBy();
    var isEmail_1 = __importDefault(require_isEmail());
    exports.IS_EMAIL = "isEmail";
    function isEmail(value, options) {
      return typeof value === "string" && isEmail_1.default(value, options);
    }
    exports.isEmail = isEmail;
    function IsEmail(options, validationOptions) {
      return ValidateBy_1.ValidateBy({
        name: exports.IS_EMAIL,
        constraints: [options],
        validator: {
          validate: (value, args) => isEmail(value, args.constraints[0]),
          defaultMessage: ValidateBy_1.buildMessage((eachPrefix) => eachPrefix + "$property must be an email", validationOptions)
        }
      }, validationOptions);
    }
    exports.IsEmail = IsEmail;
  }
});

// node_modules/class-validator/cjs/decorator/string/IsFQDN.js
var require_IsFQDN = __commonJS({
  "node_modules/class-validator/cjs/decorator/string/IsFQDN.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IsFQDN = exports.isFQDN = exports.IS_FQDN = void 0;
    var ValidateBy_1 = require_ValidateBy();
    var isFQDN_1 = __importDefault(require_isFQDN());
    exports.IS_FQDN = "isFqdn";
    function isFQDN(value, options) {
      return typeof value === "string" && isFQDN_1.default(value, options);
    }
    exports.isFQDN = isFQDN;
    function IsFQDN(options, validationOptions) {
      return ValidateBy_1.ValidateBy({
        name: exports.IS_FQDN,
        constraints: [options],
        validator: {
          validate: (value, args) => isFQDN(value, args.constraints[0]),
          defaultMessage: ValidateBy_1.buildMessage((eachPrefix) => eachPrefix + "$property must be a valid domain name", validationOptions)
        }
      }, validationOptions);
    }
    exports.IsFQDN = IsFQDN;
  }
});

// node_modules/validator/lib/isFullWidth.js
var require_isFullWidth = __commonJS({
  "node_modules/validator/lib/isFullWidth.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isFullWidth;
    exports.fullWidth = void 0;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var fullWidth = /[^\u0020-\u007E\uFF61-\uFF9F\uFFA0-\uFFDC\uFFE8-\uFFEE0-9a-zA-Z]/;
    exports.fullWidth = fullWidth;
    function isFullWidth(str) {
      (0, _assertString.default)(str);
      return fullWidth.test(str);
    }
  }
});

// node_modules/class-validator/cjs/decorator/string/IsFullWidth.js
var require_IsFullWidth = __commonJS({
  "node_modules/class-validator/cjs/decorator/string/IsFullWidth.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IsFullWidth = exports.isFullWidth = exports.IS_FULL_WIDTH = void 0;
    var ValidateBy_1 = require_ValidateBy();
    var isFullWidth_1 = __importDefault(require_isFullWidth());
    exports.IS_FULL_WIDTH = "isFullWidth";
    function isFullWidth(value) {
      return typeof value === "string" && isFullWidth_1.default(value);
    }
    exports.isFullWidth = isFullWidth;
    function IsFullWidth(validationOptions) {
      return ValidateBy_1.ValidateBy({
        name: exports.IS_FULL_WIDTH,
        validator: {
          validate: (value, args) => isFullWidth(value),
          defaultMessage: ValidateBy_1.buildMessage((eachPrefix) => eachPrefix + "$property must contain a full-width characters", validationOptions)
        }
      }, validationOptions);
    }
    exports.IsFullWidth = IsFullWidth;
  }
});

// node_modules/validator/lib/isHalfWidth.js
var require_isHalfWidth = __commonJS({
  "node_modules/validator/lib/isHalfWidth.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isHalfWidth;
    exports.halfWidth = void 0;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var halfWidth = /[\u0020-\u007E\uFF61-\uFF9F\uFFA0-\uFFDC\uFFE8-\uFFEE0-9a-zA-Z]/;
    exports.halfWidth = halfWidth;
    function isHalfWidth(str) {
      (0, _assertString.default)(str);
      return halfWidth.test(str);
    }
  }
});

// node_modules/class-validator/cjs/decorator/string/IsHalfWidth.js
var require_IsHalfWidth = __commonJS({
  "node_modules/class-validator/cjs/decorator/string/IsHalfWidth.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IsHalfWidth = exports.isHalfWidth = exports.IS_HALF_WIDTH = void 0;
    var ValidateBy_1 = require_ValidateBy();
    var isHalfWidth_1 = __importDefault(require_isHalfWidth());
    exports.IS_HALF_WIDTH = "isHalfWidth";
    function isHalfWidth(value) {
      return typeof value === "string" && isHalfWidth_1.default(value);
    }
    exports.isHalfWidth = isHalfWidth;
    function IsHalfWidth(validationOptions) {
      return ValidateBy_1.ValidateBy({
        name: exports.IS_HALF_WIDTH,
        validator: {
          validate: (value, args) => isHalfWidth(value),
          defaultMessage: ValidateBy_1.buildMessage((eachPrefix) => eachPrefix + "$property must contain a half-width characters", validationOptions)
        }
      }, validationOptions);
    }
    exports.IsHalfWidth = IsHalfWidth;
  }
});

// node_modules/validator/lib/isVariableWidth.js
var require_isVariableWidth = __commonJS({
  "node_modules/validator/lib/isVariableWidth.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isVariableWidth;
    var _assertString = _interopRequireDefault(require_assertString());
    var _isFullWidth = require_isFullWidth();
    var _isHalfWidth = require_isHalfWidth();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function isVariableWidth(str) {
      (0, _assertString.default)(str);
      return _isFullWidth.fullWidth.test(str) && _isHalfWidth.halfWidth.test(str);
    }
    module2.exports = exports.default;
    module2.exports.default = exports.default;
  }
});

// node_modules/class-validator/cjs/decorator/string/IsVariableWidth.js
var require_IsVariableWidth = __commonJS({
  "node_modules/class-validator/cjs/decorator/string/IsVariableWidth.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IsVariableWidth = exports.isVariableWidth = exports.IS_VARIABLE_WIDTH = void 0;
    var ValidateBy_1 = require_ValidateBy();
    var isVariableWidth_1 = __importDefault(require_isVariableWidth());
    exports.IS_VARIABLE_WIDTH = "isVariableWidth";
    function isVariableWidth(value) {
      return typeof value === "string" && isVariableWidth_1.default(value);
    }
    exports.isVariableWidth = isVariableWidth;
    function IsVariableWidth(validationOptions) {
      return ValidateBy_1.ValidateBy({
        name: exports.IS_VARIABLE_WIDTH,
        validator: {
          validate: (value, args) => isVariableWidth(value),
          defaultMessage: ValidateBy_1.buildMessage((eachPrefix) => eachPrefix + "$property must contain a full-width and half-width characters", validationOptions)
        }
      }, validationOptions);
    }
    exports.IsVariableWidth = IsVariableWidth;
  }
});

// node_modules/validator/lib/isHexColor.js
var require_isHexColor = __commonJS({
  "node_modules/validator/lib/isHexColor.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isHexColor;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var hexcolor = /^#?([0-9A-F]{3}|[0-9A-F]{4}|[0-9A-F]{6}|[0-9A-F]{8})$/i;
    function isHexColor(str) {
      (0, _assertString.default)(str);
      return hexcolor.test(str);
    }
    module2.exports = exports.default;
    module2.exports.default = exports.default;
  }
});

// node_modules/class-validator/cjs/decorator/string/IsHexColor.js
var require_IsHexColor = __commonJS({
  "node_modules/class-validator/cjs/decorator/string/IsHexColor.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IsHexColor = exports.isHexColor = exports.IS_HEX_COLOR = void 0;
    var ValidateBy_1 = require_ValidateBy();
    var isHexColor_1 = __importDefault(require_isHexColor());
    exports.IS_HEX_COLOR = "isHexColor";
    function isHexColor(value) {
      return typeof value === "string" && isHexColor_1.default(value);
    }
    exports.isHexColor = isHexColor;
    function IsHexColor(validationOptions) {
      return ValidateBy_1.ValidateBy({
        name: exports.IS_HEX_COLOR,
        validator: {
          validate: (value, args) => isHexColor(value),
          defaultMessage: ValidateBy_1.buildMessage((eachPrefix) => eachPrefix + "$property must be a hexadecimal color", validationOptions)
        }
      }, validationOptions);
    }
    exports.IsHexColor = IsHexColor;
  }
});

// node_modules/validator/lib/isHexadecimal.js
var require_isHexadecimal = __commonJS({
  "node_modules/validator/lib/isHexadecimal.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isHexadecimal;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var hexadecimal = /^(0x|0h)?[0-9A-F]+$/i;
    function isHexadecimal(str) {
      (0, _assertString.default)(str);
      return hexadecimal.test(str);
    }
    module2.exports = exports.default;
    module2.exports.default = exports.default;
  }
});

// node_modules/class-validator/cjs/decorator/string/IsHexadecimal.js
var require_IsHexadecimal = __commonJS({
  "node_modules/class-validator/cjs/decorator/string/IsHexadecimal.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IsHexadecimal = exports.isHexadecimal = exports.IS_HEXADECIMAL = void 0;
    var ValidateBy_1 = require_ValidateBy();
    var isHexadecimal_1 = __importDefault(require_isHexadecimal());
    exports.IS_HEXADECIMAL = "isHexadecimal";
    function isHexadecimal(value) {
      return typeof value === "string" && isHexadecimal_1.default(value);
    }
    exports.isHexadecimal = isHexadecimal;
    function IsHexadecimal(validationOptions) {
      return ValidateBy_1.ValidateBy({
        name: exports.IS_HEXADECIMAL,
        validator: {
          validate: (value, args) => isHexadecimal(value),
          defaultMessage: ValidateBy_1.buildMessage((eachPrefix) => eachPrefix + "$property must be a hexadecimal number", validationOptions)
        }
      }, validationOptions);
    }
    exports.IsHexadecimal = IsHexadecimal;
  }
});

// node_modules/class-validator/cjs/decorator/ValidationOptions.js
var require_ValidationOptions = __commonJS({
  "node_modules/class-validator/cjs/decorator/ValidationOptions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isValidationOptions = void 0;
    function isValidationOptions(val) {
      if (!val) {
        return false;
      }
      return "each" in val || "message" in val || "groups" in val || "always" in val || "context" in val;
    }
    exports.isValidationOptions = isValidationOptions;
  }
});

// node_modules/validator/lib/isMACAddress.js
var require_isMACAddress = __commonJS({
  "node_modules/validator/lib/isMACAddress.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isMACAddress;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var macAddress = /^(?:[0-9a-fA-F]{2}([-:\s]))([0-9a-fA-F]{2}\1){4}([0-9a-fA-F]{2})$/;
    var macAddressNoSeparators = /^([0-9a-fA-F]){12}$/;
    var macAddressWithDots = /^([0-9a-fA-F]{4}\.){2}([0-9a-fA-F]{4})$/;
    function isMACAddress(str, options) {
      (0, _assertString.default)(str);
      if (options && (options.no_colons || options.no_separators)) {
        return macAddressNoSeparators.test(str);
      }
      return macAddress.test(str) || macAddressWithDots.test(str);
    }
    module2.exports = exports.default;
    module2.exports.default = exports.default;
  }
});

// node_modules/class-validator/cjs/decorator/string/IsMacAddress.js
var require_IsMacAddress = __commonJS({
  "node_modules/class-validator/cjs/decorator/string/IsMacAddress.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IsMACAddress = exports.isMACAddress = exports.IS_MAC_ADDRESS = void 0;
    var ValidationOptions_1 = require_ValidationOptions();
    var ValidateBy_1 = require_ValidateBy();
    var isMACAddress_1 = __importDefault(require_isMACAddress());
    exports.IS_MAC_ADDRESS = "isMacAddress";
    function isMACAddress(value, options) {
      return typeof value === "string" && isMACAddress_1.default(value, options);
    }
    exports.isMACAddress = isMACAddress;
    function IsMACAddress(optionsOrValidationOptionsArg, validationOptionsArg) {
      const options = !ValidationOptions_1.isValidationOptions(optionsOrValidationOptionsArg) ? optionsOrValidationOptionsArg : void 0;
      const validationOptions = ValidationOptions_1.isValidationOptions(optionsOrValidationOptionsArg) ? optionsOrValidationOptionsArg : validationOptionsArg;
      return ValidateBy_1.ValidateBy({
        name: exports.IS_MAC_ADDRESS,
        constraints: [options],
        validator: {
          validate: (value, args) => isMACAddress(value, options),
          defaultMessage: ValidateBy_1.buildMessage((eachPrefix) => eachPrefix + "$property must be a MAC Address", validationOptions)
        }
      }, validationOptions);
    }
    exports.IsMACAddress = IsMACAddress;
  }
});

// node_modules/class-validator/cjs/decorator/string/IsIP.js
var require_IsIP = __commonJS({
  "node_modules/class-validator/cjs/decorator/string/IsIP.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IsIP = exports.isIP = exports.IS_IP = void 0;
    var ValidateBy_1 = require_ValidateBy();
    var isIP_1 = __importDefault(require_isIP());
    exports.IS_IP = "isIp";
    function isIP(value, version2) {
      const versionStr = version2 ? `${version2}` : void 0;
      return typeof value === "string" && isIP_1.default(value, versionStr);
    }
    exports.isIP = isIP;
    function IsIP(version2, validationOptions) {
      return ValidateBy_1.ValidateBy({
        name: exports.IS_IP,
        constraints: [version2],
        validator: {
          validate: (value, args) => isIP(value, args.constraints[0]),
          defaultMessage: ValidateBy_1.buildMessage((eachPrefix) => eachPrefix + "$property must be an ip address", validationOptions)
        }
      }, validationOptions);
    }
    exports.IsIP = IsIP;
  }
});

// node_modules/validator/lib/isInt.js
var require_isInt = __commonJS({
  "node_modules/validator/lib/isInt.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isInt;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var int = /^(?:[-+]?(?:0|[1-9][0-9]*))$/;
    var intLeadingZeroes = /^[-+]?[0-9]+$/;
    function isInt(str, options) {
      (0, _assertString.default)(str);
      options = options || {};
      var regex = options.hasOwnProperty("allow_leading_zeroes") && !options.allow_leading_zeroes ? int : intLeadingZeroes;
      var minCheckPassed = !options.hasOwnProperty("min") || str >= options.min;
      var maxCheckPassed = !options.hasOwnProperty("max") || str <= options.max;
      var ltCheckPassed = !options.hasOwnProperty("lt") || str < options.lt;
      var gtCheckPassed = !options.hasOwnProperty("gt") || str > options.gt;
      return regex.test(str) && minCheckPassed && maxCheckPassed && ltCheckPassed && gtCheckPassed;
    }
    module2.exports = exports.default;
    module2.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isPort.js
var require_isPort = __commonJS({
  "node_modules/validator/lib/isPort.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isPort;
    var _isInt = _interopRequireDefault(require_isInt());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function isPort(str) {
      return (0, _isInt.default)(str, {
        min: 0,
        max: 65535
      });
    }
    module2.exports = exports.default;
    module2.exports.default = exports.default;
  }
});

// node_modules/class-validator/cjs/decorator/string/IsPort.js
var require_IsPort = __commonJS({
  "node_modules/class-validator/cjs/decorator/string/IsPort.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IsPort = exports.isPort = exports.IS_PORT = void 0;
    var ValidateBy_1 = require_ValidateBy();
    var isPort_1 = __importDefault(require_isPort());
    exports.IS_PORT = "isPort";
    function isPort(value) {
      return typeof value === "string" && isPort_1.default(value);
    }
    exports.isPort = isPort;
    function IsPort(validationOptions) {
      return ValidateBy_1.ValidateBy({
        name: exports.IS_PORT,
        validator: {
          validate: (value, args) => isPort(value),
          defaultMessage: ValidateBy_1.buildMessage((eachPrefix) => eachPrefix + "$property must be a port", validationOptions)
        }
      }, validationOptions);
    }
    exports.IsPort = IsPort;
  }
});

// node_modules/validator/lib/isISBN.js
var require_isISBN = __commonJS({
  "node_modules/validator/lib/isISBN.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isISBN;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var isbn10Maybe = /^(?:[0-9]{9}X|[0-9]{10})$/;
    var isbn13Maybe = /^(?:[0-9]{13})$/;
    var factor = [1, 3];
    function isISBN(str) {
      var version2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
      (0, _assertString.default)(str);
      version2 = String(version2);
      if (!version2) {
        return isISBN(str, 10) || isISBN(str, 13);
      }
      var sanitized = str.replace(/[\s-]+/g, "");
      var checksum = 0;
      var i;
      if (version2 === "10") {
        if (!isbn10Maybe.test(sanitized)) {
          return false;
        }
        for (i = 0; i < 9; i++) {
          checksum += (i + 1) * sanitized.charAt(i);
        }
        if (sanitized.charAt(9) === "X") {
          checksum += 10 * 10;
        } else {
          checksum += 10 * sanitized.charAt(9);
        }
        if (checksum % 11 === 0) {
          return !!sanitized;
        }
      } else if (version2 === "13") {
        if (!isbn13Maybe.test(sanitized)) {
          return false;
        }
        for (i = 0; i < 12; i++) {
          checksum += factor[i % 2] * sanitized.charAt(i);
        }
        if (sanitized.charAt(12) - (10 - checksum % 10) % 10 === 0) {
          return !!sanitized;
        }
      }
      return false;
    }
    module2.exports = exports.default;
    module2.exports.default = exports.default;
  }
});

// node_modules/class-validator/cjs/decorator/string/IsISBN.js
var require_IsISBN = __commonJS({
  "node_modules/class-validator/cjs/decorator/string/IsISBN.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IsISBN = exports.isISBN = exports.IS_ISBN = void 0;
    var ValidateBy_1 = require_ValidateBy();
    var isISBN_1 = __importDefault(require_isISBN());
    exports.IS_ISBN = "isIsbn";
    function isISBN(value, version2) {
      const versionStr = version2 ? `${version2}` : void 0;
      return typeof value === "string" && isISBN_1.default(value, versionStr);
    }
    exports.isISBN = isISBN;
    function IsISBN(version2, validationOptions) {
      return ValidateBy_1.ValidateBy({
        name: exports.IS_ISBN,
        constraints: [version2],
        validator: {
          validate: (value, args) => isISBN(value, args.constraints[0]),
          defaultMessage: ValidateBy_1.buildMessage((eachPrefix) => eachPrefix + "$property must be an ISBN", validationOptions)
        }
      }, validationOptions);
    }
    exports.IsISBN = IsISBN;
  }
});

// node_modules/validator/lib/isISIN.js
var require_isISIN = __commonJS({
  "node_modules/validator/lib/isISIN.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isISIN;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var isin = /^[A-Z]{2}[0-9A-Z]{9}[0-9]$/;
    function isISIN(str) {
      (0, _assertString.default)(str);
      if (!isin.test(str)) {
        return false;
      }
      var double = true;
      var sum = 0;
      for (var i = str.length - 2; i >= 0; i--) {
        if (str[i] >= "A" && str[i] <= "Z") {
          var value = str[i].charCodeAt(0) - 55;
          var lo = value % 10;
          var hi = Math.trunc(value / 10);
          for (var _i = 0, _arr = [lo, hi]; _i < _arr.length; _i++) {
            var digit = _arr[_i];
            if (double) {
              if (digit >= 5) {
                sum += 1 + (digit - 5) * 2;
              } else {
                sum += digit * 2;
              }
            } else {
              sum += digit;
            }
            double = !double;
          }
        } else {
          var _digit = str[i].charCodeAt(0) - "0".charCodeAt(0);
          if (double) {
            if (_digit >= 5) {
              sum += 1 + (_digit - 5) * 2;
            } else {
              sum += _digit * 2;
            }
          } else {
            sum += _digit;
          }
          double = !double;
        }
      }
      var check = Math.trunc((sum + 9) / 10) * 10 - sum;
      return +str[str.length - 1] === check;
    }
    module2.exports = exports.default;
    module2.exports.default = exports.default;
  }
});

// node_modules/class-validator/cjs/decorator/string/IsISIN.js
var require_IsISIN = __commonJS({
  "node_modules/class-validator/cjs/decorator/string/IsISIN.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IsISIN = exports.isISIN = exports.IS_ISIN = void 0;
    var ValidateBy_1 = require_ValidateBy();
    var isISIN_1 = __importDefault(require_isISIN());
    exports.IS_ISIN = "isIsin";
    function isISIN(value) {
      return typeof value === "string" && isISIN_1.default(value);
    }
    exports.isISIN = isISIN;
    function IsISIN(validationOptions) {
      return ValidateBy_1.ValidateBy({
        name: exports.IS_ISIN,
        validator: {
          validate: (value, args) => isISIN(value),
          defaultMessage: ValidateBy_1.buildMessage((eachPrefix) => eachPrefix + "$property must be an ISIN (stock/security identifier)", validationOptions)
        }
      }, validationOptions);
    }
    exports.IsISIN = IsISIN;
  }
});

// node_modules/validator/lib/isISO8601.js
var require_isISO8601 = __commonJS({
  "node_modules/validator/lib/isISO8601.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isISO8601;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var iso8601 = /^([\+-]?\d{4}(?!\d{2}\b))((-?)((0[1-9]|1[0-2])(\3([12]\d|0[1-9]|3[01]))?|W([0-4]\d|5[0-3])(-?[1-7])?|(00[1-9]|0[1-9]\d|[12]\d{2}|3([0-5]\d|6[1-6])))([T\s]((([01]\d|2[0-3])((:?)[0-5]\d)?|24:?00)([\.,]\d+(?!:))?)?(\17[0-5]\d([\.,]\d+)?)?([zZ]|([\+-])([01]\d|2[0-3]):?([0-5]\d)?)?)?)?$/;
    var iso8601StrictSeparator = /^([\+-]?\d{4}(?!\d{2}\b))((-?)((0[1-9]|1[0-2])(\3([12]\d|0[1-9]|3[01]))?|W([0-4]\d|5[0-3])(-?[1-7])?|(00[1-9]|0[1-9]\d|[12]\d{2}|3([0-5]\d|6[1-6])))([T]((([01]\d|2[0-3])((:?)[0-5]\d)?|24:?00)([\.,]\d+(?!:))?)?(\17[0-5]\d([\.,]\d+)?)?([zZ]|([\+-])([01]\d|2[0-3]):?([0-5]\d)?)?)?)?$/;
    var isValidDate = function isValidDate2(str) {
      var ordinalMatch = str.match(/^(\d{4})-?(\d{3})([ T]{1}\.*|$)/);
      if (ordinalMatch) {
        var oYear = Number(ordinalMatch[1]);
        var oDay = Number(ordinalMatch[2]);
        if (oYear % 4 === 0 && oYear % 100 !== 0 || oYear % 400 === 0)
          return oDay <= 366;
        return oDay <= 365;
      }
      var match = str.match(/(\d{4})-?(\d{0,2})-?(\d*)/).map(Number);
      var year = match[1];
      var month = match[2];
      var day = match[3];
      var monthString = month ? "0".concat(month).slice(-2) : month;
      var dayString = day ? "0".concat(day).slice(-2) : day;
      var d = new Date("".concat(year, "-").concat(monthString || "01", "-").concat(dayString || "01"));
      if (month && day) {
        return d.getUTCFullYear() === year && d.getUTCMonth() + 1 === month && d.getUTCDate() === day;
      }
      return true;
    };
    function isISO8601(str) {
      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      (0, _assertString.default)(str);
      var check = options.strictSeparator ? iso8601StrictSeparator.test(str) : iso8601.test(str);
      if (check && options.strict)
        return isValidDate(str);
      return check;
    }
    module2.exports = exports.default;
    module2.exports.default = exports.default;
  }
});

// node_modules/class-validator/cjs/decorator/string/IsISO8601.js
var require_IsISO8601 = __commonJS({
  "node_modules/class-validator/cjs/decorator/string/IsISO8601.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IsISO8601 = exports.isISO8601 = exports.IS_ISO8601 = void 0;
    var ValidateBy_1 = require_ValidateBy();
    var isISO8601_1 = __importDefault(require_isISO8601());
    exports.IS_ISO8601 = "isIso8601";
    function isISO8601(value, options) {
      return typeof value === "string" && isISO8601_1.default(value, options);
    }
    exports.isISO8601 = isISO8601;
    function IsISO8601(options, validationOptions) {
      return ValidateBy_1.ValidateBy({
        name: exports.IS_ISO8601,
        constraints: [options],
        validator: {
          validate: (value, args) => isISO8601(value, args.constraints[0]),
          defaultMessage: ValidateBy_1.buildMessage((eachPrefix) => eachPrefix + "$property must be a valid ISO 8601 date string", validationOptions)
        }
      }, validationOptions);
    }
    exports.IsISO8601 = IsISO8601;
  }
});

// node_modules/validator/lib/isJSON.js
var require_isJSON = __commonJS({
  "node_modules/validator/lib/isJSON.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isJSON;
    var _assertString = _interopRequireDefault(require_assertString());
    var _merge = _interopRequireDefault(require_merge());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    var default_json_options = {
      allow_primitives: false
    };
    function isJSON(str, options) {
      (0, _assertString.default)(str);
      try {
        options = (0, _merge.default)(options, default_json_options);
        var primitives = [];
        if (options.allow_primitives) {
          primitives = [null, false, true];
        }
        var obj = JSON.parse(str);
        return primitives.includes(obj) || !!obj && _typeof(obj) === "object";
      } catch (e) {
      }
      return false;
    }
    module2.exports = exports.default;
    module2.exports.default = exports.default;
  }
});

// node_modules/class-validator/cjs/decorator/string/IsJSON.js
var require_IsJSON = __commonJS({
  "node_modules/class-validator/cjs/decorator/string/IsJSON.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IsJSON = exports.isJSON = exports.IS_JSON = void 0;
    var ValidateBy_1 = require_ValidateBy();
    var isJSON_1 = __importDefault(require_isJSON());
    exports.IS_JSON = "isJson";
    function isJSON(value) {
      return typeof value === "string" && isJSON_1.default(value);
    }
    exports.isJSON = isJSON;
    function IsJSON(validationOptions) {
      return ValidateBy_1.ValidateBy({
        name: exports.IS_JSON,
        validator: {
          validate: (value, args) => isJSON(value),
          defaultMessage: ValidateBy_1.buildMessage((eachPrefix) => eachPrefix + "$property must be a json string", validationOptions)
        }
      }, validationOptions);
    }
    exports.IsJSON = IsJSON;
  }
});

// node_modules/validator/lib/isJWT.js
var require_isJWT = __commonJS({
  "node_modules/validator/lib/isJWT.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isJWT;
    var _assertString = _interopRequireDefault(require_assertString());
    var _isBase = _interopRequireDefault(require_isBase64());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function isJWT(str) {
      (0, _assertString.default)(str);
      var dotSplit = str.split(".");
      var len = dotSplit.length;
      if (len > 3 || len < 2) {
        return false;
      }
      return dotSplit.reduce(function(acc, currElem) {
        return acc && (0, _isBase.default)(currElem, {
          urlSafe: true
        });
      }, true);
    }
    module2.exports = exports.default;
    module2.exports.default = exports.default;
  }
});

// node_modules/class-validator/cjs/decorator/string/IsJWT.js
var require_IsJWT = __commonJS({
  "node_modules/class-validator/cjs/decorator/string/IsJWT.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IsJWT = exports.isJWT = exports.IS_JWT = void 0;
    var ValidateBy_1 = require_ValidateBy();
    var isJWT_1 = __importDefault(require_isJWT());
    exports.IS_JWT = "isJwt";
    function isJWT(value) {
      return typeof value === "string" && isJWT_1.default(value);
    }
    exports.isJWT = isJWT;
    function IsJWT(validationOptions) {
      return ValidateBy_1.ValidateBy({
        name: exports.IS_JWT,
        validator: {
          validate: (value, args) => isJWT(value),
          defaultMessage: ValidateBy_1.buildMessage((eachPrefix) => eachPrefix + "$property must be a jwt string", validationOptions)
        }
      }, validationOptions);
    }
    exports.IsJWT = IsJWT;
  }
});

// node_modules/validator/lib/isLowercase.js
var require_isLowercase = __commonJS({
  "node_modules/validator/lib/isLowercase.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isLowercase;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function isLowercase(str) {
      (0, _assertString.default)(str);
      return str === str.toLowerCase();
    }
    module2.exports = exports.default;
    module2.exports.default = exports.default;
  }
});

// node_modules/class-validator/cjs/decorator/string/IsLowercase.js
var require_IsLowercase = __commonJS({
  "node_modules/class-validator/cjs/decorator/string/IsLowercase.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IsLowercase = exports.isLowercase = exports.IS_LOWERCASE = void 0;
    var ValidateBy_1 = require_ValidateBy();
    var isLowercase_1 = __importDefault(require_isLowercase());
    exports.IS_LOWERCASE = "isLowercase";
    function isLowercase(value) {
      return typeof value === "string" && isLowercase_1.default(value);
    }
    exports.isLowercase = isLowercase;
    function IsLowercase(validationOptions) {
      return ValidateBy_1.ValidateBy({
        name: exports.IS_LOWERCASE,
        validator: {
          validate: (value, args) => isLowercase(value),
          defaultMessage: ValidateBy_1.buildMessage((eachPrefix) => eachPrefix + "$property must be a lowercase string", validationOptions)
        }
      }, validationOptions);
    }
    exports.IsLowercase = IsLowercase;
  }
});

// node_modules/validator/lib/isMobilePhone.js
var require_isMobilePhone = __commonJS({
  "node_modules/validator/lib/isMobilePhone.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isMobilePhone;
    exports.locales = void 0;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var phones = {
      "am-AM": /^(\+?374|0)((10|[9|7][0-9])\d{6}$|[2-4]\d{7}$)/,
      "ar-AE": /^((\+?971)|0)?5[024568]\d{7}$/,
      "ar-BH": /^(\+?973)?(3|6)\d{7}$/,
      "ar-DZ": /^(\+?213|0)(5|6|7)\d{8}$/,
      "ar-LB": /^(\+?961)?((3|81)\d{6}|7\d{7})$/,
      "ar-EG": /^((\+?20)|0)?1[0125]\d{8}$/,
      "ar-IQ": /^(\+?964|0)?7[0-9]\d{8}$/,
      "ar-JO": /^(\+?962|0)?7[789]\d{7}$/,
      "ar-KW": /^(\+?965)[569]\d{7}$/,
      "ar-LY": /^((\+?218)|0)?(9[1-6]\d{7}|[1-8]\d{7,9})$/,
      "ar-MA": /^(?:(?:\+|00)212|0)[5-7]\d{8}$/,
      "ar-OM": /^((\+|00)968)?(9[1-9])\d{6}$/,
      "ar-PS": /^(\+?970|0)5[6|9](\d{7})$/,
      "ar-SA": /^(!?(\+?966)|0)?5\d{8}$/,
      "ar-SY": /^(!?(\+?963)|0)?9\d{8}$/,
      "ar-TN": /^(\+?216)?[2459]\d{7}$/,
      "az-AZ": /^(\+994|0)(5[015]|7[07]|99)\d{7}$/,
      "bs-BA": /^((((\+|00)3876)|06))((([0-3]|[5-6])\d{6})|(4\d{7}))$/,
      "be-BY": /^(\+?375)?(24|25|29|33|44)\d{7}$/,
      "bg-BG": /^(\+?359|0)?8[789]\d{7}$/,
      "bn-BD": /^(\+?880|0)1[13456789][0-9]{8}$/,
      "ca-AD": /^(\+376)?[346]\d{5}$/,
      "cs-CZ": /^(\+?420)? ?[1-9][0-9]{2} ?[0-9]{3} ?[0-9]{3}$/,
      "da-DK": /^(\+?45)?\s?\d{2}\s?\d{2}\s?\d{2}\s?\d{2}$/,
      "de-DE": /^((\+49|0)[1|3])([0|5][0-45-9]\d|6([23]|0\d?)|7([0-57-9]|6\d))\d{7,9}$/,
      "de-AT": /^(\+43|0)\d{1,4}\d{3,12}$/,
      "de-CH": /^(\+41|0)([1-9])\d{1,9}$/,
      "de-LU": /^(\+352)?((6\d1)\d{6})$/,
      "dv-MV": /^(\+?960)?(7[2-9]|91|9[3-9])\d{7}$/,
      "el-GR": /^(\+?30|0)?(69\d{8})$/,
      "en-AU": /^(\+?61|0)4\d{8}$/,
      "en-BM": /^(\+?1)?441(((3|7)\d{6}$)|(5[0-3][0-9]\d{4}$)|(59\d{5}))/,
      "en-GB": /^(\+?44|0)7\d{9}$/,
      "en-GG": /^(\+?44|0)1481\d{6}$/,
      "en-GH": /^(\+233|0)(20|50|24|54|27|57|26|56|23|28|55|59)\d{7}$/,
      "en-GY": /^(\+592|0)6\d{6}$/,
      "en-HK": /^(\+?852[-\s]?)?[456789]\d{3}[-\s]?\d{4}$/,
      "en-MO": /^(\+?853[-\s]?)?[6]\d{3}[-\s]?\d{4}$/,
      "en-IE": /^(\+?353|0)8[356789]\d{7}$/,
      "en-IN": /^(\+?91|0)?[6789]\d{9}$/,
      "en-KE": /^(\+?254|0)(7|1)\d{8}$/,
      "en-KI": /^((\+686|686)?)?( )?((6|7)(2|3|8)[0-9]{6})$/,
      "en-MT": /^(\+?356|0)?(99|79|77|21|27|22|25)[0-9]{6}$/,
      "en-MU": /^(\+?230|0)?\d{8}$/,
      "en-NA": /^(\+?264|0)(6|8)\d{7}$/,
      "en-NG": /^(\+?234|0)?[789]\d{9}$/,
      "en-NZ": /^(\+?64|0)[28]\d{7,9}$/,
      "en-PK": /^((00|\+)?92|0)3[0-6]\d{8}$/,
      "en-PH": /^(09|\+639)\d{9}$/,
      "en-RW": /^(\+?250|0)?[7]\d{8}$/,
      "en-SG": /^(\+65)?[3689]\d{7}$/,
      "en-SL": /^(\+?232|0)\d{8}$/,
      "en-TZ": /^(\+?255|0)?[67]\d{8}$/,
      "en-UG": /^(\+?256|0)?[7]\d{8}$/,
      "en-US": /^((\+1|1)?( |-)?)?(\([2-9][0-9]{2}\)|[2-9][0-9]{2})( |-)?([2-9][0-9]{2}( |-)?[0-9]{4})$/,
      "en-ZA": /^(\+?27|0)\d{9}$/,
      "en-ZM": /^(\+?26)?09[567]\d{7}$/,
      "en-ZW": /^(\+263)[0-9]{9}$/,
      "en-BW": /^(\+?267)?(7[1-8]{1})\d{6}$/,
      "es-AR": /^\+?549(11|[2368]\d)\d{8}$/,
      "es-BO": /^(\+?591)?(6|7)\d{7}$/,
      "es-CO": /^(\+?57)?3(0(0|1|2|4|5)|1\d|2[0-4]|5(0|1))\d{7}$/,
      "es-CL": /^(\+?56|0)[2-9]\d{1}\d{7}$/,
      "es-CR": /^(\+506)?[2-8]\d{7}$/,
      "es-CU": /^(\+53|0053)?5\d{7}/,
      "es-DO": /^(\+?1)?8[024]9\d{7}$/,
      "es-HN": /^(\+?504)?[9|8]\d{7}$/,
      "es-EC": /^(\+?593|0)([2-7]|9[2-9])\d{7}$/,
      "es-ES": /^(\+?34)?[6|7]\d{8}$/,
      "es-PE": /^(\+?51)?9\d{8}$/,
      "es-MX": /^(\+?52)?(1|01)?\d{10,11}$/,
      "es-PA": /^(\+?507)\d{7,8}$/,
      "es-PY": /^(\+?595|0)9[9876]\d{7}$/,
      "es-SV": /^(\+?503)?[67]\d{7}$/,
      "es-UY": /^(\+598|0)9[1-9][\d]{6}$/,
      "es-VE": /^(\+?58)?(2|4)\d{9}$/,
      "et-EE": /^(\+?372)?\s?(5|8[1-4])\s?([0-9]\s?){6,7}$/,
      "fa-IR": /^(\+?98[\-\s]?|0)9[0-39]\d[\-\s]?\d{3}[\-\s]?\d{4}$/,
      "fi-FI": /^(\+?358|0)\s?(4(0|1|2|4|5|6)?|50)\s?(\d\s?){4,8}\d$/,
      "fj-FJ": /^(\+?679)?\s?\d{3}\s?\d{4}$/,
      "fo-FO": /^(\+?298)?\s?\d{2}\s?\d{2}\s?\d{2}$/,
      "fr-BF": /^(\+226|0)[67]\d{7}$/,
      "fr-CM": /^(\+?237)6[0-9]{8}$/,
      "fr-FR": /^(\+?33|0)[67]\d{8}$/,
      "fr-GF": /^(\+?594|0|00594)[67]\d{8}$/,
      "fr-GP": /^(\+?590|0|00590)[67]\d{8}$/,
      "fr-MQ": /^(\+?596|0|00596)[67]\d{8}$/,
      "fr-PF": /^(\+?689)?8[789]\d{6}$/,
      "fr-RE": /^(\+?262|0|00262)[67]\d{8}$/,
      "he-IL": /^(\+972|0)([23489]|5[012345689]|77)[1-9]\d{6}$/,
      "hu-HU": /^(\+?36|06)(20|30|31|50|70)\d{7}$/,
      "id-ID": /^(\+?62|0)8(1[123456789]|2[1238]|3[1238]|5[12356789]|7[78]|9[56789]|8[123456789])([\s?|\d]{5,11})$/,
      "it-IT": /^(\+?39)?\s?3\d{2} ?\d{6,7}$/,
      "it-SM": /^((\+378)|(0549)|(\+390549)|(\+3780549))?6\d{5,9}$/,
      "ja-JP": /^(\+81[ \-]?(\(0\))?|0)[6789]0[ \-]?\d{4}[ \-]?\d{4}$/,
      "ka-GE": /^(\+?995)?(5|79)\d{7}$/,
      "kk-KZ": /^(\+?7|8)?7\d{9}$/,
      "kl-GL": /^(\+?299)?\s?\d{2}\s?\d{2}\s?\d{2}$/,
      "ko-KR": /^((\+?82)[ \-]?)?0?1([0|1|6|7|8|9]{1})[ \-]?\d{3,4}[ \-]?\d{4}$/,
      "lt-LT": /^(\+370|8)\d{8}$/,
      "lv-LV": /^(\+?371)2\d{7}$/,
      "ms-MY": /^(\+?6?01){1}(([0145]{1}(\-|\s)?\d{7,8})|([236789]{1}(\s|\-)?\d{7}))$/,
      "mz-MZ": /^(\+?258)?8[234567]\d{7}$/,
      "nb-NO": /^(\+?47)?[49]\d{7}$/,
      "ne-NP": /^(\+?977)?9[78]\d{8}$/,
      "nl-BE": /^(\+?32|0)4\d{8}$/,
      "nl-NL": /^(((\+|00)?31\(0\))|((\+|00)?31)|0)6{1}\d{8}$/,
      "nn-NO": /^(\+?47)?[49]\d{7}$/,
      "pl-PL": /^(\+?48)? ?[5-8]\d ?\d{3} ?\d{2} ?\d{2}$/,
      "pt-BR": /^((\+?55\ ?[1-9]{2}\ ?)|(\+?55\ ?\([1-9]{2}\)\ ?)|(0[1-9]{2}\ ?)|(\([1-9]{2}\)\ ?)|([1-9]{2}\ ?))((\d{4}\-?\d{4})|(9[2-9]{1}\d{3}\-?\d{4}))$/,
      "pt-PT": /^(\+?351)?9[1236]\d{7}$/,
      "pt-AO": /^(\+244)\d{9}$/,
      "ro-RO": /^(\+?4?0)\s?7\d{2}(\/|\s|\.|\-)?\d{3}(\s|\.|\-)?\d{3}$/,
      "ru-RU": /^(\+?7|8)?9\d{9}$/,
      "si-LK": /^(?:0|94|\+94)?(7(0|1|2|4|5|6|7|8)( |-)?)\d{7}$/,
      "sl-SI": /^(\+386\s?|0)(\d{1}\s?\d{3}\s?\d{2}\s?\d{2}|\d{2}\s?\d{3}\s?\d{3})$/,
      "sk-SK": /^(\+?421)? ?[1-9][0-9]{2} ?[0-9]{3} ?[0-9]{3}$/,
      "sq-AL": /^(\+355|0)6[789]\d{6}$/,
      "sr-RS": /^(\+3816|06)[- \d]{5,9}$/,
      "sv-SE": /^(\+?46|0)[\s\-]?7[\s\-]?[02369]([\s\-]?\d){7}$/,
      "tg-TJ": /^(\+?992)?[5][5]\d{7}$/,
      "th-TH": /^(\+66|66|0)\d{9}$/,
      "tr-TR": /^(\+?90|0)?5\d{9}$/,
      "tk-TM": /^(\+993|993|8)\d{8}$/,
      "uk-UA": /^(\+?38|8)?0\d{9}$/,
      "uz-UZ": /^(\+?998)?(6[125-79]|7[1-69]|88|9\d)\d{7}$/,
      "vi-VN": /^((\+?84)|0)((3([2-9]))|(5([25689]))|(7([0|6-9]))|(8([1-9]))|(9([0-9])))([0-9]{7})$/,
      "zh-CN": /^((\+|00)86)?(1[3-9]|9[28])\d{9}$/,
      "zh-TW": /^(\+?886\-?|0)?9\d{8}$/,
      "dz-BT": /^(\+?975|0)?(17|16|77|02)\d{6}$/
    };
    phones["en-CA"] = phones["en-US"];
    phones["fr-CA"] = phones["en-CA"];
    phones["fr-BE"] = phones["nl-BE"];
    phones["zh-HK"] = phones["en-HK"];
    phones["zh-MO"] = phones["en-MO"];
    phones["ga-IE"] = phones["en-IE"];
    phones["fr-CH"] = phones["de-CH"];
    phones["it-CH"] = phones["fr-CH"];
    function isMobilePhone(str, locale, options) {
      (0, _assertString.default)(str);
      if (options && options.strictMode && !str.startsWith("+")) {
        return false;
      }
      if (Array.isArray(locale)) {
        return locale.some(function(key2) {
          if (phones.hasOwnProperty(key2)) {
            var phone3 = phones[key2];
            if (phone3.test(str)) {
              return true;
            }
          }
          return false;
        });
      } else if (locale in phones) {
        return phones[locale].test(str);
      } else if (!locale || locale === "any") {
        for (var key in phones) {
          if (phones.hasOwnProperty(key)) {
            var phone2 = phones[key];
            if (phone2.test(str)) {
              return true;
            }
          }
        }
        return false;
      }
      throw new Error("Invalid locale '".concat(locale, "'"));
    }
    var locales = Object.keys(phones);
    exports.locales = locales;
  }
});

// node_modules/class-validator/cjs/decorator/string/IsMobilePhone.js
var require_IsMobilePhone = __commonJS({
  "node_modules/class-validator/cjs/decorator/string/IsMobilePhone.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IsMobilePhone = exports.isMobilePhone = exports.IS_MOBILE_PHONE = void 0;
    var ValidateBy_1 = require_ValidateBy();
    var isMobilePhone_1 = __importDefault(require_isMobilePhone());
    exports.IS_MOBILE_PHONE = "isMobilePhone";
    function isMobilePhone(value, locale, options) {
      return typeof value === "string" && isMobilePhone_1.default(value, locale, options);
    }
    exports.isMobilePhone = isMobilePhone;
    function IsMobilePhone(locale, options, validationOptions) {
      return ValidateBy_1.ValidateBy({
        name: exports.IS_MOBILE_PHONE,
        constraints: [locale, options],
        validator: {
          validate: (value, args) => isMobilePhone(value, args.constraints[0], args.constraints[1]),
          defaultMessage: ValidateBy_1.buildMessage((eachPrefix) => eachPrefix + "$property must be a phone number", validationOptions)
        }
      }, validationOptions);
    }
    exports.IsMobilePhone = IsMobilePhone;
  }
});

// node_modules/validator/lib/isISO31661Alpha2.js
var require_isISO31661Alpha2 = __commonJS({
  "node_modules/validator/lib/isISO31661Alpha2.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isISO31661Alpha2;
    exports.CountryCodes = void 0;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var validISO31661Alpha2CountriesCodes = new Set(["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"]);
    function isISO31661Alpha2(str) {
      (0, _assertString.default)(str);
      return validISO31661Alpha2CountriesCodes.has(str.toUpperCase());
    }
    var CountryCodes = validISO31661Alpha2CountriesCodes;
    exports.CountryCodes = CountryCodes;
  }
});

// node_modules/class-validator/cjs/decorator/string/IsISO31661Alpha2.js
var require_IsISO31661Alpha2 = __commonJS({
  "node_modules/class-validator/cjs/decorator/string/IsISO31661Alpha2.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IsISO31661Alpha2 = exports.isISO31661Alpha2 = exports.IS_ISO31661_ALPHA_2 = void 0;
    var ValidateBy_1 = require_ValidateBy();
    var isISO31661Alpha2_1 = __importDefault(require_isISO31661Alpha2());
    exports.IS_ISO31661_ALPHA_2 = "isISO31661Alpha2";
    function isISO31661Alpha2(value) {
      return typeof value === "string" && isISO31661Alpha2_1.default(value);
    }
    exports.isISO31661Alpha2 = isISO31661Alpha2;
    function IsISO31661Alpha2(validationOptions) {
      return ValidateBy_1.ValidateBy({
        name: exports.IS_ISO31661_ALPHA_2,
        validator: {
          validate: (value, args) => isISO31661Alpha2(value),
          defaultMessage: ValidateBy_1.buildMessage((eachPrefix) => eachPrefix + "$property must be a valid ISO31661 Alpha2 code", validationOptions)
        }
      }, validationOptions);
    }
    exports.IsISO31661Alpha2 = IsISO31661Alpha2;
  }
});

// node_modules/validator/lib/isISO31661Alpha3.js
var require_isISO31661Alpha3 = __commonJS({
  "node_modules/validator/lib/isISO31661Alpha3.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isISO31661Alpha3;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var validISO31661Alpha3CountriesCodes = new Set(["AFG", "ALA", "ALB", "DZA", "ASM", "AND", "AGO", "AIA", "ATA", "ATG", "ARG", "ARM", "ABW", "AUS", "AUT", "AZE", "BHS", "BHR", "BGD", "BRB", "BLR", "BEL", "BLZ", "BEN", "BMU", "BTN", "BOL", "BES", "BIH", "BWA", "BVT", "BRA", "IOT", "BRN", "BGR", "BFA", "BDI", "KHM", "CMR", "CAN", "CPV", "CYM", "CAF", "TCD", "CHL", "CHN", "CXR", "CCK", "COL", "COM", "COG", "COD", "COK", "CRI", "CIV", "HRV", "CUB", "CUW", "CYP", "CZE", "DNK", "DJI", "DMA", "DOM", "ECU", "EGY", "SLV", "GNQ", "ERI", "EST", "ETH", "FLK", "FRO", "FJI", "FIN", "FRA", "GUF", "PYF", "ATF", "GAB", "GMB", "GEO", "DEU", "GHA", "GIB", "GRC", "GRL", "GRD", "GLP", "GUM", "GTM", "GGY", "GIN", "GNB", "GUY", "HTI", "HMD", "VAT", "HND", "HKG", "HUN", "ISL", "IND", "IDN", "IRN", "IRQ", "IRL", "IMN", "ISR", "ITA", "JAM", "JPN", "JEY", "JOR", "KAZ", "KEN", "KIR", "PRK", "KOR", "KWT", "KGZ", "LAO", "LVA", "LBN", "LSO", "LBR", "LBY", "LIE", "LTU", "LUX", "MAC", "MKD", "MDG", "MWI", "MYS", "MDV", "MLI", "MLT", "MHL", "MTQ", "MRT", "MUS", "MYT", "MEX", "FSM", "MDA", "MCO", "MNG", "MNE", "MSR", "MAR", "MOZ", "MMR", "NAM", "NRU", "NPL", "NLD", "NCL", "NZL", "NIC", "NER", "NGA", "NIU", "NFK", "MNP", "NOR", "OMN", "PAK", "PLW", "PSE", "PAN", "PNG", "PRY", "PER", "PHL", "PCN", "POL", "PRT", "PRI", "QAT", "REU", "ROU", "RUS", "RWA", "BLM", "SHN", "KNA", "LCA", "MAF", "SPM", "VCT", "WSM", "SMR", "STP", "SAU", "SEN", "SRB", "SYC", "SLE", "SGP", "SXM", "SVK", "SVN", "SLB", "SOM", "ZAF", "SGS", "SSD", "ESP", "LKA", "SDN", "SUR", "SJM", "SWZ", "SWE", "CHE", "SYR", "TWN", "TJK", "TZA", "THA", "TLS", "TGO", "TKL", "TON", "TTO", "TUN", "TUR", "TKM", "TCA", "TUV", "UGA", "UKR", "ARE", "GBR", "USA", "UMI", "URY", "UZB", "VUT", "VEN", "VNM", "VGB", "VIR", "WLF", "ESH", "YEM", "ZMB", "ZWE"]);
    function isISO31661Alpha3(str) {
      (0, _assertString.default)(str);
      return validISO31661Alpha3CountriesCodes.has(str.toUpperCase());
    }
    module2.exports = exports.default;
    module2.exports.default = exports.default;
  }
});

// node_modules/class-validator/cjs/decorator/string/IsISO31661Alpha3.js
var require_IsISO31661Alpha3 = __commonJS({
  "node_modules/class-validator/cjs/decorator/string/IsISO31661Alpha3.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IsISO31661Alpha3 = exports.isISO31661Alpha3 = exports.IS_ISO31661_ALPHA_3 = void 0;
    var ValidateBy_1 = require_ValidateBy();
    var isISO31661Alpha3_1 = __importDefault(require_isISO31661Alpha3());
    exports.IS_ISO31661_ALPHA_3 = "isISO31661Alpha3";
    function isISO31661Alpha3(value) {
      return typeof value === "string" && isISO31661Alpha3_1.default(value);
    }
    exports.isISO31661Alpha3 = isISO31661Alpha3;
    function IsISO31661Alpha3(validationOptions) {
      return ValidateBy_1.ValidateBy({
        name: exports.IS_ISO31661_ALPHA_3,
        validator: {
          validate: (value, args) => isISO31661Alpha3(value),
          defaultMessage: ValidateBy_1.buildMessage((eachPrefix) => eachPrefix + "$property must be a valid ISO31661 Alpha3 code", validationOptions)
        }
      }, validationOptions);
    }
    exports.IsISO31661Alpha3 = IsISO31661Alpha3;
  }
});

// node_modules/validator/lib/isMongoId.js
var require_isMongoId = __commonJS({
  "node_modules/validator/lib/isMongoId.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isMongoId;
    var _assertString = _interopRequireDefault(require_assertString());
    var _isHexadecimal = _interopRequireDefault(require_isHexadecimal());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function isMongoId(str) {
      (0, _assertString.default)(str);
      return (0, _isHexadecimal.default)(str) && str.length === 24;
    }
    module2.exports = exports.default;
    module2.exports.default = exports.default;
  }
});

// node_modules/class-validator/cjs/decorator/string/IsMongoId.js
var require_IsMongoId = __commonJS({
  "node_modules/class-validator/cjs/decorator/string/IsMongoId.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IsMongoId = exports.isMongoId = exports.IS_MONGO_ID = void 0;
    var ValidateBy_1 = require_ValidateBy();
    var isMongoId_1 = __importDefault(require_isMongoId());
    exports.IS_MONGO_ID = "isMongoId";
    function isMongoId(value) {
      return typeof value === "string" && isMongoId_1.default(value);
    }
    exports.isMongoId = isMongoId;
    function IsMongoId(validationOptions) {
      return ValidateBy_1.ValidateBy({
        name: exports.IS_MONGO_ID,
        validator: {
          validate: (value, args) => isMongoId(value),
          defaultMessage: ValidateBy_1.buildMessage((eachPrefix) => eachPrefix + "$property must be a mongodb id", validationOptions)
        }
      }, validationOptions);
    }
    exports.IsMongoId = IsMongoId;
  }
});

// node_modules/validator/lib/isMultibyte.js
var require_isMultibyte = __commonJS({
  "node_modules/validator/lib/isMultibyte.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isMultibyte;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var multibyte = /[^\x00-\x7F]/;
    function isMultibyte(str) {
      (0, _assertString.default)(str);
      return multibyte.test(str);
    }
    module2.exports = exports.default;
    module2.exports.default = exports.default;
  }
});

// node_modules/class-validator/cjs/decorator/string/IsMultibyte.js
var require_IsMultibyte = __commonJS({
  "node_modules/class-validator/cjs/decorator/string/IsMultibyte.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IsMultibyte = exports.isMultibyte = exports.IS_MULTIBYTE = void 0;
    var ValidateBy_1 = require_ValidateBy();
    var isMultibyte_1 = __importDefault(require_isMultibyte());
    exports.IS_MULTIBYTE = "isMultibyte";
    function isMultibyte(value) {
      return typeof value === "string" && isMultibyte_1.default(value);
    }
    exports.isMultibyte = isMultibyte;
    function IsMultibyte(validationOptions) {
      return ValidateBy_1.ValidateBy({
        name: exports.IS_MULTIBYTE,
        validator: {
          validate: (value, args) => isMultibyte(value),
          defaultMessage: ValidateBy_1.buildMessage((eachPrefix) => eachPrefix + "$property must contain one or more multibyte chars", validationOptions)
        }
      }, validationOptions);
    }
    exports.IsMultibyte = IsMultibyte;
  }
});

// node_modules/validator/lib/isSurrogatePair.js
var require_isSurrogatePair = __commonJS({
  "node_modules/validator/lib/isSurrogatePair.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isSurrogatePair;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var surrogatePair = /[\uD800-\uDBFF][\uDC00-\uDFFF]/;
    function isSurrogatePair(str) {
      (0, _assertString.default)(str);
      return surrogatePair.test(str);
    }
    module2.exports = exports.default;
    module2.exports.default = exports.default;
  }
});

// node_modules/class-validator/cjs/decorator/string/IsSurrogatePair.js
var require_IsSurrogatePair = __commonJS({
  "node_modules/class-validator/cjs/decorator/string/IsSurrogatePair.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IsSurrogatePair = exports.isSurrogatePair = exports.IS_SURROGATE_PAIR = void 0;
    var ValidateBy_1 = require_ValidateBy();
    var isSurrogatePair_1 = __importDefault(require_isSurrogatePair());
    exports.IS_SURROGATE_PAIR = "isSurrogatePair";
    function isSurrogatePair(value) {
      return typeof value === "string" && isSurrogatePair_1.default(value);
    }
    exports.isSurrogatePair = isSurrogatePair;
    function IsSurrogatePair(validationOptions) {
      return ValidateBy_1.ValidateBy({
        name: exports.IS_SURROGATE_PAIR,
        validator: {
          validate: (value, args) => isSurrogatePair(value),
          defaultMessage: ValidateBy_1.buildMessage((eachPrefix) => eachPrefix + "$property must contain any surrogate pairs chars", validationOptions)
        }
      }, validationOptions);
    }
    exports.IsSurrogatePair = IsSurrogatePair;
  }
});

// node_modules/validator/lib/isURL.js
var require_isURL = __commonJS({
  "node_modules/validator/lib/isURL.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isURL;
    var _assertString = _interopRequireDefault(require_assertString());
    var _isFQDN = _interopRequireDefault(require_isFQDN());
    var _isIP = _interopRequireDefault(require_isIP());
    var _merge = _interopRequireDefault(require_merge());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _slicedToArray(arr, i) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
    }
    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o)
        return;
      if (typeof o === "string")
        return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor)
        n = o.constructor.name;
      if (n === "Map" || n === "Set")
        return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
        return _arrayLikeToArray(o, minLen);
    }
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }
      return arr2;
    }
    function _iterableToArrayLimit(arr, i) {
      if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr)))
        return;
      var _arr = [];
      var _n = true;
      var _d = false;
      var _e = void 0;
      try {
        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);
          if (i && _arr.length === i)
            break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null)
            _i["return"]();
        } finally {
          if (_d)
            throw _e;
        }
      }
      return _arr;
    }
    function _arrayWithHoles(arr) {
      if (Array.isArray(arr))
        return arr;
    }
    var default_url_options = {
      protocols: ["http", "https", "ftp"],
      require_tld: true,
      require_protocol: false,
      require_host: true,
      require_port: false,
      require_valid_protocol: true,
      allow_underscores: false,
      allow_trailing_dot: false,
      allow_protocol_relative_urls: false,
      allow_fragments: true,
      allow_query_components: true,
      validate_length: true
    };
    var wrapped_ipv6 = /^\[([^\]]+)\](?::([0-9]+))?$/;
    function isRegExp(obj) {
      return Object.prototype.toString.call(obj) === "[object RegExp]";
    }
    function checkHost(host, matches) {
      for (var i = 0; i < matches.length; i++) {
        var match = matches[i];
        if (host === match || isRegExp(match) && match.test(host)) {
          return true;
        }
      }
      return false;
    }
    function isURL(url, options) {
      (0, _assertString.default)(url);
      if (!url || /[\s<>]/.test(url)) {
        return false;
      }
      if (url.indexOf("mailto:") === 0) {
        return false;
      }
      options = (0, _merge.default)(options, default_url_options);
      if (options.validate_length && url.length >= 2083) {
        return false;
      }
      if (!options.allow_fragments && url.includes("#")) {
        return false;
      }
      if (!options.allow_query_components && (url.includes("?") || url.includes("&"))) {
        return false;
      }
      var protocol, auth, host, hostname, port2, port_str, split, ipv6;
      split = url.split("#");
      url = split.shift();
      split = url.split("?");
      url = split.shift();
      split = url.split("://");
      if (split.length > 1) {
        protocol = split.shift().toLowerCase();
        if (options.require_valid_protocol && options.protocols.indexOf(protocol) === -1) {
          return false;
        }
      } else if (options.require_protocol) {
        return false;
      } else if (url.substr(0, 2) === "//") {
        if (!options.allow_protocol_relative_urls) {
          return false;
        }
        split[0] = url.substr(2);
      }
      url = split.join("://");
      if (url === "") {
        return false;
      }
      split = url.split("/");
      url = split.shift();
      if (url === "" && !options.require_host) {
        return true;
      }
      split = url.split("@");
      if (split.length > 1) {
        if (options.disallow_auth) {
          return false;
        }
        if (split[0] === "") {
          return false;
        }
        auth = split.shift();
        if (auth.indexOf(":") >= 0 && auth.split(":").length > 2) {
          return false;
        }
        var _auth$split = auth.split(":"), _auth$split2 = _slicedToArray(_auth$split, 2), user = _auth$split2[0], password = _auth$split2[1];
        if (user === "" && password === "") {
          return false;
        }
      }
      hostname = split.join("@");
      port_str = null;
      ipv6 = null;
      var ipv6_match = hostname.match(wrapped_ipv6);
      if (ipv6_match) {
        host = "";
        ipv6 = ipv6_match[1];
        port_str = ipv6_match[2] || null;
      } else {
        split = hostname.split(":");
        host = split.shift();
        if (split.length) {
          port_str = split.join(":");
        }
      }
      if (port_str !== null && port_str.length > 0) {
        port2 = parseInt(port_str, 10);
        if (!/^[0-9]+$/.test(port_str) || port2 <= 0 || port2 > 65535) {
          return false;
        }
      } else if (options.require_port) {
        return false;
      }
      if (options.host_whitelist) {
        return checkHost(host, options.host_whitelist);
      }
      if (!(0, _isIP.default)(host) && !(0, _isFQDN.default)(host, options) && (!ipv6 || !(0, _isIP.default)(ipv6, 6))) {
        return false;
      }
      host = host || ipv6;
      if (options.host_blacklist && checkHost(host, options.host_blacklist)) {
        return false;
      }
      return true;
    }
    module2.exports = exports.default;
    module2.exports.default = exports.default;
  }
});

// node_modules/class-validator/cjs/decorator/string/IsUrl.js
var require_IsUrl = __commonJS({
  "node_modules/class-validator/cjs/decorator/string/IsUrl.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IsUrl = exports.isURL = exports.IS_URL = void 0;
    var ValidateBy_1 = require_ValidateBy();
    var isURL_1 = __importDefault(require_isURL());
    exports.IS_URL = "isUrl";
    function isURL(value, options) {
      return typeof value === "string" && isURL_1.default(value, options);
    }
    exports.isURL = isURL;
    function IsUrl(options, validationOptions) {
      return ValidateBy_1.ValidateBy({
        name: exports.IS_URL,
        constraints: [options],
        validator: {
          validate: (value, args) => isURL(value, args.constraints[0]),
          defaultMessage: ValidateBy_1.buildMessage((eachPrefix) => eachPrefix + "$property must be an URL address", validationOptions)
        }
      }, validationOptions);
    }
    exports.IsUrl = IsUrl;
  }
});

// node_modules/validator/lib/isUUID.js
var require_isUUID = __commonJS({
  "node_modules/validator/lib/isUUID.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isUUID;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var uuid = {
      1: /^[0-9A-F]{8}-[0-9A-F]{4}-1[0-9A-F]{3}-[0-9A-F]{4}-[0-9A-F]{12}$/i,
      2: /^[0-9A-F]{8}-[0-9A-F]{4}-2[0-9A-F]{3}-[0-9A-F]{4}-[0-9A-F]{12}$/i,
      3: /^[0-9A-F]{8}-[0-9A-F]{4}-3[0-9A-F]{3}-[0-9A-F]{4}-[0-9A-F]{12}$/i,
      4: /^[0-9A-F]{8}-[0-9A-F]{4}-4[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,
      5: /^[0-9A-F]{8}-[0-9A-F]{4}-5[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,
      all: /^[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}$/i
    };
    function isUUID(str, version2) {
      (0, _assertString.default)(str);
      var pattern = uuid[![void 0, null].includes(version2) ? version2 : "all"];
      return !!pattern && pattern.test(str);
    }
    module2.exports = exports.default;
    module2.exports.default = exports.default;
  }
});

// node_modules/class-validator/cjs/decorator/string/IsUUID.js
var require_IsUUID = __commonJS({
  "node_modules/class-validator/cjs/decorator/string/IsUUID.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IsUUID = exports.isUUID = exports.IS_UUID = void 0;
    var ValidateBy_1 = require_ValidateBy();
    var isUUID_1 = __importDefault(require_isUUID());
    exports.IS_UUID = "isUuid";
    function isUUID(value, version2) {
      return typeof value === "string" && isUUID_1.default(value, version2);
    }
    exports.isUUID = isUUID;
    function IsUUID(version2, validationOptions) {
      return ValidateBy_1.ValidateBy({
        name: exports.IS_UUID,
        constraints: [version2],
        validator: {
          validate: (value, args) => isUUID(value, args.constraints[0]),
          defaultMessage: ValidateBy_1.buildMessage((eachPrefix) => eachPrefix + "$property must be a UUID", validationOptions)
        }
      }, validationOptions);
    }
    exports.IsUUID = IsUUID;
  }
});

// node_modules/class-validator/cjs/decorator/string/IsFirebasePushId.js
var require_IsFirebasePushId = __commonJS({
  "node_modules/class-validator/cjs/decorator/string/IsFirebasePushId.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IsFirebasePushId = exports.isFirebasePushId = exports.IS_FIREBASE_PUSH_ID = void 0;
    var ValidateBy_1 = require_ValidateBy();
    exports.IS_FIREBASE_PUSH_ID = "IsFirebasePushId";
    function isFirebasePushId(value) {
      const webSafeRegex = /^[a-zA-Z0-9_-]*$/;
      return typeof value === "string" && value.length === 20 && webSafeRegex.test(value);
    }
    exports.isFirebasePushId = isFirebasePushId;
    function IsFirebasePushId(validationOptions) {
      return ValidateBy_1.ValidateBy({
        name: exports.IS_FIREBASE_PUSH_ID,
        validator: {
          validate: (value, args) => isFirebasePushId(value),
          defaultMessage: ValidateBy_1.buildMessage((eachPrefix) => eachPrefix + "$property must be a Firebase Push Id", validationOptions)
        }
      }, validationOptions);
    }
    exports.IsFirebasePushId = IsFirebasePushId;
  }
});

// node_modules/validator/lib/isUppercase.js
var require_isUppercase = __commonJS({
  "node_modules/validator/lib/isUppercase.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isUppercase;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function isUppercase(str) {
      (0, _assertString.default)(str);
      return str === str.toUpperCase();
    }
    module2.exports = exports.default;
    module2.exports.default = exports.default;
  }
});

// node_modules/class-validator/cjs/decorator/string/IsUppercase.js
var require_IsUppercase = __commonJS({
  "node_modules/class-validator/cjs/decorator/string/IsUppercase.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IsUppercase = exports.isUppercase = exports.IS_UPPERCASE = void 0;
    var ValidateBy_1 = require_ValidateBy();
    var isUppercase_1 = __importDefault(require_isUppercase());
    exports.IS_UPPERCASE = "isUppercase";
    function isUppercase(value) {
      return typeof value === "string" && isUppercase_1.default(value);
    }
    exports.isUppercase = isUppercase;
    function IsUppercase(validationOptions) {
      return ValidateBy_1.ValidateBy({
        name: exports.IS_UPPERCASE,
        validator: {
          validate: (value, args) => isUppercase(value),
          defaultMessage: ValidateBy_1.buildMessage((eachPrefix) => eachPrefix + "$property must be uppercase", validationOptions)
        }
      }, validationOptions);
    }
    exports.IsUppercase = IsUppercase;
  }
});

// node_modules/validator/lib/isLength.js
var require_isLength = __commonJS({
  "node_modules/validator/lib/isLength.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isLength;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    function isLength(str, options) {
      (0, _assertString.default)(str);
      var min;
      var max;
      if (_typeof(options) === "object") {
        min = options.min || 0;
        max = options.max;
      } else {
        min = arguments[1] || 0;
        max = arguments[2];
      }
      var surrogatePairs = str.match(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g) || [];
      var len = str.length - surrogatePairs.length;
      return len >= min && (typeof max === "undefined" || len <= max);
    }
    module2.exports = exports.default;
    module2.exports.default = exports.default;
  }
});

// node_modules/class-validator/cjs/decorator/string/Length.js
var require_Length = __commonJS({
  "node_modules/class-validator/cjs/decorator/string/Length.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Length = exports.length = exports.IS_LENGTH = void 0;
    var ValidateBy_1 = require_ValidateBy();
    var isLength_1 = __importDefault(require_isLength());
    exports.IS_LENGTH = "isLength";
    function length(value, min, max) {
      return typeof value === "string" && isLength_1.default(value, { min, max });
    }
    exports.length = length;
    function Length(min, max, validationOptions) {
      return ValidateBy_1.ValidateBy({
        name: exports.IS_LENGTH,
        constraints: [min, max],
        validator: {
          validate: (value, args) => length(value, args.constraints[0], args.constraints[1]),
          defaultMessage: ValidateBy_1.buildMessage((eachPrefix, args) => {
            const isMinLength = args.constraints[0] !== null && args.constraints[0] !== void 0;
            const isMaxLength = args.constraints[1] !== null && args.constraints[1] !== void 0;
            if (isMinLength && (!args.value || args.value.length < args.constraints[0])) {
              return eachPrefix + "$property must be longer than or equal to $constraint1 characters";
            } else if (isMaxLength && args.value.length > args.constraints[1]) {
              return eachPrefix + "$property must be shorter than or equal to $constraint2 characters";
            }
            return eachPrefix + "$property must be longer than or equal to $constraint1 and shorter than or equal to $constraint2 characters";
          }, validationOptions)
        }
      }, validationOptions);
    }
    exports.Length = Length;
  }
});

// node_modules/class-validator/cjs/decorator/string/MaxLength.js
var require_MaxLength = __commonJS({
  "node_modules/class-validator/cjs/decorator/string/MaxLength.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MaxLength = exports.maxLength = exports.MAX_LENGTH = void 0;
    var ValidateBy_1 = require_ValidateBy();
    var isLength_1 = __importDefault(require_isLength());
    exports.MAX_LENGTH = "maxLength";
    function maxLength(value, max) {
      return typeof value === "string" && isLength_1.default(value, { min: 0, max });
    }
    exports.maxLength = maxLength;
    function MaxLength(max, validationOptions) {
      return ValidateBy_1.ValidateBy({
        name: exports.MAX_LENGTH,
        constraints: [max],
        validator: {
          validate: (value, args) => maxLength(value, args.constraints[0]),
          defaultMessage: ValidateBy_1.buildMessage((eachPrefix) => eachPrefix + "$property must be shorter than or equal to $constraint1 characters", validationOptions)
        }
      }, validationOptions);
    }
    exports.MaxLength = MaxLength;
  }
});

// node_modules/class-validator/cjs/decorator/string/MinLength.js
var require_MinLength = __commonJS({
  "node_modules/class-validator/cjs/decorator/string/MinLength.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MinLength = exports.minLength = exports.MIN_LENGTH = void 0;
    var ValidateBy_1 = require_ValidateBy();
    var isLength_1 = __importDefault(require_isLength());
    exports.MIN_LENGTH = "minLength";
    function minLength(value, min) {
      return typeof value === "string" && isLength_1.default(value, { min });
    }
    exports.minLength = minLength;
    function MinLength(min, validationOptions) {
      return ValidateBy_1.ValidateBy({
        name: exports.MIN_LENGTH,
        constraints: [min],
        validator: {
          validate: (value, args) => minLength(value, args.constraints[0]),
          defaultMessage: ValidateBy_1.buildMessage((eachPrefix) => eachPrefix + "$property must be longer than or equal to $constraint1 characters", validationOptions)
        }
      }, validationOptions);
    }
    exports.MinLength = MinLength;
  }
});

// node_modules/validator/lib/matches.js
var require_matches = __commonJS({
  "node_modules/validator/lib/matches.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = matches;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function matches(str, pattern, modifiers) {
      (0, _assertString.default)(str);
      if (Object.prototype.toString.call(pattern) !== "[object RegExp]") {
        pattern = new RegExp(pattern, modifiers);
      }
      return pattern.test(str);
    }
    module2.exports = exports.default;
    module2.exports.default = exports.default;
  }
});

// node_modules/class-validator/cjs/decorator/string/Matches.js
var require_Matches = __commonJS({
  "node_modules/class-validator/cjs/decorator/string/Matches.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Matches = exports.matches = exports.MATCHES = void 0;
    var ValidateBy_1 = require_ValidateBy();
    var matches_1 = __importDefault(require_matches());
    exports.MATCHES = "matches";
    function matches(value, pattern, modifiers) {
      return typeof value === "string" && matches_1.default(value, pattern, modifiers);
    }
    exports.matches = matches;
    function Matches(pattern, modifiersOrAnnotationOptions, validationOptions) {
      let modifiers;
      if (modifiersOrAnnotationOptions && modifiersOrAnnotationOptions instanceof Object && !validationOptions) {
        validationOptions = modifiersOrAnnotationOptions;
      } else {
        modifiers = modifiersOrAnnotationOptions;
      }
      return ValidateBy_1.ValidateBy({
        name: exports.MATCHES,
        constraints: [pattern, modifiers],
        validator: {
          validate: (value, args) => matches(value, args.constraints[0], args.constraints[1]),
          defaultMessage: ValidateBy_1.buildMessage((eachPrefix, args) => eachPrefix + "$property must match $constraint1 regular expression", validationOptions)
        }
      }, validationOptions);
    }
    exports.Matches = Matches;
  }
});

// node_modules/libphonenumber-js/metadata.min.json
var require_metadata_min = __commonJS({
  "node_modules/libphonenumber-js/metadata.min.json"(exports, module2) {
    module2.exports = { version: 4, country_calling_codes: { "1": ["US", "AG", "AI", "AS", "BB", "BM", "BS", "CA", "DM", "DO", "GD", "GU", "JM", "KN", "KY", "LC", "MP", "MS", "PR", "SX", "TC", "TT", "VC", "VG", "VI"], "7": ["RU", "KZ"], "20": ["EG"], "27": ["ZA"], "30": ["GR"], "31": ["NL"], "32": ["BE"], "33": ["FR"], "34": ["ES"], "36": ["HU"], "39": ["IT", "VA"], "40": ["RO"], "41": ["CH"], "43": ["AT"], "44": ["GB", "GG", "IM", "JE"], "45": ["DK"], "46": ["SE"], "47": ["NO", "SJ"], "48": ["PL"], "49": ["DE"], "51": ["PE"], "52": ["MX"], "53": ["CU"], "54": ["AR"], "55": ["BR"], "56": ["CL"], "57": ["CO"], "58": ["VE"], "60": ["MY"], "61": ["AU", "CC", "CX"], "62": ["ID"], "63": ["PH"], "64": ["NZ"], "65": ["SG"], "66": ["TH"], "81": ["JP"], "82": ["KR"], "84": ["VN"], "86": ["CN"], "90": ["TR"], "91": ["IN"], "92": ["PK"], "93": ["AF"], "94": ["LK"], "95": ["MM"], "98": ["IR"], "211": ["SS"], "212": ["MA", "EH"], "213": ["DZ"], "216": ["TN"], "218": ["LY"], "220": ["GM"], "221": ["SN"], "222": ["MR"], "223": ["ML"], "224": ["GN"], "225": ["CI"], "226": ["BF"], "227": ["NE"], "228": ["TG"], "229": ["BJ"], "230": ["MU"], "231": ["LR"], "232": ["SL"], "233": ["GH"], "234": ["NG"], "235": ["TD"], "236": ["CF"], "237": ["CM"], "238": ["CV"], "239": ["ST"], "240": ["GQ"], "241": ["GA"], "242": ["CG"], "243": ["CD"], "244": ["AO"], "245": ["GW"], "246": ["IO"], "247": ["AC"], "248": ["SC"], "249": ["SD"], "250": ["RW"], "251": ["ET"], "252": ["SO"], "253": ["DJ"], "254": ["KE"], "255": ["TZ"], "256": ["UG"], "257": ["BI"], "258": ["MZ"], "260": ["ZM"], "261": ["MG"], "262": ["RE", "YT"], "263": ["ZW"], "264": ["NA"], "265": ["MW"], "266": ["LS"], "267": ["BW"], "268": ["SZ"], "269": ["KM"], "290": ["SH", "TA"], "291": ["ER"], "297": ["AW"], "298": ["FO"], "299": ["GL"], "350": ["GI"], "351": ["PT"], "352": ["LU"], "353": ["IE"], "354": ["IS"], "355": ["AL"], "356": ["MT"], "357": ["CY"], "358": ["FI", "AX"], "359": ["BG"], "370": ["LT"], "371": ["LV"], "372": ["EE"], "373": ["MD"], "374": ["AM"], "375": ["BY"], "376": ["AD"], "377": ["MC"], "378": ["SM"], "380": ["UA"], "381": ["RS"], "382": ["ME"], "383": ["XK"], "385": ["HR"], "386": ["SI"], "387": ["BA"], "389": ["MK"], "420": ["CZ"], "421": ["SK"], "423": ["LI"], "500": ["FK"], "501": ["BZ"], "502": ["GT"], "503": ["SV"], "504": ["HN"], "505": ["NI"], "506": ["CR"], "507": ["PA"], "508": ["PM"], "509": ["HT"], "590": ["GP", "BL", "MF"], "591": ["BO"], "592": ["GY"], "593": ["EC"], "594": ["GF"], "595": ["PY"], "596": ["MQ"], "597": ["SR"], "598": ["UY"], "599": ["CW", "BQ"], "670": ["TL"], "672": ["NF"], "673": ["BN"], "674": ["NR"], "675": ["PG"], "676": ["TO"], "677": ["SB"], "678": ["VU"], "679": ["FJ"], "680": ["PW"], "681": ["WF"], "682": ["CK"], "683": ["NU"], "685": ["WS"], "686": ["KI"], "687": ["NC"], "688": ["TV"], "689": ["PF"], "690": ["TK"], "691": ["FM"], "692": ["MH"], "850": ["KP"], "852": ["HK"], "853": ["MO"], "855": ["KH"], "856": ["LA"], "880": ["BD"], "886": ["TW"], "960": ["MV"], "961": ["LB"], "962": ["JO"], "963": ["SY"], "964": ["IQ"], "965": ["KW"], "966": ["SA"], "967": ["YE"], "968": ["OM"], "970": ["PS"], "971": ["AE"], "972": ["IL"], "973": ["BH"], "974": ["QA"], "975": ["BT"], "976": ["MN"], "977": ["NP"], "992": ["TJ"], "993": ["TM"], "994": ["AZ"], "995": ["GE"], "996": ["KG"], "998": ["UZ"] }, countries: { AC: ["247", "00", "(?:[01589]\\d|[46])\\d{4}", [5, 6]], AD: ["376", "00", "(?:1|6\\d)\\d{7}|[135-9]\\d{5}", [6, 8, 9], [["(\\d{3})(\\d{3})", "$1 $2", ["[135-9]"]], ["(\\d{4})(\\d{4})", "$1 $2", ["1"]], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["6"]]]], AE: ["971", "00", "(?:[4-7]\\d|9[0-689])\\d{7}|800\\d{2,9}|[2-4679]\\d{7}", [5, 6, 7, 8, 9, 10, 11, 12], [["(\\d{3})(\\d{2,9})", "$1 $2", ["60|8"]], ["(\\d)(\\d{3})(\\d{4})", "$1 $2 $3", ["[236]|[479][2-8]"], "0$1"], ["(\\d{3})(\\d)(\\d{5})", "$1 $2 $3", ["[479]"]], ["(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["5"], "0$1"]], "0"], AF: ["93", "00", "[2-7]\\d{8}", [9], [["(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["[2-7]"], "0$1"]], "0"], AG: ["1", "011", "(?:268|[58]\\d\\d|900)\\d{7}", [10], 0, "1", 0, "1|([457]\\d{6})$", "268$1", 0, "268"], AI: ["1", "011", "(?:264|[58]\\d\\d|900)\\d{7}", [10], 0, "1", 0, "1|([2457]\\d{6})$", "264$1", 0, "264"], AL: ["355", "00", "(?:700\\d\\d|900)\\d{3}|8\\d{5,7}|(?:[2-5]|6\\d)\\d{7}", [6, 7, 8, 9], [["(\\d{3})(\\d{3,4})", "$1 $2", ["80|9"], "0$1"], ["(\\d)(\\d{3})(\\d{4})", "$1 $2 $3", ["4[2-6]"], "0$1"], ["(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3", ["[2358][2-5]|4"], "0$1"], ["(\\d{3})(\\d{5})", "$1 $2", ["[23578]"], "0$1"], ["(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["6"], "0$1"]], "0"], AM: ["374", "00", "(?:[1-489]\\d|55|60|77)\\d{6}", [8], [["(\\d{3})(\\d{2})(\\d{3})", "$1 $2 $3", ["[89]0"], "0 $1"], ["(\\d{3})(\\d{5})", "$1 $2", ["2|3[12]"], "(0$1)"], ["(\\d{2})(\\d{6})", "$1 $2", ["1|47"], "(0$1)"], ["(\\d{2})(\\d{6})", "$1 $2", ["[3-9]"], "0$1"]], "0"], AO: ["244", "00", "[29]\\d{8}", [9], [["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[29]"]]]], AR: ["54", "00", "(?:11|[89]\\d\\d)\\d{8}|[2368]\\d{9}", [10, 11], [["(\\d{4})(\\d{2})(\\d{4})", "$1 $2-$3", ["2(?:2[024-9]|3[0-59]|47|6[245]|9[02-8])|3(?:3[28]|4[03-9]|5[2-46-8]|7[1-578]|8[2-9])", "2(?:[23]02|6(?:[25]|4[6-8])|9(?:[02356]|4[02568]|72|8[23]))|3(?:3[28]|4(?:[04679]|3[5-8]|5[4-68]|8[2379])|5(?:[2467]|3[237]|8[2-5])|7[1-578]|8(?:[2469]|3[2578]|5[4-8]|7[36-8]|8[5-8]))|2(?:2[24-9]|3[1-59]|47)", "2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3[78]|5(?:4[46]|8)|8[2379])|5(?:[2467]|3[237]|8[23])|7[1-578]|8(?:[2469]|3[278]|5[56][46]|86[3-6]))|2(?:2[24-9]|3[1-59]|47)|38(?:[58][78]|7[378])|3(?:4[35][56]|58[45]|8(?:[38]5|54|76))[4-6]", "2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3(?:5(?:4[0-25689]|[56])|[78])|58|8[2379])|5(?:[2467]|3[237]|8(?:[23]|4(?:[45]|60)|5(?:4[0-39]|5|64)))|7[1-578]|8(?:[2469]|3[278]|54(?:4|5[13-7]|6[89])|86[3-6]))|2(?:2[24-9]|3[1-59]|47)|38(?:[58][78]|7[378])|3(?:454|85[56])[46]|3(?:4(?:36|5[56])|8(?:[38]5|76))[4-6]"], "0$1", 1], ["(\\d{2})(\\d{4})(\\d{4})", "$1 $2-$3", ["1"], "0$1", 1], ["(\\d{3})(\\d{3})(\\d{4})", "$1-$2-$3", ["[68]"], "0$1"], ["(\\d{3})(\\d{3})(\\d{4})", "$1 $2-$3", ["[23]"], "0$1", 1], ["(\\d)(\\d{4})(\\d{2})(\\d{4})", "$2 15-$3-$4", ["9(?:2[2-469]|3[3-578])", "9(?:2(?:2[024-9]|3[0-59]|47|6[245]|9[02-8])|3(?:3[28]|4[03-9]|5[2-46-8]|7[1-578]|8[2-9]))", "9(?:2(?:[23]02|6(?:[25]|4[6-8])|9(?:[02356]|4[02568]|72|8[23]))|3(?:3[28]|4(?:[04679]|3[5-8]|5[4-68]|8[2379])|5(?:[2467]|3[237]|8[2-5])|7[1-578]|8(?:[2469]|3[2578]|5[4-8]|7[36-8]|8[5-8])))|92(?:2[24-9]|3[1-59]|47)", "9(?:2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3[78]|5(?:4[46]|8)|8[2379])|5(?:[2467]|3[237]|8[23])|7[1-578]|8(?:[2469]|3[278]|5(?:[56][46]|[78])|7[378]|8(?:6[3-6]|[78]))))|92(?:2[24-9]|3[1-59]|47)|93(?:4[35][56]|58[45]|8(?:[38]5|54|76))[4-6]", "9(?:2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3(?:5(?:4[0-25689]|[56])|[78])|5(?:4[46]|8)|8[2379])|5(?:[2467]|3[237]|8(?:[23]|4(?:[45]|60)|5(?:4[0-39]|5|64)))|7[1-578]|8(?:[2469]|3[278]|5(?:4(?:4|5[13-7]|6[89])|[56][46]|[78])|7[378]|8(?:6[3-6]|[78]))))|92(?:2[24-9]|3[1-59]|47)|93(?:4(?:36|5[56])|8(?:[38]5|76))[4-6]"], "0$1", 0, "$1 $2 $3-$4"], ["(\\d)(\\d{2})(\\d{4})(\\d{4})", "$2 15-$3-$4", ["91"], "0$1", 0, "$1 $2 $3-$4"], ["(\\d{3})(\\d{3})(\\d{5})", "$1-$2-$3", ["8"], "0$1"], ["(\\d)(\\d{3})(\\d{3})(\\d{4})", "$2 15-$3-$4", ["9"], "0$1", 0, "$1 $2 $3-$4"]], "0", 0, "0?(?:(11|2(?:2(?:02?|[13]|2[13-79]|4[1-6]|5[2457]|6[124-8]|7[1-4]|8[13-6]|9[1267])|3(?:02?|1[467]|2[03-6]|3[13-8]|[49][2-6]|5[2-8]|[67])|4(?:7[3-578]|9)|6(?:[0136]|2[24-6]|4[6-8]?|5[15-8])|80|9(?:0[1-3]|[19]|2\\d|3[1-6]|4[02568]?|5[2-4]|6[2-46]|72?|8[23]?))|3(?:3(?:2[79]|6|8[2578])|4(?:0[0-24-9]|[12]|3[5-8]?|4[24-7]|5[4-68]?|6[02-9]|7[126]|8[2379]?|9[1-36-8])|5(?:1|2[1245]|3[237]?|4[1-46-9]|6[2-4]|7[1-6]|8[2-5]?)|6[24]|7(?:[069]|1[1568]|2[15]|3[145]|4[13]|5[14-8]|7[2-57]|8[126])|8(?:[01]|2[15-7]|3[2578]?|4[13-6]|5[4-8]?|6[1-357-9]|7[36-8]?|8[5-8]?|9[124])))15)?", "9$1"], AS: ["1", "011", "(?:[58]\\d\\d|684|900)\\d{7}", [10], 0, "1", 0, "1|([267]\\d{6})$", "684$1", 0, "684"], AT: ["43", "00", "1\\d{3,12}|2\\d{6,12}|43(?:(?:0\\d|5[02-9])\\d{3,9}|2\\d{4,5}|[3467]\\d{4}|8\\d{4,6}|9\\d{4,7})|5\\d{4,12}|8\\d{7,12}|9\\d{8,12}|(?:[367]\\d|4[0-24-9])\\d{4,11}", [4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [["(\\d)(\\d{3,12})", "$1 $2", ["1(?:11|[2-9])"], "0$1"], ["(\\d{3})(\\d{2})", "$1 $2", ["517"], "0$1"], ["(\\d{2})(\\d{3,5})", "$1 $2", ["5[079]"], "0$1"], ["(\\d{3})(\\d{3,10})", "$1 $2", ["(?:31|4)6|51|6(?:5[0-3579]|[6-9])|7(?:20|32|8)|[89]"], "0$1"], ["(\\d{4})(\\d{3,9})", "$1 $2", ["[2-467]|5[2-6]"], "0$1"], ["(\\d{2})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["5"], "0$1"], ["(\\d{2})(\\d{4})(\\d{4,7})", "$1 $2 $3", ["5"], "0$1"]], "0"], AU: ["61", "001[14-689]|14(?:1[14]|34|4[17]|[56]6|7[47]|88)0011", "1(?:[0-79]\\d{7,8}|8[0-24-9]\\d{7})|[2-478]\\d{8}|1\\d{4,7}", [5, 6, 7, 8, 9, 10], [["(\\d{2})(\\d{3,4})", "$1 $2", ["16"], "0$1"], ["(\\d{2})(\\d{3})(\\d{2,4})", "$1 $2 $3", ["16"], "0$1"], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["14|4"], "0$1"], ["(\\d)(\\d{4})(\\d{4})", "$1 $2 $3", ["[2378]"], "(0$1)"], ["(\\d{4})(\\d{3})(\\d{3})", "$1 $2 $3", ["1(?:30|[89])"]]], "0", 0, "0|(183[12])", 0, 0, 0, [["(?:(?:2(?:[0-26-9]\\d|3[0-8]|4[02-9]|5[0135-9])|3(?:[0-3589]\\d|4[0-578]|6[1-9]|7[0-35-9])|7(?:[013-57-9]\\d|2[0-8]))\\d{3}|8(?:51(?:0(?:0[03-9]|[12479]\\d|3[2-9]|5[0-8]|6[1-9]|8[0-7])|1(?:[0235689]\\d|1[0-69]|4[0-589]|7[0-47-9])|2(?:0[0-79]|[18][13579]|2[14-9]|3[0-46-9]|[4-6]\\d|7[89]|9[0-4]))|(?:6[0-8]|[78]\\d)\\d{3}|9(?:[02-9]\\d{3}|1(?:(?:[0-58]\\d|6[0135-9])\\d|7(?:0[0-24-9]|[1-9]\\d)|9(?:[0-46-9]\\d|5[0-79])))))\\d{3}", [9]], ["4(?:83[0-38]|93[0-6])\\d{5}|4(?:[0-3]\\d|4[047-9]|5[0-25-9]|6[06-9]|7[02-9]|8[0-24-9]|9[0-27-9])\\d{6}", [9]], ["180(?:0\\d{3}|2)\\d{3}", [7, 10]], ["190[0-26]\\d{6}", [10]], 0, 0, 0, ["163\\d{2,6}", [5, 6, 7, 8, 9]], ["14(?:5(?:1[0458]|[23][458])|71\\d)\\d{4}", [9]], ["13(?:00\\d{3}|45[0-4])\\d{3}|13\\d{4}", [6, 8, 10]]], "0011"], AW: ["297", "00", "(?:[25-79]\\d\\d|800)\\d{4}", [7], [["(\\d{3})(\\d{4})", "$1 $2", ["[25-9]"]]]], AX: ["358", "00|99(?:[01469]|5(?:[14]1|3[23]|5[59]|77|88|9[09]))", "2\\d{4,9}|35\\d{4,5}|(?:60\\d\\d|800)\\d{4,6}|7\\d{5,11}|(?:[14]\\d|3[0-46-9]|50)\\d{4,8}", [5, 6, 7, 8, 9, 10, 11, 12], 0, "0", 0, 0, 0, 0, "18", 0, "00"], AZ: ["994", "00", "365\\d{6}|(?:[124579]\\d|60|88)\\d{7}", [9], [["(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["90"], "0$1"], ["(\\d{2})(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["1[28]|2|365|46", "1[28]|2|365[45]|46", "1[28]|2|365(?:4|5[02])|46"], "(0$1)"], ["(\\d{2})(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[13-9]"], "0$1"]], "0"], BA: ["387", "00", "6\\d{8}|(?:[35689]\\d|49|70)\\d{6}", [8, 9], [["(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3", ["6[1-3]|[7-9]"], "0$1"], ["(\\d{2})(\\d{3})(\\d{3})", "$1 $2-$3", ["[3-5]|6[56]"], "0$1"], ["(\\d{2})(\\d{2})(\\d{2})(\\d{3})", "$1 $2 $3 $4", ["6"], "0$1"]], "0"], BB: ["1", "011", "(?:246|[58]\\d\\d|900)\\d{7}", [10], 0, "1", 0, "1|([2-9]\\d{6})$", "246$1", 0, "246"], BD: ["880", "00", "[1-469]\\d{9}|8[0-79]\\d{7,8}|[2-79]\\d{8}|[2-9]\\d{7}|[3-9]\\d{6}|[57-9]\\d{5}", [6, 7, 8, 9, 10], [["(\\d{2})(\\d{4,6})", "$1-$2", ["31[5-8]|[459]1"], "0$1"], ["(\\d{3})(\\d{3,7})", "$1-$2", ["38[013-9]|4(?:6[168]|[89][18])|5(?:6[128]|9)|6(?:28|4[14]|5)|8(?:0[014-9]|1|2[1-3])|[34]7|7[2-589]|9[35]|(?:3[2-6]|4[235]|5[2-578]|6[0389]|76|8[3-7]|9[248])1|(?:44|66)[01346-9]", "38[013-9]|4(?:6[168]|[89][18])|5(?:6[128]|9)|6(?:28|4[14]|5)|8(?:0[014-9]|1|2(?:1[78]|[23]))|[34]7|7[2-589]|9[35]|(?:3[2-6]|4[235]|5[2-578]|6[0389]|76|8[3-7]|9[248])1|(?:44|66)[01346-9]"], "0$1"], ["(\\d{4})(\\d{3,6})", "$1-$2", ["[13-9]|2[23]"], "0$1"], ["(\\d)(\\d{7,8})", "$1-$2", ["2"], "0$1"]], "0"], BE: ["32", "00", "4\\d{8}|[1-9]\\d{7}", [8, 9], [["(\\d{3})(\\d{2})(\\d{3})", "$1 $2 $3", ["(?:80|9)0"], "0$1"], ["(\\d)(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[239]|4[23]"], "0$1"], ["(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[15-8]"], "0$1"], ["(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["4"], "0$1"]], "0"], BF: ["226", "00", "[025-7]\\d{7}", [8], [["(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[025-7]"]]]], BG: ["359", "00", "[2-7]\\d{6,7}|[89]\\d{6,8}|2\\d{5}", [6, 7, 8, 9], [["(\\d)(\\d)(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["2"], "0$1"], ["(\\d{3})(\\d{4})", "$1 $2", ["43[1-6]|70[1-9]"], "0$1"], ["(\\d)(\\d{3})(\\d{3,4})", "$1 $2 $3", ["2"], "0$1"], ["(\\d{2})(\\d{3})(\\d{2,3})", "$1 $2 $3", ["[356]|4[124-7]|7[1-9]|8[1-6]|9[1-7]"], "0$1"], ["(\\d{3})(\\d{2})(\\d{3})", "$1 $2 $3", ["(?:70|8)0"], "0$1"], ["(\\d{3})(\\d{3})(\\d{2})", "$1 $2 $3", ["43[1-7]|7"], "0$1"], ["(\\d{2})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["[48]|9[08]"], "0$1"], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["9"], "0$1"]], "0"], BH: ["973", "00", "[136-9]\\d{7}", [8], [["(\\d{4})(\\d{4})", "$1 $2", ["[13679]|8[047]"]]]], BI: ["257", "00", "(?:[267]\\d|31)\\d{6}", [8], [["(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[2367]"]]]], BJ: ["229", "00", "[25689]\\d{7}", [8], [["(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[25689]"]]]], BL: ["590", "00", "(?:590|(?:69|80)\\d|976)\\d{6}", [9], 0, "0", 0, 0, 0, 0, 0, [["590(?:2[7-9]|5[12]|87)\\d{4}"], ["69(?:0\\d\\d|1(?:2[2-9]|3[0-5]))\\d{4}"], ["80[0-5]\\d{6}"], 0, 0, 0, 0, 0, ["976[01]\\d{5}"]]], BM: ["1", "011", "(?:441|[58]\\d\\d|900)\\d{7}", [10], 0, "1", 0, "1|([2-8]\\d{6})$", "441$1", 0, "441"], BN: ["673", "00", "[2-578]\\d{6}", [7], [["(\\d{3})(\\d{4})", "$1 $2", ["[2-578]"]]]], BO: ["591", "00(?:1\\d)?", "(?:[2-467]\\d\\d|8001)\\d{5}", [8, 9], [["(\\d)(\\d{7})", "$1 $2", ["[23]|4[46]"]], ["(\\d{8})", "$1", ["[67]"]], ["(\\d{3})(\\d{2})(\\d{4})", "$1 $2 $3", ["8"]]], "0", 0, "0(1\\d)?"], BQ: ["599", "00", "(?:[34]1|7\\d)\\d{5}", [7], 0, 0, 0, 0, 0, 0, "[347]"], BR: ["55", "00(?:1[245]|2[1-35]|31|4[13]|[56]5|99)", "(?:[1-46-9]\\d\\d|5(?:[0-46-9]\\d|5[0-24679]))\\d{8}|[1-9]\\d{9}|[3589]\\d{8}|[34]\\d{7}", [8, 9, 10, 11], [["(\\d{4})(\\d{4})", "$1-$2", ["300|4(?:0[02]|37)", "4(?:02|37)0|[34]00"]], ["(\\d{3})(\\d{2,3})(\\d{4})", "$1 $2 $3", ["(?:[358]|90)0"], "0$1"], ["(\\d{2})(\\d{4})(\\d{4})", "$1 $2-$3", ["(?:[14689][1-9]|2[12478]|3[1-578]|5[13-5]|7[13-579])[2-57]"], "($1)"], ["(\\d{2})(\\d{5})(\\d{4})", "$1 $2-$3", ["[16][1-9]|[2-57-9]"], "($1)"]], "0", 0, "(?:0|90)(?:(1[245]|2[1-35]|31|4[13]|[56]5|99)(\\d{10,11}))?", "$2"], BS: ["1", "011", "(?:242|[58]\\d\\d|900)\\d{7}", [10], 0, "1", 0, "1|([3-8]\\d{6})$", "242$1", 0, "242"], BT: ["975", "00", "[17]\\d{7}|[2-8]\\d{6}", [7, 8], [["(\\d)(\\d{3})(\\d{3})", "$1 $2 $3", ["[2-68]|7[246]"]], ["(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["1[67]|7"]]]], BW: ["267", "00", "(?:0800|(?:[37]|800)\\d)\\d{6}|(?:[2-6]\\d|90)\\d{5}", [7, 8, 10], [["(\\d{2})(\\d{5})", "$1 $2", ["90"]], ["(\\d{3})(\\d{4})", "$1 $2", ["[24-6]|3[15-79]"]], ["(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3", ["[37]"]], ["(\\d{4})(\\d{3})(\\d{3})", "$1 $2 $3", ["0"]], ["(\\d{3})(\\d{4})(\\d{3})", "$1 $2 $3", ["8"]]]], BY: ["375", "810", "(?:[12]\\d|33|44|902)\\d{7}|8(?:0[0-79]\\d{5,7}|[1-7]\\d{9})|8(?:1[0-489]|[5-79]\\d)\\d{7}|8[1-79]\\d{6,7}|8[0-79]\\d{5}|8\\d{5}", [6, 7, 8, 9, 10, 11], [["(\\d{3})(\\d{3})", "$1 $2", ["800"], "8 $1"], ["(\\d{3})(\\d{2})(\\d{2,4})", "$1 $2 $3", ["800"], "8 $1"], ["(\\d{4})(\\d{2})(\\d{3})", "$1 $2-$3", ["1(?:5[169]|6[3-5]|7[179])|2(?:1[35]|2[34]|3[3-5])", "1(?:5[169]|6(?:3[1-3]|4|5[125])|7(?:1[3-9]|7[0-24-6]|9[2-7]))|2(?:1[35]|2[34]|3[3-5])"], "8 0$1"], ["(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2-$3-$4", ["1(?:[56]|7[467])|2[1-3]"], "8 0$1"], ["(\\d{2})(\\d{3})(\\d{2})(\\d{2})", "$1 $2-$3-$4", ["[1-4]"], "8 0$1"], ["(\\d{3})(\\d{3,4})(\\d{4})", "$1 $2 $3", ["[89]"], "8 $1"]], "8", 0, "0|80?", 0, 0, 0, 0, "8~10"], BZ: ["501", "00", "(?:0800\\d|[2-8])\\d{6}", [7, 11], [["(\\d{3})(\\d{4})", "$1-$2", ["[2-8]"]], ["(\\d)(\\d{3})(\\d{4})(\\d{3})", "$1-$2-$3-$4", ["0"]]]], CA: ["1", "011", "(?:[2-8]\\d|90)\\d{8}", [10], 0, "1", 0, 0, 0, 0, 0, [["(?:2(?:04|[23]6|[48]9|50)|3(?:06|43|6[578])|4(?:03|1[68]|3[178]|50|74)|5(?:06|1[49]|48|79|8[17])|6(?:04|13|39|47|72)|7(?:0[59]|78|8[02])|8(?:[06]7|19|25|73)|90[25])[2-9]\\d{6}"], [""], ["8(?:00|33|44|55|66|77|88)[2-9]\\d{6}"], ["900[2-9]\\d{6}"], ["52(?:3(?:[2-46-9][02-9]\\d|5(?:[02-46-9]\\d|5[0-46-9]))|4(?:[2-478][02-9]\\d|5(?:[034]\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\d)|9(?:[05-9]\\d|2[0-5]|49)))\\d{4}|52[34][2-9]1[02-9]\\d{4}|(?:5(?:00|2[12]|33|44|66|77|88)|622)[2-9]\\d{6}"], 0, 0, 0, ["600[2-9]\\d{6}"]]], CC: ["61", "001[14-689]|14(?:1[14]|34|4[17]|[56]6|7[47]|88)0011", "1(?:[0-79]\\d|8[0-24-9])\\d{7}|[148]\\d{8}|1\\d{5,7}", [6, 7, 8, 9, 10], 0, "0", 0, "0|([59]\\d{7})$", "8$1", 0, 0, [["8(?:51(?:0(?:02|31|60|89)|1(?:18|76)|223)|91(?:0(?:1[0-2]|29)|1(?:[28]2|50|79)|2(?:10|64)|3(?:[06]8|22)|4[29]8|62\\d|70[23]|959))\\d{3}", [9]], ["4(?:83[0-38]|93[0-6])\\d{5}|4(?:[0-3]\\d|4[047-9]|5[0-25-9]|6[06-9]|7[02-9]|8[0-24-9]|9[0-27-9])\\d{6}", [9]], ["180(?:0\\d{3}|2)\\d{3}", [7, 10]], ["190[0-26]\\d{6}", [10]], 0, 0, 0, 0, ["14(?:5(?:1[0458]|[23][458])|71\\d)\\d{4}", [9]], ["13(?:00\\d{3}|45[0-4])\\d{3}|13\\d{4}", [6, 8, 10]]], "0011"], CD: ["243", "00", "[189]\\d{8}|[1-68]\\d{6}", [7, 9], [["(\\d{2})(\\d{2})(\\d{3})", "$1 $2 $3", ["88"], "0$1"], ["(\\d{2})(\\d{5})", "$1 $2", ["[1-6]"], "0$1"], ["(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["1"], "0$1"], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[89]"], "0$1"]], "0"], CF: ["236", "00", "(?:[27]\\d{3}|8776)\\d{4}", [8], [["(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[278]"]]]], CG: ["242", "00", "(?:0\\d\\d|222|800)\\d{6}", [9], [["(\\d)(\\d{4})(\\d{4})", "$1 $2 $3", ["8"]], ["(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["[02]"]]]], CH: ["41", "00", "8\\d{11}|[2-9]\\d{8}", [9], [["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["8[047]|90"], "0$1"], ["(\\d{2})(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[2-79]|81"], "0$1"], ["(\\d{3})(\\d{2})(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3 $4 $5", ["8"], "0$1"]], "0"], CI: ["225", "00", "[02]\\d{9}", [10], [["(\\d{2})(\\d{2})(\\d)(\\d{5})", "$1 $2 $3 $4", ["2"]], ["(\\d{2})(\\d{2})(\\d{2})(\\d{4})", "$1 $2 $3 $4", ["0"]]]], CK: ["682", "00", "[2-578]\\d{4}", [5], [["(\\d{2})(\\d{3})", "$1 $2", ["[2-578]"]]]], CL: ["56", "(?:0|1(?:1[0-69]|2[02-5]|5[13-58]|69|7[0167]|8[018]))0", "12300\\d{6}|6\\d{9,10}|[2-9]\\d{8}", [9, 10, 11], [["(\\d{5})(\\d{4})", "$1 $2", ["219", "2196"], "($1)"], ["(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["44"]], ["(\\d)(\\d{4})(\\d{4})", "$1 $2 $3", ["2[1-3]"], "($1)"], ["(\\d)(\\d{4})(\\d{4})", "$1 $2 $3", ["9[2-9]"]], ["(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["3[2-5]|[47]|5[1-3578]|6[13-57]|8(?:0[1-9]|[1-9])"], "($1)"], ["(\\d{3})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["60|8"]], ["(\\d{4})(\\d{3})(\\d{4})", "$1 $2 $3", ["1"]], ["(\\d{3})(\\d{3})(\\d{2})(\\d{3})", "$1 $2 $3 $4", ["60"]]]], CM: ["237", "00", "[26]\\d{8}|88\\d{6,7}", [8, 9], [["(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["88"]], ["(\\d)(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4 $5", ["[26]|88"]]]], CN: ["86", "00|1(?:[12]\\d|79)\\d\\d00", "1[127]\\d{8,9}|2\\d{9}(?:\\d{2})?|[12]\\d{6,7}|86\\d{6}|(?:1[03-689]\\d|6)\\d{7,9}|(?:[3-579]\\d|8[0-57-9])\\d{6,9}", [7, 8, 9, 10, 11, 12], [["(\\d{2})(\\d{5,6})", "$1 $2", ["(?:10|2[0-57-9])[19]", "(?:10|2[0-57-9])(?:10|9[56])", "(?:10|2[0-57-9])(?:100|9[56])"], "0$1"], ["(\\d{3})(\\d{5,6})", "$1 $2", ["3(?:[157]|35|49|9[1-68])|4(?:[17]|2[179]|6[47-9]|8[23])|5(?:[1357]|2[37]|4[36]|6[1-46]|80)|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]|4[13]|5[1-5])|(?:4[35]|59|85)[1-9]", "(?:3(?:[157]\\d|35|49|9[1-68])|4(?:[17]\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\d|5[1-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\d|4[13]|5[1-5]))[19]", "85[23](?:10|95)|(?:3(?:[157]\\d|35|49|9[1-68])|4(?:[17]\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\d|5[14-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\d|4[13]|5[1-5]))(?:10|9[56])", "85[23](?:100|95)|(?:3(?:[157]\\d|35|49|9[1-68])|4(?:[17]\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\d|5[14-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\d|4[13]|5[1-5]))(?:100|9[56])"], "0$1"], ["(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["(?:4|80)0"]], ["(\\d{2})(\\d{4})(\\d{4})", "$1 $2 $3", ["10|2(?:[02-57-9]|1[1-9])", "10|2(?:[02-57-9]|1[1-9])", "10[0-79]|2(?:[02-57-9]|1[1-79])|(?:10|21)8(?:0[1-9]|[1-9])"], "0$1", 1], ["(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["3(?:[3-59]|7[02-68])|4(?:[26-8]|3[3-9]|5[2-9])|5(?:3[03-9]|[468]|7[028]|9[2-46-9])|6|7(?:[0-247]|3[04-9]|5[0-4689]|6[2368])|8(?:[1-358]|9[1-7])|9(?:[013479]|5[1-5])|(?:[34]1|55|79|87)[02-9]"], "0$1", 1], ["(\\d{3})(\\d{7,8})", "$1 $2", ["9"]], ["(\\d{4})(\\d{3})(\\d{4})", "$1 $2 $3", ["80"], "0$1", 1], ["(\\d{3})(\\d{4})(\\d{4})", "$1 $2 $3", ["[3-578]"], "0$1", 1], ["(\\d{3})(\\d{4})(\\d{4})", "$1 $2 $3", ["1[3-9]"]], ["(\\d{2})(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3 $4", ["[12]"], "0$1", 1]], "0", 0, "0|(1(?:[12]\\d|79)\\d\\d)", 0, 0, 0, 0, "00"], CO: ["57", "00(?:4(?:[14]4|56)|[579])", "(?:(?:1\\d|[36])\\d{3}|9101)\\d{6}|[124-8]\\d{7}", [8, 10, 11], [["(\\d)(\\d{7})", "$1 $2", ["[146][2-9]|[2578]"], "($1)"], ["(\\d{3})(\\d{7})", "$1 $2", ["6"], "($1)"], ["(\\d{3})(\\d{7})", "$1 $2", ["[39]"]], ["(\\d)(\\d{3})(\\d{7})", "$1-$2-$3", ["1"], "0$1", 0, "$1 $2 $3"]], "0", 0, "0([3579]|4(?:[14]4|56))?"], CR: ["506", "00", "(?:8\\d|90)\\d{8}|(?:[24-8]\\d{3}|3005)\\d{4}", [8, 10], [["(\\d{4})(\\d{4})", "$1 $2", ["[2-7]|8[3-9]"]], ["(\\d{3})(\\d{3})(\\d{4})", "$1-$2-$3", ["[89]"]]], 0, 0, "(19(?:0[0-2468]|1[09]|20|66|77|99))"], CU: ["53", "119", "[27]\\d{6,7}|[34]\\d{5,7}|(?:5|8\\d\\d)\\d{7}", [6, 7, 8, 10], [["(\\d{2})(\\d{4,6})", "$1 $2", ["2[1-4]|[34]"], "(0$1)"], ["(\\d)(\\d{6,7})", "$1 $2", ["7"], "(0$1)"], ["(\\d)(\\d{7})", "$1 $2", ["5"], "0$1"], ["(\\d{3})(\\d{7})", "$1 $2", ["8"], "0$1"]], "0"], CV: ["238", "0", "(?:[2-59]\\d\\d|800)\\d{4}", [7], [["(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3", ["[2-589]"]]]], CW: ["599", "00", "(?:[34]1|60|(?:7|9\\d)\\d)\\d{5}", [7, 8], [["(\\d{3})(\\d{4})", "$1 $2", ["[3467]"]], ["(\\d)(\\d{3})(\\d{4})", "$1 $2 $3", ["9[4-8]"]]], 0, 0, 0, 0, 0, "[69]"], CX: ["61", "001[14-689]|14(?:1[14]|34|4[17]|[56]6|7[47]|88)0011", "1(?:[0-79]\\d|8[0-24-9])\\d{7}|[148]\\d{8}|1\\d{5,7}", [6, 7, 8, 9, 10], 0, "0", 0, "0|([59]\\d{7})$", "8$1", 0, 0, [["8(?:51(?:0(?:01|30|59|88)|1(?:17|46|75)|2(?:22|35))|91(?:00[6-9]|1(?:[28]1|49|78)|2(?:09|63)|3(?:12|26|75)|4(?:56|97)|64\\d|7(?:0[01]|1[0-2])|958))\\d{3}", [9]], ["4(?:83[0-38]|93[0-6])\\d{5}|4(?:[0-3]\\d|4[047-9]|5[0-25-9]|6[06-9]|7[02-9]|8[0-24-9]|9[0-27-9])\\d{6}", [9]], ["180(?:0\\d{3}|2)\\d{3}", [7, 10]], ["190[0-26]\\d{6}", [10]], 0, 0, 0, 0, ["14(?:5(?:1[0458]|[23][458])|71\\d)\\d{4}", [9]], ["13(?:00\\d{3}|45[0-4])\\d{3}|13\\d{4}", [6, 8, 10]]], "0011"], CY: ["357", "00", "(?:[279]\\d|[58]0)\\d{6}", [8], [["(\\d{2})(\\d{6})", "$1 $2", ["[257-9]"]]]], CZ: ["420", "00", "(?:[2-578]\\d|60)\\d{7}|9\\d{8,11}", [9], [["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[2-8]|9[015-7]"]], ["(\\d{2})(\\d{3})(\\d{3})(\\d{2})", "$1 $2 $3 $4", ["96"]], ["(\\d{2})(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3 $4", ["9"]], ["(\\d{3})(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3 $4", ["9"]]]], DE: ["49", "00", "[2579]\\d{5,14}|49(?:[34]0|69|8\\d)\\d\\d?|49(?:37|49|60|7[089]|9\\d)\\d{1,3}|49(?:1\\d|2[02-9]|3[2-689]|7[1-7])\\d{1,8}|(?:1|[368]\\d|4[0-8])\\d{3,13}|49(?:[05]\\d|[23]1|[46][1-8])\\d{1,9}", [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [["(\\d{2})(\\d{3,13})", "$1 $2", ["3[02]|40|[68]9"], "0$1"], ["(\\d{3})(\\d{3,12})", "$1 $2", ["2(?:0[1-389]|1[124]|2[18]|3[14])|3(?:[35-9][15]|4[015])|906|(?:2[4-9]|4[2-9]|[579][1-9]|[68][1-8])1", "2(?:0[1-389]|12[0-8])|3(?:[35-9][15]|4[015])|906|2(?:[13][14]|2[18])|(?:2[4-9]|4[2-9]|[579][1-9]|[68][1-8])1"], "0$1"], ["(\\d{4})(\\d{2,11})", "$1 $2", ["[24-6]|3(?:[3569][02-46-9]|4[2-4679]|7[2-467]|8[2-46-8])|70[2-8]|8(?:0[2-9]|[1-8])|90[7-9]|[79][1-9]", "[24-6]|3(?:3(?:0[1-467]|2[127-9]|3[124578]|7[1257-9]|8[1256]|9[145])|4(?:2[135]|4[13578]|9[1346])|5(?:0[14]|2[1-3589]|6[1-4]|7[13468]|8[13568])|6(?:2[1-489]|3[124-6]|6[13]|7[12579]|8[1-356]|9[135])|7(?:2[1-7]|4[145]|6[1-5]|7[1-4])|8(?:21|3[1468]|6|7[1467]|8[136])|9(?:0[12479]|2[1358]|4[134679]|6[1-9]|7[136]|8[147]|9[1468]))|70[2-8]|8(?:0[2-9]|[1-8])|90[7-9]|[79][1-9]|3[68]4[1347]|3(?:47|60)[1356]|3(?:3[46]|46|5[49])[1246]|3[4579]3[1357]"], "0$1"], ["(\\d{3})(\\d{4})", "$1 $2", ["138"], "0$1"], ["(\\d{5})(\\d{2,10})", "$1 $2", ["3"], "0$1"], ["(\\d{3})(\\d{5,11})", "$1 $2", ["181"], "0$1"], ["(\\d{3})(\\d)(\\d{4,10})", "$1 $2 $3", ["1(?:3|80)|9"], "0$1"], ["(\\d{3})(\\d{7,8})", "$1 $2", ["1[67]"], "0$1"], ["(\\d{3})(\\d{7,12})", "$1 $2", ["8"], "0$1"], ["(\\d{5})(\\d{6})", "$1 $2", ["185", "1850", "18500"], "0$1"], ["(\\d{3})(\\d{4})(\\d{4})", "$1 $2 $3", ["7"], "0$1"], ["(\\d{4})(\\d{7})", "$1 $2", ["18[68]"], "0$1"], ["(\\d{5})(\\d{6})", "$1 $2", ["15[0568]"], "0$1"], ["(\\d{4})(\\d{7})", "$1 $2", ["15[1279]"], "0$1"], ["(\\d{3})(\\d{8})", "$1 $2", ["18"], "0$1"], ["(\\d{3})(\\d{2})(\\d{7,8})", "$1 $2 $3", ["1(?:6[023]|7)"], "0$1"], ["(\\d{4})(\\d{2})(\\d{7})", "$1 $2 $3", ["15[279]"], "0$1"], ["(\\d{3})(\\d{2})(\\d{8})", "$1 $2 $3", ["15"], "0$1"]], "0"], DJ: ["253", "00", "(?:2\\d|77)\\d{6}", [8], [["(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[27]"]]]], DK: ["45", "00", "[2-9]\\d{7}", [8], [["(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[2-9]"]]]], DM: ["1", "011", "(?:[58]\\d\\d|767|900)\\d{7}", [10], 0, "1", 0, "1|([2-7]\\d{6})$", "767$1", 0, "767"], DO: ["1", "011", "(?:[58]\\d\\d|900)\\d{7}", [10], 0, "1", 0, 0, 0, 0, "8001|8[024]9"], DZ: ["213", "00", "(?:[1-4]|[5-79]\\d|80)\\d{7}", [8, 9], [["(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[1-4]"], "0$1"], ["(\\d{2})(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["9"], "0$1"], ["(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[5-8]"], "0$1"]], "0"], EC: ["593", "00", "1\\d{9,10}|(?:[2-7]|9\\d)\\d{7}", [8, 9, 10, 11], [["(\\d)(\\d{3})(\\d{4})", "$1 $2-$3", ["[2-7]"], "(0$1)", 0, "$1-$2-$3"], ["(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["9"], "0$1"], ["(\\d{4})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["1"]]], "0"], EE: ["372", "00", "8\\d{9}|[4578]\\d{7}|(?:[3-8]\\d|90)\\d{5}", [7, 8, 10], [["(\\d{3})(\\d{4})", "$1 $2", ["[369]|4[3-8]|5(?:[0-2]|5[0-478]|6[45])|7[1-9]|88", "[369]|4[3-8]|5(?:[02]|1(?:[0-8]|95)|5[0-478]|6(?:4[0-4]|5[1-589]))|7[1-9]|88"]], ["(\\d{4})(\\d{3,4})", "$1 $2", ["[45]|8(?:00|[1-49])", "[45]|8(?:00[1-9]|[1-49])"]], ["(\\d{2})(\\d{2})(\\d{4})", "$1 $2 $3", ["7"]], ["(\\d{4})(\\d{3})(\\d{3})", "$1 $2 $3", ["8"]]]], EG: ["20", "00", "[189]\\d{8,9}|[24-6]\\d{8}|[135]\\d{7}", [8, 9, 10], [["(\\d)(\\d{7,8})", "$1 $2", ["[23]"], "0$1"], ["(\\d{2})(\\d{6,7})", "$1 $2", ["1[35]|[4-6]|8[2468]|9[235-7]"], "0$1"], ["(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["[189]"], "0$1"]], "0"], EH: ["212", "00", "[5-8]\\d{8}", [9], 0, "0", 0, 0, 0, 0, "528[89]"], ER: ["291", "00", "[178]\\d{6}", [7], [["(\\d)(\\d{3})(\\d{3})", "$1 $2 $3", ["[178]"], "0$1"]], "0"], ES: ["34", "00", "[5-9]\\d{8}", [9], [["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[89]00"]], ["(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[5-9]"]]]], ET: ["251", "00", "(?:11|[2-59]\\d)\\d{7}", [9], [["(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["[1-59]"], "0$1"]], "0"], FI: ["358", "00|99(?:[01469]|5(?:[14]1|3[23]|5[59]|77|88|9[09]))", "[1-35689]\\d{4}|7\\d{10,11}|(?:[124-7]\\d|3[0-46-9])\\d{8}|[1-9]\\d{5,8}", [5, 6, 7, 8, 9, 10, 11, 12], [["(\\d)(\\d{4,9})", "$1 $2", ["[2568][1-8]|3(?:0[1-9]|[1-9])|9"], "0$1"], ["(\\d{3})(\\d{3,7})", "$1 $2", ["[12]00|[368]|70[07-9]"], "0$1"], ["(\\d{2})(\\d{4,8})", "$1 $2", ["[1245]|7[135]"], "0$1"], ["(\\d{2})(\\d{6,10})", "$1 $2", ["7"], "0$1"]], "0", 0, 0, 0, 0, "1[03-79]|[2-9]", 0, "00"], FJ: ["679", "0(?:0|52)", "45\\d{5}|(?:0800\\d|[235-9])\\d{6}", [7, 11], [["(\\d{3})(\\d{4})", "$1 $2", ["[235-9]|45"]], ["(\\d{4})(\\d{3})(\\d{4})", "$1 $2 $3", ["0"]]], 0, 0, 0, 0, 0, 0, 0, "00"], FK: ["500", "00", "[2-7]\\d{4}", [5]], FM: ["691", "00", "(?:[39]\\d\\d|820)\\d{4}", [7], [["(\\d{3})(\\d{4})", "$1 $2", ["[389]"]]]], FO: ["298", "00", "[2-9]\\d{5}", [6], [["(\\d{6})", "$1", ["[2-9]"]]], 0, 0, "(10(?:01|[12]0|88))"], FR: ["33", "00", "[1-9]\\d{8}", [9], [["(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["8"], "0 $1"], ["(\\d)(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4 $5", ["[1-79]"], "0$1"]], "0"], GA: ["241", "00", "(?:[067]\\d|11)\\d{6}|[2-7]\\d{6}", [7, 8], [["(\\d)(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[2-7]"], "0$1"], ["(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["11|[67]"], "0$1"], ["(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["0"]]], 0, 0, "0(11\\d{6}|60\\d{6}|61\\d{6}|6[256]\\d{6}|7[47]\\d{6}|76\\d{6})", "$1"], GB: ["44", "00", "[1-357-9]\\d{9}|[18]\\d{8}|8\\d{6}", [7, 9, 10], [["(\\d{3})(\\d{4})", "$1 $2", ["800", "8001", "80011", "800111", "8001111"], "0$1"], ["(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3", ["845", "8454", "84546", "845464"], "0$1"], ["(\\d{3})(\\d{6})", "$1 $2", ["800"], "0$1"], ["(\\d{5})(\\d{4,5})", "$1 $2", ["1(?:38|5[23]|69|76|94)", "1(?:(?:38|69)7|5(?:24|39)|768|946)", "1(?:3873|5(?:242|39[4-6])|(?:697|768)[347]|9467)"], "0$1"], ["(\\d{4})(\\d{5,6})", "$1 $2", ["1(?:[2-69][02-9]|[78])"], "0$1"], ["(\\d{2})(\\d{4})(\\d{4})", "$1 $2 $3", ["[25]|7(?:0|6[02-9])", "[25]|7(?:0|6(?:[03-9]|2[356]))"], "0$1"], ["(\\d{4})(\\d{6})", "$1 $2", ["7"], "0$1"], ["(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["[1389]"], "0$1"]], "0", 0, 0, 0, 0, 0, [["(?:1(?:1(?:3(?:[0-58]\\d\\d|73[0235])|4(?:[0-5]\\d\\d|69[7-9]|70[0359])|(?:5[0-26-9]|[78][0-49])\\d\\d|6(?:[0-4]\\d\\d|50[02459]))|2(?:(?:0[024-9]|2[3-9]|3[3-79]|4[1-689]|[58][02-9]|6[0-47-9]|7[013-9]|9\\d)\\d\\d|1(?:[0-7]\\d\\d|8(?:[02]\\d|1[0-278])))|(?:3(?:0\\d|1[0-8]|[25][02-9]|3[02-579]|[468][0-46-9]|7[1-35-79]|9[2-578])|4(?:0[03-9]|[137]\\d|[28][02-57-9]|4[02-69]|5[0-8]|[69][0-79])|5(?:0[1-35-9]|[16]\\d|2[024-9]|3[015689]|4[02-9]|5[03-9]|7[0-35-9]|8[0-468]|9[0-57-9])|6(?:0[034689]|1\\d|2[0-35689]|[38][013-9]|4[1-467]|5[0-69]|6[13-9]|7[0-8]|9[0-24578])|7(?:0[0246-9]|2\\d|3[0236-8]|4[03-9]|5[0-46-9]|6[013-9]|7[0-35-9]|8[024-9]|9[02-9])|8(?:0[35-9]|2[1-57-9]|3[02-578]|4[0-578]|5[124-9]|6[2-69]|7\\d|8[02-9]|9[02569])|9(?:0[02-589]|[18]\\d|2[02-689]|3[1-57-9]|4[2-9]|5[0-579]|6[2-47-9]|7[0-24578]|9[2-57]))\\d\\d)|2(?:0[013478]|3[0189]|4[017]|8[0-46-9]|9[0-2])\\d{3})\\d{4}|1(?:2(?:0(?:46[1-4]|87[2-9])|545[1-79]|76(?:2\\d|3[1-8]|6[1-6])|9(?:7(?:2[0-4]|3[2-5])|8(?:2[2-8]|7[0-47-9]|8[3-5])))|3(?:6(?:38[2-5]|47[23])|8(?:47[04-9]|64[0157-9]))|4(?:044[1-7]|20(?:2[23]|8\\d)|6(?:0(?:30|5[2-57]|6[1-8]|7[2-8])|140)|8(?:052|87[1-3]))|5(?:2(?:4(?:3[2-79]|6\\d)|76\\d)|6(?:26[06-9]|686))|6(?:06(?:4\\d|7[4-79])|295[5-7]|35[34]\\d|47(?:24|61)|59(?:5[08]|6[67]|74)|9(?:55[0-4]|77[23]))|7(?:26(?:6[13-9]|7[0-7])|(?:442|688)\\d|50(?:2[0-3]|[3-68]2|76))|8(?:27[56]\\d|37(?:5[2-5]|8[239])|843[2-58])|9(?:0(?:0(?:6[1-8]|85)|52\\d)|3583|4(?:66[1-8]|9(?:2[01]|81))|63(?:23|3[1-4])|9561))\\d{3}", [9, 10]], ["7(?:457[0-57-9]|700[01]|911[028])\\d{5}|7(?:[1-3]\\d\\d|4(?:[0-46-9]\\d|5[0-689])|5(?:0[0-8]|[13-9]\\d|2[0-35-9])|7(?:0[1-9]|[1-7]\\d|8[02-9]|9[0-689])|8(?:[014-9]\\d|[23][0-8])|9(?:[024-9]\\d|1[02-9]|3[0-689]))\\d{6}", [10]], ["80[08]\\d{7}|800\\d{6}|8001111"], ["(?:8(?:4[2-5]|7[0-3])|9(?:[01]\\d|8[2-49]))\\d{7}|845464\\d", [7, 10]], ["70\\d{8}", [10]], 0, ["(?:3[0347]|55)\\d{8}", [10]], ["76(?:464|652)\\d{5}|76(?:0[0-2]|2[356]|34|4[01347]|5[49]|6[0-369]|77|81|9[139])\\d{6}", [10]], ["56\\d{8}", [10]]], 0, " x"], GD: ["1", "011", "(?:473|[58]\\d\\d|900)\\d{7}", [10], 0, "1", 0, "1|([2-9]\\d{6})$", "473$1", 0, "473"], GE: ["995", "00", "(?:[3-57]\\d\\d|800)\\d{6}", [9], [["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["70"], "0$1"], ["(\\d{2})(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["32"], "0$1"], ["(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[57]"]], ["(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[348]"], "0$1"]], "0"], GF: ["594", "00", "(?:[56]94|80\\d|976)\\d{6}", [9], [["(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[569]"], "0$1"], ["(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["8"], "0$1"]], "0"], GG: ["44", "00", "(?:1481|[357-9]\\d{3})\\d{6}|8\\d{6}(?:\\d{2})?", [7, 9, 10], 0, "0", 0, "0|([25-9]\\d{5})$", "1481$1", 0, 0, [["1481[25-9]\\d{5}", [10]], ["7(?:(?:781|839)\\d|911[17])\\d{5}", [10]], ["80[08]\\d{7}|800\\d{6}|8001111"], ["(?:8(?:4[2-5]|7[0-3])|9(?:[01]\\d|8[0-3]))\\d{7}|845464\\d", [7, 10]], ["70\\d{8}", [10]], 0, ["(?:3[0347]|55)\\d{8}", [10]], ["76(?:464|652)\\d{5}|76(?:0[0-2]|2[356]|34|4[01347]|5[49]|6[0-369]|77|81|9[139])\\d{6}", [10]], ["56\\d{8}", [10]]]], GH: ["233", "00", "(?:[235]\\d{3}|800)\\d{5}", [8, 9], [["(\\d{3})(\\d{5})", "$1 $2", ["8"], "0$1"], ["(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["[235]"], "0$1"]], "0"], GI: ["350", "00", "(?:[25]\\d\\d|606)\\d{5}", [8], [["(\\d{3})(\\d{5})", "$1 $2", ["2"]]]], GL: ["299", "00", "(?:19|[2-689]\\d|70)\\d{4}", [6], [["(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3", ["19|[2-9]"]]]], GM: ["220", "00", "[2-9]\\d{6}", [7], [["(\\d{3})(\\d{4})", "$1 $2", ["[2-9]"]]]], GN: ["224", "00", "722\\d{6}|(?:3|6\\d)\\d{7}", [8, 9], [["(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["3"]], ["(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[67]"]]]], GP: ["590", "00", "(?:590|(?:69|80)\\d|976)\\d{6}", [9], [["(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[569]"], "0$1"], ["(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["8"], "0$1"]], "0", 0, 0, 0, 0, 0, [["590(?:0[1-68]|1[0-2]|2[0-68]|3[1289]|4[0-24-9]|5[3-579]|6[0189]|7[08]|8[0-689]|9\\d)\\d{4}"], ["69(?:0\\d\\d|1(?:2[2-9]|3[0-5]))\\d{4}"], ["80[0-5]\\d{6}"], 0, 0, 0, 0, 0, ["976[01]\\d{5}"]]], GQ: ["240", "00", "222\\d{6}|(?:3\\d|55|[89]0)\\d{7}", [9], [["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[235]"]], ["(\\d{3})(\\d{6})", "$1 $2", ["[89]"]]]], GR: ["30", "00", "5005000\\d{3}|8\\d{9,11}|(?:[269]\\d|70)\\d{8}", [10, 11, 12], [["(\\d{2})(\\d{4})(\\d{4})", "$1 $2 $3", ["21|7"]], ["(\\d{4})(\\d{6})", "$1 $2", ["2(?:2|3[2-57-9]|4[2-469]|5[2-59]|6[2-9]|7[2-69]|8[2-49])|5"]], ["(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["[2689]"]], ["(\\d{3})(\\d{3,4})(\\d{5})", "$1 $2 $3", ["8"]]]], GT: ["502", "00", "(?:1\\d{3}|[2-7])\\d{7}", [8, 11], [["(\\d{4})(\\d{4})", "$1 $2", ["[2-7]"]], ["(\\d{4})(\\d{3})(\\d{4})", "$1 $2 $3", ["1"]]]], GU: ["1", "011", "(?:[58]\\d\\d|671|900)\\d{7}", [10], 0, "1", 0, "1|([3-9]\\d{6})$", "671$1", 0, "671"], GW: ["245", "00", "[49]\\d{8}|4\\d{6}", [7, 9], [["(\\d{3})(\\d{4})", "$1 $2", ["40"]], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[49]"]]]], GY: ["592", "001", "(?:862\\d|9008)\\d{3}|(?:[2-46]\\d|77)\\d{5}", [7], [["(\\d{3})(\\d{4})", "$1 $2", ["[2-46-9]"]]]], HK: ["852", "00(?:30|5[09]|[126-9]?)", "8[0-46-9]\\d{6,7}|9\\d{4}(?:\\d(?:\\d(?:\\d{4})?)?)?|(?:[235-79]\\d|46)\\d{6}", [5, 6, 7, 8, 9, 11], [["(\\d{3})(\\d{2,5})", "$1 $2", ["900", "9003"]], ["(\\d{4})(\\d{4})", "$1 $2", ["[2-7]|8[1-4]|9(?:0[1-9]|[1-8])"]], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["8"]], ["(\\d{3})(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3 $4", ["9"]]], 0, 0, 0, 0, 0, 0, 0, "00"], HN: ["504", "00", "8\\d{10}|[237-9]\\d{7}", [8, 11], [["(\\d{4})(\\d{4})", "$1-$2", ["[237-9]"]]]], HR: ["385", "00", "(?:[24-69]\\d|3[0-79])\\d{7}|80\\d{5,7}|[1-79]\\d{7}|6\\d{5,6}", [6, 7, 8, 9], [["(\\d{2})(\\d{2})(\\d{2,3})", "$1 $2 $3", ["6[01]"], "0$1"], ["(\\d{3})(\\d{2})(\\d{2,3})", "$1 $2 $3", ["8"], "0$1"], ["(\\d)(\\d{4})(\\d{3})", "$1 $2 $3", ["1"], "0$1"], ["(\\d{2})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["[67]"], "0$1"], ["(\\d{2})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["9"], "0$1"], ["(\\d{2})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["[2-5]"], "0$1"], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["8"], "0$1"]], "0"], HT: ["509", "00", "[2-489]\\d{7}", [8], [["(\\d{2})(\\d{2})(\\d{4})", "$1 $2 $3", ["[2-489]"]]]], HU: ["36", "00", "[235-7]\\d{8}|[1-9]\\d{7}", [8, 9], [["(\\d)(\\d{3})(\\d{4})", "$1 $2 $3", ["1"], "(06 $1)"], ["(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3", ["[27][2-9]|3[2-7]|4[24-9]|5[2-79]|6|8[2-57-9]|9[2-69]"], "(06 $1)"], ["(\\d{2})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["[2-9]"], "06 $1"]], "06"], ID: ["62", "00[89]", "(?:(?:00[1-9]|8\\d)\\d{4}|[1-36])\\d{6}|00\\d{10}|[1-9]\\d{8,10}|[2-9]\\d{7}", [7, 8, 9, 10, 11, 12, 13], [["(\\d)(\\d{3})(\\d{3})", "$1 $2 $3", ["15"]], ["(\\d{2})(\\d{5,9})", "$1 $2", ["2[124]|[36]1"], "(0$1)"], ["(\\d{3})(\\d{5,7})", "$1 $2", ["800"], "0$1"], ["(\\d{3})(\\d{5,8})", "$1 $2", ["[2-79]"], "(0$1)"], ["(\\d{3})(\\d{3,4})(\\d{3})", "$1-$2-$3", ["8[1-35-9]"], "0$1"], ["(\\d{3})(\\d{6,8})", "$1 $2", ["1"], "0$1"], ["(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["804"], "0$1"], ["(\\d{3})(\\d)(\\d{3})(\\d{3})", "$1 $2 $3 $4", ["80"], "0$1"], ["(\\d{3})(\\d{4})(\\d{4,5})", "$1-$2-$3", ["8"], "0$1"]], "0"], IE: ["353", "00", "(?:1\\d|[2569])\\d{6,8}|4\\d{6,9}|7\\d{8}|8\\d{8,9}", [7, 8, 9, 10], [["(\\d{2})(\\d{5})", "$1 $2", ["2[24-9]|47|58|6[237-9]|9[35-9]"], "(0$1)"], ["(\\d{3})(\\d{5})", "$1 $2", ["[45]0"], "(0$1)"], ["(\\d)(\\d{3,4})(\\d{4})", "$1 $2 $3", ["1"], "(0$1)"], ["(\\d{2})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["[2569]|4[1-69]|7[14]"], "(0$1)"], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["70"], "0$1"], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["81"], "(0$1)"], ["(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["[78]"], "0$1"], ["(\\d{4})(\\d{3})(\\d{3})", "$1 $2 $3", ["1"]], ["(\\d{2})(\\d{4})(\\d{4})", "$1 $2 $3", ["4"], "(0$1)"], ["(\\d{2})(\\d)(\\d{3})(\\d{4})", "$1 $2 $3 $4", ["8"], "0$1"]], "0"], IL: ["972", "0(?:0|1[2-9])", "1\\d{6}(?:\\d{3,5})?|[57]\\d{8}|[1-489]\\d{7}", [7, 8, 9, 10, 11, 12], [["(\\d{4})(\\d{3})", "$1-$2", ["125"]], ["(\\d{4})(\\d{2})(\\d{2})", "$1-$2-$3", ["121"]], ["(\\d)(\\d{3})(\\d{4})", "$1-$2-$3", ["[2-489]"], "0$1"], ["(\\d{2})(\\d{3})(\\d{4})", "$1-$2-$3", ["[57]"], "0$1"], ["(\\d{4})(\\d{3})(\\d{3})", "$1-$2-$3", ["12"]], ["(\\d{4})(\\d{6})", "$1-$2", ["159"]], ["(\\d)(\\d{3})(\\d{3})(\\d{3})", "$1-$2-$3-$4", ["1[7-9]"]], ["(\\d{3})(\\d{1,2})(\\d{3})(\\d{4})", "$1-$2 $3-$4", ["15"]]], "0"], IM: ["44", "00", "1624\\d{6}|(?:[3578]\\d|90)\\d{8}", [10], 0, "0", 0, "0|([25-8]\\d{5})$", "1624$1", 0, "74576|(?:16|7[56])24"], IN: ["91", "00", "(?:000800|[2-9]\\d\\d)\\d{7}|1\\d{7,12}", [8, 9, 10, 11, 12, 13], [["(\\d{8})", "$1", ["5(?:0|2[23]|3[03]|[67]1|88)", "5(?:0|2(?:21|3)|3(?:0|3[23])|616|717|888)", "5(?:0|2(?:21|3)|3(?:0|3[23])|616|717|8888)"], 0, 1], ["(\\d{4})(\\d{4,5})", "$1 $2", ["180", "1800"], 0, 1], ["(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["140"], 0, 1], ["(\\d{2})(\\d{4})(\\d{4})", "$1 $2 $3", ["11|2[02]|33|4[04]|79[1-7]|80[2-46]", "11|2[02]|33|4[04]|79(?:[1-6]|7[19])|80(?:[2-4]|6[0-589])", "11|2[02]|33|4[04]|79(?:[124-6]|3(?:[02-9]|1[0-24-9])|7(?:1|9[1-6]))|80(?:[2-4]|6[0-589])"], "0$1", 1], ["(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["1(?:2[0-249]|3[0-25]|4[145]|[68]|7[1257])|2(?:1[257]|3[013]|4[01]|5[0137]|6[0158]|78|8[1568])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|5[12]|[78]1)|6(?:12|[2-4]1|5[17]|6[13]|80)|7(?:12|3[134]|4[47]|61|88)|8(?:16|2[014]|3[126]|6[136]|7[078]|8[34]|91)|(?:43|59|75)[15]|(?:1[59]|29|67|72)[14]", "1(?:2[0-24]|3[0-25]|4[145]|[59][14]|6[1-9]|7[1257]|8[1-57-9])|2(?:1[257]|3[013]|4[01]|5[0137]|6[058]|78|8[1568]|9[14])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|3[15]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|[578]1|9[15])|674|7(?:(?:2[14]|3[34]|5[15])[2-6]|61[346]|88[0-8])|8(?:70[2-6]|84[235-7]|91[3-7])|(?:1(?:29|60|8[06])|261|552|6(?:12|[2-47]1|5[17]|6[13]|80)|7(?:12|31|4[47])|8(?:16|2[014]|3[126]|6[136]|7[78]|83))[2-7]", "1(?:2[0-24]|3[0-25]|4[145]|[59][14]|6[1-9]|7[1257]|8[1-57-9])|2(?:1[257]|3[013]|4[01]|5[0137]|6[058]|78|8[1568]|9[14])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|3[15]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|[578]1|9[15])|6(?:12(?:[2-6]|7[0-8])|74[2-7])|7(?:(?:2[14]|5[15])[2-6]|3171|61[346]|88(?:[2-7]|82))|8(?:70[2-6]|84(?:[2356]|7[19])|91(?:[3-6]|7[19]))|73[134][2-6]|(?:74[47]|8(?:16|2[014]|3[126]|6[136]|7[78]|83))(?:[2-6]|7[19])|(?:1(?:29|60|8[06])|261|552|6(?:[2-4]1|5[17]|6[13]|7(?:1|4[0189])|80)|7(?:12|88[01]))[2-7]"], "0$1", 1], ["(\\d{4})(\\d{3})(\\d{3})", "$1 $2 $3", ["1(?:[2-479]|5[0235-9])|[2-5]|6(?:1[1358]|2[2457-9]|3[2-5]|4[235-7]|5[2-689]|6[24578]|7[235689]|8[1-6])|7(?:1[013-9]|28|3[129]|4[1-35689]|5[29]|6[02-5]|70)|807", "1(?:[2-479]|5[0235-9])|[2-5]|6(?:1[1358]|2(?:[2457]|84|95)|3(?:[2-4]|55)|4[235-7]|5[2-689]|6[24578]|7[235689]|8[1-6])|7(?:1(?:[013-8]|9[6-9])|28[6-8]|3(?:17|2[0-49]|9[2-57])|4(?:1[2-4]|[29][0-7]|3[0-8]|[56]|8[0-24-7])|5(?:2[1-3]|9[0-6])|6(?:0[5689]|2[5-9]|3[02-8]|4|5[0-367])|70[13-7])|807[19]", "1(?:[2-479]|5(?:[0236-9]|5[013-9]))|[2-5]|6(?:2(?:84|95)|355|83)|73179|807(?:1|9[1-3])|(?:1552|6(?:1[1358]|2[2457]|3[2-4]|4[235-7]|5[2-689]|6[24578]|7[235689]|8[124-6])\\d|7(?:1(?:[013-8]\\d|9[6-9])|28[6-8]|3(?:2[0-49]|9[2-57])|4(?:1[2-4]|[29][0-7]|3[0-8]|[56]\\d|8[0-24-7])|5(?:2[1-3]|9[0-6])|6(?:0[5689]|2[5-9]|3[02-8]|4\\d|5[0-367])|70[13-7]))[2-7]"], "0$1", 1], ["(\\d{5})(\\d{5})", "$1 $2", ["[6-9]"], "0$1", 1], ["(\\d{4})(\\d{2,4})(\\d{4})", "$1 $2 $3", ["1(?:6|8[06])", "1(?:6|8[06]0)"], 0, 1], ["(\\d{4})(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3 $4", ["18"], 0, 1]], "0"], IO: ["246", "00", "3\\d{6}", [7], [["(\\d{3})(\\d{4})", "$1 $2", ["3"]]]], IQ: ["964", "00", "(?:1|7\\d\\d)\\d{7}|[2-6]\\d{7,8}", [8, 9, 10], [["(\\d)(\\d{3})(\\d{4})", "$1 $2 $3", ["1"], "0$1"], ["(\\d{2})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["[2-6]"], "0$1"], ["(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["7"], "0$1"]], "0"], IR: ["98", "00", "[1-9]\\d{9}|(?:[1-8]\\d\\d|9)\\d{3,4}", [4, 5, 6, 7, 10], [["(\\d{4,5})", "$1", ["96"], "0$1"], ["(\\d{2})(\\d{4,5})", "$1 $2", ["(?:1[137]|2[13-68]|3[1458]|4[145]|5[1468]|6[16]|7[1467]|8[13467])[12689]"], "0$1"], ["(\\d{3})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["9"], "0$1"], ["(\\d{2})(\\d{4})(\\d{4})", "$1 $2 $3", ["[1-8]"], "0$1"]], "0"], IS: ["354", "00|1(?:0(?:01|[12]0)|100)", "(?:38\\d|[4-9])\\d{6}", [7, 9], [["(\\d{3})(\\d{4})", "$1 $2", ["[4-9]"]], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["3"]]], 0, 0, 0, 0, 0, 0, 0, "00"], IT: ["39", "00", "0\\d{5,10}|3[0-8]\\d{7,10}|55\\d{8}|8\\d{5}(?:\\d{2,4})?|(?:1\\d|39)\\d{7,8}", [6, 7, 8, 9, 10, 11], [["(\\d{2})(\\d{4,6})", "$1 $2", ["0[26]"]], ["(\\d{3})(\\d{3,6})", "$1 $2", ["0[13-57-9][0159]|8(?:03|4[17]|9[245])", "0[13-57-9][0159]|8(?:03|4[17]|9(?:2|[45][0-4]))"]], ["(\\d{4})(\\d{2,6})", "$1 $2", ["0(?:[13-579][2-46-8]|8[236-8])"]], ["(\\d{4})(\\d{4})", "$1 $2", ["894"]], ["(\\d{2})(\\d{3,4})(\\d{4})", "$1 $2 $3", ["0[26]|5"]], ["(\\d{3})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["1[4679]|[38]"]], ["(\\d{3})(\\d{3,4})(\\d{4})", "$1 $2 $3", ["0[13-57-9][0159]"]], ["(\\d{2})(\\d{4})(\\d{5})", "$1 $2 $3", ["0[26]"]], ["(\\d{4})(\\d{3})(\\d{4})", "$1 $2 $3", ["0"]], ["(\\d{3})(\\d{4})(\\d{4,5})", "$1 $2 $3", ["3"]]], 0, 0, 0, 0, 0, 0, [["0669[0-79]\\d{1,6}|0(?:1(?:[0159]\\d|[27][1-5]|31|4[1-4]|6[1356]|8[2-57])|2\\d\\d|3(?:[0159]\\d|2[1-4]|3[12]|[48][1-6]|6[2-59]|7[1-7])|4(?:[0159]\\d|[23][1-9]|4[245]|6[1-5]|7[1-4]|81)|5(?:[0159]\\d|2[1-5]|3[2-6]|4[1-79]|6[4-6]|7[1-578]|8[3-8])|6(?:[0-57-9]\\d|6[0-8])|7(?:[0159]\\d|2[12]|3[1-7]|4[2-46]|6[13569]|7[13-6]|8[1-59])|8(?:[0159]\\d|2[3-578]|3[1-356]|[6-8][1-5])|9(?:[0159]\\d|[238][1-5]|4[12]|6[1-8]|7[1-6]))\\d{2,7}"], ["3[1-9]\\d{8}|3[2-9]\\d{7}", [9, 10]], ["80(?:0\\d{3}|3)\\d{3}", [6, 9]], ["(?:0878\\d\\d|89(?:2|4[5-9]\\d))\\d{3}|89[45][0-4]\\d\\d|(?:1(?:44|6[346])|89(?:5[5-9]|9))\\d{6}", [6, 8, 9, 10]], ["1(?:78\\d|99)\\d{6}", [9, 10]], 0, 0, 0, ["55\\d{8}", [10]], ["84(?:[08]\\d{3}|[17])\\d{3}", [6, 9]]]], JE: ["44", "00", "1534\\d{6}|(?:[3578]\\d|90)\\d{8}", [10], 0, "0", 0, "0|([0-24-8]\\d{5})$", "1534$1", 0, 0, [["1534[0-24-8]\\d{5}"], ["7(?:(?:(?:50|82)9|937)\\d|7(?:00[378]|97[7-9]))\\d{5}"], ["80(?:07(?:35|81)|8901)\\d{4}"], ["(?:8(?:4(?:4(?:4(?:05|42|69)|703)|5(?:041|800))|7(?:0002|1206))|90(?:066[59]|1810|71(?:07|55)))\\d{4}"], ["701511\\d{4}"], 0, ["(?:3(?:0(?:07(?:35|81)|8901)|3\\d{4}|4(?:4(?:4(?:05|42|69)|703)|5(?:041|800))|7(?:0002|1206))|55\\d{4})\\d{4}"], ["76(?:464|652)\\d{5}|76(?:0[0-2]|2[356]|34|4[01347]|5[49]|6[0-369]|77|81|9[139])\\d{6}"], ["56\\d{8}"]]], JM: ["1", "011", "(?:[58]\\d\\d|658|900)\\d{7}", [10], 0, "1", 0, 0, 0, 0, "658|876"], JO: ["962", "00", "(?:(?:[2689]|7\\d)\\d|32|53)\\d{6}", [8, 9], [["(\\d)(\\d{3})(\\d{4})", "$1 $2 $3", ["[2356]|87"], "(0$1)"], ["(\\d{3})(\\d{5,6})", "$1 $2", ["[89]"], "0$1"], ["(\\d{2})(\\d{7})", "$1 $2", ["70"], "0$1"], ["(\\d)(\\d{4})(\\d{4})", "$1 $2 $3", ["7"], "0$1"]], "0"], JP: ["81", "010", "00[1-9]\\d{6,14}|[257-9]\\d{9}|(?:00|[1-9]\\d\\d)\\d{6}", [8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [["(\\d{3})(\\d{3})(\\d{3})", "$1-$2-$3", ["(?:12|57|99)0"], "0$1"], ["(\\d{4})(\\d)(\\d{4})", "$1-$2-$3", ["1(?:26|3[79]|4[56]|5[4-68]|6[3-5])|499|5(?:76|97)|746|8(?:3[89]|47|51|63)|9(?:49|80|9[16])", "1(?:267|3(?:7[247]|9[278])|466|5(?:47|58|64)|6(?:3[245]|48|5[4-68]))|499[2468]|5(?:76|97)9|7468|8(?:3(?:8[7-9]|96)|477|51[2-9]|636)|9(?:496|802|9(?:1[23]|69))|1(?:45|58)[67]", "1(?:267|3(?:7[247]|9[278])|466|5(?:47|58|64)|6(?:3[245]|48|5[4-68]))|499[2468]|5(?:769|979[2-69])|7468|8(?:3(?:8[7-9]|96[2457-9])|477|51[2-9]|636[457-9])|9(?:496|802|9(?:1[23]|69))|1(?:45|58)[67]"], "0$1"], ["(\\d{2})(\\d{3})(\\d{4})", "$1-$2-$3", ["60"], "0$1"], ["(\\d)(\\d{4})(\\d{4})", "$1-$2-$3", ["[36]|4(?:2[09]|7[01])", "[36]|4(?:2(?:0|9[02-69])|7(?:0[019]|1))"], "0$1"], ["(\\d{2})(\\d{3})(\\d{4})", "$1-$2-$3", ["1(?:1|5[45]|77|88|9[69])|2(?:2[1-37]|3[0-269]|4[59]|5|6[24]|7[1-358]|8[1369]|9[0-38])|4(?:[28][1-9]|3[0-57]|[45]|6[248]|7[2-579]|9[29])|5(?:2|3[045]|4[0-369]|5[29]|8[02389]|9[0-389])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9[2-6])|8(?:2[124589]|3[27-9]|49|51|6|7[0-468]|8[68]|9[019])|9(?:[23][1-9]|4[15]|5[138]|6[1-3]|7[156]|8[189]|9[1-489])", "1(?:1|5(?:4[018]|5[017])|77|88|9[69])|2(?:2(?:[127]|3[014-9])|3[0-269]|4[59]|5(?:[1-3]|5[0-69]|9[19])|62|7(?:[1-35]|8[0189])|8(?:[16]|3[0134]|9[0-5])|9(?:[028]|17))|4(?:2(?:[13-79]|8[014-6])|3[0-57]|[45]|6[248]|7[2-47]|8[1-9])|5(?:2|3[045]|4[0-369]|8[02389]|9[0-3])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9(?:[23]|4[0-59]|5[01569]|6[0167]))|8(?:2(?:[1258]|4[0-39]|9[0-2469])|49|51|6(?:[0-24]|36|5[0-3589]|72|9[01459])|7[0-468]|8[68])|9(?:[23][1-9]|4[15]|5[138]|6[1-3]|7[156]|8[189]|9(?:[1289]|3[34]|4[0178]))|(?:49|55|83)[29]|(?:264|837)[016-9]|2(?:57|93)[015-9]|(?:25[0468]|422|838)[01]|(?:47[59]|59[89]|8(?:6[68]|9))[019]", "1(?:1|5(?:4[018]|5[017])|77|88|9[69])|2(?:2[127]|3[0-269]|4[59]|5(?:[1-3]|5[0-69]|9(?:17|99))|6(?:2|4[016-9])|7(?:[1-35]|8[0189])|8(?:[16]|3[0134]|9[0-5])|9(?:[028]|17))|4(?:2(?:[13-79]|8[014-6])|3[0-57]|[45]|6[248]|7[2-47]|9[29])|5(?:2|3[045]|4[0-369]|5[29]|8[02389]|9[0-3])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9(?:[23]|4[0-59]|5[01569]|6[0167]))|8(?:2(?:[1258]|4[0-39]|9[0169])|3(?:[29]|7(?:[017-9]|6[6-8]))|49|51|6(?:[0-24]|36[23]|5(?:[0-389]|5[23])|6(?:[01]|9[178])|72|9[0145])|7[0-468]|8[68])|9(?:4[15]|5[138]|7[156]|8[189]|9(?:[1289]|3(?:31|4[357])|4[0178]))|(?:8294|96)[1-3]|2(?:57|93)[015-9]|(?:223|8699)[014-9]|(?:25[0468]|422|838)[01]|(?:48|8292|9[23])[1-9]|(?:47[59]|59[89]|8(?:68|9))[019]", "1(?:1|5(?:4[018]|5[017])|77|88|9[69])|2(?:2[127]|3[0-269]|4[59]|5(?:[1-3]|5[0-69]|7[015-9]|9(?:17|99))|6(?:2|4[016-9])|7(?:[1-35]|8[0189])|8(?:[16]|3[0134]|9[0-5])|9(?:[028]|17|3[015-9]))|4(?:2(?:[13-79]|8[014-6])|3[0-57]|[45]|6[248]|7[2-47]|9[29])|5(?:2|3[045]|4[0-369]|5[29]|8[02389]|9[0-3])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9(?:[23]|4[0-59]|5[01569]|6[0167]))|8(?:2(?:[1258]|4[0-39]|9(?:[019]|4[1-3]|6(?:[0-47-9]|5[01346-9])))|3(?:[29]|7(?:[017-9]|6[6-8]))|49|51|6(?:[0-24]|36[23]|5(?:[0-389]|5[23])|6(?:[01]|9[178])|72|9[0145])|7[0-468]|8[68])|9(?:4[15]|5[138]|6[1-3]|7[156]|8[189]|9(?:[1289]|3(?:31|4[357])|4[0178]))|(?:223|8699)[014-9]|(?:25[0468]|422|838)[01]|(?:48|829(?:2|66)|9[23])[1-9]|(?:47[59]|59[89]|8(?:68|9))[019]"], "0$1"], ["(\\d{3})(\\d{2})(\\d{4})", "$1-$2-$3", ["[14]|[289][2-9]|5[3-9]|7[2-4679]"], "0$1"], ["(\\d{3})(\\d{3})(\\d{4})", "$1-$2-$3", ["800"], "0$1"], ["(\\d{2})(\\d{4})(\\d{4})", "$1-$2-$3", ["[257-9]"], "0$1"]], "0"], KE: ["254", "000", "(?:[17]\\d\\d|900)\\d{6}|(?:2|80)0\\d{6,7}|[4-6]\\d{6,8}", [7, 8, 9, 10], [["(\\d{2})(\\d{5,7})", "$1 $2", ["[24-6]"], "0$1"], ["(\\d{3})(\\d{6})", "$1 $2", ["[17]"], "0$1"], ["(\\d{3})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["[89]"], "0$1"]], "0"], KG: ["996", "00", "8\\d{9}|(?:[235-8]\\d|99)\\d{7}", [9, 10], [["(\\d{4})(\\d{5})", "$1 $2", ["3(?:1[346]|[24-79])"], "0$1"], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[235-79]|88"], "0$1"], ["(\\d{3})(\\d{3})(\\d)(\\d{2,3})", "$1 $2 $3 $4", ["8"], "0$1"]], "0"], KH: ["855", "00[14-9]", "1\\d{9}|[1-9]\\d{7,8}", [8, 9, 10], [["(\\d{2})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["[1-9]"], "0$1"], ["(\\d{4})(\\d{3})(\\d{3})", "$1 $2 $3", ["1"]]], "0"], KI: ["686", "00", "(?:[37]\\d|6[0-79])\\d{6}|(?:[2-48]\\d|50)\\d{3}", [5, 8], 0, "0"], KM: ["269", "00", "[3478]\\d{6}", [7], [["(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3", ["[3478]"]]]], KN: ["1", "011", "(?:[58]\\d\\d|900)\\d{7}", [10], 0, "1", 0, "1|([2-7]\\d{6})$", "869$1", 0, "869"], KP: ["850", "00|99", "85\\d{6}|(?:19\\d|[2-7])\\d{7}", [8, 10], [["(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3", ["8"], "0$1"], ["(\\d)(\\d{3})(\\d{4})", "$1 $2 $3", ["[2-7]"], "0$1"], ["(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["1"], "0$1"]], "0"], KR: ["82", "00(?:[125689]|3(?:[46]5|91)|7(?:00|27|3|55|6[126]))", "00[1-9]\\d{8,11}|(?:[12]|5\\d{3})\\d{7}|[13-6]\\d{9}|(?:[1-6]\\d|80)\\d{7}|[3-6]\\d{4,5}|(?:00|7)0\\d{8}", [5, 6, 8, 9, 10, 11, 12, 13, 14], [["(\\d{2})(\\d{3,4})", "$1-$2", ["(?:3[1-3]|[46][1-4]|5[1-5])1"], "0$1"], ["(\\d{4})(\\d{4})", "$1-$2", ["1"]], ["(\\d)(\\d{3,4})(\\d{4})", "$1-$2-$3", ["2"], "0$1"], ["(\\d{2})(\\d{3})(\\d{4})", "$1-$2-$3", ["60|8"], "0$1"], ["(\\d{2})(\\d{3,4})(\\d{4})", "$1-$2-$3", ["[1346]|5[1-5]"], "0$1"], ["(\\d{2})(\\d{4})(\\d{4})", "$1-$2-$3", ["[57]"], "0$1"], ["(\\d{2})(\\d{5})(\\d{4})", "$1-$2-$3", ["5"], "0$1"]], "0", 0, "0(8(?:[1-46-8]|5\\d\\d))?"], KW: ["965", "00", "18\\d{5}|(?:[2569]\\d|41)\\d{6}", [7, 8], [["(\\d{4})(\\d{3,4})", "$1 $2", ["[169]|2(?:[235]|4[1-35-9])|52"]], ["(\\d{3})(\\d{5})", "$1 $2", ["[245]"]]]], KY: ["1", "011", "(?:345|[58]\\d\\d|900)\\d{7}", [10], 0, "1", 0, "1|([2-9]\\d{6})$", "345$1", 0, "345"], KZ: ["7", "810", "(?:33622|8\\d{8})\\d{5}|[78]\\d{9}", [10, 14], 0, "8", 0, 0, 0, 0, "33|7", 0, "8~10"], LA: ["856", "00", "[23]\\d{9}|3\\d{8}|(?:[235-8]\\d|41)\\d{6}", [8, 9, 10], [["(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3", ["2[13]|3[14]|[4-8]"], "0$1"], ["(\\d{2})(\\d{2})(\\d{2})(\\d{3})", "$1 $2 $3 $4", ["30[013-9]"], "0$1"], ["(\\d{2})(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3 $4", ["[23]"], "0$1"]], "0"], LB: ["961", "00", "[27-9]\\d{7}|[13-9]\\d{6}", [7, 8], [["(\\d)(\\d{3})(\\d{3})", "$1 $2 $3", ["[13-69]|7(?:[2-57]|62|8[0-7]|9[04-9])|8[02-9]"], "0$1"], ["(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3", ["[27-9]"]]], "0"], LC: ["1", "011", "(?:[58]\\d\\d|758|900)\\d{7}", [10], 0, "1", 0, "1|([2-8]\\d{6})$", "758$1", 0, "758"], LI: ["423", "00", "90\\d{5}|(?:[2378]|6\\d\\d)\\d{6}", [7, 9], [["(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3", ["[237-9]"]], ["(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["69"]], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["6"]]], "0", 0, "0|(1001)"], LK: ["94", "00", "[1-9]\\d{8}", [9], [["(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["7"], "0$1"], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[1-689]"], "0$1"]], "0"], LR: ["231", "00", "(?:2|33|5\\d|77|88)\\d{7}|[4-6]\\d{6}", [7, 8, 9], [["(\\d)(\\d{3})(\\d{3})", "$1 $2 $3", ["[4-6]"], "0$1"], ["(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3", ["2"], "0$1"], ["(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["[3578]"], "0$1"]], "0"], LS: ["266", "00", "(?:[256]\\d\\d|800)\\d{5}", [8], [["(\\d{4})(\\d{4})", "$1 $2", ["[2568]"]]]], LT: ["370", "00", "(?:[3469]\\d|52|[78]0)\\d{6}", [8], [["(\\d)(\\d{3})(\\d{4})", "$1 $2 $3", ["52[0-7]"], "(8-$1)", 1], ["(\\d{3})(\\d{2})(\\d{3})", "$1 $2 $3", ["[7-9]"], "8 $1", 1], ["(\\d{2})(\\d{6})", "$1 $2", ["37|4(?:[15]|6[1-8])"], "(8-$1)", 1], ["(\\d{3})(\\d{5})", "$1 $2", ["[3-6]"], "(8-$1)", 1]], "8", 0, "[08]"], LU: ["352", "00", "35[013-9]\\d{4,8}|6\\d{8}|35\\d{2,4}|(?:[2457-9]\\d|3[0-46-9])\\d{2,9}", [4, 5, 6, 7, 8, 9, 10, 11], [["(\\d{2})(\\d{3})", "$1 $2", ["2(?:0[2-689]|[2-9])|[3-57]|8(?:0[2-9]|[13-9])|9(?:0[89]|[2-579])"]], ["(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3", ["2(?:0[2-689]|[2-9])|[3-57]|8(?:0[2-9]|[13-9])|9(?:0[89]|[2-579])"]], ["(\\d{2})(\\d{2})(\\d{3})", "$1 $2 $3", ["20[2-689]"]], ["(\\d{2})(\\d{2})(\\d{2})(\\d{1,2})", "$1 $2 $3 $4", ["2(?:[0367]|4[3-8])"]], ["(\\d{3})(\\d{2})(\\d{3})", "$1 $2 $3", ["80[01]|90[015]"]], ["(\\d{2})(\\d{2})(\\d{2})(\\d{3})", "$1 $2 $3 $4", ["20"]], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["6"]], ["(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{1,2})", "$1 $2 $3 $4 $5", ["2(?:[0367]|4[3-8])"]], ["(\\d{2})(\\d{2})(\\d{2})(\\d{1,5})", "$1 $2 $3 $4", ["[3-57]|8[13-9]|9(?:0[89]|[2-579])|(?:2|80)[2-9]"]]], 0, 0, "(15(?:0[06]|1[12]|[35]5|4[04]|6[26]|77|88|99)\\d)"], LV: ["371", "00", "(?:[268]\\d|90)\\d{6}", [8], [["(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3", ["[269]|8[01]"]]]], LY: ["218", "00", "[2-9]\\d{8}", [9], [["(\\d{2})(\\d{7})", "$1-$2", ["[2-9]"], "0$1"]], "0"], MA: ["212", "00", "[5-8]\\d{8}", [9], [["(\\d{5})(\\d{4})", "$1-$2", ["5(?:29|38)", "5(?:29|38)[89]", "5(?:29|38)[89]0"], "0$1"], ["(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["5[45]"], "0$1"], ["(\\d{4})(\\d{5})", "$1-$2", ["5(?:2[2-489]|3[5-9]|9)|892", "5(?:2(?:[2-49]|8[235-9])|3[5-9]|9)|892"], "0$1"], ["(\\d{2})(\\d{7})", "$1-$2", ["8"], "0$1"], ["(\\d{3})(\\d{6})", "$1-$2", ["[5-7]"], "0$1"]], "0", 0, 0, 0, 0, 0, [["5(?:29(?:[189][05]|2[29]|3[01])|38[89][05])\\d{4}|5(?:2(?:[0-25-7]\\d|3[1-578]|4[02-46-8]|8[0235-7]|90)|3(?:[0-47]\\d|5[02-9]|6[02-8]|80|9[3-9])|(?:4[067]|5[03])\\d)\\d{5}"], ["(?:6(?:[0-79]\\d|8[0-247-9])|7(?:0\\d|1[0-5]|6[1267]|7[0-57]))\\d{6}"], ["80\\d{7}"], ["89\\d{7}"], 0, 0, 0, 0, ["592(?:4[0-2]|93)\\d{4}"]]], MC: ["377", "00", "(?:[3489]|6\\d)\\d{7}", [8, 9], [["(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3", ["4"], "0$1"], ["(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[389]"]], ["(\\d)(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4 $5", ["6"], "0$1"]], "0"], MD: ["373", "00", "(?:[235-7]\\d|[89]0)\\d{6}", [8], [["(\\d{3})(\\d{5})", "$1 $2", ["[89]"], "0$1"], ["(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3", ["22|3"], "0$1"], ["(\\d{3})(\\d{2})(\\d{3})", "$1 $2 $3", ["[25-7]"], "0$1"]], "0"], ME: ["382", "00", "(?:20|[3-79]\\d)\\d{6}|80\\d{6,7}", [8, 9], [["(\\d{2})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["[2-9]"], "0$1"]], "0"], MF: ["590", "00", "(?:590|(?:69|80)\\d|976)\\d{6}", [9], 0, "0", 0, 0, 0, 0, 0, [["590(?:0[079]|[14]3|[27][79]|30|5[0-268]|87)\\d{4}"], ["69(?:0\\d\\d|1(?:2[2-9]|3[0-5]))\\d{4}"], ["80[0-5]\\d{6}"], 0, 0, 0, 0, 0, ["976[01]\\d{5}"]]], MG: ["261", "00", "[23]\\d{8}", [9], [["(\\d{2})(\\d{2})(\\d{3})(\\d{2})", "$1 $2 $3 $4", ["[23]"], "0$1"]], "0", 0, "0|([24-9]\\d{6})$", "20$1"], MH: ["692", "011", "329\\d{4}|(?:[256]\\d|45)\\d{5}", [7], [["(\\d{3})(\\d{4})", "$1-$2", ["[2-6]"]]], "1"], MK: ["389", "00", "[2-578]\\d{7}", [8], [["(\\d)(\\d{3})(\\d{4})", "$1 $2 $3", ["2"], "0$1"], ["(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3", ["[347]"], "0$1"], ["(\\d{3})(\\d)(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[58]"], "0$1"]], "0"], ML: ["223", "00", "[24-9]\\d{7}", [8], [["(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[24-9]"]]]], MM: ["95", "00", "1\\d{5,7}|95\\d{6}|(?:[4-7]|9[0-46-9])\\d{6,8}|(?:2|8\\d)\\d{5,8}", [6, 7, 8, 9, 10], [["(\\d)(\\d{2})(\\d{3})", "$1 $2 $3", ["16|2"], "0$1"], ["(\\d{2})(\\d{2})(\\d{3})", "$1 $2 $3", ["[45]|6(?:0[23]|[1-689]|7[235-7])|7(?:[0-4]|5[2-7])|8[1-6]"], "0$1"], ["(\\d)(\\d{3})(\\d{3,4})", "$1 $2 $3", ["[12]"], "0$1"], ["(\\d{2})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["[4-7]|8[1-35]"], "0$1"], ["(\\d)(\\d{3})(\\d{4,6})", "$1 $2 $3", ["9(?:2[0-4]|[35-9]|4[137-9])"], "0$1"], ["(\\d)(\\d{4})(\\d{4})", "$1 $2 $3", ["2"], "0$1"], ["(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["8"], "0$1"], ["(\\d)(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3 $4", ["92"], "0$1"], ["(\\d)(\\d{5})(\\d{4})", "$1 $2 $3", ["9"], "0$1"]], "0"], MN: ["976", "001", "[12]\\d{7,9}|[57-9]\\d{7}", [8, 9, 10], [["(\\d{2})(\\d{2})(\\d{4})", "$1 $2 $3", ["[12]1"], "0$1"], ["(\\d{4})(\\d{4})", "$1 $2", ["[57-9]"]], ["(\\d{3})(\\d{5,6})", "$1 $2", ["[12]2[1-3]"], "0$1"], ["(\\d{4})(\\d{5,6})", "$1 $2", ["[12](?:27|3[2-8]|4[2-68]|5[1-4689])", "[12](?:27|3[2-8]|4[2-68]|5[1-4689])[0-3]"], "0$1"], ["(\\d{5})(\\d{4,5})", "$1 $2", ["[12]"], "0$1"]], "0"], MO: ["853", "00", "0800\\d{3}|(?:28|[68]\\d)\\d{6}", [7, 8], [["(\\d{4})(\\d{3})", "$1 $2", ["0"]], ["(\\d{4})(\\d{4})", "$1 $2", ["[268]"]]]], MP: ["1", "011", "[58]\\d{9}|(?:67|90)0\\d{7}", [10], 0, "1", 0, "1|([2-9]\\d{6})$", "670$1", 0, "670"], MQ: ["596", "00", "(?:69|80)\\d{7}|(?:59|97)6\\d{6}", [9], [["(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[569]"], "0$1"], ["(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["8"], "0$1"]], "0"], MR: ["222", "00", "(?:[2-4]\\d\\d|800)\\d{5}", [8], [["(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[2-48]"]]]], MS: ["1", "011", "(?:[58]\\d\\d|664|900)\\d{7}", [10], 0, "1", 0, "1|([34]\\d{6})$", "664$1", 0, "664"], MT: ["356", "00", "3550\\d{4}|(?:[2579]\\d\\d|800)\\d{5}", [8], [["(\\d{4})(\\d{4})", "$1 $2", ["[2357-9]"]]]], MU: ["230", "0(?:0|[24-7]0|3[03])", "(?:5|8\\d\\d)\\d{7}|[2-468]\\d{6}", [7, 8, 10], [["(\\d{3})(\\d{4})", "$1 $2", ["[2-46]|8[013]"]], ["(\\d{4})(\\d{4})", "$1 $2", ["5"]], ["(\\d{5})(\\d{5})", "$1 $2", ["8"]]], 0, 0, 0, 0, 0, 0, 0, "020"], MV: ["960", "0(?:0|19)", "(?:800|9[0-57-9]\\d)\\d{7}|[34679]\\d{6}", [7, 10], [["(\\d{3})(\\d{4})", "$1-$2", ["[3467]|9[13-9]"]], ["(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["[89]"]]], 0, 0, 0, 0, 0, 0, 0, "00"], MW: ["265", "00", "(?:[19]\\d|[23]1|77|88)\\d{7}|1\\d{6}", [7, 9], [["(\\d)(\\d{3})(\\d{3})", "$1 $2 $3", ["1[2-9]"], "0$1"], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["2"], "0$1"], ["(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[137-9]"], "0$1"]], "0"], MX: ["52", "0[09]", "1(?:(?:44|99)[1-9]|65[0-689])\\d{7}|(?:1(?:[017]\\d|[235][1-9]|4[0-35-9]|6[0-46-9]|8[1-79]|9[1-8])|[2-9]\\d)\\d{8}", [10, 11], [["(\\d{2})(\\d{4})(\\d{4})", "$1 $2 $3", ["33|5[56]|81"], 0, 1], ["(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["[2-9]"], 0, 1], ["(\\d)(\\d{2})(\\d{4})(\\d{4})", "$2 $3 $4", ["1(?:33|5[56]|81)"], 0, 1], ["(\\d)(\\d{3})(\\d{3})(\\d{4})", "$2 $3 $4", ["1"], 0, 1]], "01", 0, "0(?:[12]|4[45])|1", 0, 0, 0, 0, "00"], MY: ["60", "00", "1\\d{8,9}|(?:3\\d|[4-9])\\d{7}", [8, 9, 10], [["(\\d)(\\d{3})(\\d{4})", "$1-$2 $3", ["[4-79]"], "0$1"], ["(\\d{2})(\\d{3})(\\d{3,4})", "$1-$2 $3", ["1(?:[02469]|[378][1-9])|8"], "0$1"], ["(\\d)(\\d{4})(\\d{4})", "$1-$2 $3", ["3"], "0$1"], ["(\\d)(\\d{3})(\\d{2})(\\d{4})", "$1-$2-$3-$4", ["1[36-8]"]], ["(\\d{3})(\\d{3})(\\d{4})", "$1-$2 $3", ["15"], "0$1"], ["(\\d{2})(\\d{4})(\\d{4})", "$1-$2 $3", ["1"], "0$1"]], "0"], MZ: ["258", "00", "(?:2|8\\d)\\d{7}", [8, 9], [["(\\d{2})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["2|8[2-79]"]], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["8"]]]], NA: ["264", "00", "[68]\\d{7,8}", [8, 9], [["(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3", ["88"], "0$1"], ["(\\d{2})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["6"], "0$1"], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["87"], "0$1"], ["(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["8"], "0$1"]], "0"], NC: ["687", "00", "[2-57-9]\\d{5}", [6], [["(\\d{2})(\\d{2})(\\d{2})", "$1.$2.$3", ["[2-57-9]"]]]], NE: ["227", "00", "[027-9]\\d{7}", [8], [["(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3", ["08"]], ["(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[089]|2[013]|7[04]"]]]], NF: ["672", "00", "[13]\\d{5}", [6], [["(\\d{2})(\\d{4})", "$1 $2", ["1[0-3]"]], ["(\\d)(\\d{5})", "$1 $2", ["[13]"]]], 0, 0, "([0-258]\\d{4})$", "3$1"], NG: ["234", "009", "(?:[124-7]|9\\d{3})\\d{6}|[1-9]\\d{7}|[78]\\d{9,13}", [7, 8, 10, 11, 12, 13, 14], [["(\\d{2})(\\d{2})(\\d{3})", "$1 $2 $3", ["78"], "0$1"], ["(\\d)(\\d{3})(\\d{3,4})", "$1 $2 $3", ["[12]|9(?:0[3-9]|[1-9])"], "0$1"], ["(\\d{2})(\\d{3})(\\d{2,3})", "$1 $2 $3", ["[3-7]|8[2-9]"], "0$1"], ["(\\d{3})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["[7-9]"], "0$1"], ["(\\d{3})(\\d{4})(\\d{4,5})", "$1 $2 $3", ["[78]"], "0$1"], ["(\\d{3})(\\d{5})(\\d{5,6})", "$1 $2 $3", ["[78]"], "0$1"]], "0"], NI: ["505", "00", "(?:1800|[25-8]\\d{3})\\d{4}", [8], [["(\\d{4})(\\d{4})", "$1 $2", ["[125-8]"]]]], NL: ["31", "00", "(?:[124-7]\\d\\d|3(?:[02-9]\\d|1[0-8]))\\d{6}|[89]\\d{6,9}|1\\d{4,5}", [5, 6, 7, 8, 9, 10], [["(\\d{3})(\\d{4,7})", "$1 $2", ["[89]0"], "0$1"], ["(\\d{2})(\\d{7})", "$1 $2", ["66"], "0$1"], ["(\\d)(\\d{8})", "$1 $2", ["6"], "0$1"], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["1[16-8]|2[259]|3[124]|4[17-9]|5[124679]"], "0$1"], ["(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["[1-57-9]"], "0$1"]], "0"], NO: ["47", "00", "(?:0|[2-9]\\d{3})\\d{4}", [5, 8], [["(\\d{3})(\\d{2})(\\d{3})", "$1 $2 $3", ["[489]|59"]], ["(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[235-7]"]]], 0, 0, 0, 0, 0, "[02-689]|7[0-8]"], NP: ["977", "00", "(?:1\\d|9)\\d{9}|[1-9]\\d{7}", [8, 10, 11], [["(\\d)(\\d{7})", "$1-$2", ["1[2-6]"], "0$1"], ["(\\d{2})(\\d{6})", "$1-$2", ["1[01]|[2-8]|9(?:[1-579]|6[2-6])"], "0$1"], ["(\\d{3})(\\d{7})", "$1-$2", ["9"]]], "0"], NR: ["674", "00", "(?:444|(?:55|8\\d)\\d|666)\\d{4}", [7], [["(\\d{3})(\\d{4})", "$1 $2", ["[4-68]"]]]], NU: ["683", "00", "(?:[47]|888\\d)\\d{3}", [4, 7], [["(\\d{3})(\\d{4})", "$1 $2", ["8"]]]], NZ: ["64", "0(?:0|161)", "[29]\\d{7,9}|50\\d{5}(?:\\d{2,3})?|6[0-35-9]\\d{6}|7\\d{7,8}|8\\d{4,9}|(?:11\\d|[34])\\d{7}", [5, 6, 7, 8, 9, 10], [["(\\d{2})(\\d{3,8})", "$1 $2", ["8[1-579]"], "0$1"], ["(\\d{3})(\\d{2})(\\d{2,3})", "$1 $2 $3", ["50[036-8]|[89]0", "50(?:[0367]|88)|[89]0"], "0$1"], ["(\\d)(\\d{3})(\\d{4})", "$1-$2 $3", ["24|[346]|7[2-57-9]|9[2-9]"], "0$1"], ["(\\d{3})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["2(?:10|74)|[59]|80"], "0$1"], ["(\\d{2})(\\d{3,4})(\\d{4})", "$1 $2 $3", ["1|2[028]"], "0$1"], ["(\\d{2})(\\d{3})(\\d{3,5})", "$1 $2 $3", ["2(?:[169]|7[0-35-9])|7|86"], "0$1"]], "0", 0, 0, 0, 0, 0, 0, "00"], OM: ["968", "00", "(?:1505|[279]\\d{3}|500)\\d{4}|800\\d{5,6}", [7, 8, 9], [["(\\d{3})(\\d{4,6})", "$1 $2", ["[58]"]], ["(\\d{2})(\\d{6})", "$1 $2", ["2"]], ["(\\d{4})(\\d{4})", "$1 $2", ["[179]"]]]], PA: ["507", "00", "(?:00800|8\\d{3})\\d{6}|[68]\\d{7}|[1-57-9]\\d{6}", [7, 8, 10, 11], [["(\\d{3})(\\d{4})", "$1-$2", ["[1-57-9]"]], ["(\\d{4})(\\d{4})", "$1-$2", ["[68]"]], ["(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["8"]]]], PE: ["51", "19(?:1[124]|77|90)00", "(?:[14-8]|9\\d)\\d{7}", [8, 9], [["(\\d{3})(\\d{5})", "$1 $2", ["80"], "(0$1)"], ["(\\d)(\\d{7})", "$1 $2", ["1"], "(0$1)"], ["(\\d{2})(\\d{6})", "$1 $2", ["[4-8]"], "(0$1)"], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["9"]]], "0", 0, 0, 0, 0, 0, 0, 0, " Anexo "], PF: ["689", "00", "4\\d{5}(?:\\d{2})?|8\\d{7,8}", [6, 8, 9], [["(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3", ["44"]], ["(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["4|8[7-9]"]], ["(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["8"]]]], PG: ["675", "00|140[1-3]", "(?:180|[78]\\d{3})\\d{4}|(?:[2-589]\\d|64)\\d{5}", [7, 8], [["(\\d{3})(\\d{4})", "$1 $2", ["18|[2-69]|85"]], ["(\\d{4})(\\d{4})", "$1 $2", ["[78]"]]], 0, 0, 0, 0, 0, 0, 0, "00"], PH: ["63", "00", "(?:[2-7]|9\\d)\\d{8}|2\\d{5}|(?:1800|8)\\d{7,9}", [6, 8, 9, 10, 11, 12, 13], [["(\\d)(\\d{5})", "$1 $2", ["2"], "(0$1)"], ["(\\d{4})(\\d{4,6})", "$1 $2", ["3(?:23|39|46)|4(?:2[3-6]|[35]9|4[26]|76)|544|88[245]|(?:52|64|86)2", "3(?:230|397|461)|4(?:2(?:35|[46]4|51)|396|4(?:22|63)|59[347]|76[15])|5(?:221|446)|642[23]|8(?:622|8(?:[24]2|5[13]))"], "(0$1)"], ["(\\d{5})(\\d{4})", "$1 $2", ["346|4(?:27|9[35])|883", "3469|4(?:279|9(?:30|56))|8834"], "(0$1)"], ["(\\d)(\\d{4})(\\d{4})", "$1 $2 $3", ["2"], "(0$1)"], ["(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["[3-7]|8[2-8]"], "(0$1)"], ["(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["[89]"], "0$1"], ["(\\d{4})(\\d{3})(\\d{4})", "$1 $2 $3", ["1"]], ["(\\d{4})(\\d{1,2})(\\d{3})(\\d{4})", "$1 $2 $3 $4", ["1"]]], "0"], PK: ["92", "00", "122\\d{6}|[24-8]\\d{10,11}|9(?:[013-9]\\d{8,10}|2(?:[01]\\d\\d|2(?:[06-8]\\d|1[01]))\\d{7})|(?:[2-8]\\d{3}|92(?:[0-7]\\d|8[1-9]))\\d{6}|[24-9]\\d{8}|[89]\\d{7}", [8, 9, 10, 11, 12], [["(\\d{3})(\\d{3})(\\d{2,7})", "$1 $2 $3", ["[89]0"], "0$1"], ["(\\d{4})(\\d{5})", "$1 $2", ["1"]], ["(\\d{3})(\\d{6,7})", "$1 $2", ["2(?:3[2358]|4[2-4]|9[2-8])|45[3479]|54[2-467]|60[468]|72[236]|8(?:2[2-689]|3[23578]|4[3478]|5[2356])|9(?:2[2-8]|3[27-9]|4[2-6]|6[3569]|9[25-8])", "9(?:2[3-8]|98)|(?:2(?:3[2358]|4[2-4]|9[2-8])|45[3479]|54[2-467]|60[468]|72[236]|8(?:2[2-689]|3[23578]|4[3478]|5[2356])|9(?:22|3[27-9]|4[2-6]|6[3569]|9[25-7]))[2-9]"], "(0$1)"], ["(\\d{2})(\\d{7,8})", "$1 $2", ["(?:2[125]|4[0-246-9]|5[1-35-7]|6[1-8]|7[14]|8[16]|91)[2-9]"], "(0$1)"], ["(\\d{5})(\\d{5})", "$1 $2", ["58"], "(0$1)"], ["(\\d{3})(\\d{7})", "$1 $2", ["3"], "0$1"], ["(\\d{2})(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3 $4", ["2[125]|4[0-246-9]|5[1-35-7]|6[1-8]|7[14]|8[16]|91"], "(0$1)"], ["(\\d{3})(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3 $4", ["[24-9]"], "(0$1)"]], "0"], PL: ["48", "00", "6\\d{5}(?:\\d{2})?|8\\d{9}|[1-9]\\d{6}(?:\\d{2})?", [6, 7, 8, 9, 10], [["(\\d{5})", "$1", ["19"]], ["(\\d{3})(\\d{3})", "$1 $2", ["11|64"]], ["(\\d{2})(\\d{2})(\\d{3})", "$1 $2 $3", ["(?:1[2-8]|2[2-69]|3[2-4]|4[1-468]|5[24-689]|6[1-3578]|7[14-7]|8[1-79]|9[145])1", "(?:1[2-8]|2[2-69]|3[2-4]|4[1-468]|5[24-689]|6[1-3578]|7[14-7]|8[1-79]|9[145])19"]], ["(\\d{3})(\\d{2})(\\d{2,3})", "$1 $2 $3", ["64"]], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["21|39|45|5[0137]|6[0469]|7[02389]|8(?:0[14]|8)"]], ["(\\d{2})(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["1[2-8]|[2-7]|8[1-79]|9[145]"]], ["(\\d{3})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["8"]]]], PM: ["508", "00", "(?:[45]|80\\d\\d)\\d{5}", [6, 9], [["(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3", ["[45]"], "0$1"], ["(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["8"], "0$1"]], "0"], PR: ["1", "011", "(?:[589]\\d\\d|787)\\d{7}", [10], 0, "1", 0, 0, 0, 0, "787|939"], PS: ["970", "00", "[2489]2\\d{6}|(?:1\\d|5)\\d{8}", [8, 9, 10], [["(\\d)(\\d{3})(\\d{4})", "$1 $2 $3", ["[2489]"], "0$1"], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["5"], "0$1"], ["(\\d{4})(\\d{3})(\\d{3})", "$1 $2 $3", ["1"]]], "0"], PT: ["351", "00", "1693\\d{5}|(?:[26-9]\\d|30)\\d{7}", [9], [["(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["2[12]"]], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["16|[236-9]"]]]], PW: ["680", "01[12]", "(?:[24-8]\\d\\d|345|900)\\d{4}", [7], [["(\\d{3})(\\d{4})", "$1 $2", ["[2-9]"]]]], PY: ["595", "00", "59\\d{4,6}|9\\d{5,10}|(?:[2-46-8]\\d|5[0-8])\\d{4,7}", [6, 7, 8, 9, 10, 11], [["(\\d{3})(\\d{3,6})", "$1 $2", ["[2-9]0"], "0$1"], ["(\\d{2})(\\d{5})", "$1 $2", ["[26]1|3[289]|4[1246-8]|7[1-3]|8[1-36]"], "(0$1)"], ["(\\d{3})(\\d{4,5})", "$1 $2", ["2[279]|3[13-5]|4[359]|5|6(?:[34]|7[1-46-8])|7[46-8]|85"], "(0$1)"], ["(\\d{2})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["2[14-68]|3[26-9]|4[1246-8]|6(?:1|75)|7[1-35]|8[1-36]"], "(0$1)"], ["(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["87"]], ["(\\d{3})(\\d{6})", "$1 $2", ["9(?:[5-79]|8[1-6])"], "0$1"], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[2-8]"], "0$1"], ["(\\d{4})(\\d{3})(\\d{4})", "$1 $2 $3", ["9"]]], "0"], QA: ["974", "00", "[2-7]\\d{7}|800\\d{4}(?:\\d{2})?|2\\d{6}", [7, 8, 9], [["(\\d{3})(\\d{4})", "$1 $2", ["2[126]|8"]], ["(\\d{4})(\\d{4})", "$1 $2", ["[2-7]"]]]], RE: ["262", "00", "9769\\d{5}|(?:26|[68]\\d)\\d{7}", [9], [["(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[2689]"], "0$1"]], "0", 0, 0, 0, 0, "26[23]|69|[89]"], RO: ["40", "00", "(?:[2378]\\d|90)\\d{7}|[23]\\d{5}", [6, 9], [["(\\d{3})(\\d{3})", "$1 $2", ["2[3-6]", "2[3-6]\\d9"], "0$1"], ["(\\d{2})(\\d{4})", "$1 $2", ["219|31"], "0$1"], ["(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["[23]1"], "0$1"], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[237-9]"], "0$1"]], "0", 0, 0, 0, 0, 0, 0, 0, " int "], RS: ["381", "00", "38[02-9]\\d{6,9}|6\\d{7,9}|90\\d{4,8}|38\\d{5,6}|(?:7\\d\\d|800)\\d{3,9}|(?:[12]\\d|3[0-79])\\d{5,10}", [6, 7, 8, 9, 10, 11, 12], [["(\\d{3})(\\d{3,9})", "$1 $2", ["(?:2[389]|39)0|[7-9]"], "0$1"], ["(\\d{2})(\\d{5,10})", "$1 $2", ["[1-36]"], "0$1"]], "0"], RU: ["7", "810", "8\\d{13}|[347-9]\\d{9}", [10, 14], [["(\\d{4})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["7(?:1[0-8]|2[1-9])", "7(?:1(?:[0-6]2|7|8[27])|2(?:1[23]|[2-9]2))", "7(?:1(?:[0-6]2|7|8[27])|2(?:13[03-69]|62[013-9]))|72[1-57-9]2"], "8 ($1)", 1], ["(\\d{5})(\\d)(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["7(?:1[0-68]|2[1-9])", "7(?:1(?:[06][3-6]|[18]|2[35]|[3-5][3-5])|2(?:[13][3-5]|[24-689]|7[457]))", "7(?:1(?:0(?:[356]|4[023])|[18]|2(?:3[013-9]|5)|3[45]|43[013-79]|5(?:3[1-8]|4[1-7]|5)|6(?:3[0-35-9]|[4-6]))|2(?:1(?:3[178]|[45])|[24-689]|3[35]|7[457]))|7(?:14|23)4[0-8]|71(?:33|45)[1-79]"], "8 ($1)", 1], ["(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["7"], "8 ($1)", 1], ["(\\d{3})(\\d{3})(\\d{2})(\\d{2})", "$1 $2-$3-$4", ["[349]|8(?:[02-7]|1[1-8])"], "8 ($1)", 1], ["(\\d{4})(\\d{4})(\\d{3})(\\d{3})", "$1 $2 $3 $4", ["8"], "8 ($1)"]], "8", 0, 0, 0, 0, "3[04-689]|[489]", 0, "8~10"], RW: ["250", "00", "(?:06|[27]\\d\\d|[89]00)\\d{6}", [8, 9], [["(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["0"]], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[7-9]"], "0$1"], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["2"]]], "0"], SA: ["966", "00", "92\\d{7}|(?:[15]|8\\d)\\d{8}", [9, 10], [["(\\d{4})(\\d{5})", "$1 $2", ["9"]], ["(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["1"], "0$1"], ["(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["5"], "0$1"], ["(\\d{3})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["81"], "0$1"], ["(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["8"]]], "0"], SB: ["677", "0[01]", "(?:[1-6]|[7-9]\\d\\d)\\d{4}", [5, 7], [["(\\d{2})(\\d{5})", "$1 $2", ["7|8[4-9]|9(?:[1-8]|9[0-8])"]]]], SC: ["248", "010|0[0-2]", "8000\\d{3}|(?:[249]\\d|64)\\d{5}", [7], [["(\\d)(\\d{3})(\\d{3})", "$1 $2 $3", ["[246]|9[57]"]]], 0, 0, 0, 0, 0, 0, 0, "00"], SD: ["249", "00", "[19]\\d{8}", [9], [["(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["[19]"], "0$1"]], "0"], SE: ["46", "00", "(?:[26]\\d\\d|9)\\d{9}|[1-9]\\d{8}|[1-689]\\d{7}|[1-4689]\\d{6}|2\\d{5}", [6, 7, 8, 9, 10], [["(\\d{2})(\\d{2,3})(\\d{2})", "$1-$2 $3", ["20"], "0$1", 0, "$1 $2 $3"], ["(\\d{3})(\\d{4})", "$1-$2", ["9(?:00|39|44)"], "0$1", 0, "$1 $2"], ["(\\d{2})(\\d{3})(\\d{2})", "$1-$2 $3", ["[12][136]|3[356]|4[0246]|6[03]|90[1-9]"], "0$1", 0, "$1 $2 $3"], ["(\\d)(\\d{2,3})(\\d{2})(\\d{2})", "$1-$2 $3 $4", ["8"], "0$1", 0, "$1 $2 $3 $4"], ["(\\d{3})(\\d{2,3})(\\d{2})", "$1-$2 $3", ["1[2457]|2(?:[247-9]|5[0138])|3[0247-9]|4[1357-9]|5[0-35-9]|6(?:[125689]|4[02-57]|7[0-2])|9(?:[125-8]|3[02-5]|4[0-3])"], "0$1", 0, "$1 $2 $3"], ["(\\d{3})(\\d{2,3})(\\d{3})", "$1-$2 $3", ["9(?:00|39|44)"], "0$1", 0, "$1 $2 $3"], ["(\\d{2})(\\d{2,3})(\\d{2})(\\d{2})", "$1-$2 $3 $4", ["1[13689]|2[0136]|3[1356]|4[0246]|54|6[03]|90[1-9]"], "0$1", 0, "$1 $2 $3 $4"], ["(\\d{2})(\\d{3})(\\d{2})(\\d{2})", "$1-$2 $3 $4", ["10|7"], "0$1", 0, "$1 $2 $3 $4"], ["(\\d)(\\d{3})(\\d{3})(\\d{2})", "$1-$2 $3 $4", ["8"], "0$1", 0, "$1 $2 $3 $4"], ["(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1-$2 $3 $4", ["[13-5]|2(?:[247-9]|5[0138])|6(?:[124-689]|7[0-2])|9(?:[125-8]|3[02-5]|4[0-3])"], "0$1", 0, "$1 $2 $3 $4"], ["(\\d{3})(\\d{2})(\\d{2})(\\d{3})", "$1-$2 $3 $4", ["9"], "0$1", 0, "$1 $2 $3 $4"], ["(\\d{3})(\\d{2})(\\d{3})(\\d{2})(\\d{2})", "$1-$2 $3 $4 $5", ["[26]"], "0$1", 0, "$1 $2 $3 $4 $5"]], "0"], SG: ["65", "0[0-3]\\d", "(?:(?:1\\d|8)\\d\\d|7000)\\d{7}|[3689]\\d{7}", [8, 10, 11], [["(\\d{4})(\\d{4})", "$1 $2", ["[369]|8(?:0[1-4]|[1-9])"]], ["(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["8"]], ["(\\d{4})(\\d{4})(\\d{3})", "$1 $2 $3", ["7"]], ["(\\d{4})(\\d{3})(\\d{4})", "$1 $2 $3", ["1"]]]], SH: ["290", "00", "(?:[256]\\d|8)\\d{3}", [4, 5], 0, 0, 0, 0, 0, 0, "[256]"], SI: ["386", "00|10(?:22|66|88|99)", "[1-7]\\d{7}|8\\d{4,7}|90\\d{4,6}", [5, 6, 7, 8], [["(\\d{2})(\\d{3,6})", "$1 $2", ["8[09]|9"], "0$1"], ["(\\d{3})(\\d{5})", "$1 $2", ["59|8"], "0$1"], ["(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3", ["[37][01]|4[0139]|51|6"], "0$1"], ["(\\d)(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[1-57]"], "(0$1)"]], "0", 0, 0, 0, 0, 0, 0, "00"], SJ: ["47", "00", "0\\d{4}|(?:[489]\\d|[57]9)\\d{6}", [5, 8], 0, 0, 0, 0, 0, 0, "79"], SK: ["421", "00", "[2-689]\\d{8}|[2-59]\\d{6}|[2-5]\\d{5}", [6, 7, 9], [["(\\d)(\\d{2})(\\d{3,4})", "$1 $2 $3", ["21"], "0$1"], ["(\\d{2})(\\d{2})(\\d{2,3})", "$1 $2 $3", ["[3-5][1-8]1", "[3-5][1-8]1[67]"], "0$1"], ["(\\d)(\\d{3})(\\d{3})(\\d{2})", "$1/$2 $3 $4", ["2"], "0$1"], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[689]"], "0$1"], ["(\\d{2})(\\d{3})(\\d{2})(\\d{2})", "$1/$2 $3 $4", ["[3-5]"], "0$1"]], "0"], SL: ["232", "00", "(?:[237-9]\\d|66)\\d{6}", [8], [["(\\d{2})(\\d{6})", "$1 $2", ["[236-9]"], "(0$1)"]], "0"], SM: ["378", "00", "(?:0549|[5-7]\\d)\\d{6}", [8, 10], [["(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[5-7]"]], ["(\\d{4})(\\d{6})", "$1 $2", ["0"]]], 0, 0, "([89]\\d{5})$", "0549$1"], SN: ["221", "00", "(?:[378]\\d|93)\\d{7}", [9], [["(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["8"]], ["(\\d{2})(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[379]"]]]], SO: ["252", "00", "[346-9]\\d{8}|[12679]\\d{7}|[1-5]\\d{6}|[1348]\\d{5}", [6, 7, 8, 9], [["(\\d{2})(\\d{4})", "$1 $2", ["8[125]"]], ["(\\d{6})", "$1", ["[134]"]], ["(\\d)(\\d{6})", "$1 $2", ["[15]|2[0-79]|3[0-46-8]|4[0-7]"]], ["(\\d)(\\d{7})", "$1 $2", ["24|[67]"]], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[3478]|64|90"]], ["(\\d{2})(\\d{5,7})", "$1 $2", ["1|28|6(?:0[5-7]|[1-35-9])|9[2-9]"]]], "0"], SR: ["597", "00", "(?:[2-5]|68|[78]\\d)\\d{5}", [6, 7], [["(\\d{2})(\\d{2})(\\d{2})", "$1-$2-$3", ["56"]], ["(\\d{3})(\\d{3})", "$1-$2", ["[2-5]"]], ["(\\d{3})(\\d{4})", "$1-$2", ["[6-8]"]]]], SS: ["211", "00", "[19]\\d{8}", [9], [["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[19]"], "0$1"]], "0"], ST: ["239", "00", "(?:22|9\\d)\\d{5}", [7], [["(\\d{3})(\\d{4})", "$1 $2", ["[29]"]]]], SV: ["503", "00", "[267]\\d{7}|[89]00\\d{4}(?:\\d{4})?", [7, 8, 11], [["(\\d{3})(\\d{4})", "$1 $2", ["[89]"]], ["(\\d{4})(\\d{4})", "$1 $2", ["[267]"]], ["(\\d{3})(\\d{4})(\\d{4})", "$1 $2 $3", ["[89]"]]]], SX: ["1", "011", "7215\\d{6}|(?:[58]\\d\\d|900)\\d{7}", [10], 0, "1", 0, "1|(5\\d{6})$", "721$1", 0, "721"], SY: ["963", "00", "[1-39]\\d{8}|[1-5]\\d{7}", [8, 9], [["(\\d{2})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["[1-5]"], "0$1", 1], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["9"], "0$1", 1]], "0"], SZ: ["268", "00", "0800\\d{4}|(?:[237]\\d|900)\\d{6}", [8, 9], [["(\\d{4})(\\d{4})", "$1 $2", ["[0237]"]], ["(\\d{5})(\\d{4})", "$1 $2", ["9"]]]], TA: ["290", "00", "8\\d{3}", [4], 0, 0, 0, 0, 0, 0, "8"], TC: ["1", "011", "(?:[58]\\d\\d|649|900)\\d{7}", [10], 0, "1", 0, "1|([2-479]\\d{6})$", "649$1", 0, "649"], TD: ["235", "00|16", "(?:22|[69]\\d|77)\\d{6}", [8], [["(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[2679]"]]], 0, 0, 0, 0, 0, 0, 0, "00"], TG: ["228", "00", "[279]\\d{7}", [8], [["(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[279]"]]]], TH: ["66", "00[1-9]", "(?:001800|[2-57]|[689]\\d)\\d{7}|1\\d{7,9}", [8, 9, 10, 13], [["(\\d)(\\d{3})(\\d{4})", "$1 $2 $3", ["2"], "0$1"], ["(\\d{2})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["[13-9]"], "0$1"], ["(\\d{4})(\\d{3})(\\d{3})", "$1 $2 $3", ["1"]]], "0"], TJ: ["992", "810", "(?:00|[1-57-9]\\d)\\d{7}", [9], [["(\\d{6})(\\d)(\\d{2})", "$1 $2 $3", ["331", "3317"]], ["(\\d{3})(\\d{2})(\\d{4})", "$1 $2 $3", ["[34]7|91[78]"]], ["(\\d{4})(\\d)(\\d{4})", "$1 $2 $3", ["3[1-5]"]], ["(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["[0-57-9]"]]], 0, 0, 0, 0, 0, 0, 0, "8~10"], TK: ["690", "00", "[2-47]\\d{3,6}", [4, 5, 6, 7]], TL: ["670", "00", "7\\d{7}|(?:[2-47]\\d|[89]0)\\d{5}", [7, 8], [["(\\d{3})(\\d{4})", "$1 $2", ["[2-489]|70"]], ["(\\d{4})(\\d{4})", "$1 $2", ["7"]]]], TM: ["993", "810", "[1-6]\\d{7}", [8], [["(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2-$3-$4", ["12"], "(8 $1)"], ["(\\d{3})(\\d)(\\d{2})(\\d{2})", "$1 $2-$3-$4", ["[1-5]"], "(8 $1)"], ["(\\d{2})(\\d{6})", "$1 $2", ["6"], "8 $1"]], "8", 0, 0, 0, 0, 0, 0, "8~10"], TN: ["216", "00", "[2-57-9]\\d{7}", [8], [["(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3", ["[2-57-9]"]]]], TO: ["676", "00", "(?:0800|(?:[5-8]\\d\\d|999)\\d)\\d{3}|[2-8]\\d{4}", [5, 7], [["(\\d{2})(\\d{3})", "$1-$2", ["[2-4]|50|6[09]|7[0-24-69]|8[05]"]], ["(\\d{4})(\\d{3})", "$1 $2", ["0"]], ["(\\d{3})(\\d{4})", "$1 $2", ["[5-9]"]]]], TR: ["90", "00", "4\\d{6}|8\\d{11,12}|(?:[2-58]\\d\\d|900)\\d{7}", [7, 10, 12, 13], [["(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["512|8[01589]|90"], "0$1", 1], ["(\\d{3})(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["5(?:[0-59]|61)", "5(?:[0-59]|616)", "5(?:[0-59]|6161)"], "0$1", 1], ["(\\d{3})(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[24][1-8]|3[1-9]"], "(0$1)", 1], ["(\\d{3})(\\d{3})(\\d{6,7})", "$1 $2 $3", ["80"], "0$1", 1]], "0"], TT: ["1", "011", "(?:[58]\\d\\d|900)\\d{7}", [10], 0, "1", 0, "1|([2-46-8]\\d{6})$", "868$1", 0, "868"], TV: ["688", "00", "(?:2|7\\d\\d|90)\\d{4}", [5, 6, 7], [["(\\d{2})(\\d{3})", "$1 $2", ["2"]], ["(\\d{2})(\\d{4})", "$1 $2", ["90"]], ["(\\d{2})(\\d{5})", "$1 $2", ["7"]]]], TW: ["886", "0(?:0[25-79]|19)", "[2-689]\\d{8}|7\\d{9,10}|[2-8]\\d{7}|2\\d{6}", [7, 8, 9, 10, 11], [["(\\d{2})(\\d)(\\d{4})", "$1 $2 $3", ["202"], "0$1"], ["(\\d{2})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["[258]0"], "0$1"], ["(\\d)(\\d{3,4})(\\d{4})", "$1 $2 $3", ["[23568]|4(?:0[02-48]|[1-47-9])|7[1-9]", "[23568]|4(?:0[2-48]|[1-47-9])|(?:400|7)[1-9]"], "0$1"], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[49]"], "0$1"], ["(\\d{2})(\\d{4})(\\d{4,5})", "$1 $2 $3", ["7"], "0$1"]], "0", 0, 0, 0, 0, 0, 0, 0, "#"], TZ: ["255", "00[056]", "(?:[26-8]\\d|41|90)\\d{7}", [9], [["(\\d{3})(\\d{2})(\\d{4})", "$1 $2 $3", ["[89]"], "0$1"], ["(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["[24]"], "0$1"], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[67]"], "0$1"]], "0"], UA: ["380", "00", "[89]\\d{9}|[3-9]\\d{8}", [9, 10], [["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["6[12][29]|(?:3[1-8]|4[136-8]|5[12457]|6[49])2|(?:56|65)[24]", "6[12][29]|(?:35|4[1378]|5[12457]|6[49])2|(?:56|65)[24]|(?:3[1-46-8]|46)2[013-9]"], "0$1"], ["(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["4[45][0-5]|5(?:0|6[37])|6(?:[12][018]|[36-8])|7|89|9[1-9]|(?:48|57)[0137-9]", "4[45][0-5]|5(?:0|6(?:3[14-7]|7))|6(?:[12][018]|[36-8])|7|89|9[1-9]|(?:48|57)[0137-9]"], "0$1"], ["(\\d{4})(\\d{5})", "$1 $2", ["[3-6]"], "0$1"], ["(\\d{3})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["[89]"], "0$1"]], "0", 0, 0, 0, 0, 0, 0, "0~0"], UG: ["256", "00[057]", "800\\d{6}|(?:[29]0|[347]\\d)\\d{7}", [9], [["(\\d{4})(\\d{5})", "$1 $2", ["202", "2024"], "0$1"], ["(\\d{3})(\\d{6})", "$1 $2", ["[27-9]|4(?:6[45]|[7-9])"], "0$1"], ["(\\d{2})(\\d{7})", "$1 $2", ["[34]"], "0$1"]], "0"], US: ["1", "011", "[2-9]\\d{9}", [10], [["(\\d{3})(\\d{3})(\\d{4})", "($1) $2-$3", ["[2-9]"], 0, 1, "$1-$2-$3"]], "1", 0, 0, 0, 0, 0, [["5(?:05(?:[2-57-9]\\d\\d|6(?:[0-35-9]\\d|44))|82(?:2(?:0[0-2]|[28]2)|3(?:0[02]|33)|4(?:00|4[24]|65|82)|5(?:00|29|83)|6(?:00|66|82)|777|8(?:00|88)|9(?:00|9[89])))\\d{4}|(?:2(?:0[1-35-9]|1[02-9]|2[03-589]|3[149]|4[08]|5[1-46]|6[0279]|7[0269]|8[13])|3(?:0[1-57-9]|1[02-9]|2[01356]|3[0-24679]|4[167]|5[12]|6[014]|8[056])|4(?:0[124-9]|1[02-579]|2[3-5]|3[0245]|4[023578]|58|6[39]|7[0589]|8[04])|5(?:0[1-47-9]|1[0235-8]|20|3[0149]|4[01]|5[19]|6[1-47]|7[0-5]|8[056])|6(?:0[1-35-9]|1[024-9]|2[03689]|[34][016]|5[0179]|6[0-279]|78|8[0-29])|7(?:0[1-46-8]|1[2-9]|2[04-7]|3[1247]|4[037]|5[47]|6[02359]|7[0-59]|8[156])|8(?:0[1-68]|1[02-8]|2[08]|3[0-289]|4[03578]|5[046-9]|6[02-5]|7[028])|9(?:0[1346-9]|1[02-9]|2[0589]|3[0146-8]|4[01579]|5[12469]|7[0-389]|8[04-69]))[2-9]\\d{6}"], [""], ["8(?:00|33|44|55|66|77|88)[2-9]\\d{6}"], ["900[2-9]\\d{6}"], ["52(?:3(?:[2-46-9][02-9]\\d|5(?:[02-46-9]\\d|5[0-46-9]))|4(?:[2-478][02-9]\\d|5(?:[034]\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\d)|9(?:[05-9]\\d|2[0-5]|49)))\\d{4}|52[34][2-9]1[02-9]\\d{4}|5(?:00|2[12]|33|44|66|77|88)[2-9]\\d{6}"]]], UY: ["598", "0(?:0|1[3-9]\\d)", "4\\d{9}|[1249]\\d{7}|(?:[49]\\d|80)\\d{5}", [7, 8, 10], [["(\\d{3})(\\d{4})", "$1 $2", ["405|8|90"], "0$1"], ["(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3", ["9"], "0$1"], ["(\\d{4})(\\d{4})", "$1 $2", ["[124]"]], ["(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["4"], "0$1"]], "0", 0, 0, 0, 0, 0, 0, "00", " int. "], UZ: ["998", "810", "(?:33|55|[679]\\d|88)\\d{7}", [9], [["(\\d{2})(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[35-9]"], "8 $1"]], "8", 0, 0, 0, 0, 0, 0, "8~10"], VA: ["39", "00", "0\\d{5,10}|3[0-8]\\d{7,10}|55\\d{8}|8\\d{5}(?:\\d{2,4})?|(?:1\\d|39)\\d{7,8}", [6, 7, 8, 9, 10, 11], 0, 0, 0, 0, 0, 0, "06698"], VC: ["1", "011", "(?:[58]\\d\\d|784|900)\\d{7}", [10], 0, "1", 0, "1|([2-7]\\d{6})$", "784$1", 0, "784"], VE: ["58", "00", "[68]00\\d{7}|(?:[24]\\d|[59]0)\\d{8}", [10], [["(\\d{3})(\\d{7})", "$1-$2", ["[24-689]"], "0$1"]], "0"], VG: ["1", "011", "(?:284|[58]\\d\\d|900)\\d{7}", [10], 0, "1", 0, "1|([2-578]\\d{6})$", "284$1", 0, "284"], VI: ["1", "011", "[58]\\d{9}|(?:34|90)0\\d{7}", [10], 0, "1", 0, "1|([2-9]\\d{6})$", "340$1", 0, "340"], VN: ["84", "00", "[12]\\d{9}|[135-9]\\d{8}|[16]\\d{7}|[16-8]\\d{6}", [7, 8, 9, 10], [["(\\d{2})(\\d{5})", "$1 $2", ["80"], "0$1", 1], ["(\\d{4})(\\d{4,6})", "$1 $2", ["1"], 0, 1], ["(\\d{2})(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[69]"], "0$1", 1], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[3578]"], "0$1", 1], ["(\\d{2})(\\d{4})(\\d{4})", "$1 $2 $3", ["2[48]"], "0$1", 1], ["(\\d{3})(\\d{4})(\\d{3})", "$1 $2 $3", ["2"], "0$1", 1]], "0"], VU: ["678", "00", "[57-9]\\d{6}|(?:[238]\\d|48)\\d{3}", [5, 7], [["(\\d{3})(\\d{4})", "$1 $2", ["[57-9]"]]]], WF: ["681", "00", "(?:40|72)\\d{4}|8\\d{5}(?:\\d{3})?", [6, 9], [["(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3", ["[478]"]], ["(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["8"]]]], WS: ["685", "0", "(?:[2-6]|8\\d{5})\\d{4}|[78]\\d{6}|[68]\\d{5}", [5, 6, 7, 10], [["(\\d{5})", "$1", ["[2-5]|6[1-9]"]], ["(\\d{3})(\\d{3,7})", "$1 $2", ["[68]"]], ["(\\d{2})(\\d{5})", "$1 $2", ["7"]]]], XK: ["383", "00", "[23]\\d{7,8}|(?:4\\d\\d|[89]00)\\d{5}", [8, 9], [["(\\d{3})(\\d{5})", "$1 $2", ["[89]"], "0$1"], ["(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3", ["[2-4]"], "0$1"], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[23]"], "0$1"]], "0"], YE: ["967", "00", "(?:1|7\\d)\\d{7}|[1-7]\\d{6}", [7, 8, 9], [["(\\d)(\\d{3})(\\d{3,4})", "$1 $2 $3", ["[1-6]|7[24-68]"], "0$1"], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["7"], "0$1"]], "0"], YT: ["262", "00", "80\\d{7}|(?:26|63)9\\d{6}", [9], 0, "0", 0, 0, 0, 0, "269|63"], ZA: ["27", "00", "[1-79]\\d{8}|8\\d{4,9}", [5, 6, 7, 8, 9, 10], [["(\\d{2})(\\d{3,4})", "$1 $2", ["8[1-4]"], "0$1"], ["(\\d{2})(\\d{3})(\\d{2,3})", "$1 $2 $3", ["8[1-4]"], "0$1"], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["860"], "0$1"], ["(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["[1-9]"], "0$1"], ["(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["8"], "0$1"]], "0"], ZM: ["260", "00", "(?:63|80)0\\d{6}|(?:21|[79]\\d)\\d{7}", [9], [["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[28]"], "0$1"], ["(\\d{2})(\\d{7})", "$1 $2", ["[79]"], "0$1"]], "0"], ZW: ["263", "00", "2(?:[0-57-9]\\d{6,8}|6[0-24-9]\\d{6,7})|[38]\\d{9}|[35-8]\\d{8}|[3-6]\\d{7}|[1-689]\\d{6}|[1-3569]\\d{5}|[1356]\\d{4}", [5, 6, 7, 8, 9, 10], [["(\\d{3})(\\d{3,5})", "$1 $2", ["2(?:0[45]|2[278]|[49]8)|3(?:[09]8|17)|6(?:[29]8|37|75)|[23][78]|(?:33|5[15]|6[68])[78]"], "0$1"], ["(\\d)(\\d{3})(\\d{2,4})", "$1 $2 $3", ["[49]"], "0$1"], ["(\\d{3})(\\d{4})", "$1 $2", ["80"], "0$1"], ["(\\d{2})(\\d{7})", "$1 $2", ["24|8[13-59]|(?:2[05-79]|39|5[45]|6[15-8])2", "2(?:02[014]|4|[56]20|[79]2)|392|5(?:42|525)|6(?:[16-8]21|52[013])|8[13-59]"], "(0$1)"], ["(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["7"], "0$1"], ["(\\d{3})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["2(?:1[39]|2[0157]|[378]|[56][14])|3(?:12|29)", "2(?:1[39]|2[0157]|[378]|[56][14])|3(?:123|29)"], "0$1"], ["(\\d{4})(\\d{6})", "$1 $2", ["8"], "0$1"], ["(\\d{2})(\\d{3,5})", "$1 $2", ["1|2(?:0[0-36-9]|12|29|[56])|3(?:1[0-689]|[24-6])|5(?:[0236-9]|1[2-4])|6(?:[013-59]|7[0-46-9])|(?:33|55|6[68])[0-69]|(?:29|3[09]|62)[0-79]"], "0$1"], ["(\\d{2})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["29[013-9]|39|54"], "0$1"], ["(\\d{4})(\\d{3,5})", "$1 $2", ["(?:25|54)8", "258|5483"], "0$1"]], "0"] }, nonGeographic: { "800": ["800", 0, "(?:005|[1-9]\\d\\d)\\d{5}", [8], [["(\\d{4})(\\d{4})", "$1 $2", ["\\d"]]], 0, 0, 0, 0, 0, 0, [0, 0, ["(?:005|[1-9]\\d\\d)\\d{5}"]]], "808": ["808", 0, "[1-9]\\d{7}", [8], [["(\\d{4})(\\d{4})", "$1 $2", ["[1-9]"]]], 0, 0, 0, 0, 0, 0, [0, 0, 0, 0, 0, 0, 0, 0, 0, ["[1-9]\\d{7}"]]], "870": ["870", 0, "7\\d{11}|[35-7]\\d{8}", [9, 12], [["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[35-7]"]]], 0, 0, 0, 0, 0, 0, [0, ["(?:[356]|774[45])\\d{8}|7[6-8]\\d{7}"]]], "878": ["878", 0, "10\\d{10}", [12], [["(\\d{2})(\\d{5})(\\d{5})", "$1 $2 $3", ["1"]]], 0, 0, 0, 0, 0, 0, [0, 0, 0, 0, 0, 0, 0, 0, ["10\\d{10}"]]], "881": ["881", 0, "[0-36-9]\\d{8}", [9], [["(\\d)(\\d{3})(\\d{5})", "$1 $2 $3", ["[0-36-9]"]]], 0, 0, 0, 0, 0, 0, [0, ["[0-36-9]\\d{8}"]]], "882": ["882", 0, "[13]\\d{6}(?:\\d{2,5})?|285\\d{9}|(?:[19]\\d|49)\\d{6}", [7, 8, 9, 10, 11, 12], [["(\\d{2})(\\d{5})", "$1 $2", ["16|342"]], ["(\\d{2})(\\d{6})", "$1 $2", ["4"]], ["(\\d{2})(\\d{2})(\\d{4})", "$1 $2 $3", ["[19]"]], ["(\\d{2})(\\d{4})(\\d{3})", "$1 $2 $3", ["3[23]"]], ["(\\d{2})(\\d{3,4})(\\d{4})", "$1 $2 $3", ["1"]], ["(\\d{2})(\\d{4})(\\d{4})", "$1 $2 $3", ["34[57]"]], ["(\\d{3})(\\d{4})(\\d{4})", "$1 $2 $3", ["34"]], ["(\\d{2})(\\d{4,5})(\\d{5})", "$1 $2 $3", ["[1-3]"]]], 0, 0, 0, 0, 0, 0, [0, ["342\\d{4}|(?:337|49)\\d{6}|3(?:2|47|7\\d{3})\\d{7}", [7, 8, 9, 10, 12]], 0, 0, 0, 0, 0, 0, ["1(?:3(?:0[0347]|[13][0139]|2[035]|4[013568]|6[0459]|7[06]|8[15-8]|9[0689])\\d{4}|6\\d{5,10})|(?:(?:285\\d\\d|3(?:45|[69]\\d{3}))\\d|9[89])\\d{6}"]]], "883": ["883", 0, "210\\d{7}|51\\d{7}(?:\\d{3})?", [9, 10, 12], [["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["510"]], ["(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["2"]], ["(\\d{3})(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3 $4", ["510"]], ["(\\d{4})(\\d{4})(\\d{4})", "$1 $2 $3", ["5"]]], 0, 0, 0, 0, 0, 0, [0, 0, 0, 0, 0, 0, 0, 0, ["(?:210|51[013]0\\d)\\d{7}|5100\\d{5}"]]], "888": ["888", 0, "\\d{11}", [11], [["(\\d{3})(\\d{3})(\\d{5})", "$1 $2 $3"]], 0, 0, 0, 0, 0, 0, [0, 0, 0, 0, 0, 0, ["\\d{11}"]]], "979": ["979", 0, "[1359]\\d{8}", [9], [["(\\d)(\\d{4})(\\d{4})", "$1 $2 $3", ["[1359]"]]], 0, 0, 0, 0, 0, 0, [0, 0, 0, ["[1359]\\d{8}"]]] } };
  }
});

// node_modules/libphonenumber-js/build/constants.js
var require_constants = __commonJS({
  "node_modules/libphonenumber-js/build/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.PLUS_CHARS = exports.VALID_PUNCTUATION = exports.WHITESPACE = exports.VALID_DIGITS = exports.MAX_LENGTH_COUNTRY_CODE = exports.MAX_LENGTH_FOR_NSN = exports.MIN_LENGTH_FOR_NSN = void 0;
    var MIN_LENGTH_FOR_NSN = 2;
    exports.MIN_LENGTH_FOR_NSN = MIN_LENGTH_FOR_NSN;
    var MAX_LENGTH_FOR_NSN = 17;
    exports.MAX_LENGTH_FOR_NSN = MAX_LENGTH_FOR_NSN;
    var MAX_LENGTH_COUNTRY_CODE = 3;
    exports.MAX_LENGTH_COUNTRY_CODE = MAX_LENGTH_COUNTRY_CODE;
    var VALID_DIGITS = "0-9\uFF10-\uFF19\u0660-\u0669\u06F0-\u06F9";
    exports.VALID_DIGITS = VALID_DIGITS;
    var DASHES = "-\u2010-\u2015\u2212\u30FC\uFF0D";
    var SLASHES = "\uFF0F/";
    var DOTS = "\uFF0E.";
    var WHITESPACE = " \xA0\xAD\u200B\u2060\u3000";
    exports.WHITESPACE = WHITESPACE;
    var BRACKETS = "()\uFF08\uFF09\uFF3B\uFF3D\\[\\]";
    var TILDES = "~\u2053\u223C\uFF5E";
    var VALID_PUNCTUATION = "".concat(DASHES).concat(SLASHES).concat(DOTS).concat(WHITESPACE).concat(BRACKETS).concat(TILDES);
    exports.VALID_PUNCTUATION = VALID_PUNCTUATION;
    var PLUS_CHARS = "+\uFF0B";
    exports.PLUS_CHARS = PLUS_CHARS;
  }
});

// node_modules/libphonenumber-js/build/ParseError.js
var require_ParseError = __commonJS({
  "node_modules/libphonenumber-js/build/ParseError.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    var ParseError = function ParseError2(code) {
      _classCallCheck(this, ParseError2);
      this.name = this.constructor.name;
      this.message = code;
      this.stack = new Error(code).stack;
    };
    exports["default"] = ParseError;
    ParseError.prototype = Object.create(Error.prototype);
    ParseError.prototype.constructor = ParseError;
  }
});

// node_modules/libphonenumber-js/build/tools/semver-compare.js
var require_semver_compare = __commonJS({
  "node_modules/libphonenumber-js/build/tools/semver-compare.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = _default;
    function _default(a, b) {
      a = a.split("-");
      b = b.split("-");
      var pa = a[0].split(".");
      var pb = b[0].split(".");
      for (var i = 0; i < 3; i++) {
        var na = Number(pa[i]);
        var nb = Number(pb[i]);
        if (na > nb)
          return 1;
        if (nb > na)
          return -1;
        if (!isNaN(na) && isNaN(nb))
          return 1;
        if (isNaN(na) && !isNaN(nb))
          return -1;
      }
      if (a[1] && b[1]) {
        return a[1] > b[1] ? 1 : a[1] < b[1] ? -1 : 0;
      }
      return !a[1] && b[1] ? 1 : a[1] && !b[1] ? -1 : 0;
    }
  }
});

// node_modules/libphonenumber-js/build/metadata.js
var require_metadata = __commonJS({
  "node_modules/libphonenumber-js/build/metadata.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.validateMetadata = validateMetadata;
    exports.getExtPrefix = getExtPrefix;
    exports.getCountryCallingCode = getCountryCallingCode;
    exports.isSupportedCountry = isSupportedCountry;
    exports["default"] = void 0;
    var _semverCompare = _interopRequireDefault(require_semver_compare());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _typeof(obj) {
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var V3 = "1.2.0";
    var V4 = "1.7.35";
    var DEFAULT_EXT_PREFIX = " ext. ";
    var CALLING_CODE_REG_EXP = /^\d+$/;
    var Metadata = /* @__PURE__ */ function() {
      function Metadata2(metadata) {
        _classCallCheck(this, Metadata2);
        validateMetadata(metadata);
        this.metadata = metadata;
        setVersion.call(this, metadata);
      }
      _createClass(Metadata2, [{
        key: "getCountries",
        value: function getCountries() {
          return Object.keys(this.metadata.countries).filter(function(_) {
            return _ !== "001";
          });
        }
      }, {
        key: "getCountryMetadata",
        value: function getCountryMetadata(countryCode) {
          return this.metadata.countries[countryCode];
        }
      }, {
        key: "nonGeographic",
        value: function nonGeographic() {
          if (this.v1 || this.v2 || this.v3)
            return;
          return this.metadata.nonGeographic || this.metadata.nonGeographical;
        }
      }, {
        key: "hasCountry",
        value: function hasCountry(country) {
          return this.getCountryMetadata(country) !== void 0;
        }
      }, {
        key: "hasCallingCode",
        value: function hasCallingCode(callingCode) {
          if (this.getCountryCodesForCallingCode(callingCode)) {
            return true;
          }
          if (this.nonGeographic()) {
            if (this.nonGeographic()[callingCode]) {
              return true;
            }
          } else {
            var countryCodes = this.countryCallingCodes()[callingCode];
            if (countryCodes && countryCodes.length === 1 && countryCodes[0] === "001") {
              return true;
            }
          }
        }
      }, {
        key: "isNonGeographicCallingCode",
        value: function isNonGeographicCallingCode(callingCode) {
          if (this.nonGeographic()) {
            return this.nonGeographic()[callingCode] ? true : false;
          } else {
            return this.getCountryCodesForCallingCode(callingCode) ? false : true;
          }
        }
      }, {
        key: "country",
        value: function country(countryCode) {
          return this.selectNumberingPlan(countryCode);
        }
      }, {
        key: "selectNumberingPlan",
        value: function selectNumberingPlan(countryCode, callingCode) {
          if (countryCode && CALLING_CODE_REG_EXP.test(countryCode)) {
            callingCode = countryCode;
            countryCode = null;
          }
          if (countryCode && countryCode !== "001") {
            if (!this.hasCountry(countryCode)) {
              throw new Error("Unknown country: ".concat(countryCode));
            }
            this.numberingPlan = new NumberingPlan(this.getCountryMetadata(countryCode), this);
          } else if (callingCode) {
            if (!this.hasCallingCode(callingCode)) {
              throw new Error("Unknown calling code: ".concat(callingCode));
            }
            this.numberingPlan = new NumberingPlan(this.getNumberingPlanMetadata(callingCode), this);
          } else {
            this.numberingPlan = void 0;
          }
          return this;
        }
      }, {
        key: "getCountryCodesForCallingCode",
        value: function getCountryCodesForCallingCode(callingCode) {
          var countryCodes = this.countryCallingCodes()[callingCode];
          if (countryCodes) {
            if (countryCodes.length === 1 && countryCodes[0].length === 3) {
              return;
            }
            return countryCodes;
          }
        }
      }, {
        key: "getCountryCodeForCallingCode",
        value: function getCountryCodeForCallingCode(callingCode) {
          var countryCodes = this.getCountryCodesForCallingCode(callingCode);
          if (countryCodes) {
            return countryCodes[0];
          }
        }
      }, {
        key: "getNumberingPlanMetadata",
        value: function getNumberingPlanMetadata(callingCode) {
          var countryCode = this.getCountryCodeForCallingCode(callingCode);
          if (countryCode) {
            return this.getCountryMetadata(countryCode);
          }
          if (this.nonGeographic()) {
            var metadata = this.nonGeographic()[callingCode];
            if (metadata) {
              return metadata;
            }
          } else {
            var countryCodes = this.countryCallingCodes()[callingCode];
            if (countryCodes && countryCodes.length === 1 && countryCodes[0] === "001") {
              return this.metadata.countries["001"];
            }
          }
        }
      }, {
        key: "countryCallingCode",
        value: function countryCallingCode() {
          return this.numberingPlan.callingCode();
        }
      }, {
        key: "IDDPrefix",
        value: function IDDPrefix() {
          return this.numberingPlan.IDDPrefix();
        }
      }, {
        key: "defaultIDDPrefix",
        value: function defaultIDDPrefix() {
          return this.numberingPlan.defaultIDDPrefix();
        }
      }, {
        key: "nationalNumberPattern",
        value: function nationalNumberPattern() {
          return this.numberingPlan.nationalNumberPattern();
        }
      }, {
        key: "possibleLengths",
        value: function possibleLengths() {
          return this.numberingPlan.possibleLengths();
        }
      }, {
        key: "formats",
        value: function formats() {
          return this.numberingPlan.formats();
        }
      }, {
        key: "nationalPrefixForParsing",
        value: function nationalPrefixForParsing() {
          return this.numberingPlan.nationalPrefixForParsing();
        }
      }, {
        key: "nationalPrefixTransformRule",
        value: function nationalPrefixTransformRule() {
          return this.numberingPlan.nationalPrefixTransformRule();
        }
      }, {
        key: "leadingDigits",
        value: function leadingDigits() {
          return this.numberingPlan.leadingDigits();
        }
      }, {
        key: "hasTypes",
        value: function hasTypes() {
          return this.numberingPlan.hasTypes();
        }
      }, {
        key: "type",
        value: function type(_type) {
          return this.numberingPlan.type(_type);
        }
      }, {
        key: "ext",
        value: function ext() {
          return this.numberingPlan.ext();
        }
      }, {
        key: "countryCallingCodes",
        value: function countryCallingCodes() {
          if (this.v1)
            return this.metadata.country_phone_code_to_countries;
          return this.metadata.country_calling_codes;
        }
      }, {
        key: "chooseCountryByCountryCallingCode",
        value: function chooseCountryByCountryCallingCode(callingCode) {
          return this.selectNumberingPlan(callingCode);
        }
      }, {
        key: "hasSelectedNumberingPlan",
        value: function hasSelectedNumberingPlan() {
          return this.numberingPlan !== void 0;
        }
      }]);
      return Metadata2;
    }();
    exports["default"] = Metadata;
    var NumberingPlan = /* @__PURE__ */ function() {
      function NumberingPlan2(metadata, globalMetadataObject) {
        _classCallCheck(this, NumberingPlan2);
        this.globalMetadataObject = globalMetadataObject;
        this.metadata = metadata;
        setVersion.call(this, globalMetadataObject.metadata);
      }
      _createClass(NumberingPlan2, [{
        key: "callingCode",
        value: function callingCode() {
          return this.metadata[0];
        }
      }, {
        key: "getDefaultCountryMetadataForRegion",
        value: function getDefaultCountryMetadataForRegion() {
          return this.globalMetadataObject.getNumberingPlanMetadata(this.callingCode());
        }
      }, {
        key: "IDDPrefix",
        value: function IDDPrefix() {
          if (this.v1 || this.v2)
            return;
          return this.metadata[1];
        }
      }, {
        key: "defaultIDDPrefix",
        value: function defaultIDDPrefix() {
          if (this.v1 || this.v2)
            return;
          return this.metadata[12];
        }
      }, {
        key: "nationalNumberPattern",
        value: function nationalNumberPattern() {
          if (this.v1 || this.v2)
            return this.metadata[1];
          return this.metadata[2];
        }
      }, {
        key: "possibleLengths",
        value: function possibleLengths() {
          if (this.v1)
            return;
          return this.metadata[this.v2 ? 2 : 3];
        }
      }, {
        key: "_getFormats",
        value: function _getFormats(metadata) {
          return metadata[this.v1 ? 2 : this.v2 ? 3 : 4];
        }
      }, {
        key: "formats",
        value: function formats() {
          var _this = this;
          var formats2 = this._getFormats(this.metadata) || this._getFormats(this.getDefaultCountryMetadataForRegion()) || [];
          return formats2.map(function(_) {
            return new Format(_, _this);
          });
        }
      }, {
        key: "nationalPrefix",
        value: function nationalPrefix() {
          return this.metadata[this.v1 ? 3 : this.v2 ? 4 : 5];
        }
      }, {
        key: "_getNationalPrefixFormattingRule",
        value: function _getNationalPrefixFormattingRule(metadata) {
          return metadata[this.v1 ? 4 : this.v2 ? 5 : 6];
        }
      }, {
        key: "nationalPrefixFormattingRule",
        value: function nationalPrefixFormattingRule() {
          return this._getNationalPrefixFormattingRule(this.metadata) || this._getNationalPrefixFormattingRule(this.getDefaultCountryMetadataForRegion());
        }
      }, {
        key: "_nationalPrefixForParsing",
        value: function _nationalPrefixForParsing() {
          return this.metadata[this.v1 ? 5 : this.v2 ? 6 : 7];
        }
      }, {
        key: "nationalPrefixForParsing",
        value: function nationalPrefixForParsing() {
          return this._nationalPrefixForParsing() || this.nationalPrefix();
        }
      }, {
        key: "nationalPrefixTransformRule",
        value: function nationalPrefixTransformRule() {
          return this.metadata[this.v1 ? 6 : this.v2 ? 7 : 8];
        }
      }, {
        key: "_getNationalPrefixIsOptionalWhenFormatting",
        value: function _getNationalPrefixIsOptionalWhenFormatting() {
          return !!this.metadata[this.v1 ? 7 : this.v2 ? 8 : 9];
        }
      }, {
        key: "nationalPrefixIsOptionalWhenFormattingInNationalFormat",
        value: function nationalPrefixIsOptionalWhenFormattingInNationalFormat() {
          return this._getNationalPrefixIsOptionalWhenFormatting(this.metadata) || this._getNationalPrefixIsOptionalWhenFormatting(this.getDefaultCountryMetadataForRegion());
        }
      }, {
        key: "leadingDigits",
        value: function leadingDigits() {
          return this.metadata[this.v1 ? 8 : this.v2 ? 9 : 10];
        }
      }, {
        key: "types",
        value: function types() {
          return this.metadata[this.v1 ? 9 : this.v2 ? 10 : 11];
        }
      }, {
        key: "hasTypes",
        value: function hasTypes() {
          if (this.types() && this.types().length === 0) {
            return false;
          }
          return !!this.types();
        }
      }, {
        key: "type",
        value: function type(_type2) {
          if (this.hasTypes() && getType(this.types(), _type2)) {
            return new Type(getType(this.types(), _type2), this);
          }
        }
      }, {
        key: "ext",
        value: function ext() {
          if (this.v1 || this.v2)
            return DEFAULT_EXT_PREFIX;
          return this.metadata[13] || DEFAULT_EXT_PREFIX;
        }
      }]);
      return NumberingPlan2;
    }();
    var Format = /* @__PURE__ */ function() {
      function Format2(format, metadata) {
        _classCallCheck(this, Format2);
        this._format = format;
        this.metadata = metadata;
      }
      _createClass(Format2, [{
        key: "pattern",
        value: function pattern() {
          return this._format[0];
        }
      }, {
        key: "format",
        value: function format() {
          return this._format[1];
        }
      }, {
        key: "leadingDigitsPatterns",
        value: function leadingDigitsPatterns() {
          return this._format[2] || [];
        }
      }, {
        key: "nationalPrefixFormattingRule",
        value: function nationalPrefixFormattingRule() {
          return this._format[3] || this.metadata.nationalPrefixFormattingRule();
        }
      }, {
        key: "nationalPrefixIsOptionalWhenFormattingInNationalFormat",
        value: function nationalPrefixIsOptionalWhenFormattingInNationalFormat() {
          return !!this._format[4] || this.metadata.nationalPrefixIsOptionalWhenFormattingInNationalFormat();
        }
      }, {
        key: "nationalPrefixIsMandatoryWhenFormattingInNationalFormat",
        value: function nationalPrefixIsMandatoryWhenFormattingInNationalFormat() {
          return this.usesNationalPrefix() && !this.nationalPrefixIsOptionalWhenFormattingInNationalFormat();
        }
      }, {
        key: "usesNationalPrefix",
        value: function usesNationalPrefix() {
          return this.nationalPrefixFormattingRule() && !FIRST_GROUP_ONLY_PREFIX_PATTERN.test(this.nationalPrefixFormattingRule()) ? true : false;
        }
      }, {
        key: "internationalFormat",
        value: function internationalFormat() {
          return this._format[5] || this.format();
        }
      }]);
      return Format2;
    }();
    var FIRST_GROUP_ONLY_PREFIX_PATTERN = /^\(?\$1\)?$/;
    var Type = /* @__PURE__ */ function() {
      function Type2(type, metadata) {
        _classCallCheck(this, Type2);
        this.type = type;
        this.metadata = metadata;
      }
      _createClass(Type2, [{
        key: "pattern",
        value: function pattern() {
          if (this.metadata.v1)
            return this.type;
          return this.type[0];
        }
      }, {
        key: "possibleLengths",
        value: function possibleLengths() {
          if (this.metadata.v1)
            return;
          return this.type[1] || this.metadata.possibleLengths();
        }
      }]);
      return Type2;
    }();
    function getType(types, type) {
      switch (type) {
        case "FIXED_LINE":
          return types[0];
        case "MOBILE":
          return types[1];
        case "TOLL_FREE":
          return types[2];
        case "PREMIUM_RATE":
          return types[3];
        case "PERSONAL_NUMBER":
          return types[4];
        case "VOICEMAIL":
          return types[5];
        case "UAN":
          return types[6];
        case "PAGER":
          return types[7];
        case "VOIP":
          return types[8];
        case "SHARED_COST":
          return types[9];
      }
    }
    function validateMetadata(metadata) {
      if (!metadata) {
        throw new Error("[libphonenumber-js] `metadata` argument not passed. Check your arguments.");
      }
      if (!is_object(metadata) || !is_object(metadata.countries)) {
        throw new Error("[libphonenumber-js] `metadata` argument was passed but it's not a valid metadata. Must be an object having `.countries` child object property. Got ".concat(is_object(metadata) ? "an object of shape: { " + Object.keys(metadata).join(", ") + " }" : "a " + type_of(metadata) + ": " + metadata, "."));
      }
    }
    var is_object = function is_object2(_) {
      return _typeof(_) === "object";
    };
    var type_of = function type_of2(_) {
      return _typeof(_);
    };
    function getExtPrefix(country, metadata) {
      metadata = new Metadata(metadata);
      if (metadata.hasCountry(country)) {
        return metadata.country(country).ext();
      }
      return DEFAULT_EXT_PREFIX;
    }
    function getCountryCallingCode(country, metadata) {
      metadata = new Metadata(metadata);
      if (metadata.hasCountry(country)) {
        return metadata.country(country).countryCallingCode();
      }
      throw new Error("Unknown country: ".concat(country));
    }
    function isSupportedCountry(country, metadata) {
      return metadata.countries[country] !== void 0;
    }
    function setVersion(metadata) {
      var version2 = metadata.version;
      if (typeof version2 === "number") {
        this.v1 = version2 === 1;
        this.v2 = version2 === 2;
        this.v3 = version2 === 3;
        this.v4 = version2 === 4;
      } else {
        if (!version2) {
          this.v1 = true;
        } else if ((0, _semverCompare["default"])(version2, V3) === -1) {
          this.v2 = true;
        } else if ((0, _semverCompare["default"])(version2, V4) === -1) {
          this.v3 = true;
        } else {
          this.v4 = true;
        }
      }
    }
  }
});

// node_modules/libphonenumber-js/build/helpers/extension/createExtensionPattern.js
var require_createExtensionPattern = __commonJS({
  "node_modules/libphonenumber-js/build/helpers/extension/createExtensionPattern.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = createExtensionPattern;
    var _constants = require_constants();
    var RFC3966_EXTN_PREFIX = ";ext=";
    var getExtensionDigitsPattern = function getExtensionDigitsPattern2(maxLength) {
      return "([".concat(_constants.VALID_DIGITS, "]{1,").concat(maxLength, "})");
    };
    function createExtensionPattern(purpose) {
      var extLimitAfterExplicitLabel = "20";
      var extLimitAfterLikelyLabel = "15";
      var extLimitAfterAmbiguousChar = "9";
      var extLimitWhenNotSure = "6";
      var possibleSeparatorsBetweenNumberAndExtLabel = "[ \xA0\\t,]*";
      var possibleCharsAfterExtLabel = "[:\\.\uFF0E]?[ \xA0\\t,-]*";
      var optionalExtnSuffix = "#?";
      var explicitExtLabels = "(?:e?xt(?:ensi(?:o\u0301?|\xF3))?n?|\uFF45?\uFF58\uFF54\uFF4E?|\u0434\u043E\u0431|anexo)";
      var ambiguousExtLabels = "(?:[x\uFF58#\uFF03~\uFF5E]|int|\uFF49\uFF4E\uFF54)";
      var ambiguousSeparator = "[- ]+";
      var possibleSeparatorsNumberExtLabelNoComma = "[ \xA0\\t]*";
      var autoDiallingAndExtLabelsFound = "(?:,{2}|;)";
      var rfcExtn = RFC3966_EXTN_PREFIX + getExtensionDigitsPattern(extLimitAfterExplicitLabel);
      var explicitExtn = possibleSeparatorsBetweenNumberAndExtLabel + explicitExtLabels + possibleCharsAfterExtLabel + getExtensionDigitsPattern(extLimitAfterExplicitLabel) + optionalExtnSuffix;
      var ambiguousExtn = possibleSeparatorsBetweenNumberAndExtLabel + ambiguousExtLabels + possibleCharsAfterExtLabel + getExtensionDigitsPattern(extLimitAfterAmbiguousChar) + optionalExtnSuffix;
      var americanStyleExtnWithSuffix = ambiguousSeparator + getExtensionDigitsPattern(extLimitWhenNotSure) + "#";
      var autoDiallingExtn = possibleSeparatorsNumberExtLabelNoComma + autoDiallingAndExtLabelsFound + possibleCharsAfterExtLabel + getExtensionDigitsPattern(extLimitAfterLikelyLabel) + optionalExtnSuffix;
      var onlyCommasExtn = possibleSeparatorsNumberExtLabelNoComma + "(?:,)+" + possibleCharsAfterExtLabel + getExtensionDigitsPattern(extLimitAfterAmbiguousChar) + optionalExtnSuffix;
      return rfcExtn + "|" + explicitExtn + "|" + ambiguousExtn + "|" + americanStyleExtnWithSuffix + "|" + autoDiallingExtn + "|" + onlyCommasExtn;
    }
  }
});

// node_modules/libphonenumber-js/build/helpers/isViablePhoneNumber.js
var require_isViablePhoneNumber = __commonJS({
  "node_modules/libphonenumber-js/build/helpers/isViablePhoneNumber.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = isViablePhoneNumber;
    exports.isViablePhoneNumberStart = isViablePhoneNumberStart;
    exports.VALID_PHONE_NUMBER_WITH_EXTENSION = exports.VALID_PHONE_NUMBER = void 0;
    var _constants = require_constants();
    var _createExtensionPattern = _interopRequireDefault(require_createExtensionPattern());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    var MIN_LENGTH_PHONE_NUMBER_PATTERN = "[" + _constants.VALID_DIGITS + "]{" + _constants.MIN_LENGTH_FOR_NSN + "}";
    var VALID_PHONE_NUMBER = "[" + _constants.PLUS_CHARS + "]{0,1}(?:[" + _constants.VALID_PUNCTUATION + "]*[" + _constants.VALID_DIGITS + "]){3,}[" + _constants.VALID_PUNCTUATION + _constants.VALID_DIGITS + "]*";
    exports.VALID_PHONE_NUMBER = VALID_PHONE_NUMBER;
    var VALID_PHONE_NUMBER_START_REG_EXP = new RegExp("^[" + _constants.PLUS_CHARS + "]{0,1}(?:[" + _constants.VALID_PUNCTUATION + "]*[" + _constants.VALID_DIGITS + "]){1,2}$", "i");
    var VALID_PHONE_NUMBER_WITH_EXTENSION = VALID_PHONE_NUMBER + "(?:" + (0, _createExtensionPattern["default"])() + ")?";
    exports.VALID_PHONE_NUMBER_WITH_EXTENSION = VALID_PHONE_NUMBER_WITH_EXTENSION;
    var VALID_PHONE_NUMBER_PATTERN = new RegExp("^" + MIN_LENGTH_PHONE_NUMBER_PATTERN + "$|^" + VALID_PHONE_NUMBER_WITH_EXTENSION + "$", "i");
    function isViablePhoneNumber(number) {
      return number.length >= _constants.MIN_LENGTH_FOR_NSN && VALID_PHONE_NUMBER_PATTERN.test(number);
    }
    function isViablePhoneNumberStart(number) {
      return VALID_PHONE_NUMBER_START_REG_EXP.test(number);
    }
  }
});

// node_modules/libphonenumber-js/build/helpers/extension/extractExtension.js
var require_extractExtension = __commonJS({
  "node_modules/libphonenumber-js/build/helpers/extension/extractExtension.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = extractExtension;
    var _createExtensionPattern = _interopRequireDefault(require_createExtensionPattern());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    var EXTN_PATTERN = new RegExp("(?:" + (0, _createExtensionPattern["default"])() + ")$", "i");
    function extractExtension(number) {
      var start = number.search(EXTN_PATTERN);
      if (start < 0) {
        return {};
      }
      var numberWithoutExtension = number.slice(0, start);
      var matches = number.match(EXTN_PATTERN);
      var i = 1;
      while (i < matches.length) {
        if (matches[i]) {
          return {
            number: numberWithoutExtension,
            ext: matches[i]
          };
        }
        i++;
      }
    }
  }
});

// node_modules/libphonenumber-js/build/helpers/parseDigits.js
var require_parseDigits = __commonJS({
  "node_modules/libphonenumber-js/build/helpers/parseDigits.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.parseDigit = parseDigit;
    exports["default"] = parseDigits;
    exports.DIGITS = void 0;
    var DIGITS = {
      "0": "0",
      "1": "1",
      "2": "2",
      "3": "3",
      "4": "4",
      "5": "5",
      "6": "6",
      "7": "7",
      "8": "8",
      "9": "9",
      "\uFF10": "0",
      "\uFF11": "1",
      "\uFF12": "2",
      "\uFF13": "3",
      "\uFF14": "4",
      "\uFF15": "5",
      "\uFF16": "6",
      "\uFF17": "7",
      "\uFF18": "8",
      "\uFF19": "9",
      "\u0660": "0",
      "\u0661": "1",
      "\u0662": "2",
      "\u0663": "3",
      "\u0664": "4",
      "\u0665": "5",
      "\u0666": "6",
      "\u0667": "7",
      "\u0668": "8",
      "\u0669": "9",
      "\u06F0": "0",
      "\u06F1": "1",
      "\u06F2": "2",
      "\u06F3": "3",
      "\u06F4": "4",
      "\u06F5": "5",
      "\u06F6": "6",
      "\u06F7": "7",
      "\u06F8": "8",
      "\u06F9": "9"
    };
    exports.DIGITS = DIGITS;
    function parseDigit(character) {
      return DIGITS[character];
    }
    function parseDigits(string) {
      var result = "";
      for (var _iterator = string.split(""), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator](); ; ) {
        var _ref;
        if (_isArray) {
          if (_i >= _iterator.length)
            break;
          _ref = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done)
            break;
          _ref = _i.value;
        }
        var character = _ref;
        var digit = parseDigit(character);
        if (digit) {
          result += digit;
        }
      }
      return result;
    }
  }
});

// node_modules/libphonenumber-js/build/parseIncompletePhoneNumber.js
var require_parseIncompletePhoneNumber = __commonJS({
  "node_modules/libphonenumber-js/build/parseIncompletePhoneNumber.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = parseIncompletePhoneNumber;
    exports.parsePhoneNumberCharacter = parsePhoneNumberCharacter;
    var _parseDigits = require_parseDigits();
    function parseIncompletePhoneNumber(string) {
      var result = "";
      for (var _iterator = string.split(""), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator](); ; ) {
        var _ref;
        if (_isArray) {
          if (_i >= _iterator.length)
            break;
          _ref = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done)
            break;
          _ref = _i.value;
        }
        var character = _ref;
        result += parsePhoneNumberCharacter(character, result) || "";
      }
      return result;
    }
    function parsePhoneNumberCharacter(character, prevParsedCharacters) {
      if (character === "+") {
        if (prevParsedCharacters) {
          return;
        }
        return "+";
      }
      return (0, _parseDigits.parseDigit)(character);
    }
  }
});

// node_modules/libphonenumber-js/build/getCountryCallingCode.js
var require_getCountryCallingCode = __commonJS({
  "node_modules/libphonenumber-js/build/getCountryCallingCode.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "default", {
      enumerable: true,
      get: function get2() {
        return _metadata.getCountryCallingCode;
      }
    });
    var _metadata = require_metadata();
  }
});

// node_modules/libphonenumber-js/build/helpers/mergeArrays.js
var require_mergeArrays = __commonJS({
  "node_modules/libphonenumber-js/build/helpers/mergeArrays.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = mergeArrays;
    function mergeArrays(a, b) {
      var merged = a.slice();
      for (var _iterator = b, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator](); ; ) {
        var _ref;
        if (_isArray) {
          if (_i >= _iterator.length)
            break;
          _ref = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done)
            break;
          _ref = _i.value;
        }
        var element = _ref;
        if (a.indexOf(element) < 0) {
          merged.push(element);
        }
      }
      return merged.sort(function(a2, b2) {
        return a2 - b2;
      });
    }
  }
});

// node_modules/libphonenumber-js/build/helpers/checkNumberLength.js
var require_checkNumberLength = __commonJS({
  "node_modules/libphonenumber-js/build/helpers/checkNumberLength.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = checkNumberLength;
    exports.checkNumberLengthForType = checkNumberLengthForType;
    var _mergeArrays = _interopRequireDefault(require_mergeArrays());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function checkNumberLength(nationalNumber, metadata) {
      return checkNumberLengthForType(nationalNumber, void 0, metadata);
    }
    function checkNumberLengthForType(nationalNumber, type, metadata) {
      var type_info = metadata.type(type);
      var possible_lengths = type_info && type_info.possibleLengths() || metadata.possibleLengths();
      if (!possible_lengths) {
        return "IS_POSSIBLE";
      }
      if (type === "FIXED_LINE_OR_MOBILE") {
        if (!metadata.type("FIXED_LINE")) {
          return checkNumberLengthForType(nationalNumber, "MOBILE", metadata);
        }
        var mobile_type = metadata.type("MOBILE");
        if (mobile_type) {
          possible_lengths = (0, _mergeArrays["default"])(possible_lengths, mobile_type.possibleLengths());
        }
      } else if (type && !type_info) {
        return "INVALID_LENGTH";
      }
      var actual_length = nationalNumber.length;
      var minimum_length = possible_lengths[0];
      if (minimum_length === actual_length) {
        return "IS_POSSIBLE";
      }
      if (minimum_length > actual_length) {
        return "TOO_SHORT";
      }
      if (possible_lengths[possible_lengths.length - 1] < actual_length) {
        return "TOO_LONG";
      }
      return possible_lengths.indexOf(actual_length, 1) >= 0 ? "IS_POSSIBLE" : "INVALID_LENGTH";
    }
  }
});

// node_modules/libphonenumber-js/build/isPossibleNumber_.js
var require_isPossibleNumber = __commonJS({
  "node_modules/libphonenumber-js/build/isPossibleNumber_.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = isPossiblePhoneNumber;
    exports.isPossibleNumber = isPossibleNumber;
    var _metadata = _interopRequireDefault(require_metadata());
    var _checkNumberLength = _interopRequireDefault(require_checkNumberLength());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function isPossiblePhoneNumber(input, options, metadata) {
      if (options === void 0) {
        options = {};
      }
      metadata = new _metadata["default"](metadata);
      if (options.v2) {
        if (!input.countryCallingCode) {
          throw new Error("Invalid phone number object passed");
        }
        metadata.selectNumberingPlan(input.countryCallingCode);
      } else {
        if (!input.phone) {
          return false;
        }
        if (input.country) {
          if (!metadata.hasCountry(input.country)) {
            throw new Error("Unknown country: ".concat(input.country));
          }
          metadata.country(input.country);
        } else {
          if (!input.countryCallingCode) {
            throw new Error("Invalid phone number object passed");
          }
          metadata.selectNumberingPlan(input.countryCallingCode);
        }
      }
      if (metadata.possibleLengths()) {
        return isPossibleNumber(input.phone || input.nationalNumber, metadata);
      } else {
        if (input.countryCallingCode && metadata.isNonGeographicCallingCode(input.countryCallingCode)) {
          return true;
        } else {
          throw new Error('Missing "possibleLengths" in metadata. Perhaps the metadata has been generated before v1.0.18.');
        }
      }
    }
    function isPossibleNumber(nationalNumber, metadata) {
      switch ((0, _checkNumberLength["default"])(nationalNumber, metadata)) {
        case "IS_POSSIBLE":
          return true;
        default:
          return false;
      }
    }
  }
});

// node_modules/libphonenumber-js/build/helpers/RFC3966.js
var require_RFC3966 = __commonJS({
  "node_modules/libphonenumber-js/build/helpers/RFC3966.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.parseRFC3966 = parseRFC3966;
    exports.formatRFC3966 = formatRFC3966;
    var _isViablePhoneNumber = _interopRequireDefault(require_isViablePhoneNumber());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _slicedToArray(arr, i) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
    }
    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }
    function _iterableToArrayLimit(arr, i) {
      var _arr = [];
      var _n = true;
      var _d = false;
      var _e = void 0;
      try {
        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);
          if (i && _arr.length === i)
            break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null)
            _i["return"]();
        } finally {
          if (_d)
            throw _e;
        }
      }
      return _arr;
    }
    function _arrayWithHoles(arr) {
      if (Array.isArray(arr))
        return arr;
    }
    function parseRFC3966(text) {
      var number;
      var ext;
      text = text.replace(/^tel:/, "tel=");
      for (var _iterator = text.split(";"), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator](); ; ) {
        var _ref;
        if (_isArray) {
          if (_i >= _iterator.length)
            break;
          _ref = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done)
            break;
          _ref = _i.value;
        }
        var part = _ref;
        var _part$split = part.split("="), _part$split2 = _slicedToArray(_part$split, 2), name2 = _part$split2[0], value = _part$split2[1];
        switch (name2) {
          case "tel":
            number = value;
            break;
          case "ext":
            ext = value;
            break;
          case "phone-context":
            if (value[0] === "+") {
              number = value + number;
            }
            break;
        }
      }
      if (!(0, _isViablePhoneNumber["default"])(number)) {
        return {};
      }
      var result = {
        number
      };
      if (ext) {
        result.ext = ext;
      }
      return result;
    }
    function formatRFC3966(_ref2) {
      var number = _ref2.number, ext = _ref2.ext;
      if (!number) {
        return "";
      }
      if (number[0] !== "+") {
        throw new Error('"formatRFC3966()" expects "number" to be in E.164 format.');
      }
      return "tel:".concat(number).concat(ext ? ";ext=" + ext : "");
    }
  }
});

// node_modules/libphonenumber-js/build/helpers/matchesEntirely.js
var require_matchesEntirely = __commonJS({
  "node_modules/libphonenumber-js/build/helpers/matchesEntirely.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = matchesEntirely;
    function matchesEntirely(text, regular_expression) {
      text = text || "";
      return new RegExp("^(?:" + regular_expression + ")$").test(text);
    }
  }
});

// node_modules/libphonenumber-js/build/helpers/getNumberType.js
var require_getNumberType = __commonJS({
  "node_modules/libphonenumber-js/build/helpers/getNumberType.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = getNumberType;
    exports.isNumberTypeEqualTo = isNumberTypeEqualTo;
    var _metadata = _interopRequireDefault(require_metadata());
    var _matchesEntirely = _interopRequireDefault(require_matchesEntirely());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    var NON_FIXED_LINE_PHONE_TYPES = ["MOBILE", "PREMIUM_RATE", "TOLL_FREE", "SHARED_COST", "VOIP", "PERSONAL_NUMBER", "PAGER", "UAN", "VOICEMAIL"];
    function getNumberType(input, options, metadata) {
      options = options || {};
      if (!input.country) {
        return;
      }
      metadata = new _metadata["default"](metadata);
      metadata.selectNumberingPlan(input.country, input.countryCallingCode);
      var nationalNumber = options.v2 ? input.nationalNumber : input.phone;
      if (!(0, _matchesEntirely["default"])(nationalNumber, metadata.nationalNumberPattern())) {
        return;
      }
      if (isNumberTypeEqualTo(nationalNumber, "FIXED_LINE", metadata)) {
        if (metadata.type("MOBILE") && metadata.type("MOBILE").pattern() === "") {
          return "FIXED_LINE_OR_MOBILE";
        }
        if (!metadata.type("MOBILE")) {
          return "FIXED_LINE_OR_MOBILE";
        }
        if (isNumberTypeEqualTo(nationalNumber, "MOBILE", metadata)) {
          return "FIXED_LINE_OR_MOBILE";
        }
        return "FIXED_LINE";
      }
      for (var _i = 0, _NON_FIXED_LINE_PHONE = NON_FIXED_LINE_PHONE_TYPES; _i < _NON_FIXED_LINE_PHONE.length; _i++) {
        var type = _NON_FIXED_LINE_PHONE[_i];
        if (isNumberTypeEqualTo(nationalNumber, type, metadata)) {
          return type;
        }
      }
    }
    function isNumberTypeEqualTo(nationalNumber, type, metadata) {
      type = metadata.type(type);
      if (!type || !type.pattern()) {
        return false;
      }
      if (type.possibleLengths() && type.possibleLengths().indexOf(nationalNumber.length) < 0) {
        return false;
      }
      return (0, _matchesEntirely["default"])(nationalNumber, type.pattern());
    }
  }
});

// node_modules/libphonenumber-js/build/validate_.js
var require_validate = __commonJS({
  "node_modules/libphonenumber-js/build/validate_.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = isValidNumber;
    var _metadata = _interopRequireDefault(require_metadata());
    var _matchesEntirely = _interopRequireDefault(require_matchesEntirely());
    var _getNumberType = _interopRequireDefault(require_getNumberType());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function isValidNumber(input, options, metadata) {
      options = options || {};
      metadata = new _metadata["default"](metadata);
      if (!input.country) {
        return false;
      }
      metadata.selectNumberingPlan(input.country, input.countryCallingCode);
      if (metadata.hasTypes()) {
        return (0, _getNumberType["default"])(input, options, metadata.metadata) !== void 0;
      }
      var national_number = options.v2 ? input.nationalNumber : input.phone;
      return (0, _matchesEntirely["default"])(national_number, metadata.nationalNumberPattern());
    }
  }
});

// node_modules/libphonenumber-js/build/isValidNumberForRegion_.js
var require_isValidNumberForRegion = __commonJS({
  "node_modules/libphonenumber-js/build/isValidNumberForRegion_.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = isValidNumberForRegion;
    var _validate_ = _interopRequireDefault(require_validate());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function isValidNumberForRegion(input, country, options, metadata) {
      options = options || {};
      return input.country === country && (0, _validate_["default"])(input, options, metadata);
    }
  }
});

// node_modules/libphonenumber-js/build/helpers/applyInternationalSeparatorStyle.js
var require_applyInternationalSeparatorStyle = __commonJS({
  "node_modules/libphonenumber-js/build/helpers/applyInternationalSeparatorStyle.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = applyInternationalSeparatorStyle;
    var _constants = require_constants();
    function applyInternationalSeparatorStyle(formattedNumber) {
      return formattedNumber.replace(new RegExp("[".concat(_constants.VALID_PUNCTUATION, "]+"), "g"), " ").trim();
    }
  }
});

// node_modules/libphonenumber-js/build/helpers/formatNationalNumberUsingFormat.js
var require_formatNationalNumberUsingFormat = __commonJS({
  "node_modules/libphonenumber-js/build/helpers/formatNationalNumberUsingFormat.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = formatNationalNumberUsingFormat;
    exports.FIRST_GROUP_PATTERN = void 0;
    var _applyInternationalSeparatorStyle = _interopRequireDefault(require_applyInternationalSeparatorStyle());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    var FIRST_GROUP_PATTERN = /(\$\d)/;
    exports.FIRST_GROUP_PATTERN = FIRST_GROUP_PATTERN;
    function formatNationalNumberUsingFormat(number, format, _ref) {
      var useInternationalFormat = _ref.useInternationalFormat, withNationalPrefix = _ref.withNationalPrefix, carrierCode = _ref.carrierCode, metadata = _ref.metadata;
      var formattedNumber = number.replace(new RegExp(format.pattern()), useInternationalFormat ? format.internationalFormat() : withNationalPrefix && format.nationalPrefixFormattingRule() ? format.format().replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule()) : format.format());
      if (useInternationalFormat) {
        return (0, _applyInternationalSeparatorStyle["default"])(formattedNumber);
      }
      return formattedNumber;
    }
  }
});

// node_modules/libphonenumber-js/build/helpers/getIddPrefix.js
var require_getIddPrefix = __commonJS({
  "node_modules/libphonenumber-js/build/helpers/getIddPrefix.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = getIddPrefix;
    var _metadata = _interopRequireDefault(require_metadata());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    var SINGLE_IDD_PREFIX_REG_EXP = /^[\d]+(?:[~\u2053\u223C\uFF5E][\d]+)?$/;
    function getIddPrefix(country, callingCode, metadata) {
      var countryMetadata = new _metadata["default"](metadata);
      countryMetadata.selectNumberingPlan(country, callingCode);
      if (countryMetadata.defaultIDDPrefix()) {
        return countryMetadata.defaultIDDPrefix();
      }
      if (SINGLE_IDD_PREFIX_REG_EXP.test(countryMetadata.IDDPrefix())) {
        return countryMetadata.IDDPrefix();
      }
    }
  }
});

// node_modules/libphonenumber-js/build/format_.js
var require_format = __commonJS({
  "node_modules/libphonenumber-js/build/format_.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = formatNumber2;
    var _matchesEntirely = _interopRequireDefault(require_matchesEntirely());
    var _formatNationalNumberUsingFormat = _interopRequireDefault(require_formatNationalNumberUsingFormat());
    var _metadata = _interopRequireWildcard(require_metadata());
    var _getIddPrefix = _interopRequireDefault(require_getIddPrefix());
    var _RFC = require_RFC3966();
    function _interopRequireWildcard(obj) {
      if (obj && obj.__esModule) {
        return obj;
      } else {
        var newObj = {};
        if (obj != null) {
          for (var key in obj) {
            if (Object.prototype.hasOwnProperty.call(obj, key)) {
              var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};
              if (desc.get || desc.set) {
                Object.defineProperty(newObj, key, desc);
              } else {
                newObj[key] = obj[key];
              }
            }
          }
        }
        newObj["default"] = obj;
        return newObj;
      }
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
          ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
            return Object.getOwnPropertyDescriptor(source, sym).enumerable;
          }));
        }
        ownKeys.forEach(function(key) {
          _defineProperty(target, key, source[key]);
        });
      }
      return target;
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var DEFAULT_OPTIONS = {
      formatExtension: function formatExtension(formattedNumber, extension, metadata) {
        return "".concat(formattedNumber).concat(metadata.ext()).concat(extension);
      }
    };
    function formatNumber2(input, format, options, metadata) {
      if (options) {
        options = _objectSpread({}, DEFAULT_OPTIONS, options);
      } else {
        options = DEFAULT_OPTIONS;
      }
      metadata = new _metadata["default"](metadata);
      if (input.country && input.country !== "001") {
        if (!metadata.hasCountry(input.country)) {
          throw new Error("Unknown country: ".concat(input.country));
        }
        metadata.country(input.country);
      } else if (input.countryCallingCode) {
        metadata.selectNumberingPlan(input.countryCallingCode);
      } else
        return input.phone || "";
      var countryCallingCode = metadata.countryCallingCode();
      var nationalNumber = options.v2 ? input.nationalNumber : input.phone;
      var number;
      switch (format) {
        case "NATIONAL":
          if (!nationalNumber) {
            return "";
          }
          number = formatNationalNumber(nationalNumber, input.carrierCode, "NATIONAL", metadata, options);
          return addExtension(number, input.ext, metadata, options.formatExtension);
        case "INTERNATIONAL":
          if (!nationalNumber) {
            return "+".concat(countryCallingCode);
          }
          number = formatNationalNumber(nationalNumber, null, "INTERNATIONAL", metadata, options);
          number = "+".concat(countryCallingCode, " ").concat(number);
          return addExtension(number, input.ext, metadata, options.formatExtension);
        case "E.164":
          return "+".concat(countryCallingCode).concat(nationalNumber);
        case "RFC3966":
          return (0, _RFC.formatRFC3966)({
            number: "+".concat(countryCallingCode).concat(nationalNumber),
            ext: input.ext
          });
        case "IDD":
          if (!options.fromCountry) {
            return;
          }
          var formattedNumber = formatIDD(nationalNumber, input.carrierCode, countryCallingCode, options.fromCountry, metadata);
          return addExtension(formattedNumber, input.ext, metadata, options.formatExtension);
        default:
          throw new Error('Unknown "format" argument passed to "formatNumber()": "'.concat(format, '"'));
      }
    }
    function formatNationalNumber(number, carrierCode, formatAs, metadata, options) {
      var format = chooseFormatForNumber(metadata.formats(), number);
      if (!format) {
        return number;
      }
      return (0, _formatNationalNumberUsingFormat["default"])(number, format, {
        useInternationalFormat: formatAs === "INTERNATIONAL",
        withNationalPrefix: format.nationalPrefixIsOptionalWhenFormattingInNationalFormat() && options && options.nationalPrefix === false ? false : true,
        carrierCode,
        metadata
      });
    }
    function chooseFormatForNumber(availableFormats, nationalNnumber) {
      for (var _iterator = availableFormats, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator](); ; ) {
        var _ref;
        if (_isArray) {
          if (_i >= _iterator.length)
            break;
          _ref = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done)
            break;
          _ref = _i.value;
        }
        var format = _ref;
        if (format.leadingDigitsPatterns().length > 0) {
          var lastLeadingDigitsPattern = format.leadingDigitsPatterns()[format.leadingDigitsPatterns().length - 1];
          if (nationalNnumber.search(lastLeadingDigitsPattern) !== 0) {
            continue;
          }
        }
        if ((0, _matchesEntirely["default"])(nationalNnumber, format.pattern())) {
          return format;
        }
      }
    }
    function addExtension(formattedNumber, ext, metadata, formatExtension) {
      return ext ? formatExtension(formattedNumber, ext, metadata) : formattedNumber;
    }
    function formatIDD(nationalNumber, carrierCode, countryCallingCode, fromCountry, metadata) {
      var fromCountryCallingCode = (0, _metadata.getCountryCallingCode)(fromCountry, metadata.metadata);
      if (fromCountryCallingCode === countryCallingCode) {
        var formattedNumber = formatNationalNumber(nationalNumber, carrierCode, "NATIONAL", metadata);
        if (countryCallingCode === "1") {
          return countryCallingCode + " " + formattedNumber;
        }
        return formattedNumber;
      }
      var iddPrefix = (0, _getIddPrefix["default"])(fromCountry, void 0, metadata.metadata);
      if (iddPrefix) {
        return "".concat(iddPrefix, " ").concat(countryCallingCode, " ").concat(formatNationalNumber(nationalNumber, null, "INTERNATIONAL", metadata));
      }
    }
  }
});

// node_modules/libphonenumber-js/build/PhoneNumber.js
var require_PhoneNumber = __commonJS({
  "node_modules/libphonenumber-js/build/PhoneNumber.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _metadata2 = _interopRequireDefault(require_metadata());
    var _isPossibleNumber_ = _interopRequireDefault(require_isPossibleNumber());
    var _validate_ = _interopRequireDefault(require_validate());
    var _isValidNumberForRegion_ = _interopRequireDefault(require_isValidNumberForRegion());
    var _getNumberType = _interopRequireDefault(require_getNumberType());
    var _format_ = _interopRequireDefault(require_format());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
          ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
            return Object.getOwnPropertyDescriptor(source, sym).enumerable;
          }));
        }
        ownKeys.forEach(function(key) {
          _defineProperty(target, key, source[key]);
        });
      }
      return target;
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var USE_NON_GEOGRAPHIC_COUNTRY_CODE = false;
    var PhoneNumber = /* @__PURE__ */ function() {
      function PhoneNumber2(countryCallingCode, nationalNumber, metadata) {
        _classCallCheck(this, PhoneNumber2);
        if (!countryCallingCode) {
          throw new TypeError("`country` or `countryCallingCode` not passed");
        }
        if (!nationalNumber) {
          throw new TypeError("`nationalNumber` not passed");
        }
        if (!metadata) {
          throw new TypeError("`metadata` not passed");
        }
        var _metadata = new _metadata2["default"](metadata);
        if (isCountryCode(countryCallingCode)) {
          this.country = countryCallingCode;
          _metadata.country(countryCallingCode);
          countryCallingCode = _metadata.countryCallingCode();
        } else {
          if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {
            if (_metadata.isNonGeographicCallingCode(countryCallingCode)) {
              this.country = "001";
            }
          }
        }
        this.countryCallingCode = countryCallingCode;
        this.nationalNumber = nationalNumber;
        this.number = "+" + this.countryCallingCode + this.nationalNumber;
        this.metadata = metadata;
      }
      _createClass(PhoneNumber2, [{
        key: "setExt",
        value: function setExt(ext) {
          this.ext = ext;
        }
      }, {
        key: "isPossible",
        value: function isPossible() {
          return (0, _isPossibleNumber_["default"])(this, {
            v2: true
          }, this.metadata);
        }
      }, {
        key: "isValid",
        value: function isValid() {
          return (0, _validate_["default"])(this, {
            v2: true
          }, this.metadata);
        }
      }, {
        key: "isNonGeographic",
        value: function isNonGeographic() {
          var metadata = new _metadata2["default"](this.metadata);
          return metadata.isNonGeographicCallingCode(this.countryCallingCode);
        }
      }, {
        key: "isEqual",
        value: function isEqual(phoneNumber) {
          return this.number === phoneNumber.number && this.ext === phoneNumber.ext;
        }
      }, {
        key: "getType",
        value: function getType() {
          return (0, _getNumberType["default"])(this, {
            v2: true
          }, this.metadata);
        }
      }, {
        key: "format",
        value: function format(_format, options) {
          return (0, _format_["default"])(this, _format, options ? _objectSpread({}, options, {
            v2: true
          }) : {
            v2: true
          }, this.metadata);
        }
      }, {
        key: "formatNational",
        value: function formatNational(options) {
          return this.format("NATIONAL", options);
        }
      }, {
        key: "formatInternational",
        value: function formatInternational(options) {
          return this.format("INTERNATIONAL", options);
        }
      }, {
        key: "getURI",
        value: function getURI(options) {
          return this.format("RFC3966", options);
        }
      }]);
      return PhoneNumber2;
    }();
    exports["default"] = PhoneNumber;
    var isCountryCode = function isCountryCode2(value) {
      return /^[A-Z]{2}$/.test(value);
    };
  }
});

// node_modules/libphonenumber-js/build/helpers/stripIddPrefix.js
var require_stripIddPrefix = __commonJS({
  "node_modules/libphonenumber-js/build/helpers/stripIddPrefix.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = stripIddPrefix;
    var _metadata = _interopRequireDefault(require_metadata());
    var _constants = require_constants();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    var CAPTURING_DIGIT_PATTERN = new RegExp("([" + _constants.VALID_DIGITS + "])");
    function stripIddPrefix(number, country, callingCode, metadata) {
      if (!country) {
        return;
      }
      var countryMetadata = new _metadata["default"](metadata);
      countryMetadata.selectNumberingPlan(country, callingCode);
      var IDDPrefixPattern = new RegExp(countryMetadata.IDDPrefix());
      if (number.search(IDDPrefixPattern) !== 0) {
        return;
      }
      number = number.slice(number.match(IDDPrefixPattern)[0].length);
      var matchedGroups = number.match(CAPTURING_DIGIT_PATTERN);
      if (matchedGroups && matchedGroups[1] != null && matchedGroups[1].length > 0) {
        if (matchedGroups[1] === "0") {
          return;
        }
      }
      return number;
    }
  }
});

// node_modules/libphonenumber-js/build/helpers/extractNationalNumberFromPossiblyIncompleteNumber.js
var require_extractNationalNumberFromPossiblyIncompleteNumber = __commonJS({
  "node_modules/libphonenumber-js/build/helpers/extractNationalNumberFromPossiblyIncompleteNumber.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = extractNationalNumberFromPossiblyIncompleteNumber;
    function extractNationalNumberFromPossiblyIncompleteNumber(number, metadata) {
      if (number && metadata.numberingPlan.nationalPrefixForParsing()) {
        var prefixPattern = new RegExp("^(?:" + metadata.numberingPlan.nationalPrefixForParsing() + ")");
        var prefixMatch = prefixPattern.exec(number);
        if (prefixMatch) {
          var nationalNumber;
          var carrierCode;
          var capturedGroupsCount = prefixMatch.length - 1;
          var hasCapturedGroups = capturedGroupsCount > 0 && prefixMatch[capturedGroupsCount];
          if (metadata.nationalPrefixTransformRule() && hasCapturedGroups) {
            nationalNumber = number.replace(prefixPattern, metadata.nationalPrefixTransformRule());
            if (capturedGroupsCount > 1) {
              carrierCode = prefixMatch[1];
            }
          } else {
            var prefixBeforeNationalNumber = prefixMatch[0];
            nationalNumber = number.slice(prefixBeforeNationalNumber.length);
            if (hasCapturedGroups) {
              carrierCode = prefixMatch[1];
            }
          }
          var nationalPrefix;
          if (hasCapturedGroups) {
            var possiblePositionOfTheFirstCapturedGroup = number.indexOf(prefixMatch[1]);
            var possibleNationalPrefix = number.slice(0, possiblePositionOfTheFirstCapturedGroup);
            if (possibleNationalPrefix === metadata.numberingPlan.nationalPrefix()) {
              nationalPrefix = metadata.numberingPlan.nationalPrefix();
            }
          } else {
            nationalPrefix = prefixMatch[0];
          }
          return {
            nationalNumber,
            nationalPrefix,
            carrierCode
          };
        }
      }
      return {
        nationalNumber: number
      };
    }
  }
});

// node_modules/libphonenumber-js/build/helpers/extractNationalNumber.js
var require_extractNationalNumber = __commonJS({
  "node_modules/libphonenumber-js/build/helpers/extractNationalNumber.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = extractNationalNumber;
    var _extractNationalNumberFromPossiblyIncompleteNumber = _interopRequireDefault(require_extractNationalNumberFromPossiblyIncompleteNumber());
    var _matchesEntirely = _interopRequireDefault(require_matchesEntirely());
    var _checkNumberLength = _interopRequireDefault(require_checkNumberLength());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function extractNationalNumber(number, metadata) {
      var _extractNationalNumbe = (0, _extractNationalNumberFromPossiblyIncompleteNumber["default"])(number, metadata), nationalNumber = _extractNationalNumbe.nationalNumber, carrierCode = _extractNationalNumbe.carrierCode;
      if (!shouldExtractNationalPrefix(number, nationalNumber, metadata)) {
        return {
          nationalNumber: number
        };
      }
      if (number.length !== nationalNumber.length + (carrierCode ? carrierCode.length : 0)) {
        if (metadata.possibleLengths()) {
          switch ((0, _checkNumberLength["default"])(nationalNumber, metadata)) {
            case "TOO_SHORT":
            case "INVALID_LENGTH":
              return {
                nationalNumber: number
              };
          }
        }
      }
      return {
        nationalNumber,
        carrierCode
      };
    }
    function shouldExtractNationalPrefix(number, nationalSignificantNumber, metadata) {
      if ((0, _matchesEntirely["default"])(number, metadata.nationalNumberPattern()) && !(0, _matchesEntirely["default"])(nationalSignificantNumber, metadata.nationalNumberPattern())) {
        return false;
      }
      return true;
    }
  }
});

// node_modules/libphonenumber-js/build/helpers/extractCountryCallingCodeFromInternationalNumberWithoutPlusSign.js
var require_extractCountryCallingCodeFromInternationalNumberWithoutPlusSign = __commonJS({
  "node_modules/libphonenumber-js/build/helpers/extractCountryCallingCodeFromInternationalNumberWithoutPlusSign.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = extractCountryCallingCodeFromInternationalNumberWithoutPlusSign;
    var _metadata = _interopRequireDefault(require_metadata());
    var _matchesEntirely = _interopRequireDefault(require_matchesEntirely());
    var _extractNationalNumber = _interopRequireDefault(require_extractNationalNumber());
    var _checkNumberLength = _interopRequireDefault(require_checkNumberLength());
    var _getCountryCallingCode = _interopRequireDefault(require_getCountryCallingCode());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function extractCountryCallingCodeFromInternationalNumberWithoutPlusSign(number, country, callingCode, metadata) {
      var countryCallingCode = country ? (0, _getCountryCallingCode["default"])(country, metadata) : callingCode;
      if (number.indexOf(countryCallingCode) === 0) {
        metadata = new _metadata["default"](metadata);
        metadata.selectNumberingPlan(country, callingCode);
        var possibleShorterNumber = number.slice(countryCallingCode.length);
        var _extractNationalNumbe = (0, _extractNationalNumber["default"])(possibleShorterNumber, metadata), possibleShorterNationalNumber = _extractNationalNumbe.nationalNumber;
        var _extractNationalNumbe2 = (0, _extractNationalNumber["default"])(number, metadata), nationalNumber = _extractNationalNumbe2.nationalNumber;
        if (!(0, _matchesEntirely["default"])(nationalNumber, metadata.nationalNumberPattern()) && (0, _matchesEntirely["default"])(possibleShorterNationalNumber, metadata.nationalNumberPattern()) || (0, _checkNumberLength["default"])(nationalNumber, metadata) === "TOO_LONG") {
          return {
            countryCallingCode,
            number: possibleShorterNumber
          };
        }
      }
      return {
        number
      };
    }
  }
});

// node_modules/libphonenumber-js/build/helpers/extractCountryCallingCode.js
var require_extractCountryCallingCode = __commonJS({
  "node_modules/libphonenumber-js/build/helpers/extractCountryCallingCode.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = extractCountryCallingCode;
    var _stripIddPrefix = _interopRequireDefault(require_stripIddPrefix());
    var _extractCountryCallingCodeFromInternationalNumberWithoutPlusSign = _interopRequireDefault(require_extractCountryCallingCodeFromInternationalNumberWithoutPlusSign());
    var _metadata = _interopRequireDefault(require_metadata());
    var _constants = require_constants();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function extractCountryCallingCode(number, country, callingCode, metadata) {
      if (!number) {
        return {};
      }
      if (number[0] !== "+") {
        var numberWithoutIDD = (0, _stripIddPrefix["default"])(number, country, callingCode, metadata);
        if (numberWithoutIDD && numberWithoutIDD !== number) {
          number = "+" + numberWithoutIDD;
        } else {
          if (country || callingCode) {
            var _extractCountryCallin = (0, _extractCountryCallingCodeFromInternationalNumberWithoutPlusSign["default"])(number, country, callingCode, metadata), countryCallingCode = _extractCountryCallin.countryCallingCode, shorterNumber = _extractCountryCallin.number;
            if (countryCallingCode) {
              return {
                countryCallingCode,
                number: shorterNumber
              };
            }
          }
          return {
            number
          };
        }
      }
      if (number[1] === "0") {
        return {};
      }
      metadata = new _metadata["default"](metadata);
      var i = 2;
      while (i - 1 <= _constants.MAX_LENGTH_COUNTRY_CODE && i <= number.length) {
        var _countryCallingCode = number.slice(1, i);
        if (metadata.hasCallingCode(_countryCallingCode)) {
          metadata.selectNumberingPlan(_countryCallingCode);
          return {
            countryCallingCode: _countryCallingCode,
            number: number.slice(i)
          };
        }
        i++;
      }
      return {};
    }
  }
});

// node_modules/libphonenumber-js/build/helpers/getCountryByCallingCode.js
var require_getCountryByCallingCode = __commonJS({
  "node_modules/libphonenumber-js/build/helpers/getCountryByCallingCode.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = getCountryByCallingCode;
    var _metadata = _interopRequireDefault(require_metadata());
    var _getNumberType = _interopRequireDefault(require_getNumberType());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    var USE_NON_GEOGRAPHIC_COUNTRY_CODE = false;
    function getCountryByCallingCode(callingCode, nationalPhoneNumber, metadata) {
      if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {
        if (metadata.isNonGeographicCallingCode(callingCode)) {
          return "001";
        }
      }
      var possibleCountries = metadata.getCountryCodesForCallingCode(callingCode);
      if (!possibleCountries) {
        return;
      }
      if (possibleCountries.length === 1) {
        return possibleCountries[0];
      }
      return selectCountryFromList(possibleCountries, nationalPhoneNumber, metadata.metadata);
    }
    function selectCountryFromList(possibleCountries, nationalPhoneNumber, metadata) {
      metadata = new _metadata["default"](metadata);
      for (var _iterator = possibleCountries, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator](); ; ) {
        var _ref;
        if (_isArray) {
          if (_i >= _iterator.length)
            break;
          _ref = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done)
            break;
          _ref = _i.value;
        }
        var country = _ref;
        metadata.country(country);
        if (metadata.leadingDigits()) {
          if (nationalPhoneNumber && nationalPhoneNumber.search(metadata.leadingDigits()) === 0) {
            return country;
          }
        } else if ((0, _getNumberType["default"])({
          phone: nationalPhoneNumber,
          country
        }, void 0, metadata.metadata)) {
          return country;
        }
      }
    }
  }
});

// node_modules/libphonenumber-js/build/parse_.js
var require_parse = __commonJS({
  "node_modules/libphonenumber-js/build/parse_.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = parse;
    var _constants = require_constants();
    var _ParseError = _interopRequireDefault(require_ParseError());
    var _metadata = _interopRequireDefault(require_metadata());
    var _isViablePhoneNumber = _interopRequireWildcard(require_isViablePhoneNumber());
    var _extractExtension = _interopRequireDefault(require_extractExtension());
    var _parseIncompletePhoneNumber = _interopRequireDefault(require_parseIncompletePhoneNumber());
    var _getCountryCallingCode = _interopRequireDefault(require_getCountryCallingCode());
    var _isPossibleNumber_ = require_isPossibleNumber();
    var _RFC = require_RFC3966();
    var _PhoneNumber = _interopRequireDefault(require_PhoneNumber());
    var _matchesEntirely = _interopRequireDefault(require_matchesEntirely());
    var _extractCountryCallingCode = _interopRequireDefault(require_extractCountryCallingCode());
    var _extractCountryCallingCodeFromInternationalNumberWithoutPlusSign = _interopRequireDefault(require_extractCountryCallingCodeFromInternationalNumberWithoutPlusSign());
    var _extractNationalNumber = _interopRequireDefault(require_extractNationalNumber());
    var _stripIddPrefix = _interopRequireDefault(require_stripIddPrefix());
    var _getCountryByCallingCode = _interopRequireDefault(require_getCountryByCallingCode());
    function _interopRequireWildcard(obj) {
      if (obj && obj.__esModule) {
        return obj;
      } else {
        var newObj = {};
        if (obj != null) {
          for (var key in obj) {
            if (Object.prototype.hasOwnProperty.call(obj, key)) {
              var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};
              if (desc.get || desc.set) {
                Object.defineProperty(newObj, key, desc);
              } else {
                newObj[key] = obj[key];
              }
            }
          }
        }
        newObj["default"] = obj;
        return newObj;
      }
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    var MAX_INPUT_STRING_LENGTH = 250;
    var PHONE_NUMBER_START_PATTERN = new RegExp("[" + _constants.PLUS_CHARS + _constants.VALID_DIGITS + "]");
    var AFTER_PHONE_NUMBER_END_PATTERN = new RegExp("[^" + _constants.VALID_DIGITS + "#]+$");
    var USE_NON_GEOGRAPHIC_COUNTRY_CODE = false;
    function parse(text, options, metadata) {
      options = options || {};
      metadata = new _metadata["default"](metadata);
      if (options.defaultCountry && !metadata.hasCountry(options.defaultCountry)) {
        if (options.v2) {
          throw new _ParseError["default"]("INVALID_COUNTRY");
        }
        throw new Error("Unknown country: ".concat(options.defaultCountry));
      }
      var _parseInput = parseInput(text, options.v2, options.extract), formattedPhoneNumber = _parseInput.number, ext = _parseInput.ext, error = _parseInput.error;
      if (!formattedPhoneNumber) {
        if (options.v2) {
          if (error === "TOO_SHORT") {
            throw new _ParseError["default"]("TOO_SHORT");
          }
          throw new _ParseError["default"]("NOT_A_NUMBER");
        }
        return {};
      }
      var _parsePhoneNumber = parsePhoneNumber(formattedPhoneNumber, options.defaultCountry, options.defaultCallingCode, metadata), country = _parsePhoneNumber.country, nationalNumber = _parsePhoneNumber.nationalNumber, countryCallingCode = _parsePhoneNumber.countryCallingCode, carrierCode = _parsePhoneNumber.carrierCode;
      if (!metadata.hasSelectedNumberingPlan()) {
        if (options.v2) {
          throw new _ParseError["default"]("INVALID_COUNTRY");
        }
        return {};
      }
      if (!nationalNumber || nationalNumber.length < _constants.MIN_LENGTH_FOR_NSN) {
        if (options.v2) {
          throw new _ParseError["default"]("TOO_SHORT");
        }
        return {};
      }
      if (nationalNumber.length > _constants.MAX_LENGTH_FOR_NSN) {
        if (options.v2) {
          throw new _ParseError["default"]("TOO_LONG");
        }
        return {};
      }
      if (options.v2) {
        var phoneNumber = new _PhoneNumber["default"](countryCallingCode, nationalNumber, metadata.metadata);
        if (country) {
          phoneNumber.country = country;
        }
        if (carrierCode) {
          phoneNumber.carrierCode = carrierCode;
        }
        if (ext) {
          phoneNumber.ext = ext;
        }
        return phoneNumber;
      }
      var valid = (options.extended ? metadata.hasSelectedNumberingPlan() : country) ? (0, _matchesEntirely["default"])(nationalNumber, metadata.nationalNumberPattern()) : false;
      if (!options.extended) {
        return valid ? result(country, nationalNumber, ext) : {};
      }
      return {
        country,
        countryCallingCode,
        carrierCode,
        valid,
        possible: valid ? true : options.extended === true && metadata.possibleLengths() && (0, _isPossibleNumber_.isPossibleNumber)(nationalNumber, metadata) ? true : false,
        phone: nationalNumber,
        ext
      };
    }
    function extractFormattedPhoneNumber(text, extract, throwOnError) {
      if (!text) {
        return;
      }
      if (text.length > MAX_INPUT_STRING_LENGTH) {
        if (throwOnError) {
          throw new _ParseError["default"]("TOO_LONG");
        }
        return;
      }
      if (extract === false) {
        return text;
      }
      var startsAt = text.search(PHONE_NUMBER_START_PATTERN);
      if (startsAt < 0) {
        return;
      }
      return text.slice(startsAt).replace(AFTER_PHONE_NUMBER_END_PATTERN, "");
    }
    function parseInput(text, v2, extract) {
      if (text && text.indexOf("tel:") === 0) {
        return (0, _RFC.parseRFC3966)(text);
      }
      var number = extractFormattedPhoneNumber(text, extract, v2);
      if (!number) {
        return {};
      }
      if (!(0, _isViablePhoneNumber["default"])(number)) {
        if ((0, _isViablePhoneNumber.isViablePhoneNumberStart)(number)) {
          return {
            error: "TOO_SHORT"
          };
        }
        return {};
      }
      var withExtensionStripped = (0, _extractExtension["default"])(number);
      if (withExtensionStripped.ext) {
        return withExtensionStripped;
      }
      return {
        number
      };
    }
    function result(country, nationalNumber, ext) {
      var result2 = {
        country,
        phone: nationalNumber
      };
      if (ext) {
        result2.ext = ext;
      }
      return result2;
    }
    function parsePhoneNumber(formattedPhoneNumber, defaultCountry, defaultCallingCode, metadata) {
      var _extractCountryCallin = (0, _extractCountryCallingCode["default"])((0, _parseIncompletePhoneNumber["default"])(formattedPhoneNumber), defaultCountry, defaultCallingCode, metadata.metadata), countryCallingCode = _extractCountryCallin.countryCallingCode, number = _extractCountryCallin.number;
      var country;
      if (countryCallingCode) {
        metadata.selectNumberingPlan(countryCallingCode);
      } else if (number && (defaultCountry || defaultCallingCode)) {
        metadata.selectNumberingPlan(defaultCountry, defaultCallingCode);
        if (defaultCountry) {
          country = defaultCountry;
        } else {
          if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {
            if (metadata.isNonGeographicCallingCode(defaultCallingCode)) {
              country = "001";
            }
          }
        }
        countryCallingCode = defaultCallingCode || (0, _getCountryCallingCode["default"])(defaultCountry, metadata.metadata);
      } else
        return {};
      if (!number) {
        return {
          countryCallingCode
        };
      }
      var _extractNationalNumbe = (0, _extractNationalNumber["default"])((0, _parseIncompletePhoneNumber["default"])(number), metadata), nationalNumber = _extractNationalNumbe.nationalNumber, carrierCode = _extractNationalNumbe.carrierCode;
      var exactCountry = (0, _getCountryByCallingCode["default"])(countryCallingCode, nationalNumber, metadata);
      if (exactCountry) {
        country = exactCountry;
        if (exactCountry === "001") {
        } else {
          metadata.country(country);
        }
      }
      return {
        country,
        countryCallingCode,
        nationalNumber,
        carrierCode
      };
    }
  }
});

// node_modules/libphonenumber-js/build/parsePhoneNumber_.js
var require_parsePhoneNumber = __commonJS({
  "node_modules/libphonenumber-js/build/parsePhoneNumber_.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = parsePhoneNumber;
    var _parse_ = _interopRequireDefault(require_parse());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
          ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
            return Object.getOwnPropertyDescriptor(source, sym).enumerable;
          }));
        }
        ownKeys.forEach(function(key) {
          _defineProperty(target, key, source[key]);
        });
      }
      return target;
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function parsePhoneNumber(text, options, metadata) {
      return (0, _parse_["default"])(text, _objectSpread({}, options, {
        v2: true
      }), metadata);
    }
  }
});

// node_modules/libphonenumber-js/build/parsePhoneNumber.js
var require_parsePhoneNumber2 = __commonJS({
  "node_modules/libphonenumber-js/build/parsePhoneNumber.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = parsePhoneNumber;
    exports.normalizeArguments = normalizeArguments;
    var _parsePhoneNumber_ = _interopRequireDefault(require_parsePhoneNumber());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _typeof(obj) {
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
          ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
            return Object.getOwnPropertyDescriptor(source, sym).enumerable;
          }));
        }
        ownKeys.forEach(function(key) {
          _defineProperty(target, key, source[key]);
        });
      }
      return target;
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _slicedToArray(arr, i) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
    }
    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }
    function _iterableToArrayLimit(arr, i) {
      var _arr = [];
      var _n = true;
      var _d = false;
      var _e = void 0;
      try {
        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);
          if (i && _arr.length === i)
            break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null)
            _i["return"]();
        } finally {
          if (_d)
            throw _e;
        }
      }
      return _arr;
    }
    function _arrayWithHoles(arr) {
      if (Array.isArray(arr))
        return arr;
    }
    function parsePhoneNumber() {
      var _normalizeArguments = normalizeArguments(arguments), text = _normalizeArguments.text, options = _normalizeArguments.options, metadata = _normalizeArguments.metadata;
      return (0, _parsePhoneNumber_["default"])(text, options, metadata);
    }
    function normalizeArguments(args) {
      var _Array$prototype$slic = Array.prototype.slice.call(args), _Array$prototype$slic2 = _slicedToArray(_Array$prototype$slic, 4), arg_1 = _Array$prototype$slic2[0], arg_2 = _Array$prototype$slic2[1], arg_3 = _Array$prototype$slic2[2], arg_4 = _Array$prototype$slic2[3];
      var text;
      var options;
      var metadata;
      if (typeof arg_1 === "string") {
        text = arg_1;
      } else
        throw new TypeError("A text for parsing must be a string.");
      if (!arg_2 || typeof arg_2 === "string") {
        if (arg_4) {
          options = arg_3;
          metadata = arg_4;
        } else {
          options = void 0;
          metadata = arg_3;
        }
        if (arg_2) {
          options = _objectSpread({
            defaultCountry: arg_2
          }, options);
        }
      } else if (isObject(arg_2)) {
        if (arg_3) {
          options = arg_2;
          metadata = arg_3;
        } else {
          metadata = arg_2;
        }
      } else
        throw new Error("Invalid second argument: ".concat(arg_2));
      return {
        text,
        options,
        metadata
      };
    }
    var isObject = function isObject2(_) {
      return _typeof(_) === "object";
    };
  }
});

// node_modules/libphonenumber-js/build/parsePhoneNumberFromString_.js
var require_parsePhoneNumberFromString = __commonJS({
  "node_modules/libphonenumber-js/build/parsePhoneNumberFromString_.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = parsePhoneNumberFromString;
    var _parsePhoneNumber_ = _interopRequireDefault(require_parsePhoneNumber());
    var _ParseError = _interopRequireDefault(require_ParseError());
    var _metadata = require_metadata();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
          ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
            return Object.getOwnPropertyDescriptor(source, sym).enumerable;
          }));
        }
        ownKeys.forEach(function(key) {
          _defineProperty(target, key, source[key]);
        });
      }
      return target;
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function parsePhoneNumberFromString(text, options, metadata) {
      if (options && options.defaultCountry && !(0, _metadata.isSupportedCountry)(options.defaultCountry, metadata)) {
        options = _objectSpread({}, options, {
          defaultCountry: void 0
        });
      }
      try {
        return (0, _parsePhoneNumber_["default"])(text, options, metadata);
      } catch (error) {
        if (error instanceof _ParseError["default"]) {
        } else {
          throw error;
        }
      }
    }
  }
});

// node_modules/libphonenumber-js/build/parsePhoneNumberFromString.js
var require_parsePhoneNumberFromString2 = __commonJS({
  "node_modules/libphonenumber-js/build/parsePhoneNumberFromString.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = parsePhoneNumberFromString;
    var _parsePhoneNumber = require_parsePhoneNumber2();
    var _parsePhoneNumberFromString_ = _interopRequireDefault(require_parsePhoneNumberFromString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function parsePhoneNumberFromString() {
      var _normalizeArguments = (0, _parsePhoneNumber.normalizeArguments)(arguments), text = _normalizeArguments.text, options = _normalizeArguments.options, metadata = _normalizeArguments.metadata;
      return (0, _parsePhoneNumberFromString_["default"])(text, options, metadata);
    }
  }
});

// node_modules/libphonenumber-js/build/isValidPhoneNumber.js
var require_isValidPhoneNumber = __commonJS({
  "node_modules/libphonenumber-js/build/isValidPhoneNumber.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = isValidPhoneNumber;
    var _parsePhoneNumber = require_parsePhoneNumber2();
    var _parsePhoneNumberFromString_ = _interopRequireDefault(require_parsePhoneNumberFromString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
          ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
            return Object.getOwnPropertyDescriptor(source, sym).enumerable;
          }));
        }
        ownKeys.forEach(function(key) {
          _defineProperty(target, key, source[key]);
        });
      }
      return target;
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function isValidPhoneNumber() {
      var _normalizeArguments = (0, _parsePhoneNumber.normalizeArguments)(arguments), text = _normalizeArguments.text, options = _normalizeArguments.options, metadata = _normalizeArguments.metadata;
      options = _objectSpread({}, options, {
        extract: false
      });
      var phoneNumber = (0, _parsePhoneNumberFromString_["default"])(text, options, metadata);
      return phoneNumber && phoneNumber.isValid() || false;
    }
  }
});

// node_modules/libphonenumber-js/build/isPossiblePhoneNumber.js
var require_isPossiblePhoneNumber = __commonJS({
  "node_modules/libphonenumber-js/build/isPossiblePhoneNumber.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = isPossiblePhoneNumber;
    var _parsePhoneNumber = require_parsePhoneNumber2();
    var _parsePhoneNumberFromString_ = _interopRequireDefault(require_parsePhoneNumberFromString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
          ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
            return Object.getOwnPropertyDescriptor(source, sym).enumerable;
          }));
        }
        ownKeys.forEach(function(key) {
          _defineProperty(target, key, source[key]);
        });
      }
      return target;
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function isPossiblePhoneNumber() {
      var _normalizeArguments = (0, _parsePhoneNumber.normalizeArguments)(arguments), text = _normalizeArguments.text, options = _normalizeArguments.options, metadata = _normalizeArguments.metadata;
      options = _objectSpread({}, options, {
        extract: false
      });
      var phoneNumber = (0, _parsePhoneNumberFromString_["default"])(text, options, metadata);
      return phoneNumber && phoneNumber.isPossible() || false;
    }
  }
});

// node_modules/libphonenumber-js/build/validatePhoneNumberLength.js
var require_validatePhoneNumberLength = __commonJS({
  "node_modules/libphonenumber-js/build/validatePhoneNumberLength.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = validatePhoneNumberLength;
    var _parsePhoneNumber = require_parsePhoneNumber2();
    var _parsePhoneNumber_ = _interopRequireDefault(require_parsePhoneNumber());
    var _ParseError = _interopRequireDefault(require_ParseError());
    var _metadata = _interopRequireDefault(require_metadata());
    var _checkNumberLength = _interopRequireDefault(require_checkNumberLength());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
          ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
            return Object.getOwnPropertyDescriptor(source, sym).enumerable;
          }));
        }
        ownKeys.forEach(function(key) {
          _defineProperty(target, key, source[key]);
        });
      }
      return target;
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function validatePhoneNumberLength() {
      var _normalizeArguments = (0, _parsePhoneNumber.normalizeArguments)(arguments), text = _normalizeArguments.text, options = _normalizeArguments.options, metadata = _normalizeArguments.metadata;
      options = _objectSpread({}, options, {
        extract: false
      });
      try {
        var phoneNumber = (0, _parsePhoneNumber_["default"])(text, options, metadata);
        metadata = new _metadata["default"](metadata);
        metadata.selectNumberingPlan(phoneNumber.countryCallingCode);
        var result = (0, _checkNumberLength["default"])(phoneNumber.nationalNumber, metadata);
        if (result !== "IS_POSSIBLE") {
          return result;
        }
      } catch (error) {
        if (error instanceof _ParseError["default"]) {
          return error.message;
        } else {
          throw error;
        }
      }
    }
  }
});

// node_modules/libphonenumber-js/build/findNumbers/LRUCache.js
var require_LRUCache = __commonJS({
  "node_modules/libphonenumber-js/build/findNumbers/LRUCache.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    var Node = function Node2(key, value) {
      var next = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
      var prev = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
      _classCallCheck(this, Node2);
      this.key = key;
      this.value = value;
      this.next = next;
      this.prev = prev;
    };
    var LRUCache = /* @__PURE__ */ function() {
      function LRUCache2() {
        var limit = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 10;
        _classCallCheck(this, LRUCache2);
        this.size = 0;
        this.limit = limit;
        this.head = null;
        this.tail = null;
        this.cache = {};
      }
      _createClass(LRUCache2, [{
        key: "put",
        value: function put(key, value) {
          this.ensureLimit();
          if (!this.head) {
            this.head = this.tail = new Node(key, value);
          } else {
            var node = new Node(key, value, this.head);
            this.head.prev = node;
            this.head = node;
          }
          this.cache[key] = this.head;
          this.size++;
        }
      }, {
        key: "get",
        value: function get2(key) {
          if (this.cache[key]) {
            var value = this.cache[key].value;
            this.remove(key);
            this.put(key, value);
            return value;
          }
          console.log("Item not available in cache for key ".concat(key));
        }
      }, {
        key: "ensureLimit",
        value: function ensureLimit() {
          if (this.size === this.limit) {
            this.remove(this.tail.key);
          }
        }
      }, {
        key: "remove",
        value: function remove(key) {
          var node = this.cache[key];
          if (node.prev !== null) {
            node.prev.next = node.next;
          } else {
            this.head = node.next;
          }
          if (node.next !== null) {
            node.next.prev = node.prev;
          } else {
            this.tail = node.prev;
          }
          delete this.cache[key];
          this.size--;
        }
      }, {
        key: "clear",
        value: function clear() {
          this.head = null;
          this.tail = null;
          this.size = 0;
          this.cache = {};
        }
      }]);
      return LRUCache2;
    }();
    exports["default"] = LRUCache;
  }
});

// node_modules/libphonenumber-js/build/findNumbers/RegExpCache.js
var require_RegExpCache = __commonJS({
  "node_modules/libphonenumber-js/build/findNumbers/RegExpCache.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _LRUCache = _interopRequireDefault(require_LRUCache());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var RegExpCache = /* @__PURE__ */ function() {
      function RegExpCache2(size) {
        _classCallCheck(this, RegExpCache2);
        this.cache = new _LRUCache["default"](size);
      }
      _createClass(RegExpCache2, [{
        key: "getPatternForRegExp",
        value: function getPatternForRegExp(pattern) {
          var regExp = this.cache.get(pattern);
          if (!regExp) {
            regExp = new RegExp("^" + pattern);
            this.cache.put(pattern, regExp);
          }
          return regExp;
        }
      }]);
      return RegExpCache2;
    }();
    exports["default"] = RegExpCache;
  }
});

// node_modules/libphonenumber-js/build/findNumbers/util.js
var require_util = __commonJS({
  "node_modules/libphonenumber-js/build/findNumbers/util.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.limit = limit;
    exports.trimAfterFirstMatch = trimAfterFirstMatch;
    exports.startsWith = startsWith;
    exports.endsWith = endsWith;
    function limit(lower, upper) {
      if (lower < 0 || upper <= 0 || upper < lower) {
        throw new TypeError();
      }
      return "{".concat(lower, ",").concat(upper, "}");
    }
    function trimAfterFirstMatch(regexp, string) {
      var index = string.search(regexp);
      if (index >= 0) {
        return string.slice(0, index);
      }
      return string;
    }
    function startsWith(string, substring) {
      return string.indexOf(substring) === 0;
    }
    function endsWith(string, substring) {
      return string.indexOf(substring, string.length - substring.length) === string.length - substring.length;
    }
  }
});

// node_modules/libphonenumber-js/build/findNumbers/utf-8.js
var require_utf_8 = __commonJS({
  "node_modules/libphonenumber-js/build/findNumbers/utf-8.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.isLatinLetter = isLatinLetter;
    exports.isInvalidPunctuationSymbol = isInvalidPunctuationSymbol;
    exports._pL = exports.pNd = exports._pN = exports.PZ = exports.pZ = void 0;
    var _pZ = " \xA0\u1680\u180E\u2000-\u200A\u2028\u2029\u202F\u205F\u3000";
    var pZ = "[".concat(_pZ, "]");
    exports.pZ = pZ;
    var PZ = "[^".concat(_pZ, "]");
    exports.PZ = PZ;
    var _pN = "0-9\xB2\xB3\xB9\xBC-\xBE\u0660-\u0669\u06F0-\u06F9\u07C0-\u07C9\u0966-\u096F\u09E6-\u09EF\u09F4-\u09F9\u0A66-\u0A6F\u0AE6-\u0AEF\u0B66-\u0B6F\u0B72-\u0B77\u0BE6-\u0BF2\u0C66-\u0C6F\u0C78-\u0C7E\u0CE6-\u0CEF\u0D66-\u0D75\u0E50-\u0E59\u0ED0-\u0ED9\u0F20-\u0F33\u1040-\u1049\u1090-\u1099\u1369-\u137C\u16EE-\u16F0\u17E0-\u17E9\u17F0-\u17F9\u1810-\u1819\u1946-\u194F\u19D0-\u19DA\u1A80-\u1A89\u1A90-\u1A99\u1B50-\u1B59\u1BB0-\u1BB9\u1C40-\u1C49\u1C50-\u1C59\u2070\u2074-\u2079\u2080-\u2089\u2150-\u2182\u2185-\u2189\u2460-\u249B\u24EA-\u24FF\u2776-\u2793\u2CFD\u3007\u3021-\u3029\u3038-\u303A\u3192-\u3195\u3220-\u3229\u3248-\u324F\u3251-\u325F\u3280-\u3289\u32B1-\u32BF\uA620-\uA629\uA6E6-\uA6EF\uA830-\uA835\uA8D0-\uA8D9\uA900-\uA909\uA9D0-\uA9D9\uAA50-\uAA59\uABF0-\uABF9\uFF10-\uFF19";
    exports._pN = _pN;
    var _pNd = "0-9\u0660-\u0669\u06F0-\u06F9\u07C0-\u07C9\u0966-\u096F\u09E6-\u09EF\u0A66-\u0A6F\u0AE6-\u0AEF\u0B66-\u0B6F\u0BE6-\u0BEF\u0C66-\u0C6F\u0CE6-\u0CEF\u0D66-\u0D6F\u0E50-\u0E59\u0ED0-\u0ED9\u0F20-\u0F29\u1040-\u1049\u1090-\u1099\u17E0-\u17E9\u1810-\u1819\u1946-\u194F\u19D0-\u19D9\u1A80-\u1A89\u1A90-\u1A99\u1B50-\u1B59\u1BB0-\u1BB9\u1C40-\u1C49\u1C50-\u1C59\uA620-\uA629\uA8D0-\uA8D9\uA900-\uA909\uA9D0-\uA9D9\uAA50-\uAA59\uABF0-\uABF9\uFF10-\uFF19";
    var pNd = "[".concat(_pNd, "]");
    exports.pNd = pNd;
    var _pL = "A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0\u08A2-\u08AC\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097F\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C33\u0C35-\u0C39\u0C3D\u0C58\u0C59\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D60\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191C\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19C1-\u19C7\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA697\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA793\uA7A0-\uA7AA\uA7F8-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA80-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC";
    exports._pL = _pL;
    var pL = "[".concat(_pL, "]");
    var pL_regexp = new RegExp(pL);
    var _pSc = "$\xA2-\xA5\u058F\u060B\u09F2\u09F3\u09FB\u0AF1\u0BF9\u0E3F\u17DB\u20A0-\u20B9\uA838\uFDFC\uFE69\uFF04\uFFE0\uFFE1\uFFE5\uFFE6";
    var pSc = "[".concat(_pSc, "]");
    var pSc_regexp = new RegExp(pSc);
    var _pMn = "\u0300-\u036F\u0483-\u0487\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08E4-\u08FE\u0900-\u0902\u093A\u093C\u0941-\u0948\u094D\u0951-\u0957\u0962\u0963\u0981\u09BC\u09C1-\u09C4\u09CD\u09E2\u09E3\u0A01\u0A02\u0A3C\u0A41\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81\u0A82\u0ABC\u0AC1-\u0AC5\u0AC7\u0AC8\u0ACD\u0AE2\u0AE3\u0B01\u0B3C\u0B3F\u0B41-\u0B44\u0B4D\u0B56\u0B62\u0B63\u0B82\u0BC0\u0BCD\u0C3E-\u0C40\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0CBC\u0CBF\u0CC6\u0CCC\u0CCD\u0CE2\u0CE3\u0D41-\u0D44\u0D4D\u0D62\u0D63\u0DCA\u0DD2-\u0DD4\u0DD6\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EB9\u0EBB\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F71-\u0F7E\u0F80-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102D-\u1030\u1032-\u1037\u1039\u103A\u103D\u103E\u1058\u1059\u105E-\u1060\u1071-\u1074\u1082\u1085\u1086\u108D\u109D\u135D-\u135F\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4\u17B5\u17B7-\u17BD\u17C6\u17C9-\u17D3\u17DD\u180B-\u180D\u18A9\u1920-\u1922\u1927\u1928\u1932\u1939-\u193B\u1A17\u1A18\u1A56\u1A58-\u1A5E\u1A60\u1A62\u1A65-\u1A6C\u1A73-\u1A7C\u1A7F\u1B00-\u1B03\u1B34\u1B36-\u1B3A\u1B3C\u1B42\u1B6B-\u1B73\u1B80\u1B81\u1BA2-\u1BA5\u1BA8\u1BA9\u1BAB\u1BE6\u1BE8\u1BE9\u1BED\u1BEF-\u1BF1\u1C2C-\u1C33\u1C36\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE0\u1CE2-\u1CE8\u1CED\u1CF4\u1DC0-\u1DE6\u1DFC-\u1DFF\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302D\u3099\u309A\uA66F\uA674-\uA67D\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA825\uA826\uA8C4\uA8E0-\uA8F1\uA926-\uA92D\uA947-\uA951\uA980-\uA982\uA9B3\uA9B6-\uA9B9\uA9BC\uAA29-\uAA2E\uAA31\uAA32\uAA35\uAA36\uAA43\uAA4C\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEC\uAAED\uAAF6\uABE5\uABE8\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE26";
    var pMn = "[".concat(_pMn, "]");
    var pMn_regexp = new RegExp(pMn);
    var _InBasic_Latin = "\0-\x7F";
    var _InLatin_1_Supplement = "\x80-\xFF";
    var _InLatin_Extended_A = "\u0100-\u017F";
    var _InLatin_Extended_Additional = "\u1E00-\u1EFF";
    var _InLatin_Extended_B = "\u0180-\u024F";
    var _InCombining_Diacritical_Marks = "\u0300-\u036F";
    var latinLetterRegexp = new RegExp("[" + _InBasic_Latin + _InLatin_1_Supplement + _InLatin_Extended_A + _InLatin_Extended_Additional + _InLatin_Extended_B + _InCombining_Diacritical_Marks + "]");
    function isLatinLetter(letter) {
      if (!pL_regexp.test(letter) && !pMn_regexp.test(letter)) {
        return false;
      }
      return latinLetterRegexp.test(letter);
    }
    function isInvalidPunctuationSymbol(character) {
      return character === "%" || pSc_regexp.test(character);
    }
  }
});

// node_modules/libphonenumber-js/build/findNumbers/Leniency.js
var require_Leniency = __commonJS({
  "node_modules/libphonenumber-js/build/findNumbers/Leniency.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.containsMoreThanOneSlashInNationalNumber = containsMoreThanOneSlashInNationalNumber;
    exports["default"] = void 0;
    var _validate_ = _interopRequireDefault(require_validate());
    var _parseDigits = _interopRequireDefault(require_parseDigits());
    var _util = require_util();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    var _default = {
      POSSIBLE: function POSSIBLE(number, candidate, metadata) {
        return true;
      },
      VALID: function VALID(number, candidate, metadata) {
        if (!(0, _validate_["default"])(number, void 0, metadata) || !containsOnlyValidXChars(number, candidate.toString(), metadata)) {
          return false;
        }
        return true;
      },
      STRICT_GROUPING: function STRICT_GROUPING(number, candidate, metadata, regExpCache) {
        var candidateString = candidate.toString();
        if (!(0, _validate_["default"])(number, void 0, metadata) || !containsOnlyValidXChars(number, candidateString, metadata) || containsMoreThanOneSlashInNationalNumber(number, candidateString) || !isNationalPrefixPresentIfRequired(number, metadata)) {
          return false;
        }
        return checkNumberGroupingIsValid(number, candidate, metadata, allNumberGroupsRemainGrouped, regExpCache);
      },
      EXACT_GROUPING: function EXACT_GROUPING(number, candidate, metadata, regExpCache) {
        var candidateString = candidate.toString();
        if (!(0, _validate_["default"])(number, void 0, metadata) || !containsOnlyValidXChars(number, candidateString, metadata) || containsMoreThanOneSlashInNationalNumber(number, candidateString) || !isNationalPrefixPresentIfRequired(number, metadata)) {
          return false;
        }
        return checkNumberGroupingIsValid(number, candidate, metadata, allNumberGroupsAreExactlyPresent, regExpCache);
      }
    };
    exports["default"] = _default;
    function containsOnlyValidXChars(number, candidate, metadata) {
      for (var index = 0; index < candidate.length - 1; index++) {
        var charAtIndex = candidate.charAt(index);
        if (charAtIndex === "x" || charAtIndex === "X") {
          var charAtNextIndex = candidate.charAt(index + 1);
          if (charAtNextIndex === "x" || charAtNextIndex === "X") {
            index++;
            if (util.isNumberMatch(number, candidate.substring(index)) != MatchType.NSN_MATCH) {
              return false;
            }
          } else if ((0, _parseDigits["default"])(candidate.substring(index)) !== number.ext) {
            return false;
          }
        }
      }
      return true;
    }
    function isNationalPrefixPresentIfRequired(number, _metadata) {
      if (number.getCountryCodeSource() != "FROM_DEFAULT_COUNTRY") {
        return true;
      }
      var phoneNumberRegion = util.getRegionCodeForCountryCode(number.getCountryCode());
      var metadata = util.getMetadataForRegion(phoneNumberRegion);
      if (metadata == null) {
        return true;
      }
      var nationalNumber = util.getNationalSignificantNumber(number);
      var formatRule = util.chooseFormattingPatternForNumber(metadata.numberFormats(), nationalNumber);
      if (formatRule && formatRule.getNationalPrefixFormattingRule().length > 0) {
        if (formatRule.getNationalPrefixOptionalWhenFormatting()) {
          return true;
        }
        if (PhoneNumberUtil.formattingRuleHasFirstGroupOnly(formatRule.getNationalPrefixFormattingRule())) {
          return true;
        }
        var rawInputCopy = PhoneNumberUtil.normalizeDigitsOnly(number.getRawInput());
        return util.maybeStripNationalPrefixAndCarrierCode(rawInputCopy, metadata, null);
      }
      return true;
    }
    function containsMoreThanOneSlashInNationalNumber(number, candidate) {
      var firstSlashInBodyIndex = candidate.indexOf("/");
      if (firstSlashInBodyIndex < 0) {
        return false;
      }
      var secondSlashInBodyIndex = candidate.indexOf("/", firstSlashInBodyIndex + 1);
      if (secondSlashInBodyIndex < 0) {
        return false;
      }
      var candidateHasCountryCode = number.getCountryCodeSource() === CountryCodeSource.FROM_NUMBER_WITH_PLUS_SIGN || number.getCountryCodeSource() === CountryCodeSource.FROM_NUMBER_WITHOUT_PLUS_SIGN;
      if (candidateHasCountryCode && PhoneNumberUtil.normalizeDigitsOnly(candidate.substring(0, firstSlashInBodyIndex)) === String(number.getCountryCode())) {
        return candidate.slice(secondSlashInBodyIndex + 1).indexOf("/") >= 0;
      }
      return true;
    }
    function checkNumberGroupingIsValid(number, candidate, metadata, checkGroups, regExpCache) {
      var normalizedCandidate = normalizeDigits(candidate, true);
      var formattedNumberGroups = getNationalNumberGroups(metadata, number, null);
      if (checkGroups(metadata, number, normalizedCandidate, formattedNumberGroups)) {
        return true;
      }
      var alternateFormats = MetadataManager.getAlternateFormatsForCountry(number.getCountryCode());
      var nationalSignificantNumber = util.getNationalSignificantNumber(number);
      if (alternateFormats) {
        for (var _iterator = alternateFormats.numberFormats(), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator](); ; ) {
          var _ref;
          if (_isArray) {
            if (_i >= _iterator.length)
              break;
            _ref = _iterator[_i++];
          } else {
            _i = _iterator.next();
            if (_i.done)
              break;
            _ref = _i.value;
          }
          var alternateFormat = _ref;
          if (alternateFormat.leadingDigitsPatterns().length > 0) {
            var leadingDigitsRegExp = regExpCache.getPatternForRegExp("^" + alternateFormat.leadingDigitsPatterns()[0]);
            if (!leadingDigitsRegExp.test(nationalSignificantNumber)) {
              continue;
            }
          }
          formattedNumberGroups = getNationalNumberGroups(metadata, number, alternateFormat);
          if (checkGroups(metadata, number, normalizedCandidate, formattedNumberGroups)) {
            return true;
          }
        }
      }
      return false;
    }
    function getNationalNumberGroups(metadata, number, formattingPattern) {
      if (formattingPattern) {
        var nationalSignificantNumber = util.getNationalSignificantNumber(number);
        return util.formatNsnUsingPattern(nationalSignificantNumber, formattingPattern, "RFC3966", metadata).split("-");
      }
      var rfc3966Format = formatNumber(number, "RFC3966", metadata);
      var endIndex = rfc3966Format.indexOf(";");
      if (endIndex < 0) {
        endIndex = rfc3966Format.length;
      }
      var startIndex = rfc3966Format.indexOf("-") + 1;
      return rfc3966Format.slice(startIndex, endIndex).split("-");
    }
    function allNumberGroupsAreExactlyPresent(metadata, number, normalizedCandidate, formattedNumberGroups) {
      var candidateGroups = normalizedCandidate.split(NON_DIGITS_PATTERN);
      var candidateNumberGroupIndex = number.hasExtension() ? candidateGroups.length - 2 : candidateGroups.length - 1;
      if (candidateGroups.length == 1 || candidateGroups[candidateNumberGroupIndex].contains(util.getNationalSignificantNumber(number))) {
        return true;
      }
      var formattedNumberGroupIndex = formattedNumberGroups.length - 1;
      while (formattedNumberGroupIndex > 0 && candidateNumberGroupIndex >= 0) {
        if (candidateGroups[candidateNumberGroupIndex] !== formattedNumberGroups[formattedNumberGroupIndex]) {
          return false;
        }
        formattedNumberGroupIndex--;
        candidateNumberGroupIndex--;
      }
      return candidateNumberGroupIndex >= 0 && (0, _util.endsWith)(candidateGroups[candidateNumberGroupIndex], formattedNumberGroups[0]);
    }
    function allNumberGroupsRemainGrouped(metadata, number, normalizedCandidate, formattedNumberGroups) {
      var fromIndex = 0;
      if (number.getCountryCodeSource() !== CountryCodeSource.FROM_DEFAULT_COUNTRY) {
        var countryCode = String(number.getCountryCode());
        fromIndex = normalizedCandidate.indexOf(countryCode) + countryCode.length();
      }
      for (var i = 0; i < formattedNumberGroups.length; i++) {
        fromIndex = normalizedCandidate.indexOf(formattedNumberGroups[i], fromIndex);
        if (fromIndex < 0) {
          return false;
        }
        fromIndex += formattedNumberGroups[i].length();
        if (i == 0 && fromIndex < normalizedCandidate.length()) {
          var region = util.getRegionCodeForCountryCode(number.getCountryCode());
          if (util.getNddPrefixForRegion(region, true) != null && Character.isDigit(normalizedCandidate.charAt(fromIndex))) {
            var nationalSignificantNumber = util.getNationalSignificantNumber(number);
            return (0, _util.startsWith)(normalizedCandidate.slice(fromIndex - formattedNumberGroups[i].length), nationalSignificantNumber);
          }
        }
      }
      return normalizedCandidate.slice(fromIndex).contains(number.getExtension());
    }
  }
});

// node_modules/libphonenumber-js/build/findNumbers/parsePreCandidate.js
var require_parsePreCandidate = __commonJS({
  "node_modules/libphonenumber-js/build/findNumbers/parsePreCandidate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = parsePreCandidate;
    var _util = require_util();
    var SECOND_NUMBER_START_PATTERN = /[\\/] *x/;
    function parsePreCandidate(candidate) {
      return (0, _util.trimAfterFirstMatch)(SECOND_NUMBER_START_PATTERN, candidate);
    }
  }
});

// node_modules/libphonenumber-js/build/findNumbers/isValidPreCandidate.js
var require_isValidPreCandidate = __commonJS({
  "node_modules/libphonenumber-js/build/findNumbers/isValidPreCandidate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = isValidPreCandidate;
    var SLASH_SEPARATED_DATES = /(?:(?:[0-3]?\d\/[01]?\d)|(?:[01]?\d\/[0-3]?\d))\/(?:[12]\d)?\d{2}/;
    var TIME_STAMPS = /[12]\d{3}[-/]?[01]\d[-/]?[0-3]\d +[0-2]\d$/;
    var TIME_STAMPS_SUFFIX_LEADING = /^:[0-5]\d/;
    function isValidPreCandidate(candidate, offset, text) {
      if (SLASH_SEPARATED_DATES.test(candidate)) {
        return false;
      }
      if (TIME_STAMPS.test(candidate)) {
        var followingText = text.slice(offset + candidate.length);
        if (TIME_STAMPS_SUFFIX_LEADING.test(followingText)) {
          return false;
        }
      }
      return true;
    }
  }
});

// node_modules/libphonenumber-js/build/findNumbers/isValidCandidate.js
var require_isValidCandidate = __commonJS({
  "node_modules/libphonenumber-js/build/findNumbers/isValidCandidate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = isValidCandidate;
    exports.LEAD_CLASS = void 0;
    var _constants = require_constants();
    var _util = require_util();
    var _utf = require_utf_8();
    var OPENING_PARENS = "(\\[\uFF08\uFF3B";
    var CLOSING_PARENS = ")\\]\uFF09\uFF3D";
    var NON_PARENS = "[^".concat(OPENING_PARENS).concat(CLOSING_PARENS, "]");
    var LEAD_CLASS = "[".concat(OPENING_PARENS).concat(_constants.PLUS_CHARS, "]");
    exports.LEAD_CLASS = LEAD_CLASS;
    var LEAD_CLASS_LEADING = new RegExp("^" + LEAD_CLASS);
    var BRACKET_PAIR_LIMIT = (0, _util.limit)(0, 3);
    var MATCHING_BRACKETS_ENTIRE = new RegExp("^(?:[" + OPENING_PARENS + "])?(?:" + NON_PARENS + "+[" + CLOSING_PARENS + "])?" + NON_PARENS + "+(?:[" + OPENING_PARENS + "]" + NON_PARENS + "+[" + CLOSING_PARENS + "])" + BRACKET_PAIR_LIMIT + NON_PARENS + "*$");
    var PUB_PAGES = /\d{1,5}-+\d{1,5}\s{0,4}\(\d{1,4}/;
    function isValidCandidate(candidate, offset, text, leniency) {
      if (!MATCHING_BRACKETS_ENTIRE.test(candidate) || PUB_PAGES.test(candidate)) {
        return;
      }
      if (leniency !== "POSSIBLE") {
        if (offset > 0 && !LEAD_CLASS_LEADING.test(candidate)) {
          var previousChar = text[offset - 1];
          if ((0, _utf.isInvalidPunctuationSymbol)(previousChar) || (0, _utf.isLatinLetter)(previousChar)) {
            return false;
          }
        }
        var lastCharIndex = offset + candidate.length;
        if (lastCharIndex < text.length) {
          var nextChar = text[lastCharIndex];
          if ((0, _utf.isInvalidPunctuationSymbol)(nextChar) || (0, _utf.isLatinLetter)(nextChar)) {
            return false;
          }
        }
      }
      return true;
    }
  }
});

// node_modules/libphonenumber-js/build/PhoneNumberMatcher.js
var require_PhoneNumberMatcher = __commonJS({
  "node_modules/libphonenumber-js/build/PhoneNumberMatcher.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _PhoneNumber = _interopRequireDefault(require_PhoneNumber());
    var _constants = require_constants();
    var _createExtensionPattern = _interopRequireDefault(require_createExtensionPattern());
    var _RegExpCache = _interopRequireDefault(require_RegExpCache());
    var _util = require_util();
    var _utf = require_utf_8();
    var _Leniency = _interopRequireDefault(require_Leniency());
    var _parsePreCandidate = _interopRequireDefault(require_parsePreCandidate());
    var _isValidPreCandidate = _interopRequireDefault(require_isValidPreCandidate());
    var _isValidCandidate = _interopRequireWildcard(require_isValidCandidate());
    var _metadata = require_metadata();
    var _parse_ = _interopRequireDefault(require_parse());
    function _interopRequireWildcard(obj) {
      if (obj && obj.__esModule) {
        return obj;
      } else {
        var newObj = {};
        if (obj != null) {
          for (var key in obj) {
            if (Object.prototype.hasOwnProperty.call(obj, key)) {
              var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};
              if (desc.get || desc.set) {
                Object.defineProperty(newObj, key, desc);
              } else {
                newObj[key] = obj[key];
              }
            }
          }
        }
        newObj["default"] = obj;
        return newObj;
      }
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
          ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
            return Object.getOwnPropertyDescriptor(source, sym).enumerable;
          }));
        }
        ownKeys.forEach(function(key) {
          _defineProperty(target, key, source[key]);
        });
      }
      return target;
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var EXTN_PATTERNS_FOR_MATCHING = (0, _createExtensionPattern["default"])("matching");
    var INNER_MATCHES = [
      "\\/+(.*)/",
      "(\\([^(]*)",
      "(?:".concat(_utf.pZ, "-|-").concat(_utf.pZ, ")").concat(_utf.pZ, "*(.+)"),
      "[\u2012-\u2015\uFF0D]".concat(_utf.pZ, "*(.+)"),
      "\\.+".concat(_utf.pZ, "*([^.]+)"),
      "".concat(_utf.pZ, "+(").concat(_utf.PZ, "+)")
    ];
    var leadLimit = (0, _util.limit)(0, 2);
    var punctuationLimit = (0, _util.limit)(0, 4);
    var digitBlockLimit = _constants.MAX_LENGTH_FOR_NSN + _constants.MAX_LENGTH_COUNTRY_CODE;
    var blockLimit = (0, _util.limit)(0, digitBlockLimit);
    var punctuation = "[".concat(_constants.VALID_PUNCTUATION, "]") + punctuationLimit;
    var digitSequence = _utf.pNd + (0, _util.limit)(1, digitBlockLimit);
    var PATTERN = "(?:" + _isValidCandidate.LEAD_CLASS + punctuation + ")" + leadLimit + digitSequence + "(?:" + punctuation + digitSequence + ")" + blockLimit + "(?:" + EXTN_PATTERNS_FOR_MATCHING + ")?";
    var UNWANTED_END_CHAR_PATTERN = new RegExp("[^".concat(_utf._pN).concat(_utf._pL, "#]+$"));
    var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || Math.pow(2, 53) - 1;
    var PhoneNumberMatcher = /* @__PURE__ */ function() {
      function PhoneNumberMatcher2() {
        var text = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
        var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        var metadata = arguments.length > 2 ? arguments[2] : void 0;
        _classCallCheck(this, PhoneNumberMatcher2);
        _defineProperty(this, "state", "NOT_READY");
        _defineProperty(this, "searchIndex", 0);
        _defineProperty(this, "regExpCache", new _RegExpCache["default"](32));
        options = _objectSpread({}, options, {
          defaultCallingCode: options.defaultCallingCode,
          defaultCountry: options.defaultCountry && (0, _metadata.isSupportedCountry)(options.defaultCountry, metadata) ? options.defaultCountry : void 0,
          leniency: options.leniency || options.extended ? "POSSIBLE" : "VALID",
          maxTries: options.maxTries || MAX_SAFE_INTEGER
        });
        if (!options.leniency) {
          throw new TypeError("`Leniency` not supplied");
        }
        if (options.maxTries < 0) {
          throw new TypeError("`maxTries` not supplied");
        }
        this.text = text;
        this.options = options;
        this.metadata = metadata;
        this.leniency = _Leniency["default"][options.leniency];
        if (!this.leniency) {
          throw new TypeError("Unknown leniency: ".concat(options.leniency, "."));
        }
        this.maxTries = options.maxTries;
        this.PATTERN = new RegExp(PATTERN, "ig");
      }
      _createClass(PhoneNumberMatcher2, [{
        key: "find",
        value: function find() {
          var matches;
          while (this.maxTries > 0 && (matches = this.PATTERN.exec(this.text)) !== null) {
            var candidate = matches[0];
            var offset = matches.index;
            candidate = (0, _parsePreCandidate["default"])(candidate);
            if ((0, _isValidPreCandidate["default"])(candidate, offset, this.text)) {
              var match = this.parseAndVerify(candidate, offset, this.text) || this.extractInnerMatch(candidate, offset, this.text);
              if (match) {
                if (this.options.v2) {
                  var phoneNumber = new _PhoneNumber["default"](match.country || match.countryCallingCode, match.phone, this.metadata);
                  if (match.ext) {
                    phoneNumber.ext = match.ext;
                  }
                  return {
                    startsAt: match.startsAt,
                    endsAt: match.endsAt,
                    number: phoneNumber
                  };
                }
                return match;
              }
            }
            this.maxTries--;
          }
        }
      }, {
        key: "extractInnerMatch",
        value: function extractInnerMatch(substring, offset, text) {
          for (var _i = 0, _INNER_MATCHES = INNER_MATCHES; _i < _INNER_MATCHES.length; _i++) {
            var innerMatchPattern = _INNER_MATCHES[_i];
            var isFirstMatch = true;
            var candidateMatch = void 0;
            var innerMatchRegExp = new RegExp(innerMatchPattern, "g");
            while (this.maxTries > 0 && (candidateMatch = innerMatchRegExp.exec(substring)) !== null) {
              if (isFirstMatch) {
                var _candidate = (0, _util.trimAfterFirstMatch)(UNWANTED_END_CHAR_PATTERN, substring.slice(0, candidateMatch.index));
                var _match = this.parseAndVerify(_candidate, offset, text);
                if (_match) {
                  return _match;
                }
                this.maxTries--;
                isFirstMatch = false;
              }
              var candidate = (0, _util.trimAfterFirstMatch)(UNWANTED_END_CHAR_PATTERN, candidateMatch[1]);
              var candidateIndexGuess = substring.indexOf(candidate, candidateMatch.index);
              var match = this.parseAndVerify(candidate, offset + candidateIndexGuess, text);
              if (match) {
                return match;
              }
              this.maxTries--;
            }
          }
        }
      }, {
        key: "parseAndVerify",
        value: function parseAndVerify(candidate, offset, text) {
          if (!(0, _isValidCandidate["default"])(candidate, offset, text, this.options.leniency)) {
            return;
          }
          var number = (0, _parse_["default"])(candidate, {
            extended: true,
            defaultCountry: this.options.defaultCountry,
            defaultCallingCode: this.options.defaultCallingCode
          }, this.metadata);
          if (!number.possible) {
            return;
          }
          if (this.leniency(number, candidate, this.metadata, this.regExpCache)) {
            var result = {
              startsAt: offset,
              endsAt: offset + candidate.length,
              phone: number.phone
            };
            if (number.country && number.country !== "001") {
              result.country = number.country;
            } else {
              result.countryCallingCode = number.countryCallingCode;
            }
            if (number.ext) {
              result.ext = number.ext;
            }
            return result;
          }
        }
      }, {
        key: "hasNext",
        value: function hasNext() {
          if (this.state === "NOT_READY") {
            this.lastMatch = this.find();
            if (this.lastMatch) {
              this.state = "READY";
            } else {
              this.state = "DONE";
            }
          }
          return this.state === "READY";
        }
      }, {
        key: "next",
        value: function next() {
          if (!this.hasNext()) {
            throw new Error("No next element");
          }
          var result = this.lastMatch;
          this.lastMatch = null;
          this.state = "NOT_READY";
          return result;
        }
      }]);
      return PhoneNumberMatcher2;
    }();
    exports["default"] = PhoneNumberMatcher;
  }
});

// node_modules/libphonenumber-js/build/findNumbers_.js
var require_findNumbers = __commonJS({
  "node_modules/libphonenumber-js/build/findNumbers_.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = findNumbers;
    var _PhoneNumberMatcher = _interopRequireDefault(require_PhoneNumberMatcher());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function findNumbers(text, options, metadata) {
      var matcher = new _PhoneNumberMatcher["default"](text, options, metadata);
      var results = [];
      while (matcher.hasNext()) {
        results.push(matcher.next());
      }
      return results;
    }
  }
});

// node_modules/libphonenumber-js/build/findNumbers.js
var require_findNumbers2 = __commonJS({
  "node_modules/libphonenumber-js/build/findNumbers.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = findNumbers;
    var _findNumbers_ = _interopRequireDefault(require_findNumbers());
    var _parsePhoneNumber = require_parsePhoneNumber2();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function findNumbers() {
      var _normalizeArguments = (0, _parsePhoneNumber.normalizeArguments)(arguments), text = _normalizeArguments.text, options = _normalizeArguments.options, metadata = _normalizeArguments.metadata;
      return (0, _findNumbers_["default"])(text, options, metadata);
    }
  }
});

// node_modules/libphonenumber-js/build/searchNumbers.js
var require_searchNumbers = __commonJS({
  "node_modules/libphonenumber-js/build/searchNumbers.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = searchNumbers;
    var _parsePhoneNumber = require_parsePhoneNumber2();
    var _PhoneNumberMatcher = _interopRequireDefault(require_PhoneNumberMatcher());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function searchNumbers() {
      var _normalizeArguments = (0, _parsePhoneNumber.normalizeArguments)(arguments), text = _normalizeArguments.text, options = _normalizeArguments.options, metadata = _normalizeArguments.metadata;
      var matcher = new _PhoneNumberMatcher["default"](text, options, metadata);
      return _defineProperty({}, Symbol.iterator, function() {
        return {
          next: function next() {
            if (matcher.hasNext()) {
              return {
                done: false,
                value: matcher.next()
              };
            }
            return {
              done: true
            };
          }
        };
      });
    }
  }
});

// node_modules/libphonenumber-js/build/findPhoneNumbersInText.js
var require_findPhoneNumbersInText = __commonJS({
  "node_modules/libphonenumber-js/build/findPhoneNumbersInText.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = findPhoneNumbersInText;
    exports.getArguments = getArguments;
    var _findNumbers = _interopRequireDefault(require_findNumbers2());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _typeof(obj) {
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
          ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
            return Object.getOwnPropertyDescriptor(source, sym).enumerable;
          }));
        }
        ownKeys.forEach(function(key) {
          _defineProperty(target, key, source[key]);
        });
      }
      return target;
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function findPhoneNumbersInText(text, defaultCountry, options, metadata) {
      var args = getArguments(defaultCountry, options, metadata);
      return (0, _findNumbers["default"])(text, args.options, args.metadata);
    }
    function getArguments(defaultCountry, options, metadata) {
      if (metadata) {
        if (defaultCountry) {
          options = _objectSpread({}, options, {
            defaultCountry
          });
        }
      } else {
        if (options) {
          metadata = options;
          if (defaultCountry) {
            if (is_object(defaultCountry)) {
              options = defaultCountry;
            } else {
              options = {
                defaultCountry
              };
            }
          } else {
            options = void 0;
          }
        } else {
          metadata = defaultCountry;
          options = void 0;
        }
      }
      return {
        options: _objectSpread({}, options, {
          v2: true
        }),
        metadata
      };
    }
    var is_object = function is_object2(_) {
      return _typeof(_) === "object";
    };
  }
});

// node_modules/libphonenumber-js/build/searchPhoneNumbersInText.js
var require_searchPhoneNumbersInText = __commonJS({
  "node_modules/libphonenumber-js/build/searchPhoneNumbersInText.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = searchPhoneNumbersInText;
    var _searchNumbers = _interopRequireDefault(require_searchNumbers());
    var _findPhoneNumbersInText = require_findPhoneNumbersInText();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function searchPhoneNumbersInText(text, defaultCountry, options, metadata) {
      var args = (0, _findPhoneNumbersInText.getArguments)(defaultCountry, options, metadata);
      return (0, _searchNumbers["default"])(text, args.options, args.metadata);
    }
  }
});

// node_modules/libphonenumber-js/build/AsYouTypeState.js
var require_AsYouTypeState = __commonJS({
  "node_modules/libphonenumber-js/build/AsYouTypeState.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var AsYouTypeState = /* @__PURE__ */ function() {
      function AsYouTypeState2(_ref) {
        var _this = this;
        var onCountryChange = _ref.onCountryChange, onCallingCodeChange = _ref.onCallingCodeChange;
        _classCallCheck(this, AsYouTypeState2);
        _defineProperty(this, "update", function(properties) {
          for (var _i = 0, _Object$keys = Object.keys(properties); _i < _Object$keys.length; _i++) {
            var key = _Object$keys[_i];
            _this[key] = properties[key];
          }
        });
        this.onCountryChange = onCountryChange;
        this.onCallingCodeChange = onCallingCodeChange;
      }
      _createClass(AsYouTypeState2, [{
        key: "reset",
        value: function reset(defaultCountry, defaultCallingCode) {
          this.international = false;
          this.IDDPrefix = void 0;
          this.missingPlus = void 0;
          this.callingCode = void 0;
          this.digits = "";
          this.resetNationalSignificantNumber();
          this.initCountryAndCallingCode(defaultCountry, defaultCallingCode);
        }
      }, {
        key: "resetNationalSignificantNumber",
        value: function resetNationalSignificantNumber() {
          this.nationalSignificantNumber = this.getNationalDigits();
          this.nationalSignificantNumberMatchesInput = true;
          this.nationalPrefix = void 0;
          this.carrierCode = void 0;
          this.complexPrefixBeforeNationalSignificantNumber = void 0;
        }
      }, {
        key: "initCountryAndCallingCode",
        value: function initCountryAndCallingCode(country, callingCode) {
          this.setCountry(country);
          this.setCallingCode(callingCode);
        }
      }, {
        key: "setCountry",
        value: function setCountry(country) {
          this.country = country;
          this.onCountryChange(country);
        }
      }, {
        key: "setCallingCode",
        value: function setCallingCode(callingCode) {
          this.callingCode = callingCode;
          return this.onCallingCodeChange(this.country, callingCode);
        }
      }, {
        key: "startInternationalNumber",
        value: function startInternationalNumber() {
          this.international = true;
          this.initCountryAndCallingCode();
        }
      }, {
        key: "appendDigits",
        value: function appendDigits(nextDigits) {
          this.digits += nextDigits;
        }
      }, {
        key: "appendNationalSignificantNumberDigits",
        value: function appendNationalSignificantNumberDigits(nextDigits) {
          this.nationalSignificantNumber += nextDigits;
        }
      }, {
        key: "getNationalDigits",
        value: function getNationalDigits() {
          if (this.international) {
            return this.digits.slice((this.IDDPrefix ? this.IDDPrefix.length : 0) + (this.callingCode ? this.callingCode.length : 0));
          }
          return this.digits;
        }
      }, {
        key: "getDigitsWithoutInternationalPrefix",
        value: function getDigitsWithoutInternationalPrefix() {
          if (this.international) {
            if (this.IDDPrefix) {
              return this.digits.slice(this.IDDPrefix.length);
            }
          }
          return this.digits;
        }
      }]);
      return AsYouTypeState2;
    }();
    exports["default"] = AsYouTypeState;
  }
});

// node_modules/libphonenumber-js/build/AsYouTypeFormatter.util.js
var require_AsYouTypeFormatter_util = __commonJS({
  "node_modules/libphonenumber-js/build/AsYouTypeFormatter.util.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.countOccurences = countOccurences;
    exports.repeat = repeat;
    exports.cutAndStripNonPairedParens = cutAndStripNonPairedParens;
    exports.closeNonPairedParens = closeNonPairedParens;
    exports.stripNonPairedParens = stripNonPairedParens;
    exports.populateTemplateWithDigits = populateTemplateWithDigits;
    exports.DIGIT_PLACEHOLDER = void 0;
    var DIGIT_PLACEHOLDER = "x";
    exports.DIGIT_PLACEHOLDER = DIGIT_PLACEHOLDER;
    var DIGIT_PLACEHOLDER_MATCHER = new RegExp(DIGIT_PLACEHOLDER);
    function countOccurences(symbol, string) {
      var count = 0;
      for (var _iterator = string.split(""), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator](); ; ) {
        var _ref;
        if (_isArray) {
          if (_i >= _iterator.length)
            break;
          _ref = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done)
            break;
          _ref = _i.value;
        }
        var character = _ref;
        if (character === symbol) {
          count++;
        }
      }
      return count;
    }
    function repeat(string, times) {
      if (times < 1) {
        return "";
      }
      var result = "";
      while (times > 1) {
        if (times & 1) {
          result += string;
        }
        times >>= 1;
        string += string;
      }
      return result + string;
    }
    function cutAndStripNonPairedParens(string, cutBeforeIndex) {
      if (string[cutBeforeIndex] === ")") {
        cutBeforeIndex++;
      }
      return stripNonPairedParens(string.slice(0, cutBeforeIndex));
    }
    function closeNonPairedParens(template, cut_before) {
      var retained_template = template.slice(0, cut_before);
      var opening_braces = countOccurences("(", retained_template);
      var closing_braces = countOccurences(")", retained_template);
      var dangling_braces = opening_braces - closing_braces;
      while (dangling_braces > 0 && cut_before < template.length) {
        if (template[cut_before] === ")") {
          dangling_braces--;
        }
        cut_before++;
      }
      return template.slice(0, cut_before);
    }
    function stripNonPairedParens(string) {
      var dangling_braces = [];
      var i = 0;
      while (i < string.length) {
        if (string[i] === "(") {
          dangling_braces.push(i);
        } else if (string[i] === ")") {
          dangling_braces.pop();
        }
        i++;
      }
      var start = 0;
      var cleared_string = "";
      dangling_braces.push(string.length);
      for (var _i2 = 0, _dangling_braces = dangling_braces; _i2 < _dangling_braces.length; _i2++) {
        var index = _dangling_braces[_i2];
        cleared_string += string.slice(start, index);
        start = index + 1;
      }
      return cleared_string;
    }
    function populateTemplateWithDigits(template, position, digits) {
      for (var _iterator2 = digits.split(""), _isArray2 = Array.isArray(_iterator2), _i3 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator](); ; ) {
        var _ref2;
        if (_isArray2) {
          if (_i3 >= _iterator2.length)
            break;
          _ref2 = _iterator2[_i3++];
        } else {
          _i3 = _iterator2.next();
          if (_i3.done)
            break;
          _ref2 = _i3.value;
        }
        var digit = _ref2;
        if (template.slice(position + 1).search(DIGIT_PLACEHOLDER_MATCHER) < 0) {
          return;
        }
        position = template.search(DIGIT_PLACEHOLDER_MATCHER);
        template = template.replace(DIGIT_PLACEHOLDER_MATCHER, digit);
      }
      return [template, position];
    }
  }
});

// node_modules/libphonenumber-js/build/AsYouTypeFormatter.complete.js
var require_AsYouTypeFormatter_complete = __commonJS({
  "node_modules/libphonenumber-js/build/AsYouTypeFormatter.complete.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = formatCompleteNumber;
    exports.canFormatCompleteNumber = canFormatCompleteNumber;
    var _checkNumberLength = _interopRequireDefault(require_checkNumberLength());
    var _parseDigits = _interopRequireDefault(require_parseDigits());
    var _formatNationalNumberUsingFormat = _interopRequireDefault(require_formatNationalNumberUsingFormat());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function formatCompleteNumber(state, format, _ref) {
      var metadata = _ref.metadata, shouldTryNationalPrefixFormattingRule = _ref.shouldTryNationalPrefixFormattingRule, getSeparatorAfterNationalPrefix = _ref.getSeparatorAfterNationalPrefix;
      var matcher = new RegExp("^(?:".concat(format.pattern(), ")$"));
      if (matcher.test(state.nationalSignificantNumber)) {
        return formatNationalNumberWithAndWithoutNationalPrefixFormattingRule(state, format, {
          metadata,
          shouldTryNationalPrefixFormattingRule,
          getSeparatorAfterNationalPrefix
        });
      }
    }
    function canFormatCompleteNumber(nationalSignificantNumber, metadata) {
      return (0, _checkNumberLength["default"])(nationalSignificantNumber, metadata) === "IS_POSSIBLE";
    }
    function formatNationalNumberWithAndWithoutNationalPrefixFormattingRule(state, format, _ref2) {
      var metadata = _ref2.metadata, shouldTryNationalPrefixFormattingRule = _ref2.shouldTryNationalPrefixFormattingRule, getSeparatorAfterNationalPrefix = _ref2.getSeparatorAfterNationalPrefix;
      var nationalSignificantNumber = state.nationalSignificantNumber, international = state.international, nationalPrefix = state.nationalPrefix, carrierCode = state.carrierCode;
      if (shouldTryNationalPrefixFormattingRule(format)) {
        var formattedNumber = formatNationalNumber(state, format, {
          useNationalPrefixFormattingRule: true,
          getSeparatorAfterNationalPrefix,
          metadata
        });
        if (formattedNumber) {
          return formattedNumber;
        }
      }
      return formatNationalNumber(state, format, {
        useNationalPrefixFormattingRule: false,
        getSeparatorAfterNationalPrefix,
        metadata
      });
    }
    function formatNationalNumber(state, format, _ref3) {
      var metadata = _ref3.metadata, useNationalPrefixFormattingRule = _ref3.useNationalPrefixFormattingRule, getSeparatorAfterNationalPrefix = _ref3.getSeparatorAfterNationalPrefix;
      var formattedNationalNumber = (0, _formatNationalNumberUsingFormat["default"])(state.nationalSignificantNumber, format, {
        carrierCode: state.carrierCode,
        useInternationalFormat: state.international,
        withNationalPrefix: useNationalPrefixFormattingRule,
        metadata
      });
      if (!useNationalPrefixFormattingRule) {
        if (state.nationalPrefix) {
          formattedNationalNumber = state.nationalPrefix + getSeparatorAfterNationalPrefix(format) + formattedNationalNumber;
        } else if (state.complexPrefixBeforeNationalSignificantNumber) {
          formattedNationalNumber = state.complexPrefixBeforeNationalSignificantNumber + " " + formattedNationalNumber;
        }
      }
      if (isValidFormattedNationalNumber(formattedNationalNumber, state)) {
        return formattedNationalNumber;
      }
    }
    function isValidFormattedNationalNumber(formattedNationalNumber, state) {
      return (0, _parseDigits["default"])(formattedNationalNumber) === state.getNationalDigits();
    }
  }
});

// node_modules/libphonenumber-js/build/AsYouTypeFormatter.PatternMatcher.js
var require_AsYouTypeFormatter_PatternMatcher = __commonJS({
  "node_modules/libphonenumber-js/build/AsYouTypeFormatter.PatternMatcher.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var PatternMatcher = /* @__PURE__ */ function() {
      function PatternMatcher2(pattern) {
        _classCallCheck(this, PatternMatcher2);
        this.matchTree = new PatternParser().parse(pattern);
      }
      _createClass(PatternMatcher2, [{
        key: "match",
        value: function match(string) {
          var _ref = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, allowOverflow = _ref.allowOverflow;
          if (!string) {
            throw new Error("String is required");
          }
          var result = _match(string.split(""), this.matchTree, true);
          if (result && result.match) {
            delete result.matchedChars;
          }
          if (result && result.overflow) {
            if (!allowOverflow) {
              return;
            }
          }
          return result;
        }
      }]);
      return PatternMatcher2;
    }();
    exports["default"] = PatternMatcher;
    function _match(characters, tree, last) {
      if (typeof tree === "string") {
        if (last) {
          if (characters.length > tree.length) {
            return {
              overflow: true
            };
          }
        }
        var characterString = characters.join("");
        if (tree.indexOf(characterString) === 0) {
          if (characters.length === tree.length) {
            return {
              match: true,
              matchedChars: characters
            };
          }
          return {
            partialMatch: true
          };
        }
        if (characterString.indexOf(tree) === 0) {
          return {
            match: true,
            matchedChars: characters.slice(0, tree.length)
          };
        }
        return;
      }
      if (Array.isArray(tree)) {
        var restCharacters = characters.slice();
        var i = 0;
        while (i < tree.length) {
          var subtree = tree[i];
          var result = _match(restCharacters, subtree, last && i === tree.length - 1);
          if (!result || result.overflow) {
            return result;
          }
          if (result.match) {
            restCharacters = restCharacters.slice(result.matchedChars.length);
            if (restCharacters.length === 0) {
              if (i === tree.length - 1) {
                return {
                  match: true,
                  matchedChars: characters
                };
              } else {
                return {
                  partialMatch: true
                };
              }
            }
          } else if (result.partialMatch) {
            return {
              partialMatch: true
            };
          } else {
            throw new Error("Unsupported match result:\n".concat(JSON.stringify(result, null, 2)));
          }
          i++;
        }
        if (last) {
          return {
            overflow: true
          };
        }
        return {
          match: true,
          matchedChars: characters.slice(0, characters.length - restCharacters.length)
        };
      }
      switch (tree.op) {
        case "|":
          var partialMatch;
          for (var _iterator = tree.args, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator](); ; ) {
            var _ref2;
            if (_isArray) {
              if (_i >= _iterator.length)
                break;
              _ref2 = _iterator[_i++];
            } else {
              _i = _iterator.next();
              if (_i.done)
                break;
              _ref2 = _i.value;
            }
            var branch = _ref2;
            var _result = _match(characters, branch, last);
            if (_result) {
              if (_result.overflow) {
                return _result;
              } else if (_result.match) {
                return {
                  match: true,
                  matchedChars: _result.matchedChars
                };
              } else if (_result.partialMatch) {
                partialMatch = true;
              }
            }
          }
          if (partialMatch) {
            return {
              partialMatch: true
            };
          }
          return;
        case "[]":
          for (var _iterator2 = tree.args, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator](); ; ) {
            var _ref3;
            if (_isArray2) {
              if (_i2 >= _iterator2.length)
                break;
              _ref3 = _iterator2[_i2++];
            } else {
              _i2 = _iterator2.next();
              if (_i2.done)
                break;
              _ref3 = _i2.value;
            }
            var _char = _ref3;
            if (characters[0] === _char) {
              if (characters.length === 1) {
                return {
                  match: true,
                  matchedChars: characters
                };
              }
              if (last) {
                return {
                  overflow: true
                };
              }
              return {
                match: true,
                matchedChars: [_char]
              };
            }
          }
          return;
        default:
          throw new Error("Unsupported instruction tree: ".concat(tree));
      }
    }
    var OPERATOR = new RegExp("(\\||\\(\\?\\:|\\)|\\[|\\])");
    var PatternParser = /* @__PURE__ */ function() {
      function PatternParser2() {
        _classCallCheck(this, PatternParser2);
      }
      _createClass(PatternParser2, [{
        key: "parse",
        value: function parse(pattern) {
          this.context = [{
            or: true,
            instructions: []
          }];
          this.parsePattern(pattern);
          if (this.context.length !== 1) {
            throw new Error("Non-finalized contexts left when pattern parse ended");
          }
          var _this$context$ = this.context[0], branches = _this$context$.branches, instructions = _this$context$.instructions;
          if (branches) {
            return [{
              op: "|",
              args: branches.concat([instructions])
            }];
          }
          if (instructions.length === 0) {
            throw new Error("Pattern is required");
          }
          return instructions;
        }
      }, {
        key: "startContext",
        value: function startContext(context) {
          this.context.push(context);
        }
      }, {
        key: "endContext",
        value: function endContext() {
          this.context.pop();
        }
      }, {
        key: "getContext",
        value: function getContext() {
          return this.context[this.context.length - 1];
        }
      }, {
        key: "parsePattern",
        value: function parsePattern(pattern) {
          if (!pattern) {
            throw new Error("Empty pattern passed");
          }
          var match = pattern.match(OPERATOR);
          if (!match) {
            this.getContext().instructions = this.getContext().instructions.concat(pattern.split(""));
            return;
          }
          var operator = match[1];
          var before = pattern.slice(0, match.index);
          var rightPart = pattern.slice(match.index + operator.length);
          switch (operator) {
            case "(?:":
              if (before) {
                this.parsePattern(before);
              }
              this.startContext({
                or: true,
                instructions: [],
                branches: []
              });
              break;
            case ")":
              if (!this.getContext().or) {
                throw new Error('")" operator must be preceded by "(?:" operator');
              }
              if (before) {
                this.parsePattern(before);
              }
              if (this.getContext().instructions.length === 0) {
                throw new Error('No instructions found after "|" operator in an "or" group');
              }
              var _this$getContext = this.getContext(), branches = _this$getContext.branches;
              branches.push(this.getContext().instructions);
              this.endContext();
              this.getContext().instructions.push({
                op: "|",
                args: branches
              });
              break;
            case "|":
              if (!this.getContext().or) {
                throw new Error('"|" operator can only be used inside "or" groups');
              }
              if (before) {
                this.parsePattern(before);
              }
              if (!this.getContext().branches) {
                if (this.context.length === 1) {
                  this.getContext().branches = [];
                } else {
                  throw new Error('"branches" not found in an "or" group context');
                }
              }
              this.getContext().branches.push(this.getContext().instructions);
              this.getContext().instructions = [];
              break;
            case "[":
              if (before) {
                this.parsePattern(before);
              }
              this.startContext({
                oneOfSet: true
              });
              break;
            case "]":
              if (!this.getContext().oneOfSet) {
                throw new Error('"]" operator must be preceded by "[" operator');
              }
              this.endContext();
              this.getContext().instructions.push({
                op: "[]",
                args: parseOneOfSet(before)
              });
              break;
            default:
              throw new Error("Unknown operator: ".concat(operator));
          }
          if (rightPart) {
            this.parsePattern(rightPart);
          }
        }
      }]);
      return PatternParser2;
    }();
    function parseOneOfSet(pattern) {
      var values = [];
      var i = 0;
      while (i < pattern.length) {
        if (pattern[i] === "-") {
          if (i === 0 || i === pattern.length - 1) {
            throw new Error("Couldn't parse a one-of set pattern: ".concat(pattern));
          }
          var prevValue = pattern[i - 1].charCodeAt(0) + 1;
          var nextValue = pattern[i + 1].charCodeAt(0) - 1;
          var value = prevValue;
          while (value <= nextValue) {
            values.push(String.fromCharCode(value));
            value++;
          }
        } else {
          values.push(pattern[i]);
        }
        i++;
      }
      return values;
    }
  }
});

// node_modules/libphonenumber-js/build/AsYouTypeFormatter.js
var require_AsYouTypeFormatter = __commonJS({
  "node_modules/libphonenumber-js/build/AsYouTypeFormatter.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "DIGIT_PLACEHOLDER", {
      enumerable: true,
      get: function get2() {
        return _AsYouTypeFormatter.DIGIT_PLACEHOLDER;
      }
    });
    exports["default"] = void 0;
    var _AsYouTypeFormatter = require_AsYouTypeFormatter_util();
    var _AsYouTypeFormatter2 = _interopRequireWildcard(require_AsYouTypeFormatter_complete());
    var _AsYouTypeFormatter3 = _interopRequireDefault(require_AsYouTypeFormatter_PatternMatcher());
    var _parseDigits = _interopRequireDefault(require_parseDigits());
    var _formatNationalNumberUsingFormat = require_formatNationalNumberUsingFormat();
    var _constants = require_constants();
    var _applyInternationalSeparatorStyle = _interopRequireDefault(require_applyInternationalSeparatorStyle());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _interopRequireWildcard(obj) {
      if (obj && obj.__esModule) {
        return obj;
      } else {
        var newObj = {};
        if (obj != null) {
          for (var key in obj) {
            if (Object.prototype.hasOwnProperty.call(obj, key)) {
              var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};
              if (desc.get || desc.set) {
                Object.defineProperty(newObj, key, desc);
              } else {
                newObj[key] = obj[key];
              }
            }
          }
        }
        newObj["default"] = obj;
        return newObj;
      }
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var DUMMY_DIGIT = "9";
    var LONGEST_NATIONAL_PHONE_NUMBER_LENGTH = 15;
    var LONGEST_DUMMY_PHONE_NUMBER = (0, _AsYouTypeFormatter.repeat)(DUMMY_DIGIT, LONGEST_NATIONAL_PHONE_NUMBER_LENGTH);
    var NATIONAL_PREFIX_SEPARATORS_PATTERN = /[- ]/;
    var SUPPORT_LEGACY_FORMATTING_PATTERNS = true;
    var CREATE_CHARACTER_CLASS_PATTERN = SUPPORT_LEGACY_FORMATTING_PATTERNS && function() {
      return /\[([^\[\]])*\]/g;
    };
    var CREATE_STANDALONE_DIGIT_PATTERN = SUPPORT_LEGACY_FORMATTING_PATTERNS && function() {
      return /\d(?=[^,}][^,}])/g;
    };
    var NON_ALTERING_FORMAT_REG_EXP = new RegExp("^[" + _constants.VALID_PUNCTUATION + "]*(\\$\\d[" + _constants.VALID_PUNCTUATION + "]*)+$");
    var MIN_LEADING_DIGITS_LENGTH = 3;
    var AsYouTypeFormatter = /* @__PURE__ */ function() {
      function AsYouTypeFormatter2(_ref) {
        var _this = this;
        var state = _ref.state, metadata = _ref.metadata;
        _classCallCheck(this, AsYouTypeFormatter2);
        _defineProperty(this, "getSeparatorAfterNationalPrefix", function(format) {
          if (_this.isNANP) {
            return " ";
          }
          if (format && format.nationalPrefixFormattingRule() && NATIONAL_PREFIX_SEPARATORS_PATTERN.test(format.nationalPrefixFormattingRule())) {
            return " ";
          }
          return "";
        });
        _defineProperty(this, "shouldTryNationalPrefixFormattingRule", function(format, _ref2) {
          var international = _ref2.international, nationalPrefix = _ref2.nationalPrefix;
          if (format.nationalPrefixFormattingRule()) {
            var usesNationalPrefix = format.usesNationalPrefix();
            if (usesNationalPrefix && nationalPrefix || !usesNationalPrefix && !international) {
              return true;
            }
          }
        });
        this.metadata = metadata;
        this.resetFormat();
      }
      _createClass(AsYouTypeFormatter2, [{
        key: "resetFormat",
        value: function resetFormat() {
          this.chosenFormat = void 0;
          this.template = void 0;
          this.nationalNumberTemplate = void 0;
          this.populatedNationalNumberTemplate = void 0;
          this.populatedNationalNumberTemplatePosition = -1;
        }
      }, {
        key: "reset",
        value: function reset(numberingPlan, state) {
          this.resetFormat();
          if (numberingPlan) {
            this.isNANP = numberingPlan.callingCode() === "1";
            this.matchingFormats = numberingPlan.formats();
            if (state.nationalSignificantNumber) {
              this.narrowDownMatchingFormats(state);
            }
          } else {
            this.isNANP = void 0;
            this.matchingFormats = [];
          }
        }
      }, {
        key: "format",
        value: function format(nextDigits, state) {
          var _this2 = this;
          if ((0, _AsYouTypeFormatter2.canFormatCompleteNumber)(state.nationalSignificantNumber, this.metadata)) {
            for (var _iterator = this.matchingFormats, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator](); ; ) {
              var _ref3;
              if (_isArray) {
                if (_i >= _iterator.length)
                  break;
                _ref3 = _iterator[_i++];
              } else {
                _i = _iterator.next();
                if (_i.done)
                  break;
                _ref3 = _i.value;
              }
              var format2 = _ref3;
              var formattedCompleteNumber = (0, _AsYouTypeFormatter2["default"])(state, format2, {
                metadata: this.metadata,
                shouldTryNationalPrefixFormattingRule: function shouldTryNationalPrefixFormattingRule(format3) {
                  return _this2.shouldTryNationalPrefixFormattingRule(format3, {
                    international: state.international,
                    nationalPrefix: state.nationalPrefix
                  });
                },
                getSeparatorAfterNationalPrefix: this.getSeparatorAfterNationalPrefix
              });
              if (formattedCompleteNumber) {
                this.resetFormat();
                this.chosenFormat = format2;
                this.setNationalNumberTemplate(formattedCompleteNumber.replace(/\d/g, _AsYouTypeFormatter.DIGIT_PLACEHOLDER), state);
                this.populatedNationalNumberTemplate = formattedCompleteNumber;
                this.populatedNationalNumberTemplatePosition = this.template.lastIndexOf(_AsYouTypeFormatter.DIGIT_PLACEHOLDER);
                return formattedCompleteNumber;
              }
            }
          }
          return this.formatNationalNumberWithNextDigits(nextDigits, state);
        }
      }, {
        key: "formatNationalNumberWithNextDigits",
        value: function formatNationalNumberWithNextDigits(nextDigits, state) {
          var previouslyChosenFormat = this.chosenFormat;
          var newlyChosenFormat = this.chooseFormat(state);
          if (newlyChosenFormat) {
            if (newlyChosenFormat === previouslyChosenFormat) {
              return this.formatNextNationalNumberDigits(nextDigits);
            } else {
              return this.formatNextNationalNumberDigits(state.getNationalDigits());
            }
          }
        }
      }, {
        key: "narrowDownMatchingFormats",
        value: function narrowDownMatchingFormats(_ref4) {
          var _this3 = this;
          var nationalSignificantNumber = _ref4.nationalSignificantNumber, nationalPrefix = _ref4.nationalPrefix, international = _ref4.international;
          var leadingDigits = nationalSignificantNumber;
          var leadingDigitsPatternIndex = leadingDigits.length - MIN_LEADING_DIGITS_LENGTH;
          if (leadingDigitsPatternIndex < 0) {
            leadingDigitsPatternIndex = 0;
          }
          this.matchingFormats = this.matchingFormats.filter(function(format) {
            return _this3.formatSuits(format, international, nationalPrefix) && _this3.formatMatches(format, leadingDigits, leadingDigitsPatternIndex);
          });
          if (this.chosenFormat && this.matchingFormats.indexOf(this.chosenFormat) === -1) {
            this.resetFormat();
          }
        }
      }, {
        key: "formatSuits",
        value: function formatSuits(format, international, nationalPrefix) {
          if (nationalPrefix && !format.usesNationalPrefix() && !format.nationalPrefixIsOptionalWhenFormattingInNationalFormat()) {
            return false;
          }
          if (!international && !nationalPrefix && format.nationalPrefixIsMandatoryWhenFormattingInNationalFormat()) {
            return false;
          }
          return true;
        }
      }, {
        key: "formatMatches",
        value: function formatMatches(format, leadingDigits, leadingDigitsPatternIndex) {
          var leadingDigitsPatternsCount = format.leadingDigitsPatterns().length;
          if (leadingDigitsPatternsCount === 0) {
            return true;
          }
          leadingDigitsPatternIndex = Math.min(leadingDigitsPatternIndex, leadingDigitsPatternsCount - 1);
          var leadingDigitsPattern = format.leadingDigitsPatterns()[leadingDigitsPatternIndex];
          if (leadingDigits.length < MIN_LEADING_DIGITS_LENGTH) {
            try {
              return new _AsYouTypeFormatter3["default"](leadingDigitsPattern).match(leadingDigits, {
                allowOverflow: true
              }) !== void 0;
            } catch (error) {
              console.error(error);
              return true;
            }
          }
          return new RegExp("^(".concat(leadingDigitsPattern, ")")).test(leadingDigits);
        }
      }, {
        key: "getFormatFormat",
        value: function getFormatFormat(format, international) {
          return international ? format.internationalFormat() : format.format();
        }
      }, {
        key: "chooseFormat",
        value: function chooseFormat(state) {
          var _this4 = this;
          var _loop2 = function _loop22() {
            if (_isArray2) {
              if (_i2 >= _iterator2.length)
                return "break";
              _ref5 = _iterator2[_i2++];
            } else {
              _i2 = _iterator2.next();
              if (_i2.done)
                return "break";
              _ref5 = _i2.value;
            }
            var format = _ref5;
            if (_this4.chosenFormat === format) {
              return "break";
            }
            if (!NON_ALTERING_FORMAT_REG_EXP.test(_this4.getFormatFormat(format, state.international))) {
              return "continue";
            }
            if (!_this4.createTemplateForFormat(format, state)) {
              _this4.matchingFormats = _this4.matchingFormats.filter(function(_) {
                return _ !== format;
              });
              return "continue";
            }
            _this4.chosenFormat = format;
            return "break";
          };
          _loop:
            for (var _iterator2 = this.matchingFormats.slice(), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator](); ; ) {
              var _ref5;
              var _ret = _loop2();
              switch (_ret) {
                case "break":
                  break _loop;
                case "continue":
                  continue;
              }
            }
          if (!this.chosenFormat) {
            this.resetFormat();
          }
          return this.chosenFormat;
        }
      }, {
        key: "createTemplateForFormat",
        value: function createTemplateForFormat(format, state) {
          if (SUPPORT_LEGACY_FORMATTING_PATTERNS && format.pattern().indexOf("|") >= 0) {
            return;
          }
          var template = this.getTemplateForFormat(format, state);
          if (template) {
            this.setNationalNumberTemplate(template, state);
            return true;
          }
        }
      }, {
        key: "getInternationalPrefixBeforeCountryCallingCode",
        value: function getInternationalPrefixBeforeCountryCallingCode(_ref6, options) {
          var IDDPrefix = _ref6.IDDPrefix, missingPlus = _ref6.missingPlus;
          if (IDDPrefix) {
            return options && options.spacing === false ? IDDPrefix : IDDPrefix + " ";
          }
          if (missingPlus) {
            return "";
          }
          return "+";
        }
      }, {
        key: "getTemplate",
        value: function getTemplate(state) {
          if (!this.template) {
            return;
          }
          var index = -1;
          var i = 0;
          var internationalPrefix = state.international ? this.getInternationalPrefixBeforeCountryCallingCode(state, {
            spacing: false
          }) : "";
          while (i < internationalPrefix.length + state.getDigitsWithoutInternationalPrefix().length) {
            index = this.template.indexOf(_AsYouTypeFormatter.DIGIT_PLACEHOLDER, index + 1);
            i++;
          }
          return (0, _AsYouTypeFormatter.cutAndStripNonPairedParens)(this.template, index + 1);
        }
      }, {
        key: "setNationalNumberTemplate",
        value: function setNationalNumberTemplate(template, state) {
          this.nationalNumberTemplate = template;
          this.populatedNationalNumberTemplate = template;
          this.populatedNationalNumberTemplatePosition = -1;
          if (state.international) {
            this.template = this.getInternationalPrefixBeforeCountryCallingCode(state).replace(/[\d\+]/g, _AsYouTypeFormatter.DIGIT_PLACEHOLDER) + (0, _AsYouTypeFormatter.repeat)(_AsYouTypeFormatter.DIGIT_PLACEHOLDER, state.callingCode.length) + " " + template;
          } else {
            this.template = template;
          }
        }
      }, {
        key: "getTemplateForFormat",
        value: function getTemplateForFormat(format, _ref7) {
          var nationalSignificantNumber = _ref7.nationalSignificantNumber, international = _ref7.international, nationalPrefix = _ref7.nationalPrefix, complexPrefixBeforeNationalSignificantNumber = _ref7.complexPrefixBeforeNationalSignificantNumber;
          var pattern = format.pattern();
          if (SUPPORT_LEGACY_FORMATTING_PATTERNS) {
            pattern = pattern.replace(CREATE_CHARACTER_CLASS_PATTERN(), "\\d").replace(CREATE_STANDALONE_DIGIT_PATTERN(), "\\d");
          }
          var digits = LONGEST_DUMMY_PHONE_NUMBER.match(pattern)[0];
          if (nationalSignificantNumber.length > digits.length) {
            return;
          }
          var strictPattern = new RegExp("^" + pattern + "$");
          var nationalNumberDummyDigits = nationalSignificantNumber.replace(/\d/g, DUMMY_DIGIT);
          if (strictPattern.test(nationalNumberDummyDigits)) {
            digits = nationalNumberDummyDigits;
          }
          var numberFormat = this.getFormatFormat(format, international);
          var nationalPrefixIncludedInTemplate;
          if (this.shouldTryNationalPrefixFormattingRule(format, {
            international,
            nationalPrefix
          })) {
            var numberFormatWithNationalPrefix = numberFormat.replace(_formatNationalNumberUsingFormat.FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule());
            if ((0, _parseDigits["default"])(format.nationalPrefixFormattingRule()) === (nationalPrefix || "") + (0, _parseDigits["default"])("$1")) {
              numberFormat = numberFormatWithNationalPrefix;
              nationalPrefixIncludedInTemplate = true;
              if (nationalPrefix) {
                var i = nationalPrefix.length;
                while (i > 0) {
                  numberFormat = numberFormat.replace(/\d/, _AsYouTypeFormatter.DIGIT_PLACEHOLDER);
                  i--;
                }
              }
            }
          }
          var template = digits.replace(new RegExp(pattern), numberFormat).replace(new RegExp(DUMMY_DIGIT, "g"), _AsYouTypeFormatter.DIGIT_PLACEHOLDER);
          if (!nationalPrefixIncludedInTemplate) {
            if (complexPrefixBeforeNationalSignificantNumber) {
              template = (0, _AsYouTypeFormatter.repeat)(_AsYouTypeFormatter.DIGIT_PLACEHOLDER, complexPrefixBeforeNationalSignificantNumber.length) + " " + template;
            } else if (nationalPrefix) {
              template = (0, _AsYouTypeFormatter.repeat)(_AsYouTypeFormatter.DIGIT_PLACEHOLDER, nationalPrefix.length) + this.getSeparatorAfterNationalPrefix(format) + template;
            }
          }
          if (international) {
            template = (0, _applyInternationalSeparatorStyle["default"])(template);
          }
          return template;
        }
      }, {
        key: "formatNextNationalNumberDigits",
        value: function formatNextNationalNumberDigits(digits) {
          var result = (0, _AsYouTypeFormatter.populateTemplateWithDigits)(this.populatedNationalNumberTemplate, this.populatedNationalNumberTemplatePosition, digits);
          if (!result) {
            this.resetFormat();
            return;
          }
          this.populatedNationalNumberTemplate = result[0];
          this.populatedNationalNumberTemplatePosition = result[1];
          return (0, _AsYouTypeFormatter.cutAndStripNonPairedParens)(this.populatedNationalNumberTemplate, this.populatedNationalNumberTemplatePosition + 1);
        }
      }]);
      return AsYouTypeFormatter2;
    }();
    exports["default"] = AsYouTypeFormatter;
  }
});

// node_modules/libphonenumber-js/build/AsYouTypeParser.js
var require_AsYouTypeParser = __commonJS({
  "node_modules/libphonenumber-js/build/AsYouTypeParser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.extractFormattedDigitsAndPlus = extractFormattedDigitsAndPlus;
    exports["default"] = void 0;
    var _extractCountryCallingCode2 = _interopRequireDefault(require_extractCountryCallingCode());
    var _extractCountryCallingCodeFromInternationalNumberWithoutPlusSign = _interopRequireDefault(require_extractCountryCallingCodeFromInternationalNumberWithoutPlusSign());
    var _extractNationalNumberFromPossiblyIncompleteNumber = _interopRequireDefault(require_extractNationalNumberFromPossiblyIncompleteNumber());
    var _stripIddPrefix = _interopRequireDefault(require_stripIddPrefix());
    var _parseDigits = _interopRequireDefault(require_parseDigits());
    var _constants = require_constants();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _slicedToArray(arr, i) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
    }
    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }
    function _iterableToArrayLimit(arr, i) {
      var _arr = [];
      var _n = true;
      var _d = false;
      var _e = void 0;
      try {
        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);
          if (i && _arr.length === i)
            break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null)
            _i["return"]();
        } finally {
          if (_d)
            throw _e;
        }
      }
      return _arr;
    }
    function _arrayWithHoles(arr) {
      if (Array.isArray(arr))
        return arr;
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var VALID_FORMATTED_PHONE_NUMBER_DIGITS_PART = "[" + _constants.VALID_PUNCTUATION + _constants.VALID_DIGITS + "]+";
    var VALID_FORMATTED_PHONE_NUMBER_DIGITS_PART_PATTERN = new RegExp("^" + VALID_FORMATTED_PHONE_NUMBER_DIGITS_PART + "$", "i");
    var VALID_FORMATTED_PHONE_NUMBER_PART = "(?:[" + _constants.PLUS_CHARS + "][" + _constants.VALID_PUNCTUATION + _constants.VALID_DIGITS + "]*|[" + _constants.VALID_PUNCTUATION + _constants.VALID_DIGITS + "]+)";
    var AFTER_PHONE_NUMBER_DIGITS_END_PATTERN = new RegExp("[^" + _constants.VALID_PUNCTUATION + _constants.VALID_DIGITS + "]+.*$");
    var COMPLEX_NATIONAL_PREFIX = /[^\d\[\]]/;
    var AsYouTypeParser = /* @__PURE__ */ function() {
      function AsYouTypeParser2(_ref) {
        var defaultCountry = _ref.defaultCountry, defaultCallingCode = _ref.defaultCallingCode, metadata = _ref.metadata, onNationalSignificantNumberChange = _ref.onNationalSignificantNumberChange;
        _classCallCheck(this, AsYouTypeParser2);
        this.defaultCountry = defaultCountry;
        this.defaultCallingCode = defaultCallingCode;
        this.metadata = metadata;
        this.onNationalSignificantNumberChange = onNationalSignificantNumberChange;
      }
      _createClass(AsYouTypeParser2, [{
        key: "input",
        value: function input(text, state) {
          var _extractFormattedDigi = extractFormattedDigitsAndPlus(text), _extractFormattedDigi2 = _slicedToArray(_extractFormattedDigi, 2), formattedDigits = _extractFormattedDigi2[0], hasPlus = _extractFormattedDigi2[1];
          var digits = (0, _parseDigits["default"])(formattedDigits);
          var justLeadingPlus;
          if (hasPlus) {
            if (!state.digits) {
              state.startInternationalNumber();
              if (!digits) {
                justLeadingPlus = true;
              }
            }
          }
          if (digits) {
            this.inputDigits(digits, state);
          }
          return {
            digits,
            justLeadingPlus
          };
        }
      }, {
        key: "inputDigits",
        value: function inputDigits(nextDigits, state) {
          var digits = state.digits;
          var hasReceivedThreeLeadingDigits = digits.length < 3 && digits.length + nextDigits.length >= 3;
          state.appendDigits(nextDigits);
          if (hasReceivedThreeLeadingDigits) {
            this.extractIddPrefix(state);
          }
          if (this.isWaitingForCountryCallingCode(state)) {
            if (!this.extractCountryCallingCode(state)) {
              return;
            }
          } else {
            state.appendNationalSignificantNumberDigits(nextDigits);
          }
          if (!state.international) {
            if (!this.hasExtractedNationalSignificantNumber) {
              this.extractNationalSignificantNumber(state.getNationalDigits(), state.update);
            }
          }
        }
      }, {
        key: "isWaitingForCountryCallingCode",
        value: function isWaitingForCountryCallingCode(_ref2) {
          var international = _ref2.international, callingCode = _ref2.callingCode;
          return international && !callingCode;
        }
      }, {
        key: "extractCountryCallingCode",
        value: function extractCountryCallingCode(state) {
          var _extractCountryCallin = (0, _extractCountryCallingCode2["default"])("+" + state.getDigitsWithoutInternationalPrefix(), this.defaultCountry, this.defaultCallingCode, this.metadata.metadata), countryCallingCode = _extractCountryCallin.countryCallingCode, number = _extractCountryCallin.number;
          if (countryCallingCode) {
            state.setCallingCode(countryCallingCode);
            state.update({
              nationalSignificantNumber: number
            });
            return true;
          }
        }
      }, {
        key: "reset",
        value: function reset(numberingPlan) {
          if (numberingPlan) {
            this.hasSelectedNumberingPlan = true;
            var nationalPrefixForParsing = numberingPlan._nationalPrefixForParsing();
            this.couldPossiblyExtractAnotherNationalSignificantNumber = nationalPrefixForParsing && COMPLEX_NATIONAL_PREFIX.test(nationalPrefixForParsing);
          } else {
            this.hasSelectedNumberingPlan = void 0;
            this.couldPossiblyExtractAnotherNationalSignificantNumber = void 0;
          }
        }
      }, {
        key: "extractNationalSignificantNumber",
        value: function extractNationalSignificantNumber(nationalDigits, setState) {
          if (!this.hasSelectedNumberingPlan) {
            return;
          }
          var _extractNationalNumbe = (0, _extractNationalNumberFromPossiblyIncompleteNumber["default"])(nationalDigits, this.metadata), nationalPrefix = _extractNationalNumbe.nationalPrefix, nationalNumber = _extractNationalNumbe.nationalNumber, carrierCode = _extractNationalNumbe.carrierCode;
          if (nationalNumber === nationalDigits) {
            return;
          }
          this.onExtractedNationalNumber(nationalPrefix, carrierCode, nationalNumber, nationalDigits, setState);
          return true;
        }
      }, {
        key: "extractAnotherNationalSignificantNumber",
        value: function extractAnotherNationalSignificantNumber(nationalDigits, prevNationalSignificantNumber, setState) {
          if (!this.hasExtractedNationalSignificantNumber) {
            return this.extractNationalSignificantNumber(nationalDigits, setState);
          }
          if (!this.couldPossiblyExtractAnotherNationalSignificantNumber) {
            return;
          }
          var _extractNationalNumbe2 = (0, _extractNationalNumberFromPossiblyIncompleteNumber["default"])(nationalDigits, this.metadata), nationalPrefix = _extractNationalNumbe2.nationalPrefix, nationalNumber = _extractNationalNumbe2.nationalNumber, carrierCode = _extractNationalNumbe2.carrierCode;
          if (nationalNumber === prevNationalSignificantNumber) {
            return;
          }
          this.onExtractedNationalNumber(nationalPrefix, carrierCode, nationalNumber, nationalDigits, setState);
          return true;
        }
      }, {
        key: "onExtractedNationalNumber",
        value: function onExtractedNationalNumber(nationalPrefix, carrierCode, nationalSignificantNumber, nationalDigits, setState) {
          var complexPrefixBeforeNationalSignificantNumber;
          var nationalSignificantNumberMatchesInput;
          var nationalSignificantNumberIndex = nationalDigits.lastIndexOf(nationalSignificantNumber);
          if (nationalSignificantNumberIndex >= 0 && nationalSignificantNumberIndex === nationalDigits.length - nationalSignificantNumber.length) {
            nationalSignificantNumberMatchesInput = true;
            var prefixBeforeNationalNumber = nationalDigits.slice(0, nationalSignificantNumberIndex);
            if (prefixBeforeNationalNumber !== nationalPrefix) {
              complexPrefixBeforeNationalSignificantNumber = prefixBeforeNationalNumber;
            }
          }
          setState({
            nationalPrefix,
            carrierCode,
            nationalSignificantNumber,
            nationalSignificantNumberMatchesInput,
            complexPrefixBeforeNationalSignificantNumber
          });
          this.hasExtractedNationalSignificantNumber = true;
          this.onNationalSignificantNumberChange();
        }
      }, {
        key: "reExtractNationalSignificantNumber",
        value: function reExtractNationalSignificantNumber(state) {
          if (this.extractAnotherNationalSignificantNumber(state.getNationalDigits(), state.nationalSignificantNumber, state.update)) {
            return true;
          }
          if (this.extractIddPrefix(state)) {
            this.extractCallingCodeAndNationalSignificantNumber(state);
            return true;
          }
          if (this.fixMissingPlus(state)) {
            this.extractCallingCodeAndNationalSignificantNumber(state);
            return true;
          }
        }
      }, {
        key: "extractIddPrefix",
        value: function extractIddPrefix(state) {
          var international = state.international, IDDPrefix = state.IDDPrefix, digits = state.digits, nationalSignificantNumber = state.nationalSignificantNumber;
          if (international || IDDPrefix) {
            return;
          }
          var numberWithoutIDD = (0, _stripIddPrefix["default"])(digits, this.defaultCountry, this.defaultCallingCode, this.metadata.metadata);
          if (numberWithoutIDD !== void 0 && numberWithoutIDD !== digits) {
            state.update({
              IDDPrefix: digits.slice(0, digits.length - numberWithoutIDD.length)
            });
            this.startInternationalNumber(state);
            return true;
          }
        }
      }, {
        key: "fixMissingPlus",
        value: function fixMissingPlus(state) {
          if (!state.international) {
            var _extractCountryCallin2 = (0, _extractCountryCallingCodeFromInternationalNumberWithoutPlusSign["default"])(state.digits, this.defaultCountry, this.defaultCallingCode, this.metadata.metadata), newCallingCode = _extractCountryCallin2.countryCallingCode, number = _extractCountryCallin2.number;
            if (newCallingCode) {
              state.update({
                missingPlus: true
              });
              this.startInternationalNumber(state);
              return true;
            }
          }
        }
      }, {
        key: "startInternationalNumber",
        value: function startInternationalNumber(state) {
          state.startInternationalNumber();
          if (state.nationalSignificantNumber) {
            state.resetNationalSignificantNumber();
            this.onNationalSignificantNumberChange();
            this.hasExtractedNationalSignificantNumber = void 0;
          }
        }
      }, {
        key: "extractCallingCodeAndNationalSignificantNumber",
        value: function extractCallingCodeAndNationalSignificantNumber(state) {
          if (this.extractCountryCallingCode(state)) {
            this.extractNationalSignificantNumber(state.getNationalDigits(), state.update);
          }
        }
      }]);
      return AsYouTypeParser2;
    }();
    exports["default"] = AsYouTypeParser;
    function extractFormattedPhoneNumber(text) {
      var startsAt = text.search(VALID_FORMATTED_PHONE_NUMBER_PART);
      if (startsAt < 0) {
        return;
      }
      text = text.slice(startsAt);
      var hasPlus;
      if (text[0] === "+") {
        hasPlus = true;
        text = text.slice("+".length);
      }
      text = text.replace(AFTER_PHONE_NUMBER_DIGITS_END_PATTERN, "");
      if (hasPlus) {
        text = "+" + text;
      }
      return text;
    }
    function _extractFormattedDigitsAndPlus(text) {
      var extractedNumber = extractFormattedPhoneNumber(text) || "";
      if (extractedNumber[0] === "+") {
        return [extractedNumber.slice("+".length), true];
      }
      return [extractedNumber];
    }
    function extractFormattedDigitsAndPlus(text) {
      var _extractFormattedDigi3 = _extractFormattedDigitsAndPlus(text), _extractFormattedDigi4 = _slicedToArray(_extractFormattedDigi3, 2), formattedDigits = _extractFormattedDigi4[0], hasPlus = _extractFormattedDigi4[1];
      if (!VALID_FORMATTED_PHONE_NUMBER_DIGITS_PART_PATTERN.test(formattedDigits)) {
        formattedDigits = "";
      }
      return [formattedDigits, hasPlus];
    }
  }
});

// node_modules/libphonenumber-js/build/AsYouType.js
var require_AsYouType = __commonJS({
  "node_modules/libphonenumber-js/build/AsYouType.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _metadata = _interopRequireDefault(require_metadata());
    var _PhoneNumber = _interopRequireDefault(require_PhoneNumber());
    var _AsYouTypeState = _interopRequireDefault(require_AsYouTypeState());
    var _AsYouTypeFormatter = _interopRequireWildcard(require_AsYouTypeFormatter());
    var _AsYouTypeParser = _interopRequireWildcard(require_AsYouTypeParser());
    var _getCountryByCallingCode = _interopRequireDefault(require_getCountryByCallingCode());
    function _interopRequireWildcard(obj) {
      if (obj && obj.__esModule) {
        return obj;
      } else {
        var newObj = {};
        if (obj != null) {
          for (var key in obj) {
            if (Object.prototype.hasOwnProperty.call(obj, key)) {
              var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};
              if (desc.get || desc.set) {
                Object.defineProperty(newObj, key, desc);
              } else {
                newObj[key] = obj[key];
              }
            }
          }
        }
        newObj["default"] = obj;
        return newObj;
      }
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _typeof(obj) {
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    function _slicedToArray(arr, i) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
    }
    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }
    function _iterableToArrayLimit(arr, i) {
      var _arr = [];
      var _n = true;
      var _d = false;
      var _e = void 0;
      try {
        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);
          if (i && _arr.length === i)
            break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null)
            _i["return"]();
        } finally {
          if (_d)
            throw _e;
        }
      }
      return _arr;
    }
    function _arrayWithHoles(arr) {
      if (Array.isArray(arr))
        return arr;
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var USE_NON_GEOGRAPHIC_COUNTRY_CODE = false;
    var AsYouType = /* @__PURE__ */ function() {
      function AsYouType2(optionsOrDefaultCountry, metadata) {
        _classCallCheck(this, AsYouType2);
        this.metadata = new _metadata["default"](metadata);
        var _this$getCountryAndCa = this.getCountryAndCallingCode(optionsOrDefaultCountry), _this$getCountryAndCa2 = _slicedToArray(_this$getCountryAndCa, 2), defaultCountry = _this$getCountryAndCa2[0], defaultCallingCode = _this$getCountryAndCa2[1];
        this.defaultCountry = defaultCountry;
        this.defaultCallingCode = defaultCallingCode;
        this.reset();
      }
      _createClass(AsYouType2, [{
        key: "getCountryAndCallingCode",
        value: function getCountryAndCallingCode(optionsOrDefaultCountry) {
          var defaultCountry;
          var defaultCallingCode;
          if (optionsOrDefaultCountry) {
            if (_typeof(optionsOrDefaultCountry) === "object") {
              defaultCountry = optionsOrDefaultCountry.defaultCountry;
              defaultCallingCode = optionsOrDefaultCountry.defaultCallingCode;
            } else {
              defaultCountry = optionsOrDefaultCountry;
            }
          }
          if (defaultCountry && !this.metadata.hasCountry(defaultCountry)) {
            defaultCountry = void 0;
          }
          if (defaultCallingCode) {
            if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {
              if (this.metadata.isNonGeographicCallingCode(defaultCallingCode)) {
                defaultCountry = "001";
              }
            }
          }
          return [defaultCountry, defaultCallingCode];
        }
      }, {
        key: "input",
        value: function input(text) {
          var _this$parser$input = this.parser.input(text, this.state), digits = _this$parser$input.digits, justLeadingPlus = _this$parser$input.justLeadingPlus;
          if (justLeadingPlus) {
            this.formattedOutput = "+";
          } else if (digits) {
            this.determineTheCountryIfNeeded();
            if (this.state.nationalSignificantNumber) {
              this.formatter.narrowDownMatchingFormats(this.state);
            }
            var formattedNationalNumber;
            if (this.metadata.hasSelectedNumberingPlan()) {
              formattedNationalNumber = this.formatter.format(digits, this.state);
            }
            if (formattedNationalNumber === void 0) {
              if (this.parser.reExtractNationalSignificantNumber(this.state)) {
                this.determineTheCountryIfNeeded();
                var nationalDigits = this.state.getNationalDigits();
                if (nationalDigits) {
                  formattedNationalNumber = this.formatter.format(nationalDigits, this.state);
                }
              }
            }
            this.formattedOutput = formattedNationalNumber ? this.getFullNumber(formattedNationalNumber) : this.getNonFormattedNumber();
          }
          return this.formattedOutput;
        }
      }, {
        key: "reset",
        value: function reset() {
          var _this = this;
          this.state = new _AsYouTypeState["default"]({
            onCountryChange: function onCountryChange(country) {
              _this.country = country;
            },
            onCallingCodeChange: function onCallingCodeChange(country, callingCode) {
              _this.metadata.selectNumberingPlan(country, callingCode);
              _this.formatter.reset(_this.metadata.numberingPlan, _this.state);
              _this.parser.reset(_this.metadata.numberingPlan);
            }
          });
          this.formatter = new _AsYouTypeFormatter["default"]({
            state: this.state,
            metadata: this.metadata
          });
          this.parser = new _AsYouTypeParser["default"]({
            defaultCountry: this.defaultCountry,
            defaultCallingCode: this.defaultCallingCode,
            metadata: this.metadata,
            state: this.state,
            onNationalSignificantNumberChange: function onNationalSignificantNumberChange() {
              _this.determineTheCountryIfNeeded();
              _this.formatter.reset(_this.metadata.numberingPlan, _this.state);
            }
          });
          this.state.reset(this.defaultCountry, this.defaultCallingCode);
          this.formattedOutput = "";
          return this;
        }
      }, {
        key: "isInternational",
        value: function isInternational() {
          return this.state.international;
        }
      }, {
        key: "getCallingCode",
        value: function getCallingCode() {
          return this.state.callingCode;
        }
      }, {
        key: "getCountryCallingCode",
        value: function getCountryCallingCode() {
          return this.getCallingCode();
        }
      }, {
        key: "getCountry",
        value: function getCountry() {
          var _this$state = this.state, digits = _this$state.digits, country = _this$state.country;
          if (!digits) {
            return;
          }
          var countryCode = country;
          if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {
            if (countryCode === "001") {
              countryCode = void 0;
            }
          }
          return countryCode;
        }
      }, {
        key: "determineTheCountryIfNeeded",
        value: function determineTheCountryIfNeeded() {
          if (!this.state.country || this.isCountryCallingCodeAmbiguous()) {
            this.determineTheCountry();
          }
        }
      }, {
        key: "getFullNumber",
        value: function getFullNumber(formattedNationalNumber) {
          var _this2 = this;
          if (this.isInternational()) {
            var prefix = function prefix2(text) {
              return _this2.formatter.getInternationalPrefixBeforeCountryCallingCode(_this2.state, {
                spacing: text ? true : false
              }) + text;
            };
            var callingCode = this.state.callingCode;
            if (!callingCode) {
              return prefix("".concat(this.state.getDigitsWithoutInternationalPrefix()));
            }
            if (!formattedNationalNumber) {
              return prefix(callingCode);
            }
            return prefix("".concat(callingCode, " ").concat(formattedNationalNumber));
          }
          return formattedNationalNumber;
        }
      }, {
        key: "getNonFormattedNationalNumberWithPrefix",
        value: function getNonFormattedNationalNumberWithPrefix() {
          var _this$state2 = this.state, nationalSignificantNumber = _this$state2.nationalSignificantNumber, complexPrefixBeforeNationalSignificantNumber = _this$state2.complexPrefixBeforeNationalSignificantNumber, nationalPrefix = _this$state2.nationalPrefix;
          var number = nationalSignificantNumber;
          var prefix = complexPrefixBeforeNationalSignificantNumber || nationalPrefix;
          if (prefix) {
            number = prefix + number;
          }
          return number;
        }
      }, {
        key: "getNonFormattedNumber",
        value: function getNonFormattedNumber() {
          var nationalSignificantNumberMatchesInput = this.state.nationalSignificantNumberMatchesInput;
          return this.getFullNumber(nationalSignificantNumberMatchesInput ? this.getNonFormattedNationalNumberWithPrefix() : this.state.getNationalDigits());
        }
      }, {
        key: "getNonFormattedTemplate",
        value: function getNonFormattedTemplate() {
          var number = this.getNonFormattedNumber();
          if (number) {
            return number.replace(/[\+\d]/g, _AsYouTypeFormatter.DIGIT_PLACEHOLDER);
          }
        }
      }, {
        key: "isCountryCallingCodeAmbiguous",
        value: function isCountryCallingCodeAmbiguous() {
          var callingCode = this.state.callingCode;
          var countryCodes = this.metadata.getCountryCodesForCallingCode(callingCode);
          return countryCodes && countryCodes.length > 1;
        }
      }, {
        key: "determineTheCountry",
        value: function determineTheCountry() {
          this.state.setCountry((0, _getCountryByCallingCode["default"])(this.isInternational() ? this.state.callingCode : this.defaultCallingCode, this.state.nationalSignificantNumber, this.metadata));
        }
      }, {
        key: "getNumber",
        value: function getNumber() {
          var _this$state3 = this.state, nationalSignificantNumber = _this$state3.nationalSignificantNumber, carrierCode = _this$state3.carrierCode;
          if (this.isInternational()) {
            if (!this.state.callingCode) {
              return;
            }
          } else {
            if (!this.state.country && !this.defaultCallingCode) {
              return;
            }
          }
          if (!nationalSignificantNumber) {
            return;
          }
          var countryCode = this.getCountry();
          var callingCode = this.getCountryCallingCode() || this.defaultCallingCode;
          var phoneNumber = new _PhoneNumber["default"](countryCode || callingCode, nationalSignificantNumber, this.metadata.metadata);
          if (carrierCode) {
            phoneNumber.carrierCode = carrierCode;
          }
          return phoneNumber;
        }
      }, {
        key: "isPossible",
        value: function isPossible() {
          var phoneNumber = this.getNumber();
          if (!phoneNumber) {
            return false;
          }
          return phoneNumber.isPossible();
        }
      }, {
        key: "isValid",
        value: function isValid() {
          var phoneNumber = this.getNumber();
          if (!phoneNumber) {
            return false;
          }
          return phoneNumber.isValid();
        }
      }, {
        key: "getNationalNumber",
        value: function getNationalNumber() {
          return this.state.nationalSignificantNumber;
        }
      }, {
        key: "getChars",
        value: function getChars() {
          return (this.state.international ? "+" : "") + this.state.digits;
        }
      }, {
        key: "getTemplate",
        value: function getTemplate() {
          return this.formatter.getTemplate(this.state) || this.getNonFormattedTemplate() || "";
        }
      }]);
      return AsYouType2;
    }();
    exports["default"] = AsYouType;
  }
});

// node_modules/libphonenumber-js/build/getCountries.js
var require_getCountries = __commonJS({
  "node_modules/libphonenumber-js/build/getCountries.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = getCountries;
    var _metadata = _interopRequireDefault(require_metadata());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function getCountries(metadata) {
      return new _metadata["default"](metadata).getCountries();
    }
  }
});

// node_modules/libphonenumber-js/build/getExampleNumber.js
var require_getExampleNumber = __commonJS({
  "node_modules/libphonenumber-js/build/getExampleNumber.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = getExampleNumber;
    var _PhoneNumber = _interopRequireDefault(require_PhoneNumber());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function getExampleNumber(country, examples, metadata) {
      if (examples[country]) {
        return new _PhoneNumber["default"](country, examples[country], metadata);
      }
    }
  }
});

// node_modules/libphonenumber-js/build/formatIncompletePhoneNumber.js
var require_formatIncompletePhoneNumber = __commonJS({
  "node_modules/libphonenumber-js/build/formatIncompletePhoneNumber.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = formatIncompletePhoneNumber;
    var _AsYouType = _interopRequireDefault(require_AsYouType());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function formatIncompletePhoneNumber(value, country, metadata) {
      if (!metadata) {
        metadata = country;
        country = void 0;
      }
      return new _AsYouType["default"](country, metadata).input(value);
    }
  }
});

// node_modules/libphonenumber-js/core/index.commonjs.js
var require_index_commonjs = __commonJS({
  "node_modules/libphonenumber-js/core/index.commonjs.js"(exports, module2) {
    "use strict";
    var parsePhoneNumberFromString = require_parsePhoneNumberFromString2().default;
    exports = module2.exports = parsePhoneNumberFromString;
    exports["default"] = parsePhoneNumberFromString;
    exports.ParseError = require_ParseError().default;
    var parsePhoneNumberWithError = require_parsePhoneNumber2().default;
    exports.parsePhoneNumberWithError = parsePhoneNumberWithError;
    exports.parsePhoneNumber = parsePhoneNumberWithError;
    exports.parsePhoneNumberFromString = parsePhoneNumberFromString;
    exports.isValidPhoneNumber = require_isValidPhoneNumber().default;
    exports.isPossiblePhoneNumber = require_isPossiblePhoneNumber().default;
    exports.validatePhoneNumberLength = require_validatePhoneNumberLength().default;
    exports.findNumbers = require_findNumbers2().default;
    exports.searchNumbers = require_searchNumbers().default;
    exports.findPhoneNumbersInText = require_findPhoneNumbersInText().default;
    exports.searchPhoneNumbersInText = require_searchPhoneNumbersInText().default;
    exports.PhoneNumberMatcher = require_PhoneNumberMatcher().default;
    exports.AsYouType = require_AsYouType().default;
    exports.Metadata = require_metadata().default;
    exports.isSupportedCountry = require_metadata().isSupportedCountry;
    exports.getCountries = require_getCountries().default;
    exports.getCountryCallingCode = require_metadata().getCountryCallingCode;
    exports.getExtPrefix = require_metadata().getExtPrefix;
    exports.getExampleNumber = require_getExampleNumber().default;
    exports.formatIncompletePhoneNumber = require_formatIncompletePhoneNumber().default;
    exports.parseIncompletePhoneNumber = require_parseIncompletePhoneNumber().default;
    exports.parsePhoneNumberCharacter = require_parseIncompletePhoneNumber().parsePhoneNumberCharacter;
    exports.parseDigits = require_parseDigits().default;
    exports.DIGIT_PLACEHOLDER = require_AsYouTypeFormatter().DIGIT_PLACEHOLDER;
    exports.parseRFC3966 = require_RFC3966().parseRFC3966;
    exports.formatRFC3966 = require_RFC3966().formatRFC3966;
  }
});

// node_modules/libphonenumber-js/min/index.commonjs.js
var require_index_commonjs2 = __commonJS({
  "node_modules/libphonenumber-js/min/index.commonjs.js"(exports, module2) {
    "use strict";
    var metadata = require_metadata_min();
    var core = require_index_commonjs();
    function call(func, _arguments) {
      var args = Array.prototype.slice.call(_arguments);
      args.push(metadata);
      return func.apply(this, args);
    }
    function parsePhoneNumberFromString() {
      return call(core.parsePhoneNumberFromString, arguments);
    }
    exports = module2.exports = parsePhoneNumberFromString;
    exports["default"] = parsePhoneNumberFromString;
    exports.ParseError = core.ParseError;
    function parsePhoneNumberWithError() {
      return call(core.parsePhoneNumberWithError, arguments);
    }
    exports.parsePhoneNumber = parsePhoneNumberWithError;
    exports.parsePhoneNumberWithError = parsePhoneNumberWithError;
    exports.parsePhoneNumberFromString = parsePhoneNumberFromString;
    exports.isValidPhoneNumber = function isValidPhoneNumber() {
      return call(core.isValidPhoneNumber, arguments);
    };
    exports.isPossiblePhoneNumber = function isPossiblePhoneNumber() {
      return call(core.isPossiblePhoneNumber, arguments);
    };
    exports.validatePhoneNumberLength = function validatePhoneNumberLength() {
      return call(core.validatePhoneNumberLength, arguments);
    };
    exports.findNumbers = function findNumbers() {
      return call(core.findNumbers, arguments);
    };
    exports.searchNumbers = function searchNumbers() {
      return call(core.searchNumbers, arguments);
    };
    exports.findPhoneNumbersInText = function findPhoneNumbersInText() {
      return call(core.findPhoneNumbersInText, arguments);
    };
    exports.searchPhoneNumbersInText = function searchPhoneNumbersInText() {
      return call(core.searchPhoneNumbersInText, arguments);
    };
    exports.PhoneNumberMatcher = function PhoneNumberMatcher(text, options) {
      return core.PhoneNumberMatcher.call(this, text, options, metadata);
    };
    exports.PhoneNumberMatcher.prototype = Object.create(core.PhoneNumberMatcher.prototype, {});
    exports.PhoneNumberMatcher.prototype.constructor = exports.PhoneNumberMatcher;
    exports.AsYouType = function AsYouType(country) {
      return core.AsYouType.call(this, country, metadata);
    };
    exports.AsYouType.prototype = Object.create(core.AsYouType.prototype, {});
    exports.AsYouType.prototype.constructor = exports.AsYouType;
    exports.isSupportedCountry = function isSupportedCountry(country) {
      return call(core.isSupportedCountry, arguments);
    };
    exports.getCountries = function getCountries() {
      return call(core.getCountries, arguments);
    };
    exports.getCountryCallingCode = function getCountryCallingCode() {
      return call(core.getCountryCallingCode, arguments);
    };
    exports.getExtPrefix = function getExtPrefix(country) {
      return call(core.getExtPrefix, arguments);
    };
    exports.getExampleNumber = function getExampleNumber() {
      return call(core.getExampleNumber, arguments);
    };
    exports.Metadata = function Metadata() {
      return core.Metadata.call(this, metadata);
    };
    exports.Metadata.prototype = Object.create(core.Metadata.prototype, {});
    exports.Metadata.prototype.constructor = exports.Metadata;
    exports.formatIncompletePhoneNumber = function formatIncompletePhoneNumber() {
      return call(core.formatIncompletePhoneNumber, arguments);
    };
    exports.parseIncompletePhoneNumber = core.parseIncompletePhoneNumber;
    exports.parsePhoneNumberCharacter = core.parsePhoneNumberCharacter;
    exports.parseDigits = core.parseDigits;
    exports.DIGIT_PLACEHOLDER = core.DIGIT_PLACEHOLDER;
    exports.parseRFC3966 = core.parseRFC3966;
    exports.formatRFC3966 = core.formatRFC3966;
  }
});

// node_modules/libphonenumber-js/build/parse.js
var require_parse2 = __commonJS({
  "node_modules/libphonenumber-js/build/parse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = parseNumber;
    var _parse_ = _interopRequireDefault(require_parse());
    var _parsePhoneNumber = require_parsePhoneNumber2();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function parseNumber() {
      var _normalizeArguments = (0, _parsePhoneNumber.normalizeArguments)(arguments), text = _normalizeArguments.text, options = _normalizeArguments.options, metadata = _normalizeArguments.metadata;
      return (0, _parse_["default"])(text, options, metadata);
    }
  }
});

// node_modules/libphonenumber-js/build/format.js
var require_format2 = __commonJS({
  "node_modules/libphonenumber-js/build/format.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = formatNumber2;
    var _format_ = _interopRequireDefault(require_format());
    var _parse_ = _interopRequireDefault(require_parse());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _typeof(obj) {
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    function _slicedToArray(arr, i) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
    }
    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }
    function _iterableToArrayLimit(arr, i) {
      var _arr = [];
      var _n = true;
      var _d = false;
      var _e = void 0;
      try {
        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);
          if (i && _arr.length === i)
            break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null)
            _i["return"]();
        } finally {
          if (_d)
            throw _e;
        }
      }
      return _arr;
    }
    function _arrayWithHoles(arr) {
      if (Array.isArray(arr))
        return arr;
    }
    function formatNumber2() {
      var _normalizeArguments = normalizeArguments(arguments), input = _normalizeArguments.input, format = _normalizeArguments.format, options = _normalizeArguments.options, metadata = _normalizeArguments.metadata;
      return (0, _format_["default"])(input, format, options, metadata);
    }
    function normalizeArguments(args) {
      var _Array$prototype$slic = Array.prototype.slice.call(args), _Array$prototype$slic2 = _slicedToArray(_Array$prototype$slic, 5), arg_1 = _Array$prototype$slic2[0], arg_2 = _Array$prototype$slic2[1], arg_3 = _Array$prototype$slic2[2], arg_4 = _Array$prototype$slic2[3], arg_5 = _Array$prototype$slic2[4];
      var input;
      var format;
      var options;
      var metadata;
      if (typeof arg_1 === "string") {
        if (typeof arg_3 === "string") {
          format = arg_3;
          if (arg_5) {
            options = arg_4;
            metadata = arg_5;
          } else {
            metadata = arg_4;
          }
          input = (0, _parse_["default"])(arg_1, {
            defaultCountry: arg_2,
            extended: true
          }, metadata);
        } else {
          if (typeof arg_2 !== "string") {
            throw new Error("`format` argument not passed to `formatNumber(number, format)`");
          }
          format = arg_2;
          if (arg_4) {
            options = arg_3;
            metadata = arg_4;
          } else {
            metadata = arg_3;
          }
          input = (0, _parse_["default"])(arg_1, {
            extended: true
          }, metadata);
        }
      } else if (is_object(arg_1)) {
        input = arg_1;
        format = arg_2;
        if (arg_4) {
          options = arg_3;
          metadata = arg_4;
        } else {
          metadata = arg_3;
        }
      } else
        throw new TypeError("A phone number must either be a string or an object of shape { phone, [country] }.");
      if (format === "International") {
        format = "INTERNATIONAL";
      } else if (format === "National") {
        format = "NATIONAL";
      }
      return {
        input,
        format,
        options,
        metadata
      };
    }
    var is_object = function is_object2(_) {
      return _typeof(_) === "object";
    };
  }
});

// node_modules/libphonenumber-js/build/getNumberType.js
var require_getNumberType2 = __commonJS({
  "node_modules/libphonenumber-js/build/getNumberType.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = getNumberType;
    exports.normalizeArguments = normalizeArguments;
    var _isViablePhoneNumber = _interopRequireDefault(require_isViablePhoneNumber());
    var _getNumberType2 = _interopRequireDefault(require_getNumberType());
    var _parse_ = _interopRequireDefault(require_parse());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _typeof(obj) {
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    function _slicedToArray(arr, i) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
    }
    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }
    function _iterableToArrayLimit(arr, i) {
      var _arr = [];
      var _n = true;
      var _d = false;
      var _e = void 0;
      try {
        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);
          if (i && _arr.length === i)
            break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null)
            _i["return"]();
        } finally {
          if (_d)
            throw _e;
        }
      }
      return _arr;
    }
    function _arrayWithHoles(arr) {
      if (Array.isArray(arr))
        return arr;
    }
    function getNumberType() {
      var _normalizeArguments = normalizeArguments(arguments), input = _normalizeArguments.input, options = _normalizeArguments.options, metadata = _normalizeArguments.metadata;
      return (0, _getNumberType2["default"])(input, options, metadata);
    }
    function normalizeArguments(args) {
      var _Array$prototype$slic = Array.prototype.slice.call(args), _Array$prototype$slic2 = _slicedToArray(_Array$prototype$slic, 4), arg_1 = _Array$prototype$slic2[0], arg_2 = _Array$prototype$slic2[1], arg_3 = _Array$prototype$slic2[2], arg_4 = _Array$prototype$slic2[3];
      var input;
      var options = {};
      var metadata;
      if (typeof arg_1 === "string") {
        if (_typeof(arg_2) !== "object") {
          if (arg_4) {
            options = arg_3;
            metadata = arg_4;
          } else {
            metadata = arg_3;
          }
          if ((0, _isViablePhoneNumber["default"])(arg_1)) {
            input = (0, _parse_["default"])(arg_1, {
              defaultCountry: arg_2
            }, metadata);
          } else {
            input = {};
          }
        } else {
          if (arg_3) {
            options = arg_2;
            metadata = arg_3;
          } else {
            metadata = arg_2;
          }
          if ((0, _isViablePhoneNumber["default"])(arg_1)) {
            input = (0, _parse_["default"])(arg_1, void 0, metadata);
          } else {
            input = {};
          }
        }
      } else if (is_object(arg_1)) {
        input = arg_1;
        if (arg_3) {
          options = arg_2;
          metadata = arg_3;
        } else {
          metadata = arg_2;
        }
      } else
        throw new TypeError("A phone number must either be a string or an object of shape { phone, [country] }.");
      return {
        input,
        options,
        metadata
      };
    }
    var is_object = function is_object2(_) {
      return _typeof(_) === "object";
    };
  }
});

// node_modules/libphonenumber-js/build/isPossibleNumber.js
var require_isPossibleNumber2 = __commonJS({
  "node_modules/libphonenumber-js/build/isPossibleNumber.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = isPossibleNumber;
    var _getNumberType = require_getNumberType2();
    var _isPossibleNumber_ = _interopRequireDefault(require_isPossibleNumber());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function isPossibleNumber() {
      var _normalizeArguments = (0, _getNumberType.normalizeArguments)(arguments), input = _normalizeArguments.input, options = _normalizeArguments.options, metadata = _normalizeArguments.metadata;
      return (0, _isPossibleNumber_["default"])(input, options, metadata);
    }
  }
});

// node_modules/libphonenumber-js/build/validate.js
var require_validate2 = __commonJS({
  "node_modules/libphonenumber-js/build/validate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = isValidNumber;
    var _validate_ = _interopRequireDefault(require_validate());
    var _getNumberType = require_getNumberType2();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function isValidNumber() {
      var _normalizeArguments = (0, _getNumberType.normalizeArguments)(arguments), input = _normalizeArguments.input, options = _normalizeArguments.options, metadata = _normalizeArguments.metadata;
      return (0, _validate_["default"])(input, options, metadata);
    }
  }
});

// node_modules/libphonenumber-js/build/isValidNumberForRegion.js
var require_isValidNumberForRegion2 = __commonJS({
  "node_modules/libphonenumber-js/build/isValidNumberForRegion.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = isValidNumberForRegion;
    var _isViablePhoneNumber = _interopRequireDefault(require_isViablePhoneNumber());
    var _parse_ = _interopRequireDefault(require_parse());
    var _isValidNumberForRegion_ = _interopRequireDefault(require_isValidNumberForRegion());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function isValidNumberForRegion(number, country, metadata) {
      if (typeof number !== "string") {
        throw new TypeError("number must be a string");
      }
      if (typeof country !== "string") {
        throw new TypeError("country must be a string");
      }
      var input;
      if ((0, _isViablePhoneNumber["default"])(number)) {
        input = (0, _parse_["default"])(number, {
          defaultCountry: country
        }, metadata);
      } else {
        input = {};
      }
      return (0, _isValidNumberForRegion_["default"])(input, country, void 0, metadata);
    }
  }
});

// node_modules/libphonenumber-js/build/findPhoneNumbers_.js
var require_findPhoneNumbers = __commonJS({
  "node_modules/libphonenumber-js/build/findPhoneNumbers_.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = findPhoneNumbers;
    exports.searchPhoneNumbers = searchPhoneNumbers;
    exports.PhoneNumberSearch = exports.EXTN_PATTERNS_FOR_PARSING = void 0;
    var _constants = require_constants();
    var _parse_ = _interopRequireDefault(require_parse());
    var _isViablePhoneNumber = require_isViablePhoneNumber();
    var _createExtensionPattern = _interopRequireDefault(require_createExtensionPattern());
    var _parsePreCandidate = _interopRequireDefault(require_parsePreCandidate());
    var _isValidPreCandidate = _interopRequireDefault(require_isValidPreCandidate());
    var _isValidCandidate = _interopRequireDefault(require_isValidCandidate());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var EXTN_PATTERNS_FOR_PARSING = (0, _createExtensionPattern["default"])("parsing");
    exports.EXTN_PATTERNS_FOR_PARSING = EXTN_PATTERNS_FOR_PARSING;
    var WHITESPACE_IN_THE_BEGINNING_PATTERN = new RegExp("^[" + _constants.WHITESPACE + "]+");
    var PUNCTUATION_IN_THE_END_PATTERN = new RegExp("[" + _constants.VALID_PUNCTUATION + "]+$");
    function findPhoneNumbers(text, options, metadata) {
      if (options === void 0) {
        options = {};
      }
      var search = new PhoneNumberSearch(text, options, metadata);
      var phones = [];
      while (search.hasNext()) {
        phones.push(search.next());
      }
      return phones;
    }
    function searchPhoneNumbers(text, options, metadata) {
      if (options === void 0) {
        options = {};
      }
      var search = new PhoneNumberSearch(text, options, metadata);
      return _defineProperty({}, Symbol.iterator, function() {
        return {
          next: function next() {
            if (search.hasNext()) {
              return {
                done: false,
                value: search.next()
              };
            }
            return {
              done: true
            };
          }
        };
      });
    }
    var PhoneNumberSearch = /* @__PURE__ */ function() {
      function PhoneNumberSearch2(text, options, metadata) {
        _classCallCheck(this, PhoneNumberSearch2);
        _defineProperty(this, "state", "NOT_READY");
        this.text = text;
        this.options = options || {};
        this.metadata = metadata;
        this.regexp = new RegExp(_isViablePhoneNumber.VALID_PHONE_NUMBER_WITH_EXTENSION, "ig");
      }
      _createClass(PhoneNumberSearch2, [{
        key: "find",
        value: function find() {
          var matches = this.regexp.exec(this.text);
          if (!matches) {
            return;
          }
          var number = matches[0];
          var startsAt = matches.index;
          number = number.replace(WHITESPACE_IN_THE_BEGINNING_PATTERN, "");
          startsAt += matches[0].length - number.length;
          number = number.replace(PUNCTUATION_IN_THE_END_PATTERN, "");
          number = (0, _parsePreCandidate["default"])(number);
          var result = this.parseCandidate(number, startsAt);
          if (result) {
            return result;
          }
          return this.find();
        }
      }, {
        key: "parseCandidate",
        value: function parseCandidate(number, startsAt) {
          if (!(0, _isValidPreCandidate["default"])(number, startsAt, this.text)) {
            return;
          }
          if (!(0, _isValidCandidate["default"])(number, startsAt, this.text, this.options.extended ? "POSSIBLE" : "VALID")) {
            return;
          }
          var result = (0, _parse_["default"])(number, this.options, this.metadata);
          if (!result.phone) {
            return;
          }
          result.startsAt = startsAt;
          result.endsAt = startsAt + number.length;
          return result;
        }
      }, {
        key: "hasNext",
        value: function hasNext() {
          if (this.state === "NOT_READY") {
            this.last_match = this.find();
            if (this.last_match) {
              this.state = "READY";
            } else {
              this.state = "DONE";
            }
          }
          return this.state === "READY";
        }
      }, {
        key: "next",
        value: function next() {
          if (!this.hasNext()) {
            throw new Error("No next element");
          }
          var result = this.last_match;
          this.last_match = null;
          this.state = "NOT_READY";
          return result;
        }
      }]);
      return PhoneNumberSearch2;
    }();
    exports.PhoneNumberSearch = PhoneNumberSearch;
  }
});

// node_modules/libphonenumber-js/build/findPhoneNumbers.js
var require_findPhoneNumbers2 = __commonJS({
  "node_modules/libphonenumber-js/build/findPhoneNumbers.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = findPhoneNumbers;
    exports.searchPhoneNumbers = searchPhoneNumbers;
    var _findPhoneNumbers_ = _interopRequireWildcard(require_findPhoneNumbers());
    var _parsePhoneNumber = require_parsePhoneNumber2();
    function _interopRequireWildcard(obj) {
      if (obj && obj.__esModule) {
        return obj;
      } else {
        var newObj = {};
        if (obj != null) {
          for (var key in obj) {
            if (Object.prototype.hasOwnProperty.call(obj, key)) {
              var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};
              if (desc.get || desc.set) {
                Object.defineProperty(newObj, key, desc);
              } else {
                newObj[key] = obj[key];
              }
            }
          }
        }
        newObj["default"] = obj;
        return newObj;
      }
    }
    function findPhoneNumbers() {
      var _normalizeArguments = (0, _parsePhoneNumber.normalizeArguments)(arguments), text = _normalizeArguments.text, options = _normalizeArguments.options, metadata = _normalizeArguments.metadata;
      return (0, _findPhoneNumbers_["default"])(text, options, metadata);
    }
    function searchPhoneNumbers() {
      var _normalizeArguments2 = (0, _parsePhoneNumber.normalizeArguments)(arguments), text = _normalizeArguments2.text, options = _normalizeArguments2.options, metadata = _normalizeArguments2.metadata;
      return (0, _findPhoneNumbers_.searchPhoneNumbers)(text, options, metadata);
    }
  }
});

// node_modules/libphonenumber-js/index.common.js
var require_index_common = __commonJS({
  "node_modules/libphonenumber-js/index.common.js"(exports, module2) {
    "use strict";
    var min = require_index_commonjs2();
    var metadata = require_metadata_min();
    function withMetadata(func, _arguments) {
      var args = Array.prototype.slice.call(_arguments);
      args.push(metadata);
      return func.apply(this, args);
    }
    exports = module2.exports = min.parsePhoneNumberFromString;
    exports["default"] = min.parsePhoneNumberFromString;
    exports.parsePhoneNumberFromString = min.parsePhoneNumberFromString;
    exports.ParseError = min.ParseError;
    exports.parsePhoneNumber = min.parsePhoneNumberWithError;
    exports.parsePhoneNumberWithError = min.parsePhoneNumberWithError;
    exports.isValidPhoneNumber = min.isValidPhoneNumber;
    exports.isPossiblePhoneNumber = min.isPossiblePhoneNumber;
    exports.validatePhoneNumberLength = min.validatePhoneNumberLength;
    var parse_ = require_parse2().default;
    exports.parse = function parse() {
      return withMetadata(parse_, arguments);
    };
    exports.parseNumber = exports.parse;
    var format_ = require_format2().default;
    exports.format = function format() {
      return withMetadata(format_, arguments);
    };
    exports.formatNumber = exports.format;
    var getNumberType_ = require_getNumberType2().default;
    exports.getNumberType = function getNumberType() {
      return withMetadata(getNumberType_, arguments);
    };
    var isPossibleNumber_ = require_isPossibleNumber2().default;
    exports.isPossibleNumber = function isPossibleNumber() {
      return withMetadata(isPossibleNumber_, arguments);
    };
    var isValidNumber_ = require_validate2().default;
    exports.isValidNumber = function isValidNumber() {
      return withMetadata(isValidNumber_, arguments);
    };
    var isValidNumberForRegion_ = require_isValidNumberForRegion2().default;
    exports.isValidNumberForRegion = function isValidNumberForRegion() {
      return withMetadata(isValidNumberForRegion_, arguments);
    };
    exports.getExampleNumber = min.getExampleNumber;
    exports.Metadata = min.Metadata;
    var findPhoneNumbers_ = require_findPhoneNumbers2().default;
    exports.findPhoneNumbers = function findPhoneNumbers() {
      return withMetadata(findPhoneNumbers_, arguments);
    };
    var searchPhoneNumbers_ = require_findPhoneNumbers2().searchPhoneNumbers;
    exports.searchPhoneNumbers = function searchPhoneNumbers() {
      return withMetadata(searchPhoneNumbers_, arguments);
    };
    var PhoneNumberSearch_ = require_findPhoneNumbers().PhoneNumberSearch;
    exports.PhoneNumberSearch = function PhoneNumberSearch(text, options) {
      return PhoneNumberSearch_.call(this, text, options, metadata);
    };
    exports.PhoneNumberSearch.prototype = Object.create(PhoneNumberSearch_.prototype, {});
    exports.PhoneNumberSearch.prototype.constructor = exports.PhoneNumberSearch;
    exports.findNumbers = min.findNumbers;
    exports.searchNumbers = min.searchNumbers;
    exports.findPhoneNumbersInText = min.findPhoneNumbersInText;
    exports.searchPhoneNumbersInText = min.searchPhoneNumbersInText;
    exports.PhoneNumberMatcher = min.PhoneNumberMatcher;
    exports.AsYouType = min.AsYouType;
    exports.getCountries = min.getCountries;
    exports.getCountryCallingCode = min.getCountryCallingCode;
    exports.isSupportedCountry = min.isSupportedCountry;
    exports.getExtPrefix = min.getExtPrefix;
    exports.parseRFC3966 = min.parseRFC3966;
    exports.formatRFC3966 = min.formatRFC3966;
    exports.DIGITS = require_parseDigits().DIGITS;
    exports.DIGIT_PLACEHOLDER = min.DIGIT_PLACEHOLDER;
    exports.getPhoneCode = min.getCountryCallingCode;
    exports.formatIncompletePhoneNumber = min.formatIncompletePhoneNumber;
    exports.parseIncompletePhoneNumber = min.parseIncompletePhoneNumber;
    exports.parsePhoneNumberCharacter = min.parsePhoneNumberCharacter;
    exports.parseDigits = min.parseDigits;
  }
});

// node_modules/class-validator/cjs/decorator/string/IsPhoneNumber.js
var require_IsPhoneNumber = __commonJS({
  "node_modules/class-validator/cjs/decorator/string/IsPhoneNumber.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IsPhoneNumber = exports.isPhoneNumber = exports.IS_PHONE_NUMBER = void 0;
    var ValidateBy_1 = require_ValidateBy();
    var libphonenumber_js_1 = require_index_common();
    exports.IS_PHONE_NUMBER = "isPhoneNumber";
    function isPhoneNumber(value, region) {
      try {
        const phoneNum = libphonenumber_js_1.parsePhoneNumberFromString(value, region);
        const result = phoneNum === null || phoneNum === void 0 ? void 0 : phoneNum.isValid();
        return !!result;
      } catch (error) {
        return false;
      }
    }
    exports.isPhoneNumber = isPhoneNumber;
    function IsPhoneNumber(region, validationOptions) {
      return ValidateBy_1.ValidateBy({
        name: exports.IS_PHONE_NUMBER,
        constraints: [region],
        validator: {
          validate: (value, args) => isPhoneNumber(value, args.constraints[0]),
          defaultMessage: ValidateBy_1.buildMessage((eachPrefix) => eachPrefix + "$property must be a valid phone number", validationOptions)
        }
      }, validationOptions);
    }
    exports.IsPhoneNumber = IsPhoneNumber;
  }
});

// node_modules/class-validator/cjs/decorator/string/IsMilitaryTime.js
var require_IsMilitaryTime = __commonJS({
  "node_modules/class-validator/cjs/decorator/string/IsMilitaryTime.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IsMilitaryTime = exports.isMilitaryTime = exports.IS_MILITARY_TIME = void 0;
    var ValidateBy_1 = require_ValidateBy();
    var matches_1 = __importDefault(require_matches());
    exports.IS_MILITARY_TIME = "isMilitaryTime";
    function isMilitaryTime(value) {
      const militaryTimeRegex = /^([01]\d|2[0-3]):?([0-5]\d)$/;
      return typeof value === "string" && matches_1.default(value, militaryTimeRegex);
    }
    exports.isMilitaryTime = isMilitaryTime;
    function IsMilitaryTime(validationOptions) {
      return ValidateBy_1.ValidateBy({
        name: exports.IS_MILITARY_TIME,
        validator: {
          validate: (value, args) => isMilitaryTime(value),
          defaultMessage: ValidateBy_1.buildMessage((eachPrefix) => eachPrefix + "$property must be a valid representation of military time in the format HH:MM", validationOptions)
        }
      }, validationOptions);
    }
    exports.IsMilitaryTime = IsMilitaryTime;
  }
});

// node_modules/validator/lib/isHash.js
var require_isHash = __commonJS({
  "node_modules/validator/lib/isHash.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isHash;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var lengths = {
      md5: 32,
      md4: 32,
      sha1: 40,
      sha256: 64,
      sha384: 96,
      sha512: 128,
      ripemd128: 32,
      ripemd160: 40,
      tiger128: 32,
      tiger160: 40,
      tiger192: 48,
      crc32: 8,
      crc32b: 8
    };
    function isHash(str, algorithm) {
      (0, _assertString.default)(str);
      var hash = new RegExp("^[a-fA-F0-9]{".concat(lengths[algorithm], "}$"));
      return hash.test(str);
    }
    module2.exports = exports.default;
    module2.exports.default = exports.default;
  }
});

// node_modules/class-validator/cjs/decorator/string/IsHash.js
var require_IsHash = __commonJS({
  "node_modules/class-validator/cjs/decorator/string/IsHash.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IsHash = exports.isHash = exports.IS_HASH = void 0;
    var ValidateBy_1 = require_ValidateBy();
    var isHash_1 = __importDefault(require_isHash());
    exports.IS_HASH = "isHash";
    function isHash(value, algorithm) {
      return typeof value === "string" && isHash_1.default(value, algorithm);
    }
    exports.isHash = isHash;
    function IsHash(algorithm, validationOptions) {
      return ValidateBy_1.ValidateBy({
        name: exports.IS_HASH,
        constraints: [algorithm],
        validator: {
          validate: (value, args) => isHash(value, args.constraints[0]),
          defaultMessage: ValidateBy_1.buildMessage((eachPrefix) => eachPrefix + "$property must be a hash of type $constraint1", validationOptions)
        }
      }, validationOptions);
    }
    exports.IsHash = IsHash;
  }
});

// node_modules/validator/lib/isISSN.js
var require_isISSN = __commonJS({
  "node_modules/validator/lib/isISSN.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isISSN;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var issn = "^\\d{4}-?\\d{3}[\\dX]$";
    function isISSN(str) {
      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      (0, _assertString.default)(str);
      var testIssn = issn;
      testIssn = options.require_hyphen ? testIssn.replace("?", "") : testIssn;
      testIssn = options.case_sensitive ? new RegExp(testIssn) : new RegExp(testIssn, "i");
      if (!testIssn.test(str)) {
        return false;
      }
      var digits = str.replace("-", "").toUpperCase();
      var checksum = 0;
      for (var i = 0; i < digits.length; i++) {
        var digit = digits[i];
        checksum += (digit === "X" ? 10 : +digit) * (8 - i);
      }
      return checksum % 11 === 0;
    }
    module2.exports = exports.default;
    module2.exports.default = exports.default;
  }
});

// node_modules/class-validator/cjs/decorator/string/IsISSN.js
var require_IsISSN = __commonJS({
  "node_modules/class-validator/cjs/decorator/string/IsISSN.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IsISSN = exports.isISSN = exports.IS_ISSN = void 0;
    var ValidateBy_1 = require_ValidateBy();
    var isISSN_1 = __importDefault(require_isISSN());
    exports.IS_ISSN = "isISSN";
    function isISSN(value, options) {
      return typeof value === "string" && isISSN_1.default(value, options);
    }
    exports.isISSN = isISSN;
    function IsISSN(options, validationOptions) {
      return ValidateBy_1.ValidateBy({
        name: exports.IS_ISSN,
        constraints: [options],
        validator: {
          validate: (value, args) => isISSN(value, args.constraints[0]),
          defaultMessage: ValidateBy_1.buildMessage((eachPrefix) => eachPrefix + "$property must be a ISSN", validationOptions)
        }
      }, validationOptions);
    }
    exports.IsISSN = IsISSN;
  }
});

// node_modules/class-validator/cjs/decorator/string/IsDateString.js
var require_IsDateString = __commonJS({
  "node_modules/class-validator/cjs/decorator/string/IsDateString.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IsDateString = exports.isDateString = exports.IS_DATE_STRING = void 0;
    var ValidateBy_1 = require_ValidateBy();
    var IsISO8601_1 = require_IsISO8601();
    exports.IS_DATE_STRING = "isDateString";
    function isDateString(value, options) {
      return IsISO8601_1.isISO8601(value, options);
    }
    exports.isDateString = isDateString;
    function IsDateString(options, validationOptions) {
      return ValidateBy_1.ValidateBy({
        name: exports.IS_DATE_STRING,
        constraints: [options],
        validator: {
          validate: (value, args) => isDateString(value),
          defaultMessage: ValidateBy_1.buildMessage((eachPrefix) => eachPrefix + "$property must be a valid ISO 8601 date string", validationOptions)
        }
      }, validationOptions);
    }
    exports.IsDateString = IsDateString;
  }
});

// node_modules/validator/lib/isBoolean.js
var require_isBoolean = __commonJS({
  "node_modules/validator/lib/isBoolean.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isBoolean;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var defaultOptions = {
      loose: false
    };
    var strictBooleans = ["true", "false", "1", "0"];
    var looseBooleans = [].concat(strictBooleans, ["yes", "no"]);
    function isBoolean(str) {
      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : defaultOptions;
      (0, _assertString.default)(str);
      if (options.loose) {
        return looseBooleans.includes(str.toLowerCase());
      }
      return strictBooleans.includes(str);
    }
    module2.exports = exports.default;
    module2.exports.default = exports.default;
  }
});

// node_modules/class-validator/cjs/decorator/string/IsBooleanString.js
var require_IsBooleanString = __commonJS({
  "node_modules/class-validator/cjs/decorator/string/IsBooleanString.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IsBooleanString = exports.isBooleanString = exports.IS_BOOLEAN_STRING = void 0;
    var ValidateBy_1 = require_ValidateBy();
    var isBoolean_1 = __importDefault(require_isBoolean());
    exports.IS_BOOLEAN_STRING = "isBooleanString";
    function isBooleanString(value) {
      return typeof value === "string" && isBoolean_1.default(value);
    }
    exports.isBooleanString = isBooleanString;
    function IsBooleanString(validationOptions) {
      return ValidateBy_1.ValidateBy({
        name: exports.IS_BOOLEAN_STRING,
        validator: {
          validate: (value, args) => isBooleanString(value),
          defaultMessage: ValidateBy_1.buildMessage((eachPrefix) => eachPrefix + "$property must be a boolean string", validationOptions)
        }
      }, validationOptions);
    }
    exports.IsBooleanString = IsBooleanString;
  }
});

// node_modules/validator/lib/isNumeric.js
var require_isNumeric = __commonJS({
  "node_modules/validator/lib/isNumeric.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isNumeric;
    var _assertString = _interopRequireDefault(require_assertString());
    var _alpha = require_alpha();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var numericNoSymbols = /^[0-9]+$/;
    function isNumeric(str, options) {
      (0, _assertString.default)(str);
      if (options && options.no_symbols) {
        return numericNoSymbols.test(str);
      }
      return new RegExp("^[+-]?([0-9]*[".concat((options || {}).locale ? _alpha.decimal[options.locale] : ".", "])?[0-9]+$")).test(str);
    }
    module2.exports = exports.default;
    module2.exports.default = exports.default;
  }
});

// node_modules/class-validator/cjs/decorator/string/IsNumberString.js
var require_IsNumberString = __commonJS({
  "node_modules/class-validator/cjs/decorator/string/IsNumberString.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IsNumberString = exports.isNumberString = exports.IS_NUMBER_STRING = void 0;
    var ValidateBy_1 = require_ValidateBy();
    var isNumeric_1 = __importDefault(require_isNumeric());
    exports.IS_NUMBER_STRING = "isNumberString";
    function isNumberString(value, options) {
      return typeof value === "string" && isNumeric_1.default(value, options);
    }
    exports.isNumberString = isNumberString;
    function IsNumberString(options, validationOptions) {
      return ValidateBy_1.ValidateBy({
        name: exports.IS_NUMBER_STRING,
        constraints: [options],
        validator: {
          validate: (value, args) => isNumberString(value, args.constraints[0]),
          defaultMessage: ValidateBy_1.buildMessage((eachPrefix) => eachPrefix + "$property must be a number string", validationOptions)
        }
      }, validationOptions);
    }
    exports.IsNumberString = IsNumberString;
  }
});

// node_modules/validator/lib/isBase32.js
var require_isBase32 = __commonJS({
  "node_modules/validator/lib/isBase32.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isBase32;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var base32 = /^[A-Z2-7]+=*$/;
    function isBase32(str) {
      (0, _assertString.default)(str);
      var len = str.length;
      if (len % 8 === 0 && base32.test(str)) {
        return true;
      }
      return false;
    }
    module2.exports = exports.default;
    module2.exports.default = exports.default;
  }
});

// node_modules/class-validator/cjs/decorator/string/IsBase32.js
var require_IsBase32 = __commonJS({
  "node_modules/class-validator/cjs/decorator/string/IsBase32.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IsBase32 = exports.isBase32 = exports.IS_BASE32 = void 0;
    var ValidateBy_1 = require_ValidateBy();
    var isBase32_1 = __importDefault(require_isBase32());
    exports.IS_BASE32 = "isBase32";
    function isBase32(value) {
      return typeof value === "string" && isBase32_1.default(value);
    }
    exports.isBase32 = isBase32;
    function IsBase32(validationOptions) {
      return ValidateBy_1.ValidateBy({
        name: exports.IS_BASE32,
        validator: {
          validate: (value, args) => isBase32(value),
          defaultMessage: ValidateBy_1.buildMessage((eachPrefix) => eachPrefix + "$property must be base32 encoded", validationOptions)
        }
      }, validationOptions);
    }
    exports.IsBase32 = IsBase32;
  }
});

// node_modules/validator/lib/isBIC.js
var require_isBIC = __commonJS({
  "node_modules/validator/lib/isBIC.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isBIC;
    var _assertString = _interopRequireDefault(require_assertString());
    var _isISO31661Alpha = require_isISO31661Alpha2();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var isBICReg = /^[A-Za-z]{6}[A-Za-z0-9]{2}([A-Za-z0-9]{3})?$/;
    function isBIC(str) {
      (0, _assertString.default)(str);
      if (!_isISO31661Alpha.CountryCodes.has(str.slice(4, 6).toUpperCase())) {
        return false;
      }
      return isBICReg.test(str);
    }
    module2.exports = exports.default;
    module2.exports.default = exports.default;
  }
});

// node_modules/class-validator/cjs/decorator/string/IsBIC.js
var require_IsBIC = __commonJS({
  "node_modules/class-validator/cjs/decorator/string/IsBIC.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IsBIC = exports.isBIC = exports.IS_BIC = void 0;
    var ValidateBy_1 = require_ValidateBy();
    var isBIC_1 = __importDefault(require_isBIC());
    exports.IS_BIC = "isBIC";
    function isBIC(value) {
      return typeof value === "string" && isBIC_1.default(value);
    }
    exports.isBIC = isBIC;
    function IsBIC(validationOptions) {
      return ValidateBy_1.ValidateBy({
        name: exports.IS_BIC,
        validator: {
          validate: (value, args) => isBIC(value),
          defaultMessage: ValidateBy_1.buildMessage((eachPrefix) => eachPrefix + "$property must be a BIC or SWIFT code", validationOptions)
        }
      }, validationOptions);
    }
    exports.IsBIC = IsBIC;
  }
});

// node_modules/validator/lib/isBtcAddress.js
var require_isBtcAddress = __commonJS({
  "node_modules/validator/lib/isBtcAddress.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isBtcAddress;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var bech32 = /^(bc1)[a-z0-9]{25,39}$/;
    var base58 = /^(1|3)[A-HJ-NP-Za-km-z1-9]{25,39}$/;
    function isBtcAddress(str) {
      (0, _assertString.default)(str);
      if (str.startsWith("bc1")) {
        return bech32.test(str);
      }
      return base58.test(str);
    }
    module2.exports = exports.default;
    module2.exports.default = exports.default;
  }
});

// node_modules/class-validator/cjs/decorator/string/IsBtcAddress.js
var require_IsBtcAddress = __commonJS({
  "node_modules/class-validator/cjs/decorator/string/IsBtcAddress.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IsBtcAddress = exports.isBtcAddress = exports.IS_BTC_ADDRESS = void 0;
    var ValidateBy_1 = require_ValidateBy();
    var isBtcAddress_1 = __importDefault(require_isBtcAddress());
    exports.IS_BTC_ADDRESS = "isBtcAddress";
    function isBtcAddress(value) {
      return typeof value === "string" && isBtcAddress_1.default(value);
    }
    exports.isBtcAddress = isBtcAddress;
    function IsBtcAddress(validationOptions) {
      return ValidateBy_1.ValidateBy({
        name: exports.IS_BTC_ADDRESS,
        validator: {
          validate: (value, args) => isBtcAddress(value),
          defaultMessage: ValidateBy_1.buildMessage((eachPrefix) => eachPrefix + "$property must be a BTC address", validationOptions)
        }
      }, validationOptions);
    }
    exports.IsBtcAddress = IsBtcAddress;
  }
});

// node_modules/validator/lib/isDataURI.js
var require_isDataURI = __commonJS({
  "node_modules/validator/lib/isDataURI.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isDataURI;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var validMediaType = /^[a-z]+\/[a-z0-9\-\+]+$/i;
    var validAttribute = /^[a-z\-]+=[a-z0-9\-]+$/i;
    var validData = /^[a-z0-9!\$&'\(\)\*\+,;=\-\._~:@\/\?%\s]*$/i;
    function isDataURI(str) {
      (0, _assertString.default)(str);
      var data = str.split(",");
      if (data.length < 2) {
        return false;
      }
      var attributes = data.shift().trim().split(";");
      var schemeAndMediaType = attributes.shift();
      if (schemeAndMediaType.substr(0, 5) !== "data:") {
        return false;
      }
      var mediaType = schemeAndMediaType.substr(5);
      if (mediaType !== "" && !validMediaType.test(mediaType)) {
        return false;
      }
      for (var i = 0; i < attributes.length; i++) {
        if (!(i === attributes.length - 1 && attributes[i].toLowerCase() === "base64") && !validAttribute.test(attributes[i])) {
          return false;
        }
      }
      for (var _i = 0; _i < data.length; _i++) {
        if (!validData.test(data[_i])) {
          return false;
        }
      }
      return true;
    }
    module2.exports = exports.default;
    module2.exports.default = exports.default;
  }
});

// node_modules/class-validator/cjs/decorator/string/IsDataURI.js
var require_IsDataURI = __commonJS({
  "node_modules/class-validator/cjs/decorator/string/IsDataURI.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IsDataURI = exports.isDataURI = exports.IS_DATA_URI = void 0;
    var ValidateBy_1 = require_ValidateBy();
    var isDataURI_1 = __importDefault(require_isDataURI());
    exports.IS_DATA_URI = "isDataURI";
    function isDataURI(value) {
      return typeof value === "string" && isDataURI_1.default(value);
    }
    exports.isDataURI = isDataURI;
    function IsDataURI(validationOptions) {
      return ValidateBy_1.ValidateBy({
        name: exports.IS_DATA_URI,
        validator: {
          validate: (value, args) => isDataURI(value),
          defaultMessage: ValidateBy_1.buildMessage((eachPrefix) => eachPrefix + "$property must be a data uri format", validationOptions)
        }
      }, validationOptions);
    }
    exports.IsDataURI = IsDataURI;
  }
});

// node_modules/validator/lib/isEAN.js
var require_isEAN = __commonJS({
  "node_modules/validator/lib/isEAN.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isEAN;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var LENGTH_EAN_8 = 8;
    var LENGTH_EAN_14 = 14;
    var validEanRegex = /^(\d{8}|\d{13}|\d{14})$/;
    function getPositionWeightThroughLengthAndIndex(length, index) {
      if (length === LENGTH_EAN_8 || length === LENGTH_EAN_14) {
        return index % 2 === 0 ? 3 : 1;
      }
      return index % 2 === 0 ? 1 : 3;
    }
    function calculateCheckDigit(ean) {
      var checksum = ean.slice(0, -1).split("").map(function(char, index) {
        return Number(char) * getPositionWeightThroughLengthAndIndex(ean.length, index);
      }).reduce(function(acc, partialSum) {
        return acc + partialSum;
      }, 0);
      var remainder = 10 - checksum % 10;
      return remainder < 10 ? remainder : 0;
    }
    function isEAN(str) {
      (0, _assertString.default)(str);
      var actualCheckDigit = Number(str.slice(-1));
      return validEanRegex.test(str) && actualCheckDigit === calculateCheckDigit(str);
    }
    module2.exports = exports.default;
    module2.exports.default = exports.default;
  }
});

// node_modules/class-validator/cjs/decorator/string/IsEAN.js
var require_IsEAN = __commonJS({
  "node_modules/class-validator/cjs/decorator/string/IsEAN.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IsEAN = exports.isEAN = exports.IS_EAN = void 0;
    var ValidateBy_1 = require_ValidateBy();
    var isEAN_1 = __importDefault(require_isEAN());
    exports.IS_EAN = "isEAN";
    function isEAN(value) {
      return typeof value === "string" && isEAN_1.default(value);
    }
    exports.isEAN = isEAN;
    function IsEAN(validationOptions) {
      return ValidateBy_1.ValidateBy({
        name: exports.IS_EAN,
        validator: {
          validate: (value, args) => isEAN(value),
          defaultMessage: ValidateBy_1.buildMessage((eachPrefix) => eachPrefix + "$property must be an EAN (European Article Number)", validationOptions)
        }
      }, validationOptions);
    }
    exports.IsEAN = IsEAN;
  }
});

// node_modules/validator/lib/isEthereumAddress.js
var require_isEthereumAddress = __commonJS({
  "node_modules/validator/lib/isEthereumAddress.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isEthereumAddress;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var eth = /^(0x)[0-9a-f]{40}$/i;
    function isEthereumAddress(str) {
      (0, _assertString.default)(str);
      return eth.test(str);
    }
    module2.exports = exports.default;
    module2.exports.default = exports.default;
  }
});

// node_modules/class-validator/cjs/decorator/string/IsEthereumAddress.js
var require_IsEthereumAddress = __commonJS({
  "node_modules/class-validator/cjs/decorator/string/IsEthereumAddress.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IsEthereumAddress = exports.isEthereumAddress = exports.IS_ETHEREUM_ADDRESS = void 0;
    var ValidateBy_1 = require_ValidateBy();
    var isEthereumAddress_1 = __importDefault(require_isEthereumAddress());
    exports.IS_ETHEREUM_ADDRESS = "isEthereumAddress";
    function isEthereumAddress(value) {
      return typeof value === "string" && isEthereumAddress_1.default(value);
    }
    exports.isEthereumAddress = isEthereumAddress;
    function IsEthereumAddress(validationOptions) {
      return ValidateBy_1.ValidateBy({
        name: exports.IS_ETHEREUM_ADDRESS,
        validator: {
          validate: (value, args) => isEthereumAddress(value),
          defaultMessage: ValidateBy_1.buildMessage((eachPrefix) => eachPrefix + "$property must be an Ethereum address", validationOptions)
        }
      }, validationOptions);
    }
    exports.IsEthereumAddress = IsEthereumAddress;
  }
});

// node_modules/validator/lib/isHSL.js
var require_isHSL = __commonJS({
  "node_modules/validator/lib/isHSL.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isHSL;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var hslComma = /^hsla?\(((\+|\-)?([0-9]+(\.[0-9]+)?(e(\+|\-)?[0-9]+)?|\.[0-9]+(e(\+|\-)?[0-9]+)?))(deg|grad|rad|turn)?(,(\+|\-)?([0-9]+(\.[0-9]+)?(e(\+|\-)?[0-9]+)?|\.[0-9]+(e(\+|\-)?[0-9]+)?)%){2}(,((\+|\-)?([0-9]+(\.[0-9]+)?(e(\+|\-)?[0-9]+)?|\.[0-9]+(e(\+|\-)?[0-9]+)?)%?))?\)$/i;
    var hslSpace = /^hsla?\(((\+|\-)?([0-9]+(\.[0-9]+)?(e(\+|\-)?[0-9]+)?|\.[0-9]+(e(\+|\-)?[0-9]+)?))(deg|grad|rad|turn)?(\s(\+|\-)?([0-9]+(\.[0-9]+)?(e(\+|\-)?[0-9]+)?|\.[0-9]+(e(\+|\-)?[0-9]+)?)%){2}\s?(\/\s((\+|\-)?([0-9]+(\.[0-9]+)?(e(\+|\-)?[0-9]+)?|\.[0-9]+(e(\+|\-)?[0-9]+)?)%?)\s?)?\)$/i;
    function isHSL(str) {
      (0, _assertString.default)(str);
      var strippedStr = str.replace(/\s+/g, " ").replace(/\s?(hsla?\(|\)|,)\s?/ig, "$1");
      if (strippedStr.indexOf(",") !== -1) {
        return hslComma.test(strippedStr);
      }
      return hslSpace.test(strippedStr);
    }
    module2.exports = exports.default;
    module2.exports.default = exports.default;
  }
});

// node_modules/class-validator/cjs/decorator/string/IsHSL.js
var require_IsHSL = __commonJS({
  "node_modules/class-validator/cjs/decorator/string/IsHSL.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IsHSL = exports.isHSL = exports.IS_HSL = void 0;
    var ValidateBy_1 = require_ValidateBy();
    var isHSL_1 = __importDefault(require_isHSL());
    exports.IS_HSL = "isHSL";
    function isHSL(value) {
      return typeof value === "string" && isHSL_1.default(value);
    }
    exports.isHSL = isHSL;
    function IsHSL(validationOptions) {
      return ValidateBy_1.ValidateBy({
        name: exports.IS_HSL,
        validator: {
          validate: (value, args) => isHSL(value),
          defaultMessage: ValidateBy_1.buildMessage((eachPrefix) => eachPrefix + "$property must be a HSL color", validationOptions)
        }
      }, validationOptions);
    }
    exports.IsHSL = IsHSL;
  }
});

// node_modules/validator/lib/isIBAN.js
var require_isIBAN = __commonJS({
  "node_modules/validator/lib/isIBAN.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isIBAN;
    exports.locales = void 0;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var ibanRegexThroughCountryCode = {
      AD: /^(AD[0-9]{2})\d{8}[A-Z0-9]{12}$/,
      AE: /^(AE[0-9]{2})\d{3}\d{16}$/,
      AL: /^(AL[0-9]{2})\d{8}[A-Z0-9]{16}$/,
      AT: /^(AT[0-9]{2})\d{16}$/,
      AZ: /^(AZ[0-9]{2})[A-Z0-9]{4}\d{20}$/,
      BA: /^(BA[0-9]{2})\d{16}$/,
      BE: /^(BE[0-9]{2})\d{12}$/,
      BG: /^(BG[0-9]{2})[A-Z]{4}\d{6}[A-Z0-9]{8}$/,
      BH: /^(BH[0-9]{2})[A-Z]{4}[A-Z0-9]{14}$/,
      BR: /^(BR[0-9]{2})\d{23}[A-Z]{1}[A-Z0-9]{1}$/,
      BY: /^(BY[0-9]{2})[A-Z0-9]{4}\d{20}$/,
      CH: /^(CH[0-9]{2})\d{5}[A-Z0-9]{12}$/,
      CR: /^(CR[0-9]{2})\d{18}$/,
      CY: /^(CY[0-9]{2})\d{8}[A-Z0-9]{16}$/,
      CZ: /^(CZ[0-9]{2})\d{20}$/,
      DE: /^(DE[0-9]{2})\d{18}$/,
      DK: /^(DK[0-9]{2})\d{14}$/,
      DO: /^(DO[0-9]{2})[A-Z]{4}\d{20}$/,
      EE: /^(EE[0-9]{2})\d{16}$/,
      EG: /^(EG[0-9]{2})\d{25}$/,
      ES: /^(ES[0-9]{2})\d{20}$/,
      FI: /^(FI[0-9]{2})\d{14}$/,
      FO: /^(FO[0-9]{2})\d{14}$/,
      FR: /^(FR[0-9]{2})\d{10}[A-Z0-9]{11}\d{2}$/,
      GB: /^(GB[0-9]{2})[A-Z]{4}\d{14}$/,
      GE: /^(GE[0-9]{2})[A-Z0-9]{2}\d{16}$/,
      GI: /^(GI[0-9]{2})[A-Z]{4}[A-Z0-9]{15}$/,
      GL: /^(GL[0-9]{2})\d{14}$/,
      GR: /^(GR[0-9]{2})\d{7}[A-Z0-9]{16}$/,
      GT: /^(GT[0-9]{2})[A-Z0-9]{4}[A-Z0-9]{20}$/,
      HR: /^(HR[0-9]{2})\d{17}$/,
      HU: /^(HU[0-9]{2})\d{24}$/,
      IE: /^(IE[0-9]{2})[A-Z0-9]{4}\d{14}$/,
      IL: /^(IL[0-9]{2})\d{19}$/,
      IQ: /^(IQ[0-9]{2})[A-Z]{4}\d{15}$/,
      IR: /^(IR[0-9]{2})0\d{2}0\d{18}$/,
      IS: /^(IS[0-9]{2})\d{22}$/,
      IT: /^(IT[0-9]{2})[A-Z]{1}\d{10}[A-Z0-9]{12}$/,
      JO: /^(JO[0-9]{2})[A-Z]{4}\d{22}$/,
      KW: /^(KW[0-9]{2})[A-Z]{4}[A-Z0-9]{22}$/,
      KZ: /^(KZ[0-9]{2})\d{3}[A-Z0-9]{13}$/,
      LB: /^(LB[0-9]{2})\d{4}[A-Z0-9]{20}$/,
      LC: /^(LC[0-9]{2})[A-Z]{4}[A-Z0-9]{24}$/,
      LI: /^(LI[0-9]{2})\d{5}[A-Z0-9]{12}$/,
      LT: /^(LT[0-9]{2})\d{16}$/,
      LU: /^(LU[0-9]{2})\d{3}[A-Z0-9]{13}$/,
      LV: /^(LV[0-9]{2})[A-Z]{4}[A-Z0-9]{13}$/,
      MC: /^(MC[0-9]{2})\d{10}[A-Z0-9]{11}\d{2}$/,
      MD: /^(MD[0-9]{2})[A-Z0-9]{20}$/,
      ME: /^(ME[0-9]{2})\d{18}$/,
      MK: /^(MK[0-9]{2})\d{3}[A-Z0-9]{10}\d{2}$/,
      MR: /^(MR[0-9]{2})\d{23}$/,
      MT: /^(MT[0-9]{2})[A-Z]{4}\d{5}[A-Z0-9]{18}$/,
      MU: /^(MU[0-9]{2})[A-Z]{4}\d{19}[A-Z]{3}$/,
      MZ: /^(MZ[0-9]{2})\d{21}$/,
      NL: /^(NL[0-9]{2})[A-Z]{4}\d{10}$/,
      NO: /^(NO[0-9]{2})\d{11}$/,
      PK: /^(PK[0-9]{2})[A-Z0-9]{4}\d{16}$/,
      PL: /^(PL[0-9]{2})\d{24}$/,
      PS: /^(PS[0-9]{2})[A-Z0-9]{4}\d{21}$/,
      PT: /^(PT[0-9]{2})\d{21}$/,
      QA: /^(QA[0-9]{2})[A-Z]{4}[A-Z0-9]{21}$/,
      RO: /^(RO[0-9]{2})[A-Z]{4}[A-Z0-9]{16}$/,
      RS: /^(RS[0-9]{2})\d{18}$/,
      SA: /^(SA[0-9]{2})\d{2}[A-Z0-9]{18}$/,
      SC: /^(SC[0-9]{2})[A-Z]{4}\d{20}[A-Z]{3}$/,
      SE: /^(SE[0-9]{2})\d{20}$/,
      SI: /^(SI[0-9]{2})\d{15}$/,
      SK: /^(SK[0-9]{2})\d{20}$/,
      SM: /^(SM[0-9]{2})[A-Z]{1}\d{10}[A-Z0-9]{12}$/,
      SV: /^(SV[0-9]{2})[A-Z0-9]{4}\d{20}$/,
      TL: /^(TL[0-9]{2})\d{19}$/,
      TN: /^(TN[0-9]{2})\d{20}$/,
      TR: /^(TR[0-9]{2})\d{5}[A-Z0-9]{17}$/,
      UA: /^(UA[0-9]{2})\d{6}[A-Z0-9]{19}$/,
      VA: /^(VA[0-9]{2})\d{18}$/,
      VG: /^(VG[0-9]{2})[A-Z0-9]{4}\d{16}$/,
      XK: /^(XK[0-9]{2})\d{16}$/
    };
    function hasValidIbanFormat(str) {
      var strippedStr = str.replace(/[\s\-]+/gi, "").toUpperCase();
      var isoCountryCode = strippedStr.slice(0, 2).toUpperCase();
      return isoCountryCode in ibanRegexThroughCountryCode && ibanRegexThroughCountryCode[isoCountryCode].test(strippedStr);
    }
    function hasValidIbanChecksum(str) {
      var strippedStr = str.replace(/[^A-Z0-9]+/gi, "").toUpperCase();
      var rearranged = strippedStr.slice(4) + strippedStr.slice(0, 4);
      var alphaCapsReplacedWithDigits = rearranged.replace(/[A-Z]/g, function(char) {
        return char.charCodeAt(0) - 55;
      });
      var remainder = alphaCapsReplacedWithDigits.match(/\d{1,7}/g).reduce(function(acc, value) {
        return Number(acc + value) % 97;
      }, "");
      return remainder === 1;
    }
    function isIBAN(str) {
      (0, _assertString.default)(str);
      return hasValidIbanFormat(str) && hasValidIbanChecksum(str);
    }
    var locales = Object.keys(ibanRegexThroughCountryCode);
    exports.locales = locales;
  }
});

// node_modules/class-validator/cjs/decorator/string/IsIBAN.js
var require_IsIBAN = __commonJS({
  "node_modules/class-validator/cjs/decorator/string/IsIBAN.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IsIBAN = exports.isIBAN = exports.IS_IBAN = void 0;
    var ValidateBy_1 = require_ValidateBy();
    var isIBAN_1 = __importDefault(require_isIBAN());
    exports.IS_IBAN = "isIBAN";
    function isIBAN(value) {
      return typeof value === "string" && isIBAN_1.default(value);
    }
    exports.isIBAN = isIBAN;
    function IsIBAN(validationOptions) {
      return ValidateBy_1.ValidateBy({
        name: exports.IS_IBAN,
        validator: {
          validate: (value, args) => isIBAN(value),
          defaultMessage: ValidateBy_1.buildMessage((eachPrefix) => eachPrefix + "$property must be an IBAN", validationOptions)
        }
      }, validationOptions);
    }
    exports.IsIBAN = IsIBAN;
  }
});

// node_modules/validator/lib/isIdentityCard.js
var require_isIdentityCard = __commonJS({
  "node_modules/validator/lib/isIdentityCard.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isIdentityCard;
    var _assertString = _interopRequireDefault(require_assertString());
    var _isInt = _interopRequireDefault(require_isInt());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var validators = {
      PL: function PL(str) {
        (0, _assertString.default)(str);
        var weightOfDigits = {
          1: 1,
          2: 3,
          3: 7,
          4: 9,
          5: 1,
          6: 3,
          7: 7,
          8: 9,
          9: 1,
          10: 3,
          11: 0
        };
        if (str != null && str.length === 11 && (0, _isInt.default)(str, {
          allow_leading_zeroes: true
        })) {
          var digits = str.split("").slice(0, -1);
          var sum = digits.reduce(function(acc, digit, index) {
            return acc + Number(digit) * weightOfDigits[index + 1];
          }, 0);
          var modulo = sum % 10;
          var lastDigit = Number(str.charAt(str.length - 1));
          if (modulo === 0 && lastDigit === 0 || lastDigit === 10 - modulo) {
            return true;
          }
        }
        return false;
      },
      ES: function ES(str) {
        (0, _assertString.default)(str);
        var DNI = /^[0-9X-Z][0-9]{7}[TRWAGMYFPDXBNJZSQVHLCKE]$/;
        var charsValue = {
          X: 0,
          Y: 1,
          Z: 2
        };
        var controlDigits = ["T", "R", "W", "A", "G", "M", "Y", "F", "P", "D", "X", "B", "N", "J", "Z", "S", "Q", "V", "H", "L", "C", "K", "E"];
        var sanitized = str.trim().toUpperCase();
        if (!DNI.test(sanitized)) {
          return false;
        }
        var number = sanitized.slice(0, -1).replace(/[X,Y,Z]/g, function(char) {
          return charsValue[char];
        });
        return sanitized.endsWith(controlDigits[number % 23]);
      },
      FI: function FI(str) {
        (0, _assertString.default)(str);
        if (str.length !== 11) {
          return false;
        }
        if (!str.match(/^\d{6}[\-A\+]\d{3}[0-9ABCDEFHJKLMNPRSTUVWXY]{1}$/)) {
          return false;
        }
        var checkDigits = "0123456789ABCDEFHJKLMNPRSTUVWXY";
        var idAsNumber = parseInt(str.slice(0, 6), 10) * 1e3 + parseInt(str.slice(7, 10), 10);
        var remainder = idAsNumber % 31;
        var checkDigit = checkDigits[remainder];
        return checkDigit === str.slice(10, 11);
      },
      IN: function IN(str) {
        var DNI = /^[1-9]\d{3}\s?\d{4}\s?\d{4}$/;
        var d = [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 0, 6, 7, 8, 9, 5], [2, 3, 4, 0, 1, 7, 8, 9, 5, 6], [3, 4, 0, 1, 2, 8, 9, 5, 6, 7], [4, 0, 1, 2, 3, 9, 5, 6, 7, 8], [5, 9, 8, 7, 6, 0, 4, 3, 2, 1], [6, 5, 9, 8, 7, 1, 0, 4, 3, 2], [7, 6, 5, 9, 8, 2, 1, 0, 4, 3], [8, 7, 6, 5, 9, 3, 2, 1, 0, 4], [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]];
        var p = [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 5, 7, 6, 2, 8, 3, 0, 9, 4], [5, 8, 0, 3, 7, 9, 6, 1, 4, 2], [8, 9, 1, 6, 0, 4, 3, 5, 2, 7], [9, 4, 5, 3, 1, 2, 6, 8, 7, 0], [4, 2, 8, 6, 5, 7, 3, 9, 0, 1], [2, 7, 9, 3, 8, 0, 6, 4, 1, 5], [7, 0, 4, 6, 9, 1, 3, 2, 5, 8]];
        var sanitized = str.trim();
        if (!DNI.test(sanitized)) {
          return false;
        }
        var c = 0;
        var invertedArray = sanitized.replace(/\s/g, "").split("").map(Number).reverse();
        invertedArray.forEach(function(val, i) {
          c = d[c][p[i % 8][val]];
        });
        return c === 0;
      },
      IR: function IR(str) {
        if (!str.match(/^\d{10}$/))
          return false;
        str = "0000".concat(str).substr(str.length - 6);
        if (parseInt(str.substr(3, 6), 10) === 0)
          return false;
        var lastNumber = parseInt(str.substr(9, 1), 10);
        var sum = 0;
        for (var i = 0; i < 9; i++) {
          sum += parseInt(str.substr(i, 1), 10) * (10 - i);
        }
        sum %= 11;
        return sum < 2 && lastNumber === sum || sum >= 2 && lastNumber === 11 - sum;
      },
      IT: function IT(str) {
        if (str.length !== 9)
          return false;
        if (str === "CA00000AA")
          return false;
        return str.search(/C[A-Z][0-9]{5}[A-Z]{2}/i) > -1;
      },
      NO: function NO(str) {
        var sanitized = str.trim();
        if (isNaN(Number(sanitized)))
          return false;
        if (sanitized.length !== 11)
          return false;
        if (sanitized === "00000000000")
          return false;
        var f = sanitized.split("").map(Number);
        var k1 = (11 - (3 * f[0] + 7 * f[1] + 6 * f[2] + 1 * f[3] + 8 * f[4] + 9 * f[5] + 4 * f[6] + 5 * f[7] + 2 * f[8]) % 11) % 11;
        var k2 = (11 - (5 * f[0] + 4 * f[1] + 3 * f[2] + 2 * f[3] + 7 * f[4] + 6 * f[5] + 5 * f[6] + 4 * f[7] + 3 * f[8] + 2 * k1) % 11) % 11;
        if (k1 !== f[9] || k2 !== f[10])
          return false;
        return true;
      },
      TH: function TH(str) {
        if (!str.match(/^[1-8]\d{12}$/))
          return false;
        var sum = 0;
        for (var i = 0; i < 12; i++) {
          sum += parseInt(str[i], 10) * (13 - i);
        }
        return str[12] === ((11 - sum % 11) % 10).toString();
      },
      LK: function LK(str) {
        var old_nic = /^[1-9]\d{8}[vx]$/i;
        var new_nic = /^[1-9]\d{11}$/i;
        if (str.length === 10 && old_nic.test(str))
          return true;
        else if (str.length === 12 && new_nic.test(str))
          return true;
        return false;
      },
      "he-IL": function heIL(str) {
        var DNI = /^\d{9}$/;
        var sanitized = str.trim();
        if (!DNI.test(sanitized)) {
          return false;
        }
        var id = sanitized;
        var sum = 0, incNum;
        for (var i = 0; i < id.length; i++) {
          incNum = Number(id[i]) * (i % 2 + 1);
          sum += incNum > 9 ? incNum - 9 : incNum;
        }
        return sum % 10 === 0;
      },
      "ar-LY": function arLY(str) {
        var NIN = /^(1|2)\d{11}$/;
        var sanitized = str.trim();
        if (!NIN.test(sanitized)) {
          return false;
        }
        return true;
      },
      "ar-TN": function arTN(str) {
        var DNI = /^\d{8}$/;
        var sanitized = str.trim();
        if (!DNI.test(sanitized)) {
          return false;
        }
        return true;
      },
      "zh-CN": function zhCN(str) {
        var provincesAndCities = [
          "11",
          "12",
          "13",
          "14",
          "15",
          "21",
          "22",
          "23",
          "31",
          "32",
          "33",
          "34",
          "35",
          "36",
          "37",
          "41",
          "42",
          "43",
          "44",
          "45",
          "46",
          "50",
          "51",
          "52",
          "53",
          "54",
          "61",
          "62",
          "63",
          "64",
          "65",
          "71",
          "81",
          "82",
          "91"
        ];
        var powers = ["7", "9", "10", "5", "8", "4", "2", "1", "6", "3", "7", "9", "10", "5", "8", "4", "2"];
        var parityBit = ["1", "0", "X", "9", "8", "7", "6", "5", "4", "3", "2"];
        var checkAddressCode = function checkAddressCode2(addressCode) {
          return provincesAndCities.includes(addressCode);
        };
        var checkBirthDayCode = function checkBirthDayCode2(birDayCode) {
          var yyyy = parseInt(birDayCode.substring(0, 4), 10);
          var mm = parseInt(birDayCode.substring(4, 6), 10);
          var dd = parseInt(birDayCode.substring(6), 10);
          var xdata = new Date(yyyy, mm - 1, dd);
          if (xdata > new Date()) {
            return false;
          } else if (xdata.getFullYear() === yyyy && xdata.getMonth() === mm - 1 && xdata.getDate() === dd) {
            return true;
          }
          return false;
        };
        var getParityBit = function getParityBit2(idCardNo) {
          var id17 = idCardNo.substring(0, 17);
          var power = 0;
          for (var i = 0; i < 17; i++) {
            power += parseInt(id17.charAt(i), 10) * parseInt(powers[i], 10);
          }
          var mod = power % 11;
          return parityBit[mod];
        };
        var checkParityBit = function checkParityBit2(idCardNo) {
          return getParityBit(idCardNo) === idCardNo.charAt(17).toUpperCase();
        };
        var check15IdCardNo = function check15IdCardNo2(idCardNo) {
          var check = /^[1-9]\d{7}((0[1-9])|(1[0-2]))((0[1-9])|([1-2][0-9])|(3[0-1]))\d{3}$/.test(idCardNo);
          if (!check)
            return false;
          var addressCode = idCardNo.substring(0, 2);
          check = checkAddressCode(addressCode);
          if (!check)
            return false;
          var birDayCode = "19".concat(idCardNo.substring(6, 12));
          check = checkBirthDayCode(birDayCode);
          if (!check)
            return false;
          return true;
        };
        var check18IdCardNo = function check18IdCardNo2(idCardNo) {
          var check = /^[1-9]\d{5}[1-9]\d{3}((0[1-9])|(1[0-2]))((0[1-9])|([1-2][0-9])|(3[0-1]))\d{3}(\d|x|X)$/.test(idCardNo);
          if (!check)
            return false;
          var addressCode = idCardNo.substring(0, 2);
          check = checkAddressCode(addressCode);
          if (!check)
            return false;
          var birDayCode = idCardNo.substring(6, 14);
          check = checkBirthDayCode(birDayCode);
          if (!check)
            return false;
          return checkParityBit(idCardNo);
        };
        var checkIdCardNo = function checkIdCardNo2(idCardNo) {
          var check = /^\d{15}|(\d{17}(\d|x|X))$/.test(idCardNo);
          if (!check)
            return false;
          if (idCardNo.length === 15) {
            return check15IdCardNo(idCardNo);
          }
          return check18IdCardNo(idCardNo);
        };
        return checkIdCardNo(str);
      },
      "zh-TW": function zhTW(str) {
        var ALPHABET_CODES = {
          A: 10,
          B: 11,
          C: 12,
          D: 13,
          E: 14,
          F: 15,
          G: 16,
          H: 17,
          I: 34,
          J: 18,
          K: 19,
          L: 20,
          M: 21,
          N: 22,
          O: 35,
          P: 23,
          Q: 24,
          R: 25,
          S: 26,
          T: 27,
          U: 28,
          V: 29,
          W: 32,
          X: 30,
          Y: 31,
          Z: 33
        };
        var sanitized = str.trim().toUpperCase();
        if (!/^[A-Z][0-9]{9}$/.test(sanitized))
          return false;
        return Array.from(sanitized).reduce(function(sum, number, index) {
          if (index === 0) {
            var code = ALPHABET_CODES[number];
            return code % 10 * 9 + Math.floor(code / 10);
          }
          if (index === 9) {
            return (10 - sum % 10 - Number(number)) % 10 === 0;
          }
          return sum + Number(number) * (9 - index);
        }, 0);
      }
    };
    function isIdentityCard(str, locale) {
      (0, _assertString.default)(str);
      if (locale in validators) {
        return validators[locale](str);
      } else if (locale === "any") {
        for (var key in validators) {
          if (validators.hasOwnProperty(key)) {
            var validator = validators[key];
            if (validator(str)) {
              return true;
            }
          }
        }
        return false;
      }
      throw new Error("Invalid locale '".concat(locale, "'"));
    }
    module2.exports = exports.default;
    module2.exports.default = exports.default;
  }
});

// node_modules/class-validator/cjs/decorator/string/IsIdentityCard.js
var require_IsIdentityCard = __commonJS({
  "node_modules/class-validator/cjs/decorator/string/IsIdentityCard.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IsIdentityCard = exports.isIdentityCard = exports.IS_IDENTITY_CARD = void 0;
    var ValidateBy_1 = require_ValidateBy();
    var isIdentityCard_1 = __importDefault(require_isIdentityCard());
    exports.IS_IDENTITY_CARD = "isIdentityCard";
    function isIdentityCard(value, locale) {
      return typeof value === "string" && isIdentityCard_1.default(value, locale);
    }
    exports.isIdentityCard = isIdentityCard;
    function IsIdentityCard(locale, validationOptions) {
      return ValidateBy_1.ValidateBy({
        name: exports.IS_IDENTITY_CARD,
        constraints: [locale],
        validator: {
          validate: (value, args) => isIdentityCard(value, args.constraints[0]),
          defaultMessage: ValidateBy_1.buildMessage((eachPrefix) => eachPrefix + "$property must be a identity card number", validationOptions)
        }
      }, validationOptions);
    }
    exports.IsIdentityCard = IsIdentityCard;
  }
});

// node_modules/validator/lib/isISRC.js
var require_isISRC = __commonJS({
  "node_modules/validator/lib/isISRC.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isISRC;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var isrc = /^[A-Z]{2}[0-9A-Z]{3}\d{2}\d{5}$/;
    function isISRC(str) {
      (0, _assertString.default)(str);
      return isrc.test(str);
    }
    module2.exports = exports.default;
    module2.exports.default = exports.default;
  }
});

// node_modules/class-validator/cjs/decorator/string/IsISRC.js
var require_IsISRC = __commonJS({
  "node_modules/class-validator/cjs/decorator/string/IsISRC.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IsISRC = exports.isISRC = exports.IS_ISRC = void 0;
    var ValidateBy_1 = require_ValidateBy();
    var isISRC_1 = __importDefault(require_isISRC());
    exports.IS_ISRC = "isISRC";
    function isISRC(value) {
      return typeof value === "string" && isISRC_1.default(value);
    }
    exports.isISRC = isISRC;
    function IsISRC(validationOptions) {
      return ValidateBy_1.ValidateBy({
        name: exports.IS_ISRC,
        validator: {
          validate: (value, args) => isISRC(value),
          defaultMessage: ValidateBy_1.buildMessage((eachPrefix) => eachPrefix + "$property must be an ISRC", validationOptions)
        }
      }, validationOptions);
    }
    exports.IsISRC = IsISRC;
  }
});

// node_modules/validator/lib/isLocale.js
var require_isLocale = __commonJS({
  "node_modules/validator/lib/isLocale.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isLocale;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var localeReg = /^[A-Za-z]{2,4}([_-]([A-Za-z]{4}|[\d]{3}))?([_-]([A-Za-z]{2}|[\d]{3}))?$/;
    function isLocale(str) {
      (0, _assertString.default)(str);
      if (str === "en_US_POSIX" || str === "ca_ES_VALENCIA") {
        return true;
      }
      return localeReg.test(str);
    }
    module2.exports = exports.default;
    module2.exports.default = exports.default;
  }
});

// node_modules/class-validator/cjs/decorator/string/IsLocale.js
var require_IsLocale = __commonJS({
  "node_modules/class-validator/cjs/decorator/string/IsLocale.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IsLocale = exports.isLocale = exports.IS_LOCALE = void 0;
    var ValidateBy_1 = require_ValidateBy();
    var isLocale_1 = __importDefault(require_isLocale());
    exports.IS_LOCALE = "isLocale";
    function isLocale(value) {
      return typeof value === "string" && isLocale_1.default(value);
    }
    exports.isLocale = isLocale;
    function IsLocale(validationOptions) {
      return ValidateBy_1.ValidateBy({
        name: exports.IS_LOCALE,
        validator: {
          validate: (value, args) => isLocale(value),
          defaultMessage: ValidateBy_1.buildMessage((eachPrefix) => eachPrefix + "$property must be locale", validationOptions)
        }
      }, validationOptions);
    }
    exports.IsLocale = IsLocale;
  }
});

// node_modules/validator/lib/isMagnetURI.js
var require_isMagnetURI = __commonJS({
  "node_modules/validator/lib/isMagnetURI.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isMagnetURI;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var magnetURI = /^magnet:\?xt(?:\.1)?=urn:(?:aich|bitprint|btih|ed2k|ed2khash|kzhash|md5|sha1|tree:tiger):[a-z0-9]{32}(?:[a-z0-9]{8})?($|&)/i;
    function isMagnetURI(url) {
      (0, _assertString.default)(url);
      return magnetURI.test(url.trim());
    }
    module2.exports = exports.default;
    module2.exports.default = exports.default;
  }
});

// node_modules/class-validator/cjs/decorator/string/IsMagnetURI.js
var require_IsMagnetURI = __commonJS({
  "node_modules/class-validator/cjs/decorator/string/IsMagnetURI.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IsMagnetURI = exports.isMagnetURI = exports.IS_MAGNET_URI = void 0;
    var ValidateBy_1 = require_ValidateBy();
    var isMagnetURI_1 = __importDefault(require_isMagnetURI());
    exports.IS_MAGNET_URI = "isMagnetURI";
    function isMagnetURI(value) {
      return typeof value === "string" && isMagnetURI_1.default(value);
    }
    exports.isMagnetURI = isMagnetURI;
    function IsMagnetURI(validationOptions) {
      return ValidateBy_1.ValidateBy({
        name: exports.IS_MAGNET_URI,
        validator: {
          validate: (value, args) => isMagnetURI(value),
          defaultMessage: ValidateBy_1.buildMessage((eachPrefix) => eachPrefix + "$property must be magnet uri format", validationOptions)
        }
      }, validationOptions);
    }
    exports.IsMagnetURI = IsMagnetURI;
  }
});

// node_modules/validator/lib/isMimeType.js
var require_isMimeType = __commonJS({
  "node_modules/validator/lib/isMimeType.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isMimeType;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var mimeTypeSimple = /^(application|audio|font|image|message|model|multipart|text|video)\/[a-zA-Z0-9\.\-\+]{1,100}$/i;
    var mimeTypeText = /^text\/[a-zA-Z0-9\.\-\+]{1,100};\s?charset=("[a-zA-Z0-9\.\-\+\s]{0,70}"|[a-zA-Z0-9\.\-\+]{0,70})(\s?\([a-zA-Z0-9\.\-\+\s]{1,20}\))?$/i;
    var mimeTypeMultipart = /^multipart\/[a-zA-Z0-9\.\-\+]{1,100}(;\s?(boundary|charset)=("[a-zA-Z0-9\.\-\+\s]{0,70}"|[a-zA-Z0-9\.\-\+]{0,70})(\s?\([a-zA-Z0-9\.\-\+\s]{1,20}\))?){0,2}$/i;
    function isMimeType(str) {
      (0, _assertString.default)(str);
      return mimeTypeSimple.test(str) || mimeTypeText.test(str) || mimeTypeMultipart.test(str);
    }
    module2.exports = exports.default;
    module2.exports.default = exports.default;
  }
});

// node_modules/class-validator/cjs/decorator/string/IsMimeType.js
var require_IsMimeType = __commonJS({
  "node_modules/class-validator/cjs/decorator/string/IsMimeType.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IsMimeType = exports.isMimeType = exports.IS_MIME_TYPE = void 0;
    var ValidateBy_1 = require_ValidateBy();
    var isMimeType_1 = __importDefault(require_isMimeType());
    exports.IS_MIME_TYPE = "isMimeType";
    function isMimeType(value) {
      return typeof value === "string" && isMimeType_1.default(value);
    }
    exports.isMimeType = isMimeType;
    function IsMimeType(validationOptions) {
      return ValidateBy_1.ValidateBy({
        name: exports.IS_MIME_TYPE,
        validator: {
          validate: (value, args) => isMimeType(value),
          defaultMessage: ValidateBy_1.buildMessage((eachPrefix) => eachPrefix + "$property must be MIME type format", validationOptions)
        }
      }, validationOptions);
    }
    exports.IsMimeType = IsMimeType;
  }
});

// node_modules/validator/lib/isOctal.js
var require_isOctal = __commonJS({
  "node_modules/validator/lib/isOctal.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isOctal;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var octal = /^(0o)?[0-7]+$/i;
    function isOctal(str) {
      (0, _assertString.default)(str);
      return octal.test(str);
    }
    module2.exports = exports.default;
    module2.exports.default = exports.default;
  }
});

// node_modules/class-validator/cjs/decorator/string/IsOctal.js
var require_IsOctal = __commonJS({
  "node_modules/class-validator/cjs/decorator/string/IsOctal.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IsOctal = exports.isOctal = exports.IS_OCTAL = void 0;
    var ValidateBy_1 = require_ValidateBy();
    var isOctal_1 = __importDefault(require_isOctal());
    exports.IS_OCTAL = "isOctal";
    function isOctal(value) {
      return typeof value === "string" && isOctal_1.default(value);
    }
    exports.isOctal = isOctal;
    function IsOctal(validationOptions) {
      return ValidateBy_1.ValidateBy({
        name: exports.IS_OCTAL,
        validator: {
          validate: (value, args) => isOctal(value),
          defaultMessage: ValidateBy_1.buildMessage((eachPrefix) => eachPrefix + "$property must be valid octal number", validationOptions)
        }
      }, validationOptions);
    }
    exports.IsOctal = IsOctal;
  }
});

// node_modules/validator/lib/isPassportNumber.js
var require_isPassportNumber = __commonJS({
  "node_modules/validator/lib/isPassportNumber.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isPassportNumber;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var passportRegexByCountryCode = {
      AM: /^[A-Z]{2}\d{7}$/,
      AR: /^[A-Z]{3}\d{6}$/,
      AT: /^[A-Z]\d{7}$/,
      AU: /^[A-Z]\d{7}$/,
      BE: /^[A-Z]{2}\d{6}$/,
      BG: /^\d{9}$/,
      BR: /^[A-Z]{2}\d{6}$/,
      BY: /^[A-Z]{2}\d{7}$/,
      CA: /^[A-Z]{2}\d{6}$/,
      CH: /^[A-Z]\d{7}$/,
      CN: /^G\d{8}$|^E(?![IO])[A-Z0-9]\d{7}$/,
      CY: /^[A-Z](\d{6}|\d{8})$/,
      CZ: /^\d{8}$/,
      DE: /^[CFGHJKLMNPRTVWXYZ0-9]{9}$/,
      DK: /^\d{9}$/,
      DZ: /^\d{9}$/,
      EE: /^([A-Z]\d{7}|[A-Z]{2}\d{7})$/,
      ES: /^[A-Z0-9]{2}([A-Z0-9]?)\d{6}$/,
      FI: /^[A-Z]{2}\d{7}$/,
      FR: /^\d{2}[A-Z]{2}\d{5}$/,
      GB: /^\d{9}$/,
      GR: /^[A-Z]{2}\d{7}$/,
      HR: /^\d{9}$/,
      HU: /^[A-Z]{2}(\d{6}|\d{7})$/,
      IE: /^[A-Z0-9]{2}\d{7}$/,
      IN: /^[A-Z]{1}-?\d{7}$/,
      ID: /^[A-C]\d{7}$/,
      IR: /^[A-Z]\d{8}$/,
      IS: /^(A)\d{7}$/,
      IT: /^[A-Z0-9]{2}\d{7}$/,
      JP: /^[A-Z]{2}\d{7}$/,
      KR: /^[MS]\d{8}$/,
      LT: /^[A-Z0-9]{8}$/,
      LU: /^[A-Z0-9]{8}$/,
      LV: /^[A-Z0-9]{2}\d{7}$/,
      LY: /^[A-Z0-9]{8}$/,
      MT: /^\d{7}$/,
      MZ: /^([A-Z]{2}\d{7})|(\d{2}[A-Z]{2}\d{5})$/,
      MY: /^[AHK]\d{8}$/,
      NL: /^[A-Z]{2}[A-Z0-9]{6}\d$/,
      PL: /^[A-Z]{2}\d{7}$/,
      PT: /^[A-Z]\d{6}$/,
      RO: /^\d{8,9}$/,
      RU: /^\d{9}$/,
      SE: /^\d{8}$/,
      SL: /^(P)[A-Z]\d{7}$/,
      SK: /^[0-9A-Z]\d{7}$/,
      TR: /^[A-Z]\d{8}$/,
      UA: /^[A-Z]{2}\d{6}$/,
      US: /^\d{9}$/
    };
    function isPassportNumber(str, countryCode) {
      (0, _assertString.default)(str);
      var normalizedStr = str.replace(/\s/g, "").toUpperCase();
      return countryCode.toUpperCase() in passportRegexByCountryCode && passportRegexByCountryCode[countryCode].test(normalizedStr);
    }
    module2.exports = exports.default;
    module2.exports.default = exports.default;
  }
});

// node_modules/class-validator/cjs/decorator/string/IsPassportNumber.js
var require_IsPassportNumber = __commonJS({
  "node_modules/class-validator/cjs/decorator/string/IsPassportNumber.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IsPassportNumber = exports.isPassportNumber = exports.IS_PASSPORT_NUMBER = void 0;
    var ValidateBy_1 = require_ValidateBy();
    var isPassportNumber_1 = __importDefault(require_isPassportNumber());
    exports.IS_PASSPORT_NUMBER = "isPassportNumber";
    function isPassportNumber(value, countryCode) {
      return typeof value === "string" && isPassportNumber_1.default(value, countryCode);
    }
    exports.isPassportNumber = isPassportNumber;
    function IsPassportNumber(countryCode, validationOptions) {
      return ValidateBy_1.ValidateBy({
        name: exports.IS_PASSPORT_NUMBER,
        constraints: [countryCode],
        validator: {
          validate: (value, args) => isPassportNumber(value, args.constraints[0]),
          defaultMessage: ValidateBy_1.buildMessage((eachPrefix) => eachPrefix + "$property must be valid passport number", validationOptions)
        }
      }, validationOptions);
    }
    exports.IsPassportNumber = IsPassportNumber;
  }
});

// node_modules/validator/lib/isPostalCode.js
var require_isPostalCode = __commonJS({
  "node_modules/validator/lib/isPostalCode.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isPostalCode;
    exports.locales = void 0;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var threeDigit = /^\d{3}$/;
    var fourDigit = /^\d{4}$/;
    var fiveDigit = /^\d{5}$/;
    var sixDigit = /^\d{6}$/;
    var patterns = {
      AD: /^AD\d{3}$/,
      AT: fourDigit,
      AU: fourDigit,
      AZ: /^AZ\d{4}$/,
      BE: fourDigit,
      BG: fourDigit,
      BR: /^\d{5}-\d{3}$/,
      BY: /2[1-4]{1}\d{4}$/,
      CA: /^[ABCEGHJKLMNPRSTVXY]\d[ABCEGHJ-NPRSTV-Z][\s\-]?\d[ABCEGHJ-NPRSTV-Z]\d$/i,
      CH: fourDigit,
      CN: /^(0[1-7]|1[012356]|2[0-7]|3[0-6]|4[0-7]|5[1-7]|6[1-7]|7[1-5]|8[1345]|9[09])\d{4}$/,
      CZ: /^\d{3}\s?\d{2}$/,
      DE: fiveDigit,
      DK: fourDigit,
      DO: fiveDigit,
      DZ: fiveDigit,
      EE: fiveDigit,
      ES: /^(5[0-2]{1}|[0-4]{1}\d{1})\d{3}$/,
      FI: fiveDigit,
      FR: /^\d{2}\s?\d{3}$/,
      GB: /^(gir\s?0aa|[a-z]{1,2}\d[\da-z]?\s?(\d[a-z]{2})?)$/i,
      GR: /^\d{3}\s?\d{2}$/,
      HR: /^([1-5]\d{4}$)/,
      HT: /^HT\d{4}$/,
      HU: fourDigit,
      ID: fiveDigit,
      IE: /^(?!.*(?:o))[A-Za-z]\d[\dw]\s\w{4}$/i,
      IL: /^(\d{5}|\d{7})$/,
      IN: /^((?!10|29|35|54|55|65|66|86|87|88|89)[1-9][0-9]{5})$/,
      IR: /\b(?!(\d)\1{3})[13-9]{4}[1346-9][013-9]{5}\b/,
      IS: threeDigit,
      IT: fiveDigit,
      JP: /^\d{3}\-\d{4}$/,
      KE: fiveDigit,
      KR: /^(\d{5}|\d{6})$/,
      LI: /^(948[5-9]|949[0-7])$/,
      LT: /^LT\-\d{5}$/,
      LU: fourDigit,
      LV: /^LV\-\d{4}$/,
      LK: fiveDigit,
      MX: fiveDigit,
      MT: /^[A-Za-z]{3}\s{0,1}\d{4}$/,
      MY: fiveDigit,
      NL: /^\d{4}\s?[a-z]{2}$/i,
      NO: fourDigit,
      NP: /^(10|21|22|32|33|34|44|45|56|57)\d{3}$|^(977)$/i,
      NZ: fourDigit,
      PL: /^\d{2}\-\d{3}$/,
      PR: /^00[679]\d{2}([ -]\d{4})?$/,
      PT: /^\d{4}\-\d{3}?$/,
      RO: sixDigit,
      RU: sixDigit,
      SA: fiveDigit,
      SE: /^[1-9]\d{2}\s?\d{2}$/,
      SG: sixDigit,
      SI: fourDigit,
      SK: /^\d{3}\s?\d{2}$/,
      TH: fiveDigit,
      TN: fourDigit,
      TW: /^\d{3}(\d{2})?$/,
      UA: fiveDigit,
      US: /^\d{5}(-\d{4})?$/,
      ZA: fourDigit,
      ZM: fiveDigit
    };
    var locales = Object.keys(patterns);
    exports.locales = locales;
    function isPostalCode(str, locale) {
      (0, _assertString.default)(str);
      if (locale in patterns) {
        return patterns[locale].test(str);
      } else if (locale === "any") {
        for (var key in patterns) {
          if (patterns.hasOwnProperty(key)) {
            var pattern = patterns[key];
            if (pattern.test(str)) {
              return true;
            }
          }
        }
        return false;
      }
      throw new Error("Invalid locale '".concat(locale, "'"));
    }
  }
});

// node_modules/class-validator/cjs/decorator/string/IsPostalCode.js
var require_IsPostalCode = __commonJS({
  "node_modules/class-validator/cjs/decorator/string/IsPostalCode.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IsPostalCode = exports.isPostalCode = exports.IS_POSTAL_CODE = void 0;
    var ValidateBy_1 = require_ValidateBy();
    var isPostalCode_1 = __importDefault(require_isPostalCode());
    exports.IS_POSTAL_CODE = "isPostalCode";
    function isPostalCode(value, locale) {
      return typeof value === "string" && isPostalCode_1.default(value, locale);
    }
    exports.isPostalCode = isPostalCode;
    function IsPostalCode(locale, validationOptions) {
      return ValidateBy_1.ValidateBy({
        name: exports.IS_POSTAL_CODE,
        constraints: [locale],
        validator: {
          validate: (value, args) => isPostalCode(value, args.constraints[0]),
          defaultMessage: ValidateBy_1.buildMessage((eachPrefix) => eachPrefix + "$property must be a postal code", validationOptions)
        }
      }, validationOptions);
    }
    exports.IsPostalCode = IsPostalCode;
  }
});

// node_modules/validator/lib/isRFC3339.js
var require_isRFC3339 = __commonJS({
  "node_modules/validator/lib/isRFC3339.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isRFC3339;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var dateFullYear = /[0-9]{4}/;
    var dateMonth = /(0[1-9]|1[0-2])/;
    var dateMDay = /([12]\d|0[1-9]|3[01])/;
    var timeHour = /([01][0-9]|2[0-3])/;
    var timeMinute = /[0-5][0-9]/;
    var timeSecond = /([0-5][0-9]|60)/;
    var timeSecFrac = /(\.[0-9]+)?/;
    var timeNumOffset = new RegExp("[-+]".concat(timeHour.source, ":").concat(timeMinute.source));
    var timeOffset = new RegExp("([zZ]|".concat(timeNumOffset.source, ")"));
    var partialTime = new RegExp("".concat(timeHour.source, ":").concat(timeMinute.source, ":").concat(timeSecond.source).concat(timeSecFrac.source));
    var fullDate = new RegExp("".concat(dateFullYear.source, "-").concat(dateMonth.source, "-").concat(dateMDay.source));
    var fullTime = new RegExp("".concat(partialTime.source).concat(timeOffset.source));
    var rfc3339 = new RegExp("^".concat(fullDate.source, "[ tT]").concat(fullTime.source, "$"));
    function isRFC3339(str) {
      (0, _assertString.default)(str);
      return rfc3339.test(str);
    }
    module2.exports = exports.default;
    module2.exports.default = exports.default;
  }
});

// node_modules/class-validator/cjs/decorator/string/IsRFC3339.js
var require_IsRFC3339 = __commonJS({
  "node_modules/class-validator/cjs/decorator/string/IsRFC3339.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IsRFC3339 = exports.isRFC3339 = exports.IS_RFC_3339 = void 0;
    var ValidateBy_1 = require_ValidateBy();
    var isRFC3339_1 = __importDefault(require_isRFC3339());
    exports.IS_RFC_3339 = "isRFC3339";
    function isRFC3339(value) {
      return typeof value === "string" && isRFC3339_1.default(value);
    }
    exports.isRFC3339 = isRFC3339;
    function IsRFC3339(validationOptions) {
      return ValidateBy_1.ValidateBy({
        name: exports.IS_RFC_3339,
        validator: {
          validate: (value, args) => isRFC3339(value),
          defaultMessage: ValidateBy_1.buildMessage((eachPrefix) => eachPrefix + "$property must be RFC 3339 date", validationOptions)
        }
      }, validationOptions);
    }
    exports.IsRFC3339 = IsRFC3339;
  }
});

// node_modules/validator/lib/isRgbColor.js
var require_isRgbColor = __commonJS({
  "node_modules/validator/lib/isRgbColor.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isRgbColor;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var rgbColor = /^rgb\((([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]),){2}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\)$/;
    var rgbaColor = /^rgba\((([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]),){3}(0?\.\d|1(\.0)?|0(\.0)?)\)$/;
    var rgbColorPercent = /^rgb\((([0-9]%|[1-9][0-9]%|100%),){2}([0-9]%|[1-9][0-9]%|100%)\)/;
    var rgbaColorPercent = /^rgba\((([0-9]%|[1-9][0-9]%|100%),){3}(0?\.\d|1(\.0)?|0(\.0)?)\)/;
    function isRgbColor(str) {
      var includePercentValues = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
      (0, _assertString.default)(str);
      if (!includePercentValues) {
        return rgbColor.test(str) || rgbaColor.test(str);
      }
      return rgbColor.test(str) || rgbaColor.test(str) || rgbColorPercent.test(str) || rgbaColorPercent.test(str);
    }
    module2.exports = exports.default;
    module2.exports.default = exports.default;
  }
});

// node_modules/class-validator/cjs/decorator/string/IsRgbColor.js
var require_IsRgbColor = __commonJS({
  "node_modules/class-validator/cjs/decorator/string/IsRgbColor.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IsRgbColor = exports.isRgbColor = exports.IS_RGB_COLOR = void 0;
    var ValidateBy_1 = require_ValidateBy();
    var isRgbColor_1 = __importDefault(require_isRgbColor());
    exports.IS_RGB_COLOR = "isRgbColor";
    function isRgbColor(value, includePercentValues) {
      return typeof value === "string" && isRgbColor_1.default(value, includePercentValues);
    }
    exports.isRgbColor = isRgbColor;
    function IsRgbColor(includePercentValues, validationOptions) {
      return ValidateBy_1.ValidateBy({
        name: exports.IS_RGB_COLOR,
        constraints: [includePercentValues],
        validator: {
          validate: (value, args) => isRgbColor(value, args.constraints[0]),
          defaultMessage: ValidateBy_1.buildMessage((eachPrefix) => eachPrefix + "$property must be RGB color", validationOptions)
        }
      }, validationOptions);
    }
    exports.IsRgbColor = IsRgbColor;
  }
});

// node_modules/validator/lib/util/multilineRegex.js
var require_multilineRegex = __commonJS({
  "node_modules/validator/lib/util/multilineRegex.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = multilineRegexp;
    function multilineRegexp(parts, flags) {
      var regexpAsStringLiteral = parts.join("");
      return new RegExp(regexpAsStringLiteral, flags);
    }
    module2.exports = exports.default;
    module2.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isSemVer.js
var require_isSemVer = __commonJS({
  "node_modules/validator/lib/isSemVer.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isSemVer;
    var _assertString = _interopRequireDefault(require_assertString());
    var _multilineRegex = _interopRequireDefault(require_multilineRegex());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var semanticVersioningRegex = (0, _multilineRegex.default)(["^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)", "(?:-((?:0|[1-9]\\d*|\\d*[a-z-][0-9a-z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-z-][0-9a-z-]*))*))", "?(?:\\+([0-9a-z-]+(?:\\.[0-9a-z-]+)*))?$"], "i");
    function isSemVer(str) {
      (0, _assertString.default)(str);
      return semanticVersioningRegex.test(str);
    }
    module2.exports = exports.default;
    module2.exports.default = exports.default;
  }
});

// node_modules/class-validator/cjs/decorator/string/IsSemVer.js
var require_IsSemVer = __commonJS({
  "node_modules/class-validator/cjs/decorator/string/IsSemVer.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IsSemVer = exports.isSemVer = exports.IS_SEM_VER = void 0;
    var ValidateBy_1 = require_ValidateBy();
    var isSemVer_1 = __importDefault(require_isSemVer());
    exports.IS_SEM_VER = "isSemVer";
    function isSemVer(value) {
      return typeof value === "string" && isSemVer_1.default(value);
    }
    exports.isSemVer = isSemVer;
    function IsSemVer(validationOptions) {
      return ValidateBy_1.ValidateBy({
        name: exports.IS_SEM_VER,
        validator: {
          validate: (value, args) => isSemVer(value),
          defaultMessage: ValidateBy_1.buildMessage((eachPrefix) => eachPrefix + "$property must be a Semantic Versioning Specification", validationOptions)
        }
      }, validationOptions);
    }
    exports.IsSemVer = IsSemVer;
  }
});

// node_modules/class-validator/cjs/decorator/typechecker/IsBoolean.js
var require_IsBoolean = __commonJS({
  "node_modules/class-validator/cjs/decorator/typechecker/IsBoolean.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IsBoolean = exports.isBoolean = exports.IS_BOOLEAN = void 0;
    var ValidateBy_1 = require_ValidateBy();
    exports.IS_BOOLEAN = "isBoolean";
    function isBoolean(value) {
      return value instanceof Boolean || typeof value === "boolean";
    }
    exports.isBoolean = isBoolean;
    function IsBoolean3(validationOptions) {
      return ValidateBy_1.ValidateBy({
        name: exports.IS_BOOLEAN,
        validator: {
          validate: (value, args) => isBoolean(value),
          defaultMessage: ValidateBy_1.buildMessage((eachPrefix) => eachPrefix + "$property must be a boolean value", validationOptions)
        }
      }, validationOptions);
    }
    exports.IsBoolean = IsBoolean3;
  }
});

// node_modules/class-validator/cjs/decorator/typechecker/IsDate.js
var require_IsDate = __commonJS({
  "node_modules/class-validator/cjs/decorator/typechecker/IsDate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IsDate = exports.isDate = exports.IS_DATE = void 0;
    var ValidateBy_1 = require_ValidateBy();
    exports.IS_DATE = "isDate";
    function isDate(value) {
      return value instanceof Date && !isNaN(value.getTime());
    }
    exports.isDate = isDate;
    function IsDate(validationOptions) {
      return ValidateBy_1.ValidateBy({
        name: exports.IS_DATE,
        validator: {
          validate: (value, args) => isDate(value),
          defaultMessage: ValidateBy_1.buildMessage((eachPrefix) => eachPrefix + "$property must be a Date instance", validationOptions)
        }
      }, validationOptions);
    }
    exports.IsDate = IsDate;
  }
});

// node_modules/class-validator/cjs/decorator/typechecker/IsNumber.js
var require_IsNumber = __commonJS({
  "node_modules/class-validator/cjs/decorator/typechecker/IsNumber.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IsNumber = exports.isNumber = exports.IS_NUMBER = void 0;
    var ValidateBy_1 = require_ValidateBy();
    exports.IS_NUMBER = "isNumber";
    function isNumber(value, options = {}) {
      if (typeof value !== "number") {
        return false;
      }
      if (value === Infinity || value === -Infinity) {
        return options.allowInfinity;
      }
      if (Number.isNaN(value)) {
        return options.allowNaN;
      }
      if (options.maxDecimalPlaces !== void 0) {
        let decimalPlaces = 0;
        if (value % 1 !== 0) {
          decimalPlaces = value.toString().split(".")[1].length;
        }
        if (decimalPlaces > options.maxDecimalPlaces) {
          return false;
        }
      }
      return Number.isFinite(value);
    }
    exports.isNumber = isNumber;
    function IsNumber3(options = {}, validationOptions) {
      return ValidateBy_1.ValidateBy({
        name: exports.IS_NUMBER,
        constraints: [options],
        validator: {
          validate: (value, args) => isNumber(value, args.constraints[0]),
          defaultMessage: ValidateBy_1.buildMessage((eachPrefix) => eachPrefix + "$property must be a number conforming to the specified constraints", validationOptions)
        }
      }, validationOptions);
    }
    exports.IsNumber = IsNumber3;
  }
});

// node_modules/class-validator/cjs/decorator/typechecker/IsEnum.js
var require_IsEnum = __commonJS({
  "node_modules/class-validator/cjs/decorator/typechecker/IsEnum.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IsEnum = exports.isEnum = exports.IS_ENUM = void 0;
    var ValidateBy_1 = require_ValidateBy();
    exports.IS_ENUM = "isEnum";
    function isEnum(value, entity) {
      const enumValues = Object.keys(entity).map((k) => entity[k]);
      return enumValues.indexOf(value) >= 0;
    }
    exports.isEnum = isEnum;
    function IsEnum(entity, validationOptions) {
      return ValidateBy_1.ValidateBy({
        name: exports.IS_ENUM,
        constraints: [entity],
        validator: {
          validate: (value, args) => isEnum(value, args.constraints[0]),
          defaultMessage: ValidateBy_1.buildMessage((eachPrefix) => eachPrefix + "$property must be a valid enum value", validationOptions)
        }
      }, validationOptions);
    }
    exports.IsEnum = IsEnum;
  }
});

// node_modules/class-validator/cjs/decorator/typechecker/IsInt.js
var require_IsInt = __commonJS({
  "node_modules/class-validator/cjs/decorator/typechecker/IsInt.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IsInt = exports.isInt = exports.IS_INT = void 0;
    var ValidateBy_1 = require_ValidateBy();
    exports.IS_INT = "isInt";
    function isInt(val) {
      return typeof val === "number" && Number.isInteger(val);
    }
    exports.isInt = isInt;
    function IsInt(validationOptions) {
      return ValidateBy_1.ValidateBy({
        name: exports.IS_INT,
        validator: {
          validate: (value, args) => isInt(value),
          defaultMessage: ValidateBy_1.buildMessage((eachPrefix) => eachPrefix + "$property must be an integer number", validationOptions)
        }
      }, validationOptions);
    }
    exports.IsInt = IsInt;
  }
});

// node_modules/class-validator/cjs/decorator/typechecker/IsString.js
var require_IsString = __commonJS({
  "node_modules/class-validator/cjs/decorator/typechecker/IsString.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IsString = exports.isString = exports.IS_STRING = void 0;
    var ValidateBy_1 = require_ValidateBy();
    exports.IS_STRING = "isString";
    function isString2(value) {
      return value instanceof String || typeof value === "string";
    }
    exports.isString = isString2;
    function IsString25(validationOptions) {
      return ValidateBy_1.ValidateBy({
        name: exports.IS_STRING,
        validator: {
          validate: (value, args) => isString2(value),
          defaultMessage: ValidateBy_1.buildMessage((eachPrefix) => eachPrefix + "$property must be a string", validationOptions)
        }
      }, validationOptions);
    }
    exports.IsString = IsString25;
  }
});

// node_modules/class-validator/cjs/decorator/typechecker/IsArray.js
var require_IsArray = __commonJS({
  "node_modules/class-validator/cjs/decorator/typechecker/IsArray.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IsArray = exports.isArray = exports.IS_ARRAY = void 0;
    var ValidateBy_1 = require_ValidateBy();
    exports.IS_ARRAY = "isArray";
    function isArray(value) {
      return value instanceof Array;
    }
    exports.isArray = isArray;
    function IsArray(validationOptions) {
      return ValidateBy_1.ValidateBy({
        name: exports.IS_ARRAY,
        validator: {
          validate: (value, args) => isArray(value),
          defaultMessage: ValidateBy_1.buildMessage((eachPrefix) => eachPrefix + "$property must be an array", validationOptions)
        }
      }, validationOptions);
    }
    exports.IsArray = IsArray;
  }
});

// node_modules/class-validator/cjs/decorator/typechecker/IsObject.js
var require_IsObject = __commonJS({
  "node_modules/class-validator/cjs/decorator/typechecker/IsObject.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IsObject = exports.isObject = exports.IS_OBJECT = void 0;
    var ValidateBy_1 = require_ValidateBy();
    exports.IS_OBJECT = "isObject";
    function isObject(value) {
      return value != null && (typeof value === "object" || typeof value === "function") && !Array.isArray(value);
    }
    exports.isObject = isObject;
    function IsObject(validationOptions) {
      return ValidateBy_1.ValidateBy({
        name: exports.IS_OBJECT,
        validator: {
          validate: (value, args) => isObject(value),
          defaultMessage: ValidateBy_1.buildMessage((eachPrefix) => eachPrefix + "$property must be an object", validationOptions)
        }
      }, validationOptions);
    }
    exports.IsObject = IsObject;
  }
});

// node_modules/class-validator/cjs/decorator/array/ArrayContains.js
var require_ArrayContains = __commonJS({
  "node_modules/class-validator/cjs/decorator/array/ArrayContains.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ArrayContains = exports.arrayContains = exports.ARRAY_CONTAINS = void 0;
    var ValidateBy_1 = require_ValidateBy();
    exports.ARRAY_CONTAINS = "arrayContains";
    function arrayContains(array, values) {
      if (!(array instanceof Array))
        return false;
      return values.every((value) => array.indexOf(value) !== -1);
    }
    exports.arrayContains = arrayContains;
    function ArrayContains(values, validationOptions) {
      return ValidateBy_1.ValidateBy({
        name: exports.ARRAY_CONTAINS,
        constraints: [values],
        validator: {
          validate: (value, args) => arrayContains(value, args.constraints[0]),
          defaultMessage: ValidateBy_1.buildMessage((eachPrefix) => eachPrefix + "$property must contain $constraint1 values", validationOptions)
        }
      }, validationOptions);
    }
    exports.ArrayContains = ArrayContains;
  }
});

// node_modules/class-validator/cjs/decorator/array/ArrayNotContains.js
var require_ArrayNotContains = __commonJS({
  "node_modules/class-validator/cjs/decorator/array/ArrayNotContains.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ArrayNotContains = exports.arrayNotContains = exports.ARRAY_NOT_CONTAINS = void 0;
    var ValidateBy_1 = require_ValidateBy();
    exports.ARRAY_NOT_CONTAINS = "arrayNotContains";
    function arrayNotContains(array, values) {
      if (!(array instanceof Array))
        return false;
      return values.every((value) => array.indexOf(value) === -1);
    }
    exports.arrayNotContains = arrayNotContains;
    function ArrayNotContains(values, validationOptions) {
      return ValidateBy_1.ValidateBy({
        name: exports.ARRAY_NOT_CONTAINS,
        constraints: [values],
        validator: {
          validate: (value, args) => arrayNotContains(value, args.constraints[0]),
          defaultMessage: ValidateBy_1.buildMessage((eachPrefix) => eachPrefix + "$property should not contain $constraint1 values", validationOptions)
        }
      }, validationOptions);
    }
    exports.ArrayNotContains = ArrayNotContains;
  }
});

// node_modules/class-validator/cjs/decorator/array/ArrayNotEmpty.js
var require_ArrayNotEmpty = __commonJS({
  "node_modules/class-validator/cjs/decorator/array/ArrayNotEmpty.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ArrayNotEmpty = exports.arrayNotEmpty = exports.ARRAY_NOT_EMPTY = void 0;
    var ValidateBy_1 = require_ValidateBy();
    exports.ARRAY_NOT_EMPTY = "arrayNotEmpty";
    function arrayNotEmpty(array) {
      return array instanceof Array && array.length > 0;
    }
    exports.arrayNotEmpty = arrayNotEmpty;
    function ArrayNotEmpty(validationOptions) {
      return ValidateBy_1.ValidateBy({
        name: exports.ARRAY_NOT_EMPTY,
        validator: {
          validate: (value, args) => arrayNotEmpty(value),
          defaultMessage: ValidateBy_1.buildMessage((eachPrefix) => eachPrefix + "$property should not be empty", validationOptions)
        }
      }, validationOptions);
    }
    exports.ArrayNotEmpty = ArrayNotEmpty;
  }
});

// node_modules/class-validator/cjs/decorator/array/ArrayMinSize.js
var require_ArrayMinSize = __commonJS({
  "node_modules/class-validator/cjs/decorator/array/ArrayMinSize.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ArrayMinSize = exports.arrayMinSize = exports.ARRAY_MIN_SIZE = void 0;
    var ValidateBy_1 = require_ValidateBy();
    exports.ARRAY_MIN_SIZE = "arrayMinSize";
    function arrayMinSize(array, min) {
      return array instanceof Array && array.length >= min;
    }
    exports.arrayMinSize = arrayMinSize;
    function ArrayMinSize(min, validationOptions) {
      return ValidateBy_1.ValidateBy({
        name: exports.ARRAY_MIN_SIZE,
        constraints: [min],
        validator: {
          validate: (value, args) => arrayMinSize(value, args.constraints[0]),
          defaultMessage: ValidateBy_1.buildMessage((eachPrefix) => eachPrefix + "$property must contain at least $constraint1 elements", validationOptions)
        }
      }, validationOptions);
    }
    exports.ArrayMinSize = ArrayMinSize;
  }
});

// node_modules/class-validator/cjs/decorator/array/ArrayMaxSize.js
var require_ArrayMaxSize = __commonJS({
  "node_modules/class-validator/cjs/decorator/array/ArrayMaxSize.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ArrayMaxSize = exports.arrayMaxSize = exports.ARRAY_MAX_SIZE = void 0;
    var ValidateBy_1 = require_ValidateBy();
    exports.ARRAY_MAX_SIZE = "arrayMaxSize";
    function arrayMaxSize(array, max) {
      return array instanceof Array && array.length <= max;
    }
    exports.arrayMaxSize = arrayMaxSize;
    function ArrayMaxSize(max, validationOptions) {
      return ValidateBy_1.ValidateBy({
        name: exports.ARRAY_MAX_SIZE,
        constraints: [max],
        validator: {
          validate: (value, args) => arrayMaxSize(value, args.constraints[0]),
          defaultMessage: ValidateBy_1.buildMessage((eachPrefix) => eachPrefix + "$property must contain not more than $constraint1 elements", validationOptions)
        }
      }, validationOptions);
    }
    exports.ArrayMaxSize = ArrayMaxSize;
  }
});

// node_modules/class-validator/cjs/decorator/array/ArrayUnique.js
var require_ArrayUnique = __commonJS({
  "node_modules/class-validator/cjs/decorator/array/ArrayUnique.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ArrayUnique = exports.arrayUnique = exports.ARRAY_UNIQUE = void 0;
    var ValidateBy_1 = require_ValidateBy();
    exports.ARRAY_UNIQUE = "arrayUnique";
    function arrayUnique(array, identifier) {
      if (!(array instanceof Array))
        return false;
      if (identifier) {
        array = array.map((o) => o != null ? identifier(o) : o);
      }
      const uniqueItems = array.filter((a, b, c) => c.indexOf(a) === b);
      return array.length === uniqueItems.length;
    }
    exports.arrayUnique = arrayUnique;
    function ArrayUnique(identifierOrOptions, validationOptions) {
      const identifier = typeof identifierOrOptions === "function" ? identifierOrOptions : void 0;
      const options = typeof identifierOrOptions !== "function" ? identifierOrOptions : validationOptions;
      return ValidateBy_1.ValidateBy({
        name: exports.ARRAY_UNIQUE,
        validator: {
          validate: (value, args) => arrayUnique(value, identifier),
          defaultMessage: ValidateBy_1.buildMessage((eachPrefix) => eachPrefix + "All $property's elements must be unique", options)
        }
      }, options);
    }
    exports.ArrayUnique = ArrayUnique;
  }
});

// node_modules/class-validator/cjs/decorator/object/IsNotEmptyObject.js
var require_IsNotEmptyObject = __commonJS({
  "node_modules/class-validator/cjs/decorator/object/IsNotEmptyObject.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IsNotEmptyObject = exports.isNotEmptyObject = exports.IS_NOT_EMPTY_OBJECT = void 0;
    var ValidateBy_1 = require_ValidateBy();
    var IsObject_1 = require_IsObject();
    exports.IS_NOT_EMPTY_OBJECT = "isNotEmptyObject";
    function isNotEmptyObject(value, options) {
      if (!IsObject_1.isObject(value)) {
        return false;
      }
      if ((options === null || options === void 0 ? void 0 : options.nullable) === true) {
        return !Object.values(value).every((propertyValue) => propertyValue === null || propertyValue === void 0);
      }
      for (const key in value) {
        if (value.hasOwnProperty(key)) {
          return true;
        }
      }
      return false;
    }
    exports.isNotEmptyObject = isNotEmptyObject;
    function IsNotEmptyObject(options, validationOptions) {
      return ValidateBy_1.ValidateBy({
        name: exports.IS_NOT_EMPTY_OBJECT,
        constraints: [options],
        validator: {
          validate: (value, args) => isNotEmptyObject(value, args.constraints[0]),
          defaultMessage: ValidateBy_1.buildMessage((eachPrefix) => eachPrefix + "$property must be a non-empty object", validationOptions)
        }
      }, validationOptions);
    }
    exports.IsNotEmptyObject = IsNotEmptyObject;
  }
});

// node_modules/class-validator/cjs/decorator/object/IsInstance.js
var require_IsInstance = __commonJS({
  "node_modules/class-validator/cjs/decorator/object/IsInstance.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IsInstance = exports.isInstance = exports.IS_INSTANCE = void 0;
    var ValidateBy_1 = require_ValidateBy();
    exports.IS_INSTANCE = "isInstance";
    function isInstance(object, targetTypeConstructor) {
      return targetTypeConstructor && typeof targetTypeConstructor === "function" && object instanceof targetTypeConstructor;
    }
    exports.isInstance = isInstance;
    function IsInstance(targetType, validationOptions) {
      return ValidateBy_1.ValidateBy({
        name: exports.IS_INSTANCE,
        constraints: [targetType],
        validator: {
          validate: (value, args) => isInstance(value, args.constraints[0]),
          defaultMessage: ValidateBy_1.buildMessage((eachPrefix, args) => {
            if (args.constraints[0]) {
              return eachPrefix + `$property must be an instance of ${args.constraints[0].name}`;
            } else {
              return eachPrefix + `${exports.IS_INSTANCE} decorator expects and object as value, but got falsy value.`;
            }
          }, validationOptions)
        }
      }, validationOptions);
    }
    exports.IsInstance = IsInstance;
  }
});

// node_modules/class-validator/cjs/decorator/decorators.js
var require_decorators2 = __commonJS({
  "node_modules/class-validator/cjs/decorator/decorators.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_Allow(), exports);
    __exportStar(require_IsDefined(), exports);
    __exportStar(require_IsOptional(), exports);
    __exportStar(require_Validate(), exports);
    __exportStar(require_ValidateBy(), exports);
    __exportStar(require_ValidateIf(), exports);
    __exportStar(require_ValidateNested(), exports);
    __exportStar(require_ValidatePromise(), exports);
    __exportStar(require_IsLatLong(), exports);
    __exportStar(require_IsLatitude(), exports);
    __exportStar(require_IsLongitude(), exports);
    __exportStar(require_Equals(), exports);
    __exportStar(require_NotEquals(), exports);
    __exportStar(require_IsEmpty(), exports);
    __exportStar(require_IsNotEmpty(), exports);
    __exportStar(require_IsIn(), exports);
    __exportStar(require_IsNotIn(), exports);
    __exportStar(require_IsDivisibleBy(), exports);
    __exportStar(require_IsPositive(), exports);
    __exportStar(require_IsNegative(), exports);
    __exportStar(require_Max(), exports);
    __exportStar(require_Min(), exports);
    __exportStar(require_MinDate(), exports);
    __exportStar(require_MaxDate(), exports);
    __exportStar(require_Contains(), exports);
    __exportStar(require_NotContains(), exports);
    __exportStar(require_IsAlpha(), exports);
    __exportStar(require_IsAlphanumeric(), exports);
    __exportStar(require_IsDecimal(), exports);
    __exportStar(require_IsAscii(), exports);
    __exportStar(require_IsBase64(), exports);
    __exportStar(require_IsByteLength(), exports);
    __exportStar(require_IsCreditCard(), exports);
    __exportStar(require_IsCurrency(), exports);
    __exportStar(require_IsEmail(), exports);
    __exportStar(require_IsFQDN(), exports);
    __exportStar(require_IsFullWidth(), exports);
    __exportStar(require_IsHalfWidth(), exports);
    __exportStar(require_IsVariableWidth(), exports);
    __exportStar(require_IsHexColor(), exports);
    __exportStar(require_IsHexadecimal(), exports);
    __exportStar(require_IsMacAddress(), exports);
    __exportStar(require_IsIP(), exports);
    __exportStar(require_IsPort(), exports);
    __exportStar(require_IsISBN(), exports);
    __exportStar(require_IsISIN(), exports);
    __exportStar(require_IsISO8601(), exports);
    __exportStar(require_IsJSON(), exports);
    __exportStar(require_IsJWT(), exports);
    __exportStar(require_IsLowercase(), exports);
    __exportStar(require_IsMobilePhone(), exports);
    __exportStar(require_IsISO31661Alpha2(), exports);
    __exportStar(require_IsISO31661Alpha3(), exports);
    __exportStar(require_IsMongoId(), exports);
    __exportStar(require_IsMultibyte(), exports);
    __exportStar(require_IsSurrogatePair(), exports);
    __exportStar(require_IsUrl(), exports);
    __exportStar(require_IsUUID(), exports);
    __exportStar(require_IsFirebasePushId(), exports);
    __exportStar(require_IsUppercase(), exports);
    __exportStar(require_Length(), exports);
    __exportStar(require_MaxLength(), exports);
    __exportStar(require_MinLength(), exports);
    __exportStar(require_Matches(), exports);
    __exportStar(require_IsPhoneNumber(), exports);
    __exportStar(require_IsMilitaryTime(), exports);
    __exportStar(require_IsHash(), exports);
    __exportStar(require_IsISSN(), exports);
    __exportStar(require_IsDateString(), exports);
    __exportStar(require_IsBooleanString(), exports);
    __exportStar(require_IsNumberString(), exports);
    __exportStar(require_IsBase32(), exports);
    __exportStar(require_IsBIC(), exports);
    __exportStar(require_IsBtcAddress(), exports);
    __exportStar(require_IsDataURI(), exports);
    __exportStar(require_IsEAN(), exports);
    __exportStar(require_IsEthereumAddress(), exports);
    __exportStar(require_IsHSL(), exports);
    __exportStar(require_IsIBAN(), exports);
    __exportStar(require_IsIdentityCard(), exports);
    __exportStar(require_IsISRC(), exports);
    __exportStar(require_IsLocale(), exports);
    __exportStar(require_IsMagnetURI(), exports);
    __exportStar(require_IsMimeType(), exports);
    __exportStar(require_IsOctal(), exports);
    __exportStar(require_IsPassportNumber(), exports);
    __exportStar(require_IsPostalCode(), exports);
    __exportStar(require_IsRFC3339(), exports);
    __exportStar(require_IsRgbColor(), exports);
    __exportStar(require_IsSemVer(), exports);
    __exportStar(require_IsBoolean(), exports);
    __exportStar(require_IsDate(), exports);
    __exportStar(require_IsNumber(), exports);
    __exportStar(require_IsEnum(), exports);
    __exportStar(require_IsInt(), exports);
    __exportStar(require_IsString(), exports);
    __exportStar(require_IsArray(), exports);
    __exportStar(require_IsObject(), exports);
    __exportStar(require_ArrayContains(), exports);
    __exportStar(require_ArrayNotContains(), exports);
    __exportStar(require_ArrayNotEmpty(), exports);
    __exportStar(require_ArrayMinSize(), exports);
    __exportStar(require_ArrayMaxSize(), exports);
    __exportStar(require_ArrayUnique(), exports);
    __exportStar(require_IsNotEmptyObject(), exports);
    __exportStar(require_IsInstance(), exports);
  }
});

// node_modules/class-validator/cjs/validation/ValidatorConstraintInterface.js
var require_ValidatorConstraintInterface = __commonJS({
  "node_modules/class-validator/cjs/validation/ValidatorConstraintInterface.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/class-validator/cjs/validation/ValidatorOptions.js
var require_ValidatorOptions = __commonJS({
  "node_modules/class-validator/cjs/validation/ValidatorOptions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/class-validator/cjs/validation/ValidationArguments.js
var require_ValidationArguments = __commonJS({
  "node_modules/class-validator/cjs/validation/ValidationArguments.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/class-validator/cjs/validation-schema/ValidationSchema.js
var require_ValidationSchema = __commonJS({
  "node_modules/class-validator/cjs/validation-schema/ValidationSchema.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/class-validator/cjs/index.js
var require_cjs2 = __commonJS({
  "node_modules/class-validator/cjs/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.registerSchema = exports.validateSync = exports.validateOrReject = exports.validate = void 0;
    var MetadataStorage_1 = require_MetadataStorage2();
    var Validator_1 = require_Validator();
    var container_1 = require_container();
    __exportStar(require_container(), exports);
    __exportStar(require_decorators2(), exports);
    __exportStar(require_ValidationOptions(), exports);
    __exportStar(require_ValidatorConstraintInterface(), exports);
    __exportStar(require_ValidationError(), exports);
    __exportStar(require_ValidatorOptions(), exports);
    __exportStar(require_ValidationArguments(), exports);
    __exportStar(require_ValidationTypes(), exports);
    __exportStar(require_Validator(), exports);
    __exportStar(require_ValidationSchema(), exports);
    __exportStar(require_register_decorator(), exports);
    __exportStar(require_MetadataStorage2(), exports);
    function validate2(schemaNameOrObject, objectOrValidationOptions, maybeValidatorOptions) {
      if (typeof schemaNameOrObject === "string") {
        return container_1.getFromContainer(Validator_1.Validator).validate(schemaNameOrObject, objectOrValidationOptions, maybeValidatorOptions);
      } else {
        return container_1.getFromContainer(Validator_1.Validator).validate(schemaNameOrObject, objectOrValidationOptions);
      }
    }
    exports.validate = validate2;
    function validateOrReject(schemaNameOrObject, objectOrValidationOptions, maybeValidatorOptions) {
      if (typeof schemaNameOrObject === "string") {
        return container_1.getFromContainer(Validator_1.Validator).validateOrReject(schemaNameOrObject, objectOrValidationOptions, maybeValidatorOptions);
      } else {
        return container_1.getFromContainer(Validator_1.Validator).validateOrReject(schemaNameOrObject, objectOrValidationOptions);
      }
    }
    exports.validateOrReject = validateOrReject;
    function validateSync(schemaNameOrObject, objectOrValidationOptions, maybeValidatorOptions) {
      if (typeof schemaNameOrObject === "string") {
        return container_1.getFromContainer(Validator_1.Validator).validateSync(schemaNameOrObject, objectOrValidationOptions, maybeValidatorOptions);
      } else {
        return container_1.getFromContainer(Validator_1.Validator).validateSync(schemaNameOrObject, objectOrValidationOptions);
      }
    }
    exports.validateSync = validateSync;
    function registerSchema(schema) {
      MetadataStorage_1.getMetadataStorage().addValidationSchema(schema);
    }
    exports.registerSchema = registerSchema;
  }
});

// node_modules/source-map/lib/base64.js
var require_base64 = __commonJS({
  "node_modules/source-map/lib/base64.js"(exports) {
    var intToCharMap = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split("");
    exports.encode = function(number) {
      if (0 <= number && number < intToCharMap.length) {
        return intToCharMap[number];
      }
      throw new TypeError("Must be between 0 and 63: " + number);
    };
    exports.decode = function(charCode) {
      var bigA = 65;
      var bigZ = 90;
      var littleA = 97;
      var littleZ = 122;
      var zero = 48;
      var nine = 57;
      var plus = 43;
      var slash = 47;
      var littleOffset = 26;
      var numberOffset = 52;
      if (bigA <= charCode && charCode <= bigZ) {
        return charCode - bigA;
      }
      if (littleA <= charCode && charCode <= littleZ) {
        return charCode - littleA + littleOffset;
      }
      if (zero <= charCode && charCode <= nine) {
        return charCode - zero + numberOffset;
      }
      if (charCode == plus) {
        return 62;
      }
      if (charCode == slash) {
        return 63;
      }
      return -1;
    };
  }
});

// node_modules/source-map/lib/base64-vlq.js
var require_base64_vlq = __commonJS({
  "node_modules/source-map/lib/base64-vlq.js"(exports) {
    var base64 = require_base64();
    var VLQ_BASE_SHIFT = 5;
    var VLQ_BASE = 1 << VLQ_BASE_SHIFT;
    var VLQ_BASE_MASK = VLQ_BASE - 1;
    var VLQ_CONTINUATION_BIT = VLQ_BASE;
    function toVLQSigned(aValue) {
      return aValue < 0 ? (-aValue << 1) + 1 : (aValue << 1) + 0;
    }
    function fromVLQSigned(aValue) {
      var isNegative = (aValue & 1) === 1;
      var shifted = aValue >> 1;
      return isNegative ? -shifted : shifted;
    }
    exports.encode = function base64VLQ_encode(aValue) {
      var encoded = "";
      var digit;
      var vlq = toVLQSigned(aValue);
      do {
        digit = vlq & VLQ_BASE_MASK;
        vlq >>>= VLQ_BASE_SHIFT;
        if (vlq > 0) {
          digit |= VLQ_CONTINUATION_BIT;
        }
        encoded += base64.encode(digit);
      } while (vlq > 0);
      return encoded;
    };
    exports.decode = function base64VLQ_decode(aStr, aIndex, aOutParam) {
      var strLen = aStr.length;
      var result = 0;
      var shift = 0;
      var continuation, digit;
      do {
        if (aIndex >= strLen) {
          throw new Error("Expected more digits in base 64 VLQ value.");
        }
        digit = base64.decode(aStr.charCodeAt(aIndex++));
        if (digit === -1) {
          throw new Error("Invalid base64 digit: " + aStr.charAt(aIndex - 1));
        }
        continuation = !!(digit & VLQ_CONTINUATION_BIT);
        digit &= VLQ_BASE_MASK;
        result = result + (digit << shift);
        shift += VLQ_BASE_SHIFT;
      } while (continuation);
      aOutParam.value = fromVLQSigned(result);
      aOutParam.rest = aIndex;
    };
  }
});

// node_modules/source-map/lib/util.js
var require_util2 = __commonJS({
  "node_modules/source-map/lib/util.js"(exports) {
    function getArg(aArgs, aName, aDefaultValue) {
      if (aName in aArgs) {
        return aArgs[aName];
      } else if (arguments.length === 3) {
        return aDefaultValue;
      } else {
        throw new Error('"' + aName + '" is a required argument.');
      }
    }
    exports.getArg = getArg;
    var urlRegexp = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.-]*)(?::(\d+))?(.*)$/;
    var dataUrlRegexp = /^data:.+\,.+$/;
    function urlParse(aUrl) {
      var match = aUrl.match(urlRegexp);
      if (!match) {
        return null;
      }
      return {
        scheme: match[1],
        auth: match[2],
        host: match[3],
        port: match[4],
        path: match[5]
      };
    }
    exports.urlParse = urlParse;
    function urlGenerate(aParsedUrl) {
      var url = "";
      if (aParsedUrl.scheme) {
        url += aParsedUrl.scheme + ":";
      }
      url += "//";
      if (aParsedUrl.auth) {
        url += aParsedUrl.auth + "@";
      }
      if (aParsedUrl.host) {
        url += aParsedUrl.host;
      }
      if (aParsedUrl.port) {
        url += ":" + aParsedUrl.port;
      }
      if (aParsedUrl.path) {
        url += aParsedUrl.path;
      }
      return url;
    }
    exports.urlGenerate = urlGenerate;
    function normalize(aPath) {
      var path = aPath;
      var url = urlParse(aPath);
      if (url) {
        if (!url.path) {
          return aPath;
        }
        path = url.path;
      }
      var isAbsolute = exports.isAbsolute(path);
      var parts = path.split(/\/+/);
      for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {
        part = parts[i];
        if (part === ".") {
          parts.splice(i, 1);
        } else if (part === "..") {
          up++;
        } else if (up > 0) {
          if (part === "") {
            parts.splice(i + 1, up);
            up = 0;
          } else {
            parts.splice(i, 2);
            up--;
          }
        }
      }
      path = parts.join("/");
      if (path === "") {
        path = isAbsolute ? "/" : ".";
      }
      if (url) {
        url.path = path;
        return urlGenerate(url);
      }
      return path;
    }
    exports.normalize = normalize;
    function join(aRoot, aPath) {
      if (aRoot === "") {
        aRoot = ".";
      }
      if (aPath === "") {
        aPath = ".";
      }
      var aPathUrl = urlParse(aPath);
      var aRootUrl = urlParse(aRoot);
      if (aRootUrl) {
        aRoot = aRootUrl.path || "/";
      }
      if (aPathUrl && !aPathUrl.scheme) {
        if (aRootUrl) {
          aPathUrl.scheme = aRootUrl.scheme;
        }
        return urlGenerate(aPathUrl);
      }
      if (aPathUrl || aPath.match(dataUrlRegexp)) {
        return aPath;
      }
      if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {
        aRootUrl.host = aPath;
        return urlGenerate(aRootUrl);
      }
      var joined = aPath.charAt(0) === "/" ? aPath : normalize(aRoot.replace(/\/+$/, "") + "/" + aPath);
      if (aRootUrl) {
        aRootUrl.path = joined;
        return urlGenerate(aRootUrl);
      }
      return joined;
    }
    exports.join = join;
    exports.isAbsolute = function(aPath) {
      return aPath.charAt(0) === "/" || urlRegexp.test(aPath);
    };
    function relative(aRoot, aPath) {
      if (aRoot === "") {
        aRoot = ".";
      }
      aRoot = aRoot.replace(/\/$/, "");
      var level = 0;
      while (aPath.indexOf(aRoot + "/") !== 0) {
        var index = aRoot.lastIndexOf("/");
        if (index < 0) {
          return aPath;
        }
        aRoot = aRoot.slice(0, index);
        if (aRoot.match(/^([^\/]+:\/)?\/*$/)) {
          return aPath;
        }
        ++level;
      }
      return Array(level + 1).join("../") + aPath.substr(aRoot.length + 1);
    }
    exports.relative = relative;
    var supportsNullProto = function() {
      var obj = Object.create(null);
      return !("__proto__" in obj);
    }();
    function identity(s) {
      return s;
    }
    function toSetString(aStr) {
      if (isProtoString(aStr)) {
        return "$" + aStr;
      }
      return aStr;
    }
    exports.toSetString = supportsNullProto ? identity : toSetString;
    function fromSetString(aStr) {
      if (isProtoString(aStr)) {
        return aStr.slice(1);
      }
      return aStr;
    }
    exports.fromSetString = supportsNullProto ? identity : fromSetString;
    function isProtoString(s) {
      if (!s) {
        return false;
      }
      var length = s.length;
      if (length < 9) {
        return false;
      }
      if (s.charCodeAt(length - 1) !== 95 || s.charCodeAt(length - 2) !== 95 || s.charCodeAt(length - 3) !== 111 || s.charCodeAt(length - 4) !== 116 || s.charCodeAt(length - 5) !== 111 || s.charCodeAt(length - 6) !== 114 || s.charCodeAt(length - 7) !== 112 || s.charCodeAt(length - 8) !== 95 || s.charCodeAt(length - 9) !== 95) {
        return false;
      }
      for (var i = length - 10; i >= 0; i--) {
        if (s.charCodeAt(i) !== 36) {
          return false;
        }
      }
      return true;
    }
    function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {
      var cmp = strcmp(mappingA.source, mappingB.source);
      if (cmp !== 0) {
        return cmp;
      }
      cmp = mappingA.originalLine - mappingB.originalLine;
      if (cmp !== 0) {
        return cmp;
      }
      cmp = mappingA.originalColumn - mappingB.originalColumn;
      if (cmp !== 0 || onlyCompareOriginal) {
        return cmp;
      }
      cmp = mappingA.generatedColumn - mappingB.generatedColumn;
      if (cmp !== 0) {
        return cmp;
      }
      cmp = mappingA.generatedLine - mappingB.generatedLine;
      if (cmp !== 0) {
        return cmp;
      }
      return strcmp(mappingA.name, mappingB.name);
    }
    exports.compareByOriginalPositions = compareByOriginalPositions;
    function compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {
      var cmp = mappingA.generatedLine - mappingB.generatedLine;
      if (cmp !== 0) {
        return cmp;
      }
      cmp = mappingA.generatedColumn - mappingB.generatedColumn;
      if (cmp !== 0 || onlyCompareGenerated) {
        return cmp;
      }
      cmp = strcmp(mappingA.source, mappingB.source);
      if (cmp !== 0) {
        return cmp;
      }
      cmp = mappingA.originalLine - mappingB.originalLine;
      if (cmp !== 0) {
        return cmp;
      }
      cmp = mappingA.originalColumn - mappingB.originalColumn;
      if (cmp !== 0) {
        return cmp;
      }
      return strcmp(mappingA.name, mappingB.name);
    }
    exports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;
    function strcmp(aStr1, aStr2) {
      if (aStr1 === aStr2) {
        return 0;
      }
      if (aStr1 === null) {
        return 1;
      }
      if (aStr2 === null) {
        return -1;
      }
      if (aStr1 > aStr2) {
        return 1;
      }
      return -1;
    }
    function compareByGeneratedPositionsInflated(mappingA, mappingB) {
      var cmp = mappingA.generatedLine - mappingB.generatedLine;
      if (cmp !== 0) {
        return cmp;
      }
      cmp = mappingA.generatedColumn - mappingB.generatedColumn;
      if (cmp !== 0) {
        return cmp;
      }
      cmp = strcmp(mappingA.source, mappingB.source);
      if (cmp !== 0) {
        return cmp;
      }
      cmp = mappingA.originalLine - mappingB.originalLine;
      if (cmp !== 0) {
        return cmp;
      }
      cmp = mappingA.originalColumn - mappingB.originalColumn;
      if (cmp !== 0) {
        return cmp;
      }
      return strcmp(mappingA.name, mappingB.name);
    }
    exports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;
    function parseSourceMapInput(str) {
      return JSON.parse(str.replace(/^\)]}'[^\n]*\n/, ""));
    }
    exports.parseSourceMapInput = parseSourceMapInput;
    function computeSourceURL(sourceRoot, sourceURL, sourceMapURL) {
      sourceURL = sourceURL || "";
      if (sourceRoot) {
        if (sourceRoot[sourceRoot.length - 1] !== "/" && sourceURL[0] !== "/") {
          sourceRoot += "/";
        }
        sourceURL = sourceRoot + sourceURL;
      }
      if (sourceMapURL) {
        var parsed = urlParse(sourceMapURL);
        if (!parsed) {
          throw new Error("sourceMapURL could not be parsed");
        }
        if (parsed.path) {
          var index = parsed.path.lastIndexOf("/");
          if (index >= 0) {
            parsed.path = parsed.path.substring(0, index + 1);
          }
        }
        sourceURL = join(urlGenerate(parsed), sourceURL);
      }
      return normalize(sourceURL);
    }
    exports.computeSourceURL = computeSourceURL;
  }
});

// node_modules/source-map/lib/array-set.js
var require_array_set = __commonJS({
  "node_modules/source-map/lib/array-set.js"(exports) {
    var util2 = require_util2();
    var has = Object.prototype.hasOwnProperty;
    var hasNativeMap = typeof Map !== "undefined";
    function ArraySet() {
      this._array = [];
      this._set = hasNativeMap ? new Map() : Object.create(null);
    }
    ArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {
      var set2 = new ArraySet();
      for (var i = 0, len = aArray.length; i < len; i++) {
        set2.add(aArray[i], aAllowDuplicates);
      }
      return set2;
    };
    ArraySet.prototype.size = function ArraySet_size() {
      return hasNativeMap ? this._set.size : Object.getOwnPropertyNames(this._set).length;
    };
    ArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {
      var sStr = hasNativeMap ? aStr : util2.toSetString(aStr);
      var isDuplicate = hasNativeMap ? this.has(aStr) : has.call(this._set, sStr);
      var idx = this._array.length;
      if (!isDuplicate || aAllowDuplicates) {
        this._array.push(aStr);
      }
      if (!isDuplicate) {
        if (hasNativeMap) {
          this._set.set(aStr, idx);
        } else {
          this._set[sStr] = idx;
        }
      }
    };
    ArraySet.prototype.has = function ArraySet_has(aStr) {
      if (hasNativeMap) {
        return this._set.has(aStr);
      } else {
        var sStr = util2.toSetString(aStr);
        return has.call(this._set, sStr);
      }
    };
    ArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {
      if (hasNativeMap) {
        var idx = this._set.get(aStr);
        if (idx >= 0) {
          return idx;
        }
      } else {
        var sStr = util2.toSetString(aStr);
        if (has.call(this._set, sStr)) {
          return this._set[sStr];
        }
      }
      throw new Error('"' + aStr + '" is not in the set.');
    };
    ArraySet.prototype.at = function ArraySet_at(aIdx) {
      if (aIdx >= 0 && aIdx < this._array.length) {
        return this._array[aIdx];
      }
      throw new Error("No element indexed by " + aIdx);
    };
    ArraySet.prototype.toArray = function ArraySet_toArray() {
      return this._array.slice();
    };
    exports.ArraySet = ArraySet;
  }
});

// node_modules/source-map/lib/mapping-list.js
var require_mapping_list = __commonJS({
  "node_modules/source-map/lib/mapping-list.js"(exports) {
    var util2 = require_util2();
    function generatedPositionAfter(mappingA, mappingB) {
      var lineA = mappingA.generatedLine;
      var lineB = mappingB.generatedLine;
      var columnA = mappingA.generatedColumn;
      var columnB = mappingB.generatedColumn;
      return lineB > lineA || lineB == lineA && columnB >= columnA || util2.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;
    }
    function MappingList() {
      this._array = [];
      this._sorted = true;
      this._last = { generatedLine: -1, generatedColumn: 0 };
    }
    MappingList.prototype.unsortedForEach = function MappingList_forEach(aCallback, aThisArg) {
      this._array.forEach(aCallback, aThisArg);
    };
    MappingList.prototype.add = function MappingList_add(aMapping) {
      if (generatedPositionAfter(this._last, aMapping)) {
        this._last = aMapping;
        this._array.push(aMapping);
      } else {
        this._sorted = false;
        this._array.push(aMapping);
      }
    };
    MappingList.prototype.toArray = function MappingList_toArray() {
      if (!this._sorted) {
        this._array.sort(util2.compareByGeneratedPositionsInflated);
        this._sorted = true;
      }
      return this._array;
    };
    exports.MappingList = MappingList;
  }
});

// node_modules/source-map/lib/source-map-generator.js
var require_source_map_generator = __commonJS({
  "node_modules/source-map/lib/source-map-generator.js"(exports) {
    var base64VLQ = require_base64_vlq();
    var util2 = require_util2();
    var ArraySet = require_array_set().ArraySet;
    var MappingList = require_mapping_list().MappingList;
    function SourceMapGenerator(aArgs) {
      if (!aArgs) {
        aArgs = {};
      }
      this._file = util2.getArg(aArgs, "file", null);
      this._sourceRoot = util2.getArg(aArgs, "sourceRoot", null);
      this._skipValidation = util2.getArg(aArgs, "skipValidation", false);
      this._sources = new ArraySet();
      this._names = new ArraySet();
      this._mappings = new MappingList();
      this._sourcesContents = null;
    }
    SourceMapGenerator.prototype._version = 3;
    SourceMapGenerator.fromSourceMap = function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {
      var sourceRoot = aSourceMapConsumer.sourceRoot;
      var generator = new SourceMapGenerator({
        file: aSourceMapConsumer.file,
        sourceRoot
      });
      aSourceMapConsumer.eachMapping(function(mapping) {
        var newMapping = {
          generated: {
            line: mapping.generatedLine,
            column: mapping.generatedColumn
          }
        };
        if (mapping.source != null) {
          newMapping.source = mapping.source;
          if (sourceRoot != null) {
            newMapping.source = util2.relative(sourceRoot, newMapping.source);
          }
          newMapping.original = {
            line: mapping.originalLine,
            column: mapping.originalColumn
          };
          if (mapping.name != null) {
            newMapping.name = mapping.name;
          }
        }
        generator.addMapping(newMapping);
      });
      aSourceMapConsumer.sources.forEach(function(sourceFile) {
        var sourceRelative = sourceFile;
        if (sourceRoot !== null) {
          sourceRelative = util2.relative(sourceRoot, sourceFile);
        }
        if (!generator._sources.has(sourceRelative)) {
          generator._sources.add(sourceRelative);
        }
        var content = aSourceMapConsumer.sourceContentFor(sourceFile);
        if (content != null) {
          generator.setSourceContent(sourceFile, content);
        }
      });
      return generator;
    };
    SourceMapGenerator.prototype.addMapping = function SourceMapGenerator_addMapping(aArgs) {
      var generated = util2.getArg(aArgs, "generated");
      var original = util2.getArg(aArgs, "original", null);
      var source = util2.getArg(aArgs, "source", null);
      var name2 = util2.getArg(aArgs, "name", null);
      if (!this._skipValidation) {
        this._validateMapping(generated, original, source, name2);
      }
      if (source != null) {
        source = String(source);
        if (!this._sources.has(source)) {
          this._sources.add(source);
        }
      }
      if (name2 != null) {
        name2 = String(name2);
        if (!this._names.has(name2)) {
          this._names.add(name2);
        }
      }
      this._mappings.add({
        generatedLine: generated.line,
        generatedColumn: generated.column,
        originalLine: original != null && original.line,
        originalColumn: original != null && original.column,
        source,
        name: name2
      });
    };
    SourceMapGenerator.prototype.setSourceContent = function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {
      var source = aSourceFile;
      if (this._sourceRoot != null) {
        source = util2.relative(this._sourceRoot, source);
      }
      if (aSourceContent != null) {
        if (!this._sourcesContents) {
          this._sourcesContents = Object.create(null);
        }
        this._sourcesContents[util2.toSetString(source)] = aSourceContent;
      } else if (this._sourcesContents) {
        delete this._sourcesContents[util2.toSetString(source)];
        if (Object.keys(this._sourcesContents).length === 0) {
          this._sourcesContents = null;
        }
      }
    };
    SourceMapGenerator.prototype.applySourceMap = function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {
      var sourceFile = aSourceFile;
      if (aSourceFile == null) {
        if (aSourceMapConsumer.file == null) {
          throw new Error(`SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, or the source map's "file" property. Both were omitted.`);
        }
        sourceFile = aSourceMapConsumer.file;
      }
      var sourceRoot = this._sourceRoot;
      if (sourceRoot != null) {
        sourceFile = util2.relative(sourceRoot, sourceFile);
      }
      var newSources = new ArraySet();
      var newNames = new ArraySet();
      this._mappings.unsortedForEach(function(mapping) {
        if (mapping.source === sourceFile && mapping.originalLine != null) {
          var original = aSourceMapConsumer.originalPositionFor({
            line: mapping.originalLine,
            column: mapping.originalColumn
          });
          if (original.source != null) {
            mapping.source = original.source;
            if (aSourceMapPath != null) {
              mapping.source = util2.join(aSourceMapPath, mapping.source);
            }
            if (sourceRoot != null) {
              mapping.source = util2.relative(sourceRoot, mapping.source);
            }
            mapping.originalLine = original.line;
            mapping.originalColumn = original.column;
            if (original.name != null) {
              mapping.name = original.name;
            }
          }
        }
        var source = mapping.source;
        if (source != null && !newSources.has(source)) {
          newSources.add(source);
        }
        var name2 = mapping.name;
        if (name2 != null && !newNames.has(name2)) {
          newNames.add(name2);
        }
      }, this);
      this._sources = newSources;
      this._names = newNames;
      aSourceMapConsumer.sources.forEach(function(sourceFile2) {
        var content = aSourceMapConsumer.sourceContentFor(sourceFile2);
        if (content != null) {
          if (aSourceMapPath != null) {
            sourceFile2 = util2.join(aSourceMapPath, sourceFile2);
          }
          if (sourceRoot != null) {
            sourceFile2 = util2.relative(sourceRoot, sourceFile2);
          }
          this.setSourceContent(sourceFile2, content);
        }
      }, this);
    };
    SourceMapGenerator.prototype._validateMapping = function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource, aName) {
      if (aOriginal && typeof aOriginal.line !== "number" && typeof aOriginal.column !== "number") {
        throw new Error("original.line and original.column are not numbers -- you probably meant to omit the original mapping entirely and only map the generated position. If so, pass null for the original mapping instead of an object with empty or null values.");
      }
      if (aGenerated && "line" in aGenerated && "column" in aGenerated && aGenerated.line > 0 && aGenerated.column >= 0 && !aOriginal && !aSource && !aName) {
        return;
      } else if (aGenerated && "line" in aGenerated && "column" in aGenerated && aOriginal && "line" in aOriginal && "column" in aOriginal && aGenerated.line > 0 && aGenerated.column >= 0 && aOriginal.line > 0 && aOriginal.column >= 0 && aSource) {
        return;
      } else {
        throw new Error("Invalid mapping: " + JSON.stringify({
          generated: aGenerated,
          source: aSource,
          original: aOriginal,
          name: aName
        }));
      }
    };
    SourceMapGenerator.prototype._serializeMappings = function SourceMapGenerator_serializeMappings() {
      var previousGeneratedColumn = 0;
      var previousGeneratedLine = 1;
      var previousOriginalColumn = 0;
      var previousOriginalLine = 0;
      var previousName = 0;
      var previousSource = 0;
      var result = "";
      var next;
      var mapping;
      var nameIdx;
      var sourceIdx;
      var mappings = this._mappings.toArray();
      for (var i = 0, len = mappings.length; i < len; i++) {
        mapping = mappings[i];
        next = "";
        if (mapping.generatedLine !== previousGeneratedLine) {
          previousGeneratedColumn = 0;
          while (mapping.generatedLine !== previousGeneratedLine) {
            next += ";";
            previousGeneratedLine++;
          }
        } else {
          if (i > 0) {
            if (!util2.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {
              continue;
            }
            next += ",";
          }
        }
        next += base64VLQ.encode(mapping.generatedColumn - previousGeneratedColumn);
        previousGeneratedColumn = mapping.generatedColumn;
        if (mapping.source != null) {
          sourceIdx = this._sources.indexOf(mapping.source);
          next += base64VLQ.encode(sourceIdx - previousSource);
          previousSource = sourceIdx;
          next += base64VLQ.encode(mapping.originalLine - 1 - previousOriginalLine);
          previousOriginalLine = mapping.originalLine - 1;
          next += base64VLQ.encode(mapping.originalColumn - previousOriginalColumn);
          previousOriginalColumn = mapping.originalColumn;
          if (mapping.name != null) {
            nameIdx = this._names.indexOf(mapping.name);
            next += base64VLQ.encode(nameIdx - previousName);
            previousName = nameIdx;
          }
        }
        result += next;
      }
      return result;
    };
    SourceMapGenerator.prototype._generateSourcesContent = function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {
      return aSources.map(function(source) {
        if (!this._sourcesContents) {
          return null;
        }
        if (aSourceRoot != null) {
          source = util2.relative(aSourceRoot, source);
        }
        var key = util2.toSetString(source);
        return Object.prototype.hasOwnProperty.call(this._sourcesContents, key) ? this._sourcesContents[key] : null;
      }, this);
    };
    SourceMapGenerator.prototype.toJSON = function SourceMapGenerator_toJSON() {
      var map = {
        version: this._version,
        sources: this._sources.toArray(),
        names: this._names.toArray(),
        mappings: this._serializeMappings()
      };
      if (this._file != null) {
        map.file = this._file;
      }
      if (this._sourceRoot != null) {
        map.sourceRoot = this._sourceRoot;
      }
      if (this._sourcesContents) {
        map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);
      }
      return map;
    };
    SourceMapGenerator.prototype.toString = function SourceMapGenerator_toString() {
      return JSON.stringify(this.toJSON());
    };
    exports.SourceMapGenerator = SourceMapGenerator;
  }
});

// node_modules/source-map/lib/binary-search.js
var require_binary_search = __commonJS({
  "node_modules/source-map/lib/binary-search.js"(exports) {
    exports.GREATEST_LOWER_BOUND = 1;
    exports.LEAST_UPPER_BOUND = 2;
    function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {
      var mid = Math.floor((aHigh - aLow) / 2) + aLow;
      var cmp = aCompare(aNeedle, aHaystack[mid], true);
      if (cmp === 0) {
        return mid;
      } else if (cmp > 0) {
        if (aHigh - mid > 1) {
          return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);
        }
        if (aBias == exports.LEAST_UPPER_BOUND) {
          return aHigh < aHaystack.length ? aHigh : -1;
        } else {
          return mid;
        }
      } else {
        if (mid - aLow > 1) {
          return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);
        }
        if (aBias == exports.LEAST_UPPER_BOUND) {
          return mid;
        } else {
          return aLow < 0 ? -1 : aLow;
        }
      }
    }
    exports.search = function search(aNeedle, aHaystack, aCompare, aBias) {
      if (aHaystack.length === 0) {
        return -1;
      }
      var index = recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack, aCompare, aBias || exports.GREATEST_LOWER_BOUND);
      if (index < 0) {
        return -1;
      }
      while (index - 1 >= 0) {
        if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {
          break;
        }
        --index;
      }
      return index;
    };
  }
});

// node_modules/source-map/lib/quick-sort.js
var require_quick_sort = __commonJS({
  "node_modules/source-map/lib/quick-sort.js"(exports) {
    function swap(ary, x, y) {
      var temp = ary[x];
      ary[x] = ary[y];
      ary[y] = temp;
    }
    function randomIntInRange(low, high) {
      return Math.round(low + Math.random() * (high - low));
    }
    function doQuickSort(ary, comparator, p, r) {
      if (p < r) {
        var pivotIndex = randomIntInRange(p, r);
        var i = p - 1;
        swap(ary, pivotIndex, r);
        var pivot = ary[r];
        for (var j = p; j < r; j++) {
          if (comparator(ary[j], pivot) <= 0) {
            i += 1;
            swap(ary, i, j);
          }
        }
        swap(ary, i + 1, j);
        var q = i + 1;
        doQuickSort(ary, comparator, p, q - 1);
        doQuickSort(ary, comparator, q + 1, r);
      }
    }
    exports.quickSort = function(ary, comparator) {
      doQuickSort(ary, comparator, 0, ary.length - 1);
    };
  }
});

// node_modules/source-map/lib/source-map-consumer.js
var require_source_map_consumer = __commonJS({
  "node_modules/source-map/lib/source-map-consumer.js"(exports) {
    var util2 = require_util2();
    var binarySearch = require_binary_search();
    var ArraySet = require_array_set().ArraySet;
    var base64VLQ = require_base64_vlq();
    var quickSort = require_quick_sort().quickSort;
    function SourceMapConsumer(aSourceMap, aSourceMapURL) {
      var sourceMap = aSourceMap;
      if (typeof aSourceMap === "string") {
        sourceMap = util2.parseSourceMapInput(aSourceMap);
      }
      return sourceMap.sections != null ? new IndexedSourceMapConsumer(sourceMap, aSourceMapURL) : new BasicSourceMapConsumer(sourceMap, aSourceMapURL);
    }
    SourceMapConsumer.fromSourceMap = function(aSourceMap, aSourceMapURL) {
      return BasicSourceMapConsumer.fromSourceMap(aSourceMap, aSourceMapURL);
    };
    SourceMapConsumer.prototype._version = 3;
    SourceMapConsumer.prototype.__generatedMappings = null;
    Object.defineProperty(SourceMapConsumer.prototype, "_generatedMappings", {
      configurable: true,
      enumerable: true,
      get: function() {
        if (!this.__generatedMappings) {
          this._parseMappings(this._mappings, this.sourceRoot);
        }
        return this.__generatedMappings;
      }
    });
    SourceMapConsumer.prototype.__originalMappings = null;
    Object.defineProperty(SourceMapConsumer.prototype, "_originalMappings", {
      configurable: true,
      enumerable: true,
      get: function() {
        if (!this.__originalMappings) {
          this._parseMappings(this._mappings, this.sourceRoot);
        }
        return this.__originalMappings;
      }
    });
    SourceMapConsumer.prototype._charIsMappingSeparator = function SourceMapConsumer_charIsMappingSeparator(aStr, index) {
      var c = aStr.charAt(index);
      return c === ";" || c === ",";
    };
    SourceMapConsumer.prototype._parseMappings = function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
      throw new Error("Subclasses must implement _parseMappings");
    };
    SourceMapConsumer.GENERATED_ORDER = 1;
    SourceMapConsumer.ORIGINAL_ORDER = 2;
    SourceMapConsumer.GREATEST_LOWER_BOUND = 1;
    SourceMapConsumer.LEAST_UPPER_BOUND = 2;
    SourceMapConsumer.prototype.eachMapping = function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {
      var context = aContext || null;
      var order = aOrder || SourceMapConsumer.GENERATED_ORDER;
      var mappings;
      switch (order) {
        case SourceMapConsumer.GENERATED_ORDER:
          mappings = this._generatedMappings;
          break;
        case SourceMapConsumer.ORIGINAL_ORDER:
          mappings = this._originalMappings;
          break;
        default:
          throw new Error("Unknown order of iteration.");
      }
      var sourceRoot = this.sourceRoot;
      mappings.map(function(mapping) {
        var source = mapping.source === null ? null : this._sources.at(mapping.source);
        source = util2.computeSourceURL(sourceRoot, source, this._sourceMapURL);
        return {
          source,
          generatedLine: mapping.generatedLine,
          generatedColumn: mapping.generatedColumn,
          originalLine: mapping.originalLine,
          originalColumn: mapping.originalColumn,
          name: mapping.name === null ? null : this._names.at(mapping.name)
        };
      }, this).forEach(aCallback, context);
    };
    SourceMapConsumer.prototype.allGeneratedPositionsFor = function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {
      var line = util2.getArg(aArgs, "line");
      var needle = {
        source: util2.getArg(aArgs, "source"),
        originalLine: line,
        originalColumn: util2.getArg(aArgs, "column", 0)
      };
      needle.source = this._findSourceIndex(needle.source);
      if (needle.source < 0) {
        return [];
      }
      var mappings = [];
      var index = this._findMapping(needle, this._originalMappings, "originalLine", "originalColumn", util2.compareByOriginalPositions, binarySearch.LEAST_UPPER_BOUND);
      if (index >= 0) {
        var mapping = this._originalMappings[index];
        if (aArgs.column === void 0) {
          var originalLine = mapping.originalLine;
          while (mapping && mapping.originalLine === originalLine) {
            mappings.push({
              line: util2.getArg(mapping, "generatedLine", null),
              column: util2.getArg(mapping, "generatedColumn", null),
              lastColumn: util2.getArg(mapping, "lastGeneratedColumn", null)
            });
            mapping = this._originalMappings[++index];
          }
        } else {
          var originalColumn = mapping.originalColumn;
          while (mapping && mapping.originalLine === line && mapping.originalColumn == originalColumn) {
            mappings.push({
              line: util2.getArg(mapping, "generatedLine", null),
              column: util2.getArg(mapping, "generatedColumn", null),
              lastColumn: util2.getArg(mapping, "lastGeneratedColumn", null)
            });
            mapping = this._originalMappings[++index];
          }
        }
      }
      return mappings;
    };
    exports.SourceMapConsumer = SourceMapConsumer;
    function BasicSourceMapConsumer(aSourceMap, aSourceMapURL) {
      var sourceMap = aSourceMap;
      if (typeof aSourceMap === "string") {
        sourceMap = util2.parseSourceMapInput(aSourceMap);
      }
      var version2 = util2.getArg(sourceMap, "version");
      var sources = util2.getArg(sourceMap, "sources");
      var names = util2.getArg(sourceMap, "names", []);
      var sourceRoot = util2.getArg(sourceMap, "sourceRoot", null);
      var sourcesContent = util2.getArg(sourceMap, "sourcesContent", null);
      var mappings = util2.getArg(sourceMap, "mappings");
      var file = util2.getArg(sourceMap, "file", null);
      if (version2 != this._version) {
        throw new Error("Unsupported version: " + version2);
      }
      if (sourceRoot) {
        sourceRoot = util2.normalize(sourceRoot);
      }
      sources = sources.map(String).map(util2.normalize).map(function(source) {
        return sourceRoot && util2.isAbsolute(sourceRoot) && util2.isAbsolute(source) ? util2.relative(sourceRoot, source) : source;
      });
      this._names = ArraySet.fromArray(names.map(String), true);
      this._sources = ArraySet.fromArray(sources, true);
      this._absoluteSources = this._sources.toArray().map(function(s) {
        return util2.computeSourceURL(sourceRoot, s, aSourceMapURL);
      });
      this.sourceRoot = sourceRoot;
      this.sourcesContent = sourcesContent;
      this._mappings = mappings;
      this._sourceMapURL = aSourceMapURL;
      this.file = file;
    }
    BasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
    BasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;
    BasicSourceMapConsumer.prototype._findSourceIndex = function(aSource) {
      var relativeSource = aSource;
      if (this.sourceRoot != null) {
        relativeSource = util2.relative(this.sourceRoot, relativeSource);
      }
      if (this._sources.has(relativeSource)) {
        return this._sources.indexOf(relativeSource);
      }
      var i;
      for (i = 0; i < this._absoluteSources.length; ++i) {
        if (this._absoluteSources[i] == aSource) {
          return i;
        }
      }
      return -1;
    };
    BasicSourceMapConsumer.fromSourceMap = function SourceMapConsumer_fromSourceMap(aSourceMap, aSourceMapURL) {
      var smc = Object.create(BasicSourceMapConsumer.prototype);
      var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);
      var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);
      smc.sourceRoot = aSourceMap._sourceRoot;
      smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(), smc.sourceRoot);
      smc.file = aSourceMap._file;
      smc._sourceMapURL = aSourceMapURL;
      smc._absoluteSources = smc._sources.toArray().map(function(s) {
        return util2.computeSourceURL(smc.sourceRoot, s, aSourceMapURL);
      });
      var generatedMappings = aSourceMap._mappings.toArray().slice();
      var destGeneratedMappings = smc.__generatedMappings = [];
      var destOriginalMappings = smc.__originalMappings = [];
      for (var i = 0, length = generatedMappings.length; i < length; i++) {
        var srcMapping = generatedMappings[i];
        var destMapping = new Mapping();
        destMapping.generatedLine = srcMapping.generatedLine;
        destMapping.generatedColumn = srcMapping.generatedColumn;
        if (srcMapping.source) {
          destMapping.source = sources.indexOf(srcMapping.source);
          destMapping.originalLine = srcMapping.originalLine;
          destMapping.originalColumn = srcMapping.originalColumn;
          if (srcMapping.name) {
            destMapping.name = names.indexOf(srcMapping.name);
          }
          destOriginalMappings.push(destMapping);
        }
        destGeneratedMappings.push(destMapping);
      }
      quickSort(smc.__originalMappings, util2.compareByOriginalPositions);
      return smc;
    };
    BasicSourceMapConsumer.prototype._version = 3;
    Object.defineProperty(BasicSourceMapConsumer.prototype, "sources", {
      get: function() {
        return this._absoluteSources.slice();
      }
    });
    function Mapping() {
      this.generatedLine = 0;
      this.generatedColumn = 0;
      this.source = null;
      this.originalLine = null;
      this.originalColumn = null;
      this.name = null;
    }
    BasicSourceMapConsumer.prototype._parseMappings = function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
      var generatedLine = 1;
      var previousGeneratedColumn = 0;
      var previousOriginalLine = 0;
      var previousOriginalColumn = 0;
      var previousSource = 0;
      var previousName = 0;
      var length = aStr.length;
      var index = 0;
      var cachedSegments = {};
      var temp = {};
      var originalMappings = [];
      var generatedMappings = [];
      var mapping, str, segment, end, value;
      while (index < length) {
        if (aStr.charAt(index) === ";") {
          generatedLine++;
          index++;
          previousGeneratedColumn = 0;
        } else if (aStr.charAt(index) === ",") {
          index++;
        } else {
          mapping = new Mapping();
          mapping.generatedLine = generatedLine;
          for (end = index; end < length; end++) {
            if (this._charIsMappingSeparator(aStr, end)) {
              break;
            }
          }
          str = aStr.slice(index, end);
          segment = cachedSegments[str];
          if (segment) {
            index += str.length;
          } else {
            segment = [];
            while (index < end) {
              base64VLQ.decode(aStr, index, temp);
              value = temp.value;
              index = temp.rest;
              segment.push(value);
            }
            if (segment.length === 2) {
              throw new Error("Found a source, but no line and column");
            }
            if (segment.length === 3) {
              throw new Error("Found a source and line, but no column");
            }
            cachedSegments[str] = segment;
          }
          mapping.generatedColumn = previousGeneratedColumn + segment[0];
          previousGeneratedColumn = mapping.generatedColumn;
          if (segment.length > 1) {
            mapping.source = previousSource + segment[1];
            previousSource += segment[1];
            mapping.originalLine = previousOriginalLine + segment[2];
            previousOriginalLine = mapping.originalLine;
            mapping.originalLine += 1;
            mapping.originalColumn = previousOriginalColumn + segment[3];
            previousOriginalColumn = mapping.originalColumn;
            if (segment.length > 4) {
              mapping.name = previousName + segment[4];
              previousName += segment[4];
            }
          }
          generatedMappings.push(mapping);
          if (typeof mapping.originalLine === "number") {
            originalMappings.push(mapping);
          }
        }
      }
      quickSort(generatedMappings, util2.compareByGeneratedPositionsDeflated);
      this.__generatedMappings = generatedMappings;
      quickSort(originalMappings, util2.compareByOriginalPositions);
      this.__originalMappings = originalMappings;
    };
    BasicSourceMapConsumer.prototype._findMapping = function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName, aColumnName, aComparator, aBias) {
      if (aNeedle[aLineName] <= 0) {
        throw new TypeError("Line must be greater than or equal to 1, got " + aNeedle[aLineName]);
      }
      if (aNeedle[aColumnName] < 0) {
        throw new TypeError("Column must be greater than or equal to 0, got " + aNeedle[aColumnName]);
      }
      return binarySearch.search(aNeedle, aMappings, aComparator, aBias);
    };
    BasicSourceMapConsumer.prototype.computeColumnSpans = function SourceMapConsumer_computeColumnSpans() {
      for (var index = 0; index < this._generatedMappings.length; ++index) {
        var mapping = this._generatedMappings[index];
        if (index + 1 < this._generatedMappings.length) {
          var nextMapping = this._generatedMappings[index + 1];
          if (mapping.generatedLine === nextMapping.generatedLine) {
            mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;
            continue;
          }
        }
        mapping.lastGeneratedColumn = Infinity;
      }
    };
    BasicSourceMapConsumer.prototype.originalPositionFor = function SourceMapConsumer_originalPositionFor(aArgs) {
      var needle = {
        generatedLine: util2.getArg(aArgs, "line"),
        generatedColumn: util2.getArg(aArgs, "column")
      };
      var index = this._findMapping(needle, this._generatedMappings, "generatedLine", "generatedColumn", util2.compareByGeneratedPositionsDeflated, util2.getArg(aArgs, "bias", SourceMapConsumer.GREATEST_LOWER_BOUND));
      if (index >= 0) {
        var mapping = this._generatedMappings[index];
        if (mapping.generatedLine === needle.generatedLine) {
          var source = util2.getArg(mapping, "source", null);
          if (source !== null) {
            source = this._sources.at(source);
            source = util2.computeSourceURL(this.sourceRoot, source, this._sourceMapURL);
          }
          var name2 = util2.getArg(mapping, "name", null);
          if (name2 !== null) {
            name2 = this._names.at(name2);
          }
          return {
            source,
            line: util2.getArg(mapping, "originalLine", null),
            column: util2.getArg(mapping, "originalColumn", null),
            name: name2
          };
        }
      }
      return {
        source: null,
        line: null,
        column: null,
        name: null
      };
    };
    BasicSourceMapConsumer.prototype.hasContentsOfAllSources = function BasicSourceMapConsumer_hasContentsOfAllSources() {
      if (!this.sourcesContent) {
        return false;
      }
      return this.sourcesContent.length >= this._sources.size() && !this.sourcesContent.some(function(sc) {
        return sc == null;
      });
    };
    BasicSourceMapConsumer.prototype.sourceContentFor = function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
      if (!this.sourcesContent) {
        return null;
      }
      var index = this._findSourceIndex(aSource);
      if (index >= 0) {
        return this.sourcesContent[index];
      }
      var relativeSource = aSource;
      if (this.sourceRoot != null) {
        relativeSource = util2.relative(this.sourceRoot, relativeSource);
      }
      var url;
      if (this.sourceRoot != null && (url = util2.urlParse(this.sourceRoot))) {
        var fileUriAbsPath = relativeSource.replace(/^file:\/\//, "");
        if (url.scheme == "file" && this._sources.has(fileUriAbsPath)) {
          return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)];
        }
        if ((!url.path || url.path == "/") && this._sources.has("/" + relativeSource)) {
          return this.sourcesContent[this._sources.indexOf("/" + relativeSource)];
        }
      }
      if (nullOnMissing) {
        return null;
      } else {
        throw new Error('"' + relativeSource + '" is not in the SourceMap.');
      }
    };
    BasicSourceMapConsumer.prototype.generatedPositionFor = function SourceMapConsumer_generatedPositionFor(aArgs) {
      var source = util2.getArg(aArgs, "source");
      source = this._findSourceIndex(source);
      if (source < 0) {
        return {
          line: null,
          column: null,
          lastColumn: null
        };
      }
      var needle = {
        source,
        originalLine: util2.getArg(aArgs, "line"),
        originalColumn: util2.getArg(aArgs, "column")
      };
      var index = this._findMapping(needle, this._originalMappings, "originalLine", "originalColumn", util2.compareByOriginalPositions, util2.getArg(aArgs, "bias", SourceMapConsumer.GREATEST_LOWER_BOUND));
      if (index >= 0) {
        var mapping = this._originalMappings[index];
        if (mapping.source === needle.source) {
          return {
            line: util2.getArg(mapping, "generatedLine", null),
            column: util2.getArg(mapping, "generatedColumn", null),
            lastColumn: util2.getArg(mapping, "lastGeneratedColumn", null)
          };
        }
      }
      return {
        line: null,
        column: null,
        lastColumn: null
      };
    };
    exports.BasicSourceMapConsumer = BasicSourceMapConsumer;
    function IndexedSourceMapConsumer(aSourceMap, aSourceMapURL) {
      var sourceMap = aSourceMap;
      if (typeof aSourceMap === "string") {
        sourceMap = util2.parseSourceMapInput(aSourceMap);
      }
      var version2 = util2.getArg(sourceMap, "version");
      var sections = util2.getArg(sourceMap, "sections");
      if (version2 != this._version) {
        throw new Error("Unsupported version: " + version2);
      }
      this._sources = new ArraySet();
      this._names = new ArraySet();
      var lastOffset = {
        line: -1,
        column: 0
      };
      this._sections = sections.map(function(s) {
        if (s.url) {
          throw new Error("Support for url field in sections not implemented.");
        }
        var offset = util2.getArg(s, "offset");
        var offsetLine = util2.getArg(offset, "line");
        var offsetColumn = util2.getArg(offset, "column");
        if (offsetLine < lastOffset.line || offsetLine === lastOffset.line && offsetColumn < lastOffset.column) {
          throw new Error("Section offsets must be ordered and non-overlapping.");
        }
        lastOffset = offset;
        return {
          generatedOffset: {
            generatedLine: offsetLine + 1,
            generatedColumn: offsetColumn + 1
          },
          consumer: new SourceMapConsumer(util2.getArg(s, "map"), aSourceMapURL)
        };
      });
    }
    IndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
    IndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;
    IndexedSourceMapConsumer.prototype._version = 3;
    Object.defineProperty(IndexedSourceMapConsumer.prototype, "sources", {
      get: function() {
        var sources = [];
        for (var i = 0; i < this._sections.length; i++) {
          for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {
            sources.push(this._sections[i].consumer.sources[j]);
          }
        }
        return sources;
      }
    });
    IndexedSourceMapConsumer.prototype.originalPositionFor = function IndexedSourceMapConsumer_originalPositionFor(aArgs) {
      var needle = {
        generatedLine: util2.getArg(aArgs, "line"),
        generatedColumn: util2.getArg(aArgs, "column")
      };
      var sectionIndex = binarySearch.search(needle, this._sections, function(needle2, section2) {
        var cmp = needle2.generatedLine - section2.generatedOffset.generatedLine;
        if (cmp) {
          return cmp;
        }
        return needle2.generatedColumn - section2.generatedOffset.generatedColumn;
      });
      var section = this._sections[sectionIndex];
      if (!section) {
        return {
          source: null,
          line: null,
          column: null,
          name: null
        };
      }
      return section.consumer.originalPositionFor({
        line: needle.generatedLine - (section.generatedOffset.generatedLine - 1),
        column: needle.generatedColumn - (section.generatedOffset.generatedLine === needle.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),
        bias: aArgs.bias
      });
    };
    IndexedSourceMapConsumer.prototype.hasContentsOfAllSources = function IndexedSourceMapConsumer_hasContentsOfAllSources() {
      return this._sections.every(function(s) {
        return s.consumer.hasContentsOfAllSources();
      });
    };
    IndexedSourceMapConsumer.prototype.sourceContentFor = function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
      for (var i = 0; i < this._sections.length; i++) {
        var section = this._sections[i];
        var content = section.consumer.sourceContentFor(aSource, true);
        if (content) {
          return content;
        }
      }
      if (nullOnMissing) {
        return null;
      } else {
        throw new Error('"' + aSource + '" is not in the SourceMap.');
      }
    };
    IndexedSourceMapConsumer.prototype.generatedPositionFor = function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {
      for (var i = 0; i < this._sections.length; i++) {
        var section = this._sections[i];
        if (section.consumer._findSourceIndex(util2.getArg(aArgs, "source")) === -1) {
          continue;
        }
        var generatedPosition = section.consumer.generatedPositionFor(aArgs);
        if (generatedPosition) {
          var ret = {
            line: generatedPosition.line + (section.generatedOffset.generatedLine - 1),
            column: generatedPosition.column + (section.generatedOffset.generatedLine === generatedPosition.line ? section.generatedOffset.generatedColumn - 1 : 0)
          };
          return ret;
        }
      }
      return {
        line: null,
        column: null
      };
    };
    IndexedSourceMapConsumer.prototype._parseMappings = function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {
      this.__generatedMappings = [];
      this.__originalMappings = [];
      for (var i = 0; i < this._sections.length; i++) {
        var section = this._sections[i];
        var sectionMappings = section.consumer._generatedMappings;
        for (var j = 0; j < sectionMappings.length; j++) {
          var mapping = sectionMappings[j];
          var source = section.consumer._sources.at(mapping.source);
          source = util2.computeSourceURL(section.consumer.sourceRoot, source, this._sourceMapURL);
          this._sources.add(source);
          source = this._sources.indexOf(source);
          var name2 = null;
          if (mapping.name) {
            name2 = section.consumer._names.at(mapping.name);
            this._names.add(name2);
            name2 = this._names.indexOf(name2);
          }
          var adjustedMapping = {
            source,
            generatedLine: mapping.generatedLine + (section.generatedOffset.generatedLine - 1),
            generatedColumn: mapping.generatedColumn + (section.generatedOffset.generatedLine === mapping.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),
            originalLine: mapping.originalLine,
            originalColumn: mapping.originalColumn,
            name: name2
          };
          this.__generatedMappings.push(adjustedMapping);
          if (typeof adjustedMapping.originalLine === "number") {
            this.__originalMappings.push(adjustedMapping);
          }
        }
      }
      quickSort(this.__generatedMappings, util2.compareByGeneratedPositionsDeflated);
      quickSort(this.__originalMappings, util2.compareByOriginalPositions);
    };
    exports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;
  }
});

// node_modules/source-map/lib/source-node.js
var require_source_node = __commonJS({
  "node_modules/source-map/lib/source-node.js"(exports) {
    var SourceMapGenerator = require_source_map_generator().SourceMapGenerator;
    var util2 = require_util2();
    var REGEX_NEWLINE = /(\r?\n)/;
    var NEWLINE_CODE = 10;
    var isSourceNode = "$$$isSourceNode$$$";
    function SourceNode(aLine, aColumn, aSource, aChunks, aName) {
      this.children = [];
      this.sourceContents = {};
      this.line = aLine == null ? null : aLine;
      this.column = aColumn == null ? null : aColumn;
      this.source = aSource == null ? null : aSource;
      this.name = aName == null ? null : aName;
      this[isSourceNode] = true;
      if (aChunks != null)
        this.add(aChunks);
    }
    SourceNode.fromStringWithSourceMap = function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {
      var node = new SourceNode();
      var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);
      var remainingLinesIndex = 0;
      var shiftNextLine = function() {
        var lineContents = getNextLine();
        var newLine = getNextLine() || "";
        return lineContents + newLine;
        function getNextLine() {
          return remainingLinesIndex < remainingLines.length ? remainingLines[remainingLinesIndex++] : void 0;
        }
      };
      var lastGeneratedLine = 1, lastGeneratedColumn = 0;
      var lastMapping = null;
      aSourceMapConsumer.eachMapping(function(mapping) {
        if (lastMapping !== null) {
          if (lastGeneratedLine < mapping.generatedLine) {
            addMappingWithCode(lastMapping, shiftNextLine());
            lastGeneratedLine++;
            lastGeneratedColumn = 0;
          } else {
            var nextLine = remainingLines[remainingLinesIndex] || "";
            var code = nextLine.substr(0, mapping.generatedColumn - lastGeneratedColumn);
            remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn - lastGeneratedColumn);
            lastGeneratedColumn = mapping.generatedColumn;
            addMappingWithCode(lastMapping, code);
            lastMapping = mapping;
            return;
          }
        }
        while (lastGeneratedLine < mapping.generatedLine) {
          node.add(shiftNextLine());
          lastGeneratedLine++;
        }
        if (lastGeneratedColumn < mapping.generatedColumn) {
          var nextLine = remainingLines[remainingLinesIndex] || "";
          node.add(nextLine.substr(0, mapping.generatedColumn));
          remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn);
          lastGeneratedColumn = mapping.generatedColumn;
        }
        lastMapping = mapping;
      }, this);
      if (remainingLinesIndex < remainingLines.length) {
        if (lastMapping) {
          addMappingWithCode(lastMapping, shiftNextLine());
        }
        node.add(remainingLines.splice(remainingLinesIndex).join(""));
      }
      aSourceMapConsumer.sources.forEach(function(sourceFile) {
        var content = aSourceMapConsumer.sourceContentFor(sourceFile);
        if (content != null) {
          if (aRelativePath != null) {
            sourceFile = util2.join(aRelativePath, sourceFile);
          }
          node.setSourceContent(sourceFile, content);
        }
      });
      return node;
      function addMappingWithCode(mapping, code) {
        if (mapping === null || mapping.source === void 0) {
          node.add(code);
        } else {
          var source = aRelativePath ? util2.join(aRelativePath, mapping.source) : mapping.source;
          node.add(new SourceNode(mapping.originalLine, mapping.originalColumn, source, code, mapping.name));
        }
      }
    };
    SourceNode.prototype.add = function SourceNode_add(aChunk) {
      if (Array.isArray(aChunk)) {
        aChunk.forEach(function(chunk) {
          this.add(chunk);
        }, this);
      } else if (aChunk[isSourceNode] || typeof aChunk === "string") {
        if (aChunk) {
          this.children.push(aChunk);
        }
      } else {
        throw new TypeError("Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk);
      }
      return this;
    };
    SourceNode.prototype.prepend = function SourceNode_prepend(aChunk) {
      if (Array.isArray(aChunk)) {
        for (var i = aChunk.length - 1; i >= 0; i--) {
          this.prepend(aChunk[i]);
        }
      } else if (aChunk[isSourceNode] || typeof aChunk === "string") {
        this.children.unshift(aChunk);
      } else {
        throw new TypeError("Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk);
      }
      return this;
    };
    SourceNode.prototype.walk = function SourceNode_walk(aFn) {
      var chunk;
      for (var i = 0, len = this.children.length; i < len; i++) {
        chunk = this.children[i];
        if (chunk[isSourceNode]) {
          chunk.walk(aFn);
        } else {
          if (chunk !== "") {
            aFn(chunk, {
              source: this.source,
              line: this.line,
              column: this.column,
              name: this.name
            });
          }
        }
      }
    };
    SourceNode.prototype.join = function SourceNode_join(aSep) {
      var newChildren;
      var i;
      var len = this.children.length;
      if (len > 0) {
        newChildren = [];
        for (i = 0; i < len - 1; i++) {
          newChildren.push(this.children[i]);
          newChildren.push(aSep);
        }
        newChildren.push(this.children[i]);
        this.children = newChildren;
      }
      return this;
    };
    SourceNode.prototype.replaceRight = function SourceNode_replaceRight(aPattern, aReplacement) {
      var lastChild = this.children[this.children.length - 1];
      if (lastChild[isSourceNode]) {
        lastChild.replaceRight(aPattern, aReplacement);
      } else if (typeof lastChild === "string") {
        this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);
      } else {
        this.children.push("".replace(aPattern, aReplacement));
      }
      return this;
    };
    SourceNode.prototype.setSourceContent = function SourceNode_setSourceContent(aSourceFile, aSourceContent) {
      this.sourceContents[util2.toSetString(aSourceFile)] = aSourceContent;
    };
    SourceNode.prototype.walkSourceContents = function SourceNode_walkSourceContents(aFn) {
      for (var i = 0, len = this.children.length; i < len; i++) {
        if (this.children[i][isSourceNode]) {
          this.children[i].walkSourceContents(aFn);
        }
      }
      var sources = Object.keys(this.sourceContents);
      for (var i = 0, len = sources.length; i < len; i++) {
        aFn(util2.fromSetString(sources[i]), this.sourceContents[sources[i]]);
      }
    };
    SourceNode.prototype.toString = function SourceNode_toString() {
      var str = "";
      this.walk(function(chunk) {
        str += chunk;
      });
      return str;
    };
    SourceNode.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(aArgs) {
      var generated = {
        code: "",
        line: 1,
        column: 0
      };
      var map = new SourceMapGenerator(aArgs);
      var sourceMappingActive = false;
      var lastOriginalSource = null;
      var lastOriginalLine = null;
      var lastOriginalColumn = null;
      var lastOriginalName = null;
      this.walk(function(chunk, original) {
        generated.code += chunk;
        if (original.source !== null && original.line !== null && original.column !== null) {
          if (lastOriginalSource !== original.source || lastOriginalLine !== original.line || lastOriginalColumn !== original.column || lastOriginalName !== original.name) {
            map.addMapping({
              source: original.source,
              original: {
                line: original.line,
                column: original.column
              },
              generated: {
                line: generated.line,
                column: generated.column
              },
              name: original.name
            });
          }
          lastOriginalSource = original.source;
          lastOriginalLine = original.line;
          lastOriginalColumn = original.column;
          lastOriginalName = original.name;
          sourceMappingActive = true;
        } else if (sourceMappingActive) {
          map.addMapping({
            generated: {
              line: generated.line,
              column: generated.column
            }
          });
          lastOriginalSource = null;
          sourceMappingActive = false;
        }
        for (var idx = 0, length = chunk.length; idx < length; idx++) {
          if (chunk.charCodeAt(idx) === NEWLINE_CODE) {
            generated.line++;
            generated.column = 0;
            if (idx + 1 === length) {
              lastOriginalSource = null;
              sourceMappingActive = false;
            } else if (sourceMappingActive) {
              map.addMapping({
                source: original.source,
                original: {
                  line: original.line,
                  column: original.column
                },
                generated: {
                  line: generated.line,
                  column: generated.column
                },
                name: original.name
              });
            }
          } else {
            generated.column++;
          }
        }
      });
      this.walkSourceContents(function(sourceFile, sourceContent) {
        map.setSourceContent(sourceFile, sourceContent);
      });
      return { code: generated.code, map };
    };
    exports.SourceNode = SourceNode;
  }
});

// node_modules/source-map/source-map.js
var require_source_map = __commonJS({
  "node_modules/source-map/source-map.js"(exports) {
    exports.SourceMapGenerator = require_source_map_generator().SourceMapGenerator;
    exports.SourceMapConsumer = require_source_map_consumer().SourceMapConsumer;
    exports.SourceNode = require_source_node().SourceNode;
  }
});

// node_modules/source-map-support/source-map-support.js
var require_source_map_support = __commonJS({
  "node_modules/source-map-support/source-map-support.js"(exports, module2) {
    var SourceMapConsumer = require_source_map().SourceMapConsumer;
    var path = require("path");
    var fs;
    try {
      fs = require("fs");
      if (!fs.existsSync || !fs.readFileSync) {
        fs = null;
      }
    } catch (err) {
    }
    var bufferFrom = require_buffer_from();
    function dynamicRequire(mod, request) {
      return mod.require(request);
    }
    var errorFormatterInstalled = false;
    var uncaughtShimInstalled = false;
    var emptyCacheBetweenOperations = false;
    var environment = "auto";
    var fileContentsCache = {};
    var sourceMapCache = {};
    var reSourceMap = /^data:application\/json[^,]+base64,/;
    var retrieveFileHandlers = [];
    var retrieveMapHandlers = [];
    function isInBrowser() {
      if (environment === "browser")
        return true;
      if (environment === "node")
        return false;
      return typeof window !== "undefined" && typeof XMLHttpRequest === "function" && !(window.require && window.module && window.process && window.process.type === "renderer");
    }
    function hasGlobalProcessEventEmitter() {
      return typeof process === "object" && process !== null && typeof process.on === "function";
    }
    function globalProcessVersion() {
      if (typeof process === "object" && process !== null) {
        return process.version;
      } else {
        return "";
      }
    }
    function globalProcessStderr() {
      if (typeof process === "object" && process !== null) {
        return process.stderr;
      }
    }
    function globalProcessExit(code) {
      if (typeof process === "object" && process !== null && typeof process.exit === "function") {
        return process.exit(code);
      }
    }
    function handlerExec(list) {
      return function(arg) {
        for (var i = 0; i < list.length; i++) {
          var ret = list[i](arg);
          if (ret) {
            return ret;
          }
        }
        return null;
      };
    }
    var retrieveFile = handlerExec(retrieveFileHandlers);
    retrieveFileHandlers.push(function(path2) {
      path2 = path2.trim();
      if (/^file:/.test(path2)) {
        path2 = path2.replace(/file:\/\/\/(\w:)?/, function(protocol, drive) {
          return drive ? "" : "/";
        });
      }
      if (path2 in fileContentsCache) {
        return fileContentsCache[path2];
      }
      var contents = "";
      try {
        if (!fs) {
          var xhr = new XMLHttpRequest();
          xhr.open("GET", path2, false);
          xhr.send(null);
          if (xhr.readyState === 4 && xhr.status === 200) {
            contents = xhr.responseText;
          }
        } else if (fs.existsSync(path2)) {
          contents = fs.readFileSync(path2, "utf8");
        }
      } catch (er) {
      }
      return fileContentsCache[path2] = contents;
    });
    function supportRelativeURL(file, url) {
      if (!file)
        return url;
      var dir = path.dirname(file);
      var match = /^\w+:\/\/[^\/]*/.exec(dir);
      var protocol = match ? match[0] : "";
      var startPath = dir.slice(protocol.length);
      if (protocol && /^\/\w\:/.test(startPath)) {
        protocol += "/";
        return protocol + path.resolve(dir.slice(protocol.length), url).replace(/\\/g, "/");
      }
      return protocol + path.resolve(dir.slice(protocol.length), url);
    }
    function retrieveSourceMapURL(source) {
      var fileData;
      if (isInBrowser()) {
        try {
          var xhr = new XMLHttpRequest();
          xhr.open("GET", source, false);
          xhr.send(null);
          fileData = xhr.readyState === 4 ? xhr.responseText : null;
          var sourceMapHeader = xhr.getResponseHeader("SourceMap") || xhr.getResponseHeader("X-SourceMap");
          if (sourceMapHeader) {
            return sourceMapHeader;
          }
        } catch (e) {
        }
      }
      fileData = retrieveFile(source);
      var re = /(?:\/\/[@#][\s]*sourceMappingURL=([^\s'"]+)[\s]*$)|(?:\/\*[@#][\s]*sourceMappingURL=([^\s*'"]+)[\s]*(?:\*\/)[\s]*$)/mg;
      var lastMatch, match;
      while (match = re.exec(fileData))
        lastMatch = match;
      if (!lastMatch)
        return null;
      return lastMatch[1];
    }
    var retrieveSourceMap = handlerExec(retrieveMapHandlers);
    retrieveMapHandlers.push(function(source) {
      var sourceMappingURL = retrieveSourceMapURL(source);
      if (!sourceMappingURL)
        return null;
      var sourceMapData;
      if (reSourceMap.test(sourceMappingURL)) {
        var rawData = sourceMappingURL.slice(sourceMappingURL.indexOf(",") + 1);
        sourceMapData = bufferFrom(rawData, "base64").toString();
        sourceMappingURL = source;
      } else {
        sourceMappingURL = supportRelativeURL(source, sourceMappingURL);
        sourceMapData = retrieveFile(sourceMappingURL);
      }
      if (!sourceMapData) {
        return null;
      }
      return {
        url: sourceMappingURL,
        map: sourceMapData
      };
    });
    function mapSourcePosition(position) {
      var sourceMap = sourceMapCache[position.source];
      if (!sourceMap) {
        var urlAndMap = retrieveSourceMap(position.source);
        if (urlAndMap) {
          sourceMap = sourceMapCache[position.source] = {
            url: urlAndMap.url,
            map: new SourceMapConsumer(urlAndMap.map)
          };
          if (sourceMap.map.sourcesContent) {
            sourceMap.map.sources.forEach(function(source, i) {
              var contents = sourceMap.map.sourcesContent[i];
              if (contents) {
                var url = supportRelativeURL(sourceMap.url, source);
                fileContentsCache[url] = contents;
              }
            });
          }
        } else {
          sourceMap = sourceMapCache[position.source] = {
            url: null,
            map: null
          };
        }
      }
      if (sourceMap && sourceMap.map && typeof sourceMap.map.originalPositionFor === "function") {
        var originalPosition = sourceMap.map.originalPositionFor(position);
        if (originalPosition.source !== null) {
          originalPosition.source = supportRelativeURL(sourceMap.url, originalPosition.source);
          return originalPosition;
        }
      }
      return position;
    }
    function mapEvalOrigin(origin) {
      var match = /^eval at ([^(]+) \((.+):(\d+):(\d+)\)$/.exec(origin);
      if (match) {
        var position = mapSourcePosition({
          source: match[2],
          line: +match[3],
          column: match[4] - 1
        });
        return "eval at " + match[1] + " (" + position.source + ":" + position.line + ":" + (position.column + 1) + ")";
      }
      match = /^eval at ([^(]+) \((.+)\)$/.exec(origin);
      if (match) {
        return "eval at " + match[1] + " (" + mapEvalOrigin(match[2]) + ")";
      }
      return origin;
    }
    function CallSiteToString() {
      var fileName;
      var fileLocation = "";
      if (this.isNative()) {
        fileLocation = "native";
      } else {
        fileName = this.getScriptNameOrSourceURL();
        if (!fileName && this.isEval()) {
          fileLocation = this.getEvalOrigin();
          fileLocation += ", ";
        }
        if (fileName) {
          fileLocation += fileName;
        } else {
          fileLocation += "<anonymous>";
        }
        var lineNumber = this.getLineNumber();
        if (lineNumber != null) {
          fileLocation += ":" + lineNumber;
          var columnNumber = this.getColumnNumber();
          if (columnNumber) {
            fileLocation += ":" + columnNumber;
          }
        }
      }
      var line = "";
      var functionName = this.getFunctionName();
      var addSuffix = true;
      var isConstructor = this.isConstructor();
      var isMethodCall = !(this.isToplevel() || isConstructor);
      if (isMethodCall) {
        var typeName = this.getTypeName();
        if (typeName === "[object Object]") {
          typeName = "null";
        }
        var methodName = this.getMethodName();
        if (functionName) {
          if (typeName && functionName.indexOf(typeName) != 0) {
            line += typeName + ".";
          }
          line += functionName;
          if (methodName && functionName.indexOf("." + methodName) != functionName.length - methodName.length - 1) {
            line += " [as " + methodName + "]";
          }
        } else {
          line += typeName + "." + (methodName || "<anonymous>");
        }
      } else if (isConstructor) {
        line += "new " + (functionName || "<anonymous>");
      } else if (functionName) {
        line += functionName;
      } else {
        line += fileLocation;
        addSuffix = false;
      }
      if (addSuffix) {
        line += " (" + fileLocation + ")";
      }
      return line;
    }
    function cloneCallSite(frame) {
      var object = {};
      Object.getOwnPropertyNames(Object.getPrototypeOf(frame)).forEach(function(name2) {
        object[name2] = /^(?:is|get)/.test(name2) ? function() {
          return frame[name2].call(frame);
        } : frame[name2];
      });
      object.toString = CallSiteToString;
      return object;
    }
    function wrapCallSite(frame, state) {
      if (state === void 0) {
        state = { nextPosition: null, curPosition: null };
      }
      if (frame.isNative()) {
        state.curPosition = null;
        return frame;
      }
      var source = frame.getFileName() || frame.getScriptNameOrSourceURL();
      if (source) {
        var line = frame.getLineNumber();
        var column = frame.getColumnNumber() - 1;
        var noHeader = /^v(10\.1[6-9]|10\.[2-9][0-9]|10\.[0-9]{3,}|1[2-9]\d*|[2-9]\d|\d{3,}|11\.11)/;
        var headerLength = noHeader.test(globalProcessVersion()) ? 0 : 62;
        if (line === 1 && column > headerLength && !isInBrowser() && !frame.isEval()) {
          column -= headerLength;
        }
        var position = mapSourcePosition({
          source,
          line,
          column
        });
        state.curPosition = position;
        frame = cloneCallSite(frame);
        var originalFunctionName = frame.getFunctionName;
        frame.getFunctionName = function() {
          if (state.nextPosition == null) {
            return originalFunctionName();
          }
          return state.nextPosition.name || originalFunctionName();
        };
        frame.getFileName = function() {
          return position.source;
        };
        frame.getLineNumber = function() {
          return position.line;
        };
        frame.getColumnNumber = function() {
          return position.column + 1;
        };
        frame.getScriptNameOrSourceURL = function() {
          return position.source;
        };
        return frame;
      }
      var origin = frame.isEval() && frame.getEvalOrigin();
      if (origin) {
        origin = mapEvalOrigin(origin);
        frame = cloneCallSite(frame);
        frame.getEvalOrigin = function() {
          return origin;
        };
        return frame;
      }
      return frame;
    }
    function prepareStackTrace(error, stack) {
      if (emptyCacheBetweenOperations) {
        fileContentsCache = {};
        sourceMapCache = {};
      }
      var name2 = error.name || "Error";
      var message = error.message || "";
      var errorString = name2 + ": " + message;
      var state = { nextPosition: null, curPosition: null };
      var processedStack = [];
      for (var i = stack.length - 1; i >= 0; i--) {
        processedStack.push("\n    at " + wrapCallSite(stack[i], state));
        state.nextPosition = state.curPosition;
      }
      state.curPosition = state.nextPosition = null;
      return errorString + processedStack.reverse().join("");
    }
    function getErrorSource(error) {
      var match = /\n    at [^(]+ \((.*):(\d+):(\d+)\)/.exec(error.stack);
      if (match) {
        var source = match[1];
        var line = +match[2];
        var column = +match[3];
        var contents = fileContentsCache[source];
        if (!contents && fs && fs.existsSync(source)) {
          try {
            contents = fs.readFileSync(source, "utf8");
          } catch (er) {
            contents = "";
          }
        }
        if (contents) {
          var code = contents.split(/(?:\r\n|\r|\n)/)[line - 1];
          if (code) {
            return source + ":" + line + "\n" + code + "\n" + new Array(column).join(" ") + "^";
          }
        }
      }
      return null;
    }
    function printErrorAndExit(error) {
      var source = getErrorSource(error);
      var stderr = globalProcessStderr();
      if (stderr && stderr._handle && stderr._handle.setBlocking) {
        stderr._handle.setBlocking(true);
      }
      if (source) {
        console.error();
        console.error(source);
      }
      console.error(error.stack);
      globalProcessExit(1);
    }
    function shimEmitUncaughtException() {
      var origEmit = process.emit;
      process.emit = function(type) {
        if (type === "uncaughtException") {
          var hasStack = arguments[1] && arguments[1].stack;
          var hasListeners = this.listeners(type).length > 0;
          if (hasStack && !hasListeners) {
            return printErrorAndExit(arguments[1]);
          }
        }
        return origEmit.apply(this, arguments);
      };
    }
    var originalRetrieveFileHandlers = retrieveFileHandlers.slice(0);
    var originalRetrieveMapHandlers = retrieveMapHandlers.slice(0);
    exports.wrapCallSite = wrapCallSite;
    exports.getErrorSource = getErrorSource;
    exports.mapSourcePosition = mapSourcePosition;
    exports.retrieveSourceMap = retrieveSourceMap;
    exports.install = function(options) {
      options = options || {};
      if (options.environment) {
        environment = options.environment;
        if (["node", "browser", "auto"].indexOf(environment) === -1) {
          throw new Error("environment " + environment + " was unknown. Available options are {auto, browser, node}");
        }
      }
      if (options.retrieveFile) {
        if (options.overrideRetrieveFile) {
          retrieveFileHandlers.length = 0;
        }
        retrieveFileHandlers.unshift(options.retrieveFile);
      }
      if (options.retrieveSourceMap) {
        if (options.overrideRetrieveSourceMap) {
          retrieveMapHandlers.length = 0;
        }
        retrieveMapHandlers.unshift(options.retrieveSourceMap);
      }
      if (options.hookRequire && !isInBrowser()) {
        var Module2 = dynamicRequire(module2, "module");
        var $compile = Module2.prototype._compile;
        if (!$compile.__sourceMapSupport) {
          Module2.prototype._compile = function(content, filename) {
            fileContentsCache[filename] = content;
            sourceMapCache[filename] = void 0;
            return $compile.call(this, content, filename);
          };
          Module2.prototype._compile.__sourceMapSupport = true;
        }
      }
      if (!emptyCacheBetweenOperations) {
        emptyCacheBetweenOperations = "emptyCacheBetweenOperations" in options ? options.emptyCacheBetweenOperations : false;
      }
      if (!errorFormatterInstalled) {
        errorFormatterInstalled = true;
        Error.prepareStackTrace = prepareStackTrace;
      }
      if (!uncaughtShimInstalled) {
        var installHandler = "handleUncaughtExceptions" in options ? options.handleUncaughtExceptions : true;
        try {
          var worker_threads = dynamicRequire(module2, "worker_threads");
          if (worker_threads.isMainThread === false) {
            installHandler = false;
          }
        } catch (e) {
        }
        if (installHandler && hasGlobalProcessEventEmitter()) {
          uncaughtShimInstalled = true;
          shimEmitUncaughtException();
        }
      }
    };
    exports.resetRetrieveHandlers = function() {
      retrieveFileHandlers.length = 0;
      retrieveMapHandlers.length = 0;
      retrieveFileHandlers = originalRetrieveFileHandlers.slice(0);
      retrieveMapHandlers = originalRetrieveMapHandlers.slice(0);
      retrieveSourceMap = handlerExec(retrieveMapHandlers);
      retrieveFile = handlerExec(retrieveFileHandlers);
    };
  }
});

// node_modules/module-alias/index.js
var require_module_alias = __commonJS({
  "node_modules/module-alias/index.js"(exports, module2) {
    "use strict";
    var BuiltinModule = require("module");
    var Module2 = module2.constructor.length > 1 ? module2.constructor : BuiltinModule;
    var nodePath = require("path");
    var modulePaths = [];
    var moduleAliases = {};
    var moduleAliasNames = [];
    var oldNodeModulePaths = Module2._nodeModulePaths;
    Module2._nodeModulePaths = function(from) {
      var paths = oldNodeModulePaths.call(this, from);
      if (from.indexOf("node_modules") === -1) {
        paths = modulePaths.concat(paths);
      }
      return paths;
    };
    var oldResolveFilename = Module2._resolveFilename;
    Module2._resolveFilename = function(request, parentModule, isMain, options) {
      for (var i = moduleAliasNames.length; i-- > 0; ) {
        var alias = moduleAliasNames[i];
        if (isPathMatchesAlias(request, alias)) {
          var aliasTarget = moduleAliases[alias];
          if (typeof moduleAliases[alias] === "function") {
            var fromPath = parentModule.filename;
            aliasTarget = moduleAliases[alias](fromPath, request, alias);
            if (!aliasTarget || typeof aliasTarget !== "string") {
              throw new Error("[module-alias] Expecting custom handler function to return path.");
            }
          }
          request = nodePath.join(aliasTarget, request.substr(alias.length));
          break;
        }
      }
      return oldResolveFilename.call(this, request, parentModule, isMain, options);
    };
    function isPathMatchesAlias(path, alias) {
      if (path.indexOf(alias) === 0) {
        if (path.length === alias.length)
          return true;
        if (path[alias.length] === "/")
          return true;
      }
      return false;
    }
    function addPathHelper(path, targetArray) {
      path = nodePath.normalize(path);
      if (targetArray && targetArray.indexOf(path) === -1) {
        targetArray.unshift(path);
      }
    }
    function removePathHelper(path, targetArray) {
      if (targetArray) {
        var index = targetArray.indexOf(path);
        if (index !== -1) {
          targetArray.splice(index, 1);
        }
      }
    }
    function addPath(path) {
      var parent;
      path = nodePath.normalize(path);
      if (modulePaths.indexOf(path) === -1) {
        modulePaths.push(path);
        var mainModule = getMainModule();
        if (mainModule) {
          addPathHelper(path, mainModule.paths);
        }
        parent = module2.parent;
        while (parent && parent !== mainModule) {
          addPathHelper(path, parent.paths);
          parent = parent.parent;
        }
      }
    }
    function addAliases(aliases) {
      for (var alias in aliases) {
        addAlias(alias, aliases[alias]);
      }
    }
    function addAlias(alias, target) {
      moduleAliases[alias] = target;
      moduleAliasNames = Object.keys(moduleAliases);
      moduleAliasNames.sort();
    }
    function reset() {
      var mainModule = getMainModule();
      modulePaths.forEach(function(path) {
        if (mainModule) {
          removePathHelper(path, mainModule.paths);
        }
        Object.getOwnPropertyNames(require.cache).forEach(function(name2) {
          if (name2.indexOf(path) !== -1) {
            delete require.cache[name2];
          }
        });
        var parent = module2.parent;
        while (parent && parent !== mainModule) {
          removePathHelper(path, parent.paths);
          parent = parent.parent;
        }
      });
      modulePaths = [];
      moduleAliases = {};
      moduleAliasNames = [];
    }
    function init(options) {
      if (typeof options === "string") {
        options = { base: options };
      }
      options = options || {};
      var candidatePackagePaths;
      if (options.base) {
        candidatePackagePaths = [nodePath.resolve(options.base.replace(/\/package\.json$/, ""))];
      } else {
        candidatePackagePaths = [nodePath.join(__dirname, "../.."), process.cwd()];
      }
      var npmPackage;
      var base;
      for (var i in candidatePackagePaths) {
        try {
          base = candidatePackagePaths[i];
          npmPackage = require(nodePath.join(base, "package.json"));
          break;
        } catch (e) {
        }
      }
      if (typeof npmPackage !== "object") {
        var pathString = candidatePackagePaths.join(",\n");
        throw new Error("Unable to find package.json in any of:\n[" + pathString + "]");
      }
      var aliases = npmPackage._moduleAliases || {};
      for (var alias in aliases) {
        if (aliases[alias][0] !== "/") {
          aliases[alias] = nodePath.join(base, aliases[alias]);
        }
      }
      addAliases(aliases);
      if (npmPackage._moduleDirectories instanceof Array) {
        npmPackage._moduleDirectories.forEach(function(dir) {
          if (dir === "node_modules")
            return;
          var modulePath = nodePath.join(base, dir);
          addPath(modulePath);
        });
      }
    }
    function getMainModule() {
      return require.main._simulateRepl ? void 0 : require.main;
    }
    module2.exports = init;
    module2.exports.addPath = addPath;
    module2.exports.addAlias = addAlias;
    module2.exports.addAliases = addAliases;
    module2.exports.isPathMatchesAlias = isPathMatchesAlias;
    module2.exports.reset = reset;
  }
});

// node_modules/module-alias/register.js
var require_register = __commonJS({
  "node_modules/module-alias/register.js"() {
    require_module_alias()();
  }
});

// src/index.ts
__export(exports, {
  default: () => src_default
});

// node_modules/reflect-metadata/Reflect.js
var Reflect2;
(function(Reflect3) {
  (function(factory) {
    var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : Function("return this;")();
    var exporter = makeExporter(Reflect3);
    if (typeof root.Reflect === "undefined") {
      root.Reflect = Reflect3;
    } else {
      exporter = makeExporter(root.Reflect, exporter);
    }
    factory(exporter);
    function makeExporter(target, previous) {
      return function(key, value) {
        if (typeof target[key] !== "function") {
          Object.defineProperty(target, key, { configurable: true, writable: true, value });
        }
        if (previous)
          previous(key, value);
      };
    }
  })(function(exporter) {
    var hasOwn = Object.prototype.hasOwnProperty;
    var supportsSymbol = typeof Symbol === "function";
    var toPrimitiveSymbol = supportsSymbol && typeof Symbol.toPrimitive !== "undefined" ? Symbol.toPrimitive : "@@toPrimitive";
    var iteratorSymbol = supportsSymbol && typeof Symbol.iterator !== "undefined" ? Symbol.iterator : "@@iterator";
    var supportsCreate = typeof Object.create === "function";
    var supportsProto = { __proto__: [] } instanceof Array;
    var downLevel = !supportsCreate && !supportsProto;
    var HashMap = {
      create: supportsCreate ? function() {
        return MakeDictionary(Object.create(null));
      } : supportsProto ? function() {
        return MakeDictionary({ __proto__: null });
      } : function() {
        return MakeDictionary({});
      },
      has: downLevel ? function(map, key) {
        return hasOwn.call(map, key);
      } : function(map, key) {
        return key in map;
      },
      get: downLevel ? function(map, key) {
        return hasOwn.call(map, key) ? map[key] : void 0;
      } : function(map, key) {
        return map[key];
      }
    };
    var functionPrototype = Object.getPrototypeOf(Function);
    var usePolyfill = typeof process === "object" && process.env && process.env["REFLECT_METADATA_USE_MAP_POLYFILL"] === "true";
    var _Map = !usePolyfill && typeof Map === "function" && typeof Map.prototype.entries === "function" ? Map : CreateMapPolyfill();
    var _Set = !usePolyfill && typeof Set === "function" && typeof Set.prototype.entries === "function" ? Set : CreateSetPolyfill();
    var _WeakMap = !usePolyfill && typeof WeakMap === "function" ? WeakMap : CreateWeakMapPolyfill();
    var Metadata = new _WeakMap();
    function decorate(decorators, target, propertyKey, attributes) {
      if (!IsUndefined(propertyKey)) {
        if (!IsArray(decorators))
          throw new TypeError();
        if (!IsObject(target))
          throw new TypeError();
        if (!IsObject(attributes) && !IsUndefined(attributes) && !IsNull(attributes))
          throw new TypeError();
        if (IsNull(attributes))
          attributes = void 0;
        propertyKey = ToPropertyKey(propertyKey);
        return DecorateProperty(decorators, target, propertyKey, attributes);
      } else {
        if (!IsArray(decorators))
          throw new TypeError();
        if (!IsConstructor(target))
          throw new TypeError();
        return DecorateConstructor(decorators, target);
      }
    }
    exporter("decorate", decorate);
    function metadata(metadataKey, metadataValue) {
      function decorator(target, propertyKey) {
        if (!IsObject(target))
          throw new TypeError();
        if (!IsUndefined(propertyKey) && !IsPropertyKey(propertyKey))
          throw new TypeError();
        OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);
      }
      return decorator;
    }
    exporter("metadata", metadata);
    function defineMetadata(metadataKey, metadataValue, target, propertyKey) {
      if (!IsObject(target))
        throw new TypeError();
      if (!IsUndefined(propertyKey))
        propertyKey = ToPropertyKey(propertyKey);
      return OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);
    }
    exporter("defineMetadata", defineMetadata);
    function hasMetadata(metadataKey, target, propertyKey) {
      if (!IsObject(target))
        throw new TypeError();
      if (!IsUndefined(propertyKey))
        propertyKey = ToPropertyKey(propertyKey);
      return OrdinaryHasMetadata(metadataKey, target, propertyKey);
    }
    exporter("hasMetadata", hasMetadata);
    function hasOwnMetadata(metadataKey, target, propertyKey) {
      if (!IsObject(target))
        throw new TypeError();
      if (!IsUndefined(propertyKey))
        propertyKey = ToPropertyKey(propertyKey);
      return OrdinaryHasOwnMetadata(metadataKey, target, propertyKey);
    }
    exporter("hasOwnMetadata", hasOwnMetadata);
    function getMetadata(metadataKey, target, propertyKey) {
      if (!IsObject(target))
        throw new TypeError();
      if (!IsUndefined(propertyKey))
        propertyKey = ToPropertyKey(propertyKey);
      return OrdinaryGetMetadata(metadataKey, target, propertyKey);
    }
    exporter("getMetadata", getMetadata);
    function getOwnMetadata(metadataKey, target, propertyKey) {
      if (!IsObject(target))
        throw new TypeError();
      if (!IsUndefined(propertyKey))
        propertyKey = ToPropertyKey(propertyKey);
      return OrdinaryGetOwnMetadata(metadataKey, target, propertyKey);
    }
    exporter("getOwnMetadata", getOwnMetadata);
    function getMetadataKeys(target, propertyKey) {
      if (!IsObject(target))
        throw new TypeError();
      if (!IsUndefined(propertyKey))
        propertyKey = ToPropertyKey(propertyKey);
      return OrdinaryMetadataKeys(target, propertyKey);
    }
    exporter("getMetadataKeys", getMetadataKeys);
    function getOwnMetadataKeys(target, propertyKey) {
      if (!IsObject(target))
        throw new TypeError();
      if (!IsUndefined(propertyKey))
        propertyKey = ToPropertyKey(propertyKey);
      return OrdinaryOwnMetadataKeys(target, propertyKey);
    }
    exporter("getOwnMetadataKeys", getOwnMetadataKeys);
    function deleteMetadata(metadataKey, target, propertyKey) {
      if (!IsObject(target))
        throw new TypeError();
      if (!IsUndefined(propertyKey))
        propertyKey = ToPropertyKey(propertyKey);
      var metadataMap = GetOrCreateMetadataMap(target, propertyKey, false);
      if (IsUndefined(metadataMap))
        return false;
      if (!metadataMap.delete(metadataKey))
        return false;
      if (metadataMap.size > 0)
        return true;
      var targetMetadata = Metadata.get(target);
      targetMetadata.delete(propertyKey);
      if (targetMetadata.size > 0)
        return true;
      Metadata.delete(target);
      return true;
    }
    exporter("deleteMetadata", deleteMetadata);
    function DecorateConstructor(decorators, target) {
      for (var i = decorators.length - 1; i >= 0; --i) {
        var decorator = decorators[i];
        var decorated = decorator(target);
        if (!IsUndefined(decorated) && !IsNull(decorated)) {
          if (!IsConstructor(decorated))
            throw new TypeError();
          target = decorated;
        }
      }
      return target;
    }
    function DecorateProperty(decorators, target, propertyKey, descriptor) {
      for (var i = decorators.length - 1; i >= 0; --i) {
        var decorator = decorators[i];
        var decorated = decorator(target, propertyKey, descriptor);
        if (!IsUndefined(decorated) && !IsNull(decorated)) {
          if (!IsObject(decorated))
            throw new TypeError();
          descriptor = decorated;
        }
      }
      return descriptor;
    }
    function GetOrCreateMetadataMap(O, P, Create) {
      var targetMetadata = Metadata.get(O);
      if (IsUndefined(targetMetadata)) {
        if (!Create)
          return void 0;
        targetMetadata = new _Map();
        Metadata.set(O, targetMetadata);
      }
      var metadataMap = targetMetadata.get(P);
      if (IsUndefined(metadataMap)) {
        if (!Create)
          return void 0;
        metadataMap = new _Map();
        targetMetadata.set(P, metadataMap);
      }
      return metadataMap;
    }
    function OrdinaryHasMetadata(MetadataKey, O, P) {
      var hasOwn2 = OrdinaryHasOwnMetadata(MetadataKey, O, P);
      if (hasOwn2)
        return true;
      var parent = OrdinaryGetPrototypeOf(O);
      if (!IsNull(parent))
        return OrdinaryHasMetadata(MetadataKey, parent, P);
      return false;
    }
    function OrdinaryHasOwnMetadata(MetadataKey, O, P) {
      var metadataMap = GetOrCreateMetadataMap(O, P, false);
      if (IsUndefined(metadataMap))
        return false;
      return ToBoolean(metadataMap.has(MetadataKey));
    }
    function OrdinaryGetMetadata(MetadataKey, O, P) {
      var hasOwn2 = OrdinaryHasOwnMetadata(MetadataKey, O, P);
      if (hasOwn2)
        return OrdinaryGetOwnMetadata(MetadataKey, O, P);
      var parent = OrdinaryGetPrototypeOf(O);
      if (!IsNull(parent))
        return OrdinaryGetMetadata(MetadataKey, parent, P);
      return void 0;
    }
    function OrdinaryGetOwnMetadata(MetadataKey, O, P) {
      var metadataMap = GetOrCreateMetadataMap(O, P, false);
      if (IsUndefined(metadataMap))
        return void 0;
      return metadataMap.get(MetadataKey);
    }
    function OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P) {
      var metadataMap = GetOrCreateMetadataMap(O, P, true);
      metadataMap.set(MetadataKey, MetadataValue);
    }
    function OrdinaryMetadataKeys(O, P) {
      var ownKeys = OrdinaryOwnMetadataKeys(O, P);
      var parent = OrdinaryGetPrototypeOf(O);
      if (parent === null)
        return ownKeys;
      var parentKeys = OrdinaryMetadataKeys(parent, P);
      if (parentKeys.length <= 0)
        return ownKeys;
      if (ownKeys.length <= 0)
        return parentKeys;
      var set2 = new _Set();
      var keys = [];
      for (var _i = 0, ownKeys_1 = ownKeys; _i < ownKeys_1.length; _i++) {
        var key = ownKeys_1[_i];
        var hasKey = set2.has(key);
        if (!hasKey) {
          set2.add(key);
          keys.push(key);
        }
      }
      for (var _a = 0, parentKeys_1 = parentKeys; _a < parentKeys_1.length; _a++) {
        var key = parentKeys_1[_a];
        var hasKey = set2.has(key);
        if (!hasKey) {
          set2.add(key);
          keys.push(key);
        }
      }
      return keys;
    }
    function OrdinaryOwnMetadataKeys(O, P) {
      var keys = [];
      var metadataMap = GetOrCreateMetadataMap(O, P, false);
      if (IsUndefined(metadataMap))
        return keys;
      var keysObj = metadataMap.keys();
      var iterator = GetIterator(keysObj);
      var k = 0;
      while (true) {
        var next = IteratorStep(iterator);
        if (!next) {
          keys.length = k;
          return keys;
        }
        var nextValue = IteratorValue(next);
        try {
          keys[k] = nextValue;
        } catch (e) {
          try {
            IteratorClose(iterator);
          } finally {
            throw e;
          }
        }
        k++;
      }
    }
    function Type(x) {
      if (x === null)
        return 1;
      switch (typeof x) {
        case "undefined":
          return 0;
        case "boolean":
          return 2;
        case "string":
          return 3;
        case "symbol":
          return 4;
        case "number":
          return 5;
        case "object":
          return x === null ? 1 : 6;
        default:
          return 6;
      }
    }
    function IsUndefined(x) {
      return x === void 0;
    }
    function IsNull(x) {
      return x === null;
    }
    function IsSymbol(x) {
      return typeof x === "symbol";
    }
    function IsObject(x) {
      return typeof x === "object" ? x !== null : typeof x === "function";
    }
    function ToPrimitive(input, PreferredType) {
      switch (Type(input)) {
        case 0:
          return input;
        case 1:
          return input;
        case 2:
          return input;
        case 3:
          return input;
        case 4:
          return input;
        case 5:
          return input;
      }
      var hint = PreferredType === 3 ? "string" : PreferredType === 5 ? "number" : "default";
      var exoticToPrim = GetMethod(input, toPrimitiveSymbol);
      if (exoticToPrim !== void 0) {
        var result = exoticToPrim.call(input, hint);
        if (IsObject(result))
          throw new TypeError();
        return result;
      }
      return OrdinaryToPrimitive(input, hint === "default" ? "number" : hint);
    }
    function OrdinaryToPrimitive(O, hint) {
      if (hint === "string") {
        var toString_1 = O.toString;
        if (IsCallable(toString_1)) {
          var result = toString_1.call(O);
          if (!IsObject(result))
            return result;
        }
        var valueOf = O.valueOf;
        if (IsCallable(valueOf)) {
          var result = valueOf.call(O);
          if (!IsObject(result))
            return result;
        }
      } else {
        var valueOf = O.valueOf;
        if (IsCallable(valueOf)) {
          var result = valueOf.call(O);
          if (!IsObject(result))
            return result;
        }
        var toString_2 = O.toString;
        if (IsCallable(toString_2)) {
          var result = toString_2.call(O);
          if (!IsObject(result))
            return result;
        }
      }
      throw new TypeError();
    }
    function ToBoolean(argument) {
      return !!argument;
    }
    function ToString(argument) {
      return "" + argument;
    }
    function ToPropertyKey(argument) {
      var key = ToPrimitive(argument, 3);
      if (IsSymbol(key))
        return key;
      return ToString(key);
    }
    function IsArray(argument) {
      return Array.isArray ? Array.isArray(argument) : argument instanceof Object ? argument instanceof Array : Object.prototype.toString.call(argument) === "[object Array]";
    }
    function IsCallable(argument) {
      return typeof argument === "function";
    }
    function IsConstructor(argument) {
      return typeof argument === "function";
    }
    function IsPropertyKey(argument) {
      switch (Type(argument)) {
        case 3:
          return true;
        case 4:
          return true;
        default:
          return false;
      }
    }
    function GetMethod(V, P) {
      var func = V[P];
      if (func === void 0 || func === null)
        return void 0;
      if (!IsCallable(func))
        throw new TypeError();
      return func;
    }
    function GetIterator(obj) {
      var method = GetMethod(obj, iteratorSymbol);
      if (!IsCallable(method))
        throw new TypeError();
      var iterator = method.call(obj);
      if (!IsObject(iterator))
        throw new TypeError();
      return iterator;
    }
    function IteratorValue(iterResult) {
      return iterResult.value;
    }
    function IteratorStep(iterator) {
      var result = iterator.next();
      return result.done ? false : result;
    }
    function IteratorClose(iterator) {
      var f = iterator["return"];
      if (f)
        f.call(iterator);
    }
    function OrdinaryGetPrototypeOf(O) {
      var proto = Object.getPrototypeOf(O);
      if (typeof O !== "function" || O === functionPrototype)
        return proto;
      if (proto !== functionPrototype)
        return proto;
      var prototype = O.prototype;
      var prototypeProto = prototype && Object.getPrototypeOf(prototype);
      if (prototypeProto == null || prototypeProto === Object.prototype)
        return proto;
      var constructor = prototypeProto.constructor;
      if (typeof constructor !== "function")
        return proto;
      if (constructor === O)
        return proto;
      return constructor;
    }
    function CreateMapPolyfill() {
      var cacheSentinel = {};
      var arraySentinel = [];
      var MapIterator = function() {
        function MapIterator2(keys, values, selector) {
          this._index = 0;
          this._keys = keys;
          this._values = values;
          this._selector = selector;
        }
        MapIterator2.prototype["@@iterator"] = function() {
          return this;
        };
        MapIterator2.prototype[iteratorSymbol] = function() {
          return this;
        };
        MapIterator2.prototype.next = function() {
          var index = this._index;
          if (index >= 0 && index < this._keys.length) {
            var result = this._selector(this._keys[index], this._values[index]);
            if (index + 1 >= this._keys.length) {
              this._index = -1;
              this._keys = arraySentinel;
              this._values = arraySentinel;
            } else {
              this._index++;
            }
            return { value: result, done: false };
          }
          return { value: void 0, done: true };
        };
        MapIterator2.prototype.throw = function(error) {
          if (this._index >= 0) {
            this._index = -1;
            this._keys = arraySentinel;
            this._values = arraySentinel;
          }
          throw error;
        };
        MapIterator2.prototype.return = function(value) {
          if (this._index >= 0) {
            this._index = -1;
            this._keys = arraySentinel;
            this._values = arraySentinel;
          }
          return { value, done: true };
        };
        return MapIterator2;
      }();
      return function() {
        function Map2() {
          this._keys = [];
          this._values = [];
          this._cacheKey = cacheSentinel;
          this._cacheIndex = -2;
        }
        Object.defineProperty(Map2.prototype, "size", {
          get: function() {
            return this._keys.length;
          },
          enumerable: true,
          configurable: true
        });
        Map2.prototype.has = function(key) {
          return this._find(key, false) >= 0;
        };
        Map2.prototype.get = function(key) {
          var index = this._find(key, false);
          return index >= 0 ? this._values[index] : void 0;
        };
        Map2.prototype.set = function(key, value) {
          var index = this._find(key, true);
          this._values[index] = value;
          return this;
        };
        Map2.prototype.delete = function(key) {
          var index = this._find(key, false);
          if (index >= 0) {
            var size = this._keys.length;
            for (var i = index + 1; i < size; i++) {
              this._keys[i - 1] = this._keys[i];
              this._values[i - 1] = this._values[i];
            }
            this._keys.length--;
            this._values.length--;
            if (key === this._cacheKey) {
              this._cacheKey = cacheSentinel;
              this._cacheIndex = -2;
            }
            return true;
          }
          return false;
        };
        Map2.prototype.clear = function() {
          this._keys.length = 0;
          this._values.length = 0;
          this._cacheKey = cacheSentinel;
          this._cacheIndex = -2;
        };
        Map2.prototype.keys = function() {
          return new MapIterator(this._keys, this._values, getKey);
        };
        Map2.prototype.values = function() {
          return new MapIterator(this._keys, this._values, getValue);
        };
        Map2.prototype.entries = function() {
          return new MapIterator(this._keys, this._values, getEntry);
        };
        Map2.prototype["@@iterator"] = function() {
          return this.entries();
        };
        Map2.prototype[iteratorSymbol] = function() {
          return this.entries();
        };
        Map2.prototype._find = function(key, insert) {
          if (this._cacheKey !== key) {
            this._cacheIndex = this._keys.indexOf(this._cacheKey = key);
          }
          if (this._cacheIndex < 0 && insert) {
            this._cacheIndex = this._keys.length;
            this._keys.push(key);
            this._values.push(void 0);
          }
          return this._cacheIndex;
        };
        return Map2;
      }();
      function getKey(key, _) {
        return key;
      }
      function getValue(_, value) {
        return value;
      }
      function getEntry(key, value) {
        return [key, value];
      }
    }
    function CreateSetPolyfill() {
      return function() {
        function Set2() {
          this._map = new _Map();
        }
        Object.defineProperty(Set2.prototype, "size", {
          get: function() {
            return this._map.size;
          },
          enumerable: true,
          configurable: true
        });
        Set2.prototype.has = function(value) {
          return this._map.has(value);
        };
        Set2.prototype.add = function(value) {
          return this._map.set(value, value), this;
        };
        Set2.prototype.delete = function(value) {
          return this._map.delete(value);
        };
        Set2.prototype.clear = function() {
          this._map.clear();
        };
        Set2.prototype.keys = function() {
          return this._map.keys();
        };
        Set2.prototype.values = function() {
          return this._map.values();
        };
        Set2.prototype.entries = function() {
          return this._map.entries();
        };
        Set2.prototype["@@iterator"] = function() {
          return this.keys();
        };
        Set2.prototype[iteratorSymbol] = function() {
          return this.keys();
        };
        return Set2;
      }();
    }
    function CreateWeakMapPolyfill() {
      var UUID_SIZE = 16;
      var keys = HashMap.create();
      var rootKey = CreateUniqueKey();
      return function() {
        function WeakMap2() {
          this._key = CreateUniqueKey();
        }
        WeakMap2.prototype.has = function(target) {
          var table = GetOrCreateWeakMapTable(target, false);
          return table !== void 0 ? HashMap.has(table, this._key) : false;
        };
        WeakMap2.prototype.get = function(target) {
          var table = GetOrCreateWeakMapTable(target, false);
          return table !== void 0 ? HashMap.get(table, this._key) : void 0;
        };
        WeakMap2.prototype.set = function(target, value) {
          var table = GetOrCreateWeakMapTable(target, true);
          table[this._key] = value;
          return this;
        };
        WeakMap2.prototype.delete = function(target) {
          var table = GetOrCreateWeakMapTable(target, false);
          return table !== void 0 ? delete table[this._key] : false;
        };
        WeakMap2.prototype.clear = function() {
          this._key = CreateUniqueKey();
        };
        return WeakMap2;
      }();
      function CreateUniqueKey() {
        var key;
        do
          key = "@@WeakMap@@" + CreateUUID();
        while (HashMap.has(keys, key));
        keys[key] = true;
        return key;
      }
      function GetOrCreateWeakMapTable(target, create) {
        if (!hasOwn.call(target, rootKey)) {
          if (!create)
            return void 0;
          Object.defineProperty(target, rootKey, { value: HashMap.create() });
        }
        return target[rootKey];
      }
      function FillRandomBytes(buffer, size) {
        for (var i = 0; i < size; ++i)
          buffer[i] = Math.random() * 255 | 0;
        return buffer;
      }
      function GenRandomBytes(size) {
        if (typeof Uint8Array === "function") {
          if (typeof crypto !== "undefined")
            return crypto.getRandomValues(new Uint8Array(size));
          if (typeof msCrypto !== "undefined")
            return msCrypto.getRandomValues(new Uint8Array(size));
          return FillRandomBytes(new Uint8Array(size), size);
        }
        return FillRandomBytes(new Array(size), size);
      }
      function CreateUUID() {
        var data = GenRandomBytes(UUID_SIZE);
        data[6] = data[6] & 79 | 64;
        data[8] = data[8] & 191 | 128;
        var result = "";
        for (var offset = 0; offset < UUID_SIZE; ++offset) {
          var byte = data[offset];
          if (offset === 4 || offset === 6 || offset === 8)
            result += "-";
          if (byte < 16)
            result += "0";
          result += byte.toString(16).toLowerCase();
        }
        return result;
      }
    }
    function MakeDictionary(obj) {
      obj.__ = void 0;
      delete obj.__;
      return obj;
    }
  });
})(Reflect2 || (Reflect2 = {}));

// src/mini-tornado/utils/sdk.ts
var import_server_sdk = __toModule(require_dist());
var MockSDK = __toModule(require_dist2());
var {
  DEFAULT_CODE_TYPES,
  dateFormatter: cloudDateFormatter,
  transformBeijingDate: cloudTransformBeijingDate,
  getStartTimestamp,
  getEndTimestamp,
  ResultsModel
} = import_server_sdk.Utils;
var resultsModel = new ResultsModel();
var env = process.argv[2];
var IS_MOCK_ENV = env === "mock";
var TBAPIS2 = IS_MOCK_ENV ? MockSDK.TBAPIS : import_server_sdk.TBAPI;
var BaseDao2 = IS_MOCK_ENV ? MockSDK.BaseDao : import_server_sdk.BaseDao;
var transformBeijingDate2 = IS_MOCK_ENV ? MockSDK.transformBeijingDate : cloudTransformBeijingDate;
var dateFormatter2 = IS_MOCK_ENV ? MockSDK.dateFormatter : cloudDateFormatter;

// src/mini-tornado/middlewares/getMoudlesUser.ts
var import_lodash = __toModule(require_lodash());
async function getMoudlesUser(ctx, next) {
  var _a, _b, _c, _d, _e;
  const { _depServices, _projectConfig } = ctx;
  const {
    data: { activityId },
    openId
  } = ctx;
  const allUserDao = _depServices.map((Service) => {
    var _a2, _b2, _c2;
    const instanceName = (0, import_lodash.lowerFirst)(Service.name);
    const moduleName = instanceName.replace("Service", "");
    const moduleConfig = (_a2 = _projectConfig == null ? void 0 : _projectConfig.modulesConfig) == null ? void 0 : _a2[moduleName];
    const hasUser = !!((_b2 = moduleConfig == null ? void 0 : moduleConfig.dbName) == null ? void 0 : _b2.user);
    const dao = hasUser ? new BaseDao2(ctx, (_c2 = moduleConfig == null ? void 0 : moduleConfig.dbName) == null ? void 0 : _c2.user).findOne({ activityId, openId }) : void 0;
    return {
      dao,
      hasUser
    };
  });
  const allUserInfo = await Promise.all(allUserDao.map((v) => v.dao));
  const moduleUsers = _depServices.reduce((pre, Service, i) => __spreadProps(__spreadValues({}, pre), {
    [Service.name]: {
      hasUser: allUserDao[i].hasUser,
      userInfo: allUserInfo[i]
    }
  }), {});
  ctx.userInfo = ((_a = moduleUsers == null ? void 0 : moduleUsers.UserService) == null ? void 0 : _a.userInfo) || await new BaseDao2(ctx, (_d = (_c = (_b = _projectConfig == null ? void 0 : _projectConfig.modulesConfig) == null ? void 0 : _b.user) == null ? void 0 : _c.dbName) == null ? void 0 : _d.user).findOne({ activityId, openId });
  ctx._moduleUsers = moduleUsers;
  ctx._moduleUser = (_e = moduleUsers == null ? void 0 : moduleUsers[`${(0, import_lodash.capitalize)(ctx._moduleName)}Service`]) == null ? void 0 : _e.userInfo;
  await next();
}

// src/mini-tornado/middlewares/initServiceIntance.ts
var import_lodash3 = __toModule(require_lodash());

// src/mini-tornado/utils/proxy.ts
var import_lodash2 = __toModule(require_lodash());
function createServiceInstanceProxy(serviceInstance) {
  return new Proxy(serviceInstance, {
    get(instanceTarget, propKey, receiver) {
      if ((0, import_lodash2.isFunction)(instanceTarget == null ? void 0 : instanceTarget[propKey])) {
        return createInatanceMethodsProxy(instanceTarget == null ? void 0 : instanceTarget[propKey], propKey, instanceTarget == null ? void 0 : instanceTarget.context);
      }
      return Reflect.get(instanceTarget, propKey, receiver);
    }
  });
}
function createInatanceMethodsProxy(method, methodName, context) {
  return new Proxy(method, {
    apply(target, object, args) {
      const methodPath = `${context == null ? void 0 : context.handler}.${methodName}`;
      const result = Reflect.apply(target, object, args);
      const isAsyncFn = result instanceof Promise;
      if (isAsyncFn) {
        result == null ? void 0 : result.then((res) => {
          recordStatByConfig(context, methodPath, res);
        });
      } else {
        recordStatByConfig(context, methodPath, result);
      }
      return result;
    }
  });
}
function recordStatByConfig(ctx, methodPath, methodResult) {
  const statsConfig = ctx == null ? void 0 : ctx._statsConfig;
  const targetStat = statsConfig.find((stat) => (0, import_lodash2.isString)(stat) ? methodPath === stat : stat.key === methodPath);
  if (targetStat) {
    console.log(`addStat :>> ${methodPath}`, methodResult);
  }
}

// src/mini-tornado/middlewares/initServiceIntance.ts
async function initServiceIntance(ctx, next) {
  var _a, _b, _c, _d, _e, _f;
  const { _depServices, _projectConfig } = ctx;
  const target = ctx._target;
  delete ctx._target;
  const _servicesInstance = [];
  for (const Service of _depServices) {
    const instanceName = (0, import_lodash3.lowerFirst)(Service.name);
    const moduleName = instanceName.replace("Service", "");
    if ((_a = _projectConfig == null ? void 0 : _projectConfig.modulesConfig) == null ? void 0 : _a[moduleName]) {
      const serviceInstance = new Service(ctx, (_b = _projectConfig == null ? void 0 : _projectConfig.modulesConfig) == null ? void 0 : _b[moduleName], ((_d = (_c = ctx == null ? void 0 : ctx._moduleUsers) == null ? void 0 : _c[Service.name]) == null ? void 0 : _d.userInfo) || ((_f = (_e = ctx == null ? void 0 : ctx._moduleUsers) == null ? void 0 : _e.UserServive) == null ? void 0 : _f.userInfo));
      const proxyedInstance = createServiceInstanceProxy(serviceInstance);
      target[instanceName] = proxyedInstance;
      _servicesInstance.push({ name: instanceName, instance: proxyedInstance });
    }
  }
  target._servicesInstance = _servicesInstance;
  await next();
}

// src/constant.ts
var DELETE_STATUS;
(function(DELETE_STATUS3) {
  DELETE_STATUS3[DELETE_STATUS3["NORMAL"] = 1] = "NORMAL";
  DELETE_STATUS3[DELETE_STATUS3["DELETE"] = 2] = "DELETE";
})(DELETE_STATUS || (DELETE_STATUS = {}));

// src/errorCode.ts
var BusinessError = {
  ERROR_UPDATE_RETRY: {
    code: `210001`,
    defaultMsg: `\u7CFB\u7EDF\u9519\u8BEF`
  },
  ERROR_NO_ACTIVITY: {
    code: `220001`,
    defaultMsg: `\u6D3B\u52A8\u4E0D\u5B58\u5728`
  },
  ERROR_ACTIVITY_NOSTART: {
    code: `220002`,
    defaultMsg: `\u6D3B\u52A8\u672A\u5F00\u59CB`
  },
  ERROR_ACTIVITY_OVER: {
    code: `220003`,
    defaultMsg: `\u6D3B\u52A8\u5DF2\u7ED3\u675F`
  },
  ERROR_ACTIVITY_NO_OVER: {
    code: `220004`,
    defaultMsg: `\u6D3B\u52A8\u672A\u7ED3\u675F`
  },
  ERROR_ACTIVITY_OPENED_PRIZE: {
    code: `220005`,
    defaultMsg: `\u6D3B\u52A8\u5DF2\u5F00\u5956`
  },
  ERROR_NO_USER: {
    code: `310002`,
    defaultMsg: `\u7528\u6237\u4E0D\u5B58\u5728`
  },
  ERROR_NO_VIP: {
    code: `310003`,
    defaultMsg: "\u975E\u5E97\u94FA\u4F1A\u5458"
  },
  ERROR_NO_FOLLOW: {
    code: `310004`,
    defaultMsg: "\u672A\u5173\u6CE8\u5E97\u94FA"
  },
  ERROR_FORBIDDEN_OPE: {
    code: `530001`,
    defaultMsg: `\u975E\u6CD5\u64CD\u4F5C`
  },
  ERROR_RECEIVE_PRIZE: {
    code: `630002`,
    defaultMsg: `\u5956\u52B1\u5DF2\u9886\u53D6`
  },
  ERROR_SEND_PRIZE: {
    code: `730001`,
    defaultMsg: `\u53D1\u5956\u5931\u8D25`
  },
  ERROR_NO_PRIZE: {
    code: `730002`,
    defaultMsg: `\u5956\u54C1\u4E0D\u5B58\u5728`
  },
  ERROR_NO_STOCK: {
    code: `730003`,
    defaultMsg: `\u5E93\u5B58\u4E0D\u8DB3`
  },
  ERROR_NO_GAME_TIMES: {
    code: `730004`,
    defaultMsg: `\u6E38\u620F\u6B21\u6570\u5DF2\u7528\u5B8C`
  },
  ERROR_PRIZE_EXPIRED: {
    code: `740001`,
    defaultMsg: `\u5956\u54C1\u5DF2\u8D85\u8FC7\u9886\u53D6\u65F6\u95F4`
  }
};
var CODE_TYPES = Object.assign({}, DEFAULT_CODE_TYPES, BusinessError);

// src/mini-tornado/middlewares/getActivityInfo.ts
async function getActivityInfo(ctx, next) {
  const activityInfo = await findActivityInfo(ctx);
  if (!activityInfo)
    ctx.error(CODE_TYPES.ERROR_NO_ACTIVITY);
  ctx.activityInfo = activityInfo;
  await next();
}
async function checkActivityTime(ctx, next) {
  const { activityInfo } = ctx;
  if (!activityInfo) {
    return ctx.error(CODE_TYPES.ERROR_NO_ACTIVITY);
  }
  const { startTime, endTime } = activityInfo;
  const currentTime = Date.now();
  if (currentTime < startTime) {
    return ctx.error(CODE_TYPES.ERROR_ACTIVITY_NOSTART);
  }
  if (currentTime > endTime) {
    return ctx.error(CODE_TYPES.ERROR_ACTIVITY_OVER);
  }
  await next();
}
async function checkPrizeExpired(ctx, next) {
  const { activityInfo } = ctx;
  if (!activityInfo) {
    return ctx.error(CODE_TYPES.ERROR_NO_ACTIVITY);
  }
  const { awardReceiveExpiredTime } = activityInfo;
  if (awardReceiveExpiredTime && Date.now() > awardReceiveExpiredTime) {
    return ctx.error(CODE_TYPES.ERROR_PRIZE_EXPIRED);
  }
  await next();
}
async function findActivityInfo(context) {
  const { _projectConfig } = context;
  const { activityId: _id } = context.data;
  const activityDao = new BaseDao2(context, _projectConfig.modulesConfig.activity.dbName.base);
  return await activityDao.findOne({ _id, deleteStatus: DELETE_STATUS.NORMAL });
}

// src/mini-tornado/utils/date.ts
var import_dayjs = __toModule(require_dayjs_min());
var EIGHT_HOURS = 8 * 60 * 60 * 1e3;
function dateFormat(date = Date.now()) {
  const beijingDate = typeof date === "string" ? new Date(date) : transformBeijingDate2(date);
  return {
    format: (template = "YYYY/MM/DD") => (0, import_dayjs.default)(beijingDate).format(template),
    getTimestamp: () => typeof date === "number" ? date : (0, import_dayjs.default)(date).valueOf() - EIGHT_HOURS,
    getStartTimestamp: () => getStartTimestamp((0, import_dayjs.default)(beijingDate).format("YYYY/MM/DD")),
    getEndTimestamp: () => getEndTimestamp((0, import_dayjs.default)(beijingDate).format("YYYY/MM/DD")),
    getYear: () => (0, import_dayjs.default)(beijingDate).get("year"),
    getMonth: () => (0, import_dayjs.default)(beijingDate).get("month") + 1,
    getDay: () => (0, import_dayjs.default)(beijingDate).get("day"),
    getDate: () => (0, import_dayjs.default)(beijingDate).date(),
    getHour: () => (0, import_dayjs.default)(beijingDate).get("hour"),
    getMinute: () => (0, import_dayjs.default)(beijingDate).get("minute"),
    geSecond: () => (0, import_dayjs.default)(beijingDate).get("second"),
    getMillisecond: () => (0, import_dayjs.default)(beijingDate).get("millisecond"),
    dayjs: () => (0, import_dayjs.default)(beijingDate)
  };
}
function getToday(timeStamp = Date.now()) {
  return dateFormat(timeStamp).format();
}

// src/mini-tornado/utils/tb.ts
var getSession = async (context, activityId, activityOpenId) => {
  const { _projectConfig } = context;
  activityId = activityId || context.data.activityId;
  const activitydao = new BaseDao2(context, _projectConfig.modulesConfig.activity.dbName.base);
  const sellerdao = new BaseDao2(context, _projectConfig.defaultDBName.seller);
  if (!activityId) {
    console.log("getSession- error :>> ", "\u7F3A\u5C11activityId");
    return {};
  }
  if (!activityOpenId) {
    const activityInfo = await activitydao.findOne({ _id: activityId });
    if (!activityInfo)
      return {};
    activityOpenId = activityInfo.openId;
  }
  if (!activityOpenId)
    return {};
  const result = await sellerdao.findOne({
    openId: activityOpenId
  });
  if (!result)
    return {};
  return {
    session: result.accessToken,
    userNick: result.userNick
  };
};
var getShopVip = async (context) => {
  return {
    isVip: !!context.data.isVip
  };
};
var getUserOrderlist = async (context, queryStartTime, queryEndTime = Date.now(), session) => {
  const results = [];
  let lastUpdateTime = dateFormat().dayjs().add(-3, "month").valueOf();
  console.log(`lastUpdateTime`, lastUpdateTime);
  if (lastUpdateTime < queryStartTime) {
    lastUpdateTime = queryStartTime;
  }
  if (!session) {
    session = (await getSession(context)).session;
  }
  const params = {
    startTime: dateFormat(lastUpdateTime).format("YYYY-MM-DD HH:mm:ss"),
    endTime: dateFormat(queryEndTime).format("YYYY-MM-DD HH:mm:ss"),
    openId: context.openId,
    session
  };
  const orderResult = await TBAPIS2.getBuyerOrderList(context, params);
  console.log(`\u5DF2\u652F\u4ED8\u7684\u8BA2\u5355\u5217\u8868`, results);
  return orderResult;
};

// src/mini-tornado/middlewares/taobaoApis.ts
function taobaoApis(apis) {
  return async function(ctx, next, target) {
    await registeTaoBaoApis(ctx, apis, target);
    await next();
  };
}
var apiFnMapper = {
  session: registeSession,
  credits: registeCredits,
  orderList: registeOrderList
};
async function registeTaoBaoApis(ctx, apis, target) {
  var _a;
  for (const apiName of apis) {
    if (ctx.tb[apiName])
      return;
    const res = await ((_a = apiFnMapper == null ? void 0 : apiFnMapper[apiName]) == null ? void 0 : _a.call(apiFnMapper, ctx, target));
    ctx.tb[apiName] = res;
  }
}
async function registeSession(ctx) {
  const { openId, _id } = ctx.activityInfo || {};
  const { session } = ctx.tb;
  if (session)
    return session;
  return (await getSession(ctx, _id, openId)).session;
}
async function registeCredits(ctx) {
  const { credits } = ctx.tb;
  if (credits)
    return credits;
  return TBAPIS2.queryCredits(ctx);
}
async function registeOrderList(ctx, target) {
  await (target == null ? void 0 : target.orderService.setOrderList(ctx));
}

// src/mini-tornado/middlewares/user.ts
function checkUser(checkUserConfig = { ignore: [] }) {
  return async function checkUser2(ctx, next) {
    await next();
    const ignoreHandlers = checkUserConfig.ignore;
    if (ignoreHandlers.includes(ctx.handler))
      return;
    const { _moduleUsers } = ctx;
    for (const _moduleUserKey of Object.keys(_moduleUsers)) {
      const _moduleUser = _moduleUsers == null ? void 0 : _moduleUsers[_moduleUserKey];
      if ((_moduleUser == null ? void 0 : _moduleUser.hasUser) && !(_moduleUser == null ? void 0 : _moduleUser.userInfo)) {
        ctx.error(DEFAULT_CODE_TYPES.ERROR_NO_USER, `${_moduleUserKey.replace("Service", "")}\u6A21\u5757\u7528\u6237\u4E0D\u5B58\u5728`);
      }
    }
  };
}

// src/mini-tornado/middlewares/vip.ts
async function checkVip(ctx, next) {
  const { vipInfo } = ctx.tb;
  if (!vipInfo) {
    ctx.tb.vipInfo = await getShopVip(ctx);
  }
  if (!vipInfo.isVip)
    return ctx.error(DEFAULT_CODE_TYPES.ERROR_NO_VIP);
  await next();
}
async function checkNewVip(ctx, next) {
  var _a, _b, _c, _d, _e, _f, _g;
  if (!((_a = ctx.tb) == null ? void 0 : _a.vipInfo)) {
    ctx.tb.vipInfo = await getShopVip(ctx);
  }
  const { vipInfo } = ctx.tb;
  if (!vipInfo.isVip)
    return ctx.error(DEFAULT_CODE_TYPES.ERROR_NO_VIP);
  const userDao = new BaseDao2(((_d = (_c = (_b = ctx._projectConfig) == null ? void 0 : _b.modulesConfig) == null ? void 0 : _c.user) == null ? void 0 : _d.dbName) || "c_user");
  const {
    data: { activityId },
    openId
  } = ctx;
  if (!activityId)
    return ctx.error(DEFAULT_CODE_TYPES.PARAMS_ERROR, "\u7F3A\u5C11\u6D3B\u52A8id");
  const userInfo = ((_f = (_e = ctx._moduleUsers) == null ? void 0 : _e.UserService) == null ? void 0 : _f.userInfo) || await userDao.findOne({ activityId, openId });
  const isNewVip = !((_g = userInfo == null ? void 0 : userInfo.member) == null ? void 0 : _g.flag) && vipInfo.isVip;
  if (!isNewVip)
    return ctx.error(DEFAULT_CODE_TYPES.ERROR_NO_VIP, "\u4E0D\u662F\u65B0\u4F1A\u5458~");
  await next();
}

// src/mini-tornado/middlewares/updateUser.ts
async function updateVip(ctx, next, target) {
  var _a, _b;
  const { isVip } = ctx.data;
  if (isVip !== void 0 && ctx.handler !== "login") {
    await ((_a = target == null ? void 0 : target.userService) == null ? void 0 : _a.updateUserVip({ isVip }));
    ctx.userInfo = (_b = target == null ? void 0 : target.userService) == null ? void 0 : _b.userInfo;
  }
  if (isVip !== void 0) {
    ctx.tb.vipInfo = { isVip };
  }
  await next();
}
async function updateFollow(ctx, next, target) {
  var _a, _b;
  const { isFollow } = ctx.data;
  if (isFollow !== void 0 && ctx.handler !== "login") {
    await ((_a = target == null ? void 0 : target.userService) == null ? void 0 : _a.updateUserFollow(true));
    ctx.userInfo = (_b = target == null ? void 0 : target.userService) == null ? void 0 : _b.userInfo;
  }
  await next();
}

// src/mini-tornado/tornado.contant.ts
var DependenciesMetaKey = Symbol("dependenciesMetaData");
var ModuleNameMetaKey = Symbol("moduleNameMetaData");
var ControllersMetaKey = Symbol("controllersMetaData");
var LifeCycleAfterMetaKey = Symbol("LifeCycleAfterMetaData");
var LifeCycleAfterConditonsMetaKey = Symbol("LifeCycleAfterConditonsMetaData");
var LifeCycleBeforeMetaKey = Symbol("LifeCycleBeforeMetaKey");
var ReqLimitMetaKey = Symbol("ReqLimitMetaData");
var ControllerClassTag = class {
};
var exportKey = "exportId";
var ACTIVITY_STATUS;
(function(ACTIVITY_STATUS3) {
  ACTIVITY_STATUS3[ACTIVITY_STATUS3["NO_START"] = 1] = "NO_START";
  ACTIVITY_STATUS3[ACTIVITY_STATUS3["PROCCESSING"] = 2] = "PROCCESSING";
  ACTIVITY_STATUS3[ACTIVITY_STATUS3["END"] = 3] = "END";
})(ACTIVITY_STATUS || (ACTIVITY_STATUS = {}));
var TICKET_TYPE;
(function(TICKET_TYPE2) {
  TICKET_TYPE2[TICKET_TYPE2["MODULE"] = 1] = "MODULE";
  TICKET_TYPE2[TICKET_TYPE2["COMMON"] = 2] = "COMMON";
  TICKET_TYPE2[TICKET_TYPE2["CREDITS"] = 3] = "CREDITS";
})(TICKET_TYPE || (TICKET_TYPE = {}));
var GRADE_COST_TYPE;
(function(GRADE_COST_TYPE2) {
  GRADE_COST_TYPE2[GRADE_COST_TYPE2["WITH"] = 1] = "WITH";
  GRADE_COST_TYPE2[GRADE_COST_TYPE2["NO"] = 2] = "NO";
})(GRADE_COST_TYPE || (GRADE_COST_TYPE = {}));

// src/mini-tornado/utils/fomat.ts
var import_lodash4 = __toModule(require_lodash());
var import_mpath = __toModule(require_mpath());

// src/utils/date.ts
var import_dayjs2 = __toModule(require_dayjs_min());
var EIGHT_HOURS2 = 8 * 60 * 60 * 1e3;
function dateFormat2(date = Date.now()) {
  const beijingDate = typeof date === "string" ? new Date(date) : transformBeijingDate2(date);
  return {
    format: (template = "YYYY/MM/DD") => (0, import_dayjs2.default)(beijingDate).format(template),
    getTimestamp: () => typeof date === "number" ? date : (0, import_dayjs2.default)(date).valueOf() - EIGHT_HOURS2,
    getStartTimestamp: () => getStartTimestamp((0, import_dayjs2.default)(beijingDate).format("YYYY/MM/DD")),
    getEndTimestamp: () => getEndTimestamp((0, import_dayjs2.default)(beijingDate).format("YYYY/MM/DD")),
    getYear: () => (0, import_dayjs2.default)(beijingDate).get("year"),
    getMonth: () => (0, import_dayjs2.default)(beijingDate).get("month") + 1,
    getDay: () => (0, import_dayjs2.default)(beijingDate).get("day"),
    getDate: () => (0, import_dayjs2.default)(beijingDate).get("date"),
    getHour: () => (0, import_dayjs2.default)(beijingDate).get("hour"),
    getMinute: () => (0, import_dayjs2.default)(beijingDate).get("minute"),
    geSecond: () => (0, import_dayjs2.default)(beijingDate).get("second"),
    getMillisecond: () => (0, import_dayjs2.default)(beijingDate).get("millisecond")
  };
}
function getToday2() {
  return dateFormat2(Date.now()).format();
}
function getYesterday() {
  return dateFormat2(Date.now() - 24 * 3600 * 1e3).format();
}
function getYesterWeekday() {
  const today = dateFormat2(Date.now() - 7 * 24 * 3600 * 1e3).format();
  return getYearWeek(today);
}
var getYearWeek = (date) => {
  const today = new Date(date);
  const currentYear = today.getFullYear();
  const lastYear = currentYear - 1;
  let firstDayOfCurrentYear = new Date(currentYear, 0, 1);
  let firstDayOfLastYear = new Date(lastYear, 0, 1);
  let spendDay = 0;
  if (firstDayOfCurrentYear.getDay() !== 1) {
    spendDay = 7 - firstDayOfCurrentYear.getDay() + 1;
  }
  let lastSpendDay = 0;
  if (firstDayOfLastYear.getDay() !== 1) {
    lastSpendDay = 7 - firstDayOfLastYear.getDay() + 1;
  }
  firstDayOfCurrentYear = new Date(currentYear, 0, 1 + spendDay);
  firstDayOfLastYear = new Date(lastYear, 0, 1 + lastSpendDay);
  const d = Math.ceil((today.valueOf() - firstDayOfCurrentYear.valueOf()) / (24 * 3600 * 1e3)) + 1;
  const weekNo = Math.ceil(d / 7);
  if (weekNo > 0) {
    return `${currentYear}/${weekNo}`;
  }
  const lastD = Math.ceil((today.valueOf() - firstDayOfLastYear.valueOf()) / (24 * 3600 * 1e3)) + 1;
  return `${lastYear}/${Math.ceil(lastD / 7)}`;
};

// src/mini-tornado/utils/logger.ts
var recordErrorLog = async (context, errorMsg, stack) => {
  var _a, _b, _c;
  const { openId, _projectConfig } = context;
  const { activityId } = context.data || {};
  const logdao = new BaseDao2(context, _projectConfig.defaultDBName.errorLog);
  const functionName = `${context.fcName || ""}.${((_c = (_b = (_a = context == null ? void 0 : context.cloud) == null ? void 0 : _a.dataspace) == null ? void 0 : _b.context) == null ? void 0 : _c.handler) || context.handler}`;
  const record = {
    openId,
    activityId,
    errorMsg,
    errorStack: stack,
    functionName,
    fcInvokeId: context.fcInvokeId,
    params: context.data,
    createTime: Date.now(),
    updateTime: Date.now(),
    createDay: getToday2()
  };
  return await logdao.insertOne(record);
};

// package.json
var package_exports = {};
__export(package_exports, {
  _moduleAliases: () => _moduleAliases,
  author: () => author,
  cloudName: () => cloudName,
  config: () => config,
  default: () => package_default,
  dependencies: () => dependencies,
  description: () => description,
  devDependencies: () => devDependencies,
  jest: () => jest,
  license: () => license,
  main: () => main,
  name: () => name,
  optionalDependencies: () => optionalDependencies,
  phone: () => phone,
  port: () => port,
  private: () => private2,
  publishConfig: () => publishConfig,
  scripts: () => scripts,
  sdkVersion: () => sdkVersion,
  serverProxy: () => serverProxy,
  title: () => title,
  version: () => version
});
var name = "@tbmini/template-server";
var version = "1.9.0";
var description = "11";
var cloudName = "combat";
var main = "index.js";
var author = "\u738B\u80FD\u98DE";
var title = "\u70E7\u6C64\u7684\u9879\u76EE-\u5408\u6210\u5927\u4F5C\u6218";
var phone = "13184232663";
var license = "ISC";
var private2 = true;
var sdkVersion = "*";
var dependencies = {
  "@tbmini/server-mock": "^0.3.2",
  "@tbmini/server-sdk": "^0.8.1",
  "class-transformer": "^0.4.0",
  "class-validator": "^0.13.1",
  dayjs: "^1.8.28",
  lodash: "^4.17.20",
  "module-alias": "^2.2.2",
  mpath: "^0.7.0",
  "node-xlsx": "^0.15.0",
  "reflect-metadata": "^0.1.13",
  "source-map-support": "^0.5.19",
  "taobao-mini-sdk": "0.3.1",
  "tb-server-mock": "^1.0.2"
};
var publishConfig = {
  access: "public"
};
var scripts = {
  start: 'tsc-watch --noEmit --onSuccess "node ./script.esbuild.js"',
  test: "jest",
  "test:coverage": "jest --collect-coverage"
};
var config = {
  notNeedLogin: []
};
var _moduleAliases = {
  "@": "./dist/src"
};
var jest = {
  moduleNameMapper: {
    "@(.*)$": "<rootDir>/src/$1"
  }
};
var port = 5555;
var serverProxy = {
  target: "http://tornado.duibadev.com.cn"
};
var optionalDependencies = {
  "@types/jest": "^26.0.23",
  "@types/lodash": "^4.14.160",
  "@types/module-alias": "^2.0.0",
  "@types/node": "^14.6.0",
  "@typescript-eslint/eslint-plugin": "^3.9.1",
  "@typescript-eslint/parser": "^3.9.1",
  "body-parser": "^1.19.0",
  "cookie-parser": "^1.4.5",
  eslint: "^7.7.0",
  "eslint-config-prettier": "^6.11.0",
  "eslint-plugin-prettier": "^3.1.4",
  express: "^4.17.1",
  "http-proxy-middleware": "^2.0.0",
  jest: "^27.0.4",
  nodemon: "^2.0.12",
  prettier: "^2.0.5",
  "ts-jest": "^27.0.3",
  "ts-node": "^10.0.0",
  "tsconfig-paths": "^3.9.0",
  typescript: "^4.3.5"
};
var devDependencies = {
  esbuild: "^0.13.2",
  mkdirp: "^1.0.4",
  "tsc-watch": "^4.5.0"
};
var package_default = {
  name,
  version,
  description,
  cloudName,
  main,
  author,
  title,
  phone,
  license,
  private: private2,
  sdkVersion,
  dependencies,
  publishConfig,
  scripts,
  config,
  _moduleAliases,
  jest,
  port,
  serverProxy,
  optionalDependencies,
  devDependencies
};

// src/utils/dingTalk.ts
var cloundAlarm = async (context, message, stack) => {
  console.warn(package_exports);
  const { title: title2, author: author2, phone: phone2 } = package_exports;
  const envTxt = {
    test: "\u6D4B\u8BD5\u73AF\u5883",
    pre: "\u9884\u53D1\u73AF\u5883",
    online: "\u7EBF\u4E0A\u73AF\u5883"
  };
  const text = {
    msgtype: "markdown",
    markdown: {
      title: "\u4E91\u544A\u8B66",
      text: `### \u6D3B\u52A8\u540D\u79F0\uFF1A${title2} 
 > #### \u73AF\u5883\uFF1A ${envTxt[context.env]}
 > #### \u544A\u8B66\u5185\u5BB9\uFF1A ${message}
 > #### \u8BE6\u7EC6\u4FE1\u606F\uFF1A 
 > ${stack}

 @${author2}`
    },
    at: { isAtAll: false, atMobiles: [], atUserIds: [] }
  };
  const result = await Promise.all([
    context.cloud.httpApi.invoke({
      domain: "https://oapi.dingtalk.com",
      path: "/robot/send",
      params: {
        access_token: "f6d0d8ecdab3ad77dc51b5173f630f1c0e0fcbe90e994d0a642fb0b516dfd24c"
      },
      method: "POST",
      headers: {
        "Content-Type": "application/json;charset=UTF-8"
      },
      body: text
    }),
    context.cloud.httpApi.invoke({
      domain: "https://oapi.dingtalk.com",
      path: "/robot/send",
      params: {
        access_token: "f6d0d8ecdab3ad77dc51b5173f630f1c0e0fcbe90e994d0a642fb0b516dfd24c"
      },
      method: "POST",
      headers: {
        "Content-Type": "application/json;charset=UTF-8"
      },
      body: {
        msgtype: "text",
        at: { isAtAll: false, atMobiles: [`${phone2}`], atUserIds: [] },
        text: { content: "\u4E91\u544A\u8B66" }
      }
    })
  ]);
  return result;
};

// src/mini-tornado/app/handleRequest.ts
function compose(middleware, target) {
  if (!Array.isArray(middleware))
    throw new TypeError("Middleware stack must be an array!");
  for (const fn of middleware) {
    if (typeof fn !== "function")
      throw new TypeError("Middleware must be composed of functions!");
  }
  return function(context, next) {
    let index = -1;
    return dispatch(0);
    function dispatch(i) {
      if (i <= index)
        return Promise.reject(new Error("next() called multiple times"));
      index = i;
      let fn = middleware[i];
      if (i === middleware.length)
        fn = next;
      if (!fn)
        return Promise.resolve();
      try {
        return Promise.resolve(fn(context, dispatch.bind(null, i + 1), target));
      } catch (err) {
        return Promise.reject(err);
      }
    }
  };
}
function handleRequest(fn, middlewares, projectConfig, statConfig, formatCtxFn) {
  return async function(originContext) {
    var _a, _b, _c, _d;
    const ctx = formatCtxFn(originContext, projectConfig, statConfig);
    let result;
    try {
      result = await fn(ctx, resultsModel, middlewares);
    } catch (error) {
      console.log("-----------error.stack---------", error == null ? void 0 : error.stack);
      if ((_a = error == null ? void 0 : error.message) == null ? void 0 : _a.startsWith("errorHandler:")) {
        result = resultsModel.error(JSON.parse((_d = (_c = (_b = error == null ? void 0 : error.message) == null ? void 0 : _b.split("errorHandler:")) == null ? void 0 : _c[1]) == null ? void 0 : _d.trim()));
      } else {
        recordErrorLog(ctx, error == null ? void 0 : error.message, error == null ? void 0 : error.stack);
        cloundAlarm(ctx, error.toString(), error.stack);
        result = resultsModel.error(CODE_TYPES.SYSTEM_ERROR, error == null ? void 0 : error.message);
      }
    }
    return result;
  };
}

// src/mini-tornado/utils/doHandler.ts
async function doHandler(target, method, args) {
  let result;
  const [context, res, middleWares] = args;
  await compose(middleWares, target)(context);
  console.log("before---------------- :>> ");
  result = await method.apply(target, [context, res]);
  console.log("after----------------- :>> ");
  const afterFn = Reflect.getMetadata(LifeCycleAfterMetaKey, target, context.handler);
  if (afterFn) {
    result = await afterFn(target, context, result) || result;
  }
  return result;
}
function HandlerError(message) {
  this.name = "HandlerError";
  this.message = message || "Default Message";
  this.stack = new Error().stack;
}
HandlerError.prototype = Object.create(Error.prototype);
HandlerError.prototype.constructor = HandlerError;
var errorHandler = (codeType, message) => {
  const error = JSON.stringify(__spreadProps(__spreadValues({}, codeType), {
    defaultMsg: message || codeType.defaultMsg
  }));
  throw new Error(`errorHandler:${error}`);
};

// src/stats.config.map.ts
var stats_config_map_default = {
  task: {
    member: [{ name: "\u5B8C\u6210\u52A0\u5165\u4F1A\u5458UV", key: "finishUV" }],
    follow: [{ name: "\u5B8C\u6210\u5173\u6CE8\u5E97\u94FAUV", key: "finishUV" }],
    invite: [
      { name: "\u52A9\u529B\u6210\u529FUV", key: "successInviteUV" },
      { name: "\u5B8C\u6210\u9080\u8BF7UV", key: "finishUV" }
    ],
    jump: [{ name: "\u5B8C\u6210\u8DF3\u8F6CUV", key: "finishUV" }],
    collect: [{ name: "\u5B8C\u6210\u6307\u5B9A\u5546\u54C1UV", key: "finishUV" }],
    order: [
      { name: "\u5B8C\u6210\u4E0B\u5355UV", key: "finishUV" },
      { name: "\u4E0B\u5355\u603B\u989D", key: "orderPrize" }
    ],
    sign: [{ name: "\u5B8C\u6210\u7B7E\u5230UV", key: "finishUV" }]
  },
  user: [
    { name: "\u8BBF\u95EEUV", key: "accessUV" },
    { name: "\u8BBF\u95EEPV", key: "accessPV" },
    { name: "\u65B0\u589EUV", key: "newUser" },
    { name: "\u65B0\u589EUV(\u901A\u8FC7\u9080\u8BF7)", key: "newInvited" },
    { name: "\u8BBF\u95EE\u65F6\u5DF2\u5165\u4F1APV", key: "oldVipPV" },
    { name: "\u8BBF\u95EE\u65F6\u5DF2\u5165\u4F1AUV", key: "oldVipUV" },
    { name: "\u8BBF\u95EE\u65F6\u672A\u5165\u4F1APV", key: "noVipPV" },
    { name: "\u8BBF\u95EE\u65F6\u672A\u5165\u4F1AUV", key: "noVipUV" },
    { name: "\u8BBF\u95EE\u65F6\u672A\u5173\u6CE8\u5E97\u94FAPV", key: "noFollowPV" },
    { name: "\u8BBF\u95EE\u65F6\u672A\u5173\u6CE8\u5E97\u94FAUV", key: "noFollowUV" },
    { name: "\u8BBF\u95EE\u65F6\u5DF2\u5173\u6CE8\u5E97\u94FAPV", key: "followPV" },
    { name: "\u8BBF\u95EE\u65F6\u5DF2\u5173\u6CE8\u5E97\u94FAUV", key: "followUV" },
    { name: "\u65B0\u589E\u5165\u4F1AUV", key: "newVipUV" },
    { name: "\u65B0\u589E\u5173\u6CE8UV", key: "newFollowUV" },
    { name: "\u5206\u4EAB\u9875\u8BBF\u95EEuv", key: "inviteUV" },
    { name: "\u8001\u4F1A\u5458\u8BBF\u95EEPV", key: "realOldVipPV" },
    { name: "\u8001\u4F1A\u5458\u8BBF\u95EEUV", key: "realOldVipUV" }
  ],
  game: [
    { name: "\u53C2\u4E0EPV", key: "joinPV" },
    { name: "\u53C2\u4E0EUV", key: "joinUV" },
    { name: "\u53C2\u4E0E\u65F6\u975E\u4F1A\u5458PV", key: "noVipPV" },
    { name: "\u53C2\u4E0E\u65F6\u975E\u4F1A\u5458UV", key: "noVipUV" },
    { name: "\u53C2\u4E0E\u65F6\u4F1A\u5458PV", key: "vipPV" },
    { name: "\u53C2\u4E0E\u65F6\u4F1A\u5458UV", key: "vipUV" },
    { name: "\u53C2\u4E0E\u65F6\u8001\u4F1A\u5458PV", key: "oldVipPV" },
    { name: "\u53C2\u4E0E\u65F6\u8001\u4F1A\u5458UV", key: "oldVipUV" },
    { name: "\u603B\u5206\u8FBE\u5230${reach}\u5206UV", key: "totalScoreReachUV" },
    { name: "\u5B8C\u6210\u7B2C${reach}\u5173UV", key: "levelReachUV" }
  ],
  card: [
    { name: "\u5361\u72471\u7D2F\u8BA1\u96C6\u9F50\u7684\u4EBA\u6570", key: "finishCard1UV" },
    { name: "\u5361\u72472\u7D2F\u8BA1\u96C6\u9F50\u7684\u4EBA\u6570", key: "finishCard2UV" },
    { name: "\u5361\u72473\u7D2F\u8BA1\u96C6\u9F50\u7684\u4EBA\u6570", key: "finishCard3UV" },
    { name: "\u5361\u72474\u7D2F\u8BA1\u96C6\u9F50\u7684\u4EBA\u6570", key: "finishCard4UV" },
    { name: "\u5361\u72475\u7D2F\u8BA1\u96C6\u9F50\u7684\u4EBA\u6570", key: "finishCard5UV" }
  ],
  stat: {
    UV: "UV",
    PV: "PV",
    newVipUV: "\u65B0\u4F1A\u5458UV",
    newVipPV: "\u65B0\u4F1A\u5458PV",
    newUV: "\u65B0\u7528\u6237UV",
    newPV: "\u65B0\u7528\u6237PV"
  }
};

// src/mini-tornado/microservice/awards/award.contant.ts
var PRIZE_POOL_TYPE = {
  DRAW: 1,
  RANK: 2,
  EXCHANGE: 3,
  SIMPLE: 4
};
var DRAW_STATUS = {
  WAITAWARD: 1,
  PROCESSING: 2,
  SUCCESS: 3,
  FAIL: 4,
  EXPIRED: 5,
  RETRY: 6
};
var ACTIVITY_OPEN_PRIZE_STATUS = {
  AWAIT: 1,
  OPENING: 2,
  SUCCESS: 3,
  FAIL: 4,
  NOT_ALLOWED: 5
};
var ACTIVITY_STATUS2;
(function(ACTIVITY_STATUS3) {
  ACTIVITY_STATUS3[ACTIVITY_STATUS3["NORMAL"] = 1] = "NORMAL";
  ACTIVITY_STATUS3[ACTIVITY_STATUS3["DELETE"] = 2] = "DELETE";
})(ACTIVITY_STATUS2 || (ACTIVITY_STATUS2 = {}));
var DELETE_STATUS2;
(function(DELETE_STATUS3) {
  DELETE_STATUS3[DELETE_STATUS3["NORMAL"] = 1] = "NORMAL";
  DELETE_STATUS3[DELETE_STATUS3["DELETE"] = 2] = "DELETE";
})(DELETE_STATUS2 || (DELETE_STATUS2 = {}));
var PRIZE_TYPE = {
  ENAME: 1,
  CREDITS: 2,
  OBJECT: 3,
  THANKS: 5
};
var SWICH_TOCK;
(function(SWICH_TOCK2) {
  SWICH_TOCK2[SWICH_TOCK2["LIMIT"] = 1] = "LIMIT";
  SWICH_TOCK2[SWICH_TOCK2["NO_LIMIT"] = 2] = "NO_LIMIT";
})(SWICH_TOCK || (SWICH_TOCK = {}));
var SHIP_STATUS = {
  NO_ADDRESS: 1,
  NO_SHIP: 2,
  HAS_SHIP: 3
};
var RANK_OPEN_TYPE = {
  OVERTIME: 1,
  EVERY_DAY: 2,
  EVERY_WEEK: 3,
  FIX_TIME: 4
};
var RANK_SCORE_TYPE = {
  TOTAL: 1,
  HIGH: 2
};
var DRAW_TYPE = {
  FIXED: 1,
  EVERY_FIXED: 2
};
var IS_MARK = {
  YES: 1,
  NO: 2
};
var LIMIT_SOURCE = {
  FROM_S: 1,
  FROM_B: 3
};
var LIMIT_TYPE = {
  NO_LIMIT: 1,
  DAY_USER: 2,
  DAY_PRIZE: 3,
  USER: 4
};
var TAOBAO_SUCCESS_ORDER_STATUS = [
  "WAIT_SELLER_SEND_GOODS",
  "SELLER_CONSIGNED_PART",
  "WAIT_BUYER_CONFIRM_GOODS",
  "TRADE_BUYER_SIGNED",
  "TRADE_FINISHED",
  "PAID_FORBID_CONSIGN"
];
var TBERROR = {
  USER_PERMISSION_EXCEED_MAX_RIGHT_COUNT_IN_DAY: "\u4ECA\u65E5\u9886\u53D6\u8FBE\u5230\u4E0A\u9650\uFF0C\u660E\u65E5\u518D\u6765\u9886\u53D6\u54E6",
  COUPON_INVALID_OR_DELETED: "\u6743\u76CA\u65E0\u6548\u6216\u8005\u88AB\u5220\u9664\uFF0C\u8BF7\u8054\u7CFB\u5546\u5BB6",
  APPLY_OWNSELF_COUPON: "\u4E0D\u80FD\u9886\u53D6\u81EA\u5DF1\u5BB6\u5E97\u94FA\u6743\u76CA",
  APPLY_SINGLE_COUPON_COUNT_EXCEED_LIMIT: "\u8BF7\u81F3\u5361\u5238\u5305\u5220\u9664\u65E0\u7528\u6743\u76CA\u518D\u9886\u53D6",
  NO_RIGHT_QUANTITY: "\u6743\u76CA\u5E93\u5B58\u4E0D\u8DB3\uFF0C\u8BF7\u8054\u7CFB\u5546\u5BB6",
  ERRORA_3_567: "\u9886\u53D6\u5931\u8D25\uFF0C\u4E3A\u98CE\u9669\u7528\u6237",
  "Invalid session": "\u8BA2\u8D2D\u5E94\u7528\u5DF2\u8FC7\u671F\uFF0C\u8BF7\u8054\u7CFB\u5546\u5BB6\u5904\u7406"
};
var C_APP_NAME = `promotioncenter-`;

// src/mini-tornado/utils/fomat.ts
function formatUserNick(name2, replaceStr = "***") {
  let newStr;
  if (name2.length === 2) {
    newStr = name2.substr(0, 1) + replaceStr + name2.substr(-1, 1);
  } else if (name2.length > 2) {
    const char = replaceStr;
    newStr = name2.substr(0, 1) + char + name2.substr(-1, 1);
  } else {
    newStr = name2 + replaceStr;
  }
  return newStr;
}
function getUpdatedDataByProjection(dbData, projection) {
  const updatedDbData = (0, import_lodash4.assign)({}, dbData);
  if (!(0, import_lodash4.isEmpty)(projection.$set)) {
    Object.keys(projection.$set).forEach((key) => {
      var _a;
      (0, import_mpath.set)(key, (_a = projection.$set) == null ? void 0 : _a[key], updatedDbData);
    });
  }
  if (!(0, import_lodash4.isEmpty)(projection.$inc)) {
    Object.keys(projection.$inc).forEach((key) => {
      var _a;
      const originValue = (0, import_mpath.get)(key, updatedDbData) || 0;
      (0, import_mpath.set)(key, ((_a = projection.$inc) == null ? void 0 : _a[key]) + originValue, updatedDbData);
    });
  }
  if (!(0, import_lodash4.isEmpty)(projection.$push)) {
    Object.keys(projection.$push).forEach((key) => {
      var _a;
      const originValue = (0, import_mpath.get)(key, updatedDbData) || [];
      (0, import_mpath.set)(key, [originValue, (_a = projection.$push) == null ? void 0 : _a[key]], updatedDbData);
    });
  }
  return updatedDbData;
}
function formatContext(context, projectConfig, statsConfig = []) {
  var _a, _b;
  const { openId, cloud, data, fcName, fcInvokeId, env: env2, db, mixNick } = context;
  const newContext = {
    data,
    openId,
    cloud,
    originContext: context,
    fcName,
    fcInvokeId,
    env: env2,
    db,
    tb: {},
    BaseDao: BaseDao2,
    mixNick,
    appId: projectConfig.appId,
    logger: cloud == null ? void 0 : cloud.log,
    handler: ((_b = (_a = cloud == null ? void 0 : cloud.dataspace) == null ? void 0 : _a.context) == null ? void 0 : _b.handler) || context.handler,
    error: errorHandler,
    _depServices: [],
    _servicesInstance: [],
    res: resultsModel,
    _projectConfig: projectConfig,
    _statsConfig: statsConfig
  };
  return newContext;
}
function formatInitBaseUser(context) {
  const { openId } = context;
  const { activityId, userNick, avatar } = context.data;
  const createDay = getToday();
  const now = Date.now();
  const baseUser = {
    activityId,
    openId,
    userNick,
    avatar,
    createTime: now,
    updateTime: now,
    createDay,
    ticket: 0
  };
  return baseUser;
}
function formatDayStats(service, key = null, ruleConfig, dayStats, name2) {
  const map = {};
  let config2 = [];
  for (let i = 0; i < ruleConfig.length; i++) {
    if (["user", "game", "card"].includes(service)) {
      config2 = stats_config_map_default[service];
    } else {
      config2 = stats_config_map_default[service][key];
    }
    const stat = config2.find((itm) => {
      if (typeof ruleConfig[i] === "string") {
        return itm.key === ruleConfig[i];
      }
      return itm.key === ruleConfig[i].key;
    });
    map[`${name2 || ""}${stat.name.replace("${reach}", ruleConfig[i].reach)}`] = dayStats[i];
  }
  return map;
}
function genAwardsList(prizeConfigList, userRank) {
  const arr = [];
  prizeConfigList.forEach((itm) => {
    const { _id, prizeDataType, ename, type, image, name: name2, credits, amount, itemId, skuId, benefitType } = itm;
    let [min, max] = itm.rank.split("-");
    if (!max) {
      min = max;
    }
    for (let i = +min - 1; i < +max; i++) {
      if (userRank[i]) {
        const { avatar, userNick, openId, activityId } = userRank[i];
        arr.push({
          avatar,
          userNick,
          openId,
          activityId,
          prizeId: _id,
          prizeDataType,
          ename,
          type,
          image,
          name: name2,
          credits,
          amount,
          benefitType,
          itemId,
          skuId,
          rank: i + 1,
          drawStatus: DRAW_STATUS.WAITAWARD,
          createTime: Date.now(),
          createDay: getToday()
        });
      }
    }
  });
  return arr;
}

// src/mini-tornado/app/container.ts
var Container = class {
  constructor(projectConfig) {
    this.routerMapper = {};
    this.statsConfig = [];
    this.projectConfig = projectConfig;
  }
  use(path, middleware) {
    var _a, _b;
    const arrMiddleware = Array.isArray(middleware) ? middleware : [middleware];
    if (!((_b = (_a = this.routerMapper) == null ? void 0 : _a[path]) == null ? void 0 : _b.length)) {
      this.routerMapper[path] = [];
    }
    this.routerMapper[path] = [...new Set([...this.routerMapper[path], ...arrMiddleware])];
    return this;
  }
  init() {
    const controllers = this.getExportControllers();
    const handlerMapper = exportHandlers(controllers, this.routerMapper, this.projectConfig, this.statsConfig, this.formatCtxFn || formatContext);
    console.info("handlerMapper :>> ", Object.keys(handlerMapper));
    return handlerMapper;
  }
  loadStats(statsConfig = []) {
    this.statsConfig = statsConfig;
  }
  getExportControllers() {
    let searching = true;
    let id = 0;
    const controllers = [];
    while (searching) {
      const exportId2 = `${exportKey}${id}`;
      if (Reflect.hasMetadata(ControllersMetaKey, ControllerClassTag, exportId2)) {
        const controller = Reflect.getMetadata(ControllersMetaKey, ControllerClassTag, exportId2);
        controllers.push(controller);
        id++;
      } else {
        searching = false;
      }
    }
    return controllers;
  }
};
var matchRouter = (handlerName, routerMapper) => {
  const targetRouter = `/${handlerName}`;
  const allMiddlewares = (routerMapper == null ? void 0 : routerMapper["/"]) || [];
  const targetMiddlerwares = (routerMapper == null ? void 0 : routerMapper[targetRouter]) || [];
  return [...new Set([...allMiddlewares, ...targetMiddlerwares])];
};
var exportHandlers = (controllers, routerMapper, projectConfig, statConfig, formatCtxFn) => {
  const handlersMapper = controllers.map(formatHandler).reduce((prev, current) => __spreadValues(__spreadValues({}, current), prev), {});
  function formatHandler(Controller) {
    const instance = new Controller();
    const handlerKeys = Object.getOwnPropertyNames(Object.getPrototypeOf(instance)).filter((v) => v !== "constructor");
    return handlerKeys.reduce((prev, handlerName) => {
      return __spreadProps(__spreadValues({}, prev), {
        [handlerName]: handleRequest(instance[handlerName], matchRouter(handlerName, routerMapper), projectConfig, statConfig, formatCtxFn)
      });
    }, {});
  }
  return handlersMapper;
};

// src/config/test.ts
var test_exports = {};
__export(test_exports, {
  EnvKey: () => EnvKey
});
var EnvKey = "test";

// src/config/online.ts
var online_exports = {};
__export(online_exports, {
  EnvKey: () => EnvKey2
});
var EnvKey2 = "online";

// src/mini-tornado/utils/getConfig.ts
var getConfig = (context) => {
  const configMapper = {
    mock: test_exports,
    test: test_exports,
    pre: online_exports,
    online: online_exports
  };
  const { env: env2 } = context;
  return configMapper[env2];
};

// src/mini-tornado/app/baseService.ts
var BaseService = class {
  constructor(context) {
    this.context = context;
    this.env = context.env;
    this.error = errorHandler;
    this.activityInfo = context.activityInfo;
    this.envConfig = getConfig(context);
    this.coreUserDao = new BaseDao2(context, context._projectConfig.modulesConfig.user.dbName.user);
  }
  _setUserInfo(user) {
    this.userInfo = user;
  }
  when(...whenFns) {
    return whenFns.every((whenFn) => whenFn(this.context, this.userInfo));
  }
};

// src/project.config.ts
var project_config_default = {
  "defaultDBName": {
    "errorLog": "error_log",
    "seller": "a_seller_info"
  },
  "appId": "3000000005461282",
  "modulesConfig": {
    "user": {
      "dbName": {
        "user": "c_user",
        "record": "c_user_record"
      }
    },
    "activity": {
      "dbName": {
        "base": "b_activity_config",
        "prizeConfig": "b_prize_config"
      }
    },
    "task": {
      "dbName": {
        "user": "c_user_task",
        "record": "c_task_record"
      },
      "rules": [
        {
          "name": "\u5173\u6CE8\u5E97\u94FA",
          "key": "follow",
          "type": "follow",
          "source": 2
        },
        {
          "name": "\u9080\u8BF7\u597D\u53CB",
          "key": "invite",
          "type": "invite",
          "source": 2
        },
        {
          "name": "\u4E0B\u5355\u6307\u5B9A\u5546\u54C1",
          "key": "order",
          "type": "order",
          "source": 2,
          "isMarkOrder": true
        },
        {
          "name": "\u652F\u4ED8\u8BA2\u91D1\u5546\u54C1",
          "key": "preOrder",
          "type": "order",
          "source": 2,
          "isMarkOrder": true
        }
      ]
    },
    "awards": {
      "dbName": {
        "user": "c_user_awards",
        "record": "c_awards_record",
        "prize": "b_prize_config",
        "openRecord": "c_open_rank_record"
      },
      "rules": [
        {
          "name": "\u6392\u884C\u699C-\u5B9E\u7269",
          "key": "rank1",
          "prizePoolType": 2,
          "prizeDataType": 1,
          "optionList": [],
          "prizeSource": "\u6392\u884C\u699C-\u5B9E\u7269",
          "ticketType": 1,
          "isGradeCredit": 2,
          "gradeCreditCost": [],
          "rankNum": 50,
          "rankType": 1,
          "rankScoreType": 2,
          "exchangeKeysList": [
            {
              "name": "\u5151\u6362\u51ED\u8BC11"
            }
          ],
          "isMark": 2,
          "limitSource": 2,
          "options": {}
        },
        {
          "name": "\u6392\u884C\u699C-\u4F18\u60E0\u5238",
          "key": "rank2",
          "prizePoolType": 2,
          "prizeDataType": 2,
          "optionList": [],
          "prizeSource": "\u6392\u884C\u699C-\u4F18\u60E0\u5238",
          "ticketType": 1,
          "isGradeCredit": 2,
          "gradeCreditCost": [],
          "rankNum": 500,
          "rankType": 1,
          "rankScoreType": 2,
          "exchangeKeysList": [
            {
              "name": "\u5151\u6362\u51ED\u8BC11"
            }
          ],
          "isMark": 2,
          "limitSource": 2,
          "options": {}
        }
      ]
    },
    "order": {
      "dbName": {
        "record": "c_order_record"
      },
      "rules": [
        {
          "name": "\u6307\u5B9A\u5546\u54C1",
          "key": "order",
          "type": 1
        },
        {
          "name": "\u9884\u552E\u5546\u54C1",
          "key": "preOrder",
          "type": 3
        }
      ]
    },
    "game": {
      "dbName": {
        "user": "c_user_game",
        "record": "c_game_record",
        "toolsRecord": "c_tools_record"
      },
      "rules": [
        {
          "name": "\u5408\u6210\u5927\u897F\u74DC",
          "key": "make",
          "type": 1,
          "isLevelClear": false,
          "isTimeLimit": false,
          "isTickets": true,
          "ticketType": 1,
          "isGradeCredit": 2,
          "gradeCreditCost": [],
          "gameTimesType": 1,
          "consumeGameTimes": 1,
          "levelClearOnce": false,
          "levelRepeat": false,
          "tools": []
        }
      ]
    },
    "stat": {
      "dbName": {
        "statRecord": "c_stat_record"
      },
      "rules": [
        {
          "name": "\u53D1\u8D77\u5206\u4EAB",
          "key": "clickShare",
          "export": false
        },
        {
          "name": "\u70B9\u51FB\u52A9\u529B",
          "key": "doHelp",
          "export": false
        }
      ]
    }
  }
};

// src/stats.config.ts
var stats = [
  "login.addUserRecord",
  {
    key: "doComplete.completeTask",
    filter: (ctx) => ctx.data.taskKey === "follow",
    data: (ctx) => ({})
  }
];

// src/mini-tornado/middlewares/builtIn.ts
var builtInMiddlewaresMapper = {
  checkPrizeExpired,
  checkActivityTime,
  checkVip,
  checkNewVip,
  credits: taobaoApis(["credits"]),
  session: taobaoApis(["session"]),
  orderList: taobaoApis(["orderList"])
};

// src/controller.config.ts
var controller_config_default = {
  user: {
    relate: 1,
    todayReward: [
      {
        rewardType: "game",
        rewardKey: "make",
        count: 2
      }
    ],
    firstReward: [
      {
        rewardType: "game",
        rewardKey: "make",
        count: 2
      }
    ]
  },
  stat: {
    user: ["accessUV", "accessPV", "newUser", "oldVipPV", "oldVipUV", "newVipUV", "inviteUV"],
    task: {
      follow: ["finishUV"],
      invite: ["successInviteUV"],
      order: ["finishUV", "orderPrize"],
      preOrder: ["finishUV", "orderPrize"]
    },
    game: {
      make: ["joinPV", "joinUV", "vipPV", "vipUV", "oldVipPV", "oldVipUV"]
    },
    stat: {
      clickShare: ["PV", "UV"],
      doHelp: ["PV", "UV"]
    }
  },
  task: {
    follow: {
      name: "\u5173\u6CE8\u5E97\u94FA",
      key: "follow",
      type: "follow",
      source: 2,
      rewardType: "game",
      rewardKey: "make"
    },
    invite: {
      name: "\u9080\u8BF7\u597D\u53CB",
      key: "invite",
      type: "invite",
      source: 2,
      rewardType: "game",
      rewardKey: "make"
    },
    order: {
      name: "\u4E0B\u5355\u6307\u5B9A\u5546\u54C1",
      key: "order",
      type: "order",
      source: 2,
      isMarkOrder: true,
      rewardType: "game",
      rewardKey: "make",
      orderKey: "order"
    },
    preOrder: {
      name: "\u652F\u4ED8\u8BA2\u91D1\u5546\u54C1",
      key: "preOrder",
      type: "order",
      source: 2,
      isMarkOrder: true,
      rewardType: "game",
      rewardKey: "make",
      orderKey: "preOrder"
    }
  },
  awards: {
    openPrize: {
      rank1: {
        type: "awards",
        rankShowNum: 50
      },
      rank2: {
        type: "awards",
        rankShowNum: 500
      }
    }
  },
  game: {
    make: {
      reward: false
    }
  }
};

// src/mini-tornado/microservice/awards/errorCode.ts
var BusinessError2 = {
  ERROR_RECEIVE_PRIZE: {
    code: `630001`,
    defaultMsg: `\u5956\u52B1\u5DF2\u9886\u53D6`
  },
  ERROR_NO_AWARD: {
    code: `630002`,
    defaultMsg: `\u6CA1\u6709\u67E5\u8BE2\u5230\u8BE5\u5956\u54C1`
  },
  ERROR_TICKETS_SET_ERROR: {
    code: `630003`,
    defaultMsg: `\u8BBE\u7F6E\u51ED\u8BC1\u5931\u8D25`
  },
  ERROR_NO_CONFIG: {
    code: `630004`,
    defaultMsg: `\u65E0\u6B64\u5956\u54C1\u914D\u7F6E`
  },
  ERROR_NO_STOCK: {
    code: `630005`,
    defaultMsg: `\u65E0\u5956\u54C1\u5E93\u5B58`
  },
  ERROR_NO_PRIZE: {
    code: `630006`,
    defaultMsg: `\u65E0\u6B64\u5956\u54C1`
  },
  ERROR_NO_DRAW_CHANCE: {
    code: `630007`,
    defaultMsg: `\u8BF7\u786E\u8BA4\u662F\u5426\u6EE1\u8DB3\u62BD\u5956\u6761\u4EF6`
  },
  ERROR_NO_EXCHANGE_VALUE: {
    code: `630008`,
    defaultMsg: `\u8BF7\u786E\u8BA4\u6709\u8DB3\u591F\u7684\u5151\u6362\u6750\u6599`
  },
  ERROR_DO_MARK: {
    code: `630009`,
    defaultMsg: `\u4E13\u5C5E\u8BA2\u5355\u6807\u8BB0\u5931\u8D25`
  },
  ERROR_NO_OPEN_ARRIVE: {
    code: `630010`,
    defaultMsg: `\u672A\u5230\u5F00\u5956\u65F6\u95F4`
  },
  ERROR_OVER_LIMIT: {
    code: `630011`,
    defaultMsg: `\u5956\u54C1\u5151\u6362\u6570\u91CF\u8D85\u51FA\u9650\u5236`
  }
};
var CODE_TYPES2 = Object.assign({}, DEFAULT_CODE_TYPES, BusinessError2);

// src/mini-tornado/utils/rand.ts
var rand = function() {
  let seed = new Date().getTime();
  function r() {
    seed = (seed * 9301 + 49297) % 233280;
    return seed / 233280;
  }
  return function(number) {
    return Math.ceil(r() * number);
  };
}();

// src/mini-tornado/utils/ticketCenter.ts
var TicketCenter = class {
  constructor(ctx, coreUserDao, ticketType, costCount, isGradeCredit) {
    this.ctx = ctx;
    this.coreUserDao = coreUserDao;
    this.ticketType = ticketType;
    this.costCount = costCount;
    this.isGradeCredit = isGradeCredit;
  }
  async cost() {
    if (this.ticketType === TICKET_TYPE.COMMON) {
      return await this.commom();
    } else {
      return await this.credits();
    }
  }
  async credits() {
    const credits = await TBAPIS2.queryCredits(this.ctx, this.ctx.tb.session);
    let costCount;
    if (this.isGradeCredit === GRADE_COST_TYPE.WITH) {
      const vipInfo = await TBAPIS2.queryVipinfo(this.ctx, this.ctx.tb.session);
      const costConfig = this.costCount.find((v) => v.grade === vipInfo.result.member_info.grade);
      if (costConfig) {
        costCount = costConfig.cost;
      } else {
        return 0;
      }
    } else {
      costCount = this.costCount;
    }
    if (credits >= costCount) {
      await TBAPIS2.changeCredits(this.ctx, {
        quantity: costCount,
        change_type: 1,
        opt_type: 1
      }, this.ctx.tb.session);
      return 1;
    } else {
      return 0;
    }
  }
  async commom() {
    const {
      data: { activityId },
      openId
    } = this.ctx;
    return await this.coreUserDao.update({
      openId,
      activityId,
      $where: `this.ticket >= ${this.costCount}`
    }, {
      $inc: {
        ticket: -this.costCount
      }
    });
  }
};

// src/mini-tornado/microservice/awards/awards.base.service.ts
var BaseAwardsService = class extends BaseService {
  constructor(context, config2, userInfo) {
    super(context);
    this.config = config2;
    this.dao = {
      user: new BaseDao2(context, config2.dbName.user),
      prize: new BaseDao2(context, config2.dbName.prize),
      record: new BaseDao2(context, config2.dbName.record),
      openRecord: new BaseDao2(context, config2.dbName.openRecord)
    };
    this.userInfo = userInfo;
  }
  init(context) {
    const customUser = this.initCustomUser();
    const user = __spreadValues(__spreadValues({}, formatInitBaseUser(context)), customUser);
    return user;
  }
  async initOpenRecord(activityId) {
    const openRecord = await this.dao.openRecord.findOne({
      activityId
    });
    if (!openRecord) {
      const openInfo = {};
      this.config.rules.forEach((v) => {
        if (v.prizePoolType === PRIZE_POOL_TYPE.RANK) {
          openInfo[v.key] = {};
          openInfo[v.key].fixed = ACTIVITY_OPEN_PRIZE_STATUS.AWAIT;
        }
      });
      await this.dao.openRecord.insertOne({
        activityId,
        openInfo
      });
    }
  }
  getUserInfo() {
    return this.userInfo;
  }
  async getPrizeConfig(key, activityId, options) {
    var _a, _b;
    const baseConfig = this.config.rules.find((v) => v.key === key);
    const projection = {
      prizeDataType: baseConfig == null ? void 0 : baseConfig.prizeDataType,
      activityId: activityId || ((_b = (_a = this == null ? void 0 : this.context) == null ? void 0 : _a.activityInfo) == null ? void 0 : _b._id)
    };
    if (options) {
      Object.keys(baseConfig.options).forEach((v) => {
        projection[`${v}`] = options == null ? void 0 : options[`${v}`];
      });
    }
    return await this.dao.prize.find(__spreadValues({
      deleteStatus: DELETE_STATUS2.NORMAL
    }, projection), { sort: { level: 1 } });
  }
  async getPrizeList(queryInfo) {
    return await this.dao.prize.find(__spreadValues({
      deleteStatus: DELETE_STATUS2.NORMAL
    }, queryInfo));
  }
  async getMyAwardsListByQuery(queryInfo) {
    return await this.dao.record.find(__spreadValues({
      activityId: this.context.data.activityId,
      openId: this.context.openId
    }, queryInfo));
  }
  async getMyAwardsList() {
    var _a, _b;
    const {
      openId,
      activityInfo: { _id: activityId }
    } = this.context;
    const myAwardList = await this.getAwardsInfoList({
      openId,
      activityId,
      type: { $ne: PRIZE_TYPE.THANKS }
    }, {
      sort: {
        createTime: -1
      }
    });
    const prizeList = this.formatMyPrizeList(myAwardList, this.context.activityInfo.awardReceiveExpiredTime);
    if (this.config.rules.some((v) => v.isMark === IS_MARK.YES)) {
      const orderResult = await getUserOrderlist(this.context, this.userInfo.createTime || ((_a = this.context.activityInfo) == null ? void 0 : _a.startTime) || Date.now(), Date.now());
      const results = [];
      if (orderResult.total_results > 0) {
        const { trade } = orderResult.trades;
        trade.forEach((i) => {
          var _a2, _b2;
          if (TAOBAO_SUCCESS_ORDER_STATUS.includes(i.status)) {
            (_b2 = (_a2 = i == null ? void 0 : i.orders) == null ? void 0 : _a2.order) == null ? void 0 : _b2.forEach((s) => {
              results.push({
                payTime: i.pay_time,
                itemId: s.num_iid,
                price: s.price,
                orderId: s.oid,
                title: s.title,
                tId: i.tid
              });
            });
          }
        });
      }
      for (let index = 0; index < prizeList.length; index++) {
        const item2 = prizeList[index];
        const byOrder = results == null ? void 0 : results.find((v) => +v.itemId === +(item2 == null ? void 0 : item2.itemId));
        if (byOrder && [DRAW_STATUS.WAITAWARD, DRAW_STATUS.RETRY].includes(item2.drawStatus)) {
          item2.drawStatus = DRAW_STATUS.SUCCESS;
          await this.dao.record.update({
            _id: item2._id
          }, {
            $set: {
              drawStatus: DRAW_STATUS.SUCCESS,
              orderId: byOrder.orderId,
              tId: byOrder.tId
            }
          });
        }
      }
    }
    return {
      expiredTime: (_b = this.context.activityInfo) == null ? void 0 : _b.awardReceiveExpiredTime,
      list: prizeList
    };
  }
  async getMyLastOpenRankPrize(key) {
    await this.initOpenRecord(this.context.data.activityId);
    const awardConfig = this.config.rules.find((v) => v.key === key);
    const { rankType } = awardConfig;
    let openDay = "fixed";
    if (![RANK_OPEN_TYPE.OVERTIME, RANK_OPEN_TYPE.FIX_TIME].includes(rankType)) {
      openDay = this.getRankPreDay(rankType);
    }
    return await this.getMyAwardsListByQuery({ key, openDay });
  }
  async receiveObjectPrize() {
    const { province, city, area, streetName, addressDetail, id, name: name2, phone: phone2 } = this.context.data;
    const result = await this.dao.record.update({ _id: id }, {
      $set: {
        receiveName: name2,
        phone: phone2,
        drawStatus: DRAW_STATUS.SUCCESS,
        shipStatus: SHIP_STATUS.NO_SHIP,
        province,
        city,
        area,
        streetName,
        addressDetail,
        receiveTime: Date.now(),
        updateTime: Date.now()
      }
    });
    return result ? { province, city, area, streetName, addressDetail, id, name: name2, phone: phone2 } : this.error(CODE_TYPES2.ERROR_RECEIVE_PRIZE);
  }
  async receiveEnamePrize(_id) {
    const awardInfo = await this.dao.record.findOne({ _id });
    if (!awardInfo) {
      return this.error(CODE_TYPES2.ERROR_NO_AWARD);
    }
    const result = await this.sendTBAward(this.context.tb.session, awardInfo);
    await this.dao.record.update({ _id }, {
      $set: {
        drawStatus: result.drawStatus,
        remark: result.remark,
        updateTime: Date.now()
      }
    });
    if (result.remark) {
      return this.error(CODE_TYPES2.SYSTEM_ERROR, result.remark);
    }
    return { drawStatus: result.drawStatus, remark: result.remark };
  }
  async addTickets(key, count = 1, name2 = "", isToday = false) {
    const awardConfig = this.config.rules.find((v) => v.key === key);
    if (!count)
      return 1;
    if (awardConfig) {
      let result;
      if (PRIZE_POOL_TYPE.DRAW === awardConfig.prizePoolType) {
        result = await this.updateDrawTimes(key, isToday, count);
      } else if (PRIZE_POOL_TYPE.EXCHANGE === awardConfig.prizePoolType) {
        if (Object.keys(awardConfig.exchangeKeys).length === 1) {
          result = await this.addExchangeValue(count, Object.keys(awardConfig.exchangeKeys)[0]);
        } else {
          result = await this.addExchangeValue(count, name2);
        }
      } else if (PRIZE_POOL_TYPE.RANK === awardConfig.prizePoolType) {
        result = await this.updateRankValue(key, count, awardConfig);
      }
      return result === 1 ? count : this.error(CODE_TYPES2.ERROR_TICKETS_SET_ERROR);
    }
    return this.error(CODE_TYPES2.ERROR_NO_CONFIG);
  }
  async drawLottery(key) {
    const awardConfig = this.config.rules.find((v) => v.key === key);
    if (PRIZE_POOL_TYPE.DRAW === awardConfig.prizePoolType) {
      if (awardConfig.isTickets) {
        const result = await this.costDrawTimes(awardConfig);
        if (result === 1) {
          return await this.drawLotteryAward(awardConfig);
        }
      } else {
        return await this.drawLotteryAward(awardConfig);
      }
      return this.error(CODE_TYPES2.ERROR_NO_DRAW_CHANCE);
    }
    return this.error(CODE_TYPES2.ERROR_NO_CONFIG);
  }
  async getOpenStatus(key, day, activityInfo) {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    await this.initOpenRecord(activityInfo._id);
    const awardConfig = this.config.rules.find((v) => v.key === key);
    const rankOpenInfo = await this.dao.openRecord.findOne({
      activityId: (activityInfo == null ? void 0 : activityInfo._id) || ((_b = (_a = this.context) == null ? void 0 : _a.activityInfo) == null ? void 0 : _b._id)
    });
    const { rankType } = awardConfig;
    if ([RANK_OPEN_TYPE.OVERTIME, RANK_OPEN_TYPE.FIX_TIME].includes(rankType)) {
      if (RANK_OPEN_TYPE.OVERTIME === rankType && Date.now() < activityInfo.endTime) {
        return ACTIVITY_OPEN_PRIZE_STATUS.NOT_ALLOWED;
      } else if (RANK_OPEN_TYPE.FIX_TIME === rankType && Date.now() < awardConfig.openRankTime) {
        return ACTIVITY_OPEN_PRIZE_STATUS.NOT_ALLOWED;
      } else {
        return ((_d = (_c = rankOpenInfo.openInfo) == null ? void 0 : _c[key]) == null ? void 0 : _d.fixed) || ACTIVITY_OPEN_PRIZE_STATUS.AWAIT;
      }
    } else if (day) {
      return ((_f = (_e = rankOpenInfo.openInfo) == null ? void 0 : _e[key]) == null ? void 0 : _f[day]) || ACTIVITY_OPEN_PRIZE_STATUS.AWAIT;
    } else {
      const openDay = this.getRankPreDay(rankType);
      return ((_h = (_g = rankOpenInfo.openInfo) == null ? void 0 : _g[key]) == null ? void 0 : _h[openDay]) || ACTIVITY_OPEN_PRIZE_STATUS.AWAIT;
    }
  }
  async sendPrizeList(awardsInfoList, key) {
    if (key) {
      const awardConfig = this.config.rules.find((v) => v.key === key);
      const { rankType } = awardConfig;
      let openDay = "fixed";
      if (![RANK_OPEN_TYPE.OVERTIME, RANK_OPEN_TYPE.FIX_TIME].includes(rankType)) {
        openDay = this.getRankPreDay(rankType);
      }
      awardsInfoList.forEach((v) => {
        v.key = key;
        v.openDay = openDay;
      });
    }
    return await this.dao.record.insertMany(awardsInfoList);
  }
  async sendPrizeByKey(awardKey) {
    const { openId, userNick, avatar, activityId } = this.context.userInfo;
    const prizeList = await this.getPrizeConfig(awardKey, activityId);
    const awardsList = prizeList.map((itm) => {
      const { _id, prizeDataType, ename, type, image, name: name2, credits, amount, itemId, skuId } = itm;
      return {
        openId,
        userNick,
        avatar,
        activityId,
        prizeId: _id,
        prizeDataType,
        ename,
        type,
        image,
        name: name2,
        drawStatus: 1,
        credits,
        amount,
        itemId,
        skuId,
        createTime: Date.now(),
        createDay: getToday2()
      };
    });
    if (awardsList.length) {
      await this.sendPrizeList(awardsList);
    }
    return awardsList;
  }
  async exchangePrize(key, prizeId) {
    const awardConfig = this.config.rules.find((v) => v.key === key);
    if (awardConfig.prizePoolType === PRIZE_POOL_TYPE.EXCHANGE) {
      const prizeInfoList = await this.getPrizeList({ _id: prizeId });
      if (prizeInfoList.length > 0) {
        const needLimit = await this.getLimitStatus(awardConfig, prizeInfoList[0], awardConfig.limitSource);
        if (needLimit) {
          return this.error(CODE_TYPES2.ERROR_OVER_LIMIT);
        }
        const record = await this.sendExchangePrize(prizeInfoList[0]);
        if (record) {
          const result = await this.costExchange(prizeInfoList[0], awardConfig);
          if (result === 1) {
            return await this.sendExchangeAward(record);
          } else {
            await this.resetPrizeStock(prizeInfoList[0]);
            return this.error(CODE_TYPES2.ERROR_NO_EXCHANGE_VALUE);
          }
          return this.error(CODE_TYPES2.ERROR_NO_EXCHANGE_VALUE);
        }
        return this.error(CODE_TYPES2.ERROR_NO_STOCK);
      }
      return this.error(CODE_TYPES2.ERROR_NO_PRIZE);
    }
    return this.error(CODE_TYPES2.ERROR_NO_CONFIG);
  }
  async getUserRankList(key, limit, activityId, secretUserNick = true) {
    activityId = activityId || this.context.data.activityId;
    const awardConfig = this.config.rules.find((v) => v.key === key);
    const fixType = [RANK_OPEN_TYPE.OVERTIME, RANK_OPEN_TYPE.FIX_TIME].includes(awardConfig.rankType) ? "fixed" : this.getRankDay(awardConfig.rankType);
    const list = await this.dao.user.find({
      activityId,
      [`rankValue.${key}.${fixType}.value`]: { $gt: 0 }
    }, {
      sort: { [`rankValue.${key}.${fixType}.value`]: -1, [`rankValue.${key}.${fixType}.updateTime`]: 1 },
      limit
    });
    return list.map((v, i) => {
      var _a, _b, _c;
      return __spreadProps(__spreadValues({}, v), {
        rankValue: ((_c = (_b = (_a = v == null ? void 0 : v.rankValue) == null ? void 0 : _a[key]) == null ? void 0 : _b[fixType]) == null ? void 0 : _c.value) || 0,
        avatar: v.avatar,
        userNick: secretUserNick ? formatUserNick(v.userNick) : v.userNick,
        rank: i + 1
      });
    });
  }
  async getMyRankInfo(key) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p;
    const { activityId } = this.context.data;
    const { openId } = this.context;
    const { avatar, userNick } = this.userInfo;
    const awardConfig = this.config.rules.find((v) => v.key === key);
    const fixType = [RANK_OPEN_TYPE.OVERTIME, RANK_OPEN_TYPE.FIX_TIME].includes(awardConfig.rankType) ? "fixed" : this.getRankDay(awardConfig.rankType);
    if (!((_d = (_c = (_b = (_a = this.userInfo) == null ? void 0 : _a.rankValue) == null ? void 0 : _b[key]) == null ? void 0 : _c[fixType]) == null ? void 0 : _d.value)) {
      return { rank: "\u672A\u53C2\u4E0E" };
    }
    const sameScoreList = await this.dao.user.find({ [`rankValue.${key}.${fixType}.value`]: (_h = (_g = (_f = (_e = this.userInfo) == null ? void 0 : _e.rankValue) == null ? void 0 : _f[key]) == null ? void 0 : _g[fixType]) == null ? void 0 : _h.value, activityId }, {
      sort: { [`rankValue.${key}.${fixType}.updateTime`]: 1 },
      projection: { openId: 1 }
    });
    let rank;
    let gap = 0;
    for (let j = 0; j < sameScoreList.length; j++) {
      if (sameScoreList[j].openId === openId) {
        gap = j;
      }
    }
    rank = await this.dao.user.count({
      [`rankValue.${key}.${fixType}.value`]: { $gt: (_l = (_k = (_j = (_i = this.userInfo) == null ? void 0 : _i.rankValue) == null ? void 0 : _j[key]) == null ? void 0 : _k[fixType]) == null ? void 0 : _l.value },
      activityId
    });
    rank = rank + 1 + gap;
    return {
      rank,
      rankValue: (_p = (_o = (_n = (_m = this.userInfo) == null ? void 0 : _m.rankValue) == null ? void 0 : _n[key]) == null ? void 0 : _o[fixType]) == null ? void 0 : _p.value,
      avatar,
      userNick
    };
  }
  getRankPreDay(rankType) {
    switch (rankType) {
      case RANK_OPEN_TYPE.EVERY_DAY:
        return getYesterday();
      case RANK_OPEN_TYPE.EVERY_WEEK:
        return getYesterWeekday();
      default:
        break;
    }
  }
  async openRankPrize(awardConfig, fixType, activityId) {
    const prizeConfigList = await this.getPrizeConfig(awardConfig.key, this.activityInfo._id);
    const userList = await this.dao.user.find({
      activityId
    }, {
      sort: {
        [`rankValue.${awardConfig.key}.${fixType}.value`]: -1,
        [`rankValue.${awardConfig.key}.${fixType}.updateTime`]: 1
      },
      limit: awardConfig.limitNum
    });
    const prizeList = [];
    prizeConfigList.forEach((prizeConfig) => {
      const { rank, _id: prizeId, type, name: name2, image, credits, ename, useUrl } = prizeConfig;
      let [min, max] = rank.split("-");
      if (!max)
        max = min;
      for (let i = +min - 1; i < +max; i++) {
        if (userList[i]) {
          const { openId, userNick } = userList[i];
          prizeList.push({
            openId,
            prizeId,
            activityId,
            ename,
            drawStatus: DRAW_STATUS.WAITAWARD,
            prizeDataType: awardConfig.prizeDataType,
            remark: "",
            credits: +credits,
            type,
            rank: i + 1,
            name: name2,
            useUrl,
            image,
            userNick,
            createDay: getToday2(),
            shipStatus: type === PRIZE_TYPE.OBJECT ? SHIP_STATUS.NO_ADDRESS : "",
            createTime: Date.now(),
            updateTime: Date.now()
          });
        }
      }
    });
    let result = null;
    if (prizeList.length) {
      result = await this.dao.record.insertMany(prizeList);
    }
    if (result.length > 0) {
      await this.setOpenStatus(awardConfig.key, ACTIVITY_OPEN_PRIZE_STATUS.SUCCESS, activityId);
      return 1;
    } else {
      await this.setOpenStatus(awardConfig.key, ACTIVITY_OPEN_PRIZE_STATUS.FAIL, activityId);
      return 0;
    }
  }
  async setOpenStatus(key, status, activityId) {
    var _a, _b, _c, _d, _e, _f;
    const awardConfig = this.config.rules.find((v) => v.key === key);
    const { rankType } = awardConfig;
    const fixType = [RANK_OPEN_TYPE.OVERTIME, RANK_OPEN_TYPE.FIX_TIME].includes(rankType) ? "fixed" : this.getRankDay(rankType);
    if (activityId || ((_b = (_a = this.context) == null ? void 0 : _a.activityInfo) == null ? void 0 : _b._id)) {
      await this.initOpenRecord(activityId || ((_d = (_c = this.context) == null ? void 0 : _c.activityInfo) == null ? void 0 : _d._id));
      return await this.dao.openRecord.update({
        activityId: activityId || ((_f = (_e = this.context) == null ? void 0 : _e.activityInfo) == null ? void 0 : _f._id)
      }, {
        $set: {
          [`openInfo.${key}.${fixType}`]: status
        }
      });
    }
    return 0;
  }
  async sendExchangePrize(prizeInfo) {
    const { openId } = this.context;
    const prize = prizeInfo;
    let reduceResult = 1;
    if (prize.type !== PRIZE_TYPE.CREDITS && prize.type !== PRIZE_TYPE.THANKS) {
      reduceResult = await this.reduceStock(prize._id);
    }
    if ((reduceResult == null ? void 0 : reduceResult.code) || !reduceResult) {
      return false;
    }
    const { type, _id, ename, image, name: name2, useUrl, credits, prizeDataType, benefitType } = prize;
    const { userNick } = this.userInfo;
    const record = {
      openId,
      prizeId: _id,
      activityId: this.context.activityInfo._id,
      drawStatus: DRAW_STATUS.WAITAWARD,
      prizeDataType,
      remark: "",
      credits,
      useUrl,
      type,
      ename,
      name: name2,
      image,
      userNick,
      benefitType,
      createDay: getToday2()
    };
    return record;
  }
  async resetPrizeStock(prizeInfo) {
    if (prizeInfo.type !== PRIZE_TYPE.CREDITS && prizeInfo.type !== PRIZE_TYPE.THANKS) {
      const { switchStock } = prizeInfo;
      if (switchStock === SWICH_TOCK.LIMIT) {
        await this.dao.prize.update({ _id: prizeInfo._id }, { $inc: { useStock: -1 } });
      }
    }
  }
  async sendExchangeAward(record) {
    const result = await this.addAward(record);
    return {
      id: result,
      prizeId: record.prizeId,
      type: record.type,
      name: record.name,
      image: record.image,
      benefitType: record.benefitType
    };
  }
  async costExchange(prizeInfo, awardConfig) {
    const { exchangeNum } = prizeInfo;
    const { ticketType } = awardConfig;
    let whereStr = "";
    const projection = {
      $set: {
        updateTime: Date.now()
      },
      $inc: {}
    };
    let index = 0;
    if (ticketType === TICKET_TYPE.MODULE) {
      for (const key in exchangeNum) {
        if (Object.prototype.hasOwnProperty.call(exchangeNum, key)) {
          const element = exchangeNum[key];
          projection.$inc[`exchangeValue.${key}`] = -element;
          if (index === 0) {
            whereStr = `this.exchangeValue.${key} >= ${element}`;
          } else {
            whereStr += ` && this.exchangeValue.${key} >= ${element}`;
          }
          index++;
        }
      }
      return await this.dao.user.update({
        _id: this.userInfo._id,
        $where: whereStr
      }, projection);
    } else {
      return await new TicketCenter(this.context, this.coreUserDao, ticketType, exchangeNum).cost();
    }
  }
  formatMyPrizeList(myPrizeList, awardReceiveExpiredTime) {
    const now = Date.now();
    return myPrizeList.map((v) => {
      if (now > awardReceiveExpiredTime && [DRAW_STATUS.WAITAWARD, DRAW_STATUS.RETRY].includes(v.drawStatus)) {
        v.drawStatus = DRAW_STATUS.EXPIRED;
        v.remark = `\u5956\u54C1\u5DF2\u8FC7\u671F`;
      }
      return __spreadProps(__spreadValues({}, v), {
        expiredTime: awardReceiveExpiredTime,
        id: v._id
      });
    });
  }
  async sendPrize(prizeInfo, key) {
    const awardConfig = this.config.rules.find((v) => v.key === key);
    const { openId } = this.context;
    const prize = await this.getPrizeList({ _id: prizeInfo._id })[0];
    if (!prize) {
      return 0;
    }
    let reduceResult = 1;
    if (prize.type !== PRIZE_TYPE.CREDITS && prize.type !== PRIZE_TYPE.THANKS) {
      reduceResult = await this.reduceStock(prize._id);
    }
    if ((reduceResult == null ? void 0 : reduceResult.code) || !reduceResult) {
      return 0;
    }
    const { type, _id, ename, image, name: name2, useUrl, credits } = prize;
    const { userNick } = this.userInfo;
    const record = {
      openId,
      prizeId: _id,
      activityId: this.context.activityInfo._id,
      drawStatus: DRAW_STATUS.WAITAWARD,
      prizeDataType: prizeInfo.prizeDataType,
      remark: "",
      credits,
      useUrl,
      type,
      ename,
      name: name2,
      image,
      userNick,
      createDay: getToday2()
    };
    if (awardConfig.isMark === IS_MARK.YES) {
      if (prize.type !== PRIZE_TYPE.CREDITS && prize.type !== PRIZE_TYPE.THANKS && (prize == null ? void 0 : prize.itemId)) {
        const markResult = await this.doMark(prize.itemId);
        if (!markResult.success) {
          return this.error(CODE_TYPES2.ERROR_DO_MARK);
        }
      }
    }
    const result = await this.addAward(record);
    return result;
  }
  async costDrawTimes(awardConfig) {
    var _a, _b, _c, _d;
    const { drawType, costCount, key, ticketType, isGradeCredit, gradeCreditCost } = awardConfig;
    let projection = {};
    if (ticketType === TICKET_TYPE.MODULE) {
      if (drawType === DRAW_TYPE.EVERY_FIXED) {
        projection = {
          $inc: {
            [`drawTimes.${key}.today`]: +costCount > ((_a = this.userInfo.drawTimes) == null ? void 0 : _a[key].today) ? -((_b = this.userInfo.drawTimes) == null ? void 0 : _b[key].today) : -costCount,
            [`drawTimes.${key}.fixed`]: +costCount > ((_c = this.userInfo.drawTimes) == null ? void 0 : _c[key].today) ? ((_d = this.userInfo.drawTimes) == null ? void 0 : _d[key].today) - costCount : 0
          }
        };
        return await this.dao.user.update({
          _id: this.userInfo._id,
          $where: `this.drawTimes.${key}.today + this.drawTimes.${key}.fixed >= ${costCount}`
        }, projection);
      } else {
        projection = {
          $inc: {
            [`drawTimes.${key}.fixed`]: -costCount
          }
        };
        return await this.dao.user.update({
          _id: this.userInfo._id,
          $where: `this.drawTimes.${key}.fixed >= ${costCount}`
        }, projection);
      }
    } else {
      return await new TicketCenter(this.context, this.coreUserDao, ticketType, ticketType === TICKET_TYPE.CREDITS && isGradeCredit === GRADE_COST_TYPE.WITH ? gradeCreditCost : costCount, isGradeCredit).cost();
    }
  }
  async drawLotteryAward(awardConfig) {
    const { openId } = this.context;
    const prizesPool = await this.getPrizeConfig(awardConfig.key, this.activityInfo._id);
    const thanksPrize = prizesPool.find((v) => v.isBackUp) || {
      type: PRIZE_TYPE.THANKS,
      prizeDataType: awardConfig.prizeDataType,
      name: "\u8C22\u8C22\u53C2\u4E0E"
    };
    let prize = await this.getPrizeByProbability(prizesPool);
    if (!prize) {
      prize = thanksPrize;
    }
    let reduceResult = 1;
    const needLimit = await this.getLimitStatus(awardConfig, prize, awardConfig.limitSource);
    if (needLimit) {
      prize = thanksPrize;
    }
    if (prize.type !== PRIZE_TYPE.CREDITS && prize.type !== PRIZE_TYPE.THANKS) {
      reduceResult = await this.reduceStock(prize._id);
    }
    if ((reduceResult == null ? void 0 : reduceResult.code) || !reduceResult) {
      prize = thanksPrize;
    }
    const { type, _id, ename, image, name: name2, useUrl, credits, benefitType } = prize;
    const { userNick } = this.userInfo;
    const record = {
      openId,
      prizeId: _id,
      activityId: this.context.activityInfo._id,
      drawStatus: DRAW_STATUS.WAITAWARD,
      prizeDataType: awardConfig.prizeDataType,
      remark: "",
      useUrl,
      credits,
      benefitType,
      type,
      ename,
      name: name2,
      image,
      userNick,
      createDay: getToday2()
    };
    if (awardConfig.isMark === IS_MARK.YES) {
      if (prize.type !== PRIZE_TYPE.CREDITS && prize.type !== PRIZE_TYPE.THANKS && (prize == null ? void 0 : prize.itemId)) {
        const markResult = await this.doMark(prize.itemId);
        if (!markResult.success) {
          return this.error(CODE_TYPES2.ERROR_DO_MARK);
        }
      }
    }
    const result = await this.addAward(record);
    return {
      id: result,
      type,
      name: name2,
      benefitType,
      image
    };
  }
  async getLimitStatus(awardConfig, prize, limitSource) {
    let { limitType, limitNum } = awardConfig;
    if (limitSource === LIMIT_SOURCE.FROM_B) {
      limitType = prize.limitType;
      limitNum = prize.limitNum;
    }
    let count = 0;
    if (limitType === LIMIT_TYPE.NO_LIMIT) {
      return false;
    } else if (limitType === LIMIT_TYPE.DAY_PRIZE) {
      count = await this.dao.record.count({
        prizeId: prize._id,
        createDay: getToday2(),
        activityId: this.context.activityInfo._id
      });
    } else if (limitType === LIMIT_TYPE.DAY_USER) {
      count = await this.dao.record.count({
        prizeId: prize._id,
        openId: this.context.openId,
        createDay: getToday2(),
        activityId: this.context.activityInfo._id
      });
    } else if (limitType === LIMIT_TYPE.USER) {
      count = await this.dao.record.count({
        prizeId: prize._id,
        openId: this.context.openId,
        activityId: this.context.activityInfo._id
      });
    }
    return count >= limitNum;
  }
  async addAward(award) {
    return await this.dao.record.insertOne(__spreadProps(__spreadValues({}, award), {
      shipStatus: (award == null ? void 0 : award.type) === PRIZE_TYPE.OBJECT ? SHIP_STATUS.NO_ADDRESS : "",
      createTime: Date.now(),
      updateTime: Date.now()
    }));
  }
  async getPrizeByProbability(prizes) {
    const probability = rand(1e4);
    return prizes.find((v) => probability <= v.properiodto && probability >= v.properiodfrom);
  }
  async reduceStock(_id) {
    const result = await this.dao.prize.findOne({ _id, deleteStatus: DELETE_STATUS2.NORMAL });
    if (!result) {
      return CODE_TYPES2.ERROR_NO_PRIZE;
    }
    const { switchStock, stock, useStock } = result;
    if (switchStock === SWICH_TOCK.NO_LIMIT) {
      return 1;
    }
    if (useStock >= stock) {
      return CODE_TYPES2.ERROR_NO_STOCK;
    }
    try {
      const updateResult = await this.dao.prize.update({
        _id,
        $where: "this.useStock < this.stock"
      }, {
        $inc: {
          useStock: 1
        }
      });
      return updateResult === 1 ? 1 : CODE_TYPES2.ERROR_NO_STOCK;
    } catch (e) {
      console.log(`\u6263\u5E93\u5B58\u5931\u8D25\uFF1A`, e);
      return CODE_TYPES2.SYSTEM_ERROR;
    }
  }
  async updateRankValue(key, count, awardConfig) {
    const { rankType, rankScoreType } = awardConfig;
    const fixType = [RANK_OPEN_TYPE.OVERTIME, RANK_OPEN_TYPE.FIX_TIME].includes(rankType) ? "fixed" : this.getRankDay(rankType);
    const projection = this.getRankProject(key, count, rankScoreType, fixType);
    if (Object.keys(projection).length > 0) {
      return await this.dao.user.update({
        _id: this.userInfo._id
      }, projection);
    }
    return 1;
  }
  getRankDay(rankType) {
    switch (rankType) {
      case RANK_OPEN_TYPE.EVERY_DAY:
        return getYesterday();
      case RANK_OPEN_TYPE.EVERY_WEEK:
        return getYesterWeekday();
      default:
        break;
    }
  }
  getRankProject(key, count, rankScoreType, fixType) {
    var _a, _b, _c;
    const projection = {};
    if (rankScoreType === RANK_SCORE_TYPE.HIGH && count > (((_c = (_b = (_a = this.userInfo.rankValue) == null ? void 0 : _a[`${key}`]) == null ? void 0 : _b[`${fixType}`]) == null ? void 0 : _c.value) || 0)) {
      projection.$set = {
        [`rankValue.${key}.${fixType}.value`]: count,
        [`rankValue.${key}.${fixType}.updateTime`]: Date.now()
      };
    } else if (rankScoreType === RANK_SCORE_TYPE.TOTAL) {
      projection.$inc = {
        [`rankValue.${key}.${fixType}.value`]: count
      };
      projection.$set = {
        [`rankValue.${key}.${fixType}.updateTime`]: Date.now()
      };
    }
    return projection;
  }
  async doMark(itemId) {
    const { openId } = this.context;
    try {
      const markResult = await this.context.cloud.topApi.invoke({
        api: "taobao.opentrade.special.users.mark",
        autoSession: true,
        data: {
          hit: true,
          open_user_ids: openId,
          item_id: itemId,
          sku_id: "0",
          status: "mark",
          limit_num: 1
        }
      });
      console.log(`markResult`, markResult);
      return { success: true, data: markResult };
    } catch (e) {
      return { success: false, data: e };
    }
  }
  async addExchangeValue(count, name2) {
    return await this.dao.user.update({
      _id: this.userInfo._id
    }, {
      $inc: {
        [`exchangeValue.${name2}`]: count
      }
    });
  }
  async updateDrawTimes(key, isToday, count) {
    const projection = {};
    if (isToday) {
      projection.$set = {
        [`drawTimes.${key}.today`]: +count
      };
    }
    projection.$inc = {
      [`drawTimes.${key}.fixed`]: +count
    };
    return await this.dao.user.update({
      _id: this.userInfo._id
    }, projection);
  }
  async sendTBAward(session, awardInfo) {
    const { type, ename, _id, credits } = awardInfo;
    if (!type) {
      return this.error(CODE_TYPES2.PARAMS_ERROR);
    }
    if (type === PRIZE_TYPE.OBJECT) {
      return awardInfo;
    }
    console.log(`type`, type);
    if (type === PRIZE_TYPE.ENAME) {
      console.log(`\u4E2D\u6743\u76CA`);
      const { drawStatus, remark } = await this.sendEname(ename, _id, session, this.context);
      console.log(`drawStatus, remark`, drawStatus, remark);
      awardInfo.drawStatus = drawStatus;
      awardInfo.remark = remark;
    }
    if (type === PRIZE_TYPE.CREDITS) {
      const { drawStatus, remark } = await this.sendCredits(credits, session, this.context);
      awardInfo.drawStatus = drawStatus;
      awardInfo.remark = remark;
    }
    return awardInfo;
  }
  async sendCredits(credits, session, context) {
    let drawStatus = 0;
    let remark = "";
    const result = await TBAPIS2.changeCredits(context, {
      quantity: credits,
      change_type: 2,
      opt_type: "0",
      remark: `\u53C2\u4E0E\u6D3B\u52A8\u52A0\u79EF\u5206`
    });
    if (result) {
      drawStatus = DRAW_STATUS.SUCCESS;
    } else {
      drawStatus = DRAW_STATUS.FAIL;
      remark = result.result_msg;
    }
    return { drawStatus, remark };
  }
  async sendEname(ename, uniqueId, session, context) {
    let result = {
      result_success: false,
      result_code: "",
      msg: "",
      result_msg: "",
      sub_msg: ""
    };
    try {
      result = await TBAPIS2.benefitSend(context, {
        right_ename: ename,
        receiver_id: context.openId,
        unique_id: uniqueId,
        app_name: C_APP_NAME + this.context.appId,
        session
      });
    } catch (e) {
      console.log(`\u53D1\u653E\u6743\u76CA\u5931\u8D25`, e);
      result = e;
    }
    let drawStatus = 0;
    let remark = "";
    if (result.result_success) {
      drawStatus = DRAW_STATUS.SUCCESS;
    } else {
      const result_code = result.result_code;
      if ([
        "APPLY_SINGLE_COUPON_COUNT_EXCEED_LIMIT",
        "APPLY_ONE_SELLER_COUNT_EXCEED_LIMIT",
        "USER_PERMISSION_EXCEED_MAX_RIGHT_COUNT_IN_DAY"
      ].includes(result_code)) {
        drawStatus = DRAW_STATUS.RETRY;
      } else {
        drawStatus = DRAW_STATUS.FAIL;
      }
      remark = TBERROR[result_code || result.msg] || result.result_msg || result.sub_msg || `\u53D1\u653E\u5931\u8D25`;
    }
    return { remark, drawStatus };
  }
  formatMyAwardList(myPrizeList, awardReceiveExpiredTime) {
    const now = Date.now();
    return myPrizeList.map((v) => {
      if (awardReceiveExpiredTime && now > awardReceiveExpiredTime && [DRAW_STATUS.WAITAWARD, DRAW_STATUS.RETRY].includes(v.drawStatus)) {
        v.drawStatus = DRAW_STATUS.EXPIRED;
        v.remark = `\u5956\u54C1\u5DF2\u8FC7\u671F`;
      }
      return __spreadProps(__spreadValues({}, v), {
        expiredTime: awardReceiveExpiredTime,
        id: v._id
      });
    });
  }
  async getAwardsInfoList(query, projection) {
    return await this.dao.record.find(query, projection);
  }
  initCustomUser() {
    return {
      drawTimes: this.initDrawTimes(),
      exchangeValue: {},
      rankValue: this.initRankValue()
    };
  }
  initDrawTimes() {
    let drawTimes = {};
    this.config.rules.forEach((v) => {
      if (v.prizePoolType === PRIZE_POOL_TYPE.DRAW)
        drawTimes = __spreadProps(__spreadValues({}, drawTimes), {
          [v.key]: {
            today: 0,
            fixed: 0
          }
        });
    });
    return drawTimes;
  }
  initRankValue() {
    let rankValue = {};
    this.config.rules.forEach((v) => {
      if (v.prizePoolType === PRIZE_POOL_TYPE.RANK)
        rankValue = __spreadProps(__spreadValues({}, rankValue), {
          [v.key]: {
            fixed: {
              value: 0,
              updateTime: Date.now()
            }
          }
        });
    });
    return rankValue;
  }
};

// src/mini-tornado/microservice/user/errorCode.ts
var BusinessError3 = {};
var CODE_TYPES3 = Object.assign({}, DEFAULT_CODE_TYPES, BusinessError3);

// src/mini-tornado/microservice/user/user.base.service.ts
var BaseUserService = class extends BaseService {
  constructor(context, config2, userInfo) {
    super(context);
    this.config = config2;
    this.dao = {
      user: new BaseDao2(context, config2.dbName.user),
      record: new BaseDao2(context, config2.dbName.record)
    };
    this.userInfo = userInfo;
  }
  init() {
    const { isFollow, inviteId, isVip } = this.context.data;
    const createDay = getToday();
    const user = __spreadProps(__spreadValues({}, formatInitBaseUser(this.context)), {
      inviteId,
      member: {
        flag: !!isVip
      },
      follow: {
        flag: !!isFollow
      },
      login: {
        [createDay]: 1
      }
    });
    return user;
  }
  async getStats(statArray) {
    const {
      data: { startDay, endDay }
    } = this.context;
    let day = startDay;
    const result = {};
    while (day <= endDay) {
      const exec = [];
      statArray.forEach((stat) => {
        switch (stat) {
          case "accessUV":
            exec.push(this.getUV(day, {}));
            break;
          case "accessPV":
            exec.push(this.getPV(day, {}));
            break;
          case "newUser":
            exec.push(this.getPV(day, {}, "user"));
            break;
          case "newInvited":
            exec.push(this.getPV(day, { inviteId: { $exists: true } }, "user"));
            break;
          case "oldVipPV":
            exec.push(this.getPV(day, { isVip: true }));
            break;
          case "oldVipUV":
            exec.push(this.getUV(day, { isVip: true }));
            break;
          case "realOldVipPV":
            exec.push(this.getPV(day, {
              isVip: true,
              $or: [{ "member.flag": false, "member.bememberDay": { $ne: day } }, { "member.flag": true }]
            }));
            break;
          case "realOldVipUV":
            exec.push(this.getUV(day, {
              isVip: true,
              $or: [{ "member.flag": false, "member.bememberDay": { $ne: day } }, { "member.flag": true }]
            }));
            break;
          case "noVipPV":
            exec.push(this.getPV(day, { isVip: false }));
            break;
          case "noVipUV":
            exec.push(this.getUV(day, { isVip: false }));
            break;
          case "noFollowPV":
            exec.push(this.getPV(day, { isFollow: false }));
            break;
          case "noFollowUV":
            exec.push(this.getUV(day, { isFollow: false }));
            break;
          case "followPV":
            exec.push(this.getPV(day, { isFollow: true }));
            break;
          case "followUV":
            exec.push(this.getUV(day, { isFollow: true }));
            break;
          case "newVipUV":
            exec.push(this.getPV(day, { "member.newMember": true, "member.bememberDay": day }, "user"));
            break;
          case "newFollowUV":
            exec.push(this.getPV(day, { "follow.newFollow": true, "follow.followDay": day }, "user"));
            break;
          case "inviteUV":
            exec.push(this.getUV(day, { isReceiveShare: true }));
            break;
          default:
            break;
        }
      });
      const _data = (await Promise.all(exec)).map((itm) => typeof itm === "number" ? itm : itm.length);
      result[day] = formatDayStats("user", null, statArray, _data);
      day = dateFormat(new Date(`${day} 00:00:00`).getTime() + 24 * 60 * 60 * 1e3).format();
    }
    return result;
  }
  async addTickets(count) {
    const { _id } = this.userInfo;
    if (!count)
      return 1;
    const result = await this.dao.user.update({
      _id
    }, {
      $inc: { ticket: count }
    });
    if (result !== 1) {
      return this.error(CODE_TYPES3.SYSTEM_ERROR, "\u66F4\u65B0\u7528\u6237\u51ED\u8BC1\u5931\u8D25");
    }
    return count;
  }
  async reduceTickets(count) {
    const { _id } = this.userInfo;
    if (!count)
      return 1;
    const result = await this.dao.user.update({
      _id,
      $where: `this.ticket >= ${count}`
    }, {
      $inc: { ticket: count }
    });
    if (result !== 1) {
      return this.error(CODE_TYPES3.SYSTEM_ERROR, "\u66F4\u65B0\u7528\u6237\u51ED\u8BC1\u5931\u8D25");
    }
    return count;
  }
  getUV(day, query = {}, group = "$openId") {
    const {
      data: { activityId }
    } = this.context;
    return new Promise((resolve) => {
      this.dao.record.aggregate([{ $match: __spreadValues({ activityId, createDay: day }, query) }, { $group: { _id: group } }]).then((res) => {
        resolve(res);
      });
    });
  }
  getPV(day, query = {}, dao = "record") {
    const {
      data: { activityId }
    } = this.context;
    const recorddao = dao === "user" ? this.dao.user : this.dao.record;
    return new Promise((resolve) => {
      recorddao.count(__spreadValues({ activityId, createDay: day }, query)).then((res) => {
        resolve(res);
      });
    });
  }
  async update() {
    const { isFollow, isVip } = this.context.data;
    const today = getToday();
    const projection = {
      $set: {
        updateTime: Date.now(),
        follow: await this.updateUserFollow(isFollow, false),
        member: await this.updateUserVip({ isVip }, false)
      },
      $inc: {
        [`login.${today}`]: 1
      }
    };
    console.log("object :>> ", projection);
    return projection;
  }
  async addUserRecord() {
    var _a;
    const { openId } = this.context;
    const { activityId, userNick, avatar, inviteId, isVip, isFollow } = this.context.data;
    const { userInfo } = this;
    const today = getToday();
    const now = Date.now();
    await this.dao.record.insertOne({
      openId,
      activityId,
      userNick,
      avatar,
      isReceiveShare: !!inviteId,
      inviteId,
      isFollow,
      isVip,
      follow: userInfo.follow,
      member: userInfo.member,
      createTime: now,
      updateTime: now,
      createDay: today
    });
    const firstLoginToday = ((_a = userInfo == null ? void 0 : userInfo.login) == null ? void 0 : _a[today]) === 1;
    const newUser = userInfo.createDay === today && firstLoginToday;
    return { openId, firstLoginToday, newUser, userNick, avatar, inviteId };
  }
  async updateUserFollow(isFollow, updateDataBase = true) {
    const { follow, _id } = this.userInfo;
    const followBefore = follow.flag;
    const followNow = isFollow;
    const today = getToday();
    if (!followBefore && followNow && !follow.newFollow) {
      const updatedFollowInfo = __spreadProps(__spreadValues({}, follow), {
        newFollow: true,
        followTime: Date.now(),
        followDay: today
      });
      if (updateDataBase) {
        const result = await this.dao.user.update({ _id }, { $set: { follow: updatedFollowInfo, updateTime: Date.now() } });
        if (!result)
          return this.error(CODE_TYPES3.SYSTEM_ERROR, "\u66F4\u65B0\u7528\u6237\u4FE1\u606F\u9519\u8BEF");
        this._setUserInfo(__spreadProps(__spreadValues({}, this.userInfo), {
          follow: updatedFollowInfo
        }));
      }
      return updatedFollowInfo;
    }
    return follow;
  }
  async updateUserVip(vipInfo, updateDataBase = true) {
    const {
      member: { flag, newMember },
      _id
    } = this.userInfo;
    const { isVip } = vipInfo;
    const today = getToday();
    if (!flag && isVip && !newMember) {
      const updatedMemberInfo = {
        flag,
        newMember: true,
        bememberTime: Date.now(),
        bememberDay: today
      };
      if (updateDataBase) {
        const result = await this.dao.user.update({ _id }, { $set: { member: updatedMemberInfo, updateTime: Date.now() } });
        if (!result)
          return this.error(CODE_TYPES3.SYSTEM_ERROR, "\u66F4\u65B0\u7528\u6237\u4FE1\u606F\u9519\u8BEF");
        this._setUserInfo(__spreadProps(__spreadValues({}, this.userInfo), {
          member: updatedMemberInfo
        }));
      }
      return updatedMemberInfo;
    }
    return this.userInfo.member;
  }
};

// src/mini-tornado/microservice/task/errorCode.ts
var BusinessError4 = {
  ERROR_TASK_NORECEIVE: {
    code: `430001`,
    defaultMsg: `\u8BE5\u4EFB\u52A1\u6682\u65E0\u9886\u53D6\u6B21\u6570`
  },
  ERROR_TASK_ALREADYRECEIVE: {
    code: `430002`,
    defaultMsg: `\u4EFB\u52A1\u5956\u52B1\u5DF2\u9886\u53D6`
  },
  ERROR_TASK_COMPLETE: {
    code: `430003`,
    defaultMsg: `\u4EFB\u52A1\u5DF2\u5B8C\u6210`
  },
  ERROR_INVALID_INVITE_ID: {
    code: `430004`,
    defaultMsg: `\u9080\u8BF7\u7801\u65E0\u6548`
  },
  ERROR_NO_CREDITS: {
    code: `430005`,
    defaultMsg: `\u4EFB\u52A1\u6240\u9700\u79EF\u5206\u4E0D\u8DB3`
  },
  ERROR_TASK_LIMIT: {
    code: `430006`,
    defaultMsg: `\u4ECA\u65E5\u8BE5\u4EFB\u52A1\u6B21\u6570\u8D85\u9650`
  },
  ERROR_AREADY_INVITE_SUCCESS: {
    code: `430007`,
    defaultMsg: `\u60A8\u5DF2\u6210\u529F\u52A9\u529B\u8FC7\uFF0C\u4E0D\u80FD\u91CD\u590D\u52A9\u529B~`
  },
  ERROR_NO_INVITE_SELF: {
    code: `430008`,
    defaultMsg: `\u81EA\u5DF1\u4E0D\u80FD\u7ED9\u81EA\u5DF1\u52A9\u529B`
  },
  ERROR_INVITE: {
    code: `430009`,
    defaultMsg: `\u53EA\u6709\u65B0\u4F1A\u5458\u624D\u80FD\u52A9\u529B\u54E6~`
  },
  ERROR_INVITE_TIMES_LIMIT: {
    code: `440001`,
    defaultMsg: `\u4ECA\u5929\u5206\u4EAB\u8005\u7684\u52A9\u529B\u540D\u989D\u5DF2\u6EE1\uFF0C\u660E\u5929\u518D\u6765\u52A9\u529B\u5427`
  },
  ERROR_DO_TASK: {
    code: `430010`,
    defaultMsg: `\u4EFB\u52A1\u5B8C\u6210\u5931\u8D25~`
  },
  ERROR_TASK_RATE: {
    code: `430011`,
    defaultMsg: `\u4EFB\u52A1\u5468\u671F\u9A8C\u8BC1\u5931\u8D25`
  },
  ERROR_TASK_TYPE: {
    code: `430012`,
    defaultMsg: `\u4EFB\u52A1\u7C7B\u578B\u9A8C\u8BC1\u5931\u8D25`
  },
  ERROR_NO_INVITEID: {
    code: `430013`,
    defaultMsg: `\u9080\u8BF7\u7528\u6237\u4E0D\u5B58\u5728`
  },
  ERROR_NO_DURING: {
    code: `430014`,
    defaultMsg: `\u9650\u65F6\u4EFB\u52A1\u672A\u5F00\u542F`
  },
  ERROR_NO_TASK: {
    code: `430015`,
    defaultMsg: `\u4EFB\u52A1\u4E0D\u5B58\u5728`
  },
  ERROR_NO_INVITEUSER: {
    code: `430016`,
    defaultMsg: `\u9080\u8BF7\u4EBA\u4E0D\u5B58\u5728`
  }
};
var CODE_TYPES4 = Object.assign({}, DEFAULT_CODE_TYPES, BusinessError4);

// src/mini-tornado/microservice/task/contant.ts
var TASK_RATE_TYPE = {
  FOREVER: 1,
  EVERYDAY: 2,
  FOREVER_LIMIT: 3,
  EVERYDAY_LIMIT: 4,
  NO: 5
};
var TASK_SOURCE = {
  S: 1,
  B: 2
};
var TASK_STATUS = {
  WAIT_DO: 1,
  WAIT_RECEIVE: 2,
  DONE: 3
};

// src/mini-tornado/microservice/task/task.base.service.ts
var BaseTaskService = class extends BaseService {
  constructor(context, config2, userInfo) {
    super(context);
    this.config = config2;
    this.userInfo = userInfo;
    this.dao = {
      user: new BaseDao2(context, config2.dbName.user),
      record: new BaseDao2(context, config2.dbName.record)
    };
  }
  init(context) {
    const user = __spreadProps(__spreadValues({}, formatInitBaseUser(context)), {
      remainTimes: {},
      lastLimit: {}
    });
    return user;
  }
  async getStats(statArray) {
    const {
      data: { startDay, endDay }
    } = this.context;
    let day = startDay;
    const result = {};
    while (day <= endDay) {
      for (const taskKey in statArray) {
        const taskConfig = this.config.rules.find((itm) => itm.key === taskKey);
        const exec = [];
        statArray[taskKey].forEach((stat) => {
          switch (stat) {
            case "finishUV":
              if (taskConfig.type === "invite") {
                exec.push(this.getFinishUV(day, taskKey, "$beInvitedId"));
              } else {
                exec.push(this.getFinishUV(day, taskKey));
              }
              break;
            case "finishPV":
              exec.push(this.getFinishPV(day, taskKey));
              break;
            case "successInviteUV":
              exec.push(this.getFinishUV(day, taskKey));
              break;
            case "orderPrize":
              exec.push(this.getTotalOrderPrize(day, taskKey));
              break;
            default:
              break;
          }
        });
        if (!result[day]) {
          result[day] = {};
        }
        result[day][taskConfig.name] = formatDayStats("task", taskConfig.type, statArray[taskKey], await Promise.all(exec), taskConfig.name);
      }
      day = dateFormat(new Date(`${day} 00:00:00`).getTime() + 24 * 60 * 60 * 1e3).format();
    }
    return result;
  }
  getFinishUV(day, key, group = "$openId") {
    const {
      data: { activityId }
    } = this.context;
    return new Promise((resolve) => {
      this.dao.record.aggregate([{ $match: { activityId, createDay: day, key } }, { $group: { _id: group } }]).then((res) => {
        resolve(res.length);
      });
    });
  }
  getFinishPV(day, key) {
    const {
      data: { activityId }
    } = this.context;
    return new Promise((resolve) => {
      this.dao.record.count({ activityId, createDay: day, key }).then((res) => {
        resolve(res);
      });
    });
  }
  getTotalOrderPrize(day, key) {
    const {
      data: { activityId }
    } = this.context;
    return new Promise((resolve) => {
      this.dao.record.aggregate([
        { $match: { activityId, createDay: day, key } },
        { $group: { _id: "$activityId", count: { $sum: "$payment" } } }
      ]).then((list) => {
        resolve(((list == null ? void 0 : list[0]) && list[0].count || 0) / 100);
      });
    });
  }
  async getTaskList(context) {
    const { rules } = this.config;
    const { tasks } = this.activityInfo;
    const list = [];
    rules.forEach((task) => {
      list.push(this.formatTask(task, tasks[task.key]));
    });
    return await Promise.all(list);
  }
  async getCompleteList(context, key) {
    const { openId } = context;
    return await this.dao.record.find({ openId, key });
  }
  async completeTask(context, key, customTaskRecord) {
    var _a;
    const { rules } = this.config;
    let {
      data: { activityId, inviteId, itemId },
      activityInfo,
      userInfo,
      openId
    } = context;
    let { userNick, avatar, lastLimit } = this.userInfo;
    let taskConfig;
    taskConfig = rules.find((itm) => itm.key === key);
    if (!taskConfig) {
      return this.error(CODE_TYPES4.ERROR_NO_TASK);
    }
    const { source, type } = taskConfig;
    if (source === TASK_SOURCE.B) {
      taskConfig = __spreadValues(__spreadValues({}, taskConfig), activityInfo.tasks[key]);
    }
    const { rateType, times } = taskConfig;
    if (type === "invite") {
      if (!inviteId) {
        return this.error(CODE_TYPES4.ERROR_NO_INVITEID);
      }
      if (openId === inviteId) {
        return this.error(CODE_TYPES4.ERROR_NO_INVITE_SELF);
      }
      if ((_a = userInfo == null ? void 0 : userInfo.member) == null ? void 0 : _a.newMember) {
        const doHelp = await this.dao.record.findOne({ activityId, key, beInvitedId: openId });
        if (doHelp)
          return this.error(CODE_TYPES4.ERROR_AREADY_INVITE_SUCCESS);
      } else {
        return this.error(CODE_TYPES4.ERROR_INVITE);
      }
      const inviteUserInfo = await this.coreUserDao.findOne({ activityId, openId: inviteId });
      if (!inviteUserInfo) {
        return this.error(CODE_TYPES4.ERROR_NO_INVITEUSER);
      }
      openId = inviteId;
      userNick = inviteUserInfo.userNick;
    }
    if (rateType !== TASK_RATE_TYPE.NO) {
      const completeTimes = await this.getComplteTimes(taskConfig, openId);
      if (completeTimes >= times) {
        return this.error(CODE_TYPES4.ERROR_TASK_LIMIT);
      }
    }
    if ([TASK_RATE_TYPE.EVERYDAY_LIMIT, TASK_RATE_TYPE.FOREVER_LIMIT].includes(rateType) && type !== "order") {
      if (type === "invite") {
        lastLimit = (await this.dao.user.findOne({ activityId, openId })).lastLimit;
      }
      if (!(lastLimit == null ? void 0 : lastLimit[key])) {
        return this.error(CODE_TYPES4.ERROR_NO_DURING);
      }
      const now = Date.now();
      if (!(now >= lastLimit[key].startTime && now <= lastLimit[key].endTime)) {
        return this.error(CODE_TYPES4.ERROR_TASK_RATE);
      }
    }
    await this.dao.record.insertOne(__spreadValues({
      activityId,
      openId,
      userNick,
      avatar,
      key,
      type,
      itemId,
      createTime: Date.now(),
      updateTime: Date.now(),
      createDay: getToday(),
      beInvitedId: type === "invite" ? this.context.openId : void 0,
      beInvitedUserNick: type === "invite" ? userInfo.userNick : void 0,
      beInvitedAvatar: type === "invite" ? userInfo.avatar : void 0
    }, customTaskRecord));
    return await this.dao.user.update({ activityId, openId }, { $inc: { [`remainTimes.${key}`]: 1 } });
  }
  async resetTaskRemainTime(context) {
    const {
      data: { key },
      activityInfo
    } = context;
    const { rules } = this.config;
    const { _id, remainTimes } = this.userInfo;
    let taskConfig = rules.find((itm) => itm.key === key);
    if (!taskConfig) {
      return this.error(CODE_TYPES4.ERROR_NO_TASK);
    }
    const { source } = taskConfig;
    if (source === TASK_SOURCE.B) {
      taskConfig = __spreadValues(__spreadValues({}, taskConfig), activityInfo.tasks[key]);
    }
    const { reward } = taskConfig;
    if (remainTimes[key] && remainTimes[key] > 0) {
      const result = await this.dao.user.update({ _id, $where: `this.remainTimes.${key} >= ${remainTimes[key]}` }, { $inc: { [`remainTimes.${key}`]: -remainTimes[key] } });
      if (result) {
        return remainTimes[key] * reward;
      } else {
        return this.error(CODE_TYPES4.ERROR_TASK_NORECEIVE);
      }
    } else {
      return this.error(CODE_TYPES4.ERROR_TASK_NORECEIVE);
    }
  }
  async openLimitTask(context) {
    const { rules } = this.config;
    const {
      data: { key }
    } = context;
    const { lastLimit = {}, _id } = this.userInfo;
    const taskConfig = rules.filter((itm) => itm.key === key);
    if (!taskConfig) {
      return this.error(CODE_TYPES4.ERROR_NO_TASK);
    }
    const { rateType, limitTime } = taskConfig[0];
    if ([TASK_RATE_TYPE.FOREVER_LIMIT, TASK_RATE_TYPE.EVERYDAY_LIMIT].includes(rateType)) {
      let isOpen = false;
      switch (rateType) {
        case TASK_RATE_TYPE.FOREVER_LIMIT:
          if (!lastLimit[key]) {
            isOpen = true;
          }
          break;
        case TASK_RATE_TYPE.EVERYDAY_LIMIT:
          if (!lastLimit[key] || lastLimit[key].startDay !== getToday()) {
            isOpen = true;
          }
          break;
      }
      if (isOpen) {
        const now = Date.now();
        await this.dao.user.update({ _id }, {
          $set: {
            [`lastLimit.${key}`]: {
              startDay: getToday(),
              startTime: now,
              endTime: now + limitTime * 1e3
            }
          }
        });
        return { isOpen, startTime: now, endTime: now + limitTime * 1e3 };
      }
      return { isOpen };
    }
    return this.error(CODE_TYPES4.ERROR_TASK_RATE);
  }
  async getCollectGoods(context) {
    var _a;
    const {
      activityInfo,
      data: { key },
      openId
    } = context;
    const taskConfig = this.config.rules.find((itm) => itm.key === key);
    if (!taskConfig) {
      return this.error(CODE_TYPES4.ERROR_NO_TASK);
    }
    const { type } = taskConfig;
    if (type !== "collect") {
      return this.error(CODE_TYPES4.ERROR_TASK_TYPE);
    }
    const { tasks } = activityInfo;
    const { itemIds } = tasks[key];
    const GOODSINFO = "detail_url,approve_status,num_iid,title,nick,type,cid,pic_url,num,props,valid_thru,list_time,desc,price,has_discount,has_invoice,has_warranty,has_showcase,modified,delist_time,postage_id,seller_cids,outer_id,sold_quantity";
    if (!itemIds)
      return [];
    const result = await TBAPIS2.getItemListByItemIds(context, itemIds, { fields: GOODSINFO }, context.tb.session);
    const items = ((_a = result == null ? void 0 : result.items) == null ? void 0 : _a.item) || [];
    const hasCollectIds = (await this.dao.record.find({ activityId: activityInfo._id, key, openId })).map((v) => v.itemId);
    const list = items.map((v) => {
      return {
        collected: hasCollectIds.includes(v.num_iid),
        itemId: v.num_iid,
        name: v.title,
        price: v.price,
        url: v.detail_url,
        image: v.pic_url,
        desc: v.desc
      };
    });
    return list;
  }
  async getItemIdTaggedMap(ids, key) {
    ids = typeof ids === "string" ? ids.split(",") : ids;
    if (!key)
      return {};
    const { activityId, openId } = this.userInfo;
    const idsRecords = await Promise.all(ids.map((itemId) => this.dao.record.count({ activityId, openId, key, itemId: +itemId })));
    return ids.reduce((pre, curr, i) => {
      return __spreadProps(__spreadValues({}, pre), {
        [curr]: idsRecords[i]
      });
    }, {});
  }
  async formatTask(cTaskConfig, bTaskConfig = {}) {
    var _b, _c;
    const _a = cTaskConfig, { source, type } = _a, rest = __objRest(_a, ["source", "type"]);
    const { lastLimit } = this.userInfo;
    let res = __spreadValues({ type }, rest);
    if (source === TASK_SOURCE.B) {
      res = __spreadValues(__spreadValues({}, res), bTaskConfig);
    }
    const { key, rateType } = res;
    if (["collect", "order"].includes(type)) {
      if (type === "order") {
        if (cTaskConfig.isMarkOrder) {
          res.itemIds = bTaskConfig.itemIds;
        }
      } else {
        res.itemIds = bTaskConfig.itemIds;
      }
    }
    if ([TASK_RATE_TYPE.EVERYDAY_LIMIT, TASK_RATE_TYPE.FOREVER_LIMIT].includes(rateType)) {
      if ((_b = lastLimit == null ? void 0 : lastLimit[key]) == null ? void 0 : _b.startTime)
        res.limitStartTime = lastLimit[key].startTime;
      if ((_c = lastLimit == null ? void 0 : lastLimit[key]) == null ? void 0 : _c.endTime)
        res.limitEndTime = lastLimit[key].endTime;
    }
    return await this.setTaskStatus(res);
  }
  async getComplteTimes(task, openId) {
    const { rateType, key, type } = task;
    const { _id } = this.activityInfo;
    const { lastLimit } = await this.dao.user.findOne({ activityId: _id, openId });
    let query = {};
    switch (rateType) {
      case TASK_RATE_TYPE.FOREVER:
      case TASK_RATE_TYPE.FOREVER_LIMIT:
      case TASK_RATE_TYPE.NO:
        query = { activityId: _id, key, openId };
        break;
      case TASK_RATE_TYPE.EVERYDAY:
        query = { activityId: _id, key, openId, createDay: getToday() };
        break;
      case TASK_RATE_TYPE.EVERYDAY_LIMIT:
        query = {
          activityId: _id,
          key,
          openId,
          createDay: getToday()
        };
        if (type !== "order") {
          query.createTime = { $gte: (lastLimit == null ? void 0 : lastLimit[key].startTime) || 0, $lte: (lastLimit == null ? void 0 : lastLimit[key].endTime) || 0 };
        }
        break;
    }
    return await this.dao.record.count(query);
  }
  async setTaskStatus(task) {
    const { times, key } = task;
    const { _id, openId } = this.userInfo;
    const { remainTimes } = await this.dao.user.findOne({ _id });
    const completeTimes = await this.getComplteTimes(task, openId);
    if ((remainTimes == null ? void 0 : remainTimes[key]) && remainTimes[key] > 0) {
      return __spreadProps(__spreadValues({}, task), {
        status: TASK_STATUS.WAIT_RECEIVE,
        completeTimes
      });
    } else if (completeTimes >= times) {
      return __spreadProps(__spreadValues({}, task), {
        status: TASK_STATUS.DONE,
        completeTimes
      });
    } else {
      return __spreadProps(__spreadValues({}, task), {
        status: TASK_STATUS.WAIT_DO,
        completeTimes
      });
    }
  }
};

// src/mini-tornado/microservice/order/order.base.service.ts
var import_dayjs3 = __toModule(require_dayjs_min());

// src/mini-tornado/microservice/order/contant.ts
var ORDER_TYPE = {
  GOOD_TYPE: 1,
  ORDER_TYPE: 2,
  FRONT_TYPE: 3
};
var TAOBAO_SUCCESS_ORDER_STATUS2 = [
  "WAIT_SELLER_SEND_GOODS",
  "SELLER_CONSIGNED_PART",
  "WAIT_BUYER_CONFIRM_GOODS",
  "TRADE_BUYER_SIGNED",
  "TRADE_FINISHED",
  "PAID_FORBID_CONSIGN"
];
var TAOBAO_FRONT_PAID_ORDER_STATUS = ["FRONT_PAID_FINAL_NOPAID", "FRONT_PAID_FINAL_PAID"];

// src/mini-tornado/microservice/order/order.base.service.ts
var import_lodash5 = __toModule(require_lodash());
var BaseOrderService = class extends BaseService {
  constructor(context, config2) {
    super(context);
    this.config = config2;
    this.dao = {
      record: new BaseDao2(context, config2.dbName.record)
    };
  }
  async setOrderList(context) {
    const {
      openId,
      userInfo: { avatar, userNick, createTime },
      activityInfo: { _id: activityId, startTime }
    } = context;
    const { rules } = this.config;
    const orderIds = [];
    for (let i = 0, len = rules.length; i < len; i++) {
      const { type, key, name: title2, includeOrder = false } = rules[i];
      const queryList = await this.getUserOrderList(context, {
        type,
        includeOrder,
        startTime: createTime || startTime || Date.now(),
        endTime: Date.now()
      });
      if (!queryList.length)
        continue;
      const existList = await this.dao.record.find({ openId, activityId, key, type });
      const existTIds = existList.map((v) => v.tId);
      const [oldList, newList] = (0, import_lodash5.partition)(queryList, (v) => existTIds.includes(v.tId));
      const updateList = existList.filter((v) => {
        const order = type === ORDER_TYPE.ORDER_TYPE ? oldList.find((e) => e.tId === v.tId) : oldList.find((e) => e.tId === v.tId && e.oId === v.oId);
        return order && order.status !== v.status;
      });
      for (let i2 = 0, len2 = updateList.length; i2 < len2; i2++) {
        const { _id, status } = updateList[i2];
        await this.dao.record.update({ _id }, { $set: { status } });
      }
      if (!newList.length)
        continue;
      const insertList = newList.map((v) => __spreadProps(__spreadValues({}, v), {
        key,
        type,
        title: title2,
        openId,
        activityId,
        avatar,
        userNick,
        createDay: getToday(),
        createTime: Date.now(),
        updateTime: Date.now()
      }));
      const ids = await this.dao.record.insertMany(insertList);
      orderIds.push(...ids);
    }
    return orderIds;
  }
  async getOrderList(context, key, startTime, endTime, status = TAOBAO_SUCCESS_ORDER_STATUS2) {
    const {
      openId,
      data: { activityId }
    } = context;
    const query = {
      openId,
      activityId,
      key,
      payTime: { $gte: startTime, $lte: endTime }
    };
    if (status == null ? void 0 : status.length) {
      query.status = { $in: status };
    }
    const list = await this.dao.record.find(query);
    return list;
  }
  async getUserOrderList(context, queryConfig) {
    const { type, includeOrder, startTime, endTime } = queryConfig;
    try {
      let results = [];
      let session = context.tb.session;
      if (!session) {
        session = (await getSession(context)).session;
      }
      const queryTime = Math.max((0, import_dayjs3.default)().add(-3, "month").valueOf(), startTime);
      const params = {
        startTime: dateFormatter2(transformBeijingDate2(queryTime)),
        endTime: dateFormatter2(transformBeijingDate2(endTime || Date.now())),
        openId: context.openId,
        session
      };
      const orderResult = await TBAPIS2.getBuyerOrderList(context, params);
      if (orderResult.total_results > 0) {
        const { trade } = orderResult.trades;
        results = this.formatOrderList(trade, type, includeOrder);
      }
      return results;
    } catch (e) {
      return [];
    }
  }
  formatOrderList(trade, type, includeOrder) {
    const results = [];
    const ORDER_STATUS = type === ORDER_TYPE.FRONT_TYPE ? TAOBAO_FRONT_PAID_ORDER_STATUS : TAOBAO_SUCCESS_ORDER_STATUS2;
    trade.forEach((v) => {
      var _a, _b;
      switch (type) {
        case ORDER_TYPE.GOOD_TYPE:
        case ORDER_TYPE.FRONT_TYPE:
          if (ORDER_STATUS.includes(v.status)) {
            (_b = (_a = v == null ? void 0 : v.orders) == null ? void 0 : _a.order) == null ? void 0 : _b.forEach((o) => {
              results.push({
                tId: v.tid,
                oId: o.oid,
                itemId: o.num_iid,
                skuId: o.sku_id,
                refund_id: o.refund_id,
                title: o.title,
                status: o.status,
                price: Math.floor(+o.price * 100),
                payment: Math.floor(+o.payment * 100),
                payTime: dateFormat(v.pay_time).getTimestamp(),
                orderCreateTime: dateFormat(v.created).getTimestamp()
              });
            });
          }
          break;
        case ORDER_TYPE.ORDER_TYPE:
          if (ORDER_STATUS.includes(v.status)) {
            results.push({
              tId: v.tid,
              status: v.status,
              price: Math.floor(+v.price * 100),
              payment: Math.floor(+v.payment * 100),
              payTime: dateFormat(v.pay_time).getTimestamp(),
              orderCreateTime: dateFormat(v.created).getTimestamp(),
              orders: includeOrder ? v.orders.order.map((o) => ({
                oId: o.oid,
                itemId: o.num_iid,
                skuId: o.sku_id,
                status: o.status,
                price: Math.floor(+o.price * 100),
                payment: Math.floor(+o.payment * 100)
              })) : []
            });
          }
          break;
        default:
      }
    });
    return results;
  }
};

// src/mini-tornado/microservice/activity/activity.base.service.ts
var BaseActivityService = class extends BaseService {
  constructor(context, config2) {
    super(context);
    this.config = config2;
    this.dao = {
      base: new BaseDao2(context, config2.dbName.base),
      prizeConfig: new BaseDao2(context, config2.dbName.prizeConfig)
    };
  }
  getBaseInfo() {
    const { activityInfo } = this;
    return __spreadProps(__spreadValues({}, activityInfo), {
      activityStatus: this.setActivityStatus(activityInfo)
    });
  }
  async getItemListByIds(itemIds) {
    var _a;
    const { session } = this.context.tb;
    const GOODSINFO = "detail_url,approve_status,num_iid,title,nick,type,cid,pic_url,num,props,valid_thru,list_time,desc,price,has_discount,has_invoice,has_warranty,has_showcase,modified,delist_time,postage_id,seller_cids,outer_id,sold_quantity";
    const result = await TBAPIS2.getItemListByItemIds(this.context, itemIds, { fields: GOODSINFO }, session);
    const items = ((_a = result == null ? void 0 : result.items) == null ? void 0 : _a.item) || [];
    const list = items.map((v) => {
      const { num_iid, title: title2, price, detail_url, pic_url, desc } = v;
      return {
        itemId: num_iid,
        name: title2,
        price,
        url: detail_url,
        image: pic_url,
        desc
      };
    });
    return list;
  }
  setTaobaoItemListWithTag(list, tagRecord) {
    return list.map((item2) => {
      return __spreadProps(__spreadValues({}, item2), {
        tagged: !!(tagRecord == null ? void 0 : tagRecord[item2 == null ? void 0 : item2.itemId])
      });
    });
  }
  setActivityStatus({ startTime, endTime }) {
    const now = Date.now();
    if (now < startTime)
      return ACTIVITY_STATUS.NO_START;
    if (now >= startTime && now <= endTime)
      return ACTIVITY_STATUS.PROCCESSING;
    return ACTIVITY_STATUS.END;
  }
  async getAllActivityList() {
    return await this.dao.base.find({
      deleteStatus: DELETE_STATUS.NORMAL
    });
  }
  getItemIdsByKey(key, itemIds) {
    var _a;
    const { tasks } = this.activityInfo;
    return itemIds || ((_a = tasks == null ? void 0 : tasks[key]) == null ? void 0 : _a.itemIds);
  }
};

// src/mini-tornado/microservice/game/errorCode.ts
var BusinessError5 = {
  ERROR_NO_CONFIG: {
    code: `710001`,
    defaultMsg: `\u65E0\u6B64\u6E38\u620F\u914D\u7F6E`
  },
  ERROR_TICKETS_SET_ERROR: {
    code: `710002`,
    defaultMsg: `\u6E38\u620F\u6B21\u6570\u66F4\u65B0\u5931\u8D25`
  },
  ERROR_UPDATE_TOOLS: {
    code: `710003`,
    defaultMsg: `\u6E38\u620F\u9053\u5177\u589E\u52A0\u5931\u8D25`
  },
  ERROR_NO_TOOLS: {
    code: `710004`,
    defaultMsg: `\u6E38\u620F\u9053\u5177\u4E0D\u8DB3`
  },
  ERROR_NO_GAME_TIMES: {
    code: `710005`,
    defaultMsg: `\u6E38\u620F\u6B21\u6570\u5DF2\u7528\u5B8C`
  },
  ERROR_NO_GAME_RECORD: {
    code: `710006`,
    defaultMsg: `\u8BE5\u6E38\u620F\u8BB0\u5F55\u4E0D\u5B58\u5728`
  },
  ERROR_GAME_SUBMITTED: {
    code: `710007`,
    defaultMsg: `\u8BE5\u6E38\u620F\u8BB0\u5F55\u5DF2\u63D0\u4EA4`
  },
  ERROR_GAME_LEVEL_REQUIRED: {
    code: `710008`,
    defaultMsg: `\u53C2\u6570\u5173\u5361\u9519\u8BEF`
  },
  ERROR_LEVEL_NO_REPEAT: {
    code: `710009`,
    defaultMsg: `\u5173\u5361\u5DF2\u901A\u8FC7\uFF0C\u4E0D\u53EF\u91CD\u590D\u95EF\u5173`
  },
  ERROR_LEVEL_ALL_CLEAR: {
    code: `710010`,
    defaultMsg: `\u6E38\u620F\u5DF2\u901A\u5173\uFF0C\u4E0D\u53EF\u91CD\u590D\u95EF\u5173`
  }
};
var CODE_TYPES5 = Object.assign({}, DEFAULT_CODE_TYPES, BusinessError5);

// src/mini-tornado/microservice/game/constant.ts
var RULE = {
  LEVEL: 1,
  NO_LIMIT: 2
};
var RATE = {
  FIRST_TIME: 1,
  EVERY_TIME: 2
};

// src/mini-tornado/microservice/game/game.base.service.ts
var BaseGameService = class extends BaseService {
  constructor(context, config2, userInfo) {
    super(context);
    this.config = config2;
    this.dao = {
      user: new BaseDao2(context, config2.dbName.user),
      record: new BaseDao2(context, config2.dbName.record),
      toolsRecord: new BaseDao2(context, config2.dbName.toolsRecord)
    };
    this.userInfo = userInfo;
  }
  init(context) {
    const user = __spreadProps(__spreadValues({}, formatInitBaseUser(context)), {
      game: this.initGameInfo()
    });
    return user;
  }
  initGameInfo() {
    let game = {};
    this.config.rules.forEach((rule) => {
      var _a, _b;
      let info = {
        gameTimes: 0,
        todayGameTimes: 0,
        joinTimes: 0,
        isFirstGame: true,
        maxScore: 0,
        totalScore: 0,
        totalStars: 0,
        maxScoreUpdateTime: Date.now(),
        totalScoreUpdateTime: Date.now(),
        totalStarsUpdateTime: Date.now(),
        todayMaxScore: 0,
        todayTotalScore: 0,
        todayTotalStars: 0,
        todayMaxScoreUpdateTime: Date.now(),
        todayTotalScoreUpdateTime: Date.now(),
        todayTotalStarsUpdateTime: Date.now()
      };
      if (rule.isLevelClear) {
        info = __spreadProps(__spreadValues({}, info), {
          currentLevel: 1,
          allLevelPass: false,
          allLevelPassTimes: 0,
          firstAllLevelPassTime: null
        });
      }
      if (((_a = rule.tools) == null ? void 0 : _a.length) > 0) {
        const tools = {};
        for (let i = 0; i < ((_b = rule.tools) == null ? void 0 : _b.length); i++) {
          tools[rule.tools[i].key] = 0;
        }
        info = __spreadProps(__spreadValues({}, info), {
          tools
        });
      }
      game = __spreadProps(__spreadValues({}, game), {
        [rule.key]: info
      });
    });
    return game;
  }
  getUserInfo() {
    return this.userInfo;
  }
  async addTickets(key, count, isToday = false) {
    const gameConfig = this.config.rules.find((v) => v.key === key);
    if (!gameConfig) {
      return this.error(CODE_TYPES5.ERROR_NO_CONFIG);
    }
    const projection = {};
    if (isToday) {
      projection.$set = {
        [`game.${key}.todayGameTimes`]: +count
      };
    } else {
      projection.$inc = {
        [`game.${key}.gameTimes`]: +count
      };
    }
    const result = await this.dao.user.update({
      _id: this.userInfo._id
    }, projection);
    if (!result) {
      return this.error(CODE_TYPES5.ERROR_TICKETS_SET_ERROR);
    }
    return count;
  }
  async startGame() {
    const {
      openId,
      data: { key, level }
    } = this.context;
    const { _id } = this.activityInfo;
    const gameConfig = this.config.rules.find((v) => v.key === key);
    if (!gameConfig) {
      return this.error(CODE_TYPES5.ERROR_NO_CONFIG);
    }
    const { isLevelClear, levelClearOnce, levelRepeat, levelCount } = gameConfig;
    const { allLevelPass, isFirstGame } = this.userInfo.game[key];
    if (isLevelClear) {
      if (!level || level > levelCount) {
        return this.error(CODE_TYPES5.ERROR_GAME_LEVEL_REQUIRED);
      }
      if (!levelRepeat) {
        const record = await this.dao.record.findOne({ activityId: _id, openId, key, level, isPass: true });
        if (record == null ? void 0 : record._id) {
          return this.error(CODE_TYPES5.ERROR_LEVEL_NO_REPEAT);
        }
      }
      if (allLevelPass && levelClearOnce) {
        return this.error(CODE_TYPES5.ERROR_LEVEL_ALL_CLEAR);
      }
    }
    const result = await this.reduceTickets(gameConfig);
    if (result === 1) {
      const gameId = await this.insertGameRecord(key, level);
      return {
        gameId,
        isFirstGame
      };
    }
    return this.error(CODE_TYPES5.ERROR_NO_GAME_TIMES);
  }
  judgePass(gameRewardConfig, submitResult) {
    const { rate, rule } = gameRewardConfig;
    const { isFirstSubmit } = submitResult;
    const { isPass } = this.context.data;
    const ratePass = rate === RATE.EVERY_TIME ? true : !!isFirstSubmit;
    const rulePass = rule === RULE.NO_LIMIT ? true : !!isPass;
    return {
      ratePass,
      rulePass
    };
  }
  async reduceTickets(gameConfig) {
    const { key, consumeGameTimes, ticketType, isTickets, gradeCreditCost, isGradeCredit } = gameConfig;
    if (!isTickets) {
      return 1;
    }
    if (ticketType === TICKET_TYPE.MODULE) {
      return await this.dao.user.update({
        _id: this.userInfo._id,
        $where: `this.game.${key}.gameTimes + this.game.${key}.todayGameTimes >= ${consumeGameTimes}`
      }, {
        $set: {
          [`game.${key}.isFirstGame`]: false
        },
        $inc: {
          [`game.${key}.todayGameTimes`]: +consumeGameTimes > this.userInfo.game[key].todayGameTimes ? -this.userInfo.game[key].todayGameTimes : -consumeGameTimes,
          [`game.${key}.gameTimes`]: +consumeGameTimes > this.userInfo.game[key].todayGameTimes ? this.userInfo.game[key].todayGameTimes - consumeGameTimes : 0,
          [`game.${key}.joinTimes`]: 1
        }
      });
    } else {
      return await new TicketCenter(this.context, this.coreUserDao, ticketType, ticketType === TICKET_TYPE.CREDITS && isGradeCredit === GRADE_COST_TYPE.WITH ? gradeCreditCost : consumeGameTimes, isGradeCredit).cost();
    }
  }
  async insertGameRecord(key, level) {
    const {
      userInfo: { openId, activityId, userNick, avatar, member }
    } = this.context;
    const record = {
      openId,
      activityId,
      userNick,
      avatar,
      createTime: Date.now(),
      updateTime: Date.now(),
      createDay: getToday(),
      isVip: member.flag || member.newMember,
      member,
      key,
      level,
      duration: 0,
      submitTime: null
    };
    return await this.dao.record.insertOne(record);
  }
  async updateUser(projection) {
    return await this.dao.user.update({
      _id: this.userInfo._id
    }, projection);
  }
  async submitGame() {
    const {
      data: { gameId, score, stars, isPass, answerList }
    } = this.context;
    const gameRecord = await this.dao.record.findOne({
      _id: gameId
    });
    if (!gameRecord) {
      return this.error(CODE_TYPES5.ERROR_NO_GAME_RECORD);
    }
    if (gameRecord.submitTime) {
      return this.error(CODE_TYPES5.ERROR_GAME_SUBMITTED);
    }
    const { key, level } = gameRecord;
    const isFirstSubmit = this.userInfo.game[key].joinTimes === 1;
    await this.updateGameRecord(gameRecord, gameId, score, stars, isPass, answerList);
    const { isFirstPassAll } = await this.updateGameLevel(key, level || 0, isPass);
    const scoreRes = await this.updateGameScore(key, score, stars);
    return __spreadProps(__spreadValues({
      level,
      score,
      stars,
      isPass
    }, scoreRes), {
      isFirstSubmit,
      isFirstPassAll
    });
  }
  async updateGameRecord(gameRecord, gameId, score, stars, isPass, answerList) {
    const now = Date.now();
    const duration = now - gameRecord.createTime;
    const totalScore = +this.userInfo.game[gameRecord.key].totalScore + score;
    return await this.dao.record.update({
      _id: gameId
    }, {
      $set: {
        score: +score,
        totalScore: +totalScore,
        stars: +stars || 0,
        isPass: isPass || false,
        answerList: answerList || null,
        submitTime: now,
        updateTime: now,
        duration
      }
    });
  }
  async updateGameScore(key, score, stars) {
    const now = Date.now();
    let {
      maxScore,
      totalScore,
      totalStars,
      todayMaxScore,
      todayTotalScore,
      todayTotalStars,
      todayMaxScoreUpdateTime,
      todayTotalScoreUpdateTime
    } = this.userInfo.game[key];
    const todayTime = dateFormat(getToday()).getStartTimestamp();
    totalScore += score;
    totalStars += stars || 0;
    let inc = {
      [`game.${key}.totalScore`]: +score,
      [`game.${key}.totalStars`]: +stars || 0
    };
    let set2 = {
      updateTime: now,
      [`game.${key}.totalScoreUpdateTime`]: now,
      [`game.${key}.totalStarsUpdateTime`]: now,
      [`game.${key}.todayTotalScoreUpdateTime`]: now,
      [`game.${key}.todayTotalStarsUpdateTime`]: now
    };
    if (maxScore < score) {
      maxScore = score;
      set2 = __spreadProps(__spreadValues({}, set2), {
        [`game.${key}.maxScore`]: maxScore,
        [`game.${key}.maxScoreUpdateTime`]: now
      });
    }
    if (todayMaxScoreUpdateTime < todayTime || todayMaxScore < score) {
      todayMaxScore = score;
      set2 = __spreadProps(__spreadValues({}, set2), {
        [`game.${key}.todayMaxScore`]: todayMaxScore,
        [`game.${key}.todayMaxScoreUpdateTime`]: now
      });
    }
    if (todayTotalScoreUpdateTime < todayTime) {
      todayTotalScore = score;
      todayTotalStars = stars || 0;
      set2 = __spreadProps(__spreadValues({}, set2), {
        [`game.${key}.todayTotalScore`]: todayTotalScore,
        [`game.${key}.todayTotalStars`]: todayTotalStars
      });
    } else {
      todayTotalScore += score;
      todayTotalStars += stars || 0;
      inc = __spreadProps(__spreadValues({}, inc), {
        [`game.${key}.todayTotalScore`]: +score,
        [`game.${key}.todayTotalStars`]: +stars || 0
      });
    }
    await this.dao.user.update({
      _id: this.userInfo._id
    }, {
      $inc: inc,
      $set: set2
    });
    return {
      maxScore,
      totalScore,
      totalStars,
      todayMaxScore,
      todayTotalScore,
      todayTotalStars
    };
  }
  async updateGameLevel(key, level, isPass) {
    const gameConfig = this.config.rules.find((v) => v.key === key);
    const { isLevelClear, levelCount } = gameConfig;
    if (!isLevelClear || !isPass)
      return { isFirstPassAll: false };
    let isFirstPassAll = false;
    const { allLevelPass, currentLevel } = this.userInfo.game[key];
    const now = Date.now();
    const projection = {
      $set: {
        updateTime: now
      }
    };
    if (levelCount === level) {
      if (!allLevelPass) {
        isFirstPassAll = true;
        projection.$set = __spreadProps(__spreadValues({}, projection.$set), {
          [`game.${key}.allLevelPass`]: true,
          [`game.${key}.allLevelPassTimes`]: 1,
          [`game.${key}.firstAllLevelPassTime`]: now
        });
      } else {
        projection.$inc = {
          [`game.${key}.allLevelPassTimes`]: 1
        };
      }
      projection.$set = __spreadProps(__spreadValues({}, projection.$set), {
        [`game.${key}.currentLevel`]: 1
      });
    } else if (level === currentLevel) {
      projection.$inc = __spreadProps(__spreadValues({}, projection.$inc), {
        [`game.${key}.currentLevel`]: 1
      });
    }
    await this.updateUser(projection);
    return { isFirstPassAll };
  }
  async addGameTools(key, tools, gameId) {
    const { openId } = this.context;
    const { _id } = this.activityInfo;
    const inc = {};
    for (const k in tools) {
      inc[`game.${key}.tools.${k}`] = tools[k];
    }
    const result = await this.dao.user.update({ _id: this.userInfo._id }, { $inc: inc });
    if (!result) {
      return this.error(CODE_TYPES5.ERROR_UPDATE_TOOLS);
    }
    for (const k in tools) {
      await this.insertToolsRecord(key, k, tools[k], gameId);
    }
    const { game } = await this.dao.user.findOne({ activityId: _id, openId });
    return game[key].tools;
  }
  async reduceGameTools() {
    const {
      openId,
      data: { key, toolsKey, cosumeCount, gameId }
    } = this.context;
    const { _id } = this.activityInfo;
    const result = await this.updateToolsCount(key, toolsKey, cosumeCount, true);
    if (result === 1) {
      await this.insertToolsRecord(key, toolsKey, cosumeCount, gameId);
      const { game } = await this.dao.user.findOne({ activityId: _id, openId });
      return game[key].tools[toolsKey];
    }
    return this.error(CODE_TYPES5.ERROR_NO_TOOLS);
  }
  async updateToolsCount(key, toolsKey, changeCount, isReduce = false) {
    let where = "true";
    if (isReduce && changeCount) {
      where = `this.game.${key}.tools.${toolsKey} >= ${changeCount}`;
      changeCount = -changeCount;
    }
    return await this.dao.user.update({
      _id: this.userInfo._id,
      $where: where
    }, {
      $inc: {
        [`game.${key}.tools.${toolsKey}`]: +changeCount
      }
    });
  }
  async insertToolsRecord(key, toolsKey, changeCount, gameId) {
    const { openId, activityId, userNick, avatar } = this.userInfo;
    const record = {
      openId,
      activityId,
      userNick,
      avatar,
      createTime: Date.now(),
      updateTime: Date.now(),
      createDay: getToday(),
      key,
      toolsKey,
      changeCount,
      gameId
    };
    return await this.dao.toolsRecord.insertOne(record);
  }
  async getUserRankList(key, sortKey, limit, activityId, secretUserNick = true) {
    activityId = activityId || this.context.data.activityId;
    const list = await this.dao.user.find({
      activityId,
      [`game.${key}.${sortKey}`]: { $gt: 0 }
    }, {
      sort: { [`game.${key}.${sortKey}`]: -1, [`game.${key}.${sortKey}UpdateTime`]: 1 },
      limit
    });
    return list == null ? void 0 : list.map((user, i) => {
      var _a, _b;
      return __spreadProps(__spreadValues({}, user), {
        rankValue: ((_b = (_a = user == null ? void 0 : user.game) == null ? void 0 : _a[key]) == null ? void 0 : _b[sortKey]) || 0,
        userNick: secretUserNick ? formatUserNick(user.userNick) : user.userNick,
        rank: i + 1
      });
    });
  }
  async getMyRankInfo(key, sortKey) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l;
    const { activityId } = this.context.data;
    const { openId } = this.context;
    const { avatar, userNick } = this.userInfo;
    if (!((_c = (_b = (_a = this.userInfo) == null ? void 0 : _a.game) == null ? void 0 : _b[key]) == null ? void 0 : _c[sortKey])) {
      return { rank: "\u672A\u53C2\u4E0E" };
    }
    const sameScoreList = await this.dao.user.find({
      [`game.${key}.${sortKey}`]: (_f = (_e = (_d = this.userInfo) == null ? void 0 : _d.game) == null ? void 0 : _e[key]) == null ? void 0 : _f[sortKey],
      activityId
    }, {
      sort: { [`game.${key}.${sortKey}`]: -1, [`game.${key}.${sortKey}UpdateTime`]: 1 },
      projection: { openId: 1 }
    });
    let gap = sameScoreList.findIndex((v) => v.openId === openId);
    gap = gap < 0 ? 0 : gap;
    let rank;
    rank = await this.dao.user.count({
      [`game.${key}.${sortKey}`]: { $gt: (_i = (_h = (_g = this.userInfo) == null ? void 0 : _g.game) == null ? void 0 : _h[key]) == null ? void 0 : _i[sortKey] },
      activityId
    });
    rank = rank + 1 + gap;
    return {
      rank,
      rankValue: (_l = (_k = (_j = this.userInfo) == null ? void 0 : _j.game) == null ? void 0 : _k[key]) == null ? void 0 : _l[sortKey],
      avatar,
      userNick
    };
  }
  async getStats(statArray) {
    const {
      data: { startDay, endDay }
    } = this.context;
    let day = startDay;
    const result = {};
    while (day <= endDay) {
      for (const gameKey in statArray) {
        const gameConfig = this.config.rules.find((itm) => itm.key === gameKey);
        const exec = [];
        statArray[gameKey].forEach((stat) => {
          let statKey = stat;
          let reachValue = 0;
          if (!!stat && typeof stat === "object") {
            statKey = stat.key;
            reachValue = stat.reach;
          }
          switch (statKey) {
            case "joinUV":
              exec.push(this.getJoinUV(day, gameKey));
              break;
            case "joinPV":
              exec.push(this.getJoinPV(day, gameKey));
              break;
            case "noVipUV":
              exec.push(this.getJoinUV(day, gameKey, { isVip: false }));
              break;
            case "noVipPV":
              exec.push(this.getJoinPV(day, gameKey, { isVip: false }));
              break;
            case "vipUV":
              exec.push(this.getJoinUV(day, gameKey, { isVip: true }));
              break;
            case "vipPV":
              exec.push(this.getJoinPV(day, gameKey, { isVip: true }));
              break;
            case "oldVipUV":
              exec.push(this.getJoinUV(day, gameKey, {
                $or: [{ "member.flag": false, "member.bememberDay": { $ne: day } }, { "member.flag": true }]
              }));
              break;
            case "oldVipPV":
              exec.push(this.getJoinPV(day, gameKey, {
                $or: [{ "member.flag": false, "member.bememberDay": { $ne: day } }, { "member.flag": true }]
              }));
              break;
            case "totalScoreReachUV":
              exec.push(this.getTotalScoreReachUV(day, gameKey, reachValue));
              break;
            case "levelReachUV":
              exec.push(this.getLevelReachUV(day, gameKey, reachValue));
              break;
            default:
              break;
          }
        });
        if (!result[day]) {
          result[day] = {};
        }
        result[day][gameConfig.name] = formatDayStats("game", null, statArray[gameKey], await Promise.all(exec));
      }
      day = dateFormat(new Date(day).getTime() + 24 * 60 * 60 * 1e3).format();
    }
    return result;
  }
  getJoinUV(day, key, query = {}) {
    const {
      data: { activityId }
    } = this.context;
    return new Promise((resolve) => {
      this.dao.record.aggregate([{ $match: __spreadValues({ activityId, createDay: day, key }, query) }, { $group: { _id: "$openId" } }]).then((result) => {
        resolve(result.length);
      });
    });
  }
  getJoinPV(day, key, query = {}) {
    const {
      data: { activityId }
    } = this.context;
    return new Promise((resolve) => {
      this.dao.record.count(__spreadValues({ activityId, createDay: day, key }, query)).then((result) => {
        resolve(result);
      });
    });
  }
  getTotalScoreReachUV(day, key, totalScore) {
    const {
      data: { activityId }
    } = this.context;
    return new Promise((resolve) => {
      this.dao.record.aggregate([
        { $match: { activityId, createDay: day, key, totalScore: { $gte: totalScore } } },
        { $group: { _id: "$openId" } }
      ]).then((res) => {
        resolve(res.length);
      });
    });
  }
  getLevelReachUV(day, key, level) {
    const {
      data: { activityId }
    } = this.context;
    return new Promise((resolve) => {
      this.dao.record.aggregate([
        { $match: { activityId, createDay: day, key, level, isPass: true } },
        { $group: { _id: "$openId" } }
      ]).then((res) => {
        resolve(res.length);
      });
    });
  }
};

// src/utils/rand.ts
var rand2 = function() {
  let seed = new Date().getTime();
  function r() {
    seed = (seed * 9301 + 49297) % 233280;
    return seed / 233280;
  }
  return function(number) {
    return Math.ceil(r() * number);
  };
}();

// src/mini-tornado/microservice/card/constant.ts
var UPDATE_DATA_RESULT;
(function(UPDATE_DATA_RESULT2) {
  UPDATE_DATA_RESULT2[UPDATE_DATA_RESULT2["SUCCESS"] = 1] = "SUCCESS";
  UPDATE_DATA_RESULT2[UPDATE_DATA_RESULT2["ERROR"] = 0] = "ERROR";
})(UPDATE_DATA_RESULT || (UPDATE_DATA_RESULT = {}));
var CARD_RECORD_TYPE;
(function(CARD_RECORD_TYPE2) {
  CARD_RECORD_TYPE2[CARD_RECORD_TYPE2["RECEIVE_CARD"] = 1] = "RECEIVE_CARD";
  CARD_RECORD_TYPE2[CARD_RECORD_TYPE2["SEND_CARD"] = 2] = "SEND_CARD";
})(CARD_RECORD_TYPE || (CARD_RECORD_TYPE = {}));
var CARD_FROM;
(function(CARD_FROM2) {
  CARD_FROM2[CARD_FROM2["SERVER"] = 1] = "SERVER";
  CARD_FROM2[CARD_FROM2["ADMIN"] = 2] = "ADMIN";
})(CARD_FROM || (CARD_FROM = {}));
var CARD_RECEIVE_STATUS;
(function(CARD_RECEIVE_STATUS2) {
  CARD_RECEIVE_STATUS2[CARD_RECEIVE_STATUS2["NOT_RECEIVE"] = 0] = "NOT_RECEIVE";
  CARD_RECEIVE_STATUS2[CARD_RECEIVE_STATUS2["RECEIVE"] = 1] = "RECEIVE";
})(CARD_RECEIVE_STATUS || (CARD_RECEIVE_STATUS = {}));
var CARD_RULE;
(function(CARD_RULE2) {
  CARD_RULE2[CARD_RULE2["PROBABILITY"] = 1] = "PROBABILITY";
  CARD_RULE2[CARD_RULE2["SEQUENCE"] = 2] = "SEQUENCE";
})(CARD_RULE || (CARD_RULE = {}));
var CARD_TICKET_TYPE;
(function(CARD_TICKET_TYPE2) {
  CARD_TICKET_TYPE2[CARD_TICKET_TYPE2["PERMANENT"] = 1] = "PERMANENT";
  CARD_TICKET_TYPE2[CARD_TICKET_TYPE2["ALL"] = 2] = "ALL";
})(CARD_TICKET_TYPE || (CARD_TICKET_TYPE = {}));

// src/mini-tornado/microservice/card/errorCode.ts
var BusinessError6 = {
  ERROR_NOT_CARD: {
    code: `670001`,
    defaultMsg: `\u5361\u7247\u4E0D\u5B58\u5728`
  },
  ERROR_NOT_CARD_NUMBER: {
    code: `670002`,
    defaultMsg: `\u5361\u7247\u6570\u91CF\u4E0D\u8DB3`
  },
  ERROR_CARD_RECEIVE: {
    code: `670003`,
    defaultMsg: `\u5361\u7247\u5DF2\u7ECF\u88AB\u9886\u53D6`
  },
  ERROR_ONESELF_CARD_RECEIVE: {
    code: `670004`,
    defaultMsg: `\u4E0D\u80FD\u9886\u53D6\u81EA\u5DF1\u7684\u5361\u7247`
  },
  ERROR_CARD_NULL: {
    code: `670005`,
    defaultMsg: `\u5F53\u524D\u5DF2\u65E0\u5361\u7247`
  },
  ERROR_NOT_DRAWTIMES: {
    code: `670006`,
    defaultMsg: `\u62BD\u5361\u6B21\u6570\u4E0D\u8DB3`
  },
  ERROR_RECEIVE: {
    code: `670007`,
    defaultMsg: `\u9886\u53D6\u5931\u8D25`
  },
  ERROR_CARD_NUMBER_NOT_ENOUGH: {
    code: `670008`,
    defaultMsg: `\u8BF7\u96C6\u9F50\u5361\u7247\u540E\u518D\u5408\u6210`
  },
  ERROR_RESULTANT_ONCE: {
    code: `670009`,
    defaultMsg: `\u8BE5\u5361\u7247\u53EA\u80FD\u5408\u6210\u4E00\u6B21`
  }
};
var CODE_TYPES6 = Object.assign({}, DEFAULT_CODE_TYPES, BusinessError6);

// src/mini-tornado/microservice/stat/stat.base.service.ts
var xlsx = __toModule(require_lib2());

// src/mini-tornado/microservice/stat/contant.ts
var STAT_TYPE;
(function(STAT_TYPE2) {
  STAT_TYPE2[STAT_TYPE2["help"] = 0] = "help";
  STAT_TYPE2[STAT_TYPE2["share"] = 1] = "share";
  STAT_TYPE2[STAT_TYPE2["doHelp"] = 2] = "doHelp";
  STAT_TYPE2[STAT_TYPE2["startGame"] = 3] = "startGame";
  STAT_TYPE2[STAT_TYPE2["doMember"] = 4] = "doMember";
  STAT_TYPE2[STAT_TYPE2["doFollow"] = 5] = "doFollow";
})(STAT_TYPE || (STAT_TYPE = {}));
var oneDay = 24 * 3600 * 1e3;
var isMock = true;

// src/mini-tornado/microservice/stat/stat.base.service.ts
var BaseStatService = class extends BaseService {
  constructor(context, config2) {
    super(context);
    this.config = config2;
    this.dao = {
      statRecord: new BaseDao2(context, config2.dbName.statRecord)
    };
  }
  async addStat(key, customObject) {
    const {
      openId,
      data: { activityId },
      userInfo,
      _projectConfig: { modulesConfig }
    } = this.context;
    const {
      stat: { rules }
    } = modulesConfig;
    const { userNick, avatar } = userInfo || {};
    const today = getToday();
    const typeName = rules.find((el) => el.key === key).name || key;
    const result = await this.dao.statRecord.insertOne(__spreadProps(__spreadValues({
      openId,
      userNick,
      avatar,
      activityId,
      key,
      name: typeName,
      createUserDay: userInfo.createDay,
      follow: userInfo.follow,
      member: userInfo.member
    }, customObject), {
      createDay: today,
      createTime: Date.now()
    }));
    return result ? 1 : 0;
  }
  async getStats(statsArray) {
    const { startDay, endDay, activityId } = this.context.data;
    let day = startDay;
    let curDayTimestamp = dateFormat(day).getTimestamp();
    const endDayTimestamp = isMock ? new Date(endDay).getTime() : dateFormat(endDay).getTimestamp();
    const statsKeyObj = await this.getStatKey(statsArray, "stat");
    const xlsxData = {};
    while (curDayTimestamp <= endDayTimestamp) {
      const getDayFns = await this.getStatFns(activityId, day, statsArray);
      const oneDayStats = await Promise.all(getDayFns);
      const oneStatItem = await this.getStatItem(oneDayStats, statsKeyObj);
      xlsxData[day] = oneStatItem;
      const tommorrow = isMock ? new Date(`${day} 00:00:00`).getTime() + oneDay : dateFormat(day).getStartTimestamp() + oneDay;
      curDayTimestamp = tommorrow;
      day = dateFormat(new Date(`${day} 00:00:00`).getTime() + 24 * 60 * 60 * 1e3).format();
    }
    return xlsxData;
  }
  async getExcel(data) {
    const { startDay, endDay } = this.context.data;
    let day = startDay;
    let curDayTimestamp = dateFormat(day).getTimestamp();
    const endDayTimestamp = isMock ? new Date(endDay).getTime() : dateFormat(endDay).getTimestamp();
    const _data = await this.getTotalStat(data);
    const statKeys = await this.getStatKey(_data[startDay]);
    const xlsxData = [[...statKeys]];
    while (curDayTimestamp <= endDayTimestamp) {
      const oneDayStat = await this.getXlsxDay(_data[day]);
      xlsxData.push([day, ...oneDayStat]);
      const tommorrow = isMock ? new Date(`${day} 00:00:00`).getTime() + oneDay : dateFormat(day).getStartTimestamp() + oneDay;
      curDayTimestamp = tommorrow;
      day = dateFormat(new Date(`${day} 00:00:00`).getTime() + 24 * 60 * 60 * 1e3).format();
    }
    return xlsxData;
  }
  async getStatFns(activityId, day, statsKeyObj) {
    const statsFn = [];
    Object.keys(statsKeyObj || {}).forEach((key) => {
      statsKeyObj[key].forEach((stat) => {
        switch (stat) {
          case "PV":
            statsFn.push(this.dao.statRecord.count({ activityId, key, createDay: day }));
            break;
          case "UV":
            statsFn.push(this.dao.statRecord.aggregate([
              { $match: { activityId, createDay: day, key } },
              { $project: { openId: true } },
              { $group: { _id: "$openId", count: { $sum: 1 } } }
            ]));
            break;
          case "newVipPV":
            statsFn.push(this.dao.statRecord.count({ activityId, key, createDay: day, "member.bememberDay": day }));
            break;
          case "newVipUV":
            statsFn.push(this.dao.statRecord.aggregate([
              { $match: { activityId, createDay: day, key, "member.bememberDay": day } },
              { $project: { openId: true } },
              { $group: { _id: "$openId", count: { $sum: 1 } } }
            ]));
            break;
          case "newPV":
            statsFn.push(this.dao.statRecord.count({ activityId, key, createDay: day, createUserDay: day }));
            break;
          case "newUV":
            statsFn.push(this.dao.statRecord.aggregate([
              { $match: { activityId, createDay: day, key, createUserDay: day } },
              { $project: { openId: true } },
              { $group: { _id: "$openId", count: { $sum: 1 } } }
            ]));
            break;
        }
      });
    });
    return statsFn;
  }
  async getStatKey(statsArray, statKey) {
    const {
      _projectConfig: { modulesConfig }
    } = this.context;
    const {
      stat: { rules }
    } = modulesConfig;
    const statKeyObj = {};
    if (statKey) {
      Object.keys(statsArray || {}).forEach((key) => {
        statsArray[key].forEach((itm) => {
          const name2 = rules.find((el) => el.key === key).name;
          statKeyObj[`${name2}${stats_config_map_default.stat[itm]}`] = 0;
        });
      });
      return statKeyObj;
    }
    let statTxt = [];
    Object.keys(statsArray || {}).forEach((key) => {
      const dayStat = statsArray[key];
      if (typeof dayStat === "object") {
        statTxt = [...statTxt, ...Object.keys(dayStat)];
      } else {
        statTxt = [...statTxt, key];
      }
    });
    return ["\u65E5\u671F", ...statTxt];
  }
  async getStatItem(oneDayStats, statsKeyObj) {
    const obj = {};
    Object.keys(statsKeyObj).forEach((key, i) => {
      const num = typeof oneDayStats[i] === "number" ? oneDayStats[i] : oneDayStats[i].length;
      return obj[key] = num;
    });
    return obj;
  }
  async getXlsxDay(oneStat) {
    let xlsxData = [];
    Object.keys(oneStat).forEach((key) => {
      const dayStat = oneStat[key];
      if (typeof dayStat === "object") {
        xlsxData = [...xlsxData, ...Object.values(dayStat)];
      } else {
        xlsxData = [...xlsxData, dayStat];
      }
    });
    return xlsxData;
  }
  async buildExcel(startDay, endDay, xlsxData) {
    const buffer = xlsx.build([
      {
        name: `\u6570\u636E\u7EDF\u8BA1${startDay.replace(/\//g, "-")}-${endDay.replace(/\//g, "-")}`,
        data: xlsxData
      }
    ]);
    const result = await this.context.cloud.file.uploadFile({
      fileContent: buffer,
      fileName: `\u6570\u636E\u7EDF\u8BA1${startDay.replace(/\//g, "-")}-${endDay.replace(/\//g, "-")}.xlsx`
    });
    if (result.url) {
      if (result.url.startsWith("http://"))
        result.url = result.url.replace("http", "https").replace("-internal", "");
      if (result.url.startsWith("https://"))
        result.url = result.url.replace("-internal", "");
    }
    return result;
  }
  async getTotalStat(data) {
    const _obj = {};
    Object.values(data).forEach((itm) => {
      Object.keys(itm).forEach((key) => {
        _obj[key] = __spreadValues(__spreadValues({}, _obj[key]), itm[key]);
      });
    });
    return _obj;
  }
  async getCustomStat() {
    const { startDay, endDay, activityId } = this.context.data;
    let day = startDay;
    let curDayTimestamp = dateFormat(day).getTimestamp();
    const endDayTimestamp = isMock ? new Date(endDay).getTime() : dateFormat(endDay).getTimestamp();
    const xlsxData = {};
    while (curDayTimestamp <= endDayTimestamp) {
      const [testStat] = await Promise.all([
        this.getDaoFn("c_user_record").aggregate([
          { $match: { activityId, createDay: day, isFollow: true } },
          { $project: { openId: true } },
          { $group: { _id: "$openId", count: { $sum: 1 } } }
        ])
      ]);
      xlsxData[day] = {
        \u6D4B\u8BD5\u6570\u636E: (testStat == null ? void 0 : testStat.length) || 0
      };
      const tommorrow = isMock ? new Date(`${day} 00:00:00`).getTime() + oneDay : dateFormat(day).getStartTimestamp() + oneDay;
      curDayTimestamp = tommorrow;
      day = dateFormat(new Date(`${day} 00:00:00`).getTime() + 24 * 60 * 60 * 1e3).format();
    }
    return xlsxData;
  }
  getDaoFn(dbName) {
    return new BaseDao2(this.context, dbName);
  }
};

// src/service/user.service.ts
var UserService = class extends BaseUserService {
  constructor(context, config2, userInfo) {
    super(context, config2, userInfo);
  }
};

// src/service/activity.service.ts
var ActivityService = class extends BaseActivityService {
  constructor(context, config2) {
    super(context, config2);
  }
};

// src/service/task.service.ts
var TaskService = class extends BaseTaskService {
  constructor(context, config2, userInfo) {
    super(context, config2, userInfo);
  }
};

// src/service/awards.service.ts
var AwardsService = class extends BaseAwardsService {
  constructor(context, config2, userInfo) {
    super(context, config2, userInfo);
  }
};

// src/service/order.service.ts
var OrderService = class extends BaseOrderService {
  constructor(context, config2) {
    super(context, config2);
  }
};

// src/service/game.service.ts
var GameService = class extends BaseGameService {
  constructor(context, config2, userInfo) {
    super(context, config2, userInfo);
  }
};

// src/service/stat.service.ts
var StatService = class extends BaseStatService {
  constructor(context, config2) {
    super(context, config2);
  }
};

// src/mini-tornado/decorator/inject.ts
function Inject(injectConfig = {
  noCheckUser: false,
  middlewares: []
}) {
  return function(target, methodName, descriptor) {
    const method = descriptor.value;
    descriptor.value = async function(...args) {
      var _a;
      const [context, res, defaultMiddlewares = []] = args;
      const services = Reflect.getMetadata(DependenciesMetaKey, target.constructor);
      const moduleName = Reflect.getMetadata(ModuleNameMetaKey, target.constructor);
      const hasUserService = services == null ? void 0 : services.find((v) => v.name === "UserService");
      target.controllerConfig = (_a = controller_config_default) == null ? void 0 : _a[moduleName];
      context._depServices = hasUserService || moduleName === "activity" ? services : [...services, UserService];
      context._target = target;
      context._moduleName = moduleName;
      const isScheduledHandler = config.notNeedLogin.includes(context.handler);
      return await doHandler(target, method, [
        context,
        res,
        formatMiddlewares(injectConfig, defaultMiddlewares, isScheduledHandler)
      ]);
    };
  };
}
function formatMiddlewares(injectConfig, defaultMiddlewares = [], isScheduledHandler = false) {
  const { middlewares: handlerMiddleWares, noCheckUser } = injectConfig;
  const formatedHandlerMiddlewares = (handlerMiddleWares || []).map((middleware) => {
    var _a;
    const isBuiltInMiddleware = typeof middleware === "string";
    return isBuiltInMiddleware ? (_a = builtInMiddlewaresMapper) == null ? void 0 : _a[middleware] : middleware;
  }).filter((middleware) => !!middleware);
  const filteredDefaultMiddlewares = defaultMiddlewares.filter((v) => !noCheckUser || (v == null ? void 0 : v.name) !== "checkUser");
  const middlewares = [
    ...new Set([
      ...isScheduledHandler ? [initServiceIntance] : filteredDefaultMiddlewares,
      ...formatedHandlerMiddlewares
    ])
  ];
  return middlewares;
}

// src/mini-tornado/decorator/validate.ts
var import_class_transformer = __toModule(require_cjs());
var import_class_validator = __toModule(require_cjs2());
function Validate(validator) {
  return function(target, propertyName, descriptor) {
    const method = descriptor.value;
    descriptor.value = async function(...args) {
      const [context, res, middleWares = []] = args;
      const classParams = (0, import_class_transformer.plainToClass)(validator, context.data);
      const errors = await (0, import_class_validator.validate)(classParams);
      for (const error of errors) {
        console.log("validate-error :>> ", error);
        for (const tips of Object.values(error.constraints)) {
          return res.error(CODE_TYPES.PARAMS_ERROR, tips);
        }
      }
      return method.apply(target, [context, res, middleWares]);
    };
  };
}

// src/mini-tornado/decorator/init.ts
var import_lodash6 = __toModule(require_lodash());

// src/mini-tornado/decorator/reqLimit.ts
function ReqLimit(limitGap = 1e3, message = "\u6D3B\u52A8\u592A\u706B\u7206\u4E86~ \u8BF7\u7A0D\u540E\u518D\u8BD5~") {
  Reflect.defineMetadata(ReqLimitMetaKey, true, ReqLimit);
  return function(target, methodName, descriptor) {
    const method = descriptor.value;
    descriptor.value = async function(...args) {
      const [context, res, middleWares = []] = args;
      const userLimitDao = new BaseDao2(context, "c_user_limit");
      const {
        openId,
        data: { activityId }
      } = context;
      if (activityId) {
        const handlerKey = `${context.fcName || ""}_${context.handler}`;
        const now = Date.now();
        const updateResult = await userLimitDao.update({ openId, activityId, $where: `!this.${handlerKey} || (${now} - this.${handlerKey} > ${limitGap} )` }, { $set: { [handlerKey]: now } });
        if (!updateResult)
          return context.res.error(CODE_TYPES.PARAMS_ERROR, message);
      }
      return method.apply(target, [context, res, middleWares]);
    };
  };
}

// src/mini-tornado/decorator/init.ts
function Init(modules = []) {
  return function(target, propertyName, descriptor) {
    const method = descriptor.value;
    descriptor.value = async function(...args) {
      const [ctx] = args;
      await Promise.all((target._servicesInstance || []).map(({ name: name2, instance }) => {
        var _a, _b;
        const customInitMethod = (_a = modules.find((v) => `${(0, import_lodash6.capitalize)(v.name)}Service` === instance.constructor.name)) == null ? void 0 : _a.init;
        const customUpdateMethod = (_b = modules.find((v) => `${(0, import_lodash6.capitalize)(v.name)}Service` === instance.constructor.name)) == null ? void 0 : _b.update;
        const moduleName = Reflect.getMetadata(ModuleNameMetaKey, target.constructor);
        const isCurrModule = name2.replace("Service", "") === moduleName;
        return initModuleUser(ctx, instance, customInitMethod, customUpdateMethod, isCurrModule);
      }));
      const hasReqLimitApi = Reflect.hasMetadata(ReqLimitMetaKey, ReqLimit);
      if (hasReqLimitApi) {
        await initReqLimitTable(ctx);
      }
      return method.apply(target, [...args]);
    };
  };
}
async function initModuleUser(context, serviceInstance, customInitMethod, customUpdateMethod, isCurrModule) {
  var _a;
  if (!((_a = serviceInstance == null ? void 0 : serviceInstance.dao) == null ? void 0 : _a.user))
    return;
  const user = await hasInitUser(context, serviceInstance);
  if (user) {
    if (serviceInstance.update) {
      const moduleUpdateUserProjection = await serviceInstance.update(context, user);
      const mergedModuleUpdateProjection = __spreadValues(__spreadValues({}, moduleUpdateUserProjection), customUpdateMethod ? await customUpdateMethod(context, user) : {});
      await serviceInstance.dao.user.update({
        activityId: user.activityId,
        openId: user.openId
      }, mergedModuleUpdateProjection);
      return getUpdatedDataByProjection(user, mergedModuleUpdateProjection);
    }
    return user;
  }
  if (serviceInstance.init) {
    const moduleInitUser = await serviceInstance.init(context);
    const moduleUserInfo = __spreadValues(__spreadValues({}, moduleInitUser), customInitMethod ? await customInitMethod(context) : {});
    const userId = await serviceInstance.dao.user.insertOne(moduleUserInfo);
    const user2 = __spreadProps(__spreadValues({
      _id: userId
    }, moduleUserInfo), {
      _initTag: true
    });
    if ((serviceInstance == null ? void 0 : serviceInstance.constructor.name) === "UserService") {
      context.userInfo = user2;
    }
    serviceInstance._setUserInfo(user2);
    if (isCurrModule) {
      context._moduleUser = user2;
    }
    return user2;
  } else {
    throw new Error(`${serviceInstance.constructor.name}\u6A21\u5757\u7F3A\u5C11init\u65B9\u6CD5`);
  }
}
async function hasInitUser(ctx, serviceInstance) {
  var _a;
  const {
    openId,
    data: { activityId },
    _moduleUsers
  } = ctx;
  const userDao = serviceInstance.dao.user;
  const serviceName = serviceInstance.constructor.name;
  if (!activityId)
    return;
  return ((_a = _moduleUsers == null ? void 0 : _moduleUsers[serviceName]) == null ? void 0 : _a.userInfo) || await userDao.findOne({ activityId, openId });
}
async function initReqLimitTable(ctx, tableName = "c_user_limit") {
  const userLimitDao = new BaseDao2(ctx, tableName);
  const {
    openId,
    data: { activityId }
  } = ctx;
  const userLimitTable = await userLimitDao.findOne({
    openId,
    activityId
  });
  if (!userLimitTable) {
    await userLimitDao.insertOne(__spreadValues({}, formatInitBaseUser(ctx)));
  }
}

// src/mini-tornado/decorator/dependencies.ts
var exportId = 0;
function Module(moduleConig) {
  return function(target) {
    const { name: name2, deps } = moduleConig;
    Reflect.defineMetadata(ControllersMetaKey, target, ControllerClassTag, `${exportKey}${exportId++}`);
    Reflect.defineMetadata(DependenciesMetaKey, deps, target);
    Reflect.defineMetadata(ModuleNameMetaKey, name2, target);
    return target;
  };
}

// src/mini-tornado/decorator/lifeCyle.ts
function After(fn) {
  return function(target, methodName) {
    Reflect.defineMetadata(LifeCycleAfterMetaKey, fn, target, methodName);
  };
}
function Before(...beforeFns) {
  return function(target, methodName, descriptor) {
    const method = descriptor.value;
    descriptor.value = async function(...args) {
      var _a;
      const [context, res, middleWares = []] = args;
      if (beforeFns == null ? void 0 : beforeFns.length) {
        console.log("beforeFns :>> ", beforeFns);
        for (const beforeFn of beforeFns) {
          try {
            await beforeFn(target, context, (_a = controller_config_default) == null ? void 0 : _a[context == null ? void 0 : context._moduleName]);
          } catch (error) {
            console.log("before-error :>> ", error == null ? void 0 : error.message);
          }
        }
      }
      console.log("-------before----------- :>> ");
      return method.apply(target, [context, res, middleWares]);
    };
  };
}

// src/apis/activity/getActivityBaseInfoById.ts
var import_class_validator2 = __toModule(require_cjs2());
var Params = class {
};
__decorateClass([
  (0, import_class_validator2.IsNotEmpty)(),
  (0, import_class_validator2.IsString)()
], Params.prototype, "activityId", 2);
var GetActivityBaseInfoByIdController = class {
  async getActivityBaseInfoById(ctx, res) {
    const getBaseInfoResult = await this.activityService.getBaseInfo();
    return res.success(getBaseInfoResult);
  }
};
__decorateClass([
  Validate(Params),
  Inject()
], GetActivityBaseInfoByIdController.prototype, "getActivityBaseInfoById", 1);
GetActivityBaseInfoByIdController = __decorateClass([
  Module({
    name: "activity",
    deps: [ActivityService]
  })
], GetActivityBaseInfoByIdController);

// src/apis/activity/getTaobaoItemList.ts
var import_class_validator3 = __toModule(require_cjs2());
var Params2 = class {
};
__decorateClass([
  (0, import_class_validator3.IsNotEmpty)(),
  (0, import_class_validator3.IsString)()
], Params2.prototype, "activityId", 2);
var GetTaobaoItemListController = class {
  async getTaobaoItemList(ctx, res) {
    const { itemIds, taskKey } = ctx.data;
    const ids = this.activityService.getItemIdsByKey(taskKey, itemIds);
    const taobaoItemList = await this.activityService.getItemListByIds(ids);
    const tagRecord = await this.taskService.getItemIdTaggedMap(ids, taskKey);
    const list = this.activityService.setTaobaoItemListWithTag(taobaoItemList, tagRecord);
    return res.success({ list });
  }
};
__decorateClass([
  Validate(Params2),
  Inject({ middlewares: ["session"] })
], GetTaobaoItemListController.prototype, "getTaobaoItemList", 1);
GetTaobaoItemListController = __decorateClass([
  Module({
    name: "activity",
    deps: [ActivityService, TaskService]
  })
], GetTaobaoItemListController);

// src/apis/user/login.ts
var import_class_validator4 = __toModule(require_cjs2());

// src/mini-tornado/microservice/user/afterModule.ts
async function sendLoginReward(target, ctx, result) {
  const { todayReward = [], firstReward = [], relate } = target.controllerConfig;
  const { firstLoginToday, newUser } = result.data;
  if (newUser) {
    const exec = [];
    for (const reward of firstReward) {
      exec.push(target == null ? void 0 : target[`${reward.rewardType}Service`].addTickets(reward.rewardKey, reward.count, reward.isToday));
    }
    if (exec.length)
      await Promise.all(exec);
  }
  if (firstLoginToday) {
    if (relate === 1 || relate === 2 && !newUser) {
      const exec = [];
      for (const reward of todayReward) {
        exec.push(target == null ? void 0 : target[`${reward.rewardType}Service`].addTickets(reward.rewardKey, reward.count, reward.isToday));
      }
      if (exec.length)
        await Promise.all(exec);
    }
  }
}

// src/apis/user/login.ts
var Params3 = class {
};
__decorateClass([
  (0, import_class_validator4.IsNotEmpty)(),
  (0, import_class_validator4.IsString)()
], Params3.prototype, "activityId", 2);
__decorateClass([
  (0, import_class_validator4.IsNotEmpty)(),
  (0, import_class_validator4.IsString)()
], Params3.prototype, "avatar", 2);
__decorateClass([
  (0, import_class_validator4.IsNotEmpty)(),
  (0, import_class_validator4.IsString)()
], Params3.prototype, "userNick", 2);
__decorateClass([
  (0, import_class_validator4.IsNotEmpty)(),
  (0, import_class_validator4.IsBoolean)()
], Params3.prototype, "isFollow", 2);
__decorateClass([
  (0, import_class_validator4.IsNotEmpty)(),
  (0, import_class_validator4.IsBoolean)()
], Params3.prototype, "isVip", 2);
var LoginController = class {
  async login(ctx, res) {
    await this.orderService.setOrderList(ctx);
    const addUserRecordResult = await this.userService.addUserRecord();
    return res.success(addUserRecordResult);
  }
};
__decorateClass([
  Validate(Params3),
  Inject({ noCheckUser: true }),
  Init(),
  After(sendLoginReward)
], LoginController.prototype, "login", 1);
LoginController = __decorateClass([
  Module({
    name: "user",
    deps: [UserService, ActivityService, TaskService, AwardsService, OrderService, GameService, StatService]
  })
], LoginController);

// src/apis/user/getUserInfo.ts
var import_class_validator5 = __toModule(require_cjs2());
var Params4 = class {
};
__decorateClass([
  (0, import_class_validator5.IsNotEmpty)(),
  (0, import_class_validator5.IsString)()
], Params4.prototype, "activityId", 2);
var GetUserInfoController = class {
  async getUserInfo(ctx, res) {
    const user = this.userService.userInfo;
    const task = this.taskService.userInfo;
    const awards = this.awardsService.userInfo;
    const order = this.orderService.userInfo;
    const game = this.gameService.userInfo;
    return res.success({ user, task, awards, order, game });
  }
};
__decorateClass([
  Validate(Params4),
  Inject()
], GetUserInfoController.prototype, "getUserInfo", 1);
GetUserInfoController = __decorateClass([
  Module({
    name: "user",
    deps: [UserService, ActivityService, TaskService, AwardsService, OrderService, GameService, StatService]
  })
], GetUserInfoController);

// src/apis/task/getTaskList.ts
var import_class_validator6 = __toModule(require_cjs2());

// src/mini-tornado/microservice/task/beforeModule.ts
function updateOrderTask(key) {
  return async function({ orderService, taskService }, ctx, taskControllerConfig) {
    var _a, _b, _c, _d, _e, _f;
    const { activityInfo } = ctx;
    await orderService.setOrderList(ctx);
    const taskConfig = taskService.config.rules.find((itm) => itm.key === key);
    let startTime = activityInfo.startTime;
    let endTime = Date.now();
    switch (taskConfig.rateType) {
      case TASK_RATE_TYPE.FOREVER_LIMIT:
        startTime = ((_a = taskService.userInfo.lastLimit) == null ? void 0 : _a[key].startTime) || null;
        endTime = ((_b = taskService.userInfo.lastLimit) == null ? void 0 : _b[key].endTime) || null;
        break;
      case TASK_RATE_TYPE.EVERYDAY:
        startTime = dateFormat().getStartTimestamp();
        break;
      case TASK_RATE_TYPE.EVERYDAY_LIMIT:
        startTime = ((_c = taskService.userInfo.lastLimit) == null ? void 0 : _c[key].startTime) || null;
        endTime = ((_d = taskService.userInfo.lastLimit) == null ? void 0 : _d[key].endTime) || null;
        break;
    }
    let orderList = [];
    if (startTime && endTime) {
      orderList = await orderService.getOrderList(ctx, taskControllerConfig[key].orderKey, startTime, endTime);
    }
    const taskOrderList = await taskService.getCompleteList(ctx, key);
    console.log(orderList, taskOrderList, "xxxxx");
    let name2 = "oId";
    let matchOrderList = [];
    if (taskConfig.isMarkOrder) {
      const itemIds = ((_f = (_e = activityInfo == null ? void 0 : activityInfo.tasks[key]) == null ? void 0 : _e.itemIds) == null ? void 0 : _f.split(",")) || [];
      const ids = taskOrderList.map((itm) => itm[name2]);
      matchOrderList = orderList.filter((itm) => itemIds.includes(`${itm.itemId}`) && !ids.includes(itm[name2]));
    } else {
      const orderConfig = orderService.config.rules.find((itm) => itm.key === taskControllerConfig[key].orderKey);
      if (orderConfig.type === 2) {
        name2 = "tId";
      }
      const ids = taskOrderList.map((itm) => itm[name2]);
      matchOrderList = orderList.filter((itm) => !ids.includes(itm[name2]));
    }
    for (let i = 0; i < matchOrderList.length; i++) {
      await taskService.completeTask(ctx, key, { [name2]: matchOrderList[i][name2], payment: matchOrderList[i].price });
    }
  };
}
function updateFollowTask(key) {
  return async function({ taskService }, ctx) {
    const { userInfo } = ctx;
    if (userInfo.follow.flag || userInfo.follow.newFollow) {
      await taskService.completeTask(ctx, key);
    }
  };
}

// src/mini-tornado/utils/helper.ts
function getMaxRank(list) {
  const numberArr = [];
  list.forEach((itm) => {
    const [min, max] = itm.rank.split("-");
    if (max) {
      numberArr.push(+max);
    } else {
      numberArr.push(+min);
    }
  });
  return Math.max(...numberArr);
}

// src/mini-tornado/microservice/awards/beforeModule.ts
function openRank(key) {
  return async function({
    awardsService,
    activityService,
    gameService
  }, ctx, awardsControllerConfig) {
    const activityList = await activityService.getAllActivityList();
    for (let i = 0; i < activityList.length; i++) {
      const { _id } = activityList[i];
      const status = await awardsService.getOpenStatus(key, null, activityList[i]);
      const { openPrize } = awardsControllerConfig;
      if ([
        ACTIVITY_OPEN_PRIZE_STATUS.OPENING,
        ACTIVITY_OPEN_PRIZE_STATUS.SUCCESS,
        ACTIVITY_OPEN_PRIZE_STATUS.NOT_ALLOWED
      ].includes(status)) {
        console.log("\u4E0D\u6EE1\u8DB3\u5F00\u5956\u6761\u4EF6");
        continue;
      }
      if (openPrize[key].type === "relay") {
        if (status === ACTIVITY_OPEN_PRIZE_STATUS.FAIL) {
          console.log("\u4E0D\u6EE1\u8DB3\u5F00\u5956\u6761\u4EF6");
          continue;
        }
      }
      await awardsService.setOpenStatus(key, ACTIVITY_OPEN_PRIZE_STATUS.OPENING, _id);
      const prizeList = await awardsService.getPrizeConfig(key, _id);
      switch (openPrize[key].type) {
        case "relay":
          break;
        case "awards":
        case "game": {
          let userRank = [];
          if (openPrize[key].type === "game") {
            userRank = await gameService.getUserRankList(openPrize[key].key, openPrize[key].sortType, getMaxRank(prizeList), _id, false);
          } else {
            userRank = await awardsService.getUserRankList(key, getMaxRank(prizeList), _id, false);
          }
          const awardList = genAwardsList(prizeList, userRank);
          if (awardList.length > 0) {
            const result = await awardsService.sendPrizeList(awardList, key);
            if (result)
              awardsService.setOpenStatus(key, ACTIVITY_OPEN_PRIZE_STATUS.SUCCESS, _id);
            else
              awardsService.setOpenStatus(key, ACTIVITY_OPEN_PRIZE_STATUS.FAIL, _id);
          } else {
            await awardsService.setOpenStatus(key, ACTIVITY_OPEN_PRIZE_STATUS.SUCCESS, _id);
          }
          break;
        }
      }
    }
  };
}
function reissue(key) {
  return async function({ awardsService, gameService }, ctx, awardsControllerConfig) {
    const {
      data: { activityId },
      activityInfo
    } = ctx;
    const status = await awardsService.getOpenStatus(key, null, activityInfo);
    console.log(`status=${status}`, status !== ACTIVITY_OPEN_PRIZE_STATUS.SUCCESS);
    if (status !== ACTIVITY_OPEN_PRIZE_STATUS.SUCCESS) {
      return ctx.error(CODE_TYPES.ERROR_ACTIVITY_OPENED_PRIZE, "\u4E0D\u9700\u8981\u8865\u53D1");
    }
    const prizeList = await awardsService.getPrizeConfig(key, activityId);
    const { openPrize } = awardsControllerConfig;
    console.log(openPrize, "openPrize");
    switch (openPrize[key].type) {
      case "awards":
      case "game":
        let userRank = [];
        if (openPrize[key].type === "game") {
          userRank = await gameService.getUserRankList(key, openPrize[key].sortType, getMaxRank(prizeList), activityId, false);
        } else if (openPrize[key].type === "awards") {
          userRank = await awardsService.getUserRankList(key, getMaxRank(prizeList), activityId, false);
        }
        const myRank = userRank.find((itm) => itm.openId === ctx.userInfo.openId);
        if (!myRank) {
          return ctx.error(CODE_TYPES.ERROR_NO_PRIZE, "\u7528\u6237\u6CA1\u6709\u4E0A\u699C");
        }
        const myPrize = prizeList.find((itm) => {
          const [min, max] = itm.rank.split("-");
          if (+min <= myRank.rank && myRank.rank <= +max) {
            return true;
          }
          return false;
        });
        if (!myPrize) {
          return ctx.error(CODE_TYPES.ERROR_NO_PRIZE);
        }
        const lastPrize = await awardsService.getMyLastOpenRankPrize(key);
        if (lastPrize.length) {
          return ctx.error(CODE_TYPES.ERROR_RECEIVE_PRIZE, "\u5956\u54C1\u5DF2\u53D1\u653E");
        }
        const { _id, prizeDataType, ename, type, image, name: name2, credits, amount, itemId, skuId } = myPrize;
        const {
          userInfo: { avatar, userNick, openId }
        } = ctx;
        const awards = {
          avatar,
          userNick,
          openId,
          activityId,
          prizeId: _id,
          prizeDataType,
          ename,
          type,
          image,
          name: name2,
          credits,
          amount,
          itemId,
          skuId,
          drawStatus: DRAW_STATUS.WAITAWARD,
          rank: myRank.rank,
          createTime: Date.now(),
          createDay: getToday()
        };
        await awardsService.sendPrizeList([awards], key);
        break;
      case "relay":
        break;
    }
  };
}

// src/apis/task/getTaskList.ts
var Params5 = class {
};
__decorateClass([
  (0, import_class_validator6.IsNotEmpty)(),
  (0, import_class_validator6.IsString)()
], Params5.prototype, "activityId", 2);
__decorateClass([
  (0, import_class_validator6.IsNotEmpty)(),
  (0, import_class_validator6.IsBoolean)()
], Params5.prototype, "isVip", 2);
var GetTaskListController = class {
  async getTaskList(ctx, res) {
    const list = await this.taskService.getTaskList(ctx);
    return res.success({ list });
  }
};
__decorateClass([
  Validate(Params5),
  Inject(),
  Before(updateFollowTask("follow"), updateOrderTask("order"), updateOrderTask("preOrder"))
], GetTaskListController.prototype, "getTaskList", 1);
GetTaskListController = __decorateClass([
  Module({
    name: "task",
    deps: [TaskService, UserService, OrderService]
  })
], GetTaskListController);

// src/apis/task/completeTask.ts
var import_class_validator7 = __toModule(require_cjs2());
var Params6 = class {
};
__decorateClass([
  (0, import_class_validator7.IsNotEmpty)(),
  (0, import_class_validator7.IsString)()
], Params6.prototype, "activityId", 2);
__decorateClass([
  (0, import_class_validator7.IsNotEmpty)(),
  (0, import_class_validator7.IsString)()
], Params6.prototype, "key", 2);
var CompleteTaskController = class {
  async completeTask(ctx, res) {
    const { key } = ctx.data;
    const completeTaskResult = await this.taskService.completeTask(ctx, key, ctx.data);
    return res.success(completeTaskResult);
  }
};
__decorateClass([
  Validate(Params6),
  Inject()
], CompleteTaskController.prototype, "completeTask", 1);
CompleteTaskController = __decorateClass([
  Module({
    name: "task",
    deps: [TaskService, UserService]
  })
], CompleteTaskController);

// src/apis/task/openLimitTask.ts
var import_class_validator8 = __toModule(require_cjs2());
var Params7 = class {
};
__decorateClass([
  (0, import_class_validator8.IsNotEmpty)(),
  (0, import_class_validator8.IsString)()
], Params7.prototype, "activityId", 2);
var OpenLimitTaskController = class {
  async openLimitTask(ctx, res) {
    const openLimitTaskResult = await this.taskService.openLimitTask(ctx);
    return res.success(openLimitTaskResult);
  }
};
__decorateClass([
  Validate(Params7),
  Inject()
], OpenLimitTaskController.prototype, "openLimitTask", 1);
OpenLimitTaskController = __decorateClass([
  Module({
    name: "task",
    deps: [TaskService]
  })
], OpenLimitTaskController);

// src/apis/task/receiveTask.ts
var import_class_validator9 = __toModule(require_cjs2());

// src/mini-tornado/utils/rewardCenter.ts
var RewardCenter = class {
  constructor(target, rewardConfig, awardCount) {
    var _a;
    this.rewardConfig = rewardConfig;
    this.rewardType = (_a = this.rewardConfig) == null ? void 0 : _a.rewardType;
    this.target = target;
    this.result = null;
    this.awardCount = awardCount;
  }
  async send() {
    var _a;
    return await ((_a = this == null ? void 0 : this[this.rewardType]) == null ? void 0 : _a.call(this));
  }
  async awards() {
    const { rewardKey, subKey } = this.rewardConfig;
    const { awardsService } = this.target;
    const awardConfig = this.getConfigByKey(awardsService.config.rules, rewardKey);
    const { prizePoolType, exchangeKeys } = awardConfig;
    let result;
    if (prizePoolType === PRIZE_POOL_TYPE.SIMPLE) {
      for (let i = 0; i < this.awardCount; i++) {
        result = await awardsService.sendPrizeByKey(rewardKey);
      }
    } else {
      if (prizePoolType === PRIZE_POOL_TYPE.EXCHANGE && Object.keys(exchangeKeys).length) {
        result = await awardsService.addTickets(rewardKey, this.awardCount, subKey);
      } else {
        result = await awardsService.addTickets(rewardKey, this.awardCount);
      }
    }
    return result;
  }
  async game() {
    var _a;
    const { rewardKey, rewardContent, subKey } = this.rewardConfig;
    const { gameService } = this.target;
    let result;
    const gameConfig = this.getConfigByKey(gameService.config.rules, rewardKey);
    if ((_a = gameConfig == null ? void 0 : gameConfig.tools) == null ? void 0 : _a.length) {
      if (rewardContent === "ticket") {
        result = await gameService.addTickets(rewardKey, this.awardCount);
      } else if (rewardContent === "tool") {
        result = await gameService.addGameTools(rewardKey, { [subKey]: this.awardCount });
      }
    } else {
      result = await gameService.addTickets(rewardKey, this.awardCount);
    }
    return result;
  }
  async card() {
    const { rewardKey, rewardContent, subKey } = this.rewardConfig;
    const { cardService } = this.target;
    const cardConfig = this.getConfigByKey(cardService.config.rules, rewardKey);
    const { cardRule } = cardConfig;
    if (cardRule === 1) {
      if (rewardContent === "ticket") {
        return await cardService.addTickets(rewardKey, this.awardCount);
      } else if (rewardContent === "card") {
        return await cardService.addUserCard(rewardKey, this.awardCount, subKey);
      }
    } else if (cardRule === 2) {
      return await cardService.addUserCard(rewardKey, this.awardCount);
    }
  }
  async user() {
    const { userService } = this.target;
    return await userService.addTickets(this.awardCount);
  }
  getConfigByKey(config2, key) {
    return config2.find((itm) => (itm == null ? void 0 : itm.key) === key);
  }
};

// src/apis/task/receiveTask.ts
var Params8 = class {
};
__decorateClass([
  (0, import_class_validator9.IsNotEmpty)(),
  (0, import_class_validator9.IsString)()
], Params8.prototype, "activityId", 2);
__decorateClass([
  (0, import_class_validator9.IsNotEmpty)(),
  (0, import_class_validator9.IsString)()
], Params8.prototype, "key", 2);
var ReceiveTaskController = class {
  async receiveTask(ctx, res) {
    var _a;
    const { key } = ctx.data;
    const reward = await this.taskService.resetTaskRemainTime(ctx);
    const rewardResult = await new RewardCenter(this, (_a = this.controllerConfig) == null ? void 0 : _a[key], reward).send();
    return res.success({ reward, rewardResult });
  }
};
__decorateClass([
  Validate(Params8),
  Inject({ middlewares: ["checkActivityTime"] })
], ReceiveTaskController.prototype, "receiveTask", 1);
ReceiveTaskController = __decorateClass([
  Module({
    name: "task",
    deps: [TaskService, GameService, AwardsService, UserService]
  })
], ReceiveTaskController);

// src/apis/task/getCollectGoods.ts
var import_class_validator10 = __toModule(require_cjs2());
var Params9 = class {
};
__decorateClass([
  (0, import_class_validator10.IsNotEmpty)(),
  (0, import_class_validator10.IsString)()
], Params9.prototype, "activityId", 2);
var GetCollectGoodsController = class {
  async getCollectGoods(ctx, res) {
    const list = await this.taskService.getCollectGoods(ctx);
    return res.success({ list });
  }
};
__decorateClass([
  Validate(Params9),
  Inject({ middlewares: ["session"] })
], GetCollectGoodsController.prototype, "getCollectGoods", 1);
GetCollectGoodsController = __decorateClass([
  Module({
    name: "task",
    deps: [TaskService]
  })
], GetCollectGoodsController);

// src/apis/awards/drawLottery.ts
var import_class_validator11 = __toModule(require_cjs2());
var Params10 = class {
};
__decorateClass([
  (0, import_class_validator11.IsNotEmpty)(),
  (0, import_class_validator11.IsString)()
], Params10.prototype, "activityId", 2);
__decorateClass([
  (0, import_class_validator11.IsNotEmpty)(),
  (0, import_class_validator11.IsString)()
], Params10.prototype, "key", 2);
var DrawLotteryController = class {
  async drawLottery(ctx, res) {
    const { key } = ctx.data;
    const drawLotteryResult = await this.awardsService.drawLottery(key);
    return res.success(drawLotteryResult);
  }
};
__decorateClass([
  Validate(Params10),
  Inject({ middlewares: ["checkActivityTime"] })
], DrawLotteryController.prototype, "drawLottery", 1);
DrawLotteryController = __decorateClass([
  Module({
    name: "awards",
    deps: [AwardsService]
  })
], DrawLotteryController);

// src/apis/awards/exchangePrize.ts
var import_class_validator12 = __toModule(require_cjs2());
var Params11 = class {
};
__decorateClass([
  (0, import_class_validator12.IsNotEmpty)(),
  (0, import_class_validator12.IsString)()
], Params11.prototype, "activityId", 2);
__decorateClass([
  (0, import_class_validator12.IsNotEmpty)(),
  (0, import_class_validator12.IsString)()
], Params11.prototype, "key", 2);
__decorateClass([
  (0, import_class_validator12.IsNotEmpty)(),
  (0, import_class_validator12.IsString)()
], Params11.prototype, "prizeId", 2);
var ExchangePrizeController = class {
  async exchangePrize(ctx, res) {
    const { key, prizeId } = ctx.data;
    const exchangePrizeResult = await this.awardsService.exchangePrize(key, prizeId);
    return res.success(exchangePrizeResult);
  }
};
__decorateClass([
  Validate(Params11),
  Inject({ middlewares: ["checkActivityTime"] })
], ExchangePrizeController.prototype, "exchangePrize", 1);
ExchangePrizeController = __decorateClass([
  Module({
    name: "awards",
    deps: [AwardsService]
  })
], ExchangePrizeController);

// src/apis/awards/getMyAwardsList.ts
var import_class_validator13 = __toModule(require_cjs2());
var Params12 = class {
};
__decorateClass([
  (0, import_class_validator13.IsNotEmpty)(),
  (0, import_class_validator13.IsString)()
], Params12.prototype, "activityId", 2);
var GetMyAwardsListController = class {
  async getMyAwardsList(ctx, res) {
    const result = await this.awardsService.getMyAwardsList();
    return res.success(result);
  }
};
__decorateClass([
  Validate(Params12),
  Inject()
], GetMyAwardsListController.prototype, "getMyAwardsList", 1);
GetMyAwardsListController = __decorateClass([
  Module({
    name: "awards",
    deps: [AwardsService]
  })
], GetMyAwardsListController);

// src/apis/awards/getPrizeConfig.ts
var import_class_validator14 = __toModule(require_cjs2());
var Params13 = class {
};
__decorateClass([
  (0, import_class_validator14.IsNotEmpty)(),
  (0, import_class_validator14.IsString)()
], Params13.prototype, "activityId", 2);
__decorateClass([
  (0, import_class_validator14.IsNotEmpty)(),
  (0, import_class_validator14.IsString)()
], Params13.prototype, "key", 2);
var GetPrizeConfigController = class {
  async getPrizeConfig(ctx, res) {
    const { key } = ctx.data;
    const list = await this.awardsService.getPrizeConfig(key);
    return res.success({ list });
  }
};
__decorateClass([
  Validate(Params13),
  Inject()
], GetPrizeConfigController.prototype, "getPrizeConfig", 1);
GetPrizeConfigController = __decorateClass([
  Module({
    name: "awards",
    deps: [AwardsService]
  })
], GetPrizeConfigController);

// src/apis/awards/openPrize.ts
var OpenPrizeController = class {
  async openPrize(ctx, res) {
    return res.success("success");
  }
};
__decorateClass([
  Inject(),
  Before(openRank("rank1"), openRank("rank2"))
], OpenPrizeController.prototype, "openPrize", 1);
OpenPrizeController = __decorateClass([
  Module({
    name: "awards",
    deps: [ActivityService, AwardsService, GameService]
  })
], OpenPrizeController);

// src/apis/awards/receiveEnamePrize.ts
var import_class_validator15 = __toModule(require_cjs2());
var Params14 = class {
};
__decorateClass([
  (0, import_class_validator15.IsNotEmpty)(),
  (0, import_class_validator15.IsString)()
], Params14.prototype, "activityId", 2);
__decorateClass([
  (0, import_class_validator15.IsNotEmpty)(),
  (0, import_class_validator15.IsString)()
], Params14.prototype, "id", 2);
var ReceiveEnamePrizeController = class {
  async receiveEnamePrize(ctx, res) {
    const { id } = ctx.data;
    const receiveEnamePrizeResult = await this.awardsService.receiveEnamePrize(id);
    return res.success(receiveEnamePrizeResult);
  }
};
__decorateClass([
  Validate(Params14),
  Inject({ middlewares: ["checkPrizeExpired", "session"] })
], ReceiveEnamePrizeController.prototype, "receiveEnamePrize", 1);
ReceiveEnamePrizeController = __decorateClass([
  Module({
    name: "awards",
    deps: [AwardsService]
  })
], ReceiveEnamePrizeController);

// src/apis/awards/receiveObjectPrize.ts
var import_class_validator16 = __toModule(require_cjs2());
var Params15 = class {
};
__decorateClass([
  (0, import_class_validator16.IsNotEmpty)(),
  (0, import_class_validator16.IsString)()
], Params15.prototype, "activityId", 2);
__decorateClass([
  (0, import_class_validator16.IsNotEmpty)(),
  (0, import_class_validator16.IsString)()
], Params15.prototype, "id", 2);
__decorateClass([
  (0, import_class_validator16.IsNotEmpty)(),
  (0, import_class_validator16.IsString)()
], Params15.prototype, "province", 2);
__decorateClass([
  (0, import_class_validator16.IsNotEmpty)(),
  (0, import_class_validator16.IsString)()
], Params15.prototype, "city", 2);
__decorateClass([
  (0, import_class_validator16.IsNotEmpty)(),
  (0, import_class_validator16.IsString)()
], Params15.prototype, "area", 2);
__decorateClass([
  (0, import_class_validator16.IsNotEmpty)(),
  (0, import_class_validator16.IsString)()
], Params15.prototype, "streetName", 2);
__decorateClass([
  (0, import_class_validator16.IsNotEmpty)(),
  (0, import_class_validator16.IsString)()
], Params15.prototype, "addressDetail", 2);
__decorateClass([
  (0, import_class_validator16.IsNotEmpty)(),
  (0, import_class_validator16.IsString)()
], Params15.prototype, "name", 2);
__decorateClass([
  (0, import_class_validator16.IsNotEmpty)(),
  (0, import_class_validator16.IsString)()
], Params15.prototype, "phone", 2);
var ReceiveObjectPrizeController = class {
  async receiveObjectPrize(ctx, res) {
    const receiveObjectPrizeResult = await this.awardsService.receiveObjectPrize();
    return res.success(receiveObjectPrizeResult);
  }
};
__decorateClass([
  Validate(Params15),
  Inject({ middlewares: ["checkPrizeExpired"] })
], ReceiveObjectPrizeController.prototype, "receiveObjectPrize", 1);
ReceiveObjectPrizeController = __decorateClass([
  Module({
    name: "awards",
    deps: [AwardsService]
  })
], ReceiveObjectPrizeController);

// src/apis/awards/reissuePrize.ts
var import_class_validator17 = __toModule(require_cjs2());
var Params16 = class {
};
__decorateClass([
  (0, import_class_validator17.IsNotEmpty)(),
  (0, import_class_validator17.IsString)()
], Params16.prototype, "activityId", 2);
__decorateClass([
  (0, import_class_validator17.IsNotEmpty)(),
  (0, import_class_validator17.IsString)()
], Params16.prototype, "key", 2);
var ReissuePrizeController = class {
  async reissuePrize(ctx, res) {
    const { key } = ctx.data;
    const getMyLastOpenRankPrizeResult = await this.awardsService.getMyLastOpenRankPrize(key);
    return res.success(getMyLastOpenRankPrizeResult);
  }
};
__decorateClass([
  Validate(Params16),
  Inject(),
  Before(reissue("rank1"), reissue("rank2"))
], ReissuePrizeController.prototype, "reissuePrize", 1);
ReissuePrizeController = __decorateClass([
  Module({
    name: "awards",
    deps: [AwardsService, GameService]
  })
], ReissuePrizeController);

// src/apis/awards/getUserRankList.ts
var import_class_validator18 = __toModule(require_cjs2());
var Params17 = class {
};
__decorateClass([
  (0, import_class_validator18.IsNotEmpty)(),
  (0, import_class_validator18.IsString)()
], Params17.prototype, "activityId", 2);
__decorateClass([
  (0, import_class_validator18.IsNotEmpty)(),
  (0, import_class_validator18.IsString)()
], Params17.prototype, "key", 2);
var GetUserRankListController = class {
  async getUserRankList(ctx, res) {
    const {
      data: { key }
    } = ctx;
    const { openPrize } = this.controllerConfig;
    const { type, rankShowNum } = openPrize[key];
    let list = [];
    let myRank = {};
    switch (type) {
      case "awards":
        list = await this.awardsService.getUserRankList(key, rankShowNum);
        myRank = await this.awardsService.getMyRankInfo(key);
        break;
      case "game":
        list = await this.gameService.getUserRankList(openPrize[key].key, openPrize[key].sortType, rankShowNum);
        myRank = await this.gameService.getMyRankInfo(openPrize[key].key, openPrize[key].sortType);
        break;
    }
    return res.success(__spreadValues({
      list
    }, myRank));
  }
};
__decorateClass([
  Validate(Params17),
  Inject()
], GetUserRankListController.prototype, "getUserRankList", 1);
GetUserRankListController = __decorateClass([
  Module({
    name: "awards",
    deps: [AwardsService, GameService]
  })
], GetUserRankListController);

// src/apis/game/addGameTools.ts
var import_class_validator19 = __toModule(require_cjs2());
var Params18 = class {
};
__decorateClass([
  (0, import_class_validator19.IsNotEmpty)(),
  (0, import_class_validator19.IsString)()
], Params18.prototype, "activityId", 2);
__decorateClass([
  (0, import_class_validator19.IsNotEmpty)(),
  (0, import_class_validator19.IsString)()
], Params18.prototype, "key", 2);
__decorateClass([
  (0, import_class_validator19.IsNotEmpty)()
], Params18.prototype, "tools", 2);
__decorateClass([
  (0, import_class_validator19.IsNotEmpty)(),
  (0, import_class_validator19.IsString)()
], Params18.prototype, "gameId", 2);
var AddGameToolsController = class {
  async addGameTools(ctx, res) {
    const { key, tools, gameId } = ctx.data;
    const addGameToolsResult = await this.gameService.addGameTools(key, tools, gameId);
    return res.success(addGameToolsResult);
  }
};
__decorateClass([
  Validate(Params18),
  Inject({ middlewares: ["checkActivityTime"] })
], AddGameToolsController.prototype, "addGameTools", 1);
AddGameToolsController = __decorateClass([
  Module({
    name: "game",
    deps: [GameService]
  })
], AddGameToolsController);

// src/apis/game/reduceGameTools.ts
var import_class_validator20 = __toModule(require_cjs2());
var Params19 = class {
};
__decorateClass([
  (0, import_class_validator20.IsNotEmpty)(),
  (0, import_class_validator20.IsString)()
], Params19.prototype, "activityId", 2);
__decorateClass([
  (0, import_class_validator20.IsNotEmpty)(),
  (0, import_class_validator20.IsString)()
], Params19.prototype, "key", 2);
__decorateClass([
  (0, import_class_validator20.IsNotEmpty)(),
  (0, import_class_validator20.IsString)()
], Params19.prototype, "toolsKey", 2);
__decorateClass([
  (0, import_class_validator20.IsNotEmpty)(),
  (0, import_class_validator20.IsNumber)()
], Params19.prototype, "cosumeCount", 2);
__decorateClass([
  (0, import_class_validator20.IsNotEmpty)(),
  (0, import_class_validator20.IsString)()
], Params19.prototype, "gameId", 2);
var ReduceGameToolsController = class {
  async reduceGameTools(ctx, res) {
    const reduceGameToolsResult = await this.gameService.reduceGameTools();
    return res.success(reduceGameToolsResult);
  }
};
__decorateClass([
  Validate(Params19),
  Inject({ middlewares: ["checkActivityTime"] })
], ReduceGameToolsController.prototype, "reduceGameTools", 1);
ReduceGameToolsController = __decorateClass([
  Module({
    name: "game",
    deps: [GameService]
  })
], ReduceGameToolsController);

// src/apis/game/startGame.ts
var import_class_validator21 = __toModule(require_cjs2());
var Params20 = class {
};
__decorateClass([
  (0, import_class_validator21.IsNotEmpty)(),
  (0, import_class_validator21.IsString)()
], Params20.prototype, "activityId", 2);
__decorateClass([
  (0, import_class_validator21.IsNotEmpty)(),
  (0, import_class_validator21.IsString)()
], Params20.prototype, "key", 2);
var StartGameController = class {
  async startGame(ctx, res) {
    const startGameResult = await this.gameService.startGame();
    return res.success(startGameResult);
  }
};
__decorateClass([
  Validate(Params20),
  Inject({ middlewares: ["checkActivityTime"] })
], StartGameController.prototype, "startGame", 1);
StartGameController = __decorateClass([
  Module({
    name: "game",
    deps: [GameService]
  })
], StartGameController);

// src/apis/game/submitGame.ts
var import_class_validator22 = __toModule(require_cjs2());
var Params21 = class {
};
__decorateClass([
  (0, import_class_validator22.IsNotEmpty)(),
  (0, import_class_validator22.IsString)()
], Params21.prototype, "activityId", 2);
__decorateClass([
  (0, import_class_validator22.IsNotEmpty)(),
  (0, import_class_validator22.IsString)()
], Params21.prototype, "key", 2);
__decorateClass([
  (0, import_class_validator22.IsNotEmpty)(),
  (0, import_class_validator22.IsString)()
], Params21.prototype, "gameId", 2);
__decorateClass([
  (0, import_class_validator22.IsNotEmpty)(),
  (0, import_class_validator22.IsNumber)()
], Params21.prototype, "score", 2);
var SubmitGameController = class {
  async submitGame(ctx, res) {
    var _a, _b, _c;
    const { key } = ctx.data;
    const result = await this.gameService.submitGame();
    const reward = ((_b = (_a = this.controllerConfig) == null ? void 0 : _a[key]) == null ? void 0 : _b[`level${result.level}`]) || ((_c = this.controllerConfig) == null ? void 0 : _c[key]);
    if (!(reward == null ? void 0 : reward.reward)) {
      return res.success(result);
    }
    const { ratePass, rulePass } = this.gameService.judgePass(reward, result);
    if (ratePass && rulePass) {
      const rewardConfig = (result == null ? void 0 : result.level) ? this.controllerConfig[key] : this.controllerConfig;
      const rewardkey = (result == null ? void 0 : result.level) ? `level${result.level}` : key;
      const rewardResult = await new RewardCenter(this, rewardConfig == null ? void 0 : rewardConfig[rewardkey], reward.count).send();
      return res.success(__spreadProps(__spreadValues({}, result), {
        rewardResult
      }));
    }
    return res.success(result);
  }
};
__decorateClass([
  Validate(Params21),
  Inject({ middlewares: ["checkActivityTime"] })
], SubmitGameController.prototype, "submitGame", 1);
SubmitGameController = __decorateClass([
  Module({
    name: "game",
    deps: [GameService, AwardsService]
  })
], SubmitGameController);

// src/apis/stat/addStat.ts
var import_class_validator23 = __toModule(require_cjs2());
var Params22 = class {
};
__decorateClass([
  (0, import_class_validator23.IsNotEmpty)(),
  (0, import_class_validator23.IsString)()
], Params22.prototype, "activityId", 2);
__decorateClass([
  (0, import_class_validator23.IsNotEmpty)(),
  (0, import_class_validator23.IsString)()
], Params22.prototype, "key", 2);
var AddStatController = class {
  async addStat(ctx, res) {
    const { key, customObject } = ctx.data;
    const addStatResult = await this.statService.addStat(key, customObject);
    return res.success(addStatResult);
  }
};
__decorateClass([
  Validate(Params22),
  Inject()
], AddStatController.prototype, "addStat", 1);
AddStatController = __decorateClass([
  Module({
    name: "stat",
    deps: [StatService]
  })
], AddStatController);

// src/apis/stat/getTotalStats.ts
var import_class_validator24 = __toModule(require_cjs2());
var Params23 = class {
};
__decorateClass([
  (0, import_class_validator24.IsNotEmpty)(),
  (0, import_class_validator24.IsString)()
], Params23.prototype, "activityId", 2);
__decorateClass([
  (0, import_class_validator24.IsNotEmpty)(),
  (0, import_class_validator24.IsString)()
], Params23.prototype, "startDay", 2);
__decorateClass([
  (0, import_class_validator24.IsNotEmpty)(),
  (0, import_class_validator24.IsString)()
], Params23.prototype, "endDay", 2);
var GetTotalStatsController = class {
  async getTotalStats(ctx, res) {
    const [user, task, game, stat] = await Promise.all([
      this.userService.getStats(this.controllerConfig.user),
      this.taskService.getStats(this.controllerConfig.task),
      this.gameService.getStats(this.controllerConfig.game),
      this.statService.getStats(this.controllerConfig.stat)
    ]);
    return res.success({ user, task, game, stat });
  }
};
__decorateClass([
  Validate(Params23),
  Inject()
], GetTotalStatsController.prototype, "getTotalStats", 1);
GetTotalStatsController = __decorateClass([
  Module({
    name: "stat",
    deps: [UserService, TaskService, GameService, StatService]
  })
], GetTotalStatsController);

// src/apis/stat/getTotalStatsByExcel.ts
var import_class_validator25 = __toModule(require_cjs2());
var Params24 = class {
};
__decorateClass([
  (0, import_class_validator25.IsNotEmpty)(),
  (0, import_class_validator25.IsString)()
], Params24.prototype, "activityId", 2);
__decorateClass([
  (0, import_class_validator25.IsNotEmpty)(),
  (0, import_class_validator25.IsString)()
], Params24.prototype, "startDay", 2);
__decorateClass([
  (0, import_class_validator25.IsNotEmpty)(),
  (0, import_class_validator25.IsString)()
], Params24.prototype, "endDay", 2);
var GetTotalStatsByExcelController = class {
  async getTotalStatsByExcel(ctx, res) {
    const { startDay, endDay } = ctx.data;
    const [user, task, game, stat] = await Promise.all([
      this.userService.getStats(this.controllerConfig.user),
      this.taskService.getStats(this.controllerConfig.task),
      this.gameService.getStats(this.controllerConfig.game),
      this.statService.getStats(this.controllerConfig.stat)
    ]);
    const getExcelResult = await this.statService.getExcel({ user, task, game, stat });
    const buildExcelResult = await this.statService.buildExcel(startDay, endDay, getExcelResult);
    return res.success(buildExcelResult);
  }
};
__decorateClass([
  Validate(Params24),
  Inject()
], GetTotalStatsByExcelController.prototype, "getTotalStatsByExcel", 1);
GetTotalStatsByExcelController = __decorateClass([
  Module({
    name: "stat",
    deps: [UserService, TaskService, GameService, StatService]
  })
], GetTotalStatsByExcelController);

// src/index.ts
require_source_map_support().install();
var IS_MOCK_ENV2 = process.argv[2] === "mock";
if (!IS_MOCK_ENV2) {
  require_register();
}
var app = new Container(project_config_default);
var defaultMiddleWares = [
  getActivityInfo,
  getMoudlesUser,
  checkUser({ ignore: ["login", "getActivityBaseInfoById", "getTotalStatsByExcel", "getTotalStats", "openPrize"] }),
  initServiceIntance,
  updateVip,
  updateFollow
];
app.use("/", defaultMiddleWares).loadStats(stats);
var src_default = app.init();
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {});
/*!
 * Recursively set nested arrays
 */
/*!
 * Returns the value passed to it.
 */
/*! *****************************************************************************
Copyright (C) Microsoft. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/*! cpexcel.js (C) 2013-present SheetJS -- http://sheetjs.com */
/*! cputils.js (C) 2013-present SheetJS -- http://sheetjs.com */
/*! xlsx.js (C) 2013-present SheetJS -- http://sheetjs.com */
/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
//# sourceMappingURL=main.js.map
